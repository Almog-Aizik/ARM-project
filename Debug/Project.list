
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014688  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c7c  08014838  08014838  00024838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080174b4  080174b4  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080174b4  080174b4  000274b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080174bc  080174bc  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080174bc  080174bc  000274bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080174c0  080174c0  000274c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080174c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
 10 .bss          00008f40  2000007c  2000007c  0003007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008fbc  20008fbc  0003007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021d40  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005669  00000000  00000000  00051dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001818  00000000  00000000  00057458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001790  00000000  00000000  00058c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fdb9  00000000  00000000  0005a400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029679  00000000  00000000  0008a1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef0ab  00000000  00000000  000b3832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a28dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006cfc  00000000  00000000  001a2930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014820 	.word	0x08014820

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08014820 	.word	0x08014820

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_SPI_RxCpltCallback>:
static void MX_SPI4_Init(void);
static void MX_UART4_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	SPIflag = 1;
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_SPI_RxCpltCallback+0x1c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000502 	.word	0x20000502

080005b4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	I2Cflag = 1;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000501 	.word	0x20000501

080005d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	UARTflag = 1;
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <HAL_UART_RxCpltCallback+0x1c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000503 	.word	0x20000503

080005f4 <udp_transmit>:
void udp_transmit(struct udp_pcb *upcb, int len, char mem[100])
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
//  prepare variables
	ip_addr_t addr = upcb->remote_ip;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	617b      	str	r3, [r7, #20]
	u16_t port = upcb->remote_port;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	8a9b      	ldrh	r3, [r3, #20]
 800060a:	83fb      	strh	r3, [r7, #30]
//	prepare buffer
	struct pbuf *txBuf;
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	b29b      	uxth	r3, r3
 8000610:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000614:	4619      	mov	r1, r3
 8000616:	2036      	movs	r0, #54	; 0x36
 8000618:	f009 fda6 	bl	800a168 <pbuf_alloc>
 800061c:	61b8      	str	r0, [r7, #24]
	pbuf_take(txBuf, mem, len);
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	b29b      	uxth	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	69b8      	ldr	r0, [r7, #24]
 8000628:	f00a faee 	bl	800ac08 <pbuf_take>
//	send data
	udp_connect(upcb, &addr, port);
 800062c:	8bfa      	ldrh	r2, [r7, #30]
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	f010 fa85 	bl	8010b44 <udp_connect>
	udp_send(upcb, txBuf);
 800063a:	69b9      	ldr	r1, [r7, #24]
 800063c:	68f8      	ldr	r0, [r7, #12]
 800063e:	f010 f80f 	bl	8010660 <udp_send>
	udp_disconnect(upcb);
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f010 faec 	bl	8010c20 <udp_disconnect>
//	release buffer
	pbuf_free(txBuf);
 8000648:	69b8      	ldr	r0, [r7, #24]
 800064a:	f00a f871 	bl	800a730 <pbuf_free>
}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <Timeout>:

char Timeout(char * flag)
{
 8000656:	b590      	push	{r4, r7, lr}
 8000658:	b085      	sub	sp, #20
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	int Ctime = HAL_GetTick();
 800065e:	f001 fa5f 	bl	8001b20 <HAL_GetTick>
 8000662:	4603      	mov	r3, r0
 8000664:	60fb      	str	r3, [r7, #12]
	while(*flag == 0)
 8000666:	e009      	b.n	800067c <Timeout+0x26>
	{
		if(Ctime + 10 < HAL_GetTick())
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	330a      	adds	r3, #10
 800066c:	461c      	mov	r4, r3
 800066e:	f001 fa57 	bl	8001b20 <HAL_GetTick>
 8000672:	4603      	mov	r3, r0
 8000674:	429c      	cmp	r4, r3
 8000676:	d201      	bcs.n	800067c <Timeout+0x26>
		{
			return 1;
 8000678:	2301      	movs	r3, #1
 800067a:	e004      	b.n	8000686 <Timeout+0x30>
	while(*flag == 0)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0f1      	beq.n	8000668 <Timeout+0x12>
		}
	}

	return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bd90      	pop	{r4, r7, pc}

0800068e <ReleaseDMA>:
void ReleaseDMA(DMA_HandleTypeDef *hdma1, DMA_HandleTypeDef *hdma2)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
	HAL_DMA_Abort(hdma1);
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f001 fc89 	bl	8001fb0 <HAL_DMA_Abort>
	HAL_DMA_Abort(hdma2);
 800069e:	6838      	ldr	r0, [r7, #0]
 80006a0:	f001 fc86 	bl	8001fb0 <HAL_DMA_Abort>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09a      	sub	sp, #104	; 0x68
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char send[100]= { 0 };
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	2260      	movs	r2, #96	; 0x60
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f012 fea2 	bl	8013408 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f001 f9c6 	bl	8001a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f936 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f000 fb5a 	bl	8000d84 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d0:	f000 fb02 	bl	8000cd8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80006d4:	f000 faac 	bl	8000c30 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80006d8:	f008 f89c 	bl	8008814 <MX_LWIP_Init>
  MX_I2C1_Init();
 80006dc:	f000 f996 	bl	8000a0c <MX_I2C1_Init>
  MX_I2C2_Init();
 80006e0:	f000 f9d4 	bl	8000a8c <MX_I2C2_Init>
  MX_SPI2_Init();
 80006e4:	f000 fa12 	bl	8000b0c <MX_SPI2_Init>
  MX_SPI4_Init();
 80006e8:	f000 fa42 	bl	8000b70 <MX_SPI4_Init>
  MX_UART4_Init();
 80006ec:	f000 fa76 	bl	8000bdc <MX_UART4_Init>
  MX_USART6_UART_Init();
 80006f0:	f000 fac8 	bl	8000c84 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  udpServer_init();
 80006f4:	f001 f924 	bl	8001940 <udpServer_init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 80006f8:	4877      	ldr	r0, [pc, #476]	; (80008d8 <main+0x22c>)
 80006fa:	f008 fc89 	bl	8009010 <ethernetif_input>
	  sys_check_timeouts();
 80006fe:	f00f fdab 	bl	8010258 <sys_check_timeouts>
	  if(received)
 8000702:	4b76      	ldr	r3, [pc, #472]	; (80008dc <main+0x230>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	f000 80ba 	beq.w	8000880 <main+0x1d4>
	  {
		  protocol = mem[0];
 800070c:	4b74      	ldr	r3, [pc, #464]	; (80008e0 <main+0x234>)
 800070e:	781a      	ldrb	r2, [r3, #0]
 8000710:	4b74      	ldr	r3, [pc, #464]	; (80008e4 <main+0x238>)
 8000712:	701a      	strb	r2, [r3, #0]
		  if(len >= 1)
 8000714:	4b74      	ldr	r3, [pc, #464]	; (80008e8 <main+0x23c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	f340 80a4 	ble.w	8000866 <main+0x1ba>
		  {
			  if(protocol == '1')
 800071e:	4b71      	ldr	r3, [pc, #452]	; (80008e4 <main+0x238>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b31      	cmp	r3, #49	; 0x31
 8000724:	d12e      	bne.n	8000784 <main+0xd8>
			  {
				  //SPI send and receive
				  HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)send, len);
 8000726:	4b70      	ldr	r3, [pc, #448]	; (80008e8 <main+0x23c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	b29a      	uxth	r2, r3
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	4619      	mov	r1, r3
 8000730:	486e      	ldr	r0, [pc, #440]	; (80008ec <main+0x240>)
 8000732:	f006 f909 	bl	8006948 <HAL_SPI_Receive_DMA>
				  HAL_SPI_Transmit_DMA(&hspi4, (uint8_t *)&mem[1], len);
 8000736:	4b6c      	ldr	r3, [pc, #432]	; (80008e8 <main+0x23c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	b29b      	uxth	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	496c      	ldr	r1, [pc, #432]	; (80008f0 <main+0x244>)
 8000740:	486c      	ldr	r0, [pc, #432]	; (80008f4 <main+0x248>)
 8000742:	f006 f84b 	bl	80067dc <HAL_SPI_Transmit_DMA>
				  //wait for the data to be received
				  if(Timeout(&SPIflag) == 0)
 8000746:	486c      	ldr	r0, [pc, #432]	; (80008f8 <main+0x24c>)
 8000748:	f7ff ff85 	bl	8000656 <Timeout>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d109      	bne.n	8000766 <main+0xba>
				  {
					  //add header to the data
					  UDPlen = sprintf(header, "SPI- %s\n\r", send);
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	461a      	mov	r2, r3
 8000756:	4969      	ldr	r1, [pc, #420]	; (80008fc <main+0x250>)
 8000758:	4869      	ldr	r0, [pc, #420]	; (8000900 <main+0x254>)
 800075a:	f012 feb3 	bl	80134c4 <siprintf>
 800075e:	4603      	mov	r3, r0
 8000760:	4a68      	ldr	r2, [pc, #416]	; (8000904 <main+0x258>)
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	e089      	b.n	800087a <main+0x1ce>
				  }
				  //error handling
				  else
				  {
					  ReleaseDMA(&hspi2, &hspi4);
 8000766:	4963      	ldr	r1, [pc, #396]	; (80008f4 <main+0x248>)
 8000768:	4860      	ldr	r0, [pc, #384]	; (80008ec <main+0x240>)
 800076a:	f7ff ff90 	bl	800068e <ReleaseDMA>
					  UDPlen = sprintf(header, "Error");
 800076e:	4966      	ldr	r1, [pc, #408]	; (8000908 <main+0x25c>)
 8000770:	4863      	ldr	r0, [pc, #396]	; (8000900 <main+0x254>)
 8000772:	f012 fea7 	bl	80134c4 <siprintf>
 8000776:	4603      	mov	r3, r0
 8000778:	4a62      	ldr	r2, [pc, #392]	; (8000904 <main+0x258>)
 800077a:	6013      	str	r3, [r2, #0]
					  SPIflag = 1;
 800077c:	4b5e      	ldr	r3, [pc, #376]	; (80008f8 <main+0x24c>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
 8000782:	e07a      	b.n	800087a <main+0x1ce>
				  }
			  }
			  else if(protocol == '2')
 8000784:	4b57      	ldr	r3, [pc, #348]	; (80008e4 <main+0x238>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b32      	cmp	r3, #50	; 0x32
 800078a:	d12e      	bne.n	80007ea <main+0x13e>
			  {
				  //I2C send and receive
				  HAL_I2C_Master_Transmit_DMA(&hi2c1, 20, (uint8_t *)&mem[1], len);
 800078c:	4b56      	ldr	r3, [pc, #344]	; (80008e8 <main+0x23c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	b29b      	uxth	r3, r3
 8000792:	4a57      	ldr	r2, [pc, #348]	; (80008f0 <main+0x244>)
 8000794:	2114      	movs	r1, #20
 8000796:	485d      	ldr	r0, [pc, #372]	; (800090c <main+0x260>)
 8000798:	f003 fbbe 	bl	8003f18 <HAL_I2C_Master_Transmit_DMA>
				  HAL_I2C_Slave_Receive_DMA(&hi2c2, (uint8_t *)send, len);
 800079c:	4b52      	ldr	r3, [pc, #328]	; (80008e8 <main+0x23c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	485a      	ldr	r0, [pc, #360]	; (8000910 <main+0x264>)
 80007a8:	f003 fce6 	bl	8004178 <HAL_I2C_Slave_Receive_DMA>
				  //wait for the data to be received
				  if(Timeout(&I2Cflag) == 0)
 80007ac:	4859      	ldr	r0, [pc, #356]	; (8000914 <main+0x268>)
 80007ae:	f7ff ff52 	bl	8000656 <Timeout>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d109      	bne.n	80007cc <main+0x120>
				  {
					  //add a header to the data and prepare it to be sent back
					  UDPlen = sprintf(header, "I2C- %s\n\r", send);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	461a      	mov	r2, r3
 80007bc:	4956      	ldr	r1, [pc, #344]	; (8000918 <main+0x26c>)
 80007be:	4850      	ldr	r0, [pc, #320]	; (8000900 <main+0x254>)
 80007c0:	f012 fe80 	bl	80134c4 <siprintf>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a4f      	ldr	r2, [pc, #316]	; (8000904 <main+0x258>)
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	e056      	b.n	800087a <main+0x1ce>
				  }
				  //error handling
				  else
				  {
					  ReleaseDMA(&hi2c1, &hi2c2);
 80007cc:	4950      	ldr	r1, [pc, #320]	; (8000910 <main+0x264>)
 80007ce:	484f      	ldr	r0, [pc, #316]	; (800090c <main+0x260>)
 80007d0:	f7ff ff5d 	bl	800068e <ReleaseDMA>
					  UDPlen = sprintf(header, "Error");
 80007d4:	494c      	ldr	r1, [pc, #304]	; (8000908 <main+0x25c>)
 80007d6:	484a      	ldr	r0, [pc, #296]	; (8000900 <main+0x254>)
 80007d8:	f012 fe74 	bl	80134c4 <siprintf>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a49      	ldr	r2, [pc, #292]	; (8000904 <main+0x258>)
 80007e0:	6013      	str	r3, [r2, #0]
					  I2Cflag = 1;
 80007e2:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <main+0x268>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
 80007e8:	e047      	b.n	800087a <main+0x1ce>
				  }
			  }
			  else if(protocol == '3')
 80007ea:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <main+0x238>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b33      	cmp	r3, #51	; 0x33
 80007f0:	d12e      	bne.n	8000850 <main+0x1a4>
			  {
				  //UART send and receive
				  HAL_UART_Receive_DMA(&huart6, (uint8_t *)send, len);
 80007f2:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <main+0x23c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4847      	ldr	r0, [pc, #284]	; (800091c <main+0x270>)
 80007fe:	f006 fef3 	bl	80075e8 <HAL_UART_Receive_DMA>
				  HAL_UART_Transmit_DMA(&huart4, (uint8_t *)&mem[1], len);
 8000802:	4b39      	ldr	r3, [pc, #228]	; (80008e8 <main+0x23c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	b29b      	uxth	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	4939      	ldr	r1, [pc, #228]	; (80008f0 <main+0x244>)
 800080c:	4844      	ldr	r0, [pc, #272]	; (8000920 <main+0x274>)
 800080e:	f006 fe6d 	bl	80074ec <HAL_UART_Transmit_DMA>
				  //wait for the data to be received
				  if(Timeout(&UARTflag) == 0)
 8000812:	4844      	ldr	r0, [pc, #272]	; (8000924 <main+0x278>)
 8000814:	f7ff ff1f 	bl	8000656 <Timeout>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d109      	bne.n	8000832 <main+0x186>
				  {
					  //add a header to the data and prepare it to be sent back
					  UDPlen = sprintf(header, "UART - %s\n\r", send);
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	461a      	mov	r2, r3
 8000822:	4941      	ldr	r1, [pc, #260]	; (8000928 <main+0x27c>)
 8000824:	4836      	ldr	r0, [pc, #216]	; (8000900 <main+0x254>)
 8000826:	f012 fe4d 	bl	80134c4 <siprintf>
 800082a:	4603      	mov	r3, r0
 800082c:	4a35      	ldr	r2, [pc, #212]	; (8000904 <main+0x258>)
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	e023      	b.n	800087a <main+0x1ce>
				  }
				  //error handling
				  else
				  {
					  ReleaseDMA(&hi2c1, &hi2c2);
 8000832:	4937      	ldr	r1, [pc, #220]	; (8000910 <main+0x264>)
 8000834:	4835      	ldr	r0, [pc, #212]	; (800090c <main+0x260>)
 8000836:	f7ff ff2a 	bl	800068e <ReleaseDMA>
					  UDPlen = sprintf(header, "Error");
 800083a:	4933      	ldr	r1, [pc, #204]	; (8000908 <main+0x25c>)
 800083c:	4830      	ldr	r0, [pc, #192]	; (8000900 <main+0x254>)
 800083e:	f012 fe41 	bl	80134c4 <siprintf>
 8000842:	4603      	mov	r3, r0
 8000844:	4a2f      	ldr	r2, [pc, #188]	; (8000904 <main+0x258>)
 8000846:	6013      	str	r3, [r2, #0]
					  UARTflag = 1;
 8000848:	4b36      	ldr	r3, [pc, #216]	; (8000924 <main+0x278>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e014      	b.n	800087a <main+0x1ce>
				  }
			  }
			  else
			  {
				  UDPlen = sprintf(header, "Unknown Protocol");
 8000850:	4936      	ldr	r1, [pc, #216]	; (800092c <main+0x280>)
 8000852:	482b      	ldr	r0, [pc, #172]	; (8000900 <main+0x254>)
 8000854:	f012 fe36 	bl	80134c4 <siprintf>
 8000858:	4603      	mov	r3, r0
 800085a:	4a2a      	ldr	r2, [pc, #168]	; (8000904 <main+0x258>)
 800085c:	6013      	str	r3, [r2, #0]
				  UARTflag = 1;
 800085e:	4b31      	ldr	r3, [pc, #196]	; (8000924 <main+0x278>)
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	e009      	b.n	800087a <main+0x1ce>
			  }
		  }
		  else
		  {
			  UDPlen = sprintf(header, "Empty Packet");
 8000866:	4932      	ldr	r1, [pc, #200]	; (8000930 <main+0x284>)
 8000868:	4825      	ldr	r0, [pc, #148]	; (8000900 <main+0x254>)
 800086a:	f012 fe2b 	bl	80134c4 <siprintf>
 800086e:	4603      	mov	r3, r0
 8000870:	4a24      	ldr	r2, [pc, #144]	; (8000904 <main+0x258>)
 8000872:	6013      	str	r3, [r2, #0]
			  UARTflag = 1;
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <main+0x278>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
		  }
		  received = 0;
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <main+0x230>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
	  }
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  if(I2Cflag || SPIflag ||UARTflag)
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <main+0x268>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d108      	bne.n	800089a <main+0x1ee>
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <main+0x24c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d104      	bne.n	800089a <main+0x1ee>
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <main+0x278>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	f43f af2f 	beq.w	80006f8 <main+0x4c>
	  {
		  //send back data + header
		  header[UDPlen + 1] = 0;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <main+0x258>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	4a17      	ldr	r2, [pc, #92]	; (8000900 <main+0x254>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	54d1      	strb	r1, [r2, r3]
		  udp_transmit(udp_info, UDPlen, header);
 80008a6:	4b23      	ldr	r3, [pc, #140]	; (8000934 <main+0x288>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a16      	ldr	r2, [pc, #88]	; (8000904 <main+0x258>)
 80008ac:	6811      	ldr	r1, [r2, #0]
 80008ae:	4a14      	ldr	r2, [pc, #80]	; (8000900 <main+0x254>)
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fe9f 	bl	80005f4 <udp_transmit>
		  //reset variables
		  I2Cflag = 0;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <main+0x268>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
		  SPIflag = 0;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <main+0x24c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
		  UARTflag = 0;
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <main+0x278>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
		  //reset memory back to 0
		  memset(send, 0, 100);
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2264      	movs	r2, #100	; 0x64
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f012 fd9a 	bl	8013408 <memset>
	  ethernetif_input(&gnetif);
 80008d4:	e710      	b.n	80006f8 <main+0x4c>
 80008d6:	bf00      	nop
 80008d8:	200005ec 	.word	0x200005ec
 80008dc:	20000500 	.word	0x20000500
 80008e0:	20000504 	.word	0x20000504
 80008e4:	20000000 	.word	0x20000000
 80008e8:	200005dc 	.word	0x200005dc
 80008ec:	20000200 	.word	0x20000200
 80008f0:	20000505 	.word	0x20000505
 80008f4:	20000258 	.word	0x20000258
 80008f8:	20000502 	.word	0x20000502
 80008fc:	08014838 	.word	0x08014838
 8000900:	2000056c 	.word	0x2000056c
 8000904:	200005e0 	.word	0x200005e0
 8000908:	08014844 	.word	0x08014844
 800090c:	20000098 	.word	0x20000098
 8000910:	200000ec 	.word	0x200000ec
 8000914:	20000501 	.word	0x20000501
 8000918:	0801484c 	.word	0x0801484c
 800091c:	200003f8 	.word	0x200003f8
 8000920:	20000370 	.word	0x20000370
 8000924:	20000503 	.word	0x20000503
 8000928:	08014858 	.word	0x08014858
 800092c:	08014864 	.word	0x08014864
 8000930:	08014878 	.word	0x08014878
 8000934:	200004fc 	.word	0x200004fc

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	; 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2230      	movs	r2, #48	; 0x30
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f012 fd5e 	bl	8013408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <SystemClock_Config+0xcc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a27      	ldr	r2, [pc, #156]	; (8000a04 <SystemClock_Config+0xcc>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <SystemClock_Config+0xcc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <SystemClock_Config+0xd0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <SystemClock_Config+0xd0>)
 8000982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <SystemClock_Config+0xd0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000998:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009ac:	23a8      	movs	r3, #168	; 0xa8
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009b4:	2307      	movs	r3, #7
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	4618      	mov	r0, r3
 80009be:	f005 f9eb 	bl	8005d98 <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009c8:	f000 fab8 	bl	8000f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009cc:	230f      	movs	r3, #15
 80009ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d0:	2302      	movs	r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2105      	movs	r1, #5
 80009ea:	4618      	mov	r0, r3
 80009ec:	f005 fc4c 	bl	8006288 <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009f6:	f000 faa1 	bl	8000f3c <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	3750      	adds	r7, #80	; 0x50
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40007000 	.word	0x40007000

08000a0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <MX_I2C1_Init+0x78>)
 8000a14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a18:	4a1b      	ldr	r2, [pc, #108]	; (8000a88 <MX_I2C1_Init+0x7c>)
 8000a1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a4a:	f003 f921 	bl	8003c90 <HAL_I2C_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a54:	f000 fa72 	bl	8000f3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4809      	ldr	r0, [pc, #36]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a5c:	f005 f921 	bl	8005ca2 <HAL_I2CEx_ConfigAnalogFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a66:	f000 fa69 	bl	8000f3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_I2C1_Init+0x74>)
 8000a6e:	f005 f954 	bl	8005d1a <HAL_I2CEx_ConfigDigitalFilter>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a78:	f000 fa60 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000098 	.word	0x20000098
 8000a84:	40005400 	.word	0x40005400
 8000a88:	000186a0 	.word	0x000186a0

08000a8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_I2C2_Init+0x74>)
 8000a92:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <MX_I2C2_Init+0x78>)
 8000a94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_I2C2_Init+0x74>)
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <MX_I2C2_Init+0x7c>)
 8000a9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_I2C2_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 20;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_I2C2_Init+0x74>)
 8000aa4:	2214      	movs	r2, #20
 8000aa6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_I2C2_Init+0x74>)
 8000aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_I2C2_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_I2C2_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_I2C2_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_I2C2_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <MX_I2C2_Init+0x74>)
 8000aca:	f003 f8e1 	bl	8003c90 <HAL_I2C_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ad4:	f000 fa32 	bl	8000f3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4809      	ldr	r0, [pc, #36]	; (8000b00 <MX_I2C2_Init+0x74>)
 8000adc:	f005 f8e1 	bl	8005ca2 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000ae6:	f000 fa29 	bl	8000f3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_I2C2_Init+0x74>)
 8000aee:	f005 f914 	bl	8005d1a <HAL_I2CEx_ConfigDigitalFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000af8:	f000 fa20 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000ec 	.word	0x200000ec
 8000b04:	40005800 	.word	0x40005800
 8000b08:	000186a0 	.word	0x000186a0

08000b0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_SPI2_Init+0x5c>)
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <MX_SPI2_Init+0x60>)
 8000b14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_SPI2_Init+0x5c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_SPI2_Init+0x5c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_SPI2_Init+0x5c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_SPI2_Init+0x5c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_SPI2_Init+0x5c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_SPI2_Init+0x5c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_SPI2_Init+0x5c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_SPI2_Init+0x5c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_SPI2_Init+0x5c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_SPI2_Init+0x5c>)
 8000b4e:	220a      	movs	r2, #10
 8000b50:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_SPI2_Init+0x5c>)
 8000b54:	f005 fdb8 	bl	80066c8 <HAL_SPI_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8000b5e:	f000 f9ed 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000200 	.word	0x20000200
 8000b6c:	40003800 	.word	0x40003800

08000b70 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_SPI4_Init+0x64>)
 8000b76:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <MX_SPI4_Init+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_SPI4_Init+0x64>)
 8000b7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b80:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_SPI4_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_SPI4_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_SPI4_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_SPI4_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_SPI4_Init+0x64>)
 8000b9c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ba0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_SPI4_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_SPI4_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_SPI4_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_SPI4_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_SPI4_Init+0x64>)
 8000bbc:	220a      	movs	r2, #10
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_SPI4_Init+0x64>)
 8000bc2:	f005 fd81 	bl	80066c8 <HAL_SPI_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000bcc:	f000 f9b6 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000258 	.word	0x20000258
 8000bd8:	40013400 	.word	0x40013400

08000bdc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_UART4_Init+0x4c>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <MX_UART4_Init+0x50>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_UART4_Init+0x4c>)
 8000be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_UART4_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_UART4_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_UART4_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_UART4_Init+0x4c>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_UART4_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_UART4_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_UART4_Init+0x4c>)
 8000c14:	f006 fc1c 	bl	8007450 <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c1e:	f000 f98d 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000370 	.word	0x20000370
 8000c2c:	40004c00 	.word	0x40004c00

08000c30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_USART3_UART_Init+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c68:	f006 fbf2 	bl	8007450 <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c72:	f000 f963 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200003b4 	.word	0x200003b4
 8000c80:	40004800 	.word	0x40004800

08000c84 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART6_UART_Init+0x4c>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <MX_USART6_UART_Init+0x50>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_USART6_UART_Init+0x4c>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USART6_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_USART6_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART6_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_USART6_UART_Init+0x4c>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USART6_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_USART6_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_USART6_UART_Init+0x4c>)
 8000cbc:	f006 fbc8 	bl	8007450 <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000cc6:	f000 f939 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200003f8 	.word	0x200003f8
 8000cd4:	40011400 	.word	0x40011400

08000cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <MX_DMA_Init+0xa8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <MX_DMA_Init+0xa8>)
 8000ce8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <MX_DMA_Init+0xa8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_DMA_Init+0xa8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <MX_DMA_Init+0xa8>)
 8000d04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_DMA_Init+0xa8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	200d      	movs	r0, #13
 8000d1c:	f001 f80b 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d20:	200d      	movs	r0, #13
 8000d22:	f001 f824 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	200e      	movs	r0, #14
 8000d2c:	f001 f803 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d30:	200e      	movs	r0, #14
 8000d32:	f001 f81c 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f000 fffb 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d40:	200f      	movs	r0, #15
 8000d42:	f001 f814 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2011      	movs	r0, #17
 8000d4c:	f000 fff3 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d50:	2011      	movs	r0, #17
 8000d52:	f001 f80c 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2039      	movs	r0, #57	; 0x39
 8000d5c:	f000 ffeb 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d60:	2039      	movs	r0, #57	; 0x39
 8000d62:	f001 f804 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	203a      	movs	r0, #58	; 0x3a
 8000d6c:	f000 ffe3 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d70:	203a      	movs	r0, #58	; 0x3a
 8000d72:	f000 fffc 	bl	8001d6e <HAL_NVIC_EnableIRQ>

}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	; 0x30
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
 8000d9e:	4b62      	ldr	r3, [pc, #392]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a61      	ldr	r2, [pc, #388]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000da4:	f043 0310 	orr.w	r3, r3, #16
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b5f      	ldr	r3, [pc, #380]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	4b5b      	ldr	r3, [pc, #364]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a5a      	ldr	r2, [pc, #360]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b58      	ldr	r3, [pc, #352]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b54      	ldr	r3, [pc, #336]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a53      	ldr	r2, [pc, #332]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b51      	ldr	r3, [pc, #324]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b4d      	ldr	r3, [pc, #308]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a4c      	ldr	r2, [pc, #304]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b4a      	ldr	r3, [pc, #296]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a45      	ldr	r2, [pc, #276]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b43      	ldr	r3, [pc, #268]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a3e      	ldr	r2, [pc, #248]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a37      	ldr	r2, [pc, #220]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <MX_GPIO_Init+0x1a4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000e64:	4831      	ldr	r0, [pc, #196]	; (8000f2c <MX_GPIO_Init+0x1a8>)
 8000e66:	f002 fef9 	bl	8003c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2140      	movs	r1, #64	; 0x40
 8000e6e:	4830      	ldr	r0, [pc, #192]	; (8000f30 <MX_GPIO_Init+0x1ac>)
 8000e70:	f002 fef4 	bl	8003c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	482a      	ldr	r0, [pc, #168]	; (8000f34 <MX_GPIO_Init+0x1b0>)
 8000e8c:	f002 fd3a 	bl	8003904 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000e90:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4820      	ldr	r0, [pc, #128]	; (8000f2c <MX_GPIO_Init+0x1a8>)
 8000eaa:	f002 fd2b 	bl	8003904 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000eae:	2340      	movs	r3, #64	; 0x40
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481a      	ldr	r0, [pc, #104]	; (8000f30 <MX_GPIO_Init+0x1ac>)
 8000ec6:	f002 fd1d 	bl	8003904 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4814      	ldr	r0, [pc, #80]	; (8000f30 <MX_GPIO_Init+0x1ac>)
 8000ede:	f002 fd11 	bl	8003904 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ee2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	480e      	ldr	r0, [pc, #56]	; (8000f38 <MX_GPIO_Init+0x1b4>)
 8000f00:	f002 fd00 	bl	8003904 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <MX_GPIO_Init+0x1b4>)
 8000f1a:	f002 fcf3 	bl	8003904 <HAL_GPIO_Init>

}
 8000f1e:	bf00      	nop
 8000f20:	3730      	adds	r7, #48	; 0x30
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40020000 	.word	0x40020000

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <Error_Handler+0x8>
	...

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800

08000f98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a69      	ldr	r2, [pc, #420]	; (800115c <HAL_I2C_MspInit+0x1c4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d163      	bne.n	8001082 <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	4b68      	ldr	r3, [pc, #416]	; (8001160 <HAL_I2C_MspInit+0x1c8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a67      	ldr	r2, [pc, #412]	; (8001160 <HAL_I2C_MspInit+0x1c8>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b65      	ldr	r3, [pc, #404]	; (8001160 <HAL_I2C_MspInit+0x1c8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
 8000fd4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fdc:	2312      	movs	r3, #18
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	485c      	ldr	r0, [pc, #368]	; (8001164 <HAL_I2C_MspInit+0x1cc>)
 8000ff4:	f002 fc86 	bl	8003904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	4b58      	ldr	r3, [pc, #352]	; (8001160 <HAL_I2C_MspInit+0x1c8>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a57      	ldr	r2, [pc, #348]	; (8001160 <HAL_I2C_MspInit+0x1c8>)
 8001002:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b55      	ldr	r3, [pc, #340]	; (8001160 <HAL_I2C_MspInit+0x1c8>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001014:	4b54      	ldr	r3, [pc, #336]	; (8001168 <HAL_I2C_MspInit+0x1d0>)
 8001016:	4a55      	ldr	r2, [pc, #340]	; (800116c <HAL_I2C_MspInit+0x1d4>)
 8001018:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <HAL_I2C_MspInit+0x1d0>)
 800101c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001020:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001022:	4b51      	ldr	r3, [pc, #324]	; (8001168 <HAL_I2C_MspInit+0x1d0>)
 8001024:	2240      	movs	r2, #64	; 0x40
 8001026:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001028:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <HAL_I2C_MspInit+0x1d0>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800102e:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <HAL_I2C_MspInit+0x1d0>)
 8001030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001034:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001036:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <HAL_I2C_MspInit+0x1d0>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800103c:	4b4a      	ldr	r3, [pc, #296]	; (8001168 <HAL_I2C_MspInit+0x1d0>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001042:	4b49      	ldr	r3, [pc, #292]	; (8001168 <HAL_I2C_MspInit+0x1d0>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001048:	4b47      	ldr	r3, [pc, #284]	; (8001168 <HAL_I2C_MspInit+0x1d0>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <HAL_I2C_MspInit+0x1d0>)
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001054:	4844      	ldr	r0, [pc, #272]	; (8001168 <HAL_I2C_MspInit+0x1d0>)
 8001056:	f000 fea5 	bl	8001da4 <HAL_DMA_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001060:	f7ff ff6c 	bl	8000f3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a40      	ldr	r2, [pc, #256]	; (8001168 <HAL_I2C_MspInit+0x1d0>)
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
 800106a:	4a3f      	ldr	r2, [pc, #252]	; (8001168 <HAL_I2C_MspInit+0x1d0>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	201f      	movs	r0, #31
 8001076:	f000 fe5e 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800107a:	201f      	movs	r0, #31
 800107c:	f000 fe77 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001080:	e067      	b.n	8001152 <HAL_I2C_MspInit+0x1ba>
  else if(hi2c->Instance==I2C2)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a3a      	ldr	r2, [pc, #232]	; (8001170 <HAL_I2C_MspInit+0x1d8>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d162      	bne.n	8001152 <HAL_I2C_MspInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <HAL_I2C_MspInit+0x1c8>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	4a32      	ldr	r2, [pc, #200]	; (8001160 <HAL_I2C_MspInit+0x1c8>)
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	6313      	str	r3, [r2, #48]	; 0x30
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_I2C_MspInit+0x1c8>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ae:	2312      	movs	r3, #18
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010ba:	2304      	movs	r3, #4
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4827      	ldr	r0, [pc, #156]	; (8001164 <HAL_I2C_MspInit+0x1cc>)
 80010c6:	f002 fc1d 	bl	8003904 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b24      	ldr	r3, [pc, #144]	; (8001160 <HAL_I2C_MspInit+0x1c8>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <HAL_I2C_MspInit+0x1c8>)
 80010d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <HAL_I2C_MspInit+0x1c8>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_I2C_MspInit+0x1dc>)
 80010e8:	4a23      	ldr	r2, [pc, #140]	; (8001178 <HAL_I2C_MspInit+0x1e0>)
 80010ea:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <HAL_I2C_MspInit+0x1dc>)
 80010ee:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010f2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <HAL_I2C_MspInit+0x1dc>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_I2C_MspInit+0x1dc>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <HAL_I2C_MspInit+0x1dc>)
 8001102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001106:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <HAL_I2C_MspInit+0x1dc>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_I2C_MspInit+0x1dc>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_I2C_MspInit+0x1dc>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_I2C_MspInit+0x1dc>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_I2C_MspInit+0x1dc>)
 8001122:	2200      	movs	r2, #0
 8001124:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001126:	4813      	ldr	r0, [pc, #76]	; (8001174 <HAL_I2C_MspInit+0x1dc>)
 8001128:	f000 fe3c 	bl	8001da4 <HAL_DMA_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_I2C_MspInit+0x19e>
      Error_Handler();
 8001132:	f7ff ff03 	bl	8000f3c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_I2C_MspInit+0x1dc>)
 800113a:	639a      	str	r2, [r3, #56]	; 0x38
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_I2C_MspInit+0x1dc>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2021      	movs	r0, #33	; 0x21
 8001148:	f000 fdf5 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800114c:	2021      	movs	r0, #33	; 0x21
 800114e:	f000 fe0e 	bl	8001d6e <HAL_NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3730      	adds	r7, #48	; 0x30
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40005400 	.word	0x40005400
 8001160:	40023800 	.word	0x40023800
 8001164:	40020400 	.word	0x40020400
 8001168:	20000140 	.word	0x20000140
 800116c:	400260a0 	.word	0x400260a0
 8001170:	40005800 	.word	0x40005800
 8001174:	200001a0 	.word	0x200001a0
 8001178:	40026040 	.word	0x40026040

0800117c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08e      	sub	sp, #56	; 0x38
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a86      	ldr	r2, [pc, #536]	; (80013b4 <HAL_SPI_MspInit+0x238>)
 800119a:	4293      	cmp	r3, r2
 800119c:	f040 809f 	bne.w	80012de <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
 80011a4:	4b84      	ldr	r3, [pc, #528]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	4a83      	ldr	r2, [pc, #524]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ae:	6413      	str	r3, [r2, #64]	; 0x40
 80011b0:	4b81      	ldr	r3, [pc, #516]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b8:	623b      	str	r3, [r7, #32]
 80011ba:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	4b7d      	ldr	r3, [pc, #500]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a7c      	ldr	r2, [pc, #496]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b7a      	ldr	r3, [pc, #488]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
 80011dc:	4b76      	ldr	r3, [pc, #472]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	4a75      	ldr	r2, [pc, #468]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	6313      	str	r3, [r2, #48]	; 0x30
 80011e8:	4b73      	ldr	r3, [pc, #460]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	4b6f      	ldr	r3, [pc, #444]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	4a6e      	ldr	r2, [pc, #440]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80011fe:	f043 0308 	orr.w	r3, r3, #8
 8001202:	6313      	str	r3, [r2, #48]	; 0x30
 8001204:	4b6c      	ldr	r3, [pc, #432]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001210:	230c      	movs	r3, #12
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001220:	2305      	movs	r3, #5
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4864      	ldr	r0, [pc, #400]	; (80013bc <HAL_SPI_MspInit+0x240>)
 800122c:	f002 fb6a 	bl	8003904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001242:	2305      	movs	r3, #5
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	4619      	mov	r1, r3
 800124c:	485c      	ldr	r0, [pc, #368]	; (80013c0 <HAL_SPI_MspInit+0x244>)
 800124e:	f002 fb59 	bl	8003904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001252:	2308      	movs	r3, #8
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001262:	2305      	movs	r3, #5
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	4855      	ldr	r0, [pc, #340]	; (80013c4 <HAL_SPI_MspInit+0x248>)
 800126e:	f002 fb49 	bl	8003904 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001272:	4b55      	ldr	r3, [pc, #340]	; (80013c8 <HAL_SPI_MspInit+0x24c>)
 8001274:	4a55      	ldr	r2, [pc, #340]	; (80013cc <HAL_SPI_MspInit+0x250>)
 8001276:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001278:	4b53      	ldr	r3, [pc, #332]	; (80013c8 <HAL_SPI_MspInit+0x24c>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800127e:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <HAL_SPI_MspInit+0x24c>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001284:	4b50      	ldr	r3, [pc, #320]	; (80013c8 <HAL_SPI_MspInit+0x24c>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800128a:	4b4f      	ldr	r3, [pc, #316]	; (80013c8 <HAL_SPI_MspInit+0x24c>)
 800128c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001290:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001292:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <HAL_SPI_MspInit+0x24c>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <HAL_SPI_MspInit+0x24c>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800129e:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <HAL_SPI_MspInit+0x24c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012a4:	4b48      	ldr	r3, [pc, #288]	; (80013c8 <HAL_SPI_MspInit+0x24c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012aa:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <HAL_SPI_MspInit+0x24c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80012b0:	4845      	ldr	r0, [pc, #276]	; (80013c8 <HAL_SPI_MspInit+0x24c>)
 80012b2:	f000 fd77 	bl	8001da4 <HAL_DMA_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_SPI_MspInit+0x144>
    {
      Error_Handler();
 80012bc:	f7ff fe3e 	bl	8000f3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a41      	ldr	r2, [pc, #260]	; (80013c8 <HAL_SPI_MspInit+0x24c>)
 80012c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80012c6:	4a40      	ldr	r2, [pc, #256]	; (80013c8 <HAL_SPI_MspInit+0x24c>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2024      	movs	r0, #36	; 0x24
 80012d2:	f000 fd30 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80012d6:	2024      	movs	r0, #36	; 0x24
 80012d8:	f000 fd49 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80012dc:	e066      	b.n	80013ac <HAL_SPI_MspInit+0x230>
  else if(hspi->Instance==SPI4)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a3b      	ldr	r2, [pc, #236]	; (80013d0 <HAL_SPI_MspInit+0x254>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d161      	bne.n	80013ac <HAL_SPI_MspInit+0x230>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	4a31      	ldr	r2, [pc, #196]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80012f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012f6:	6453      	str	r3, [r2, #68]	; 0x44
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 80012fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 800130e:	f043 0310 	orr.w	r3, r3, #16
 8001312:	6313      	str	r3, [r2, #48]	; 0x30
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_SPI_MspInit+0x23c>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	f003 0310 	and.w	r3, r3, #16
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001320:	2374      	movs	r3, #116	; 0x74
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001330:	2305      	movs	r3, #5
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	4826      	ldr	r0, [pc, #152]	; (80013d4 <HAL_SPI_MspInit+0x258>)
 800133c:	f002 fae2 	bl	8003904 <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <HAL_SPI_MspInit+0x25c>)
 8001342:	4a26      	ldr	r2, [pc, #152]	; (80013dc <HAL_SPI_MspInit+0x260>)
 8001344:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001346:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <HAL_SPI_MspInit+0x25c>)
 8001348:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800134c:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800134e:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <HAL_SPI_MspInit+0x25c>)
 8001350:	2240      	movs	r2, #64	; 0x40
 8001352:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_SPI_MspInit+0x25c>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800135a:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <HAL_SPI_MspInit+0x25c>)
 800135c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001360:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001362:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_SPI_MspInit+0x25c>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_SPI_MspInit+0x25c>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <HAL_SPI_MspInit+0x25c>)
 8001370:	2200      	movs	r2, #0
 8001372:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_SPI_MspInit+0x25c>)
 8001376:	2200      	movs	r2, #0
 8001378:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_SPI_MspInit+0x25c>)
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001380:	4815      	ldr	r0, [pc, #84]	; (80013d8 <HAL_SPI_MspInit+0x25c>)
 8001382:	f000 fd0f 	bl	8001da4 <HAL_DMA_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_SPI_MspInit+0x214>
      Error_Handler();
 800138c:	f7ff fdd6 	bl	8000f3c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <HAL_SPI_MspInit+0x25c>)
 8001394:	649a      	str	r2, [r3, #72]	; 0x48
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_SPI_MspInit+0x25c>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	2054      	movs	r0, #84	; 0x54
 80013a2:	f000 fcc8 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80013a6:	2054      	movs	r0, #84	; 0x54
 80013a8:	f000 fce1 	bl	8001d6e <HAL_NVIC_EnableIRQ>
}
 80013ac:	bf00      	nop
 80013ae:	3738      	adds	r7, #56	; 0x38
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40003800 	.word	0x40003800
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	200002b0 	.word	0x200002b0
 80013cc:	40026058 	.word	0x40026058
 80013d0:	40013400 	.word	0x40013400
 80013d4:	40021000 	.word	0x40021000
 80013d8:	20000310 	.word	0x20000310
 80013dc:	40026428 	.word	0x40026428

080013e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08e      	sub	sp, #56	; 0x38
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a82      	ldr	r2, [pc, #520]	; (8001608 <HAL_UART_MspInit+0x228>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d163      	bne.n	80014ca <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
 8001406:	4b81      	ldr	r3, [pc, #516]	; (800160c <HAL_UART_MspInit+0x22c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a80      	ldr	r2, [pc, #512]	; (800160c <HAL_UART_MspInit+0x22c>)
 800140c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b7e      	ldr	r3, [pc, #504]	; (800160c <HAL_UART_MspInit+0x22c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800141a:	623b      	str	r3, [r7, #32]
 800141c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	4b7a      	ldr	r3, [pc, #488]	; (800160c <HAL_UART_MspInit+0x22c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a79      	ldr	r2, [pc, #484]	; (800160c <HAL_UART_MspInit+0x22c>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b77      	ldr	r3, [pc, #476]	; (800160c <HAL_UART_MspInit+0x22c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800143a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800144c:	2308      	movs	r3, #8
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	486e      	ldr	r0, [pc, #440]	; (8001610 <HAL_UART_MspInit+0x230>)
 8001458:	f002 fa54 	bl	8003904 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800145c:	4b6d      	ldr	r3, [pc, #436]	; (8001614 <HAL_UART_MspInit+0x234>)
 800145e:	4a6e      	ldr	r2, [pc, #440]	; (8001618 <HAL_UART_MspInit+0x238>)
 8001460:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001462:	4b6c      	ldr	r3, [pc, #432]	; (8001614 <HAL_UART_MspInit+0x234>)
 8001464:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001468:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800146a:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <HAL_UART_MspInit+0x234>)
 800146c:	2240      	movs	r2, #64	; 0x40
 800146e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001470:	4b68      	ldr	r3, [pc, #416]	; (8001614 <HAL_UART_MspInit+0x234>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001476:	4b67      	ldr	r3, [pc, #412]	; (8001614 <HAL_UART_MspInit+0x234>)
 8001478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147e:	4b65      	ldr	r3, [pc, #404]	; (8001614 <HAL_UART_MspInit+0x234>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001484:	4b63      	ldr	r3, [pc, #396]	; (8001614 <HAL_UART_MspInit+0x234>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800148a:	4b62      	ldr	r3, [pc, #392]	; (8001614 <HAL_UART_MspInit+0x234>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001490:	4b60      	ldr	r3, [pc, #384]	; (8001614 <HAL_UART_MspInit+0x234>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001496:	4b5f      	ldr	r3, [pc, #380]	; (8001614 <HAL_UART_MspInit+0x234>)
 8001498:	2200      	movs	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800149c:	485d      	ldr	r0, [pc, #372]	; (8001614 <HAL_UART_MspInit+0x234>)
 800149e:	f000 fc81 	bl	8001da4 <HAL_DMA_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80014a8:	f7ff fd48 	bl	8000f3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a59      	ldr	r2, [pc, #356]	; (8001614 <HAL_UART_MspInit+0x234>)
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
 80014b2:	4a58      	ldr	r2, [pc, #352]	; (8001614 <HAL_UART_MspInit+0x234>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2034      	movs	r0, #52	; 0x34
 80014be:	f000 fc3a 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80014c2:	2034      	movs	r0, #52	; 0x34
 80014c4:	f000 fc53 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80014c8:	e099      	b.n	80015fe <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a53      	ldr	r2, [pc, #332]	; (800161c <HAL_UART_MspInit+0x23c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d12d      	bne.n	8001530 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	4b4c      	ldr	r3, [pc, #304]	; (800160c <HAL_UART_MspInit+0x22c>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	4a4b      	ldr	r2, [pc, #300]	; (800160c <HAL_UART_MspInit+0x22c>)
 80014de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e2:	6413      	str	r3, [r2, #64]	; 0x40
 80014e4:	4b49      	ldr	r3, [pc, #292]	; (800160c <HAL_UART_MspInit+0x22c>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	4b45      	ldr	r3, [pc, #276]	; (800160c <HAL_UART_MspInit+0x22c>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	4a44      	ldr	r2, [pc, #272]	; (800160c <HAL_UART_MspInit+0x22c>)
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001500:	4b42      	ldr	r3, [pc, #264]	; (800160c <HAL_UART_MspInit+0x22c>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800150c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800151e:	2307      	movs	r3, #7
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	483d      	ldr	r0, [pc, #244]	; (8001620 <HAL_UART_MspInit+0x240>)
 800152a:	f002 f9eb 	bl	8003904 <HAL_GPIO_Init>
}
 800152e:	e066      	b.n	80015fe <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART6)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a3b      	ldr	r2, [pc, #236]	; (8001624 <HAL_UART_MspInit+0x244>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d161      	bne.n	80015fe <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b33      	ldr	r3, [pc, #204]	; (800160c <HAL_UART_MspInit+0x22c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a32      	ldr	r2, [pc, #200]	; (800160c <HAL_UART_MspInit+0x22c>)
 8001544:	f043 0320 	orr.w	r3, r3, #32
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b30      	ldr	r3, [pc, #192]	; (800160c <HAL_UART_MspInit+0x22c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f003 0320 	and.w	r3, r3, #32
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <HAL_UART_MspInit+0x22c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a2b      	ldr	r2, [pc, #172]	; (800160c <HAL_UART_MspInit+0x22c>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b29      	ldr	r3, [pc, #164]	; (800160c <HAL_UART_MspInit+0x22c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001572:	23c0      	movs	r3, #192	; 0xc0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001582:	2308      	movs	r3, #8
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	4820      	ldr	r0, [pc, #128]	; (8001610 <HAL_UART_MspInit+0x230>)
 800158e:	f002 f9b9 	bl	8003904 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HAL_UART_MspInit+0x248>)
 8001594:	4a25      	ldr	r2, [pc, #148]	; (800162c <HAL_UART_MspInit+0x24c>)
 8001596:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_UART_MspInit+0x248>)
 800159a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800159e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_UART_MspInit+0x248>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_UART_MspInit+0x248>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_UART_MspInit+0x248>)
 80015ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_UART_MspInit+0x248>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_UART_MspInit+0x248>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_UART_MspInit+0x248>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_UART_MspInit+0x248>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <HAL_UART_MspInit+0x248>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80015d2:	4815      	ldr	r0, [pc, #84]	; (8001628 <HAL_UART_MspInit+0x248>)
 80015d4:	f000 fbe6 	bl	8001da4 <HAL_DMA_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_UART_MspInit+0x202>
      Error_Handler();
 80015de:	f7ff fcad 	bl	8000f3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a10      	ldr	r2, [pc, #64]	; (8001628 <HAL_UART_MspInit+0x248>)
 80015e6:	639a      	str	r2, [r3, #56]	; 0x38
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_UART_MspInit+0x248>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2047      	movs	r0, #71	; 0x47
 80015f4:	f000 fb9f 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80015f8:	2047      	movs	r0, #71	; 0x47
 80015fa:	f000 fbb8 	bl	8001d6e <HAL_NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3738      	adds	r7, #56	; 0x38
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40004c00 	.word	0x40004c00
 800160c:	40023800 	.word	0x40023800
 8001610:	40020800 	.word	0x40020800
 8001614:	2000043c 	.word	0x2000043c
 8001618:	40026070 	.word	0x40026070
 800161c:	40004800 	.word	0x40004800
 8001620:	40020c00 	.word	0x40020c00
 8001624:	40011400 	.word	0x40011400
 8001628:	2000049c 	.word	0x2000049c
 800162c:	40026440 	.word	0x40026440

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <NMI_Handler+0x4>

08001636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <MemManage_Handler+0x4>

08001642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <BusFault_Handler+0x4>

08001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <UsageFault_Handler+0x4>

0800164e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167c:	f000 fa3c 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <DMA1_Stream2_IRQHandler+0x10>)
 800168a:	f000 fd23 	bl	80020d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200001a0 	.word	0x200001a0

08001698 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <DMA1_Stream3_IRQHandler+0x10>)
 800169e:	f000 fd19 	bl	80020d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200002b0 	.word	0x200002b0

080016ac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <DMA1_Stream4_IRQHandler+0x10>)
 80016b2:	f000 fd0f 	bl	80020d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000043c 	.word	0x2000043c

080016c0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <DMA1_Stream6_IRQHandler+0x10>)
 80016c6:	f000 fd05 	bl	80020d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000140 	.word	0x20000140

080016d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <I2C1_EV_IRQHandler+0x10>)
 80016da:	f002 fe1f 	bl	800431c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000098 	.word	0x20000098

080016e8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <I2C2_EV_IRQHandler+0x10>)
 80016ee:	f002 fe15 	bl	800431c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200000ec 	.word	0x200000ec

080016fc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <SPI2_IRQHandler+0x10>)
 8001702:	f005 faeb 	bl	8006cdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000200 	.word	0x20000200

08001710 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <UART4_IRQHandler+0x10>)
 8001716:	f005 ff97 	bl	8007648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000370 	.word	0x20000370

08001724 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <DMA2_Stream1_IRQHandler+0x10>)
 800172a:	f000 fcd3 	bl	80020d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000310 	.word	0x20000310

08001738 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <DMA2_Stream2_IRQHandler+0x10>)
 800173e:	f000 fcc9 	bl	80020d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000049c 	.word	0x2000049c

0800174c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <ETH_IRQHandler+0x10>)
 8001752:	f001 fb1f 	bl	8002d94 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200036d8 	.word	0x200036d8

08001760 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <USART6_IRQHandler+0x10>)
 8001766:	f005 ff6f 	bl	8007648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200003f8 	.word	0x200003f8

08001774 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <SPI4_IRQHandler+0x10>)
 800177a:	f005 faaf 	bl	8006cdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000258 	.word	0x20000258

08001788 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	return 1;
 800178c:	2301      	movs	r3, #1
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_kill>:

int _kill(int pid, int sig)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <_kill+0x20>)
 80017a4:	2216      	movs	r2, #22
 80017a6:	601a      	str	r2, [r3, #0]
	return -1;
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	20008fac 	.word	0x20008fac

080017bc <_exit>:

void _exit (int status)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ffe5 	bl	8001798 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017ce:	e7fe      	b.n	80017ce <_exit+0x12>

080017d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e00a      	b.n	80017f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017e2:	f3af 8000 	nop.w
 80017e6:	4601      	mov	r1, r0
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	b2ca      	uxtb	r2, r1
 80017f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf0      	blt.n	80017e2 <_read+0x12>
	}

return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e009      	b.n	8001830 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	dbf1      	blt.n	800181c <_write+0x12>
	}
	return len;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_close>:

int _close(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
	return -1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186a:	605a      	str	r2, [r3, #4]
	return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_isatty>:

int _isatty(int file)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
	return 1;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
	return 0;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d205      	bcs.n	80018e8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <_sbrk+0x6c>)
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e009      	b.n	80018fc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a06      	ldr	r2, [pc, #24]	; (8001910 <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	20030000 	.word	0x20030000
 800190c:	00000400 	.word	0x00000400
 8001910:	200005e4 	.word	0x200005e4
 8001914:	20008fc0 	.word	0x20008fc0
 8001918:	20008fac 	.word	0x20008fac

0800191c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8001946:	f00f f9f5 	bl	8010d34 <udp_new>
 800194a:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 0, 132);
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <udpServer_init+0x44>)
 800194e:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 50014);  // 7 is the server UDP port
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	f24c 325e 	movw	r2, #50014	; 0xc35e
 8001956:	4619      	mov	r1, r3
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f00f f86b 	bl	8010a34 <udp_bind>
 800195e:	4603      	mov	r3, r0
 8001960:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8001962:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <udpServer_init+0x36>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 800196a:	2200      	movs	r2, #0
 800196c:	4906      	ldr	r1, [pc, #24]	; (8001988 <udpServer_init+0x48>)
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f00f f97e 	bl	8010c70 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8001974:	e002      	b.n	800197c <udpServer_init+0x3c>
	   udp_remove(upcb);
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f00f f99a 	bl	8010cb0 <udp_remove>
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	8400a8c0 	.word	0x8400a8c0
 8001988:	0800198d 	.word	0x0800198d

0800198c <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
	extern struct udp_pcb *udp_info;
	extern char mem[100];
	extern char received;
	extern int len;
	/* save data for later use */
	received = 1;
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <udp_receive_callback+0x64>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
	len = p->len - 1;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	895b      	ldrh	r3, [r3, #10]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <udp_receive_callback+0x68>)
 80019a8:	6013      	str	r3, [r2, #0]
	if(len > 100)
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <udp_receive_callback+0x68>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	dd02      	ble.n	80019b8 <udp_receive_callback+0x2c>
		len = 100;
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <udp_receive_callback+0x68>)
 80019b4:	2264      	movs	r2, #100	; 0x64
 80019b6:	601a      	str	r2, [r3, #0]
	udp_info = upcb;
 80019b8:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <udp_receive_callback+0x6c>)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	6013      	str	r3, [r2, #0]
	udp_info->remote_ip = *addr;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <udp_receive_callback+0x6c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	605a      	str	r2, [r3, #4]
	udp_info->remote_port = port;
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <udp_receive_callback+0x6c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	8b3a      	ldrh	r2, [r7, #24]
 80019ce:	829a      	strh	r2, [r3, #20]
	memcpy(mem,(char*)p->payload,p->len);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	895b      	ldrh	r3, [r3, #10]
 80019d8:	461a      	mov	r2, r3
 80019da:	4808      	ldr	r0, [pc, #32]	; (80019fc <udp_receive_callback+0x70>)
 80019dc:	f011 fcec 	bl	80133b8 <memcpy>
	/* free p buffer */
	pbuf_free(p);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f008 fea5 	bl	800a730 <pbuf_free>

}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000500 	.word	0x20000500
 80019f4:	200005dc 	.word	0x200005dc
 80019f8:	200004fc 	.word	0x200004fc
 80019fc:	20000504 	.word	0x20000504

08001a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a38 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a06:	490e      	ldr	r1, [pc, #56]	; (8001a40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a08:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a1c:	4c0b      	ldr	r4, [pc, #44]	; (8001a4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a2a:	f7ff ff77 	bl	800191c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f011 fc8f 	bl	8013350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a32:	f7fe fe3b 	bl	80006ac <main>
  bx  lr    
 8001a36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a38:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001a44:	080174c4 	.word	0x080174c4
  ldr r2, =_sbss
 8001a48:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001a4c:	20008fbc 	.word	0x20008fbc

08001a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC_IRQHandler>
	...

08001a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_Init+0x40>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <HAL_Init+0x40>)
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_Init+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_Init+0x40>)
 8001a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <HAL_Init+0x40>)
 8001a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f000 f94f 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f000 f808 	bl	8001a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a88:	f7ff fa5e 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023c00 	.word	0x40023c00

08001a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_InitTick+0x54>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_InitTick+0x58>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f967 	bl	8001d8a <HAL_SYSTICK_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00e      	b.n	8001ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d80a      	bhi.n	8001ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001acc:	2200      	movs	r2, #0
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f000 f92f 	bl	8001d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad8:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <HAL_InitTick+0x5c>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000004 	.word	0x20000004
 8001af0:	2000000c 	.word	0x2000000c
 8001af4:	20000008 	.word	0x20000008

08001af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_IncTick+0x20>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_IncTick+0x24>)
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	2000000c 	.word	0x2000000c
 8001b1c:	200005e8 	.word	0x200005e8

08001b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_GetTick+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	200005e8 	.word	0x200005e8

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff ffee 	bl	8001b20 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d005      	beq.n	8001b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_Delay+0x44>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b5e:	bf00      	nop
 8001b60:	f7ff ffde 	bl	8001b20 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d8f7      	bhi.n	8001b60 <HAL_Delay+0x28>
  {
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000000c 	.word	0x2000000c

08001b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb2:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	60d3      	str	r3, [r2, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	f003 0307 	and.w	r3, r3, #7
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	db0b      	blt.n	8001c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f003 021f 	and.w	r2, r3, #31
 8001bfc:	4907      	ldr	r1, [pc, #28]	; (8001c1c <__NVIC_EnableIRQ+0x38>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	2001      	movs	r0, #1
 8001c06:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
         );
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f7ff ff8e 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff29 	bl	8001b80 <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff3e 	bl	8001bc8 <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff8e 	bl	8001c74 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5d 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff31 	bl	8001be4 <__NVIC_EnableIRQ>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffa2 	bl	8001cdc <SysTick_Config>
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001db0:	f7ff feb6 	bl	8001b20 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e099      	b.n	8001ef4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de0:	e00f      	b.n	8001e02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de2:	f7ff fe9d 	bl	8001b20 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d908      	bls.n	8001e02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e078      	b.n	8001ef4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1e8      	bne.n	8001de2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	4b38      	ldr	r3, [pc, #224]	; (8001efc <HAL_DMA_Init+0x158>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d107      	bne.n	8001e6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	4313      	orrs	r3, r2
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f023 0307 	bic.w	r3, r3, #7
 8001e82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d117      	bne.n	8001ec6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fb1b 	bl	80024e4 <DMA_CheckFifoParam>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2240      	movs	r2, #64	; 0x40
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e016      	b.n	8001ef4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fad2 	bl	8002478 <DMA_CalcBaseAndBitshift>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	223f      	movs	r2, #63	; 0x3f
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	f010803f 	.word	0xf010803f

08001f00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_DMA_Start_IT+0x26>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e040      	b.n	8001fa8 <HAL_DMA_Start_IT+0xa8>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d12f      	bne.n	8001f9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fa64 	bl	800241c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	223f      	movs	r2, #63	; 0x3f
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0216 	orr.w	r2, r2, #22
 8001f6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0208 	orr.w	r2, r2, #8
 8001f86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e005      	b.n	8001fa6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fbe:	f7ff fdaf 	bl	8001b20 <HAL_GetTick>
 8001fc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d008      	beq.n	8001fe2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2280      	movs	r2, #128	; 0x80
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e052      	b.n	8002088 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0216 	bic.w	r2, r2, #22
 8001ff0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002000:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <HAL_DMA_Abort+0x62>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0208 	bic.w	r2, r2, #8
 8002020:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002032:	e013      	b.n	800205c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002034:	f7ff fd74 	bl	8001b20 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b05      	cmp	r3, #5
 8002040:	d90c      	bls.n	800205c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2220      	movs	r2, #32
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2203      	movs	r2, #3
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e015      	b.n	8002088 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1e4      	bne.n	8002034 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	223f      	movs	r2, #63	; 0x3f
 8002070:	409a      	lsls	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d004      	beq.n	80020ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00c      	b.n	80020c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2205      	movs	r2, #5
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0201 	bic.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020e0:	4b8e      	ldr	r3, [pc, #568]	; (800231c <HAL_DMA_IRQHandler+0x248>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a8e      	ldr	r2, [pc, #568]	; (8002320 <HAL_DMA_IRQHandler+0x24c>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0a9b      	lsrs	r3, r3, #10
 80020ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	2208      	movs	r2, #8
 8002100:	409a      	lsls	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d01a      	beq.n	8002140 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0204 	bic.w	r2, r2, #4
 8002126:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212c:	2208      	movs	r2, #8
 800212e:	409a      	lsls	r2, r3
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	2201      	movs	r2, #1
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d012      	beq.n	8002176 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	2201      	movs	r2, #1
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	f043 0202 	orr.w	r2, r3, #2
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	2204      	movs	r2, #4
 800217c:	409a      	lsls	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d012      	beq.n	80021ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00b      	beq.n	80021ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	2204      	movs	r2, #4
 800219a:	409a      	lsls	r2, r3
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	f043 0204 	orr.w	r2, r3, #4
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	2210      	movs	r2, #16
 80021b2:	409a      	lsls	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d043      	beq.n	8002244 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d03c      	beq.n	8002244 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	2210      	movs	r2, #16
 80021d0:	409a      	lsls	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d018      	beq.n	8002216 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d108      	bne.n	8002204 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d024      	beq.n	8002244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
 8002202:	e01f      	b.n	8002244 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01b      	beq.n	8002244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
 8002214:	e016      	b.n	8002244 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0208 	bic.w	r2, r2, #8
 8002232:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	2220      	movs	r2, #32
 800224a:	409a      	lsls	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 808f 	beq.w	8002374 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8087 	beq.w	8002374 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226a:	2220      	movs	r2, #32
 800226c:	409a      	lsls	r2, r3
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b05      	cmp	r3, #5
 800227c:	d136      	bne.n	80022ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0216 	bic.w	r2, r2, #22
 800228c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800229c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <HAL_DMA_IRQHandler+0x1da>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0208 	bic.w	r2, r2, #8
 80022bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	223f      	movs	r2, #63	; 0x3f
 80022c4:	409a      	lsls	r2, r3
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d07e      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4798      	blx	r3
        }
        return;
 80022ea:	e079      	b.n	80023e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d01d      	beq.n	8002336 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10d      	bne.n	8002324 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230c:	2b00      	cmp	r3, #0
 800230e:	d031      	beq.n	8002374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	4798      	blx	r3
 8002318:	e02c      	b.n	8002374 <HAL_DMA_IRQHandler+0x2a0>
 800231a:	bf00      	nop
 800231c:	20000004 	.word	0x20000004
 8002320:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d023      	beq.n	8002374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
 8002334:	e01e      	b.n	8002374 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10f      	bne.n	8002364 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0210 	bic.w	r2, r2, #16
 8002352:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	2b00      	cmp	r3, #0
 800237a:	d032      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d022      	beq.n	80023ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2205      	movs	r2, #5
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	3301      	adds	r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d307      	bcc.n	80023bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f2      	bne.n	80023a0 <HAL_DMA_IRQHandler+0x2cc>
 80023ba:	e000      	b.n	80023be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	4798      	blx	r3
 80023de:	e000      	b.n	80023e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023e0:	bf00      	nop
    }
  }
}
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f6:	b2db      	uxtb	r3, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002438:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b40      	cmp	r3, #64	; 0x40
 8002448:	d108      	bne.n	800245c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800245a:	e007      	b.n	800246c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	60da      	str	r2, [r3, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	3b10      	subs	r3, #16
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <DMA_CalcBaseAndBitshift+0x64>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002492:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d909      	bls.n	80024ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ae:	f023 0303 	bic.w	r3, r3, #3
 80024b2:	1d1a      	adds	r2, r3, #4
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	659a      	str	r2, [r3, #88]	; 0x58
 80024b8:	e007      	b.n	80024ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	aaaaaaab 	.word	0xaaaaaaab
 80024e0:	08017280 	.word	0x08017280

080024e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d11f      	bne.n	800253e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d856      	bhi.n	80025b2 <DMA_CheckFifoParam+0xce>
 8002504:	a201      	add	r2, pc, #4	; (adr r2, 800250c <DMA_CheckFifoParam+0x28>)
 8002506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250a:	bf00      	nop
 800250c:	0800251d 	.word	0x0800251d
 8002510:	0800252f 	.word	0x0800252f
 8002514:	0800251d 	.word	0x0800251d
 8002518:	080025b3 	.word	0x080025b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d046      	beq.n	80025b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252c:	e043      	b.n	80025b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002536:	d140      	bne.n	80025ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253c:	e03d      	b.n	80025ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002546:	d121      	bne.n	800258c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d837      	bhi.n	80025be <DMA_CheckFifoParam+0xda>
 800254e:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <DMA_CheckFifoParam+0x70>)
 8002550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002554:	08002565 	.word	0x08002565
 8002558:	0800256b 	.word	0x0800256b
 800255c:	08002565 	.word	0x08002565
 8002560:	0800257d 	.word	0x0800257d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      break;
 8002568:	e030      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d025      	beq.n	80025c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257a:	e022      	b.n	80025c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002584:	d11f      	bne.n	80025c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800258a:	e01c      	b.n	80025c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d903      	bls.n	800259a <DMA_CheckFifoParam+0xb6>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d003      	beq.n	80025a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002598:	e018      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
      break;
 800259e:	e015      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00e      	beq.n	80025ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
      break;
 80025b0:	e00b      	b.n	80025ca <DMA_CheckFifoParam+0xe6>
      break;
 80025b2:	bf00      	nop
 80025b4:	e00a      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      break;
 80025b6:	bf00      	nop
 80025b8:	e008      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      break;
 80025ba:	bf00      	nop
 80025bc:	e006      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      break;
 80025be:	bf00      	nop
 80025c0:	e004      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      break;
 80025c2:	bf00      	nop
 80025c4:	e002      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      break;   
 80025c6:	bf00      	nop
 80025c8:	e000      	b.n	80025cc <DMA_CheckFifoParam+0xe8>
      break;
 80025ca:	bf00      	nop
    }
  } 
  
  return status; 
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop

080025dc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80025ec:	4ba1      	ldr	r3, [pc, #644]	; (8002874 <HAL_ETH_Init+0x298>)
 80025ee:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e182      	b.n	8002908 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f006 fa2e 	bl	8008a78 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	4b95      	ldr	r3, [pc, #596]	; (8002878 <HAL_ETH_Init+0x29c>)
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	4a94      	ldr	r2, [pc, #592]	; (8002878 <HAL_ETH_Init+0x29c>)
 8002626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800262a:	6453      	str	r3, [r2, #68]	; 0x44
 800262c:	4b92      	ldr	r3, [pc, #584]	; (8002878 <HAL_ETH_Init+0x29c>)
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002638:	4b90      	ldr	r3, [pc, #576]	; (800287c <HAL_ETH_Init+0x2a0>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a8f      	ldr	r2, [pc, #572]	; (800287c <HAL_ETH_Init+0x2a0>)
 800263e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002642:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002644:	4b8d      	ldr	r3, [pc, #564]	; (800287c <HAL_ETH_Init+0x2a0>)
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	498b      	ldr	r1, [pc, #556]	; (800287c <HAL_ETH_Init+0x2a0>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002668:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800266a:	f7ff fa59 	bl	8001b20 <HAL_GetTick>
 800266e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002670:	e011      	b.n	8002696 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002672:	f7ff fa55 	bl	8001b20 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002680:	d909      	bls.n	8002696 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2203      	movs	r2, #3
 8002686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e138      	b.n	8002908 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e4      	bne.n	8002672 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f023 031c 	bic.w	r3, r3, #28
 80026b6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80026b8:	f003 ffd2 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 80026bc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	4a6f      	ldr	r2, [pc, #444]	; (8002880 <HAL_ETH_Init+0x2a4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d908      	bls.n	80026d8 <HAL_ETH_Init+0xfc>
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <HAL_ETH_Init+0x2a8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d804      	bhi.n	80026d8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f043 0308 	orr.w	r3, r3, #8
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e027      	b.n	8002728 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4a6a      	ldr	r2, [pc, #424]	; (8002884 <HAL_ETH_Init+0x2a8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d908      	bls.n	80026f2 <HAL_ETH_Init+0x116>
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4a64      	ldr	r2, [pc, #400]	; (8002874 <HAL_ETH_Init+0x298>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d204      	bcs.n	80026f2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f043 030c 	orr.w	r3, r3, #12
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	e01a      	b.n	8002728 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4a5f      	ldr	r2, [pc, #380]	; (8002874 <HAL_ETH_Init+0x298>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d303      	bcc.n	8002702 <HAL_ETH_Init+0x126>
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4a62      	ldr	r2, [pc, #392]	; (8002888 <HAL_ETH_Init+0x2ac>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d911      	bls.n	8002726 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	4a60      	ldr	r2, [pc, #384]	; (8002888 <HAL_ETH_Init+0x2ac>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d908      	bls.n	800271c <HAL_ETH_Init+0x140>
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4a5f      	ldr	r2, [pc, #380]	; (800288c <HAL_ETH_Init+0x2b0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d804      	bhi.n	800271c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e005      	b.n	8002728 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f043 0310 	orr.w	r3, r3, #16
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	e000      	b.n	8002728 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002726:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002730:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002734:	2100      	movs	r1, #0
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fc16 	bl	8002f68 <HAL_ETH_WritePHYRegister>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002746:	6939      	ldr	r1, [r7, #16]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fdcb 	bl	80032e4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e0d6      	b.n	8002908 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800275a:	20ff      	movs	r0, #255	; 0xff
 800275c:	f7ff f9ec 	bl	8001b38 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a4 	beq.w	80028b2 <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800276a:	f7ff f9d9 	bl	8001b20 <HAL_GetTick>
 800276e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002770:	f107 030c 	add.w	r3, r7, #12
 8002774:	461a      	mov	r2, r3
 8002776:	2101      	movs	r1, #1
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fb8d 	bl	8002e98 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800277e:	f7ff f9cf 	bl	8001b20 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d90f      	bls.n	80027b0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002794:	6939      	ldr	r1, [r7, #16]
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fda4 	bl	80032e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0ab      	b.n	8002908 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0da      	beq.n	8002770 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80027ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027be:	2100      	movs	r1, #0
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fbd1 	bl	8002f68 <HAL_ETH_WritePHYRegister>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00b      	beq.n	80027e4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80027d0:	6939      	ldr	r1, [r7, #16]
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fd86 	bl	80032e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80027e0:	2301      	movs	r3, #1
 80027e2:	e091      	b.n	8002908 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80027e4:	f7ff f99c 	bl	8001b20 <HAL_GetTick>
 80027e8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80027ea:	f107 030c 	add.w	r3, r7, #12
 80027ee:	461a      	mov	r2, r3
 80027f0:	2101      	movs	r1, #1
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fb50 	bl	8002e98 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80027f8:	f7ff f992 	bl	8001b20 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d90f      	bls.n	800282a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800280e:	6939      	ldr	r1, [r7, #16]
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fd67 	bl	80032e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e06e      	b.n	8002908 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0da      	beq.n	80027ea <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002834:	f107 030c 	add.w	r3, r7, #12
 8002838:	461a      	mov	r2, r3
 800283a:	2110      	movs	r1, #16
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fb2b 	bl	8002e98 <HAL_ETH_ReadPHYRegister>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00b      	beq.n	8002860 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800284c:	6939      	ldr	r1, [r7, #16]
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fd48 	bl	80032e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800285c:	2301      	movs	r3, #1
 800285e:	e053      	b.n	8002908 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b00      	cmp	r3, #0
 8002868:	d012      	beq.n	8002890 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	e010      	b.n	8002896 <HAL_ETH_Init+0x2ba>
 8002874:	03938700 	.word	0x03938700
 8002878:	40023800 	.word	0x40023800
 800287c:	40013800 	.word	0x40013800
 8002880:	01312cff 	.word	0x01312cff
 8002884:	02160ebf 	.word	0x02160ebf
 8002888:	05f5e0ff 	.word	0x05f5e0ff
 800288c:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	e026      	b.n	80028f6 <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	e021      	b.n	80028f6 <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	08db      	lsrs	r3, r3, #3
 80028b8:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	085b      	lsrs	r3, r3, #1
 80028c0:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80028c2:	4313      	orrs	r3, r2
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	2100      	movs	r1, #0
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fb4c 	bl	8002f68 <HAL_ETH_WritePHYRegister>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80028da:	6939      	ldr	r1, [r7, #16]
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fd01 	bl	80032e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00c      	b.n	8002908 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80028ee:	f640 70ff 	movw	r0, #4095	; 0xfff
 80028f2:	f7ff f921 	bl	8001b38 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80028f6:	6939      	ldr	r1, [r7, #16]
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fcf3 	bl	80032e4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_ETH_DMATxDescListInit+0x20>
 800292c:	2302      	movs	r3, #2
 800292e:	e051      	b.n	80029d4 <HAL_ETH_DMATxDescListInit+0xc4>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e030      	b.n	80029ae <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	015b      	lsls	r3, r3, #5
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4413      	add	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800295c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	461a      	mov	r2, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	3b01      	subs	r3, #1
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	d208      	bcs.n	80029a2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3301      	adds	r3, #1
 8002994:	015b      	lsls	r3, r3, #5
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4413      	add	r3, r2
 800299a:	461a      	mov	r2, r3
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	e002      	b.n	80029a8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3301      	adds	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d3ca      	bcc.n	800294c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029c0:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_ETH_DMARxDescListInit+0x20>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e055      	b.n	8002aac <HAL_ETH_DMARxDescListInit+0xcc>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e034      	b.n	8002a86 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	015b      	lsls	r3, r3, #5
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	4413      	add	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a2c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002a34:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d105      	bne.n	8002a5e <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d208      	bcs.n	8002a7a <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	015b      	lsls	r3, r3, #5
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	4413      	add	r3, r2
 8002a72:	461a      	mov	r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	60da      	str	r2, [r3, #12]
 8002a78:	e002      	b.n	8002a80 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3301      	adds	r3, #1
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3c6      	bcc.n	8002a1c <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a98:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_ETH_TransmitFrame+0x24>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e0cc      	b.n	8002c76 <HAL_ETH_TransmitFrame+0x1be>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0b7      	b.n	8002c76 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	da09      	bge.n	8002b24 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2212      	movs	r2, #18
 8002b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0a8      	b.n	8002c76 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d915      	bls.n	8002b5a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	4a54      	ldr	r2, [pc, #336]	; (8002c84 <HAL_ETH_TransmitFrame+0x1cc>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0a9b      	lsrs	r3, r3, #10
 8002b38:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	4b51      	ldr	r3, [pc, #324]	; (8002c84 <HAL_ETH_TransmitFrame+0x1cc>)
 8002b3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b42:	0a9b      	lsrs	r3, r3, #10
 8002b44:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3301      	adds	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e001      	b.n	8002b5e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d11c      	bne.n	8002b9e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002b72:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002b7e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b8e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b9c:	e04b      	b.n	8002c36 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	e044      	b.n	8002c2e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bb2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d107      	bne.n	8002bca <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bc8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002bd2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d116      	bne.n	8002c0c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002bec:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	4a25      	ldr	r2, [pc, #148]	; (8002c88 <HAL_ETH_TransmitFrame+0x1d0>)
 8002bf2:	fb03 f202 	mul.w	r2, r3, r2
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002bfe:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002c0a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c1a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	461a      	mov	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d3b6      	bcc.n	8002ba4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c50:	461a      	mov	r2, r3
 8002c52:	2304      	movs	r3, #4
 8002c54:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2300      	movs	r3, #0
 8002c62:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	ac02b00b 	.word	0xac02b00b
 8002c88:	fffffa0c 	.word	0xfffffa0c

08002c8c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ETH_GetReceivedFrame+0x1a>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e070      	b.n	8002d88 <HAL_ETH_GetReceivedFrame+0xfc>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	db5a      	blt.n	8002d76 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d030      	beq.n	8002d30 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d103      	bne.n	8002ce8 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	0c1b      	lsrs	r3, r3, #16
 8002cf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002cfc:	3b04      	subs	r3, #4
 8002cfe:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	461a      	mov	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e02b      	b.n	8002d88 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	629a      	str	r2, [r3, #40]	; 0x28
 8002d5e:	e00a      	b.n	8002d76 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	461a      	mov	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d112      	bne.n	8002dd4 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f85e 	bl	8002e70 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2340      	movs	r3, #64	; 0x40
 8002dc0:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd2:	e01a      	b.n	8002e0a <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d111      	bne.n	8002e0a <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f838 	bl	8002e5c <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df4:	461a      	mov	r2, r3
 8002df6:	2301      	movs	r3, #1
 8002df8:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e12:	461a      	mov	r2, r3
 8002e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e18:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2c:	d112      	bne.n	8002e54 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f828 	bl	8002e84 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e42:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b82      	cmp	r3, #130	; 0x82
 8002eb8:	d101      	bne.n	8002ebe <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e050      	b.n	8002f60 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2282      	movs	r2, #130	; 0x82
 8002ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f003 031c 	and.w	r3, r3, #28
 8002ed4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8a1b      	ldrh	r3, [r3, #16]
 8002eda:	02db      	lsls	r3, r3, #11
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002ee4:	897b      	ldrh	r3, [r7, #10]
 8002ee6:	019b      	lsls	r3, r3, #6
 8002ee8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f023 0302 	bic.w	r3, r3, #2
 8002ef8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f0a:	f7fe fe09 	bl	8001b20 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f10:	e015      	b.n	8002f3e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002f12:	f7fe fe05 	bl	8001b20 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f20:	d309      	bcc.n	8002f36 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e014      	b.n	8002f60 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e4      	bne.n	8002f12 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	460b      	mov	r3, r1
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b42      	cmp	r3, #66	; 0x42
 8002f88:	d101      	bne.n	8002f8e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e04e      	b.n	800302c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2242      	movs	r2, #66	; 0x42
 8002f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f003 031c 	and.w	r3, r3, #28
 8002fa4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8a1b      	ldrh	r3, [r3, #16]
 8002faa:	02db      	lsls	r3, r3, #11
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002fb4:	897b      	ldrh	r3, [r7, #10]
 8002fb6:	019b      	lsls	r3, r3, #6
 8002fb8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002fe4:	f7fe fd9c 	bl	8001b20 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002fea:	e015      	b.n	8003018 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002fec:	f7fe fd98 	bl	8001b20 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffa:	d309      	bcc.n	8003010 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e00d      	b.n	800302c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e4      	bne.n	8002fec <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_ETH_Start+0x16>
 8003046:	2302      	movs	r3, #2
 8003048:	e01f      	b.n	800308a <HAL_ETH_Start+0x56>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2202      	movs	r2, #2
 8003056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fb40 	bl	80036e0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fb77 	bl	8003754 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fc06 	bl	8003878 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fbab 	bl	80037c8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fbd4 	bl	8003820 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_ETH_Stop+0x16>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e01f      	b.n	80030e8 <HAL_ETH_Stop+0x56>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fb9b 	bl	80037f4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fbc4 	bl	800384c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fb62 	bl	800378e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fbd4 	bl	8003878 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fb22 	bl	800371a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_ETH_ConfigMAC+0x1c>
 8003108:	2302      	movs	r3, #2
 800310a:	e0e4      	b.n	80032d6 <HAL_ETH_ConfigMAC+0x1e6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80b1 	beq.w	8003286 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4b6c      	ldr	r3, [pc, #432]	; (80032e0 <HAL_ETH_ConfigMAC+0x1f0>)
 8003130:	4013      	ands	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800313c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003142:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003148:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800314e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003154:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800315a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003160:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003166:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800316c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003172:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003178:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800317e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003196:	2001      	movs	r0, #1
 8003198:	f7fe fcce 	bl	8001b38 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80031ac:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80031b2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80031b8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80031be:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80031c4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80031ca:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80031d6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80031d8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80031e2:	2001      	movs	r0, #1
 80031e4:	f7fe fca8 	bl	8001b38 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031f8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003202:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003212:	4013      	ands	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003220:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003226:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800322c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003232:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003238:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003250:	2001      	movs	r0, #1
 8003252:	f7fe fc71 	bl	8001b38 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003276:	2001      	movs	r0, #1
 8003278:	f7fe fc5e 	bl	8001b38 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	61da      	str	r2, [r3, #28]
 8003284:	e01e      	b.n	80032c4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003294:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80032b6:	2001      	movs	r0, #1
 80032b8:	f7fe fc3e 	bl	8001b38 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	ff20810f 	.word	0xff20810f

080032e4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b0b0      	sub	sp, #192	; 0xc0
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003300:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003308:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800330a:	2300      	movs	r3, #0
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800330e:	2300      	movs	r3, #0
 8003310:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003312:	2300      	movs	r3, #0
 8003314:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003316:	2300      	movs	r3, #0
 8003318:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800331a:	2300      	movs	r3, #0
 800331c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800331e:	2300      	movs	r3, #0
 8003320:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800332a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800332e:	663b      	str	r3, [r7, #96]	; 0x60
 8003330:	e001      	b.n	8003336 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003332:	2300      	movs	r3, #0
 8003334:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800333a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800333c:	2300      	movs	r3, #0
 800333e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003340:	2300      	movs	r3, #0
 8003342:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003344:	2300      	movs	r3, #0
 8003346:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003348:	2300      	movs	r3, #0
 800334a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800334c:	2300      	movs	r3, #0
 800334e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003350:	2340      	movs	r3, #64	; 0x40
 8003352:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003360:	2300      	movs	r3, #0
 8003362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003366:	2300      	movs	r3, #0
 8003368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800336c:	2300      	movs	r3, #0
 800336e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003372:	2300      	movs	r3, #0
 8003374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003378:	2300      	movs	r3, #0
 800337a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800337e:	2300      	movs	r3, #0
 8003380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003396:	2300      	movs	r3, #0
 8003398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800339c:	2300      	movs	r3, #0
 800339e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80033a2:	2300      	movs	r3, #0
 80033a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80033b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033bc:	4baa      	ldr	r3, [pc, #680]	; (8003668 <ETH_MACDMAConfig+0x384>)
 80033be:	4013      	ands	r3, r2
 80033c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80033c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80033c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80033c8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80033ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80033cc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80033ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80033d0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80033d6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80033d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80033da:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80033dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80033de:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80033e4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80033e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80033e8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80033ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80033ec:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80033ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80033f0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80033f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80033f4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80033f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80033f8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80033fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800340c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003418:	2001      	movs	r0, #1
 800341a:	f7fe fb8d 	bl	8001b38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003426:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003428:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800342a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800342c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800342e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003430:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003432:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003436:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800343c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800343e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003442:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003444:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003448:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800344c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003454:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003456:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003462:	2001      	movs	r0, #1
 8003464:	f7fe fb68 	bl	8001b38 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003470:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800347a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003484:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003490:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003494:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003498:	4013      	ands	r3, r2
 800349a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800349e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034a2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80034a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80034a8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80034aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80034ae:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80034b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80034b4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80034b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80034ba:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80034bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80034c0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80034c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034d4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80034e0:	2001      	movs	r0, #1
 80034e2:	f7fe fb29 	bl	8001b38 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034ee:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80034f0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80034f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800350a:	2001      	movs	r0, #1
 800350c:	f7fe fb14 	bl	8001b38 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003518:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800351a:	2300      	movs	r3, #0
 800351c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800351e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003522:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003528:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800352c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003536:	2300      	movs	r3, #0
 8003538:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800353e:	2304      	movs	r3, #4
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800354c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800354e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003558:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800355e:	2300      	movs	r3, #0
 8003560:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003562:	2300      	movs	r3, #0
 8003564:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003574:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003578:	4b3c      	ldr	r3, [pc, #240]	; (800366c <ETH_MACDMAConfig+0x388>)
 800357a:	4013      	ands	r3, r2
 800357c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003580:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003582:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003584:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003586:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003588:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800358a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800358c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800358e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003590:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003592:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003594:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003596:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003598:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800359c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80035a0:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80035a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b4:	461a      	mov	r2, r3
 80035b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035ba:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80035ca:	2001      	movs	r0, #1
 80035cc:	f7fe fab4 	bl	8001b38 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d8:	461a      	mov	r2, r3
 80035da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035de:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80035e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80035e4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80035e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80035e8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80035ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80035ec:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80035ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80035f0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80035f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80035f6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80035f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80035fa:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003604:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003608:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003618:	2001      	movs	r0, #1
 800361a:	f7fe fa8d 	bl	8001b38 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003626:	461a      	mov	r2, r3
 8003628:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800362c:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d10d      	bne.n	8003652 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800364c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003650:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	461a      	mov	r2, r3
 8003658:	2100      	movs	r1, #0
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f808 	bl	8003670 <ETH_MACAddressConfig>
}
 8003660:	bf00      	nop
 8003662:	37c0      	adds	r7, #192	; 0xc0
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	ff20810f 	.word	0xff20810f
 800366c:	f8de3f23 	.word	0xf8de3f23

08003670 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3305      	adds	r3, #5
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	3204      	adds	r2, #4
 8003688:	7812      	ldrb	r2, [r2, #0]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <ETH_MACAddressConfig+0x68>)
 8003692:	4413      	add	r3, r2
 8003694:	461a      	mov	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3303      	adds	r3, #3
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	061a      	lsls	r2, r3, #24
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3302      	adds	r3, #2
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	041b      	lsls	r3, r3, #16
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3301      	adds	r3, #1
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	4313      	orrs	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	7812      	ldrb	r2, [r2, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <ETH_MACAddressConfig+0x6c>)
 80036c2:	4413      	add	r3, r2
 80036c4:	461a      	mov	r2, r3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	6013      	str	r3, [r2, #0]
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40028040 	.word	0x40028040
 80036dc:	40028044 	.word	0x40028044

080036e0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0208 	orr.w	r2, r2, #8
 80036fa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003704:	2001      	movs	r0, #1
 8003706:	f000 f8dd 	bl	80038c4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	601a      	str	r2, [r3, #0]
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0208 	bic.w	r2, r2, #8
 8003734:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800373e:	2001      	movs	r0, #1
 8003740:	f000 f8c0 	bl	80038c4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	601a      	str	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0204 	orr.w	r2, r2, #4
 800376e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003778:	2001      	movs	r0, #1
 800377a:	f000 f8a3 	bl	80038c4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0204 	bic.w	r2, r2, #4
 80037a8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80037b2:	2001      	movs	r0, #1
 80037b4:	f000 f886 	bl	80038c4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037e6:	6193      	str	r3, [r2, #24]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800380e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003812:	6193      	str	r3, [r2, #24]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	f043 0302 	orr.w	r3, r3, #2
 800383a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800383e:	6193      	str	r3, [r2, #24]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	f023 0302 	bic.w	r3, r3, #2
 8003866:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800386a:	6193      	str	r3, [r2, #24]
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003896:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800389a:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80038a8:	2001      	movs	r0, #1
 80038aa:	f000 f80b 	bl	80038c4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038b8:	6193      	str	r3, [r2, #24]
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <ETH_Delay+0x38>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0b      	ldr	r2, [pc, #44]	; (8003900 <ETH_Delay+0x3c>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	0a5b      	lsrs	r3, r3, #9
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80038e0:	bf00      	nop
  } 
  while (Delay --);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1e5a      	subs	r2, r3, #1
 80038e6:	60fa      	str	r2, [r7, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f9      	bne.n	80038e0 <ETH_Delay+0x1c>
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000004 	.word	0x20000004
 8003900:	10624dd3 	.word	0x10624dd3

08003904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003904:	b480      	push	{r7}
 8003906:	b089      	sub	sp, #36	; 0x24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003912:	2300      	movs	r3, #0
 8003914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003916:	2300      	movs	r3, #0
 8003918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	e177      	b.n	8003c10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003920:	2201      	movs	r2, #1
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4013      	ands	r3, r2
 8003932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	429a      	cmp	r2, r3
 800393a:	f040 8166 	bne.w	8003c0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b01      	cmp	r3, #1
 8003948:	d005      	beq.n	8003956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003952:	2b02      	cmp	r3, #2
 8003954:	d130      	bne.n	80039b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	2203      	movs	r2, #3
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4013      	ands	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800398c:	2201      	movs	r2, #1
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 0201 	and.w	r2, r3, #1
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d017      	beq.n	80039f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	2203      	movs	r2, #3
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4013      	ands	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d123      	bne.n	8003a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	08da      	lsrs	r2, r3, #3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3208      	adds	r2, #8
 8003a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	220f      	movs	r2, #15
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	08da      	lsrs	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3208      	adds	r2, #8
 8003a42:	69b9      	ldr	r1, [r7, #24]
 8003a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2203      	movs	r2, #3
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 0203 	and.w	r2, r3, #3
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80c0 	beq.w	8003c0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	4b66      	ldr	r3, [pc, #408]	; (8003c28 <HAL_GPIO_Init+0x324>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	4a65      	ldr	r2, [pc, #404]	; (8003c28 <HAL_GPIO_Init+0x324>)
 8003a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a98:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9a:	4b63      	ldr	r3, [pc, #396]	; (8003c28 <HAL_GPIO_Init+0x324>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aa6:	4a61      	ldr	r2, [pc, #388]	; (8003c2c <HAL_GPIO_Init+0x328>)
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	089b      	lsrs	r3, r3, #2
 8003aac:	3302      	adds	r3, #2
 8003aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	220f      	movs	r2, #15
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a58      	ldr	r2, [pc, #352]	; (8003c30 <HAL_GPIO_Init+0x32c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d037      	beq.n	8003b42 <HAL_GPIO_Init+0x23e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a57      	ldr	r2, [pc, #348]	; (8003c34 <HAL_GPIO_Init+0x330>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d031      	beq.n	8003b3e <HAL_GPIO_Init+0x23a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a56      	ldr	r2, [pc, #344]	; (8003c38 <HAL_GPIO_Init+0x334>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d02b      	beq.n	8003b3a <HAL_GPIO_Init+0x236>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a55      	ldr	r2, [pc, #340]	; (8003c3c <HAL_GPIO_Init+0x338>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d025      	beq.n	8003b36 <HAL_GPIO_Init+0x232>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a54      	ldr	r2, [pc, #336]	; (8003c40 <HAL_GPIO_Init+0x33c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01f      	beq.n	8003b32 <HAL_GPIO_Init+0x22e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a53      	ldr	r2, [pc, #332]	; (8003c44 <HAL_GPIO_Init+0x340>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d019      	beq.n	8003b2e <HAL_GPIO_Init+0x22a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a52      	ldr	r2, [pc, #328]	; (8003c48 <HAL_GPIO_Init+0x344>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <HAL_GPIO_Init+0x226>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a51      	ldr	r2, [pc, #324]	; (8003c4c <HAL_GPIO_Init+0x348>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00d      	beq.n	8003b26 <HAL_GPIO_Init+0x222>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a50      	ldr	r2, [pc, #320]	; (8003c50 <HAL_GPIO_Init+0x34c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d007      	beq.n	8003b22 <HAL_GPIO_Init+0x21e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a4f      	ldr	r2, [pc, #316]	; (8003c54 <HAL_GPIO_Init+0x350>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d101      	bne.n	8003b1e <HAL_GPIO_Init+0x21a>
 8003b1a:	2309      	movs	r3, #9
 8003b1c:	e012      	b.n	8003b44 <HAL_GPIO_Init+0x240>
 8003b1e:	230a      	movs	r3, #10
 8003b20:	e010      	b.n	8003b44 <HAL_GPIO_Init+0x240>
 8003b22:	2308      	movs	r3, #8
 8003b24:	e00e      	b.n	8003b44 <HAL_GPIO_Init+0x240>
 8003b26:	2307      	movs	r3, #7
 8003b28:	e00c      	b.n	8003b44 <HAL_GPIO_Init+0x240>
 8003b2a:	2306      	movs	r3, #6
 8003b2c:	e00a      	b.n	8003b44 <HAL_GPIO_Init+0x240>
 8003b2e:	2305      	movs	r3, #5
 8003b30:	e008      	b.n	8003b44 <HAL_GPIO_Init+0x240>
 8003b32:	2304      	movs	r3, #4
 8003b34:	e006      	b.n	8003b44 <HAL_GPIO_Init+0x240>
 8003b36:	2303      	movs	r3, #3
 8003b38:	e004      	b.n	8003b44 <HAL_GPIO_Init+0x240>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e002      	b.n	8003b44 <HAL_GPIO_Init+0x240>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_GPIO_Init+0x240>
 8003b42:	2300      	movs	r3, #0
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	f002 0203 	and.w	r2, r2, #3
 8003b4a:	0092      	lsls	r2, r2, #2
 8003b4c:	4093      	lsls	r3, r2
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b54:	4935      	ldr	r1, [pc, #212]	; (8003c2c <HAL_GPIO_Init+0x328>)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b62:	4b3d      	ldr	r3, [pc, #244]	; (8003c58 <HAL_GPIO_Init+0x354>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b86:	4a34      	ldr	r2, [pc, #208]	; (8003c58 <HAL_GPIO_Init+0x354>)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b8c:	4b32      	ldr	r3, [pc, #200]	; (8003c58 <HAL_GPIO_Init+0x354>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bb0:	4a29      	ldr	r2, [pc, #164]	; (8003c58 <HAL_GPIO_Init+0x354>)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bb6:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <HAL_GPIO_Init+0x354>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bda:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_GPIO_Init+0x354>)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003be0:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_GPIO_Init+0x354>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c04:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <HAL_GPIO_Init+0x354>)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	2b0f      	cmp	r3, #15
 8003c14:	f67f ae84 	bls.w	8003920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	3724      	adds	r7, #36	; 0x24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40013800 	.word	0x40013800
 8003c30:	40020000 	.word	0x40020000
 8003c34:	40020400 	.word	0x40020400
 8003c38:	40020800 	.word	0x40020800
 8003c3c:	40020c00 	.word	0x40020c00
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40021400 	.word	0x40021400
 8003c48:	40021800 	.word	0x40021800
 8003c4c:	40021c00 	.word	0x40021c00
 8003c50:	40022000 	.word	0x40022000
 8003c54:	40022400 	.word	0x40022400
 8003c58:	40013c00 	.word	0x40013c00

08003c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	807b      	strh	r3, [r7, #2]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c6c:	787b      	ldrb	r3, [r7, #1]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c72:	887a      	ldrh	r2, [r7, #2]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c78:	e003      	b.n	8003c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c7a:	887b      	ldrh	r3, [r7, #2]
 8003c7c:	041a      	lsls	r2, r3, #16
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	619a      	str	r2, [r3, #24]
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e12b      	b.n	8003efa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fd f96e 	bl	8000f98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2224      	movs	r2, #36	; 0x24
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0201 	bic.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ce2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cf4:	f002 fcc0 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 8003cf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4a81      	ldr	r2, [pc, #516]	; (8003f04 <HAL_I2C_Init+0x274>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d807      	bhi.n	8003d14 <HAL_I2C_Init+0x84>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a80      	ldr	r2, [pc, #512]	; (8003f08 <HAL_I2C_Init+0x278>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	bf94      	ite	ls
 8003d0c:	2301      	movls	r3, #1
 8003d0e:	2300      	movhi	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	e006      	b.n	8003d22 <HAL_I2C_Init+0x92>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4a7d      	ldr	r2, [pc, #500]	; (8003f0c <HAL_I2C_Init+0x27c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	bf94      	ite	ls
 8003d1c:	2301      	movls	r3, #1
 8003d1e:	2300      	movhi	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e0e7      	b.n	8003efa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4a78      	ldr	r2, [pc, #480]	; (8003f10 <HAL_I2C_Init+0x280>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	0c9b      	lsrs	r3, r3, #18
 8003d34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4a6a      	ldr	r2, [pc, #424]	; (8003f04 <HAL_I2C_Init+0x274>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d802      	bhi.n	8003d64 <HAL_I2C_Init+0xd4>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	3301      	adds	r3, #1
 8003d62:	e009      	b.n	8003d78 <HAL_I2C_Init+0xe8>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d6a:	fb02 f303 	mul.w	r3, r2, r3
 8003d6e:	4a69      	ldr	r2, [pc, #420]	; (8003f14 <HAL_I2C_Init+0x284>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	3301      	adds	r3, #1
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	495c      	ldr	r1, [pc, #368]	; (8003f04 <HAL_I2C_Init+0x274>)
 8003d94:	428b      	cmp	r3, r1
 8003d96:	d819      	bhi.n	8003dcc <HAL_I2C_Init+0x13c>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1e59      	subs	r1, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003da6:	1c59      	adds	r1, r3, #1
 8003da8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003dac:	400b      	ands	r3, r1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_I2C_Init+0x138>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1e59      	subs	r1, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc6:	e051      	b.n	8003e6c <HAL_I2C_Init+0x1dc>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	e04f      	b.n	8003e6c <HAL_I2C_Init+0x1dc>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d111      	bne.n	8003df8 <HAL_I2C_Init+0x168>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1e58      	subs	r0, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	440b      	add	r3, r1
 8003de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	e012      	b.n	8003e1e <HAL_I2C_Init+0x18e>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	1e58      	subs	r0, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6859      	ldr	r1, [r3, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	0099      	lsls	r1, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bf0c      	ite	eq
 8003e18:	2301      	moveq	r3, #1
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_Init+0x196>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e022      	b.n	8003e6c <HAL_I2C_Init+0x1dc>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10e      	bne.n	8003e4c <HAL_I2C_Init+0x1bc>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1e58      	subs	r0, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6859      	ldr	r1, [r3, #4]
 8003e36:	460b      	mov	r3, r1
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	440b      	add	r3, r1
 8003e3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e40:	3301      	adds	r3, #1
 8003e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e4a:	e00f      	b.n	8003e6c <HAL_I2C_Init+0x1dc>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1e58      	subs	r0, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6859      	ldr	r1, [r3, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	0099      	lsls	r1, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e62:	3301      	adds	r3, #1
 8003e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	6809      	ldr	r1, [r1, #0]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69da      	ldr	r2, [r3, #28]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6911      	ldr	r1, [r2, #16]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68d2      	ldr	r2, [r2, #12]
 8003ea6:	4311      	orrs	r1, r2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	000186a0 	.word	0x000186a0
 8003f08:	001e847f 	.word	0x001e847f
 8003f0c:	003d08ff 	.word	0x003d08ff
 8003f10:	431bde83 	.word	0x431bde83
 8003f14:	10624dd3 	.word	0x10624dd3

08003f18 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	461a      	mov	r2, r3
 8003f24:	460b      	mov	r3, r1
 8003f26:	817b      	strh	r3, [r7, #10]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	f040 810d 	bne.w	8004158 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f3e:	4b89      	ldr	r3, [pc, #548]	; (8004164 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	08db      	lsrs	r3, r3, #3
 8003f44:	4a88      	ldr	r2, [pc, #544]	; (8004168 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	0a1a      	lsrs	r2, r3, #8
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009a      	lsls	r2, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d116      	bne.n	8003f92 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f043 0220 	orr.w	r2, r3, #32
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e0e3      	b.n	800415a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d0db      	beq.n	8003f58 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_I2C_Master_Transmit_DMA+0x96>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e0d5      	b.n	800415a <HAL_I2C_Master_Transmit_DMA+0x242>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d007      	beq.n	8003fd4 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2221      	movs	r2, #33	; 0x21
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2210      	movs	r2, #16
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	893a      	ldrh	r2, [r7, #8]
 8004004:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4a56      	ldr	r2, [pc, #344]	; (800416c <HAL_I2C_Master_Transmit_DMA+0x254>)
 8004014:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004016:	897a      	ldrh	r2, [r7, #10]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004020:	2b00      	cmp	r3, #0
 8004022:	d07b      	beq.n	800411c <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004028:	2b00      	cmp	r3, #0
 800402a:	d02a      	beq.n	8004082 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004030:	4a4f      	ldr	r2, [pc, #316]	; (8004170 <HAL_I2C_Master_Transmit_DMA+0x258>)
 8004032:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004038:	4a4e      	ldr	r2, [pc, #312]	; (8004174 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 800403a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004040:	2200      	movs	r2, #0
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004048:	2200      	movs	r2, #0
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004050:	2200      	movs	r2, #0
 8004052:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004058:	2200      	movs	r2, #0
 800405a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	4619      	mov	r1, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3310      	adds	r3, #16
 800406c:	461a      	mov	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004072:	f7fd ff45 	bl	8001f00 <HAL_DMA_Start_IT>
 8004076:	4603      	mov	r3, r0
 8004078:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d139      	bne.n	80040f4 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8004080:	e013      	b.n	80040aa <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e057      	b.n	800415a <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80040c0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d0:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040e0:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e02f      	b.n	8004154 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	f043 0210 	orr.w	r2, r3, #16
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e01e      	b.n	800415a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800412a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004152:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	e000      	b.n	800415a <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
  }
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000004 	.word	0x20000004
 8004168:	14f8b589 	.word	0x14f8b589
 800416c:	ffff0000 	.word	0xffff0000
 8004170:	08005895 	.word	0x08005895
 8004174:	08005a3f 	.word	0x08005a3f

08004178 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	4613      	mov	r3, r2
 8004184:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b20      	cmp	r3, #32
 8004190:	f040 80b8 	bne.w	8004304 <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_I2C_Slave_Receive_DMA+0x28>
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0b0      	b.n	8004306 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_I2C_Slave_Receive_DMA+0x3a>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e0a9      	b.n	8004306 <HAL_I2C_Slave_Receive_DMA+0x18e>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d007      	beq.n	80041d8 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2222      	movs	r2, #34	; 0x22
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	88fa      	ldrh	r2, [r7, #6]
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a3e      	ldr	r2, [pc, #248]	; (8004310 <HAL_I2C_Slave_Receive_DMA+0x198>)
 8004218:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	2b00      	cmp	r3, #0
 8004220:	d02a      	beq.n	8004278 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	4a3b      	ldr	r2, [pc, #236]	; (8004314 <HAL_I2C_Slave_Receive_DMA+0x19c>)
 8004228:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	4a3a      	ldr	r2, [pc, #232]	; (8004318 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 8004230:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	2200      	movs	r2, #0
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	2200      	movs	r2, #0
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	2200      	movs	r2, #0
 8004248:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	2200      	movs	r2, #0
 8004250:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3310      	adds	r3, #16
 800425c:	4619      	mov	r1, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004268:	f7fd fe4a 	bl	8001f00 <HAL_DMA_Start_IT>
 800426c:	4603      	mov	r3, r0
 800426e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d132      	bne.n	80042dc <HAL_I2C_Slave_Receive_DMA+0x164>
 8004276:	e013      	b.n	80042a0 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2228      	movs	r2, #40	; 0x28
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e032      	b.n	8004306 <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ae:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80042c6:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d6:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e014      	b.n	8004306 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	f043 0210 	orr.w	r2, r3, #16
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
  }
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	ffff0000 	.word	0xffff0000
 8004314:	08005895 	.word	0x08005895
 8004318:	08005a3f 	.word	0x08005a3f

0800431c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800433c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004344:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b10      	cmp	r3, #16
 800434a:	d003      	beq.n	8004354 <HAL_I2C_EV_IRQHandler+0x38>
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b40      	cmp	r3, #64	; 0x40
 8004350:	f040 80c1 	bne.w	80044d6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10d      	bne.n	800438a <HAL_I2C_EV_IRQHandler+0x6e>
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004374:	d003      	beq.n	800437e <HAL_I2C_EV_IRQHandler+0x62>
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800437c:	d101      	bne.n	8004382 <HAL_I2C_EV_IRQHandler+0x66>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <HAL_I2C_EV_IRQHandler+0x68>
 8004382:	2300      	movs	r3, #0
 8004384:	2b01      	cmp	r3, #1
 8004386:	f000 8132 	beq.w	80045ee <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00c      	beq.n	80043ae <HAL_I2C_EV_IRQHandler+0x92>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	0a5b      	lsrs	r3, r3, #9
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d006      	beq.n	80043ae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f001 fc63 	bl	8005c6c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fcc8 	bl	8004d3c <I2C_Master_SB>
 80043ac:	e092      	b.n	80044d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	08db      	lsrs	r3, r3, #3
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <HAL_I2C_EV_IRQHandler+0xb2>
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	0a5b      	lsrs	r3, r3, #9
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fd3e 	bl	8004e48 <I2C_Master_ADD10>
 80043cc:	e082      	b.n	80044d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_I2C_EV_IRQHandler+0xd2>
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	0a5b      	lsrs	r3, r3, #9
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fd58 	bl	8004e9c <I2C_Master_ADDR>
 80043ec:	e072      	b.n	80044d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d03b      	beq.n	8004472 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004408:	f000 80f3 	beq.w	80045f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	09db      	lsrs	r3, r3, #7
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00f      	beq.n	8004438 <HAL_I2C_EV_IRQHandler+0x11c>
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	0a9b      	lsrs	r3, r3, #10
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <HAL_I2C_EV_IRQHandler+0x11c>
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	089b      	lsrs	r3, r3, #2
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f942 	bl	80046ba <I2C_MasterTransmit_TXE>
 8004436:	e04d      	b.n	80044d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	089b      	lsrs	r3, r3, #2
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80d6 	beq.w	80045f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	0a5b      	lsrs	r3, r3, #9
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 80cf 	beq.w	80045f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004454:	7bbb      	ldrb	r3, [r7, #14]
 8004456:	2b21      	cmp	r3, #33	; 0x21
 8004458:	d103      	bne.n	8004462 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f9c9 	bl	80047f2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004460:	e0c7      	b.n	80045f2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	f040 80c4 	bne.w	80045f2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fa37 	bl	80048de <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004470:	e0bf      	b.n	80045f2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800447c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004480:	f000 80b7 	beq.w	80045f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00f      	beq.n	80044b0 <HAL_I2C_EV_IRQHandler+0x194>
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	0a9b      	lsrs	r3, r3, #10
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <HAL_I2C_EV_IRQHandler+0x194>
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d103      	bne.n	80044b0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 faac 	bl	8004a06 <I2C_MasterReceive_RXNE>
 80044ae:	e011      	b.n	80044d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	089b      	lsrs	r3, r3, #2
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 809a 	beq.w	80045f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	0a5b      	lsrs	r3, r3, #9
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8093 	beq.w	80045f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fb4b 	bl	8004b68 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044d2:	e08e      	b.n	80045f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80044d4:	e08d      	b.n	80045f2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d004      	beq.n	80044e8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	61fb      	str	r3, [r7, #28]
 80044e6:	e007      	b.n	80044f8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	085b      	lsrs	r3, r3, #1
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d012      	beq.n	800452a <HAL_I2C_EV_IRQHandler+0x20e>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	0a5b      	lsrs	r3, r3, #9
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00c      	beq.n	800452a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004520:	69b9      	ldr	r1, [r7, #24]
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 ff09 	bl	800533a <I2C_Slave_ADDR>
 8004528:	e066      	b.n	80045f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	091b      	lsrs	r3, r3, #4
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_I2C_EV_IRQHandler+0x22e>
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	0a5b      	lsrs	r3, r3, #9
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 ff44 	bl	80053d0 <I2C_Slave_STOPF>
 8004548:	e056      	b.n	80045f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800454a:	7bbb      	ldrb	r3, [r7, #14]
 800454c:	2b21      	cmp	r3, #33	; 0x21
 800454e:	d002      	beq.n	8004556 <HAL_I2C_EV_IRQHandler+0x23a>
 8004550:	7bbb      	ldrb	r3, [r7, #14]
 8004552:	2b29      	cmp	r3, #41	; 0x29
 8004554:	d125      	bne.n	80045a2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	09db      	lsrs	r3, r3, #7
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00f      	beq.n	8004582 <HAL_I2C_EV_IRQHandler+0x266>
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	0a9b      	lsrs	r3, r3, #10
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_I2C_EV_IRQHandler+0x266>
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	089b      	lsrs	r3, r3, #2
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fe1f 	bl	80051be <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004580:	e039      	b.n	80045f6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	089b      	lsrs	r3, r3, #2
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d033      	beq.n	80045f6 <HAL_I2C_EV_IRQHandler+0x2da>
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	0a5b      	lsrs	r3, r3, #9
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d02d      	beq.n	80045f6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fe4c 	bl	8005238 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045a0:	e029      	b.n	80045f6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	099b      	lsrs	r3, r3, #6
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00f      	beq.n	80045ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	0a9b      	lsrs	r3, r3, #10
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	089b      	lsrs	r3, r3, #2
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fe57 	bl	800527a <I2C_SlaveReceive_RXNE>
 80045cc:	e014      	b.n	80045f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00e      	beq.n	80045f8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	0a5b      	lsrs	r3, r3, #9
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fe85 	bl	80052f6 <I2C_SlaveReceive_BTF>
 80045ec:	e004      	b.n	80045f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80045ee:	bf00      	nop
 80045f0:	e002      	b.n	80045f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045f2:	bf00      	nop
 80045f4:	e000      	b.n	80045f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045f6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	460b      	mov	r3, r1
 8004644:	70fb      	strb	r3, [r7, #3]
 8004646:	4613      	mov	r3, r2
 8004648:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d150      	bne.n	8004782 <I2C_MasterTransmit_TXE+0xc8>
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b21      	cmp	r3, #33	; 0x21
 80046e4:	d14d      	bne.n	8004782 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d01d      	beq.n	8004728 <I2C_MasterTransmit_TXE+0x6e>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d01a      	beq.n	8004728 <I2C_MasterTransmit_TXE+0x6e>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046f8:	d016      	beq.n	8004728 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004708:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2211      	movs	r2, #17
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff ff6c 	bl	80045fe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004726:	e060      	b.n	80047ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004736:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004746:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b40      	cmp	r3, #64	; 0x40
 8004760:	d107      	bne.n	8004772 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff ff7d 	bl	800466a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004770:	e03b      	b.n	80047ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff ff3f 	bl	80045fe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004780:	e033      	b.n	80047ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	2b21      	cmp	r3, #33	; 0x21
 8004786:	d005      	beq.n	8004794 <I2C_MasterTransmit_TXE+0xda>
 8004788:	7bbb      	ldrb	r3, [r7, #14]
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d12d      	bne.n	80047ea <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b22      	cmp	r3, #34	; 0x22
 8004792:	d12a      	bne.n	80047ea <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d108      	bne.n	80047b0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80047ae:	e01c      	b.n	80047ea <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d103      	bne.n	80047c4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f88e 	bl	80048de <I2C_MemoryTransmit_TXE_BTF>
}
 80047c2:	e012      	b.n	80047ea <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	781a      	ldrb	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047e8:	e7ff      	b.n	80047ea <I2C_MasterTransmit_TXE+0x130>
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b21      	cmp	r3, #33	; 0x21
 800480a:	d164      	bne.n	80048d6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d012      	beq.n	800483c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	781a      	ldrb	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800483a:	e04c      	b.n	80048d6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b08      	cmp	r3, #8
 8004840:	d01d      	beq.n	800487e <I2C_MasterTransmit_BTF+0x8c>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b20      	cmp	r3, #32
 8004846:	d01a      	beq.n	800487e <I2C_MasterTransmit_BTF+0x8c>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800484e:	d016      	beq.n	800487e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800485e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2211      	movs	r2, #17
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fec1 	bl	80045fe <HAL_I2C_MasterTxCpltCallback>
}
 800487c:	e02b      	b.n	80048d6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800488c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	d107      	bne.n	80048c8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff fed2 	bl	800466a <HAL_I2C_MemTxCpltCallback>
}
 80048c6:	e006      	b.n	80048d6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff fe94 	bl	80045fe <HAL_I2C_MasterTxCpltCallback>
}
 80048d6:	bf00      	nop
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d11d      	bne.n	8004932 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d10b      	bne.n	8004916 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004902:	b2da      	uxtb	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490e:	1c9a      	adds	r2, r3, #2
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004914:	e073      	b.n	80049fe <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491a:	b29b      	uxth	r3, r3
 800491c:	121b      	asrs	r3, r3, #8
 800491e:	b2da      	uxtb	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004930:	e065      	b.n	80049fe <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004936:	2b01      	cmp	r3, #1
 8004938:	d10b      	bne.n	8004952 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493e:	b2da      	uxtb	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004950:	e055      	b.n	80049fe <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004956:	2b02      	cmp	r3, #2
 8004958:	d151      	bne.n	80049fe <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b22      	cmp	r3, #34	; 0x22
 800495e:	d10d      	bne.n	800497c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800496e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	651a      	str	r2, [r3, #80]	; 0x50
}
 800497a:	e040      	b.n	80049fe <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d015      	beq.n	80049b2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b21      	cmp	r3, #33	; 0x21
 800498a:	d112      	bne.n	80049b2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049b0:	e025      	b.n	80049fe <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d120      	bne.n	80049fe <I2C_MemoryTransmit_TXE_BTF+0x120>
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b21      	cmp	r3, #33	; 0x21
 80049c0:	d11d      	bne.n	80049fe <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049d0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff fe36 	bl	800466a <HAL_I2C_MemTxCpltCallback>
}
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b22      	cmp	r3, #34	; 0x22
 8004a18:	f040 80a2 	bne.w	8004b60 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d921      	bls.n	8004a6e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	f040 8082 	bne.w	8004b60 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004a6c:	e078      	b.n	8004b60 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d074      	beq.n	8004b60 <I2C_MasterReceive_RXNE+0x15a>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d002      	beq.n	8004a82 <I2C_MasterReceive_RXNE+0x7c>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d16e      	bne.n	8004b60 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f001 f8c0 	bl	8005c08 <I2C_WaitOnSTOPRequestThroughIT>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d142      	bne.n	8004b14 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d10a      	bne.n	8004afe <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff fdc1 	bl	800467e <HAL_I2C_MemRxCpltCallback>
}
 8004afc:	e030      	b.n	8004b60 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2212      	movs	r2, #18
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff fd80 	bl	8004612 <HAL_I2C_MasterRxCpltCallback>
}
 8004b12:	e025      	b.n	8004b60 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b22:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff fd99 	bl	8004692 <HAL_I2C_ErrorCallback>
}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d11b      	bne.n	8004bb8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004bb6:	e0bd      	b.n	8004d34 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d129      	bne.n	8004c16 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d00a      	beq.n	8004bee <I2C_MasterReceive_BTF+0x86>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d007      	beq.n	8004bee <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c14:	e08e      	b.n	8004d34 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d176      	bne.n	8004d0e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d002      	beq.n	8004c2c <I2C_MasterReceive_BTF+0xc4>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b10      	cmp	r3, #16
 8004c2a:	d108      	bne.n	8004c3e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e019      	b.n	8004c72 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d002      	beq.n	8004c4a <I2C_MasterReceive_BTF+0xe2>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d108      	bne.n	8004c5c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	e00a      	b.n	8004c72 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d007      	beq.n	8004c72 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c70:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	691a      	ldr	r2, [r3, #16]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ccc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b40      	cmp	r3, #64	; 0x40
 8004ce0:	d10a      	bne.n	8004cf8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff fcc4 	bl	800467e <HAL_I2C_MemRxCpltCallback>
}
 8004cf6:	e01d      	b.n	8004d34 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2212      	movs	r2, #18
 8004d04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fc83 	bl	8004612 <HAL_I2C_MasterRxCpltCallback>
}
 8004d0c:	e012      	b.n	8004d34 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d117      	bne.n	8004d80 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	461a      	mov	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d68:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004d6a:	e067      	b.n	8004e3c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f043 0301 	orr.w	r3, r3, #1
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	611a      	str	r2, [r3, #16]
}
 8004d7e:	e05d      	b.n	8004e3c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d88:	d133      	bne.n	8004df2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b21      	cmp	r3, #33	; 0x21
 8004d94:	d109      	bne.n	8004daa <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004da6:	611a      	str	r2, [r3, #16]
 8004da8:	e008      	b.n	8004dbc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d004      	beq.n	8004dce <I2C_Master_SB+0x92>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d108      	bne.n	8004de0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d032      	beq.n	8004e3c <I2C_Master_SB+0x100>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d02d      	beq.n	8004e3c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dee:	605a      	str	r2, [r3, #4]
}
 8004df0:	e024      	b.n	8004e3c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10e      	bne.n	8004e18 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	11db      	asrs	r3, r3, #7
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	f003 0306 	and.w	r3, r3, #6
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f063 030f 	orn	r3, r3, #15
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	611a      	str	r2, [r3, #16]
}
 8004e16:	e011      	b.n	8004e3c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d10d      	bne.n	8004e3c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	11db      	asrs	r3, r3, #7
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f003 0306 	and.w	r3, r3, #6
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f063 030e 	orn	r3, r3, #14
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	611a      	str	r2, [r3, #16]
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <I2C_Master_ADD10+0x26>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d108      	bne.n	8004e80 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00c      	beq.n	8004e90 <I2C_Master_ADD10+0x48>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8e:	605a      	str	r2, [r3, #4]
  }
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b091      	sub	sp, #68	; 0x44
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b22      	cmp	r3, #34	; 0x22
 8004ec4:	f040 8169 	bne.w	800519a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10f      	bne.n	8004ef0 <I2C_Master_ADDR+0x54>
 8004ed0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d10b      	bne.n	8004ef0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed8:	2300      	movs	r3, #0
 8004eda:	633b      	str	r3, [r7, #48]	; 0x30
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	633b      	str	r3, [r7, #48]	; 0x30
 8004eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eee:	e160      	b.n	80051b2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d11d      	bne.n	8004f34 <I2C_Master_ADDR+0x98>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f00:	d118      	bne.n	8004f34 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f02:	2300      	movs	r3, #0
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f26:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	651a      	str	r2, [r3, #80]	; 0x50
 8004f32:	e13e      	b.n	80051b2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d113      	bne.n	8004f66 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3e:	2300      	movs	r3, #0
 8004f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	e115      	b.n	8005192 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	f040 808a 	bne.w	8005086 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f78:	d137      	bne.n	8004fea <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f88:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f98:	d113      	bne.n	8004fc2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004faa:	2300      	movs	r3, #0
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	e0e7      	b.n	8005192 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	623b      	str	r3, [r7, #32]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	623b      	str	r3, [r7, #32]
 8004fd6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	e0d3      	b.n	8005192 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d02e      	beq.n	800504e <I2C_Master_ADDR+0x1b2>
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d02b      	beq.n	800504e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	2b12      	cmp	r3, #18
 8004ffa:	d102      	bne.n	8005002 <I2C_Master_ADDR+0x166>
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d125      	bne.n	800504e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005004:	2b04      	cmp	r3, #4
 8005006:	d00e      	beq.n	8005026 <I2C_Master_ADDR+0x18a>
 8005008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500a:	2b02      	cmp	r3, #2
 800500c:	d00b      	beq.n	8005026 <I2C_Master_ADDR+0x18a>
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	2b10      	cmp	r3, #16
 8005012:	d008      	beq.n	8005026 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e007      	b.n	8005036 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005034:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005036:	2300      	movs	r3, #0
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	e0a1      	b.n	8005192 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505e:	2300      	movs	r3, #0
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	e085      	b.n	8005192 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d14d      	bne.n	800512c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	2b04      	cmp	r3, #4
 8005094:	d016      	beq.n	80050c4 <I2C_Master_ADDR+0x228>
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	2b02      	cmp	r3, #2
 800509a:	d013      	beq.n	80050c4 <I2C_Master_ADDR+0x228>
 800509c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509e:	2b10      	cmp	r3, #16
 80050a0:	d010      	beq.n	80050c4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	e007      	b.n	80050d4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050d2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e2:	d117      	bne.n	8005114 <I2C_Master_ADDR+0x278>
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050ea:	d00b      	beq.n	8005104 <I2C_Master_ADDR+0x268>
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d008      	beq.n	8005104 <I2C_Master_ADDR+0x268>
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d005      	beq.n	8005104 <I2C_Master_ADDR+0x268>
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	2b10      	cmp	r3, #16
 80050fc:	d002      	beq.n	8005104 <I2C_Master_ADDR+0x268>
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	2b20      	cmp	r3, #32
 8005102:	d107      	bne.n	8005114 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005112:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	e032      	b.n	8005192 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800513a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514a:	d117      	bne.n	800517c <I2C_Master_ADDR+0x2e0>
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005152:	d00b      	beq.n	800516c <I2C_Master_ADDR+0x2d0>
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	2b01      	cmp	r3, #1
 8005158:	d008      	beq.n	800516c <I2C_Master_ADDR+0x2d0>
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	2b08      	cmp	r3, #8
 800515e:	d005      	beq.n	800516c <I2C_Master_ADDR+0x2d0>
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	2b10      	cmp	r3, #16
 8005164:	d002      	beq.n	800516c <I2C_Master_ADDR+0x2d0>
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	2b20      	cmp	r3, #32
 800516a:	d107      	bne.n	800517c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800517a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517c:	2300      	movs	r3, #0
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005198:	e00b      	b.n	80051b2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	68fb      	ldr	r3, [r7, #12]
}
 80051b0:	e7ff      	b.n	80051b2 <I2C_Master_ADDR+0x316>
 80051b2:	bf00      	nop
 80051b4:	3744      	adds	r7, #68	; 0x44
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d02b      	beq.n	8005230 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	781a      	ldrb	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d114      	bne.n	8005230 <I2C_SlaveTransmit_TXE+0x72>
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b29      	cmp	r3, #41	; 0x29
 800520a:	d111      	bne.n	8005230 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2221      	movs	r2, #33	; 0x21
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2228      	movs	r2, #40	; 0x28
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff f9fb 	bl	8004626 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d011      	beq.n	800526e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	781a      	ldrb	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005288:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d02c      	beq.n	80052ee <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d114      	bne.n	80052ee <I2C_SlaveReceive_RXNE+0x74>
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b2a      	cmp	r3, #42	; 0x2a
 80052c8:	d111      	bne.n	80052ee <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2222      	movs	r2, #34	; 0x22
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2228      	movs	r2, #40	; 0x28
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7fb f963 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d012      	beq.n	800532e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005344:	2300      	movs	r3, #0
 8005346:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005354:	2b28      	cmp	r3, #40	; 0x28
 8005356:	d127      	bne.n	80053a8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005366:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	089b      	lsrs	r3, r3, #2
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	09db      	lsrs	r3, r3, #7
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d103      	bne.n	800538c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	81bb      	strh	r3, [r7, #12]
 800538a:	e002      	b.n	8005392 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800539a:	89ba      	ldrh	r2, [r7, #12]
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	4619      	mov	r1, r3
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff f94a 	bl	800463a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80053a6:	e00e      	b.n	80053c6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a8:	2300      	movs	r3, #0
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	60bb      	str	r3, [r7, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	60bb      	str	r3, [r7, #8]
 80053bc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80053f0:	2300      	movs	r3, #0
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800542c:	d172      	bne.n	8005514 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	2b22      	cmp	r3, #34	; 0x22
 8005432:	d002      	beq.n	800543a <I2C_Slave_STOPF+0x6a>
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	2b2a      	cmp	r3, #42	; 0x2a
 8005438:	d135      	bne.n	80054a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	b29a      	uxth	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f043 0204 	orr.w	r2, r3, #4
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800546c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	4618      	mov	r0, r3
 8005474:	f7fc ffb8 	bl	80023e8 <HAL_DMA_GetState>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d049      	beq.n	8005512 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	4a69      	ldr	r2, [pc, #420]	; (8005628 <I2C_Slave_STOPF+0x258>)
 8005484:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	4618      	mov	r0, r3
 800548c:	f7fc fe00 	bl	8002090 <HAL_DMA_Abort_IT>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d03d      	beq.n	8005512 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054a0:	4610      	mov	r0, r2
 80054a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054a4:	e035      	b.n	8005512 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f043 0204 	orr.w	r2, r3, #4
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fc ff82 	bl	80023e8 <HAL_DMA_GetState>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d014      	beq.n	8005514 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ee:	4a4e      	ldr	r2, [pc, #312]	; (8005628 <I2C_Slave_STOPF+0x258>)
 80054f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fc fdca 	bl	8002090 <HAL_DMA_Abort_IT>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800550c:	4610      	mov	r0, r2
 800550e:	4798      	blx	r3
 8005510:	e000      	b.n	8005514 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005512:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d03e      	beq.n	800559c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b04      	cmp	r3, #4
 800552a:	d112      	bne.n	8005552 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d112      	bne.n	8005586 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	f043 0204 	orr.w	r2, r3, #4
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f843 	bl	8005630 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80055aa:	e039      	b.n	8005620 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	2b2a      	cmp	r3, #42	; 0x2a
 80055b0:	d109      	bne.n	80055c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2228      	movs	r2, #40	; 0x28
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7fa fff7 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b28      	cmp	r3, #40	; 0x28
 80055d0:	d111      	bne.n	80055f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a15      	ldr	r2, [pc, #84]	; (800562c <I2C_Slave_STOPF+0x25c>)
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff f831 	bl	8004656 <HAL_I2C_ListenCpltCallback>
}
 80055f4:	e014      	b.n	8005620 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	2b22      	cmp	r3, #34	; 0x22
 80055fc:	d002      	beq.n	8005604 <I2C_Slave_STOPF+0x234>
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	2b22      	cmp	r3, #34	; 0x22
 8005602:	d10d      	bne.n	8005620 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fa ffca 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	08005ab9 	.word	0x08005ab9
 800562c:	ffff0000 	.word	0xffff0000

08005630 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005646:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005648:	7bbb      	ldrb	r3, [r7, #14]
 800564a:	2b10      	cmp	r3, #16
 800564c:	d002      	beq.n	8005654 <I2C_ITError+0x24>
 800564e:	7bbb      	ldrb	r3, [r7, #14]
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d10a      	bne.n	800566a <I2C_ITError+0x3a>
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	2b22      	cmp	r3, #34	; 0x22
 8005658:	d107      	bne.n	800566a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005668:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005670:	2b28      	cmp	r3, #40	; 0x28
 8005672:	d107      	bne.n	8005684 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2228      	movs	r2, #40	; 0x28
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005682:	e015      	b.n	80056b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800568e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005692:	d00a      	beq.n	80056aa <I2C_ITError+0x7a>
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	2b60      	cmp	r3, #96	; 0x60
 8005698:	d007      	beq.n	80056aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056be:	d162      	bne.n	8005786 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d020      	beq.n	8005720 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e2:	4a6a      	ldr	r2, [pc, #424]	; (800588c <I2C_ITError+0x25c>)
 80056e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fc fcd0 	bl	8002090 <HAL_DMA_Abort_IT>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 8089 	beq.w	800580a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800571a:	4610      	mov	r0, r2
 800571c:	4798      	blx	r3
 800571e:	e074      	b.n	800580a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005724:	4a59      	ldr	r2, [pc, #356]	; (800588c <I2C_ITError+0x25c>)
 8005726:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	4618      	mov	r0, r3
 800572e:	f7fc fcaf 	bl	8002090 <HAL_DMA_Abort_IT>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d068      	beq.n	800580a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005742:	2b40      	cmp	r3, #64	; 0x40
 8005744:	d10b      	bne.n	800575e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0201 	bic.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005780:	4610      	mov	r0, r2
 8005782:	4798      	blx	r3
 8005784:	e041      	b.n	800580a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b60      	cmp	r3, #96	; 0x60
 8005790:	d125      	bne.n	80057de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d10b      	bne.n	80057c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0201 	bic.w	r2, r2, #1
 80057d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fe ff65 	bl	80046a6 <HAL_I2C_AbortCpltCallback>
 80057dc:	e015      	b.n	800580a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e8:	2b40      	cmp	r3, #64	; 0x40
 80057ea:	d10b      	bne.n	8005804 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7fe ff44 	bl	8004692 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10e      	bne.n	8005838 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005834:	2b00      	cmp	r3, #0
 8005836:	d007      	beq.n	8005848 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005846:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b04      	cmp	r3, #4
 800585a:	d113      	bne.n	8005884 <I2C_ITError+0x254>
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b28      	cmp	r3, #40	; 0x28
 8005860:	d110      	bne.n	8005884 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <I2C_ITError+0x260>)
 8005866:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fe fee9 	bl	8004656 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005884:	bf00      	nop
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	08005ab9 	.word	0x08005ab9
 8005890:	ffff0000 	.word	0xffff0000

08005894 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058b0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80058c6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d4:	2200      	movs	r2, #0
 80058d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	2200      	movs	r2, #0
 80058e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80058e8:	7cfb      	ldrb	r3, [r7, #19]
 80058ea:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80058ee:	2b21      	cmp	r3, #33	; 0x21
 80058f0:	d007      	beq.n	8005902 <I2C_DMAXferCplt+0x6e>
 80058f2:	7cfb      	ldrb	r3, [r7, #19]
 80058f4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80058f8:	2b22      	cmp	r3, #34	; 0x22
 80058fa:	d131      	bne.n	8005960 <I2C_DMAXferCplt+0xcc>
 80058fc:	7cbb      	ldrb	r3, [r7, #18]
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d12e      	bne.n	8005960 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005910:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2200      	movs	r2, #0
 8005916:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005918:	7cfb      	ldrb	r3, [r7, #19]
 800591a:	2b29      	cmp	r3, #41	; 0x29
 800591c:	d10a      	bne.n	8005934 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2221      	movs	r2, #33	; 0x21
 8005922:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2228      	movs	r2, #40	; 0x28
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800592c:	6978      	ldr	r0, [r7, #20]
 800592e:	f7fe fe7a 	bl	8004626 <HAL_I2C_SlaveTxCpltCallback>
 8005932:	e00c      	b.n	800594e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	2b2a      	cmp	r3, #42	; 0x2a
 8005938:	d109      	bne.n	800594e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2222      	movs	r2, #34	; 0x22
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2228      	movs	r2, #40	; 0x28
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005948:	6978      	ldr	r0, [r7, #20]
 800594a:	f7fa fe33 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800595c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800595e:	e06a      	b.n	8005a36 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d064      	beq.n	8005a36 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b01      	cmp	r3, #1
 8005974:	d107      	bne.n	8005986 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005984:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005994:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800599c:	d009      	beq.n	80059b2 <I2C_DMAXferCplt+0x11e>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d006      	beq.n	80059b2 <I2C_DMAXferCplt+0x11e>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80059aa:	d002      	beq.n	80059b2 <I2C_DMAXferCplt+0x11e>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d107      	bne.n	80059c2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059d0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059e0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2200      	movs	r2, #0
 80059e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80059f0:	6978      	ldr	r0, [r7, #20]
 80059f2:	f7fe fe4e 	bl	8004692 <HAL_I2C_ErrorCallback>
}
 80059f6:	e01e      	b.n	8005a36 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	d10a      	bne.n	8005a22 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2200      	movs	r2, #0
 8005a18:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005a1a:	6978      	ldr	r0, [r7, #20]
 8005a1c:	f7fe fe2f 	bl	800467e <HAL_I2C_MemRxCpltCallback>
}
 8005a20:	e009      	b.n	8005a36 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2212      	movs	r2, #18
 8005a2e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a30:	6978      	ldr	r0, [r7, #20]
 8005a32:	f7fe fdee 	bl	8004612 <HAL_I2C_MasterRxCpltCallback>
}
 8005a36:	bf00      	nop
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a58:	2200      	movs	r2, #0
 8005a5a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	2200      	movs	r2, #0
 8005a6a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fc fcc9 	bl	8002404 <HAL_DMA_GetError>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d01b      	beq.n	8005ab0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a86:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	f043 0210 	orr.w	r2, r3, #16
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7fe fdf1 	bl	8004692 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ad2:	4b4b      	ldr	r3, [pc, #300]	; (8005c00 <I2C_DMAAbort+0x148>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	08db      	lsrs	r3, r3, #3
 8005ad8:	4a4a      	ldr	r2, [pc, #296]	; (8005c04 <I2C_DMAAbort+0x14c>)
 8005ada:	fba2 2303 	umull	r2, r3, r2, r3
 8005ade:	0a1a      	lsrs	r2, r3, #8
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	00da      	lsls	r2, r3, #3
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	f043 0220 	orr.w	r2, r3, #32
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005afe:	e00a      	b.n	8005b16 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b14:	d0ea      	beq.n	8005aec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b22:	2200      	movs	r2, #0
 8005b24:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	2200      	movs	r2, #0
 8005b34:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b44:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b58:	2200      	movs	r2, #0
 8005b5a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	2200      	movs	r2, #0
 8005b6a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0201 	bic.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b60      	cmp	r3, #96	; 0x60
 8005b86:	d10e      	bne.n	8005ba6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b9e:	6978      	ldr	r0, [r7, #20]
 8005ba0:	f7fe fd81 	bl	80046a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ba4:	e027      	b.n	8005bf6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ba6:	7cfb      	ldrb	r3, [r7, #19]
 8005ba8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bac:	2b28      	cmp	r3, #40	; 0x28
 8005bae:	d117      	bne.n	8005be0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2228      	movs	r2, #40	; 0x28
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bde:	e007      	b.n	8005bf0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005bf0:	6978      	ldr	r0, [r7, #20]
 8005bf2:	f7fe fd4e 	bl	8004692 <HAL_I2C_ErrorCallback>
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000004 	.word	0x20000004
 8005c04:	14f8b589 	.word	0x14f8b589

08005c08 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c14:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	08db      	lsrs	r3, r3, #3
 8005c1a:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c20:	0a1a      	lsrs	r2, r3, #8
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d107      	bne.n	8005c46 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	f043 0220 	orr.w	r2, r3, #32
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e008      	b.n	8005c58 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c54:	d0e9      	beq.n	8005c2a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	20000004 	.word	0x20000004
 8005c68:	14f8b589 	.word	0x14f8b589

08005c6c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c7c:	d103      	bne.n	8005c86 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c84:	e007      	b.n	8005c96 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c8e:	d102      	bne.n	8005c96 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2208      	movs	r2, #8
 8005c94:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	d129      	bne.n	8005d0c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2224      	movs	r2, #36	; 0x24
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0210 	bic.w	r2, r2, #16
 8005cde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b085      	sub	sp, #20
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d12a      	bne.n	8005d8a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2224      	movs	r2, #36	; 0x24
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0201 	bic.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005d54:	89fb      	ldrh	r3, [r7, #14]
 8005d56:	f023 030f 	bic.w	r3, r3, #15
 8005d5a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	89fb      	ldrh	r3, [r7, #14]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	89fa      	ldrh	r2, [r7, #14]
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	e000      	b.n	8005d8c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005d8a:	2302      	movs	r3, #2
  }
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e267      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d075      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005db6:	4b88      	ldr	r3, [pc, #544]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d00c      	beq.n	8005ddc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dc2:	4b85      	ldr	r3, [pc, #532]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d112      	bne.n	8005df4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dce:	4b82      	ldr	r3, [pc, #520]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dda:	d10b      	bne.n	8005df4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ddc:	4b7e      	ldr	r3, [pc, #504]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d05b      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x108>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d157      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e242      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfc:	d106      	bne.n	8005e0c <HAL_RCC_OscConfig+0x74>
 8005dfe:	4b76      	ldr	r3, [pc, #472]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a75      	ldr	r2, [pc, #468]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	e01d      	b.n	8005e48 <HAL_RCC_OscConfig+0xb0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e14:	d10c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x98>
 8005e16:	4b70      	ldr	r3, [pc, #448]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a6f      	ldr	r2, [pc, #444]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	4b6d      	ldr	r3, [pc, #436]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a6c      	ldr	r2, [pc, #432]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	e00b      	b.n	8005e48 <HAL_RCC_OscConfig+0xb0>
 8005e30:	4b69      	ldr	r3, [pc, #420]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a68      	ldr	r2, [pc, #416]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	4b66      	ldr	r3, [pc, #408]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a65      	ldr	r2, [pc, #404]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d013      	beq.n	8005e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e50:	f7fb fe66 	bl	8001b20 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e58:	f7fb fe62 	bl	8001b20 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b64      	cmp	r3, #100	; 0x64
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e207      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6a:	4b5b      	ldr	r3, [pc, #364]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f0      	beq.n	8005e58 <HAL_RCC_OscConfig+0xc0>
 8005e76:	e014      	b.n	8005ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e78:	f7fb fe52 	bl	8001b20 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e80:	f7fb fe4e 	bl	8001b20 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b64      	cmp	r3, #100	; 0x64
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e1f3      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e92:	4b51      	ldr	r3, [pc, #324]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0xe8>
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d063      	beq.n	8005f76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eae:	4b4a      	ldr	r3, [pc, #296]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 030c 	and.w	r3, r3, #12
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eba:	4b47      	ldr	r3, [pc, #284]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d11c      	bne.n	8005f00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ec6:	4b44      	ldr	r3, [pc, #272]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d116      	bne.n	8005f00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ed2:	4b41      	ldr	r3, [pc, #260]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <HAL_RCC_OscConfig+0x152>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d001      	beq.n	8005eea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e1c7      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eea:	4b3b      	ldr	r3, [pc, #236]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4937      	ldr	r1, [pc, #220]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005efe:	e03a      	b.n	8005f76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d020      	beq.n	8005f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f08:	4b34      	ldr	r3, [pc, #208]	; (8005fdc <HAL_RCC_OscConfig+0x244>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0e:	f7fb fe07 	bl	8001b20 <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f16:	f7fb fe03 	bl	8001b20 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e1a8      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f28:	4b2b      	ldr	r3, [pc, #172]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0f0      	beq.n	8005f16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f34:	4b28      	ldr	r3, [pc, #160]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	4925      	ldr	r1, [pc, #148]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	600b      	str	r3, [r1, #0]
 8005f48:	e015      	b.n	8005f76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f4a:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <HAL_RCC_OscConfig+0x244>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f50:	f7fb fde6 	bl	8001b20 <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f58:	f7fb fde2 	bl	8001b20 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e187      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1f0      	bne.n	8005f58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d036      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d016      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f8a:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <HAL_RCC_OscConfig+0x248>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7fb fdc6 	bl	8001b20 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f98:	f7fb fdc2 	bl	8001b20 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e167      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005faa:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0f0      	beq.n	8005f98 <HAL_RCC_OscConfig+0x200>
 8005fb6:	e01b      	b.n	8005ff0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb8:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <HAL_RCC_OscConfig+0x248>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fbe:	f7fb fdaf 	bl	8001b20 <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fc4:	e00e      	b.n	8005fe4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fc6:	f7fb fdab 	bl	8001b20 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d907      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e150      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	42470000 	.word	0x42470000
 8005fe0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fe4:	4b88      	ldr	r3, [pc, #544]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8005fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1ea      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8097 	beq.w	800612c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ffe:	2300      	movs	r3, #0
 8006000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006002:	4b81      	ldr	r3, [pc, #516]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10f      	bne.n	800602e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800600e:	2300      	movs	r3, #0
 8006010:	60bb      	str	r3, [r7, #8]
 8006012:	4b7d      	ldr	r3, [pc, #500]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	4a7c      	ldr	r2, [pc, #496]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601c:	6413      	str	r3, [r2, #64]	; 0x40
 800601e:	4b7a      	ldr	r3, [pc, #488]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006026:	60bb      	str	r3, [r7, #8]
 8006028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800602a:	2301      	movs	r3, #1
 800602c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800602e:	4b77      	ldr	r3, [pc, #476]	; (800620c <HAL_RCC_OscConfig+0x474>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006036:	2b00      	cmp	r3, #0
 8006038:	d118      	bne.n	800606c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800603a:	4b74      	ldr	r3, [pc, #464]	; (800620c <HAL_RCC_OscConfig+0x474>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a73      	ldr	r2, [pc, #460]	; (800620c <HAL_RCC_OscConfig+0x474>)
 8006040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006046:	f7fb fd6b 	bl	8001b20 <HAL_GetTick>
 800604a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800604c:	e008      	b.n	8006060 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800604e:	f7fb fd67 	bl	8001b20 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e10c      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006060:	4b6a      	ldr	r3, [pc, #424]	; (800620c <HAL_RCC_OscConfig+0x474>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0f0      	beq.n	800604e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d106      	bne.n	8006082 <HAL_RCC_OscConfig+0x2ea>
 8006074:	4b64      	ldr	r3, [pc, #400]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006078:	4a63      	ldr	r2, [pc, #396]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 800607a:	f043 0301 	orr.w	r3, r3, #1
 800607e:	6713      	str	r3, [r2, #112]	; 0x70
 8006080:	e01c      	b.n	80060bc <HAL_RCC_OscConfig+0x324>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	2b05      	cmp	r3, #5
 8006088:	d10c      	bne.n	80060a4 <HAL_RCC_OscConfig+0x30c>
 800608a:	4b5f      	ldr	r3, [pc, #380]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 800608c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608e:	4a5e      	ldr	r2, [pc, #376]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006090:	f043 0304 	orr.w	r3, r3, #4
 8006094:	6713      	str	r3, [r2, #112]	; 0x70
 8006096:	4b5c      	ldr	r3, [pc, #368]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	4a5b      	ldr	r2, [pc, #364]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	6713      	str	r3, [r2, #112]	; 0x70
 80060a2:	e00b      	b.n	80060bc <HAL_RCC_OscConfig+0x324>
 80060a4:	4b58      	ldr	r3, [pc, #352]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80060a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a8:	4a57      	ldr	r2, [pc, #348]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80060aa:	f023 0301 	bic.w	r3, r3, #1
 80060ae:	6713      	str	r3, [r2, #112]	; 0x70
 80060b0:	4b55      	ldr	r3, [pc, #340]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80060b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b4:	4a54      	ldr	r2, [pc, #336]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80060b6:	f023 0304 	bic.w	r3, r3, #4
 80060ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d015      	beq.n	80060f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c4:	f7fb fd2c 	bl	8001b20 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ca:	e00a      	b.n	80060e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060cc:	f7fb fd28 	bl	8001b20 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e0cb      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e2:	4b49      	ldr	r3, [pc, #292]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0ee      	beq.n	80060cc <HAL_RCC_OscConfig+0x334>
 80060ee:	e014      	b.n	800611a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060f0:	f7fb fd16 	bl	8001b20 <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060f6:	e00a      	b.n	800610e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060f8:	f7fb fd12 	bl	8001b20 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	f241 3288 	movw	r2, #5000	; 0x1388
 8006106:	4293      	cmp	r3, r2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e0b5      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800610e:	4b3e      	ldr	r3, [pc, #248]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1ee      	bne.n	80060f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800611a:	7dfb      	ldrb	r3, [r7, #23]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d105      	bne.n	800612c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006120:	4b39      	ldr	r3, [pc, #228]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	4a38      	ldr	r2, [pc, #224]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80a1 	beq.w	8006278 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006136:	4b34      	ldr	r3, [pc, #208]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 030c 	and.w	r3, r3, #12
 800613e:	2b08      	cmp	r3, #8
 8006140:	d05c      	beq.n	80061fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	2b02      	cmp	r3, #2
 8006148:	d141      	bne.n	80061ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800614a:	4b31      	ldr	r3, [pc, #196]	; (8006210 <HAL_RCC_OscConfig+0x478>)
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006150:	f7fb fce6 	bl	8001b20 <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006158:	f7fb fce2 	bl	8001b20 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e087      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800616a:	4b27      	ldr	r3, [pc, #156]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1f0      	bne.n	8006158 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69da      	ldr	r2, [r3, #28]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	019b      	lsls	r3, r3, #6
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	085b      	lsrs	r3, r3, #1
 800618e:	3b01      	subs	r3, #1
 8006190:	041b      	lsls	r3, r3, #16
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	061b      	lsls	r3, r3, #24
 800619a:	491b      	ldr	r1, [pc, #108]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 800619c:	4313      	orrs	r3, r2
 800619e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061a0:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <HAL_RCC_OscConfig+0x478>)
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a6:	f7fb fcbb 	bl	8001b20 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ac:	e008      	b.n	80061c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ae:	f7fb fcb7 	bl	8001b20 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e05c      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c0:	4b11      	ldr	r3, [pc, #68]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0f0      	beq.n	80061ae <HAL_RCC_OscConfig+0x416>
 80061cc:	e054      	b.n	8006278 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <HAL_RCC_OscConfig+0x478>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d4:	f7fb fca4 	bl	8001b20 <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061dc:	f7fb fca0 	bl	8001b20 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e045      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ee:	4b06      	ldr	r3, [pc, #24]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f0      	bne.n	80061dc <HAL_RCC_OscConfig+0x444>
 80061fa:	e03d      	b.n	8006278 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d107      	bne.n	8006214 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e038      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
 8006208:	40023800 	.word	0x40023800
 800620c:	40007000 	.word	0x40007000
 8006210:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006214:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <HAL_RCC_OscConfig+0x4ec>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d028      	beq.n	8006274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800622c:	429a      	cmp	r2, r3
 800622e:	d121      	bne.n	8006274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800623a:	429a      	cmp	r2, r3
 800623c:	d11a      	bne.n	8006274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006244:	4013      	ands	r3, r2
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800624a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800624c:	4293      	cmp	r3, r2
 800624e:	d111      	bne.n	8006274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	085b      	lsrs	r3, r3, #1
 800625c:	3b01      	subs	r3, #1
 800625e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006260:	429a      	cmp	r2, r3
 8006262:	d107      	bne.n	8006274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006270:	429a      	cmp	r2, r3
 8006272:	d001      	beq.n	8006278 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40023800 	.word	0x40023800

08006288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e0cc      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800629c:	4b68      	ldr	r3, [pc, #416]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 030f 	and.w	r3, r3, #15
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d90c      	bls.n	80062c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062aa:	4b65      	ldr	r3, [pc, #404]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b2:	4b63      	ldr	r3, [pc, #396]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d001      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e0b8      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d020      	beq.n	8006312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062dc:	4b59      	ldr	r3, [pc, #356]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	4a58      	ldr	r2, [pc, #352]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062f4:	4b53      	ldr	r3, [pc, #332]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	4a52      	ldr	r2, [pc, #328]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006300:	4b50      	ldr	r3, [pc, #320]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	494d      	ldr	r1, [pc, #308]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	4313      	orrs	r3, r2
 8006310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d044      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d107      	bne.n	8006336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006326:	4b47      	ldr	r3, [pc, #284]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d119      	bne.n	8006366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e07f      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d003      	beq.n	8006346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006342:	2b03      	cmp	r3, #3
 8006344:	d107      	bne.n	8006356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006346:	4b3f      	ldr	r3, [pc, #252]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d109      	bne.n	8006366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e06f      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006356:	4b3b      	ldr	r3, [pc, #236]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e067      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006366:	4b37      	ldr	r3, [pc, #220]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f023 0203 	bic.w	r2, r3, #3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	4934      	ldr	r1, [pc, #208]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006374:	4313      	orrs	r3, r2
 8006376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006378:	f7fb fbd2 	bl	8001b20 <HAL_GetTick>
 800637c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800637e:	e00a      	b.n	8006396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006380:	f7fb fbce 	bl	8001b20 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	f241 3288 	movw	r2, #5000	; 0x1388
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e04f      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006396:	4b2b      	ldr	r3, [pc, #172]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 020c 	and.w	r2, r3, #12
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d1eb      	bne.n	8006380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063a8:	4b25      	ldr	r3, [pc, #148]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d20c      	bcs.n	80063d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b6:	4b22      	ldr	r3, [pc, #136]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063be:	4b20      	ldr	r3, [pc, #128]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d001      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e032      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063dc:	4b19      	ldr	r3, [pc, #100]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	4916      	ldr	r1, [pc, #88]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0308 	and.w	r3, r3, #8
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d009      	beq.n	800640e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063fa:	4b12      	ldr	r3, [pc, #72]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	490e      	ldr	r1, [pc, #56]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 800640a:	4313      	orrs	r3, r2
 800640c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800640e:	f000 f821 	bl	8006454 <HAL_RCC_GetSysClockFreq>
 8006412:	4602      	mov	r2, r0
 8006414:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	091b      	lsrs	r3, r3, #4
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	490a      	ldr	r1, [pc, #40]	; (8006448 <HAL_RCC_ClockConfig+0x1c0>)
 8006420:	5ccb      	ldrb	r3, [r1, r3]
 8006422:	fa22 f303 	lsr.w	r3, r2, r3
 8006426:	4a09      	ldr	r2, [pc, #36]	; (800644c <HAL_RCC_ClockConfig+0x1c4>)
 8006428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800642a:	4b09      	ldr	r3, [pc, #36]	; (8006450 <HAL_RCC_ClockConfig+0x1c8>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f7fb fb32 	bl	8001a98 <HAL_InitTick>

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40023c00 	.word	0x40023c00
 8006444:	40023800 	.word	0x40023800
 8006448:	08017268 	.word	0x08017268
 800644c:	20000004 	.word	0x20000004
 8006450:	20000008 	.word	0x20000008

08006454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006458:	b094      	sub	sp, #80	; 0x50
 800645a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	647b      	str	r3, [r7, #68]	; 0x44
 8006460:	2300      	movs	r3, #0
 8006462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006464:	2300      	movs	r3, #0
 8006466:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800646c:	4b79      	ldr	r3, [pc, #484]	; (8006654 <HAL_RCC_GetSysClockFreq+0x200>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 030c 	and.w	r3, r3, #12
 8006474:	2b08      	cmp	r3, #8
 8006476:	d00d      	beq.n	8006494 <HAL_RCC_GetSysClockFreq+0x40>
 8006478:	2b08      	cmp	r3, #8
 800647a:	f200 80e1 	bhi.w	8006640 <HAL_RCC_GetSysClockFreq+0x1ec>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_RCC_GetSysClockFreq+0x34>
 8006482:	2b04      	cmp	r3, #4
 8006484:	d003      	beq.n	800648e <HAL_RCC_GetSysClockFreq+0x3a>
 8006486:	e0db      	b.n	8006640 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006488:	4b73      	ldr	r3, [pc, #460]	; (8006658 <HAL_RCC_GetSysClockFreq+0x204>)
 800648a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800648c:	e0db      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800648e:	4b73      	ldr	r3, [pc, #460]	; (800665c <HAL_RCC_GetSysClockFreq+0x208>)
 8006490:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006492:	e0d8      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006494:	4b6f      	ldr	r3, [pc, #444]	; (8006654 <HAL_RCC_GetSysClockFreq+0x200>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800649c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800649e:	4b6d      	ldr	r3, [pc, #436]	; (8006654 <HAL_RCC_GetSysClockFreq+0x200>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d063      	beq.n	8006572 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064aa:	4b6a      	ldr	r3, [pc, #424]	; (8006654 <HAL_RCC_GetSysClockFreq+0x200>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	099b      	lsrs	r3, r3, #6
 80064b0:	2200      	movs	r2, #0
 80064b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80064b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064bc:	633b      	str	r3, [r7, #48]	; 0x30
 80064be:	2300      	movs	r3, #0
 80064c0:	637b      	str	r3, [r7, #52]	; 0x34
 80064c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80064c6:	4622      	mov	r2, r4
 80064c8:	462b      	mov	r3, r5
 80064ca:	f04f 0000 	mov.w	r0, #0
 80064ce:	f04f 0100 	mov.w	r1, #0
 80064d2:	0159      	lsls	r1, r3, #5
 80064d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064d8:	0150      	lsls	r0, r2, #5
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4621      	mov	r1, r4
 80064e0:	1a51      	subs	r1, r2, r1
 80064e2:	6139      	str	r1, [r7, #16]
 80064e4:	4629      	mov	r1, r5
 80064e6:	eb63 0301 	sbc.w	r3, r3, r1
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064f8:	4659      	mov	r1, fp
 80064fa:	018b      	lsls	r3, r1, #6
 80064fc:	4651      	mov	r1, sl
 80064fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006502:	4651      	mov	r1, sl
 8006504:	018a      	lsls	r2, r1, #6
 8006506:	4651      	mov	r1, sl
 8006508:	ebb2 0801 	subs.w	r8, r2, r1
 800650c:	4659      	mov	r1, fp
 800650e:	eb63 0901 	sbc.w	r9, r3, r1
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800651e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006522:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006526:	4690      	mov	r8, r2
 8006528:	4699      	mov	r9, r3
 800652a:	4623      	mov	r3, r4
 800652c:	eb18 0303 	adds.w	r3, r8, r3
 8006530:	60bb      	str	r3, [r7, #8]
 8006532:	462b      	mov	r3, r5
 8006534:	eb49 0303 	adc.w	r3, r9, r3
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006546:	4629      	mov	r1, r5
 8006548:	024b      	lsls	r3, r1, #9
 800654a:	4621      	mov	r1, r4
 800654c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006550:	4621      	mov	r1, r4
 8006552:	024a      	lsls	r2, r1, #9
 8006554:	4610      	mov	r0, r2
 8006556:	4619      	mov	r1, r3
 8006558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800655a:	2200      	movs	r2, #0
 800655c:	62bb      	str	r3, [r7, #40]	; 0x28
 800655e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006564:	f7f9 fe94 	bl	8000290 <__aeabi_uldivmod>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4613      	mov	r3, r2
 800656e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006570:	e058      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006572:	4b38      	ldr	r3, [pc, #224]	; (8006654 <HAL_RCC_GetSysClockFreq+0x200>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	099b      	lsrs	r3, r3, #6
 8006578:	2200      	movs	r2, #0
 800657a:	4618      	mov	r0, r3
 800657c:	4611      	mov	r1, r2
 800657e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	2300      	movs	r3, #0
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
 8006588:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800658c:	4642      	mov	r2, r8
 800658e:	464b      	mov	r3, r9
 8006590:	f04f 0000 	mov.w	r0, #0
 8006594:	f04f 0100 	mov.w	r1, #0
 8006598:	0159      	lsls	r1, r3, #5
 800659a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800659e:	0150      	lsls	r0, r2, #5
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4641      	mov	r1, r8
 80065a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80065aa:	4649      	mov	r1, r9
 80065ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065c4:	ebb2 040a 	subs.w	r4, r2, sl
 80065c8:	eb63 050b 	sbc.w	r5, r3, fp
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	00eb      	lsls	r3, r5, #3
 80065d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065da:	00e2      	lsls	r2, r4, #3
 80065dc:	4614      	mov	r4, r2
 80065de:	461d      	mov	r5, r3
 80065e0:	4643      	mov	r3, r8
 80065e2:	18e3      	adds	r3, r4, r3
 80065e4:	603b      	str	r3, [r7, #0]
 80065e6:	464b      	mov	r3, r9
 80065e8:	eb45 0303 	adc.w	r3, r5, r3
 80065ec:	607b      	str	r3, [r7, #4]
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065fa:	4629      	mov	r1, r5
 80065fc:	028b      	lsls	r3, r1, #10
 80065fe:	4621      	mov	r1, r4
 8006600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006604:	4621      	mov	r1, r4
 8006606:	028a      	lsls	r2, r1, #10
 8006608:	4610      	mov	r0, r2
 800660a:	4619      	mov	r1, r3
 800660c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660e:	2200      	movs	r2, #0
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	61fa      	str	r2, [r7, #28]
 8006614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006618:	f7f9 fe3a 	bl	8000290 <__aeabi_uldivmod>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4613      	mov	r3, r2
 8006622:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <HAL_RCC_GetSysClockFreq+0x200>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	0c1b      	lsrs	r3, r3, #16
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	3301      	adds	r3, #1
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006638:	fbb2 f3f3 	udiv	r3, r2, r3
 800663c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800663e:	e002      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006640:	4b05      	ldr	r3, [pc, #20]	; (8006658 <HAL_RCC_GetSysClockFreq+0x204>)
 8006642:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006648:	4618      	mov	r0, r3
 800664a:	3750      	adds	r7, #80	; 0x50
 800664c:	46bd      	mov	sp, r7
 800664e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006652:	bf00      	nop
 8006654:	40023800 	.word	0x40023800
 8006658:	00f42400 	.word	0x00f42400
 800665c:	007a1200 	.word	0x007a1200

08006660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006664:	4b03      	ldr	r3, [pc, #12]	; (8006674 <HAL_RCC_GetHCLKFreq+0x14>)
 8006666:	681b      	ldr	r3, [r3, #0]
}
 8006668:	4618      	mov	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20000004 	.word	0x20000004

08006678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800667c:	f7ff fff0 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 8006680:	4602      	mov	r2, r0
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	0a9b      	lsrs	r3, r3, #10
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	4903      	ldr	r1, [pc, #12]	; (800669c <HAL_RCC_GetPCLK1Freq+0x24>)
 800668e:	5ccb      	ldrb	r3, [r1, r3]
 8006690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006694:	4618      	mov	r0, r3
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40023800 	.word	0x40023800
 800669c:	08017278 	.word	0x08017278

080066a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066a4:	f7ff ffdc 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 80066a8:	4602      	mov	r2, r0
 80066aa:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	0b5b      	lsrs	r3, r3, #13
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	4903      	ldr	r1, [pc, #12]	; (80066c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066b6:	5ccb      	ldrb	r3, [r1, r3]
 80066b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066bc:	4618      	mov	r0, r3
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40023800 	.word	0x40023800
 80066c4:	08017278 	.word	0x08017278

080066c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e07b      	b.n	80067d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d108      	bne.n	80066f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ea:	d009      	beq.n	8006700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	61da      	str	r2, [r3, #28]
 80066f2:	e005      	b.n	8006700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fa fd2e 	bl	800117c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006736:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006784:	ea42 0103 	orr.w	r1, r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	0c1b      	lsrs	r3, r3, #16
 800679e:	f003 0104 	and.w	r1, r3, #4
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	f003 0210 	and.w	r2, r3, #16
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69da      	ldr	r2, [r3, #28]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	4613      	mov	r3, r2
 80067e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_SPI_Transmit_DMA+0x20>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e09b      	b.n	8006934 <HAL_SPI_Transmit_DMA+0x158>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b01      	cmp	r3, #1
 800680e:	d002      	beq.n	8006816 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006810:	2302      	movs	r3, #2
 8006812:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006814:	e089      	b.n	800692a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <HAL_SPI_Transmit_DMA+0x46>
 800681c:	88fb      	ldrh	r3, [r7, #6]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d102      	bne.n	8006828 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006826:	e080      	b.n	800692a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2203      	movs	r2, #3
 800682c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	88fa      	ldrh	r2, [r7, #6]
 8006840:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	88fa      	ldrh	r2, [r7, #6]
 8006846:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800686e:	d10f      	bne.n	8006890 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800687e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800688e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006894:	4a29      	ldr	r2, [pc, #164]	; (800693c <HAL_SPI_Transmit_DMA+0x160>)
 8006896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689c:	4a28      	ldr	r2, [pc, #160]	; (8006940 <HAL_SPI_Transmit_DMA+0x164>)
 800689e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a4:	4a27      	ldr	r2, [pc, #156]	; (8006944 <HAL_SPI_Transmit_DMA+0x168>)
 80068a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ac:	2200      	movs	r2, #0
 80068ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	4619      	mov	r1, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	330c      	adds	r3, #12
 80068c0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80068c8:	f7fb fb1a 	bl	8001f00 <HAL_DMA_Start_IT>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00c      	beq.n	80068ec <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d6:	f043 0210 	orr.w	r2, r3, #16
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80068ea:	e01e      	b.n	800692a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d007      	beq.n	800690a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006908:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0220 	orr.w	r2, r2, #32
 8006918:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0202 	orr.w	r2, r2, #2
 8006928:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006932:	7dfb      	ldrb	r3, [r7, #23]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	08007135 	.word	0x08007135
 8006940:	08006f55 	.word	0x08006f55
 8006944:	08007189 	.word	0x08007189

08006948 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	4613      	mov	r3, r2
 8006954:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d110      	bne.n	8006984 <HAL_SPI_Receive_DMA+0x3c>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800696a:	d10b      	bne.n	8006984 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2204      	movs	r2, #4
 8006970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006974:	88fb      	ldrh	r3, [r7, #6]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 f8ac 	bl	8006ad8 <HAL_SPI_TransmitReceive_DMA>
 8006980:	4603      	mov	r3, r0
 8006982:	e09f      	b.n	8006ac4 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_SPI_Receive_DMA+0x4a>
 800698e:	2302      	movs	r3, #2
 8006990:	e098      	b.n	8006ac4 <HAL_SPI_Receive_DMA+0x17c>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d002      	beq.n	80069ac <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80069a6:	2302      	movs	r3, #2
 80069a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069aa:	e086      	b.n	8006aba <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <HAL_SPI_Receive_DMA+0x70>
 80069b2:	88fb      	ldrh	r3, [r7, #6]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069bc:	e07d      	b.n	8006aba <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2204      	movs	r2, #4
 80069c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	88fa      	ldrh	r2, [r7, #6]
 80069d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	88fa      	ldrh	r2, [r7, #6]
 80069dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069fe:	d10f      	bne.n	8006a20 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a24:	4a29      	ldr	r2, [pc, #164]	; (8006acc <HAL_SPI_Receive_DMA+0x184>)
 8006a26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2c:	4a28      	ldr	r2, [pc, #160]	; (8006ad0 <HAL_SPI_Receive_DMA+0x188>)
 8006a2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a34:	4a27      	ldr	r2, [pc, #156]	; (8006ad4 <HAL_SPI_Receive_DMA+0x18c>)
 8006a36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	330c      	adds	r3, #12
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a50:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a56:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006a58:	f7fb fa52 	bl	8001f00 <HAL_DMA_Start_IT>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00c      	beq.n	8006a7c <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a66:	f043 0210 	orr.w	r2, r3, #16
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006a7a:	e01e      	b.n	8006aba <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a86:	2b40      	cmp	r3, #64	; 0x40
 8006a88:	d007      	beq.n	8006a9a <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a98:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0220 	orr.w	r2, r2, #32
 8006aa8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f042 0201 	orr.w	r2, r2, #1
 8006ab8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	08007151 	.word	0x08007151
 8006ad0:	08006ffd 	.word	0x08006ffd
 8006ad4:	08007189 	.word	0x08007189

08006ad8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d101      	bne.n	8006af8 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e0e3      	b.n	8006cc0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b06:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006b0e:	7dbb      	ldrb	r3, [r7, #22]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d00d      	beq.n	8006b30 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b1a:	d106      	bne.n	8006b2a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d102      	bne.n	8006b2a <HAL_SPI_TransmitReceive_DMA+0x52>
 8006b24:	7dbb      	ldrb	r3, [r7, #22]
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d002      	beq.n	8006b30 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b2e:	e0c2      	b.n	8006cb6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006b3c:	887b      	ldrh	r3, [r7, #2]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b46:	e0b6      	b.n	8006cb6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	d003      	beq.n	8006b5c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2205      	movs	r2, #5
 8006b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	887a      	ldrh	r2, [r7, #2]
 8006b6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	887a      	ldrh	r2, [r7, #2]
 8006b72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	887a      	ldrh	r2, [r7, #2]
 8006b7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	887a      	ldrh	r2, [r7, #2]
 8006b84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d108      	bne.n	8006bb0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba2:	4a49      	ldr	r2, [pc, #292]	; (8006cc8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006ba4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006baa:	4a48      	ldr	r2, [pc, #288]	; (8006ccc <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006bac:	63da      	str	r2, [r3, #60]	; 0x3c
 8006bae:	e007      	b.n	8006bc0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb4:	4a46      	ldr	r2, [pc, #280]	; (8006cd0 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8006bb6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbc:	4a45      	ldr	r2, [pc, #276]	; (8006cd4 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8006bbe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc4:	4a44      	ldr	r2, [pc, #272]	; (8006cd8 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8006bc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bcc:	2200      	movs	r2, #0
 8006bce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	330c      	adds	r3, #12
 8006bda:	4619      	mov	r1, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006be8:	f7fb f98a 	bl	8001f00 <HAL_DMA_Start_IT>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00c      	beq.n	8006c0c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf6:	f043 0210 	orr.w	r2, r3, #16
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006c0a:	e054      	b.n	8006cb6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c20:	2200      	movs	r2, #0
 8006c22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c28:	2200      	movs	r2, #0
 8006c2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c30:	2200      	movs	r2, #0
 8006c32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c38:	2200      	movs	r2, #0
 8006c3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c44:	4619      	mov	r1, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	330c      	adds	r3, #12
 8006c4c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c52:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006c54:	f7fb f954 	bl	8001f00 <HAL_DMA_Start_IT>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00c      	beq.n	8006c78 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c62:	f043 0210 	orr.w	r2, r3, #16
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006c76:	e01e      	b.n	8006cb6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c82:	2b40      	cmp	r3, #64	; 0x40
 8006c84:	d007      	beq.n	8006c96 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c94:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0220 	orr.w	r2, r2, #32
 8006ca4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0202 	orr.w	r2, r2, #2
 8006cb4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	08007151 	.word	0x08007151
 8006ccc:	08006ffd 	.word	0x08006ffd
 8006cd0:	0800716d 	.word	0x0800716d
 8006cd4:	080070a5 	.word	0x080070a5
 8006cd8:	08007189 	.word	0x08007189

08006cdc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	099b      	lsrs	r3, r3, #6
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10f      	bne.n	8006d20 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	099b      	lsrs	r3, r3, #6
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d004      	beq.n	8006d20 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
    return;
 8006d1e:	e0d7      	b.n	8006ed0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	085b      	lsrs	r3, r3, #1
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00a      	beq.n	8006d42 <HAL_SPI_IRQHandler+0x66>
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	09db      	lsrs	r3, r3, #7
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
    return;
 8006d40:	e0c6      	b.n	8006ed0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10c      	bne.n	8006d68 <HAL_SPI_IRQHandler+0x8c>
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	099b      	lsrs	r3, r3, #6
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	0a1b      	lsrs	r3, r3, #8
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 80b4 	beq.w	8006ed0 <HAL_SPI_IRQHandler+0x1f4>
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80ad 	beq.w	8006ed0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	099b      	lsrs	r3, r3, #6
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d023      	beq.n	8006dca <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d011      	beq.n	8006db2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d92:	f043 0204 	orr.w	r2, r3, #4
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	617b      	str	r3, [r7, #20]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	e00b      	b.n	8006dca <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	613b      	str	r3, [r7, #16]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	613b      	str	r3, [r7, #16]
 8006dc6:	693b      	ldr	r3, [r7, #16]
        return;
 8006dc8:	e082      	b.n	8006ed0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d014      	beq.n	8006e00 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	f043 0201 	orr.w	r2, r3, #1
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	0a1b      	lsrs	r3, r3, #8
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00c      	beq.n	8006e26 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e10:	f043 0208 	orr.w	r2, r3, #8
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60bb      	str	r3, [r7, #8]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	60bb      	str	r3, [r7, #8]
 8006e24:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d04f      	beq.n	8006ece <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e3c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d104      	bne.n	8006e5a <HAL_SPI_IRQHandler+0x17e>
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d034      	beq.n	8006ec4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0203 	bic.w	r2, r2, #3
 8006e68:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d011      	beq.n	8006e96 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e76:	4a18      	ldr	r2, [pc, #96]	; (8006ed8 <HAL_SPI_IRQHandler+0x1fc>)
 8006e78:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fb f906 	bl	8002090 <HAL_DMA_Abort_IT>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d016      	beq.n	8006ecc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea2:	4a0d      	ldr	r2, [pc, #52]	; (8006ed8 <HAL_SPI_IRQHandler+0x1fc>)
 8006ea4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fb f8f0 	bl	8002090 <HAL_DMA_Abort_IT>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006ec2:	e003      	b.n	8006ecc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f83b 	bl	8006f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006eca:	e000      	b.n	8006ece <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006ecc:	bf00      	nop
    return;
 8006ece:	bf00      	nop
  }
}
 8006ed0:	3720      	adds	r7, #32
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	080071c9 	.word	0x080071c9

08006edc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f62:	f7fa fddd 	bl	8001b20 <HAL_GetTick>
 8006f66:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f76:	d03b      	beq.n	8006ff0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0220 	bic.w	r2, r2, #32
 8006f86:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0202 	bic.w	r2, r2, #2
 8006f96:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	2164      	movs	r1, #100	; 0x64
 8006f9c:	6978      	ldr	r0, [r7, #20]
 8006f9e:	f000 fa15 	bl	80073cc <SPI_EndRxTxTransaction>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fac:	f043 0220 	orr.w	r2, r3, #32
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10a      	bne.n	8006fd2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006fe8:	6978      	ldr	r0, [r7, #20]
 8006fea:	f7ff ffa9 	bl	8006f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006fee:	e002      	b.n	8006ff6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006ff0:	6978      	ldr	r0, [r7, #20]
 8006ff2:	f7ff ff73 	bl	8006edc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800700a:	f7fa fd89 	bl	8001b20 <HAL_GetTick>
 800700e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701e:	d03b      	beq.n	8007098 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0220 	bic.w	r2, r2, #32
 800702e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10d      	bne.n	8007054 <SPI_DMAReceiveCplt+0x58>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007040:	d108      	bne.n	8007054 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0203 	bic.w	r2, r2, #3
 8007050:	605a      	str	r2, [r3, #4]
 8007052:	e007      	b.n	8007064 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0201 	bic.w	r2, r2, #1
 8007062:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	2164      	movs	r1, #100	; 0x64
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f949 	bl	8007300 <SPI_EndRxTransaction>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2220      	movs	r2, #32
 8007078:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f7ff ff55 	bl	8006f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007096:	e002      	b.n	800709e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7f9 fa7b 	bl	8000594 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070b2:	f7fa fd35 	bl	8001b20 <HAL_GetTick>
 80070b6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c6:	d02f      	beq.n	8007128 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0220 	bic.w	r2, r2, #32
 80070d6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	2164      	movs	r1, #100	; 0x64
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 f975 	bl	80073cc <SPI_EndRxTxTransaction>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ec:	f043 0220 	orr.w	r2, r3, #32
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0203 	bic.w	r2, r2, #3
 8007102:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f7ff ff0d 	bl	8006f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007126:	e002      	b.n	800712e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f7ff fee1 	bl	8006ef0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007140:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f7ff fede 	bl	8006f04 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007148:	bf00      	nop
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f7ff feda 	bl	8006f18 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007164:	bf00      	nop
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f7ff fed6 	bl	8006f2c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0203 	bic.w	r2, r2, #3
 80071a4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	f043 0210 	orr.w	r2, r3, #16
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f7ff fec0 	bl	8006f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f7ff feac 	bl	8006f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	4613      	mov	r3, r2
 80071fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007200:	f7fa fc8e 	bl	8001b20 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	1a9b      	subs	r3, r3, r2
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	4413      	add	r3, r2
 800720e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007210:	f7fa fc86 	bl	8001b20 <HAL_GetTick>
 8007214:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007216:	4b39      	ldr	r3, [pc, #228]	; (80072fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	015b      	lsls	r3, r3, #5
 800721c:	0d1b      	lsrs	r3, r3, #20
 800721e:	69fa      	ldr	r2, [r7, #28]
 8007220:	fb02 f303 	mul.w	r3, r2, r3
 8007224:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007226:	e054      	b.n	80072d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722e:	d050      	beq.n	80072d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007230:	f7fa fc76 	bl	8001b20 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	429a      	cmp	r2, r3
 800723e:	d902      	bls.n	8007246 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d13d      	bne.n	80072c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007254:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800725e:	d111      	bne.n	8007284 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007268:	d004      	beq.n	8007274 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007272:	d107      	bne.n	8007284 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007282:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800728c:	d10f      	bne.n	80072ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e017      	b.n	80072f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689a      	ldr	r2, [r3, #8]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4013      	ands	r3, r2
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	429a      	cmp	r2, r3
 80072e0:	bf0c      	ite	eq
 80072e2:	2301      	moveq	r3, #1
 80072e4:	2300      	movne	r3, #0
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	461a      	mov	r2, r3
 80072ea:	79fb      	ldrb	r3, [r7, #7]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d19b      	bne.n	8007228 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3720      	adds	r7, #32
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000004 	.word	0x20000004

08007300 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af02      	add	r7, sp, #8
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007314:	d111      	bne.n	800733a <SPI_EndRxTransaction+0x3a>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800731e:	d004      	beq.n	800732a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007328:	d107      	bne.n	800733a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007338:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007342:	d12a      	bne.n	800739a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734c:	d012      	beq.n	8007374 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2200      	movs	r2, #0
 8007356:	2180      	movs	r1, #128	; 0x80
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f7ff ff49 	bl	80071f0 <SPI_WaitFlagStateUntilTimeout>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d02d      	beq.n	80073c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007368:	f043 0220 	orr.w	r2, r3, #32
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e026      	b.n	80073c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2200      	movs	r2, #0
 800737c:	2101      	movs	r1, #1
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f7ff ff36 	bl	80071f0 <SPI_WaitFlagStateUntilTimeout>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01a      	beq.n	80073c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738e:	f043 0220 	orr.w	r2, r3, #32
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e013      	b.n	80073c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2200      	movs	r2, #0
 80073a2:	2101      	movs	r1, #1
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff ff23 	bl	80071f0 <SPI_WaitFlagStateUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d007      	beq.n	80073c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b4:	f043 0220 	orr.w	r2, r3, #32
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e000      	b.n	80073c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af02      	add	r7, sp, #8
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80073d8:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <SPI_EndRxTxTransaction+0x7c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a1b      	ldr	r2, [pc, #108]	; (800744c <SPI_EndRxTxTransaction+0x80>)
 80073de:	fba2 2303 	umull	r2, r3, r2, r3
 80073e2:	0d5b      	lsrs	r3, r3, #21
 80073e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073e8:	fb02 f303 	mul.w	r3, r2, r3
 80073ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f6:	d112      	bne.n	800741e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2200      	movs	r2, #0
 8007400:	2180      	movs	r1, #128	; 0x80
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7ff fef4 	bl	80071f0 <SPI_WaitFlagStateUntilTimeout>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d016      	beq.n	800743c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007412:	f043 0220 	orr.w	r2, r3, #32
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e00f      	b.n	800743e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	3b01      	subs	r3, #1
 8007428:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007434:	2b80      	cmp	r3, #128	; 0x80
 8007436:	d0f2      	beq.n	800741e <SPI_EndRxTxTransaction+0x52>
 8007438:	e000      	b.n	800743c <SPI_EndRxTxTransaction+0x70>
        break;
 800743a:	bf00      	nop
  }

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20000004 	.word	0x20000004
 800744c:	165e9f81 	.word	0x165e9f81

08007450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e03f      	b.n	80074e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7f9 ffb2 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2224      	movs	r2, #36	; 0x24
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 ff49 	bl	800832c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	691a      	ldr	r2, [r3, #16]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695a      	ldr	r2, [r3, #20]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68da      	ldr	r2, [r3, #12]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
	...

080074ec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08c      	sub	sp, #48	; 0x30
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b20      	cmp	r3, #32
 8007504:	d165      	bne.n	80075d2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <HAL_UART_Transmit_DMA+0x26>
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e05e      	b.n	80075d4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <HAL_UART_Transmit_DMA+0x38>
 8007520:	2302      	movs	r3, #2
 8007522:	e057      	b.n	80075d4 <HAL_UART_Transmit_DMA+0xe8>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	88fa      	ldrh	r2, [r7, #6]
 8007536:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2221      	movs	r2, #33	; 0x21
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007550:	4a22      	ldr	r2, [pc, #136]	; (80075dc <HAL_UART_Transmit_DMA+0xf0>)
 8007552:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007558:	4a21      	ldr	r2, [pc, #132]	; (80075e0 <HAL_UART_Transmit_DMA+0xf4>)
 800755a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007560:	4a20      	ldr	r2, [pc, #128]	; (80075e4 <HAL_UART_Transmit_DMA+0xf8>)
 8007562:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007568:	2200      	movs	r2, #0
 800756a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800756c:	f107 0308 	add.w	r3, r7, #8
 8007570:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	6819      	ldr	r1, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3304      	adds	r3, #4
 8007580:	461a      	mov	r2, r3
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	f7fa fcbc 	bl	8001f00 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007590:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3314      	adds	r3, #20
 80075a0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	617b      	str	r3, [r7, #20]
   return(result);
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3314      	adds	r3, #20
 80075b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ba:	627a      	str	r2, [r7, #36]	; 0x24
 80075bc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	6a39      	ldr	r1, [r7, #32]
 80075c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e5      	bne.n	800759a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e000      	b.n	80075d4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80075d2:	2302      	movs	r3, #2
  }
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3730      	adds	r7, #48	; 0x30
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	08007bcd 	.word	0x08007bcd
 80075e0:	08007c67 	.word	0x08007c67
 80075e4:	08007ddf 	.word	0x08007ddf

080075e8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d11d      	bne.n	800763e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <HAL_UART_Receive_DMA+0x26>
 8007608:	88fb      	ldrh	r3, [r7, #6]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e016      	b.n	8007640 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_UART_Receive_DMA+0x38>
 800761c:	2302      	movs	r3, #2
 800761e:	e00f      	b.n	8007640 <HAL_UART_Receive_DMA+0x58>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800762e:	88fb      	ldrh	r3, [r7, #6]
 8007630:	461a      	mov	r2, r3
 8007632:	68b9      	ldr	r1, [r7, #8]
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 fc1d 	bl	8007e74 <UART_Start_Receive_DMA>
 800763a:	4603      	mov	r3, r0
 800763c:	e000      	b.n	8007640 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800763e:	2302      	movs	r3, #2
  }
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b0ba      	sub	sp, #232	; 0xe8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800766e:	2300      	movs	r3, #0
 8007670:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007674:	2300      	movs	r3, #0
 8007676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800767a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10f      	bne.n	80076ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800768e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d009      	beq.n	80076ae <HAL_UART_IRQHandler+0x66>
 800769a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800769e:	f003 0320 	and.w	r3, r3, #32
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fd85 	bl	80081b6 <UART_Receive_IT>
      return;
 80076ac:	e256      	b.n	8007b5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80076ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 80de 	beq.w	8007874 <HAL_UART_IRQHandler+0x22c>
 80076b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d106      	bne.n	80076d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 80d1 	beq.w	8007874 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00b      	beq.n	80076f6 <HAL_UART_IRQHandler+0xae>
 80076de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	f043 0201 	orr.w	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fa:	f003 0304 	and.w	r3, r3, #4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00b      	beq.n	800771a <HAL_UART_IRQHandler+0xd2>
 8007702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	f043 0202 	orr.w	r2, r3, #2
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800771a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00b      	beq.n	800773e <HAL_UART_IRQHandler+0xf6>
 8007726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d005      	beq.n	800773e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	f043 0204 	orr.w	r2, r3, #4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800773e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d011      	beq.n	800776e <HAL_UART_IRQHandler+0x126>
 800774a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800774e:	f003 0320 	and.w	r3, r3, #32
 8007752:	2b00      	cmp	r3, #0
 8007754:	d105      	bne.n	8007762 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	f043 0208 	orr.w	r2, r3, #8
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 81ed 	beq.w	8007b52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <HAL_UART_IRQHandler+0x14e>
 8007784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fd10 	bl	80081b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a0:	2b40      	cmp	r3, #64	; 0x40
 80077a2:	bf0c      	ite	eq
 80077a4:	2301      	moveq	r3, #1
 80077a6:	2300      	movne	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	f003 0308 	and.w	r3, r3, #8
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <HAL_UART_IRQHandler+0x17a>
 80077ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d04f      	beq.n	8007862 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fc18 	bl	8007ff8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	d141      	bne.n	800785a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3314      	adds	r3, #20
 80077dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077e4:	e853 3f00 	ldrex	r3, [r3]
 80077e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3314      	adds	r3, #20
 80077fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007802:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800780e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800781a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1d9      	bne.n	80077d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007826:	2b00      	cmp	r3, #0
 8007828:	d013      	beq.n	8007852 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	4a7d      	ldr	r2, [pc, #500]	; (8007a24 <HAL_UART_IRQHandler+0x3dc>)
 8007830:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007836:	4618      	mov	r0, r3
 8007838:	f7fa fc2a 	bl	8002090 <HAL_DMA_Abort_IT>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d016      	beq.n	8007870 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800784c:	4610      	mov	r0, r2
 800784e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007850:	e00e      	b.n	8007870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f9a4 	bl	8007ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007858:	e00a      	b.n	8007870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f9a0 	bl	8007ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007860:	e006      	b.n	8007870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f99c 	bl	8007ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800786e:	e170      	b.n	8007b52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007870:	bf00      	nop
    return;
 8007872:	e16e      	b.n	8007b52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	2b01      	cmp	r3, #1
 800787a:	f040 814a 	bne.w	8007b12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007882:	f003 0310 	and.w	r3, r3, #16
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 8143 	beq.w	8007b12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800788c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007890:	f003 0310 	and.w	r3, r3, #16
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 813c 	beq.w	8007b12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	60bb      	str	r3, [r7, #8]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	60bb      	str	r3, [r7, #8]
 80078ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ba:	2b40      	cmp	r3, #64	; 0x40
 80078bc:	f040 80b4 	bne.w	8007a28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 8140 	beq.w	8007b56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078de:	429a      	cmp	r2, r3
 80078e0:	f080 8139 	bcs.w	8007b56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f6:	f000 8088 	beq.w	8007a0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	330c      	adds	r3, #12
 8007900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007910:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	330c      	adds	r3, #12
 8007922:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007926:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800792a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007932:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800793e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1d9      	bne.n	80078fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3314      	adds	r3, #20
 800794c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007950:	e853 3f00 	ldrex	r3, [r3]
 8007954:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3314      	adds	r3, #20
 8007966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800796a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800796e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007972:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800797c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e1      	bne.n	8007946 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3314      	adds	r3, #20
 8007988:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3314      	adds	r3, #20
 80079a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e3      	bne.n	8007982 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	330c      	adds	r3, #12
 80079ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d2:	e853 3f00 	ldrex	r3, [r3]
 80079d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079da:	f023 0310 	bic.w	r3, r3, #16
 80079de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	330c      	adds	r3, #12
 80079e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80079ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80079ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079f4:	e841 2300 	strex	r3, r2, [r1]
 80079f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e3      	bne.n	80079c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fa fad3 	bl	8001fb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f8ca 	bl	8007bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a20:	e099      	b.n	8007b56 <HAL_UART_IRQHandler+0x50e>
 8007a22:	bf00      	nop
 8007a24:	080080bf 	.word	0x080080bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 808b 	beq.w	8007b5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 8086 	beq.w	8007b5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	330c      	adds	r3, #12
 8007a54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	330c      	adds	r3, #12
 8007a6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a72:	647a      	str	r2, [r7, #68]	; 0x44
 8007a74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e3      	bne.n	8007a4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3314      	adds	r3, #20
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	623b      	str	r3, [r7, #32]
   return(result);
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	f023 0301 	bic.w	r3, r3, #1
 8007a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3314      	adds	r3, #20
 8007aa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007aaa:	633a      	str	r2, [r7, #48]	; 0x30
 8007aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e3      	bne.n	8007a86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	330c      	adds	r3, #12
 8007ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0310 	bic.w	r3, r3, #16
 8007ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	330c      	adds	r3, #12
 8007aec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007af0:	61fa      	str	r2, [r7, #28]
 8007af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	69b9      	ldr	r1, [r7, #24]
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	617b      	str	r3, [r7, #20]
   return(result);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e3      	bne.n	8007acc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f852 	bl	8007bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b10:	e023      	b.n	8007b5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d009      	beq.n	8007b32 <HAL_UART_IRQHandler+0x4ea>
 8007b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fadb 	bl	80080e6 <UART_Transmit_IT>
    return;
 8007b30:	e014      	b.n	8007b5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00e      	beq.n	8007b5c <HAL_UART_IRQHandler+0x514>
 8007b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d008      	beq.n	8007b5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fb1b 	bl	8008186 <UART_EndTransmit_IT>
    return;
 8007b50:	e004      	b.n	8007b5c <HAL_UART_IRQHandler+0x514>
    return;
 8007b52:	bf00      	nop
 8007b54:	e002      	b.n	8007b5c <HAL_UART_IRQHandler+0x514>
      return;
 8007b56:	bf00      	nop
 8007b58:	e000      	b.n	8007b5c <HAL_UART_IRQHandler+0x514>
      return;
 8007b5a:	bf00      	nop
  }
}
 8007b5c:	37e8      	adds	r7, #232	; 0xe8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop

08007b64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b090      	sub	sp, #64	; 0x40
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d137      	bne.n	8007c58 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bea:	2200      	movs	r2, #0
 8007bec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3314      	adds	r3, #20
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	623b      	str	r3, [r7, #32]
   return(result);
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c04:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3314      	adds	r3, #20
 8007c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c0e:	633a      	str	r2, [r7, #48]	; 0x30
 8007c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1e5      	bne.n	8007bee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	330c      	adds	r3, #12
 8007c28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c38:	637b      	str	r3, [r7, #52]	; 0x34
 8007c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	330c      	adds	r3, #12
 8007c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c42:	61fa      	str	r2, [r7, #28]
 8007c44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	69b9      	ldr	r1, [r7, #24]
 8007c48:	69fa      	ldr	r2, [r7, #28]
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	617b      	str	r3, [r7, #20]
   return(result);
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e5      	bne.n	8007c22 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c56:	e002      	b.n	8007c5e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007c58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c5a:	f7ff ff83 	bl	8007b64 <HAL_UART_TxCpltCallback>
}
 8007c5e:	bf00      	nop
 8007c60:	3740      	adds	r7, #64	; 0x40
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f7ff ff7f 	bl	8007b78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c7a:	bf00      	nop
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b09c      	sub	sp, #112	; 0x70
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d172      	bne.n	8007d84 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	330c      	adds	r3, #12
 8007caa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cba:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007cc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e5      	bne.n	8007ca4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3314      	adds	r3, #20
 8007cde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cea:	f023 0301 	bic.w	r3, r3, #1
 8007cee:	667b      	str	r3, [r7, #100]	; 0x64
 8007cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3314      	adds	r3, #20
 8007cf6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cf8:	647a      	str	r2, [r7, #68]	; 0x44
 8007cfa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e5      	bne.n	8007cd8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3314      	adds	r3, #20
 8007d12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d22:	663b      	str	r3, [r7, #96]	; 0x60
 8007d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3314      	adds	r3, #20
 8007d2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d2c:	633a      	str	r2, [r7, #48]	; 0x30
 8007d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d34:	e841 2300 	strex	r3, r2, [r1]
 8007d38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1e5      	bne.n	8007d0c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d42:	2220      	movs	r2, #32
 8007d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d119      	bne.n	8007d84 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	330c      	adds	r3, #12
 8007d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	e853 3f00 	ldrex	r3, [r3]
 8007d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0310 	bic.w	r3, r3, #16
 8007d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d70:	61fa      	str	r2, [r7, #28]
 8007d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	69b9      	ldr	r1, [r7, #24]
 8007d76:	69fa      	ldr	r2, [r7, #28]
 8007d78:	e841 2300 	strex	r3, r2, [r1]
 8007d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e5      	bne.n	8007d50 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d106      	bne.n	8007d9a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d90:	4619      	mov	r1, r3
 8007d92:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d94:	f7ff ff0e 	bl	8007bb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d98:	e002      	b.n	8007da0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007d9a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d9c:	f7f8 fc1a 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 8007da0:	bf00      	nop
 8007da2:	3770      	adds	r7, #112	; 0x70
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d108      	bne.n	8007dd0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007dc2:	085b      	lsrs	r3, r3, #1
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f7ff fef3 	bl	8007bb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007dce:	e002      	b.n	8007dd6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f7ff fedb 	bl	8007b8c <HAL_UART_RxHalfCpltCallback>
}
 8007dd6:	bf00      	nop
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfa:	2b80      	cmp	r3, #128	; 0x80
 8007dfc:	bf0c      	ite	eq
 8007dfe:	2301      	moveq	r3, #1
 8007e00:	2300      	movne	r3, #0
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b21      	cmp	r3, #33	; 0x21
 8007e10:	d108      	bne.n	8007e24 <UART_DMAError+0x46>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d005      	beq.n	8007e24 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007e1e:	68b8      	ldr	r0, [r7, #8]
 8007e20:	f000 f8c2 	bl	8007fa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2e:	2b40      	cmp	r3, #64	; 0x40
 8007e30:	bf0c      	ite	eq
 8007e32:	2301      	moveq	r3, #1
 8007e34:	2300      	movne	r3, #0
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b22      	cmp	r3, #34	; 0x22
 8007e44:	d108      	bne.n	8007e58 <UART_DMAError+0x7a>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007e52:	68b8      	ldr	r0, [r7, #8]
 8007e54:	f000 f8d0 	bl	8007ff8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5c:	f043 0210 	orr.w	r2, r3, #16
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e64:	68b8      	ldr	r0, [r7, #8]
 8007e66:	f7ff fe9b 	bl	8007ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b098      	sub	sp, #96	; 0x60
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	88fa      	ldrh	r2, [r7, #6]
 8007e8c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2222      	movs	r2, #34	; 0x22
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea0:	4a3e      	ldr	r2, [pc, #248]	; (8007f9c <UART_Start_Receive_DMA+0x128>)
 8007ea2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea8:	4a3d      	ldr	r2, [pc, #244]	; (8007fa0 <UART_Start_Receive_DMA+0x12c>)
 8007eaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb0:	4a3c      	ldr	r2, [pc, #240]	; (8007fa4 <UART_Start_Receive_DMA+0x130>)
 8007eb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	2200      	movs	r2, #0
 8007eba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007ebc:	f107 0308 	add.w	r3, r7, #8
 8007ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4619      	mov	r1, r3
 8007ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	f7fa f814 	bl	8001f00 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007ed8:	2300      	movs	r3, #0
 8007eda:	613b      	str	r3, [r7, #16]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	613b      	str	r3, [r7, #16]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	613b      	str	r3, [r7, #16]
 8007eec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	330c      	adds	r3, #12
 8007efc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	330c      	adds	r3, #12
 8007f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f16:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007f18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007f1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e5      	bne.n	8007ef6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3314      	adds	r3, #20
 8007f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3c:	f043 0301 	orr.w	r3, r3, #1
 8007f40:	657b      	str	r3, [r7, #84]	; 0x54
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3314      	adds	r3, #20
 8007f48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f4a:	63ba      	str	r2, [r7, #56]	; 0x38
 8007f4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f52:	e841 2300 	strex	r3, r2, [r1]
 8007f56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1e5      	bne.n	8007f2a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3314      	adds	r3, #20
 8007f64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f74:	653b      	str	r3, [r7, #80]	; 0x50
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3314      	adds	r3, #20
 8007f7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f7e:	627a      	str	r2, [r7, #36]	; 0x24
 8007f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	6a39      	ldr	r1, [r7, #32]
 8007f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e5      	bne.n	8007f5e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3760      	adds	r7, #96	; 0x60
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	08007c83 	.word	0x08007c83
 8007fa0:	08007da9 	.word	0x08007da9
 8007fa4:	08007ddf 	.word	0x08007ddf

08007fa8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b089      	sub	sp, #36	; 0x24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	330c      	adds	r3, #12
 8007fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007fc6:	61fb      	str	r3, [r7, #28]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	61ba      	str	r2, [r7, #24]
 8007fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	6979      	ldr	r1, [r7, #20]
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e5      	bne.n	8007fb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007fec:	bf00      	nop
 8007fee:	3724      	adds	r7, #36	; 0x24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b095      	sub	sp, #84	; 0x54
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	330c      	adds	r3, #12
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800a:	e853 3f00 	ldrex	r3, [r3]
 800800e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	330c      	adds	r3, #12
 800801e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008020:	643a      	str	r2, [r7, #64]	; 0x40
 8008022:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008026:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e5      	bne.n	8008000 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3314      	adds	r3, #20
 800803a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	e853 3f00 	ldrex	r3, [r3]
 8008042:	61fb      	str	r3, [r7, #28]
   return(result);
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	f023 0301 	bic.w	r3, r3, #1
 800804a:	64bb      	str	r3, [r7, #72]	; 0x48
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3314      	adds	r3, #20
 8008052:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008054:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800805a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800805c:	e841 2300 	strex	r3, r2, [r1]
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1e5      	bne.n	8008034 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806c:	2b01      	cmp	r3, #1
 800806e:	d119      	bne.n	80080a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	330c      	adds	r3, #12
 8008076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	e853 3f00 	ldrex	r3, [r3]
 800807e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f023 0310 	bic.w	r3, r3, #16
 8008086:	647b      	str	r3, [r7, #68]	; 0x44
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	330c      	adds	r3, #12
 800808e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008090:	61ba      	str	r2, [r7, #24]
 8008092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	6979      	ldr	r1, [r7, #20]
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	e841 2300 	strex	r3, r2, [r1]
 800809c:	613b      	str	r3, [r7, #16]
   return(result);
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e5      	bne.n	8008070 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2220      	movs	r2, #32
 80080a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80080b2:	bf00      	nop
 80080b4:	3754      	adds	r7, #84	; 0x54
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f7ff fd61 	bl	8007ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080de:	bf00      	nop
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b085      	sub	sp, #20
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b21      	cmp	r3, #33	; 0x21
 80080f8:	d13e      	bne.n	8008178 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008102:	d114      	bne.n	800812e <UART_Transmit_IT+0x48>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d110      	bne.n	800812e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a1b      	ldr	r3, [r3, #32]
 8008110:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008120:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	1c9a      	adds	r2, r3, #2
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	621a      	str	r2, [r3, #32]
 800812c:	e008      	b.n	8008140 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	1c59      	adds	r1, r3, #1
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6211      	str	r1, [r2, #32]
 8008138:	781a      	ldrb	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008144:	b29b      	uxth	r3, r3
 8008146:	3b01      	subs	r3, #1
 8008148:	b29b      	uxth	r3, r3
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	4619      	mov	r1, r3
 800814e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10f      	bne.n	8008174 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008162:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008172:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	e000      	b.n	800817a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008178:	2302      	movs	r3, #2
  }
}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b082      	sub	sp, #8
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68da      	ldr	r2, [r3, #12]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800819c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff fcdc 	bl	8007b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b08c      	sub	sp, #48	; 0x30
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b22      	cmp	r3, #34	; 0x22
 80081c8:	f040 80ab 	bne.w	8008322 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d4:	d117      	bne.n	8008206 <UART_Receive_IT+0x50>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d113      	bne.n	8008206 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fe:	1c9a      	adds	r2, r3, #2
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	629a      	str	r2, [r3, #40]	; 0x28
 8008204:	e026      	b.n	8008254 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008218:	d007      	beq.n	800822a <UART_Receive_IT+0x74>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10a      	bne.n	8008238 <UART_Receive_IT+0x82>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d106      	bne.n	8008238 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	b2da      	uxtb	r2, r3
 8008232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	e008      	b.n	800824a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008244:	b2da      	uxtb	r2, r3
 8008246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008248:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008258:	b29b      	uxth	r3, r3
 800825a:	3b01      	subs	r3, #1
 800825c:	b29b      	uxth	r3, r3
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	4619      	mov	r1, r3
 8008262:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008264:	2b00      	cmp	r3, #0
 8008266:	d15a      	bne.n	800831e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0220 	bic.w	r2, r2, #32
 8008276:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008286:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	695a      	ldr	r2, [r3, #20]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0201 	bic.w	r2, r2, #1
 8008296:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d135      	bne.n	8008314 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	330c      	adds	r3, #12
 80082b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	613b      	str	r3, [r7, #16]
   return(result);
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f023 0310 	bic.w	r3, r3, #16
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	330c      	adds	r3, #12
 80082cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ce:	623a      	str	r2, [r7, #32]
 80082d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	69f9      	ldr	r1, [r7, #28]
 80082d4:	6a3a      	ldr	r2, [r7, #32]
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	61bb      	str	r3, [r7, #24]
   return(result);
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e5      	bne.n	80082ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0310 	and.w	r3, r3, #16
 80082ec:	2b10      	cmp	r3, #16
 80082ee:	d10a      	bne.n	8008306 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800830a:	4619      	mov	r1, r3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff fc51 	bl	8007bb4 <HAL_UARTEx_RxEventCallback>
 8008312:	e002      	b.n	800831a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7f8 f95d 	bl	80005d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	e002      	b.n	8008324 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	e000      	b.n	8008324 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008322:	2302      	movs	r3, #2
  }
}
 8008324:	4618      	mov	r0, r3
 8008326:	3730      	adds	r7, #48	; 0x30
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800832c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008330:	b0c0      	sub	sp, #256	; 0x100
 8008332:	af00      	add	r7, sp, #0
 8008334:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008348:	68d9      	ldr	r1, [r3, #12]
 800834a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	ea40 0301 	orr.w	r3, r0, r1
 8008354:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	431a      	orrs	r2, r3
 8008364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	431a      	orrs	r2, r3
 800836c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	4313      	orrs	r3, r2
 8008374:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008384:	f021 010c 	bic.w	r1, r1, #12
 8008388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008392:	430b      	orrs	r3, r1
 8008394:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80083a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a6:	6999      	ldr	r1, [r3, #24]
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	ea40 0301 	orr.w	r3, r0, r1
 80083b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	4b8f      	ldr	r3, [pc, #572]	; (80085f8 <UART_SetConfig+0x2cc>)
 80083bc:	429a      	cmp	r2, r3
 80083be:	d005      	beq.n	80083cc <UART_SetConfig+0xa0>
 80083c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	4b8d      	ldr	r3, [pc, #564]	; (80085fc <UART_SetConfig+0x2d0>)
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d104      	bne.n	80083d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083cc:	f7fe f968 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 80083d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80083d4:	e003      	b.n	80083de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083d6:	f7fe f94f 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 80083da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083e8:	f040 810c 	bne.w	8008604 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083f0:	2200      	movs	r2, #0
 80083f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80083fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80083fe:	4622      	mov	r2, r4
 8008400:	462b      	mov	r3, r5
 8008402:	1891      	adds	r1, r2, r2
 8008404:	65b9      	str	r1, [r7, #88]	; 0x58
 8008406:	415b      	adcs	r3, r3
 8008408:	65fb      	str	r3, [r7, #92]	; 0x5c
 800840a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800840e:	4621      	mov	r1, r4
 8008410:	eb12 0801 	adds.w	r8, r2, r1
 8008414:	4629      	mov	r1, r5
 8008416:	eb43 0901 	adc.w	r9, r3, r1
 800841a:	f04f 0200 	mov.w	r2, #0
 800841e:	f04f 0300 	mov.w	r3, #0
 8008422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800842a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800842e:	4690      	mov	r8, r2
 8008430:	4699      	mov	r9, r3
 8008432:	4623      	mov	r3, r4
 8008434:	eb18 0303 	adds.w	r3, r8, r3
 8008438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800843c:	462b      	mov	r3, r5
 800843e:	eb49 0303 	adc.w	r3, r9, r3
 8008442:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008452:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008456:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800845a:	460b      	mov	r3, r1
 800845c:	18db      	adds	r3, r3, r3
 800845e:	653b      	str	r3, [r7, #80]	; 0x50
 8008460:	4613      	mov	r3, r2
 8008462:	eb42 0303 	adc.w	r3, r2, r3
 8008466:	657b      	str	r3, [r7, #84]	; 0x54
 8008468:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800846c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008470:	f7f7 ff0e 	bl	8000290 <__aeabi_uldivmod>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4b61      	ldr	r3, [pc, #388]	; (8008600 <UART_SetConfig+0x2d4>)
 800847a:	fba3 2302 	umull	r2, r3, r3, r2
 800847e:	095b      	lsrs	r3, r3, #5
 8008480:	011c      	lsls	r4, r3, #4
 8008482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008486:	2200      	movs	r2, #0
 8008488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800848c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008490:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008494:	4642      	mov	r2, r8
 8008496:	464b      	mov	r3, r9
 8008498:	1891      	adds	r1, r2, r2
 800849a:	64b9      	str	r1, [r7, #72]	; 0x48
 800849c:	415b      	adcs	r3, r3
 800849e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084a4:	4641      	mov	r1, r8
 80084a6:	eb12 0a01 	adds.w	sl, r2, r1
 80084aa:	4649      	mov	r1, r9
 80084ac:	eb43 0b01 	adc.w	fp, r3, r1
 80084b0:	f04f 0200 	mov.w	r2, #0
 80084b4:	f04f 0300 	mov.w	r3, #0
 80084b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084c4:	4692      	mov	sl, r2
 80084c6:	469b      	mov	fp, r3
 80084c8:	4643      	mov	r3, r8
 80084ca:	eb1a 0303 	adds.w	r3, sl, r3
 80084ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084d2:	464b      	mov	r3, r9
 80084d4:	eb4b 0303 	adc.w	r3, fp, r3
 80084d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80084ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80084f0:	460b      	mov	r3, r1
 80084f2:	18db      	adds	r3, r3, r3
 80084f4:	643b      	str	r3, [r7, #64]	; 0x40
 80084f6:	4613      	mov	r3, r2
 80084f8:	eb42 0303 	adc.w	r3, r2, r3
 80084fc:	647b      	str	r3, [r7, #68]	; 0x44
 80084fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008502:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008506:	f7f7 fec3 	bl	8000290 <__aeabi_uldivmod>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	4611      	mov	r1, r2
 8008510:	4b3b      	ldr	r3, [pc, #236]	; (8008600 <UART_SetConfig+0x2d4>)
 8008512:	fba3 2301 	umull	r2, r3, r3, r1
 8008516:	095b      	lsrs	r3, r3, #5
 8008518:	2264      	movs	r2, #100	; 0x64
 800851a:	fb02 f303 	mul.w	r3, r2, r3
 800851e:	1acb      	subs	r3, r1, r3
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008526:	4b36      	ldr	r3, [pc, #216]	; (8008600 <UART_SetConfig+0x2d4>)
 8008528:	fba3 2302 	umull	r2, r3, r3, r2
 800852c:	095b      	lsrs	r3, r3, #5
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008534:	441c      	add	r4, r3
 8008536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800853a:	2200      	movs	r2, #0
 800853c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008540:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008544:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008548:	4642      	mov	r2, r8
 800854a:	464b      	mov	r3, r9
 800854c:	1891      	adds	r1, r2, r2
 800854e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008550:	415b      	adcs	r3, r3
 8008552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008554:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008558:	4641      	mov	r1, r8
 800855a:	1851      	adds	r1, r2, r1
 800855c:	6339      	str	r1, [r7, #48]	; 0x30
 800855e:	4649      	mov	r1, r9
 8008560:	414b      	adcs	r3, r1
 8008562:	637b      	str	r3, [r7, #52]	; 0x34
 8008564:	f04f 0200 	mov.w	r2, #0
 8008568:	f04f 0300 	mov.w	r3, #0
 800856c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008570:	4659      	mov	r1, fp
 8008572:	00cb      	lsls	r3, r1, #3
 8008574:	4651      	mov	r1, sl
 8008576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800857a:	4651      	mov	r1, sl
 800857c:	00ca      	lsls	r2, r1, #3
 800857e:	4610      	mov	r0, r2
 8008580:	4619      	mov	r1, r3
 8008582:	4603      	mov	r3, r0
 8008584:	4642      	mov	r2, r8
 8008586:	189b      	adds	r3, r3, r2
 8008588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800858c:	464b      	mov	r3, r9
 800858e:	460a      	mov	r2, r1
 8008590:	eb42 0303 	adc.w	r3, r2, r3
 8008594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80085a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80085a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80085ac:	460b      	mov	r3, r1
 80085ae:	18db      	adds	r3, r3, r3
 80085b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80085b2:	4613      	mov	r3, r2
 80085b4:	eb42 0303 	adc.w	r3, r2, r3
 80085b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80085c2:	f7f7 fe65 	bl	8000290 <__aeabi_uldivmod>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4b0d      	ldr	r3, [pc, #52]	; (8008600 <UART_SetConfig+0x2d4>)
 80085cc:	fba3 1302 	umull	r1, r3, r3, r2
 80085d0:	095b      	lsrs	r3, r3, #5
 80085d2:	2164      	movs	r1, #100	; 0x64
 80085d4:	fb01 f303 	mul.w	r3, r1, r3
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	3332      	adds	r3, #50	; 0x32
 80085de:	4a08      	ldr	r2, [pc, #32]	; (8008600 <UART_SetConfig+0x2d4>)
 80085e0:	fba2 2303 	umull	r2, r3, r2, r3
 80085e4:	095b      	lsrs	r3, r3, #5
 80085e6:	f003 0207 	and.w	r2, r3, #7
 80085ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4422      	add	r2, r4
 80085f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085f4:	e105      	b.n	8008802 <UART_SetConfig+0x4d6>
 80085f6:	bf00      	nop
 80085f8:	40011000 	.word	0x40011000
 80085fc:	40011400 	.word	0x40011400
 8008600:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008608:	2200      	movs	r2, #0
 800860a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800860e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008612:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008616:	4642      	mov	r2, r8
 8008618:	464b      	mov	r3, r9
 800861a:	1891      	adds	r1, r2, r2
 800861c:	6239      	str	r1, [r7, #32]
 800861e:	415b      	adcs	r3, r3
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
 8008622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008626:	4641      	mov	r1, r8
 8008628:	1854      	adds	r4, r2, r1
 800862a:	4649      	mov	r1, r9
 800862c:	eb43 0501 	adc.w	r5, r3, r1
 8008630:	f04f 0200 	mov.w	r2, #0
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	00eb      	lsls	r3, r5, #3
 800863a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800863e:	00e2      	lsls	r2, r4, #3
 8008640:	4614      	mov	r4, r2
 8008642:	461d      	mov	r5, r3
 8008644:	4643      	mov	r3, r8
 8008646:	18e3      	adds	r3, r4, r3
 8008648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800864c:	464b      	mov	r3, r9
 800864e:	eb45 0303 	adc.w	r3, r5, r3
 8008652:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008662:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008666:	f04f 0200 	mov.w	r2, #0
 800866a:	f04f 0300 	mov.w	r3, #0
 800866e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008672:	4629      	mov	r1, r5
 8008674:	008b      	lsls	r3, r1, #2
 8008676:	4621      	mov	r1, r4
 8008678:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800867c:	4621      	mov	r1, r4
 800867e:	008a      	lsls	r2, r1, #2
 8008680:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008684:	f7f7 fe04 	bl	8000290 <__aeabi_uldivmod>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	4b60      	ldr	r3, [pc, #384]	; (8008810 <UART_SetConfig+0x4e4>)
 800868e:	fba3 2302 	umull	r2, r3, r3, r2
 8008692:	095b      	lsrs	r3, r3, #5
 8008694:	011c      	lsls	r4, r3, #4
 8008696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800869a:	2200      	movs	r2, #0
 800869c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80086a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80086a8:	4642      	mov	r2, r8
 80086aa:	464b      	mov	r3, r9
 80086ac:	1891      	adds	r1, r2, r2
 80086ae:	61b9      	str	r1, [r7, #24]
 80086b0:	415b      	adcs	r3, r3
 80086b2:	61fb      	str	r3, [r7, #28]
 80086b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086b8:	4641      	mov	r1, r8
 80086ba:	1851      	adds	r1, r2, r1
 80086bc:	6139      	str	r1, [r7, #16]
 80086be:	4649      	mov	r1, r9
 80086c0:	414b      	adcs	r3, r1
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	f04f 0200 	mov.w	r2, #0
 80086c8:	f04f 0300 	mov.w	r3, #0
 80086cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086d0:	4659      	mov	r1, fp
 80086d2:	00cb      	lsls	r3, r1, #3
 80086d4:	4651      	mov	r1, sl
 80086d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086da:	4651      	mov	r1, sl
 80086dc:	00ca      	lsls	r2, r1, #3
 80086de:	4610      	mov	r0, r2
 80086e0:	4619      	mov	r1, r3
 80086e2:	4603      	mov	r3, r0
 80086e4:	4642      	mov	r2, r8
 80086e6:	189b      	adds	r3, r3, r2
 80086e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086ec:	464b      	mov	r3, r9
 80086ee:	460a      	mov	r2, r1
 80086f0:	eb42 0303 	adc.w	r3, r2, r3
 80086f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	67bb      	str	r3, [r7, #120]	; 0x78
 8008702:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	f04f 0300 	mov.w	r3, #0
 800870c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008710:	4649      	mov	r1, r9
 8008712:	008b      	lsls	r3, r1, #2
 8008714:	4641      	mov	r1, r8
 8008716:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800871a:	4641      	mov	r1, r8
 800871c:	008a      	lsls	r2, r1, #2
 800871e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008722:	f7f7 fdb5 	bl	8000290 <__aeabi_uldivmod>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	4b39      	ldr	r3, [pc, #228]	; (8008810 <UART_SetConfig+0x4e4>)
 800872c:	fba3 1302 	umull	r1, r3, r3, r2
 8008730:	095b      	lsrs	r3, r3, #5
 8008732:	2164      	movs	r1, #100	; 0x64
 8008734:	fb01 f303 	mul.w	r3, r1, r3
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	011b      	lsls	r3, r3, #4
 800873c:	3332      	adds	r3, #50	; 0x32
 800873e:	4a34      	ldr	r2, [pc, #208]	; (8008810 <UART_SetConfig+0x4e4>)
 8008740:	fba2 2303 	umull	r2, r3, r2, r3
 8008744:	095b      	lsrs	r3, r3, #5
 8008746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800874a:	441c      	add	r4, r3
 800874c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008750:	2200      	movs	r2, #0
 8008752:	673b      	str	r3, [r7, #112]	; 0x70
 8008754:	677a      	str	r2, [r7, #116]	; 0x74
 8008756:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800875a:	4642      	mov	r2, r8
 800875c:	464b      	mov	r3, r9
 800875e:	1891      	adds	r1, r2, r2
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	415b      	adcs	r3, r3
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800876a:	4641      	mov	r1, r8
 800876c:	1851      	adds	r1, r2, r1
 800876e:	6039      	str	r1, [r7, #0]
 8008770:	4649      	mov	r1, r9
 8008772:	414b      	adcs	r3, r1
 8008774:	607b      	str	r3, [r7, #4]
 8008776:	f04f 0200 	mov.w	r2, #0
 800877a:	f04f 0300 	mov.w	r3, #0
 800877e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008782:	4659      	mov	r1, fp
 8008784:	00cb      	lsls	r3, r1, #3
 8008786:	4651      	mov	r1, sl
 8008788:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800878c:	4651      	mov	r1, sl
 800878e:	00ca      	lsls	r2, r1, #3
 8008790:	4610      	mov	r0, r2
 8008792:	4619      	mov	r1, r3
 8008794:	4603      	mov	r3, r0
 8008796:	4642      	mov	r2, r8
 8008798:	189b      	adds	r3, r3, r2
 800879a:	66bb      	str	r3, [r7, #104]	; 0x68
 800879c:	464b      	mov	r3, r9
 800879e:	460a      	mov	r2, r1
 80087a0:	eb42 0303 	adc.w	r3, r2, r3
 80087a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	663b      	str	r3, [r7, #96]	; 0x60
 80087b0:	667a      	str	r2, [r7, #100]	; 0x64
 80087b2:	f04f 0200 	mov.w	r2, #0
 80087b6:	f04f 0300 	mov.w	r3, #0
 80087ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80087be:	4649      	mov	r1, r9
 80087c0:	008b      	lsls	r3, r1, #2
 80087c2:	4641      	mov	r1, r8
 80087c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087c8:	4641      	mov	r1, r8
 80087ca:	008a      	lsls	r2, r1, #2
 80087cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80087d0:	f7f7 fd5e 	bl	8000290 <__aeabi_uldivmod>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4b0d      	ldr	r3, [pc, #52]	; (8008810 <UART_SetConfig+0x4e4>)
 80087da:	fba3 1302 	umull	r1, r3, r3, r2
 80087de:	095b      	lsrs	r3, r3, #5
 80087e0:	2164      	movs	r1, #100	; 0x64
 80087e2:	fb01 f303 	mul.w	r3, r1, r3
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	011b      	lsls	r3, r3, #4
 80087ea:	3332      	adds	r3, #50	; 0x32
 80087ec:	4a08      	ldr	r2, [pc, #32]	; (8008810 <UART_SetConfig+0x4e4>)
 80087ee:	fba2 2303 	umull	r2, r3, r2, r3
 80087f2:	095b      	lsrs	r3, r3, #5
 80087f4:	f003 020f 	and.w	r2, r3, #15
 80087f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4422      	add	r2, r4
 8008800:	609a      	str	r2, [r3, #8]
}
 8008802:	bf00      	nop
 8008804:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008808:	46bd      	mov	sp, r7
 800880a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800880e:	bf00      	nop
 8008810:	51eb851f 	.word	0x51eb851f

08008814 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800881a:	4b8d      	ldr	r3, [pc, #564]	; (8008a50 <MX_LWIP_Init+0x23c>)
 800881c:	22c0      	movs	r2, #192	; 0xc0
 800881e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008820:	4b8b      	ldr	r3, [pc, #556]	; (8008a50 <MX_LWIP_Init+0x23c>)
 8008822:	22a8      	movs	r2, #168	; 0xa8
 8008824:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8008826:	4b8a      	ldr	r3, [pc, #552]	; (8008a50 <MX_LWIP_Init+0x23c>)
 8008828:	2200      	movs	r2, #0
 800882a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 132;
 800882c:	4b88      	ldr	r3, [pc, #544]	; (8008a50 <MX_LWIP_Init+0x23c>)
 800882e:	2284      	movs	r2, #132	; 0x84
 8008830:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008832:	4b88      	ldr	r3, [pc, #544]	; (8008a54 <MX_LWIP_Init+0x240>)
 8008834:	22ff      	movs	r2, #255	; 0xff
 8008836:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008838:	4b86      	ldr	r3, [pc, #536]	; (8008a54 <MX_LWIP_Init+0x240>)
 800883a:	22ff      	movs	r2, #255	; 0xff
 800883c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800883e:	4b85      	ldr	r3, [pc, #532]	; (8008a54 <MX_LWIP_Init+0x240>)
 8008840:	22ff      	movs	r2, #255	; 0xff
 8008842:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008844:	4b83      	ldr	r3, [pc, #524]	; (8008a54 <MX_LWIP_Init+0x240>)
 8008846:	2200      	movs	r2, #0
 8008848:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800884a:	4b83      	ldr	r3, [pc, #524]	; (8008a58 <MX_LWIP_Init+0x244>)
 800884c:	22c0      	movs	r2, #192	; 0xc0
 800884e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008850:	4b81      	ldr	r3, [pc, #516]	; (8008a58 <MX_LWIP_Init+0x244>)
 8008852:	22a8      	movs	r2, #168	; 0xa8
 8008854:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8008856:	4b80      	ldr	r3, [pc, #512]	; (8008a58 <MX_LWIP_Init+0x244>)
 8008858:	2200      	movs	r2, #0
 800885a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800885c:	4b7e      	ldr	r3, [pc, #504]	; (8008a58 <MX_LWIP_Init+0x244>)
 800885e:	2201      	movs	r2, #1
 8008860:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8008862:	f000 fcdf 	bl	8009224 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008866:	4b7a      	ldr	r3, [pc, #488]	; (8008a50 <MX_LWIP_Init+0x23c>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	061a      	lsls	r2, r3, #24
 800886c:	4b78      	ldr	r3, [pc, #480]	; (8008a50 <MX_LWIP_Init+0x23c>)
 800886e:	785b      	ldrb	r3, [r3, #1]
 8008870:	041b      	lsls	r3, r3, #16
 8008872:	431a      	orrs	r2, r3
 8008874:	4b76      	ldr	r3, [pc, #472]	; (8008a50 <MX_LWIP_Init+0x23c>)
 8008876:	789b      	ldrb	r3, [r3, #2]
 8008878:	021b      	lsls	r3, r3, #8
 800887a:	4313      	orrs	r3, r2
 800887c:	4a74      	ldr	r2, [pc, #464]	; (8008a50 <MX_LWIP_Init+0x23c>)
 800887e:	78d2      	ldrb	r2, [r2, #3]
 8008880:	4313      	orrs	r3, r2
 8008882:	061a      	lsls	r2, r3, #24
 8008884:	4b72      	ldr	r3, [pc, #456]	; (8008a50 <MX_LWIP_Init+0x23c>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	0619      	lsls	r1, r3, #24
 800888a:	4b71      	ldr	r3, [pc, #452]	; (8008a50 <MX_LWIP_Init+0x23c>)
 800888c:	785b      	ldrb	r3, [r3, #1]
 800888e:	041b      	lsls	r3, r3, #16
 8008890:	4319      	orrs	r1, r3
 8008892:	4b6f      	ldr	r3, [pc, #444]	; (8008a50 <MX_LWIP_Init+0x23c>)
 8008894:	789b      	ldrb	r3, [r3, #2]
 8008896:	021b      	lsls	r3, r3, #8
 8008898:	430b      	orrs	r3, r1
 800889a:	496d      	ldr	r1, [pc, #436]	; (8008a50 <MX_LWIP_Init+0x23c>)
 800889c:	78c9      	ldrb	r1, [r1, #3]
 800889e:	430b      	orrs	r3, r1
 80088a0:	021b      	lsls	r3, r3, #8
 80088a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088a6:	431a      	orrs	r2, r3
 80088a8:	4b69      	ldr	r3, [pc, #420]	; (8008a50 <MX_LWIP_Init+0x23c>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	0619      	lsls	r1, r3, #24
 80088ae:	4b68      	ldr	r3, [pc, #416]	; (8008a50 <MX_LWIP_Init+0x23c>)
 80088b0:	785b      	ldrb	r3, [r3, #1]
 80088b2:	041b      	lsls	r3, r3, #16
 80088b4:	4319      	orrs	r1, r3
 80088b6:	4b66      	ldr	r3, [pc, #408]	; (8008a50 <MX_LWIP_Init+0x23c>)
 80088b8:	789b      	ldrb	r3, [r3, #2]
 80088ba:	021b      	lsls	r3, r3, #8
 80088bc:	430b      	orrs	r3, r1
 80088be:	4964      	ldr	r1, [pc, #400]	; (8008a50 <MX_LWIP_Init+0x23c>)
 80088c0:	78c9      	ldrb	r1, [r1, #3]
 80088c2:	430b      	orrs	r3, r1
 80088c4:	0a1b      	lsrs	r3, r3, #8
 80088c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80088ca:	431a      	orrs	r2, r3
 80088cc:	4b60      	ldr	r3, [pc, #384]	; (8008a50 <MX_LWIP_Init+0x23c>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	0619      	lsls	r1, r3, #24
 80088d2:	4b5f      	ldr	r3, [pc, #380]	; (8008a50 <MX_LWIP_Init+0x23c>)
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	041b      	lsls	r3, r3, #16
 80088d8:	4319      	orrs	r1, r3
 80088da:	4b5d      	ldr	r3, [pc, #372]	; (8008a50 <MX_LWIP_Init+0x23c>)
 80088dc:	789b      	ldrb	r3, [r3, #2]
 80088de:	021b      	lsls	r3, r3, #8
 80088e0:	430b      	orrs	r3, r1
 80088e2:	495b      	ldr	r1, [pc, #364]	; (8008a50 <MX_LWIP_Init+0x23c>)
 80088e4:	78c9      	ldrb	r1, [r1, #3]
 80088e6:	430b      	orrs	r3, r1
 80088e8:	0e1b      	lsrs	r3, r3, #24
 80088ea:	4313      	orrs	r3, r2
 80088ec:	4a5b      	ldr	r2, [pc, #364]	; (8008a5c <MX_LWIP_Init+0x248>)
 80088ee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80088f0:	4b58      	ldr	r3, [pc, #352]	; (8008a54 <MX_LWIP_Init+0x240>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	061a      	lsls	r2, r3, #24
 80088f6:	4b57      	ldr	r3, [pc, #348]	; (8008a54 <MX_LWIP_Init+0x240>)
 80088f8:	785b      	ldrb	r3, [r3, #1]
 80088fa:	041b      	lsls	r3, r3, #16
 80088fc:	431a      	orrs	r2, r3
 80088fe:	4b55      	ldr	r3, [pc, #340]	; (8008a54 <MX_LWIP_Init+0x240>)
 8008900:	789b      	ldrb	r3, [r3, #2]
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	4313      	orrs	r3, r2
 8008906:	4a53      	ldr	r2, [pc, #332]	; (8008a54 <MX_LWIP_Init+0x240>)
 8008908:	78d2      	ldrb	r2, [r2, #3]
 800890a:	4313      	orrs	r3, r2
 800890c:	061a      	lsls	r2, r3, #24
 800890e:	4b51      	ldr	r3, [pc, #324]	; (8008a54 <MX_LWIP_Init+0x240>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	0619      	lsls	r1, r3, #24
 8008914:	4b4f      	ldr	r3, [pc, #316]	; (8008a54 <MX_LWIP_Init+0x240>)
 8008916:	785b      	ldrb	r3, [r3, #1]
 8008918:	041b      	lsls	r3, r3, #16
 800891a:	4319      	orrs	r1, r3
 800891c:	4b4d      	ldr	r3, [pc, #308]	; (8008a54 <MX_LWIP_Init+0x240>)
 800891e:	789b      	ldrb	r3, [r3, #2]
 8008920:	021b      	lsls	r3, r3, #8
 8008922:	430b      	orrs	r3, r1
 8008924:	494b      	ldr	r1, [pc, #300]	; (8008a54 <MX_LWIP_Init+0x240>)
 8008926:	78c9      	ldrb	r1, [r1, #3]
 8008928:	430b      	orrs	r3, r1
 800892a:	021b      	lsls	r3, r3, #8
 800892c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008930:	431a      	orrs	r2, r3
 8008932:	4b48      	ldr	r3, [pc, #288]	; (8008a54 <MX_LWIP_Init+0x240>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	0619      	lsls	r1, r3, #24
 8008938:	4b46      	ldr	r3, [pc, #280]	; (8008a54 <MX_LWIP_Init+0x240>)
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	041b      	lsls	r3, r3, #16
 800893e:	4319      	orrs	r1, r3
 8008940:	4b44      	ldr	r3, [pc, #272]	; (8008a54 <MX_LWIP_Init+0x240>)
 8008942:	789b      	ldrb	r3, [r3, #2]
 8008944:	021b      	lsls	r3, r3, #8
 8008946:	430b      	orrs	r3, r1
 8008948:	4942      	ldr	r1, [pc, #264]	; (8008a54 <MX_LWIP_Init+0x240>)
 800894a:	78c9      	ldrb	r1, [r1, #3]
 800894c:	430b      	orrs	r3, r1
 800894e:	0a1b      	lsrs	r3, r3, #8
 8008950:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008954:	431a      	orrs	r2, r3
 8008956:	4b3f      	ldr	r3, [pc, #252]	; (8008a54 <MX_LWIP_Init+0x240>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	0619      	lsls	r1, r3, #24
 800895c:	4b3d      	ldr	r3, [pc, #244]	; (8008a54 <MX_LWIP_Init+0x240>)
 800895e:	785b      	ldrb	r3, [r3, #1]
 8008960:	041b      	lsls	r3, r3, #16
 8008962:	4319      	orrs	r1, r3
 8008964:	4b3b      	ldr	r3, [pc, #236]	; (8008a54 <MX_LWIP_Init+0x240>)
 8008966:	789b      	ldrb	r3, [r3, #2]
 8008968:	021b      	lsls	r3, r3, #8
 800896a:	430b      	orrs	r3, r1
 800896c:	4939      	ldr	r1, [pc, #228]	; (8008a54 <MX_LWIP_Init+0x240>)
 800896e:	78c9      	ldrb	r1, [r1, #3]
 8008970:	430b      	orrs	r3, r1
 8008972:	0e1b      	lsrs	r3, r3, #24
 8008974:	4313      	orrs	r3, r2
 8008976:	4a3a      	ldr	r2, [pc, #232]	; (8008a60 <MX_LWIP_Init+0x24c>)
 8008978:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800897a:	4b37      	ldr	r3, [pc, #220]	; (8008a58 <MX_LWIP_Init+0x244>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	061a      	lsls	r2, r3, #24
 8008980:	4b35      	ldr	r3, [pc, #212]	; (8008a58 <MX_LWIP_Init+0x244>)
 8008982:	785b      	ldrb	r3, [r3, #1]
 8008984:	041b      	lsls	r3, r3, #16
 8008986:	431a      	orrs	r2, r3
 8008988:	4b33      	ldr	r3, [pc, #204]	; (8008a58 <MX_LWIP_Init+0x244>)
 800898a:	789b      	ldrb	r3, [r3, #2]
 800898c:	021b      	lsls	r3, r3, #8
 800898e:	4313      	orrs	r3, r2
 8008990:	4a31      	ldr	r2, [pc, #196]	; (8008a58 <MX_LWIP_Init+0x244>)
 8008992:	78d2      	ldrb	r2, [r2, #3]
 8008994:	4313      	orrs	r3, r2
 8008996:	061a      	lsls	r2, r3, #24
 8008998:	4b2f      	ldr	r3, [pc, #188]	; (8008a58 <MX_LWIP_Init+0x244>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	0619      	lsls	r1, r3, #24
 800899e:	4b2e      	ldr	r3, [pc, #184]	; (8008a58 <MX_LWIP_Init+0x244>)
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	041b      	lsls	r3, r3, #16
 80089a4:	4319      	orrs	r1, r3
 80089a6:	4b2c      	ldr	r3, [pc, #176]	; (8008a58 <MX_LWIP_Init+0x244>)
 80089a8:	789b      	ldrb	r3, [r3, #2]
 80089aa:	021b      	lsls	r3, r3, #8
 80089ac:	430b      	orrs	r3, r1
 80089ae:	492a      	ldr	r1, [pc, #168]	; (8008a58 <MX_LWIP_Init+0x244>)
 80089b0:	78c9      	ldrb	r1, [r1, #3]
 80089b2:	430b      	orrs	r3, r1
 80089b4:	021b      	lsls	r3, r3, #8
 80089b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089ba:	431a      	orrs	r2, r3
 80089bc:	4b26      	ldr	r3, [pc, #152]	; (8008a58 <MX_LWIP_Init+0x244>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	0619      	lsls	r1, r3, #24
 80089c2:	4b25      	ldr	r3, [pc, #148]	; (8008a58 <MX_LWIP_Init+0x244>)
 80089c4:	785b      	ldrb	r3, [r3, #1]
 80089c6:	041b      	lsls	r3, r3, #16
 80089c8:	4319      	orrs	r1, r3
 80089ca:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <MX_LWIP_Init+0x244>)
 80089cc:	789b      	ldrb	r3, [r3, #2]
 80089ce:	021b      	lsls	r3, r3, #8
 80089d0:	430b      	orrs	r3, r1
 80089d2:	4921      	ldr	r1, [pc, #132]	; (8008a58 <MX_LWIP_Init+0x244>)
 80089d4:	78c9      	ldrb	r1, [r1, #3]
 80089d6:	430b      	orrs	r3, r1
 80089d8:	0a1b      	lsrs	r3, r3, #8
 80089da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80089de:	431a      	orrs	r2, r3
 80089e0:	4b1d      	ldr	r3, [pc, #116]	; (8008a58 <MX_LWIP_Init+0x244>)
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	0619      	lsls	r1, r3, #24
 80089e6:	4b1c      	ldr	r3, [pc, #112]	; (8008a58 <MX_LWIP_Init+0x244>)
 80089e8:	785b      	ldrb	r3, [r3, #1]
 80089ea:	041b      	lsls	r3, r3, #16
 80089ec:	4319      	orrs	r1, r3
 80089ee:	4b1a      	ldr	r3, [pc, #104]	; (8008a58 <MX_LWIP_Init+0x244>)
 80089f0:	789b      	ldrb	r3, [r3, #2]
 80089f2:	021b      	lsls	r3, r3, #8
 80089f4:	430b      	orrs	r3, r1
 80089f6:	4918      	ldr	r1, [pc, #96]	; (8008a58 <MX_LWIP_Init+0x244>)
 80089f8:	78c9      	ldrb	r1, [r1, #3]
 80089fa:	430b      	orrs	r3, r1
 80089fc:	0e1b      	lsrs	r3, r3, #24
 80089fe:	4313      	orrs	r3, r2
 8008a00:	4a18      	ldr	r2, [pc, #96]	; (8008a64 <MX_LWIP_Init+0x250>)
 8008a02:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008a04:	4b18      	ldr	r3, [pc, #96]	; (8008a68 <MX_LWIP_Init+0x254>)
 8008a06:	9302      	str	r3, [sp, #8]
 8008a08:	4b18      	ldr	r3, [pc, #96]	; (8008a6c <MX_LWIP_Init+0x258>)
 8008a0a:	9301      	str	r3, [sp, #4]
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	4b14      	ldr	r3, [pc, #80]	; (8008a64 <MX_LWIP_Init+0x250>)
 8008a12:	4a13      	ldr	r2, [pc, #76]	; (8008a60 <MX_LWIP_Init+0x24c>)
 8008a14:	4911      	ldr	r1, [pc, #68]	; (8008a5c <MX_LWIP_Init+0x248>)
 8008a16:	4816      	ldr	r0, [pc, #88]	; (8008a70 <MX_LWIP_Init+0x25c>)
 8008a18:	f001 f8aa 	bl	8009b70 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008a1c:	4814      	ldr	r0, [pc, #80]	; (8008a70 <MX_LWIP_Init+0x25c>)
 8008a1e:	f001 fa59 	bl	8009ed4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008a22:	4b13      	ldr	r3, [pc, #76]	; (8008a70 <MX_LWIP_Init+0x25c>)
 8008a24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a28:	089b      	lsrs	r3, r3, #2
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d003      	beq.n	8008a3c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008a34:	480e      	ldr	r0, [pc, #56]	; (8008a70 <MX_LWIP_Init+0x25c>)
 8008a36:	f001 fa5d 	bl	8009ef4 <netif_set_up>
 8008a3a:	e002      	b.n	8008a42 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008a3c:	480c      	ldr	r0, [pc, #48]	; (8008a70 <MX_LWIP_Init+0x25c>)
 8008a3e:	f001 fac5 	bl	8009fcc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8008a42:	490c      	ldr	r1, [pc, #48]	; (8008a74 <MX_LWIP_Init+0x260>)
 8008a44:	480a      	ldr	r0, [pc, #40]	; (8008a70 <MX_LWIP_Init+0x25c>)
 8008a46:	f001 faf3 	bl	800a030 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008a4a:	bf00      	nop
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	2000062c 	.word	0x2000062c
 8008a54:	20000630 	.word	0x20000630
 8008a58:	20000634 	.word	0x20000634
 8008a5c:	20000620 	.word	0x20000620
 8008a60:	20000624 	.word	0x20000624
 8008a64:	20000628 	.word	0x20000628
 8008a68:	080131a5 	.word	0x080131a5
 8008a6c:	08009051 	.word	0x08009051
 8008a70:	200005ec 	.word	0x200005ec
 8008a74:	080090bd 	.word	0x080090bd

08008a78 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b08e      	sub	sp, #56	; 0x38
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	605a      	str	r2, [r3, #4]
 8008a8a:	609a      	str	r2, [r3, #8]
 8008a8c:	60da      	str	r2, [r3, #12]
 8008a8e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a59      	ldr	r2, [pc, #356]	; (8008bfc <HAL_ETH_MspInit+0x184>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	f040 80ac 	bne.w	8008bf4 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	623b      	str	r3, [r7, #32]
 8008aa0:	4b57      	ldr	r3, [pc, #348]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa4:	4a56      	ldr	r2, [pc, #344]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008aa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8008aac:	4b54      	ldr	r3, [pc, #336]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ab4:	623b      	str	r3, [r7, #32]
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	2300      	movs	r3, #0
 8008aba:	61fb      	str	r3, [r7, #28]
 8008abc:	4b50      	ldr	r3, [pc, #320]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac0:	4a4f      	ldr	r2, [pc, #316]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008ac2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8008ac8:	4b4d      	ldr	r3, [pc, #308]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008acc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ad0:	61fb      	str	r3, [r7, #28]
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	4b49      	ldr	r3, [pc, #292]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008adc:	4a48      	ldr	r2, [pc, #288]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008ade:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8008ae4:	4b46      	ldr	r3, [pc, #280]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aec:	61bb      	str	r3, [r7, #24]
 8008aee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008af0:	2300      	movs	r3, #0
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	4b42      	ldr	r3, [pc, #264]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af8:	4a41      	ldr	r2, [pc, #260]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008afa:	f043 0304 	orr.w	r3, r3, #4
 8008afe:	6313      	str	r3, [r2, #48]	; 0x30
 8008b00:	4b3f      	ldr	r3, [pc, #252]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	617b      	str	r3, [r7, #20]
 8008b0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	613b      	str	r3, [r7, #16]
 8008b10:	4b3b      	ldr	r3, [pc, #236]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b14:	4a3a      	ldr	r2, [pc, #232]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008b16:	f043 0301 	orr.w	r3, r3, #1
 8008b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8008b1c:	4b38      	ldr	r3, [pc, #224]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	613b      	str	r3, [r7, #16]
 8008b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b28:	2300      	movs	r3, #0
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	4b34      	ldr	r3, [pc, #208]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b30:	4a33      	ldr	r2, [pc, #204]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008b32:	f043 0302 	orr.w	r3, r3, #2
 8008b36:	6313      	str	r3, [r2, #48]	; 0x30
 8008b38:	4b31      	ldr	r3, [pc, #196]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008b44:	2300      	movs	r3, #0
 8008b46:	60bb      	str	r3, [r7, #8]
 8008b48:	4b2d      	ldr	r3, [pc, #180]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4c:	4a2c      	ldr	r2, [pc, #176]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b52:	6313      	str	r3, [r2, #48]	; 0x30
 8008b54:	4b2a      	ldr	r3, [pc, #168]	; (8008c00 <HAL_ETH_MspInit+0x188>)
 8008b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b5c:	60bb      	str	r3, [r7, #8]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008b60:	2332      	movs	r3, #50	; 0x32
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b64:	2302      	movs	r3, #2
 8008b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008b70:	230b      	movs	r3, #11
 8008b72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4822      	ldr	r0, [pc, #136]	; (8008c04 <HAL_ETH_MspInit+0x18c>)
 8008b7c:	f7fa fec2 	bl	8003904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008b80:	2386      	movs	r3, #134	; 0x86
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b84:	2302      	movs	r3, #2
 8008b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008b90:	230b      	movs	r3, #11
 8008b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b98:	4619      	mov	r1, r3
 8008b9a:	481b      	ldr	r0, [pc, #108]	; (8008c08 <HAL_ETH_MspInit+0x190>)
 8008b9c:	f7fa feb2 	bl	8003904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 8008ba0:	f242 0301 	movw	r3, #8193	; 0x2001
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008bb2:	230b      	movs	r3, #11
 8008bb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bba:	4619      	mov	r1, r3
 8008bbc:	4813      	ldr	r0, [pc, #76]	; (8008c0c <HAL_ETH_MspInit+0x194>)
 8008bbe:	f7fa fea1 	bl	8003904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008bc2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bc8:	2302      	movs	r3, #2
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008bd4:	230b      	movs	r3, #11
 8008bd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bdc:	4619      	mov	r1, r3
 8008bde:	480c      	ldr	r0, [pc, #48]	; (8008c10 <HAL_ETH_MspInit+0x198>)
 8008be0:	f7fa fe90 	bl	8003904 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8008be4:	2200      	movs	r2, #0
 8008be6:	2100      	movs	r1, #0
 8008be8:	203d      	movs	r0, #61	; 0x3d
 8008bea:	f7f9 f8a4 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008bee:	203d      	movs	r0, #61	; 0x3d
 8008bf0:	f7f9 f8bd 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008bf4:	bf00      	nop
 8008bf6:	3738      	adds	r7, #56	; 0x38
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	40028000 	.word	0x40028000
 8008c00:	40023800 	.word	0x40023800
 8008c04:	40020800 	.word	0x40020800
 8008c08:	40020000 	.word	0x40020000
 8008c0c:	40020400 	.word	0x40020400
 8008c10:	40021800 	.word	0x40021800

08008c14 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008c20:	4b4d      	ldr	r3, [pc, #308]	; (8008d58 <low_level_init+0x144>)
 8008c22:	4a4e      	ldr	r2, [pc, #312]	; (8008d5c <low_level_init+0x148>)
 8008c24:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008c26:	4b4c      	ldr	r3, [pc, #304]	; (8008d58 <low_level_init+0x144>)
 8008c28:	2201      	movs	r2, #1
 8008c2a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008c2c:	4b4a      	ldr	r3, [pc, #296]	; (8008d58 <low_level_init+0x144>)
 8008c2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008c32:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008c34:	4b48      	ldr	r3, [pc, #288]	; (8008d58 <low_level_init+0x144>)
 8008c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c3a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008c3c:	4b46      	ldr	r3, [pc, #280]	; (8008d58 <low_level_init+0x144>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8008c42:	2300      	movs	r3, #0
 8008c44:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008c46:	2380      	movs	r3, #128	; 0x80
 8008c48:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008c4a:	23e1      	movs	r3, #225	; 0xe1
 8008c4c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008c52:	2300      	movs	r3, #0
 8008c54:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008c56:	2300      	movs	r3, #0
 8008c58:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008c5a:	4a3f      	ldr	r2, [pc, #252]	; (8008d58 <low_level_init+0x144>)
 8008c5c:	f107 0308 	add.w	r3, r7, #8
 8008c60:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8008c62:	4b3d      	ldr	r3, [pc, #244]	; (8008d58 <low_level_init+0x144>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008c68:	4b3b      	ldr	r3, [pc, #236]	; (8008d58 <low_level_init+0x144>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008c6e:	4b3a      	ldr	r3, [pc, #232]	; (8008d58 <low_level_init+0x144>)
 8008c70:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008c74:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008c76:	4838      	ldr	r0, [pc, #224]	; (8008d58 <low_level_init+0x144>)
 8008c78:	f7f9 fcb0 	bl	80025dc <HAL_ETH_Init>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d108      	bne.n	8008c98 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008c8c:	f043 0304 	orr.w	r3, r3, #4
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008c98:	2304      	movs	r3, #4
 8008c9a:	4a31      	ldr	r2, [pc, #196]	; (8008d60 <low_level_init+0x14c>)
 8008c9c:	4931      	ldr	r1, [pc, #196]	; (8008d64 <low_level_init+0x150>)
 8008c9e:	482e      	ldr	r0, [pc, #184]	; (8008d58 <low_level_init+0x144>)
 8008ca0:	f7f9 fe36 	bl	8002910 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008ca4:	2304      	movs	r3, #4
 8008ca6:	4a30      	ldr	r2, [pc, #192]	; (8008d68 <low_level_init+0x154>)
 8008ca8:	4930      	ldr	r1, [pc, #192]	; (8008d6c <low_level_init+0x158>)
 8008caa:	482b      	ldr	r0, [pc, #172]	; (8008d58 <low_level_init+0x144>)
 8008cac:	f7f9 fe98 	bl	80029e0 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2206      	movs	r2, #6
 8008cb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008cb8:	4b27      	ldr	r3, [pc, #156]	; (8008d58 <low_level_init+0x144>)
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	781a      	ldrb	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008cc4:	4b24      	ldr	r3, [pc, #144]	; (8008d58 <low_level_init+0x144>)
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	785a      	ldrb	r2, [r3, #1]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008cd0:	4b21      	ldr	r3, [pc, #132]	; (8008d58 <low_level_init+0x144>)
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	789a      	ldrb	r2, [r3, #2]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008cdc:	4b1e      	ldr	r3, [pc, #120]	; (8008d58 <low_level_init+0x144>)
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	78da      	ldrb	r2, [r3, #3]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008ce8:	4b1b      	ldr	r3, [pc, #108]	; (8008d58 <low_level_init+0x144>)
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	791a      	ldrb	r2, [r3, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008cf4:	4b18      	ldr	r3, [pc, #96]	; (8008d58 <low_level_init+0x144>)
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	795a      	ldrb	r2, [r3, #5]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008d06:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008d0e:	f043 030a 	orr.w	r3, r3, #10
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008d1a:	480f      	ldr	r0, [pc, #60]	; (8008d58 <low_level_init+0x144>)
 8008d1c:	f7fa f98a 	bl	8003034 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008d20:	f107 0310 	add.w	r3, r7, #16
 8008d24:	461a      	mov	r2, r3
 8008d26:	211d      	movs	r1, #29
 8008d28:	480b      	ldr	r0, [pc, #44]	; (8008d58 <low_level_init+0x144>)
 8008d2a:	f7fa f8b5 	bl	8002e98 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f043 030b 	orr.w	r3, r3, #11
 8008d34:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	211d      	movs	r1, #29
 8008d3c:	4806      	ldr	r0, [pc, #24]	; (8008d58 <low_level_init+0x144>)
 8008d3e:	f7fa f913 	bl	8002f68 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008d42:	f107 0310 	add.w	r3, r7, #16
 8008d46:	461a      	mov	r2, r3
 8008d48:	211d      	movs	r1, #29
 8008d4a:	4803      	ldr	r0, [pc, #12]	; (8008d58 <low_level_init+0x144>)
 8008d4c:	f7fa f8a4 	bl	8002e98 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008d50:	bf00      	nop
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	200036d8 	.word	0x200036d8
 8008d5c:	40028000 	.word	0x40028000
 8008d60:	20001f08 	.word	0x20001f08
 8008d64:	200006b8 	.word	0x200006b8
 8008d68:	20000738 	.word	0x20000738
 8008d6c:	20000638 	.word	0x20000638

08008d70 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08a      	sub	sp, #40	; 0x28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008d7a:	4b4b      	ldr	r3, [pc, #300]	; (8008ea8 <low_level_output+0x138>)
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008d92:	4b45      	ldr	r3, [pc, #276]	; (8008ea8 <low_level_output+0x138>)
 8008d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d96:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	623b      	str	r3, [r7, #32]
 8008da0:	e05a      	b.n	8008e58 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	da03      	bge.n	8008db2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008daa:	23f8      	movs	r3, #248	; 0xf8
 8008dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008db0:	e05c      	b.n	8008e6c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	895b      	ldrh	r3, [r3, #10]
 8008db6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008dbc:	e02f      	b.n	8008e1e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	18d0      	adds	r0, r2, r3
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	18d1      	adds	r1, r2, r3
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	f00a faef 	bl	80133b8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	da03      	bge.n	8008df0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008de8:	23f8      	movs	r3, #248	; 0xf8
 8008dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008dee:	e03d      	b.n	8008e6c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008e00:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008e0c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008e18:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	4413      	add	r3, r2
 8008e24:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d8c8      	bhi.n	8008dbe <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008e2c:	69fa      	ldr	r2, [r7, #28]
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	18d0      	adds	r0, r2, r3
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	4413      	add	r3, r2
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	f00a fabb 	bl	80133b8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4413      	add	r3, r2
 8008e48:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4413      	add	r3, r2
 8008e50:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	623b      	str	r3, [r7, #32]
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1a1      	bne.n	8008da2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008e5e:	6979      	ldr	r1, [r7, #20]
 8008e60:	4811      	ldr	r0, [pc, #68]	; (8008ea8 <low_level_output+0x138>)
 8008e62:	f7f9 fe29 	bl	8002ab8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008e6c:	4b0e      	ldr	r3, [pc, #56]	; (8008ea8 <low_level_output+0x138>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	f003 0320 	and.w	r3, r3, #32
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00d      	beq.n	8008e9a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008e7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ea8 <low_level_output+0x138>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e86:	461a      	mov	r2, r3
 8008e88:	2320      	movs	r3, #32
 8008e8a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008e8c:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <low_level_output+0x138>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e94:	461a      	mov	r2, r3
 8008e96:	2300      	movs	r3, #0
 8008e98:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8008e9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3728      	adds	r7, #40	; 0x28
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	200036d8 	.word	0x200036d8

08008eac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08c      	sub	sp, #48	; 0x30
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8008ed0:	484e      	ldr	r0, [pc, #312]	; (800900c <low_level_input+0x160>)
 8008ed2:	f7f9 fedb 	bl	8002c8c <HAL_ETH_GetReceivedFrame>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <low_level_input+0x34>

    return NULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	e091      	b.n	8009004 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008ee0:	4b4a      	ldr	r3, [pc, #296]	; (800900c <low_level_input+0x160>)
 8008ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008ee6:	4b49      	ldr	r3, [pc, #292]	; (800900c <low_level_input+0x160>)
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008eec:	89fb      	ldrh	r3, [r7, #14]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d007      	beq.n	8008f02 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008ef2:	89fb      	ldrh	r3, [r7, #14]
 8008ef4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008ef8:	4619      	mov	r1, r3
 8008efa:	2000      	movs	r0, #0
 8008efc:	f001 f934 	bl	800a168 <pbuf_alloc>
 8008f00:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d04b      	beq.n	8008fa0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008f08:	4b40      	ldr	r3, [pc, #256]	; (800900c <low_level_input+0x160>)
 8008f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f16:	e040      	b.n	8008f9a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	895b      	ldrh	r3, [r3, #10]
 8008f1c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008f22:	e021      	b.n	8008f68 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	18d0      	adds	r0, r2, r3
 8008f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	18d1      	adds	r1, r2, r3
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008f38:	3304      	adds	r3, #4
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f00a fa3c 	bl	80133b8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008f4c:	69fa      	ldr	r2, [r7, #28]
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	4413      	add	r3, r2
 8008f52:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008f56:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008f62:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d8d6      	bhi.n	8008f24 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	18d0      	adds	r0, r2, r3
 8008f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	4413      	add	r3, r2
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	4619      	mov	r1, r3
 8008f88:	f00a fa16 	bl	80133b8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008f8c:	69fa      	ldr	r2, [r7, #28]
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	4413      	add	r3, r2
 8008f92:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1bb      	bne.n	8008f18 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008fa0:	4b1a      	ldr	r3, [pc, #104]	; (800900c <low_level_input+0x160>)
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	613b      	str	r3, [r7, #16]
 8008faa:	e00b      	b.n	8008fc4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	4b11      	ldr	r3, [pc, #68]	; (800900c <low_level_input+0x160>)
 8008fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d3ee      	bcc.n	8008fac <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008fce:	4b0f      	ldr	r3, [pc, #60]	; (800900c <low_level_input+0x160>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008fd4:	4b0d      	ldr	r3, [pc, #52]	; (800900c <low_level_input+0x160>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00d      	beq.n	8009002 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008fe6:	4b09      	ldr	r3, [pc, #36]	; (800900c <low_level_input+0x160>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fee:	461a      	mov	r2, r3
 8008ff0:	2380      	movs	r3, #128	; 0x80
 8008ff2:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008ff4:	4b05      	ldr	r3, [pc, #20]	; (800900c <low_level_input+0x160>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	2300      	movs	r3, #0
 8009000:	6093      	str	r3, [r2, #8]
  }
  return p;
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009004:	4618      	mov	r0, r3
 8009006:	3730      	adds	r7, #48	; 0x30
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	200036d8 	.word	0x200036d8

08009010 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff ff47 	bl	8008eac <low_level_input>
 800901e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d010      	beq.n	8009048 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	4798      	blx	r3
 8009030:	4603      	mov	r3, r0
 8009032:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8009034:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d006      	beq.n	800904a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f001 fb77 	bl	800a730 <pbuf_free>
    p = NULL;
 8009042:	2300      	movs	r3, #0
 8009044:	60fb      	str	r3, [r7, #12]
 8009046:	e000      	b.n	800904a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8009048:	bf00      	nop
  }
}
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d106      	bne.n	800906c <ethernetif_init+0x1c>
 800905e:	4b0e      	ldr	r3, [pc, #56]	; (8009098 <ethernetif_init+0x48>)
 8009060:	f240 2219 	movw	r2, #537	; 0x219
 8009064:	490d      	ldr	r1, [pc, #52]	; (800909c <ethernetif_init+0x4c>)
 8009066:	480e      	ldr	r0, [pc, #56]	; (80090a0 <ethernetif_init+0x50>)
 8009068:	f00a f9d6 	bl	8013418 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2273      	movs	r2, #115	; 0x73
 8009070:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2274      	movs	r2, #116	; 0x74
 8009078:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a09      	ldr	r2, [pc, #36]	; (80090a4 <ethernetif_init+0x54>)
 8009080:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a08      	ldr	r2, [pc, #32]	; (80090a8 <ethernetif_init+0x58>)
 8009086:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7ff fdc3 	bl	8008c14 <low_level_init>

  return ERR_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	08014888 	.word	0x08014888
 800909c:	080148a4 	.word	0x080148a4
 80090a0:	080148b4 	.word	0x080148b4
 80090a4:	0801165d 	.word	0x0801165d
 80090a8:	08008d71 	.word	0x08008d71

080090ac <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80090b0:	f7f8 fd36 	bl	8001b20 <HAL_GetTick>
 80090b4:	4603      	mov	r3, r0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80090c4:	2300      	movs	r3, #0
 80090c6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80090d2:	089b      	lsrs	r3, r3, #2
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d05d      	beq.n	800919a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80090de:	4b34      	ldr	r3, [pc, #208]	; (80091b0 <ethernetif_update_config+0xf4>)
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d03f      	beq.n	8009166 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80090e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80090ea:	2100      	movs	r1, #0
 80090ec:	4830      	ldr	r0, [pc, #192]	; (80091b0 <ethernetif_update_config+0xf4>)
 80090ee:	f7f9 ff3b 	bl	8002f68 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80090f2:	f7f8 fd15 	bl	8001b20 <HAL_GetTick>
 80090f6:	4603      	mov	r3, r0
 80090f8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80090fa:	f107 0308 	add.w	r3, r7, #8
 80090fe:	461a      	mov	r2, r3
 8009100:	2101      	movs	r1, #1
 8009102:	482b      	ldr	r0, [pc, #172]	; (80091b0 <ethernetif_update_config+0xf4>)
 8009104:	f7f9 fec8 	bl	8002e98 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8009108:	f7f8 fd0a 	bl	8001b20 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009116:	d828      	bhi.n	800916a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f003 0320 	and.w	r3, r3, #32
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0eb      	beq.n	80090fa <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8009122:	f107 0308 	add.w	r3, r7, #8
 8009126:	461a      	mov	r2, r3
 8009128:	2110      	movs	r1, #16
 800912a:	4821      	ldr	r0, [pc, #132]	; (80091b0 <ethernetif_update_config+0xf4>)
 800912c:	f7f9 feb4 	bl	8002e98 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	f003 0304 	and.w	r3, r3, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	d004      	beq.n	8009144 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800913a:	4b1d      	ldr	r3, [pc, #116]	; (80091b0 <ethernetif_update_config+0xf4>)
 800913c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009140:	60da      	str	r2, [r3, #12]
 8009142:	e002      	b.n	800914a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8009144:	4b1a      	ldr	r3, [pc, #104]	; (80091b0 <ethernetif_update_config+0xf4>)
 8009146:	2200      	movs	r2, #0
 8009148:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	f003 0302 	and.w	r3, r3, #2
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8009154:	4b16      	ldr	r3, [pc, #88]	; (80091b0 <ethernetif_update_config+0xf4>)
 8009156:	2200      	movs	r2, #0
 8009158:	609a      	str	r2, [r3, #8]
 800915a:	e016      	b.n	800918a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800915c:	4b14      	ldr	r3, [pc, #80]	; (80091b0 <ethernetif_update_config+0xf4>)
 800915e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009162:	609a      	str	r2, [r3, #8]
 8009164:	e011      	b.n	800918a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8009166:	bf00      	nop
 8009168:	e000      	b.n	800916c <ethernetif_update_config+0xb0>
          goto error;
 800916a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800916c:	4b10      	ldr	r3, [pc, #64]	; (80091b0 <ethernetif_update_config+0xf4>)
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	08db      	lsrs	r3, r3, #3
 8009172:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8009174:	4b0e      	ldr	r3, [pc, #56]	; (80091b0 <ethernetif_update_config+0xf4>)
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	085b      	lsrs	r3, r3, #1
 800917a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800917c:	4313      	orrs	r3, r2
 800917e:	b29b      	uxth	r3, r3
 8009180:	461a      	mov	r2, r3
 8009182:	2100      	movs	r1, #0
 8009184:	480a      	ldr	r0, [pc, #40]	; (80091b0 <ethernetif_update_config+0xf4>)
 8009186:	f7f9 feef 	bl	8002f68 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800918a:	2100      	movs	r1, #0
 800918c:	4808      	ldr	r0, [pc, #32]	; (80091b0 <ethernetif_update_config+0xf4>)
 800918e:	f7f9 ffaf 	bl	80030f0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8009192:	4807      	ldr	r0, [pc, #28]	; (80091b0 <ethernetif_update_config+0xf4>)
 8009194:	f7f9 ff4e 	bl	8003034 <HAL_ETH_Start>
 8009198:	e002      	b.n	80091a0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800919a:	4805      	ldr	r0, [pc, #20]	; (80091b0 <ethernetif_update_config+0xf4>)
 800919c:	f7f9 ff79 	bl	8003092 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f807 	bl	80091b4 <ethernetif_notify_conn_changed>
}
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	200036d8 	.word	0x200036d8

080091b4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80091d2:	88fb      	ldrh	r3, [r7, #6]
 80091d4:	021b      	lsls	r3, r3, #8
 80091d6:	b21a      	sxth	r2, r3
 80091d8:	88fb      	ldrh	r3, [r7, #6]
 80091da:	0a1b      	lsrs	r3, r3, #8
 80091dc:	b29b      	uxth	r3, r3
 80091de:	b21b      	sxth	r3, r3
 80091e0:	4313      	orrs	r3, r2
 80091e2:	b21b      	sxth	r3, r3
 80091e4:	b29b      	uxth	r3, r3
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b083      	sub	sp, #12
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	061a      	lsls	r2, r3, #24
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009206:	431a      	orrs	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	0a1b      	lsrs	r3, r3, #8
 800920c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009210:	431a      	orrs	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	0e1b      	lsrs	r3, r3, #24
 8009216:	4313      	orrs	r3, r2
}
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800922a:	2300      	movs	r3, #0
 800922c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800922e:	f000 f8d5 	bl	80093dc <mem_init>
  memp_init();
 8009232:	f000 fbdb 	bl	80099ec <memp_init>
  pbuf_init();
  netif_init();
 8009236:	f000 fc93 	bl	8009b60 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800923a:	f007 f84f 	bl	80102dc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800923e:	f001 fda7 	bl	800ad90 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009242:	f006 ffc1 	bl	80101c8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	4603      	mov	r3, r0
 8009258:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800925a:	4b05      	ldr	r3, [pc, #20]	; (8009270 <ptr_to_mem+0x20>)
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	88fb      	ldrh	r3, [r7, #6]
 8009260:	4413      	add	r3, r2
}
 8009262:	4618      	mov	r0, r3
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	20005f4c 	.word	0x20005f4c

08009274 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800927c:	4b05      	ldr	r3, [pc, #20]	; (8009294 <mem_to_ptr+0x20>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	b29b      	uxth	r3, r3
}
 8009286:	4618      	mov	r0, r3
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	20005f4c 	.word	0x20005f4c

08009298 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009298:	b590      	push	{r4, r7, lr}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80092a0:	4b45      	ldr	r3, [pc, #276]	; (80093b8 <plug_holes+0x120>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d206      	bcs.n	80092b8 <plug_holes+0x20>
 80092aa:	4b44      	ldr	r3, [pc, #272]	; (80093bc <plug_holes+0x124>)
 80092ac:	f240 12df 	movw	r2, #479	; 0x1df
 80092b0:	4943      	ldr	r1, [pc, #268]	; (80093c0 <plug_holes+0x128>)
 80092b2:	4844      	ldr	r0, [pc, #272]	; (80093c4 <plug_holes+0x12c>)
 80092b4:	f00a f8b0 	bl	8013418 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80092b8:	4b43      	ldr	r3, [pc, #268]	; (80093c8 <plug_holes+0x130>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d306      	bcc.n	80092d0 <plug_holes+0x38>
 80092c2:	4b3e      	ldr	r3, [pc, #248]	; (80093bc <plug_holes+0x124>)
 80092c4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80092c8:	4940      	ldr	r1, [pc, #256]	; (80093cc <plug_holes+0x134>)
 80092ca:	483e      	ldr	r0, [pc, #248]	; (80093c4 <plug_holes+0x12c>)
 80092cc:	f00a f8a4 	bl	8013418 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	791b      	ldrb	r3, [r3, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d006      	beq.n	80092e6 <plug_holes+0x4e>
 80092d8:	4b38      	ldr	r3, [pc, #224]	; (80093bc <plug_holes+0x124>)
 80092da:	f240 12e1 	movw	r2, #481	; 0x1e1
 80092de:	493c      	ldr	r1, [pc, #240]	; (80093d0 <plug_holes+0x138>)
 80092e0:	4838      	ldr	r0, [pc, #224]	; (80093c4 <plug_holes+0x12c>)
 80092e2:	f00a f899 	bl	8013418 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80092ee:	d906      	bls.n	80092fe <plug_holes+0x66>
 80092f0:	4b32      	ldr	r3, [pc, #200]	; (80093bc <plug_holes+0x124>)
 80092f2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80092f6:	4937      	ldr	r1, [pc, #220]	; (80093d4 <plug_holes+0x13c>)
 80092f8:	4832      	ldr	r0, [pc, #200]	; (80093c4 <plug_holes+0x12c>)
 80092fa:	f00a f88d 	bl	8013418 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	881b      	ldrh	r3, [r3, #0]
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff ffa4 	bl	8009250 <ptr_to_mem>
 8009308:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	429a      	cmp	r2, r3
 8009310:	d024      	beq.n	800935c <plug_holes+0xc4>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	791b      	ldrb	r3, [r3, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d120      	bne.n	800935c <plug_holes+0xc4>
 800931a:	4b2b      	ldr	r3, [pc, #172]	; (80093c8 <plug_holes+0x130>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	429a      	cmp	r2, r3
 8009322:	d01b      	beq.n	800935c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009324:	4b2c      	ldr	r3, [pc, #176]	; (80093d8 <plug_holes+0x140>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	429a      	cmp	r2, r3
 800932c:	d102      	bne.n	8009334 <plug_holes+0x9c>
      lfree = mem;
 800932e:	4a2a      	ldr	r2, [pc, #168]	; (80093d8 <plug_holes+0x140>)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	881a      	ldrh	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	881b      	ldrh	r3, [r3, #0]
 8009340:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009344:	d00a      	beq.n	800935c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff ff80 	bl	8009250 <ptr_to_mem>
 8009350:	4604      	mov	r4, r0
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff ff8e 	bl	8009274 <mem_to_ptr>
 8009358:	4603      	mov	r3, r0
 800935a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	885b      	ldrh	r3, [r3, #2]
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff ff75 	bl	8009250 <ptr_to_mem>
 8009366:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	429a      	cmp	r2, r3
 800936e:	d01f      	beq.n	80093b0 <plug_holes+0x118>
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	791b      	ldrb	r3, [r3, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d11b      	bne.n	80093b0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009378:	4b17      	ldr	r3, [pc, #92]	; (80093d8 <plug_holes+0x140>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	429a      	cmp	r2, r3
 8009380:	d102      	bne.n	8009388 <plug_holes+0xf0>
      lfree = pmem;
 8009382:	4a15      	ldr	r2, [pc, #84]	; (80093d8 <plug_holes+0x140>)
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	881a      	ldrh	r2, [r3, #0]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009398:	d00a      	beq.n	80093b0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff ff56 	bl	8009250 <ptr_to_mem>
 80093a4:	4604      	mov	r4, r0
 80093a6:	68b8      	ldr	r0, [r7, #8]
 80093a8:	f7ff ff64 	bl	8009274 <mem_to_ptr>
 80093ac:	4603      	mov	r3, r0
 80093ae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80093b0:	bf00      	nop
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd90      	pop	{r4, r7, pc}
 80093b8:	20005f4c 	.word	0x20005f4c
 80093bc:	080148dc 	.word	0x080148dc
 80093c0:	0801490c 	.word	0x0801490c
 80093c4:	08014924 	.word	0x08014924
 80093c8:	20005f50 	.word	0x20005f50
 80093cc:	0801494c 	.word	0x0801494c
 80093d0:	08014968 	.word	0x08014968
 80093d4:	08014984 	.word	0x08014984
 80093d8:	20005f54 	.word	0x20005f54

080093dc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80093e2:	4b18      	ldr	r3, [pc, #96]	; (8009444 <mem_init+0x68>)
 80093e4:	3303      	adds	r3, #3
 80093e6:	f023 0303 	bic.w	r3, r3, #3
 80093ea:	461a      	mov	r2, r3
 80093ec:	4b16      	ldr	r3, [pc, #88]	; (8009448 <mem_init+0x6c>)
 80093ee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80093f0:	4b15      	ldr	r3, [pc, #84]	; (8009448 <mem_init+0x6c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80093fc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800940a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800940e:	f7ff ff1f 	bl	8009250 <ptr_to_mem>
 8009412:	4603      	mov	r3, r0
 8009414:	4a0d      	ldr	r2, [pc, #52]	; (800944c <mem_init+0x70>)
 8009416:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009418:	4b0c      	ldr	r3, [pc, #48]	; (800944c <mem_init+0x70>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2201      	movs	r2, #1
 800941e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009420:	4b0a      	ldr	r3, [pc, #40]	; (800944c <mem_init+0x70>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009428:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800942a:	4b08      	ldr	r3, [pc, #32]	; (800944c <mem_init+0x70>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009432:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009434:	4b04      	ldr	r3, [pc, #16]	; (8009448 <mem_init+0x6c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a05      	ldr	r2, [pc, #20]	; (8009450 <mem_init+0x74>)
 800943a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800943c:	bf00      	nop
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	20003738 	.word	0x20003738
 8009448:	20005f4c 	.word	0x20005f4c
 800944c:	20005f50 	.word	0x20005f50
 8009450:	20005f54 	.word	0x20005f54

08009454 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b086      	sub	sp, #24
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff ff09 	bl	8009274 <mem_to_ptr>
 8009462:	4603      	mov	r3, r0
 8009464:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	4618      	mov	r0, r3
 800946c:	f7ff fef0 	bl	8009250 <ptr_to_mem>
 8009470:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	885b      	ldrh	r3, [r3, #2]
 8009476:	4618      	mov	r0, r3
 8009478:	f7ff feea 	bl	8009250 <ptr_to_mem>
 800947c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009486:	d818      	bhi.n	80094ba <mem_link_valid+0x66>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	885b      	ldrh	r3, [r3, #2]
 800948c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009490:	d813      	bhi.n	80094ba <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009496:	8afa      	ldrh	r2, [r7, #22]
 8009498:	429a      	cmp	r2, r3
 800949a:	d004      	beq.n	80094a6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	8afa      	ldrh	r2, [r7, #22]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d109      	bne.n	80094ba <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80094a6:	4b08      	ldr	r3, [pc, #32]	; (80094c8 <mem_link_valid+0x74>)
 80094a8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d006      	beq.n	80094be <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	885b      	ldrh	r3, [r3, #2]
 80094b4:	8afa      	ldrh	r2, [r7, #22]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d001      	beq.n	80094be <mem_link_valid+0x6a>
    return 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	e000      	b.n	80094c0 <mem_link_valid+0x6c>
  }
  return 1;
 80094be:	2301      	movs	r3, #1
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20005f50 	.word	0x20005f50

080094cc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d04c      	beq.n	8009574 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f003 0303 	and.w	r3, r3, #3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d007      	beq.n	80094f4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80094e4:	4b25      	ldr	r3, [pc, #148]	; (800957c <mem_free+0xb0>)
 80094e6:	f240 2273 	movw	r2, #627	; 0x273
 80094ea:	4925      	ldr	r1, [pc, #148]	; (8009580 <mem_free+0xb4>)
 80094ec:	4825      	ldr	r0, [pc, #148]	; (8009584 <mem_free+0xb8>)
 80094ee:	f009 ff93 	bl	8013418 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80094f2:	e040      	b.n	8009576 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	3b08      	subs	r3, #8
 80094f8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80094fa:	4b23      	ldr	r3, [pc, #140]	; (8009588 <mem_free+0xbc>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	429a      	cmp	r2, r3
 8009502:	d306      	bcc.n	8009512 <mem_free+0x46>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f103 020c 	add.w	r2, r3, #12
 800950a:	4b20      	ldr	r3, [pc, #128]	; (800958c <mem_free+0xc0>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	429a      	cmp	r2, r3
 8009510:	d907      	bls.n	8009522 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009512:	4b1a      	ldr	r3, [pc, #104]	; (800957c <mem_free+0xb0>)
 8009514:	f240 227f 	movw	r2, #639	; 0x27f
 8009518:	491d      	ldr	r1, [pc, #116]	; (8009590 <mem_free+0xc4>)
 800951a:	481a      	ldr	r0, [pc, #104]	; (8009584 <mem_free+0xb8>)
 800951c:	f009 ff7c 	bl	8013418 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009520:	e029      	b.n	8009576 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	791b      	ldrb	r3, [r3, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d107      	bne.n	800953a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800952a:	4b14      	ldr	r3, [pc, #80]	; (800957c <mem_free+0xb0>)
 800952c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009530:	4918      	ldr	r1, [pc, #96]	; (8009594 <mem_free+0xc8>)
 8009532:	4814      	ldr	r0, [pc, #80]	; (8009584 <mem_free+0xb8>)
 8009534:	f009 ff70 	bl	8013418 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009538:	e01d      	b.n	8009576 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f7ff ff8a 	bl	8009454 <mem_link_valid>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d107      	bne.n	8009556 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009546:	4b0d      	ldr	r3, [pc, #52]	; (800957c <mem_free+0xb0>)
 8009548:	f240 2295 	movw	r2, #661	; 0x295
 800954c:	4912      	ldr	r1, [pc, #72]	; (8009598 <mem_free+0xcc>)
 800954e:	480d      	ldr	r0, [pc, #52]	; (8009584 <mem_free+0xb8>)
 8009550:	f009 ff62 	bl	8013418 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009554:	e00f      	b.n	8009576 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800955c:	4b0f      	ldr	r3, [pc, #60]	; (800959c <mem_free+0xd0>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	429a      	cmp	r2, r3
 8009564:	d202      	bcs.n	800956c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009566:	4a0d      	ldr	r2, [pc, #52]	; (800959c <mem_free+0xd0>)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f7ff fe93 	bl	8009298 <plug_holes>
 8009572:	e000      	b.n	8009576 <mem_free+0xaa>
    return;
 8009574:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	080148dc 	.word	0x080148dc
 8009580:	080149b0 	.word	0x080149b0
 8009584:	08014924 	.word	0x08014924
 8009588:	20005f4c 	.word	0x20005f4c
 800958c:	20005f50 	.word	0x20005f50
 8009590:	080149d4 	.word	0x080149d4
 8009594:	080149f0 	.word	0x080149f0
 8009598:	08014a18 	.word	0x08014a18
 800959c:	20005f54 	.word	0x20005f54

080095a0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80095ac:	887b      	ldrh	r3, [r7, #2]
 80095ae:	3303      	adds	r3, #3
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	f023 0303 	bic.w	r3, r3, #3
 80095b6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80095b8:	8bfb      	ldrh	r3, [r7, #30]
 80095ba:	2b0b      	cmp	r3, #11
 80095bc:	d801      	bhi.n	80095c2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80095be:	230c      	movs	r3, #12
 80095c0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80095c2:	8bfb      	ldrh	r3, [r7, #30]
 80095c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80095c8:	d803      	bhi.n	80095d2 <mem_trim+0x32>
 80095ca:	8bfa      	ldrh	r2, [r7, #30]
 80095cc:	887b      	ldrh	r3, [r7, #2]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d201      	bcs.n	80095d6 <mem_trim+0x36>
    return NULL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	e0cc      	b.n	8009770 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80095d6:	4b68      	ldr	r3, [pc, #416]	; (8009778 <mem_trim+0x1d8>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d304      	bcc.n	80095ea <mem_trim+0x4a>
 80095e0:	4b66      	ldr	r3, [pc, #408]	; (800977c <mem_trim+0x1dc>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d306      	bcc.n	80095f8 <mem_trim+0x58>
 80095ea:	4b65      	ldr	r3, [pc, #404]	; (8009780 <mem_trim+0x1e0>)
 80095ec:	f240 22d1 	movw	r2, #721	; 0x2d1
 80095f0:	4964      	ldr	r1, [pc, #400]	; (8009784 <mem_trim+0x1e4>)
 80095f2:	4865      	ldr	r0, [pc, #404]	; (8009788 <mem_trim+0x1e8>)
 80095f4:	f009 ff10 	bl	8013418 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80095f8:	4b5f      	ldr	r3, [pc, #380]	; (8009778 <mem_trim+0x1d8>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d304      	bcc.n	800960c <mem_trim+0x6c>
 8009602:	4b5e      	ldr	r3, [pc, #376]	; (800977c <mem_trim+0x1dc>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	429a      	cmp	r2, r3
 800960a:	d301      	bcc.n	8009610 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	e0af      	b.n	8009770 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3b08      	subs	r3, #8
 8009614:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009616:	69b8      	ldr	r0, [r7, #24]
 8009618:	f7ff fe2c 	bl	8009274 <mem_to_ptr>
 800961c:	4603      	mov	r3, r0
 800961e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	881a      	ldrh	r2, [r3, #0]
 8009624:	8afb      	ldrh	r3, [r7, #22]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	b29b      	uxth	r3, r3
 800962a:	3b08      	subs	r3, #8
 800962c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800962e:	8bfa      	ldrh	r2, [r7, #30]
 8009630:	8abb      	ldrh	r3, [r7, #20]
 8009632:	429a      	cmp	r2, r3
 8009634:	d906      	bls.n	8009644 <mem_trim+0xa4>
 8009636:	4b52      	ldr	r3, [pc, #328]	; (8009780 <mem_trim+0x1e0>)
 8009638:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800963c:	4953      	ldr	r1, [pc, #332]	; (800978c <mem_trim+0x1ec>)
 800963e:	4852      	ldr	r0, [pc, #328]	; (8009788 <mem_trim+0x1e8>)
 8009640:	f009 feea 	bl	8013418 <iprintf>
  if (newsize > size) {
 8009644:	8bfa      	ldrh	r2, [r7, #30]
 8009646:	8abb      	ldrh	r3, [r7, #20]
 8009648:	429a      	cmp	r2, r3
 800964a:	d901      	bls.n	8009650 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800964c:	2300      	movs	r3, #0
 800964e:	e08f      	b.n	8009770 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009650:	8bfa      	ldrh	r2, [r7, #30]
 8009652:	8abb      	ldrh	r3, [r7, #20]
 8009654:	429a      	cmp	r2, r3
 8009656:	d101      	bne.n	800965c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	e089      	b.n	8009770 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff fdf5 	bl	8009250 <ptr_to_mem>
 8009666:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	791b      	ldrb	r3, [r3, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d13f      	bne.n	80096f0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009678:	d106      	bne.n	8009688 <mem_trim+0xe8>
 800967a:	4b41      	ldr	r3, [pc, #260]	; (8009780 <mem_trim+0x1e0>)
 800967c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009680:	4943      	ldr	r1, [pc, #268]	; (8009790 <mem_trim+0x1f0>)
 8009682:	4841      	ldr	r0, [pc, #260]	; (8009788 <mem_trim+0x1e8>)
 8009684:	f009 fec8 	bl	8013418 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800968e:	8afa      	ldrh	r2, [r7, #22]
 8009690:	8bfb      	ldrh	r3, [r7, #30]
 8009692:	4413      	add	r3, r2
 8009694:	b29b      	uxth	r3, r3
 8009696:	3308      	adds	r3, #8
 8009698:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800969a:	4b3e      	ldr	r3, [pc, #248]	; (8009794 <mem_trim+0x1f4>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d106      	bne.n	80096b2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80096a4:	89fb      	ldrh	r3, [r7, #14]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff fdd2 	bl	8009250 <ptr_to_mem>
 80096ac:	4603      	mov	r3, r0
 80096ae:	4a39      	ldr	r2, [pc, #228]	; (8009794 <mem_trim+0x1f4>)
 80096b0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80096b2:	89fb      	ldrh	r3, [r7, #14]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff fdcb 	bl	8009250 <ptr_to_mem>
 80096ba:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	2200      	movs	r2, #0
 80096c0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	89ba      	ldrh	r2, [r7, #12]
 80096c6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	8afa      	ldrh	r2, [r7, #22]
 80096cc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	89fa      	ldrh	r2, [r7, #14]
 80096d2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80096dc:	d047      	beq.n	800976e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff fdb4 	bl	8009250 <ptr_to_mem>
 80096e8:	4602      	mov	r2, r0
 80096ea:	89fb      	ldrh	r3, [r7, #14]
 80096ec:	8053      	strh	r3, [r2, #2]
 80096ee:	e03e      	b.n	800976e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80096f0:	8bfb      	ldrh	r3, [r7, #30]
 80096f2:	f103 0214 	add.w	r2, r3, #20
 80096f6:	8abb      	ldrh	r3, [r7, #20]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d838      	bhi.n	800976e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80096fc:	8afa      	ldrh	r2, [r7, #22]
 80096fe:	8bfb      	ldrh	r3, [r7, #30]
 8009700:	4413      	add	r3, r2
 8009702:	b29b      	uxth	r3, r3
 8009704:	3308      	adds	r3, #8
 8009706:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	881b      	ldrh	r3, [r3, #0]
 800970c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009710:	d106      	bne.n	8009720 <mem_trim+0x180>
 8009712:	4b1b      	ldr	r3, [pc, #108]	; (8009780 <mem_trim+0x1e0>)
 8009714:	f240 3216 	movw	r2, #790	; 0x316
 8009718:	491d      	ldr	r1, [pc, #116]	; (8009790 <mem_trim+0x1f0>)
 800971a:	481b      	ldr	r0, [pc, #108]	; (8009788 <mem_trim+0x1e8>)
 800971c:	f009 fe7c 	bl	8013418 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009720:	89fb      	ldrh	r3, [r7, #14]
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff fd94 	bl	8009250 <ptr_to_mem>
 8009728:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800972a:	4b1a      	ldr	r3, [pc, #104]	; (8009794 <mem_trim+0x1f4>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	429a      	cmp	r2, r3
 8009732:	d202      	bcs.n	800973a <mem_trim+0x19a>
      lfree = mem2;
 8009734:	4a17      	ldr	r2, [pc, #92]	; (8009794 <mem_trim+0x1f4>)
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	2200      	movs	r2, #0
 800973e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	881a      	ldrh	r2, [r3, #0]
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	8afa      	ldrh	r2, [r7, #22]
 800974c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	89fa      	ldrh	r2, [r7, #14]
 8009752:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	881b      	ldrh	r3, [r3, #0]
 8009758:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800975c:	d007      	beq.n	800976e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff fd74 	bl	8009250 <ptr_to_mem>
 8009768:	4602      	mov	r2, r0
 800976a:	89fb      	ldrh	r3, [r7, #14]
 800976c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800976e:	687b      	ldr	r3, [r7, #4]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3720      	adds	r7, #32
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20005f4c 	.word	0x20005f4c
 800977c:	20005f50 	.word	0x20005f50
 8009780:	080148dc 	.word	0x080148dc
 8009784:	08014a4c 	.word	0x08014a4c
 8009788:	08014924 	.word	0x08014924
 800978c:	08014a64 	.word	0x08014a64
 8009790:	08014a84 	.word	0x08014a84
 8009794:	20005f54 	.word	0x20005f54

08009798 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80097a2:	88fb      	ldrh	r3, [r7, #6]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <mem_malloc+0x14>
    return NULL;
 80097a8:	2300      	movs	r3, #0
 80097aa:	e0d9      	b.n	8009960 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80097ac:	88fb      	ldrh	r3, [r7, #6]
 80097ae:	3303      	adds	r3, #3
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	f023 0303 	bic.w	r3, r3, #3
 80097b6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80097b8:	8bbb      	ldrh	r3, [r7, #28]
 80097ba:	2b0b      	cmp	r3, #11
 80097bc:	d801      	bhi.n	80097c2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80097be:	230c      	movs	r3, #12
 80097c0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80097c2:	8bbb      	ldrh	r3, [r7, #28]
 80097c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80097c8:	d803      	bhi.n	80097d2 <mem_malloc+0x3a>
 80097ca:	8bba      	ldrh	r2, [r7, #28]
 80097cc:	88fb      	ldrh	r3, [r7, #6]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d201      	bcs.n	80097d6 <mem_malloc+0x3e>
    return NULL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	e0c4      	b.n	8009960 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80097d6:	4b64      	ldr	r3, [pc, #400]	; (8009968 <mem_malloc+0x1d0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff fd4a 	bl	8009274 <mem_to_ptr>
 80097e0:	4603      	mov	r3, r0
 80097e2:	83fb      	strh	r3, [r7, #30]
 80097e4:	e0b4      	b.n	8009950 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80097e6:	8bfb      	ldrh	r3, [r7, #30]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7ff fd31 	bl	8009250 <ptr_to_mem>
 80097ee:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	791b      	ldrb	r3, [r3, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f040 80a4 	bne.w	8009942 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	8bfb      	ldrh	r3, [r7, #30]
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	f1a3 0208 	sub.w	r2, r3, #8
 8009808:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800980a:	429a      	cmp	r2, r3
 800980c:	f0c0 8099 	bcc.w	8009942 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	8bfb      	ldrh	r3, [r7, #30]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	f1a3 0208 	sub.w	r2, r3, #8
 800981e:	8bbb      	ldrh	r3, [r7, #28]
 8009820:	3314      	adds	r3, #20
 8009822:	429a      	cmp	r2, r3
 8009824:	d333      	bcc.n	800988e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009826:	8bfa      	ldrh	r2, [r7, #30]
 8009828:	8bbb      	ldrh	r3, [r7, #28]
 800982a:	4413      	add	r3, r2
 800982c:	b29b      	uxth	r3, r3
 800982e:	3308      	adds	r3, #8
 8009830:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009832:	8a7b      	ldrh	r3, [r7, #18]
 8009834:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009838:	d106      	bne.n	8009848 <mem_malloc+0xb0>
 800983a:	4b4c      	ldr	r3, [pc, #304]	; (800996c <mem_malloc+0x1d4>)
 800983c:	f240 3287 	movw	r2, #903	; 0x387
 8009840:	494b      	ldr	r1, [pc, #300]	; (8009970 <mem_malloc+0x1d8>)
 8009842:	484c      	ldr	r0, [pc, #304]	; (8009974 <mem_malloc+0x1dc>)
 8009844:	f009 fde8 	bl	8013418 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009848:	8a7b      	ldrh	r3, [r7, #18]
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff fd00 	bl	8009250 <ptr_to_mem>
 8009850:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	881a      	ldrh	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	8bfa      	ldrh	r2, [r7, #30]
 8009864:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	8a7a      	ldrh	r2, [r7, #18]
 800986a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	2201      	movs	r2, #1
 8009870:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800987a:	d00b      	beq.n	8009894 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	4618      	mov	r0, r3
 8009882:	f7ff fce5 	bl	8009250 <ptr_to_mem>
 8009886:	4602      	mov	r2, r0
 8009888:	8a7b      	ldrh	r3, [r7, #18]
 800988a:	8053      	strh	r3, [r2, #2]
 800988c:	e002      	b.n	8009894 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2201      	movs	r2, #1
 8009892:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009894:	4b34      	ldr	r3, [pc, #208]	; (8009968 <mem_malloc+0x1d0>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	429a      	cmp	r2, r3
 800989c:	d127      	bne.n	80098ee <mem_malloc+0x156>
          struct mem *cur = lfree;
 800989e:	4b32      	ldr	r3, [pc, #200]	; (8009968 <mem_malloc+0x1d0>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80098a4:	e005      	b.n	80098b2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7ff fcd0 	bl	8009250 <ptr_to_mem>
 80098b0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	791b      	ldrb	r3, [r3, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d004      	beq.n	80098c4 <mem_malloc+0x12c>
 80098ba:	4b2f      	ldr	r3, [pc, #188]	; (8009978 <mem_malloc+0x1e0>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d1f0      	bne.n	80098a6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80098c4:	4a28      	ldr	r2, [pc, #160]	; (8009968 <mem_malloc+0x1d0>)
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80098ca:	4b27      	ldr	r3, [pc, #156]	; (8009968 <mem_malloc+0x1d0>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	4b2a      	ldr	r3, [pc, #168]	; (8009978 <mem_malloc+0x1e0>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d00b      	beq.n	80098ee <mem_malloc+0x156>
 80098d6:	4b24      	ldr	r3, [pc, #144]	; (8009968 <mem_malloc+0x1d0>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	791b      	ldrb	r3, [r3, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d006      	beq.n	80098ee <mem_malloc+0x156>
 80098e0:	4b22      	ldr	r3, [pc, #136]	; (800996c <mem_malloc+0x1d4>)
 80098e2:	f240 32b5 	movw	r2, #949	; 0x3b5
 80098e6:	4925      	ldr	r1, [pc, #148]	; (800997c <mem_malloc+0x1e4>)
 80098e8:	4822      	ldr	r0, [pc, #136]	; (8009974 <mem_malloc+0x1dc>)
 80098ea:	f009 fd95 	bl	8013418 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80098ee:	8bba      	ldrh	r2, [r7, #28]
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	4413      	add	r3, r2
 80098f4:	3308      	adds	r3, #8
 80098f6:	4a20      	ldr	r2, [pc, #128]	; (8009978 <mem_malloc+0x1e0>)
 80098f8:	6812      	ldr	r2, [r2, #0]
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d906      	bls.n	800990c <mem_malloc+0x174>
 80098fe:	4b1b      	ldr	r3, [pc, #108]	; (800996c <mem_malloc+0x1d4>)
 8009900:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009904:	491e      	ldr	r1, [pc, #120]	; (8009980 <mem_malloc+0x1e8>)
 8009906:	481b      	ldr	r0, [pc, #108]	; (8009974 <mem_malloc+0x1dc>)
 8009908:	f009 fd86 	bl	8013418 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d006      	beq.n	8009924 <mem_malloc+0x18c>
 8009916:	4b15      	ldr	r3, [pc, #84]	; (800996c <mem_malloc+0x1d4>)
 8009918:	f240 32bb 	movw	r2, #955	; 0x3bb
 800991c:	4919      	ldr	r1, [pc, #100]	; (8009984 <mem_malloc+0x1ec>)
 800991e:	4815      	ldr	r0, [pc, #84]	; (8009974 <mem_malloc+0x1dc>)
 8009920:	f009 fd7a 	bl	8013418 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f003 0303 	and.w	r3, r3, #3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d006      	beq.n	800993c <mem_malloc+0x1a4>
 800992e:	4b0f      	ldr	r3, [pc, #60]	; (800996c <mem_malloc+0x1d4>)
 8009930:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009934:	4914      	ldr	r1, [pc, #80]	; (8009988 <mem_malloc+0x1f0>)
 8009936:	480f      	ldr	r0, [pc, #60]	; (8009974 <mem_malloc+0x1dc>)
 8009938:	f009 fd6e 	bl	8013418 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	3308      	adds	r3, #8
 8009940:	e00e      	b.n	8009960 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8009942:	8bfb      	ldrh	r3, [r7, #30]
 8009944:	4618      	mov	r0, r3
 8009946:	f7ff fc83 	bl	8009250 <ptr_to_mem>
 800994a:	4603      	mov	r3, r0
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009950:	8bfa      	ldrh	r2, [r7, #30]
 8009952:	8bbb      	ldrh	r3, [r7, #28]
 8009954:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8009958:	429a      	cmp	r2, r3
 800995a:	f4ff af44 	bcc.w	80097e6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3720      	adds	r7, #32
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	20005f54 	.word	0x20005f54
 800996c:	080148dc 	.word	0x080148dc
 8009970:	08014a84 	.word	0x08014a84
 8009974:	08014924 	.word	0x08014924
 8009978:	20005f50 	.word	0x20005f50
 800997c:	08014a98 	.word	0x08014a98
 8009980:	08014ab4 	.word	0x08014ab4
 8009984:	08014ae4 	.word	0x08014ae4
 8009988:	08014b14 	.word	0x08014b14

0800998c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	2200      	movs	r2, #0
 800999a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	3303      	adds	r3, #3
 80099a2:	f023 0303 	bic.w	r3, r3, #3
 80099a6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	e011      	b.n	80099d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	881b      	ldrh	r3, [r3, #0]
 80099c4:	461a      	mov	r2, r3
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	4413      	add	r3, r2
 80099ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	3301      	adds	r3, #1
 80099d0:	60fb      	str	r3, [r7, #12]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	885b      	ldrh	r3, [r3, #2]
 80099d6:	461a      	mov	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4293      	cmp	r3, r2
 80099dc:	dbe7      	blt.n	80099ae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80099de:	bf00      	nop
 80099e0:	bf00      	nop
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80099f2:	2300      	movs	r3, #0
 80099f4:	80fb      	strh	r3, [r7, #6]
 80099f6:	e009      	b.n	8009a0c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80099f8:	88fb      	ldrh	r3, [r7, #6]
 80099fa:	4a08      	ldr	r2, [pc, #32]	; (8009a1c <memp_init+0x30>)
 80099fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7ff ffc3 	bl	800998c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009a06:	88fb      	ldrh	r3, [r7, #6]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	80fb      	strh	r3, [r7, #6]
 8009a0c:	88fb      	ldrh	r3, [r7, #6]
 8009a0e:	2b08      	cmp	r3, #8
 8009a10:	d9f2      	bls.n	80099f8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009a12:	bf00      	nop
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	080172f4 	.word	0x080172f4

08009a20 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d012      	beq.n	8009a5c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	6812      	ldr	r2, [r2, #0]
 8009a3e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d006      	beq.n	8009a58 <do_memp_malloc_pool+0x38>
 8009a4a:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <do_memp_malloc_pool+0x48>)
 8009a4c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009a50:	4906      	ldr	r1, [pc, #24]	; (8009a6c <do_memp_malloc_pool+0x4c>)
 8009a52:	4807      	ldr	r0, [pc, #28]	; (8009a70 <do_memp_malloc_pool+0x50>)
 8009a54:	f009 fce0 	bl	8013418 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	e000      	b.n	8009a5e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	08014b38 	.word	0x08014b38
 8009a6c:	08014b68 	.word	0x08014b68
 8009a70:	08014b8c 	.word	0x08014b8c

08009a74 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	2b08      	cmp	r3, #8
 8009a82:	d908      	bls.n	8009a96 <memp_malloc+0x22>
 8009a84:	4b0a      	ldr	r3, [pc, #40]	; (8009ab0 <memp_malloc+0x3c>)
 8009a86:	f240 1257 	movw	r2, #343	; 0x157
 8009a8a:	490a      	ldr	r1, [pc, #40]	; (8009ab4 <memp_malloc+0x40>)
 8009a8c:	480a      	ldr	r0, [pc, #40]	; (8009ab8 <memp_malloc+0x44>)
 8009a8e:	f009 fcc3 	bl	8013418 <iprintf>
 8009a92:	2300      	movs	r3, #0
 8009a94:	e008      	b.n	8009aa8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009a96:	79fb      	ldrb	r3, [r7, #7]
 8009a98:	4a08      	ldr	r2, [pc, #32]	; (8009abc <memp_malloc+0x48>)
 8009a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff ffbe 	bl	8009a20 <do_memp_malloc_pool>
 8009aa4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	08014b38 	.word	0x08014b38
 8009ab4:	08014bc8 	.word	0x08014bc8
 8009ab8:	08014b8c 	.word	0x08014b8c
 8009abc:	080172f4 	.word	0x080172f4

08009ac0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	f003 0303 	and.w	r3, r3, #3
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d006      	beq.n	8009ae2 <do_memp_free_pool+0x22>
 8009ad4:	4b0a      	ldr	r3, [pc, #40]	; (8009b00 <do_memp_free_pool+0x40>)
 8009ad6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009ada:	490a      	ldr	r1, [pc, #40]	; (8009b04 <do_memp_free_pool+0x44>)
 8009adc:	480a      	ldr	r0, [pc, #40]	; (8009b08 <do_memp_free_pool+0x48>)
 8009ade:	f009 fc9b 	bl	8013418 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009af8:	bf00      	nop
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	08014b38 	.word	0x08014b38
 8009b04:	08014be8 	.word	0x08014be8
 8009b08:	08014b8c 	.word	0x08014b8c

08009b0c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	6039      	str	r1, [r7, #0]
 8009b16:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009b18:	79fb      	ldrb	r3, [r7, #7]
 8009b1a:	2b08      	cmp	r3, #8
 8009b1c:	d907      	bls.n	8009b2e <memp_free+0x22>
 8009b1e:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <memp_free+0x44>)
 8009b20:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009b24:	490b      	ldr	r1, [pc, #44]	; (8009b54 <memp_free+0x48>)
 8009b26:	480c      	ldr	r0, [pc, #48]	; (8009b58 <memp_free+0x4c>)
 8009b28:	f009 fc76 	bl	8013418 <iprintf>
 8009b2c:	e00c      	b.n	8009b48 <memp_free+0x3c>

  if (mem == NULL) {
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d008      	beq.n	8009b46 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009b34:	79fb      	ldrb	r3, [r7, #7]
 8009b36:	4a09      	ldr	r2, [pc, #36]	; (8009b5c <memp_free+0x50>)
 8009b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7ff ffbe 	bl	8009ac0 <do_memp_free_pool>
 8009b44:	e000      	b.n	8009b48 <memp_free+0x3c>
    return;
 8009b46:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	08014b38 	.word	0x08014b38
 8009b54:	08014c08 	.word	0x08014c08
 8009b58:	08014b8c 	.word	0x08014b8c
 8009b5c:	080172f4 	.word	0x080172f4

08009b60 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009b60:	b480      	push	{r7}
 8009b62:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009b64:	bf00      	nop
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
	...

08009b70 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d108      	bne.n	8009b96 <netif_add+0x26>
 8009b84:	4b57      	ldr	r3, [pc, #348]	; (8009ce4 <netif_add+0x174>)
 8009b86:	f240 1227 	movw	r2, #295	; 0x127
 8009b8a:	4957      	ldr	r1, [pc, #348]	; (8009ce8 <netif_add+0x178>)
 8009b8c:	4857      	ldr	r0, [pc, #348]	; (8009cec <netif_add+0x17c>)
 8009b8e:	f009 fc43 	bl	8013418 <iprintf>
 8009b92:	2300      	movs	r3, #0
 8009b94:	e0a2      	b.n	8009cdc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d108      	bne.n	8009bae <netif_add+0x3e>
 8009b9c:	4b51      	ldr	r3, [pc, #324]	; (8009ce4 <netif_add+0x174>)
 8009b9e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009ba2:	4953      	ldr	r1, [pc, #332]	; (8009cf0 <netif_add+0x180>)
 8009ba4:	4851      	ldr	r0, [pc, #324]	; (8009cec <netif_add+0x17c>)
 8009ba6:	f009 fc37 	bl	8013418 <iprintf>
 8009baa:	2300      	movs	r3, #0
 8009bac:	e096      	b.n	8009cdc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009bb4:	4b4f      	ldr	r3, [pc, #316]	; (8009cf4 <netif_add+0x184>)
 8009bb6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009bbe:	4b4d      	ldr	r3, [pc, #308]	; (8009cf4 <netif_add+0x184>)
 8009bc0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009bc8:	4b4a      	ldr	r3, [pc, #296]	; (8009cf4 <netif_add+0x184>)
 8009bca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	4a45      	ldr	r2, [pc, #276]	; (8009cf8 <netif_add+0x188>)
 8009be2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6a3a      	ldr	r2, [r7, #32]
 8009bfc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009bfe:	4b3f      	ldr	r3, [pc, #252]	; (8009cfc <netif_add+0x18c>)
 8009c00:	781a      	ldrb	r2, [r3, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c0c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	68b9      	ldr	r1, [r7, #8]
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f000 f913 	bl	8009e40 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	4798      	blx	r3
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <netif_add+0xba>
    return NULL;
 8009c26:	2300      	movs	r3, #0
 8009c28:	e058      	b.n	8009cdc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c30:	2bff      	cmp	r3, #255	; 0xff
 8009c32:	d103      	bne.n	8009c3c <netif_add+0xcc>
        netif->num = 0;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009c40:	4b2f      	ldr	r3, [pc, #188]	; (8009d00 <netif_add+0x190>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	617b      	str	r3, [r7, #20]
 8009c46:	e02b      	b.n	8009ca0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d106      	bne.n	8009c5e <netif_add+0xee>
 8009c50:	4b24      	ldr	r3, [pc, #144]	; (8009ce4 <netif_add+0x174>)
 8009c52:	f240 128b 	movw	r2, #395	; 0x18b
 8009c56:	492b      	ldr	r1, [pc, #172]	; (8009d04 <netif_add+0x194>)
 8009c58:	4824      	ldr	r0, [pc, #144]	; (8009cec <netif_add+0x17c>)
 8009c5a:	f009 fbdd 	bl	8013418 <iprintf>
        num_netifs++;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	3301      	adds	r3, #1
 8009c62:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	2bff      	cmp	r3, #255	; 0xff
 8009c68:	dd06      	ble.n	8009c78 <netif_add+0x108>
 8009c6a:	4b1e      	ldr	r3, [pc, #120]	; (8009ce4 <netif_add+0x174>)
 8009c6c:	f240 128d 	movw	r2, #397	; 0x18d
 8009c70:	4925      	ldr	r1, [pc, #148]	; (8009d08 <netif_add+0x198>)
 8009c72:	481e      	ldr	r0, [pc, #120]	; (8009cec <netif_add+0x17c>)
 8009c74:	f009 fbd0 	bl	8013418 <iprintf>
        if (netif2->num == netif->num) {
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d108      	bne.n	8009c9a <netif_add+0x12a>
          netif->num++;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c8e:	3301      	adds	r3, #1
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009c98:	e005      	b.n	8009ca6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1d0      	bne.n	8009c48 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1be      	bne.n	8009c2a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009cb2:	2bfe      	cmp	r3, #254	; 0xfe
 8009cb4:	d103      	bne.n	8009cbe <netif_add+0x14e>
    netif_num = 0;
 8009cb6:	4b11      	ldr	r3, [pc, #68]	; (8009cfc <netif_add+0x18c>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	701a      	strb	r2, [r3, #0]
 8009cbc:	e006      	b.n	8009ccc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	4b0c      	ldr	r3, [pc, #48]	; (8009cfc <netif_add+0x18c>)
 8009cca:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009ccc:	4b0c      	ldr	r3, [pc, #48]	; (8009d00 <netif_add+0x190>)
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009cd4:	4a0a      	ldr	r2, [pc, #40]	; (8009d00 <netif_add+0x190>)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009cda:	68fb      	ldr	r3, [r7, #12]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	08014c24 	.word	0x08014c24
 8009ce8:	08014cb8 	.word	0x08014cb8
 8009cec:	08014c74 	.word	0x08014c74
 8009cf0:	08014cd4 	.word	0x08014cd4
 8009cf4:	08017358 	.word	0x08017358
 8009cf8:	0800a053 	.word	0x0800a053
 8009cfc:	20008e4c 	.word	0x20008e4c
 8009d00:	20008e44 	.word	0x20008e44
 8009d04:	08014cf8 	.word	0x08014cf8
 8009d08:	08014d0c 	.word	0x08014d0c

08009d0c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f002 fb81 	bl	800c420 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f007 f81f 	bl	8010d64 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009d26:	bf00      	nop
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
	...

08009d30 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d106      	bne.n	8009d50 <netif_do_set_ipaddr+0x20>
 8009d42:	4b1d      	ldr	r3, [pc, #116]	; (8009db8 <netif_do_set_ipaddr+0x88>)
 8009d44:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009d48:	491c      	ldr	r1, [pc, #112]	; (8009dbc <netif_do_set_ipaddr+0x8c>)
 8009d4a:	481d      	ldr	r0, [pc, #116]	; (8009dc0 <netif_do_set_ipaddr+0x90>)
 8009d4c:	f009 fb64 	bl	8013418 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d106      	bne.n	8009d64 <netif_do_set_ipaddr+0x34>
 8009d56:	4b18      	ldr	r3, [pc, #96]	; (8009db8 <netif_do_set_ipaddr+0x88>)
 8009d58:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009d5c:	4917      	ldr	r1, [pc, #92]	; (8009dbc <netif_do_set_ipaddr+0x8c>)
 8009d5e:	4818      	ldr	r0, [pc, #96]	; (8009dc0 <netif_do_set_ipaddr+0x90>)
 8009d60:	f009 fb5a 	bl	8013418 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3304      	adds	r3, #4
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d01c      	beq.n	8009dac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009d82:	f107 0314 	add.w	r3, r7, #20
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff ffbf 	bl	8009d0c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <netif_do_set_ipaddr+0x6a>
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	e000      	b.n	8009d9c <netif_do_set_ipaddr+0x6c>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009da0:	2101      	movs	r1, #1
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 f8d2 	bl	8009f4c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009da8:	2301      	movs	r3, #1
 8009daa:	e000      	b.n	8009dae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3718      	adds	r7, #24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	08014c24 	.word	0x08014c24
 8009dbc:	08014d3c 	.word	0x08014d3c
 8009dc0:	08014c74 	.word	0x08014c74

08009dc4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d00a      	beq.n	8009df4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d002      	beq.n	8009dea <netif_do_set_netmask+0x26>
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	e000      	b.n	8009dec <netif_do_set_netmask+0x28>
 8009dea:	2300      	movs	r3, #0
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009df0:	2301      	movs	r3, #1
 8009df2:	e000      	b.n	8009df6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b085      	sub	sp, #20
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	330c      	adds	r3, #12
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d00a      	beq.n	8009e32 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d002      	beq.n	8009e28 <netif_do_set_gw+0x26>
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	e000      	b.n	8009e2a <netif_do_set_gw+0x28>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e000      	b.n	8009e34 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009e5c:	4b1c      	ldr	r3, [pc, #112]	; (8009ed0 <netif_set_addr+0x90>)
 8009e5e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009e66:	4b1a      	ldr	r3, [pc, #104]	; (8009ed0 <netif_set_addr+0x90>)
 8009e68:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d101      	bne.n	8009e74 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009e70:	4b17      	ldr	r3, [pc, #92]	; (8009ed0 <netif_set_addr+0x90>)
 8009e72:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <netif_set_addr+0x42>
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d101      	bne.n	8009e86 <netif_set_addr+0x46>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e000      	b.n	8009e88 <netif_set_addr+0x48>
 8009e86:	2300      	movs	r3, #0
 8009e88:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d006      	beq.n	8009e9e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009e90:	f107 0310 	add.w	r3, r7, #16
 8009e94:	461a      	mov	r2, r3
 8009e96:	68b9      	ldr	r1, [r7, #8]
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7ff ff49 	bl	8009d30 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009e9e:	69fa      	ldr	r2, [r7, #28]
 8009ea0:	6879      	ldr	r1, [r7, #4]
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f7ff ff8e 	bl	8009dc4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009ea8:	69ba      	ldr	r2, [r7, #24]
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f7ff ffa8 	bl	8009e02 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d106      	bne.n	8009ec6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009eb8:	f107 0310 	add.w	r3, r7, #16
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f7ff ff35 	bl	8009d30 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009ec6:	bf00      	nop
 8009ec8:	3720      	adds	r7, #32
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	08017358 	.word	0x08017358

08009ed4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009edc:	4a04      	ldr	r2, [pc, #16]	; (8009ef0 <netif_set_default+0x1c>)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009ee2:	bf00      	nop
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	20008e48 	.word	0x20008e48

08009ef4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d107      	bne.n	8009f12 <netif_set_up+0x1e>
 8009f02:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <netif_set_up+0x4c>)
 8009f04:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009f08:	490e      	ldr	r1, [pc, #56]	; (8009f44 <netif_set_up+0x50>)
 8009f0a:	480f      	ldr	r0, [pc, #60]	; (8009f48 <netif_set_up+0x54>)
 8009f0c:	f009 fa84 	bl	8013418 <iprintf>
 8009f10:	e013      	b.n	8009f3a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f18:	f003 0301 	and.w	r3, r3, #1
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10c      	bne.n	8009f3a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f26:	f043 0301 	orr.w	r3, r3, #1
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009f32:	2103      	movs	r1, #3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f809 	bl	8009f4c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	08014c24 	.word	0x08014c24
 8009f44:	08014dac 	.word	0x08014dac
 8009f48:	08014c74 	.word	0x08014c74

08009f4c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	460b      	mov	r3, r1
 8009f56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d106      	bne.n	8009f6c <netif_issue_reports+0x20>
 8009f5e:	4b18      	ldr	r3, [pc, #96]	; (8009fc0 <netif_issue_reports+0x74>)
 8009f60:	f240 326d 	movw	r2, #877	; 0x36d
 8009f64:	4917      	ldr	r1, [pc, #92]	; (8009fc4 <netif_issue_reports+0x78>)
 8009f66:	4818      	ldr	r0, [pc, #96]	; (8009fc8 <netif_issue_reports+0x7c>)
 8009f68:	f009 fa56 	bl	8013418 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f72:	f003 0304 	and.w	r3, r3, #4
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d01e      	beq.n	8009fb8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f80:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d017      	beq.n	8009fb8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009f88:	78fb      	ldrb	r3, [r7, #3]
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d013      	beq.n	8009fba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	3304      	adds	r3, #4
 8009f96:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00e      	beq.n	8009fba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009fa2:	f003 0308 	and.w	r3, r3, #8
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d007      	beq.n	8009fba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3304      	adds	r3, #4
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f007 fe41 	bl	8011c38 <etharp_request>
 8009fb6:	e000      	b.n	8009fba <netif_issue_reports+0x6e>
    return;
 8009fb8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	08014c24 	.word	0x08014c24
 8009fc4:	08014dc8 	.word	0x08014dc8
 8009fc8:	08014c74 	.word	0x08014c74

08009fcc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d107      	bne.n	8009fea <netif_set_down+0x1e>
 8009fda:	4b12      	ldr	r3, [pc, #72]	; (800a024 <netif_set_down+0x58>)
 8009fdc:	f240 329b 	movw	r2, #923	; 0x39b
 8009fe0:	4911      	ldr	r1, [pc, #68]	; (800a028 <netif_set_down+0x5c>)
 8009fe2:	4812      	ldr	r0, [pc, #72]	; (800a02c <netif_set_down+0x60>)
 8009fe4:	f009 fa18 	bl	8013418 <iprintf>
 8009fe8:	e019      	b.n	800a01e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d012      	beq.n	800a01e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ffe:	f023 0301 	bic.w	r3, r3, #1
 800a002:	b2da      	uxtb	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a010:	f003 0308 	and.w	r3, r3, #8
 800a014:	2b00      	cmp	r3, #0
 800a016:	d002      	beq.n	800a01e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f007 f9cb 	bl	80113b4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	08014c24 	.word	0x08014c24
 800a028:	08014dec 	.word	0x08014dec
 800a02c:	08014c74 	.word	0x08014c74

0800a030 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	61da      	str	r2, [r3, #28]
  }
}
 800a046:	bf00      	nop
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a052:	b480      	push	{r7}
 800a054:	b085      	sub	sp, #20
 800a056:	af00      	add	r7, sp, #0
 800a058:	60f8      	str	r0, [r7, #12]
 800a05a:	60b9      	str	r1, [r7, #8]
 800a05c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a05e:	f06f 030b 	mvn.w	r3, #11
}
 800a062:	4618      	mov	r0, r3
 800a064:	3714      	adds	r7, #20
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
	...

0800a070 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a07a:	79fb      	ldrb	r3, [r7, #7]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d013      	beq.n	800a0a8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a080:	4b0d      	ldr	r3, [pc, #52]	; (800a0b8 <netif_get_by_index+0x48>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	e00c      	b.n	800a0a2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a08e:	3301      	adds	r3, #1
 800a090:	b2db      	uxtb	r3, r3
 800a092:	79fa      	ldrb	r2, [r7, #7]
 800a094:	429a      	cmp	r2, r3
 800a096:	d101      	bne.n	800a09c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	e006      	b.n	800a0aa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	60fb      	str	r3, [r7, #12]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1ef      	bne.n	800a088 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	20008e44 	.word	0x20008e44

0800a0bc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a0c2:	4b0c      	ldr	r3, [pc, #48]	; (800a0f4 <pbuf_free_ooseq+0x38>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a0c8:	4b0b      	ldr	r3, [pc, #44]	; (800a0f8 <pbuf_free_ooseq+0x3c>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	607b      	str	r3, [r7, #4]
 800a0ce:	e00a      	b.n	800a0e6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d003      	beq.n	800a0e0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f002 f9df 	bl	800c49c <tcp_free_ooseq>
      return;
 800a0de:	e005      	b.n	800a0ec <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	607b      	str	r3, [r7, #4]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1f1      	bne.n	800a0d0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20008e4d 	.word	0x20008e4d
 800a0f8:	20008e5c 	.word	0x20008e5c

0800a0fc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a100:	4b03      	ldr	r3, [pc, #12]	; (800a110 <pbuf_pool_is_empty+0x14>)
 800a102:	2201      	movs	r2, #1
 800a104:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a106:	bf00      	nop
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr
 800a110:	20008e4d 	.word	0x20008e4d

0800a114 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	4611      	mov	r1, r2
 800a120:	461a      	mov	r2, r3
 800a122:	460b      	mov	r3, r1
 800a124:	80fb      	strh	r3, [r7, #6]
 800a126:	4613      	mov	r3, r2
 800a128:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	88fa      	ldrh	r2, [r7, #6]
 800a13a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	88ba      	ldrh	r2, [r7, #4]
 800a140:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a142:	8b3b      	ldrh	r3, [r7, #24]
 800a144:	b2da      	uxtb	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	7f3a      	ldrb	r2, [r7, #28]
 800a14e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2201      	movs	r2, #1
 800a154:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	73da      	strb	r2, [r3, #15]
}
 800a15c:	bf00      	nop
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b08c      	sub	sp, #48	; 0x30
 800a16c:	af02      	add	r7, sp, #8
 800a16e:	4603      	mov	r3, r0
 800a170:	71fb      	strb	r3, [r7, #7]
 800a172:	460b      	mov	r3, r1
 800a174:	80bb      	strh	r3, [r7, #4]
 800a176:	4613      	mov	r3, r2
 800a178:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a17a:	79fb      	ldrb	r3, [r7, #7]
 800a17c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a17e:	887b      	ldrh	r3, [r7, #2]
 800a180:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a184:	d07f      	beq.n	800a286 <pbuf_alloc+0x11e>
 800a186:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a18a:	f300 80c8 	bgt.w	800a31e <pbuf_alloc+0x1b6>
 800a18e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a192:	d010      	beq.n	800a1b6 <pbuf_alloc+0x4e>
 800a194:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a198:	f300 80c1 	bgt.w	800a31e <pbuf_alloc+0x1b6>
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d002      	beq.n	800a1a6 <pbuf_alloc+0x3e>
 800a1a0:	2b41      	cmp	r3, #65	; 0x41
 800a1a2:	f040 80bc 	bne.w	800a31e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a1a6:	887a      	ldrh	r2, [r7, #2]
 800a1a8:	88bb      	ldrh	r3, [r7, #4]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	f000 f8d1 	bl	800a354 <pbuf_alloc_reference>
 800a1b2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a1b4:	e0bd      	b.n	800a332 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a1be:	88bb      	ldrh	r3, [r7, #4]
 800a1c0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a1c2:	2008      	movs	r0, #8
 800a1c4:	f7ff fc56 	bl	8009a74 <memp_malloc>
 800a1c8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d109      	bne.n	800a1e4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a1d0:	f7ff ff94 	bl	800a0fc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a1da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1dc:	f000 faa8 	bl	800a730 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e0a7      	b.n	800a334 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a1e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1e6:	3303      	adds	r3, #3
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	f023 0303 	bic.w	r3, r3, #3
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	8b7a      	ldrh	r2, [r7, #26]
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	bf28      	it	cs
 800a1fc:	4613      	movcs	r3, r2
 800a1fe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a202:	3310      	adds	r3, #16
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	4413      	add	r3, r2
 800a208:	3303      	adds	r3, #3
 800a20a:	f023 0303 	bic.w	r3, r3, #3
 800a20e:	4618      	mov	r0, r3
 800a210:	89f9      	ldrh	r1, [r7, #14]
 800a212:	8b7a      	ldrh	r2, [r7, #26]
 800a214:	2300      	movs	r3, #0
 800a216:	9301      	str	r3, [sp, #4]
 800a218:	887b      	ldrh	r3, [r7, #2]
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	460b      	mov	r3, r1
 800a21e:	4601      	mov	r1, r0
 800a220:	6938      	ldr	r0, [r7, #16]
 800a222:	f7ff ff77 	bl	800a114 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f003 0303 	and.w	r3, r3, #3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d006      	beq.n	800a240 <pbuf_alloc+0xd8>
 800a232:	4b42      	ldr	r3, [pc, #264]	; (800a33c <pbuf_alloc+0x1d4>)
 800a234:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a238:	4941      	ldr	r1, [pc, #260]	; (800a340 <pbuf_alloc+0x1d8>)
 800a23a:	4842      	ldr	r0, [pc, #264]	; (800a344 <pbuf_alloc+0x1dc>)
 800a23c:	f009 f8ec 	bl	8013418 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a242:	3303      	adds	r3, #3
 800a244:	f023 0303 	bic.w	r3, r3, #3
 800a248:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a24c:	d106      	bne.n	800a25c <pbuf_alloc+0xf4>
 800a24e:	4b3b      	ldr	r3, [pc, #236]	; (800a33c <pbuf_alloc+0x1d4>)
 800a250:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a254:	493c      	ldr	r1, [pc, #240]	; (800a348 <pbuf_alloc+0x1e0>)
 800a256:	483b      	ldr	r0, [pc, #236]	; (800a344 <pbuf_alloc+0x1dc>)
 800a258:	f009 f8de 	bl	8013418 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d102      	bne.n	800a268 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
 800a266:	e002      	b.n	800a26e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a272:	8b7a      	ldrh	r2, [r7, #26]
 800a274:	89fb      	ldrh	r3, [r7, #14]
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a27a:	2300      	movs	r3, #0
 800a27c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a27e:	8b7b      	ldrh	r3, [r7, #26]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d19e      	bne.n	800a1c2 <pbuf_alloc+0x5a>
      break;
 800a284:	e055      	b.n	800a332 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a286:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a288:	3303      	adds	r3, #3
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	f023 0303 	bic.w	r3, r3, #3
 800a290:	b29a      	uxth	r2, r3
 800a292:	88bb      	ldrh	r3, [r7, #4]
 800a294:	3303      	adds	r3, #3
 800a296:	b29b      	uxth	r3, r3
 800a298:	f023 0303 	bic.w	r3, r3, #3
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	4413      	add	r3, r2
 800a2a0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a2a2:	8b3b      	ldrh	r3, [r7, #24]
 800a2a4:	3310      	adds	r3, #16
 800a2a6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a2a8:	8b3a      	ldrh	r2, [r7, #24]
 800a2aa:	88bb      	ldrh	r3, [r7, #4]
 800a2ac:	3303      	adds	r3, #3
 800a2ae:	f023 0303 	bic.w	r3, r3, #3
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d306      	bcc.n	800a2c4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a2b6:	8afa      	ldrh	r2, [r7, #22]
 800a2b8:	88bb      	ldrh	r3, [r7, #4]
 800a2ba:	3303      	adds	r3, #3
 800a2bc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d201      	bcs.n	800a2c8 <pbuf_alloc+0x160>
        return NULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	e035      	b.n	800a334 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a2c8:	8afb      	ldrh	r3, [r7, #22]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7ff fa64 	bl	8009798 <mem_malloc>
 800a2d0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <pbuf_alloc+0x174>
        return NULL;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e02b      	b.n	800a334 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a2dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2de:	3310      	adds	r3, #16
 800a2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e2:	4413      	add	r3, r2
 800a2e4:	3303      	adds	r3, #3
 800a2e6:	f023 0303 	bic.w	r3, r3, #3
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	88b9      	ldrh	r1, [r7, #4]
 800a2ee:	88ba      	ldrh	r2, [r7, #4]
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	9301      	str	r3, [sp, #4]
 800a2f4:	887b      	ldrh	r3, [r7, #2]
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	4601      	mov	r1, r0
 800a2fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2fe:	f7ff ff09 	bl	800a114 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d010      	beq.n	800a330 <pbuf_alloc+0x1c8>
 800a30e:	4b0b      	ldr	r3, [pc, #44]	; (800a33c <pbuf_alloc+0x1d4>)
 800a310:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a314:	490d      	ldr	r1, [pc, #52]	; (800a34c <pbuf_alloc+0x1e4>)
 800a316:	480b      	ldr	r0, [pc, #44]	; (800a344 <pbuf_alloc+0x1dc>)
 800a318:	f009 f87e 	bl	8013418 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a31c:	e008      	b.n	800a330 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a31e:	4b07      	ldr	r3, [pc, #28]	; (800a33c <pbuf_alloc+0x1d4>)
 800a320:	f240 1227 	movw	r2, #295	; 0x127
 800a324:	490a      	ldr	r1, [pc, #40]	; (800a350 <pbuf_alloc+0x1e8>)
 800a326:	4807      	ldr	r0, [pc, #28]	; (800a344 <pbuf_alloc+0x1dc>)
 800a328:	f009 f876 	bl	8013418 <iprintf>
      return NULL;
 800a32c:	2300      	movs	r3, #0
 800a32e:	e001      	b.n	800a334 <pbuf_alloc+0x1cc>
      break;
 800a330:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a334:	4618      	mov	r0, r3
 800a336:	3728      	adds	r7, #40	; 0x28
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	08014e54 	.word	0x08014e54
 800a340:	08014e84 	.word	0x08014e84
 800a344:	08014eb4 	.word	0x08014eb4
 800a348:	08014edc 	.word	0x08014edc
 800a34c:	08014f10 	.word	0x08014f10
 800a350:	08014f3c 	.word	0x08014f3c

0800a354 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af02      	add	r7, sp, #8
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	807b      	strh	r3, [r7, #2]
 800a360:	4613      	mov	r3, r2
 800a362:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a364:	883b      	ldrh	r3, [r7, #0]
 800a366:	2b41      	cmp	r3, #65	; 0x41
 800a368:	d009      	beq.n	800a37e <pbuf_alloc_reference+0x2a>
 800a36a:	883b      	ldrh	r3, [r7, #0]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d006      	beq.n	800a37e <pbuf_alloc_reference+0x2a>
 800a370:	4b0f      	ldr	r3, [pc, #60]	; (800a3b0 <pbuf_alloc_reference+0x5c>)
 800a372:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a376:	490f      	ldr	r1, [pc, #60]	; (800a3b4 <pbuf_alloc_reference+0x60>)
 800a378:	480f      	ldr	r0, [pc, #60]	; (800a3b8 <pbuf_alloc_reference+0x64>)
 800a37a:	f009 f84d 	bl	8013418 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a37e:	2007      	movs	r0, #7
 800a380:	f7ff fb78 	bl	8009a74 <memp_malloc>
 800a384:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d101      	bne.n	800a390 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a38c:	2300      	movs	r3, #0
 800a38e:	e00b      	b.n	800a3a8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a390:	8879      	ldrh	r1, [r7, #2]
 800a392:	887a      	ldrh	r2, [r7, #2]
 800a394:	2300      	movs	r3, #0
 800a396:	9301      	str	r3, [sp, #4]
 800a398:	883b      	ldrh	r3, [r7, #0]
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	460b      	mov	r3, r1
 800a39e:	6879      	ldr	r1, [r7, #4]
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f7ff feb7 	bl	800a114 <pbuf_init_alloced_pbuf>
  return p;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	08014e54 	.word	0x08014e54
 800a3b4:	08014f58 	.word	0x08014f58
 800a3b8:	08014eb4 	.word	0x08014eb4

0800a3bc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b088      	sub	sp, #32
 800a3c0:	af02      	add	r7, sp, #8
 800a3c2:	607b      	str	r3, [r7, #4]
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	73fb      	strb	r3, [r7, #15]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	81bb      	strh	r3, [r7, #12]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
 800a3d2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a3d4:	8a7b      	ldrh	r3, [r7, #18]
 800a3d6:	3303      	adds	r3, #3
 800a3d8:	f023 0203 	bic.w	r2, r3, #3
 800a3dc:	89bb      	ldrh	r3, [r7, #12]
 800a3de:	441a      	add	r2, r3
 800a3e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d901      	bls.n	800a3ea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e018      	b.n	800a41c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d007      	beq.n	800a400 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a3f0:	8a7b      	ldrh	r3, [r7, #18]
 800a3f2:	3303      	adds	r3, #3
 800a3f4:	f023 0303 	bic.w	r3, r3, #3
 800a3f8:	6a3a      	ldr	r2, [r7, #32]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	617b      	str	r3, [r7, #20]
 800a3fe:	e001      	b.n	800a404 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a400:	2300      	movs	r3, #0
 800a402:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	89b9      	ldrh	r1, [r7, #12]
 800a408:	89ba      	ldrh	r2, [r7, #12]
 800a40a:	2302      	movs	r3, #2
 800a40c:	9301      	str	r3, [sp, #4]
 800a40e:	897b      	ldrh	r3, [r7, #10]
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	460b      	mov	r3, r1
 800a414:	6979      	ldr	r1, [r7, #20]
 800a416:	f7ff fe7d 	bl	800a114 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a41a:	687b      	ldr	r3, [r7, #4]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d106      	bne.n	800a444 <pbuf_realloc+0x20>
 800a436:	4b3a      	ldr	r3, [pc, #232]	; (800a520 <pbuf_realloc+0xfc>)
 800a438:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a43c:	4939      	ldr	r1, [pc, #228]	; (800a524 <pbuf_realloc+0x100>)
 800a43e:	483a      	ldr	r0, [pc, #232]	; (800a528 <pbuf_realloc+0x104>)
 800a440:	f008 ffea 	bl	8013418 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	891b      	ldrh	r3, [r3, #8]
 800a448:	887a      	ldrh	r2, [r7, #2]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d263      	bcs.n	800a516 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	891a      	ldrh	r2, [r3, #8]
 800a452:	887b      	ldrh	r3, [r7, #2]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a458:	887b      	ldrh	r3, [r7, #2]
 800a45a:	817b      	strh	r3, [r7, #10]
  q = p;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a460:	e018      	b.n	800a494 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	895b      	ldrh	r3, [r3, #10]
 800a466:	897a      	ldrh	r2, [r7, #10]
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	891a      	ldrh	r2, [r3, #8]
 800a470:	893b      	ldrh	r3, [r7, #8]
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	b29a      	uxth	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d106      	bne.n	800a494 <pbuf_realloc+0x70>
 800a486:	4b26      	ldr	r3, [pc, #152]	; (800a520 <pbuf_realloc+0xfc>)
 800a488:	f240 12af 	movw	r2, #431	; 0x1af
 800a48c:	4927      	ldr	r1, [pc, #156]	; (800a52c <pbuf_realloc+0x108>)
 800a48e:	4826      	ldr	r0, [pc, #152]	; (800a528 <pbuf_realloc+0x104>)
 800a490:	f008 ffc2 	bl	8013418 <iprintf>
  while (rem_len > q->len) {
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	895b      	ldrh	r3, [r3, #10]
 800a498:	897a      	ldrh	r2, [r7, #10]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d8e1      	bhi.n	800a462 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	7b1b      	ldrb	r3, [r3, #12]
 800a4a2:	f003 030f 	and.w	r3, r3, #15
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d121      	bne.n	800a4ee <pbuf_realloc+0xca>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	895b      	ldrh	r3, [r3, #10]
 800a4ae:	897a      	ldrh	r2, [r7, #10]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d01c      	beq.n	800a4ee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	7b5b      	ldrb	r3, [r3, #13]
 800a4b8:	f003 0302 	and.w	r3, r3, #2
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d116      	bne.n	800a4ee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	897b      	ldrh	r3, [r7, #10]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f7ff f864 	bl	80095a0 <mem_trim>
 800a4d8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d106      	bne.n	800a4ee <pbuf_realloc+0xca>
 800a4e0:	4b0f      	ldr	r3, [pc, #60]	; (800a520 <pbuf_realloc+0xfc>)
 800a4e2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a4e6:	4912      	ldr	r1, [pc, #72]	; (800a530 <pbuf_realloc+0x10c>)
 800a4e8:	480f      	ldr	r0, [pc, #60]	; (800a528 <pbuf_realloc+0x104>)
 800a4ea:	f008 ff95 	bl	8013418 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	897a      	ldrh	r2, [r7, #10]
 800a4f2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	895a      	ldrh	r2, [r3, #10]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d004      	beq.n	800a50e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 f911 	bl	800a730 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	e000      	b.n	800a518 <pbuf_realloc+0xf4>
    return;
 800a516:	bf00      	nop

}
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	08014e54 	.word	0x08014e54
 800a524:	08014f6c 	.word	0x08014f6c
 800a528:	08014eb4 	.word	0x08014eb4
 800a52c:	08014f84 	.word	0x08014f84
 800a530:	08014f9c 	.word	0x08014f9c

0800a534 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	4613      	mov	r3, r2
 800a540:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d106      	bne.n	800a556 <pbuf_add_header_impl+0x22>
 800a548:	4b2b      	ldr	r3, [pc, #172]	; (800a5f8 <pbuf_add_header_impl+0xc4>)
 800a54a:	f240 12df 	movw	r2, #479	; 0x1df
 800a54e:	492b      	ldr	r1, [pc, #172]	; (800a5fc <pbuf_add_header_impl+0xc8>)
 800a550:	482b      	ldr	r0, [pc, #172]	; (800a600 <pbuf_add_header_impl+0xcc>)
 800a552:	f008 ff61 	bl	8013418 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <pbuf_add_header_impl+0x30>
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a562:	d301      	bcc.n	800a568 <pbuf_add_header_impl+0x34>
    return 1;
 800a564:	2301      	movs	r3, #1
 800a566:	e043      	b.n	800a5f0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <pbuf_add_header_impl+0x3e>
    return 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	e03e      	b.n	800a5f0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	891a      	ldrh	r2, [r3, #8]
 800a57a:	8a7b      	ldrh	r3, [r7, #18]
 800a57c:	4413      	add	r3, r2
 800a57e:	b29b      	uxth	r3, r3
 800a580:	8a7a      	ldrh	r2, [r7, #18]
 800a582:	429a      	cmp	r2, r3
 800a584:	d901      	bls.n	800a58a <pbuf_add_header_impl+0x56>
    return 1;
 800a586:	2301      	movs	r3, #1
 800a588:	e032      	b.n	800a5f0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	7b1b      	ldrb	r3, [r3, #12]
 800a58e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a590:	8a3b      	ldrh	r3, [r7, #16]
 800a592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00c      	beq.n	800a5b4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	425b      	negs	r3, r3
 800a5a2:	4413      	add	r3, r2
 800a5a4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3310      	adds	r3, #16
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d20d      	bcs.n	800a5cc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e01d      	b.n	800a5f0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a5b4:	79fb      	ldrb	r3, [r7, #7]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d006      	beq.n	800a5c8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	425b      	negs	r3, r3
 800a5c2:	4413      	add	r3, r2
 800a5c4:	617b      	str	r3, [r7, #20]
 800a5c6:	e001      	b.n	800a5cc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e011      	b.n	800a5f0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	697a      	ldr	r2, [r7, #20]
 800a5d0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	895a      	ldrh	r2, [r3, #10]
 800a5d6:	8a7b      	ldrh	r3, [r7, #18]
 800a5d8:	4413      	add	r3, r2
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	891a      	ldrh	r2, [r3, #8]
 800a5e4:	8a7b      	ldrh	r3, [r7, #18]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	811a      	strh	r2, [r3, #8]


  return 0;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3718      	adds	r7, #24
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	08014e54 	.word	0x08014e54
 800a5fc:	08014fb8 	.word	0x08014fb8
 800a600:	08014eb4 	.word	0x08014eb4

0800a604 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a60e:	2200      	movs	r2, #0
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff ff8e 	bl	800a534 <pbuf_add_header_impl>
 800a618:	4603      	mov	r3, r0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d106      	bne.n	800a642 <pbuf_remove_header+0x1e>
 800a634:	4b20      	ldr	r3, [pc, #128]	; (800a6b8 <pbuf_remove_header+0x94>)
 800a636:	f240 224b 	movw	r2, #587	; 0x24b
 800a63a:	4920      	ldr	r1, [pc, #128]	; (800a6bc <pbuf_remove_header+0x98>)
 800a63c:	4820      	ldr	r0, [pc, #128]	; (800a6c0 <pbuf_remove_header+0x9c>)
 800a63e:	f008 feeb 	bl	8013418 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d003      	beq.n	800a650 <pbuf_remove_header+0x2c>
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a64e:	d301      	bcc.n	800a654 <pbuf_remove_header+0x30>
    return 1;
 800a650:	2301      	movs	r3, #1
 800a652:	e02c      	b.n	800a6ae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <pbuf_remove_header+0x3a>
    return 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	e027      	b.n	800a6ae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	895b      	ldrh	r3, [r3, #10]
 800a666:	89fa      	ldrh	r2, [r7, #14]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d908      	bls.n	800a67e <pbuf_remove_header+0x5a>
 800a66c:	4b12      	ldr	r3, [pc, #72]	; (800a6b8 <pbuf_remove_header+0x94>)
 800a66e:	f240 2255 	movw	r2, #597	; 0x255
 800a672:	4914      	ldr	r1, [pc, #80]	; (800a6c4 <pbuf_remove_header+0xa0>)
 800a674:	4812      	ldr	r0, [pc, #72]	; (800a6c0 <pbuf_remove_header+0x9c>)
 800a676:	f008 fecf 	bl	8013418 <iprintf>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e017      	b.n	800a6ae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	441a      	add	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	895a      	ldrh	r2, [r3, #10]
 800a694:	89fb      	ldrh	r3, [r7, #14]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	b29a      	uxth	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	891a      	ldrh	r2, [r3, #8]
 800a6a2:	89fb      	ldrh	r3, [r7, #14]
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	08014e54 	.word	0x08014e54
 800a6bc:	08014fb8 	.word	0x08014fb8
 800a6c0:	08014eb4 	.word	0x08014eb4
 800a6c4:	08014fc4 	.word	0x08014fc4

0800a6c8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	807b      	strh	r3, [r7, #2]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a6d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	da08      	bge.n	800a6f2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a6e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6e4:	425b      	negs	r3, r3
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff ff9b 	bl	800a624 <pbuf_remove_header>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	e007      	b.n	800a702 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a6f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6f6:	787a      	ldrb	r2, [r7, #1]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7ff ff1a 	bl	800a534 <pbuf_add_header_impl>
 800a700:	4603      	mov	r3, r0
  }
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b082      	sub	sp, #8
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	460b      	mov	r3, r1
 800a714:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a716:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a71a:	2201      	movs	r2, #1
 800a71c:	4619      	mov	r1, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff ffd2 	bl	800a6c8 <pbuf_header_impl>
 800a724:	4603      	mov	r3, r0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
	...

0800a730 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10b      	bne.n	800a756 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d106      	bne.n	800a752 <pbuf_free+0x22>
 800a744:	4b38      	ldr	r3, [pc, #224]	; (800a828 <pbuf_free+0xf8>)
 800a746:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a74a:	4938      	ldr	r1, [pc, #224]	; (800a82c <pbuf_free+0xfc>)
 800a74c:	4838      	ldr	r0, [pc, #224]	; (800a830 <pbuf_free+0x100>)
 800a74e:	f008 fe63 	bl	8013418 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a752:	2300      	movs	r3, #0
 800a754:	e063      	b.n	800a81e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a75a:	e05c      	b.n	800a816 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	7b9b      	ldrb	r3, [r3, #14]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d106      	bne.n	800a772 <pbuf_free+0x42>
 800a764:	4b30      	ldr	r3, [pc, #192]	; (800a828 <pbuf_free+0xf8>)
 800a766:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a76a:	4932      	ldr	r1, [pc, #200]	; (800a834 <pbuf_free+0x104>)
 800a76c:	4830      	ldr	r0, [pc, #192]	; (800a830 <pbuf_free+0x100>)
 800a76e:	f008 fe53 	bl	8013418 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	7b9b      	ldrb	r3, [r3, #14]
 800a776:	3b01      	subs	r3, #1
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	739a      	strb	r2, [r3, #14]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	7b9b      	ldrb	r3, [r3, #14]
 800a782:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a784:	7dbb      	ldrb	r3, [r7, #22]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d143      	bne.n	800a812 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	7b1b      	ldrb	r3, [r3, #12]
 800a794:	f003 030f 	and.w	r3, r3, #15
 800a798:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	7b5b      	ldrb	r3, [r3, #13]
 800a79e:	f003 0302 	and.w	r3, r3, #2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d011      	beq.n	800a7ca <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d106      	bne.n	800a7c0 <pbuf_free+0x90>
 800a7b2:	4b1d      	ldr	r3, [pc, #116]	; (800a828 <pbuf_free+0xf8>)
 800a7b4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a7b8:	491f      	ldr	r1, [pc, #124]	; (800a838 <pbuf_free+0x108>)
 800a7ba:	481d      	ldr	r0, [pc, #116]	; (800a830 <pbuf_free+0x100>)
 800a7bc:	f008 fe2c 	bl	8013418 <iprintf>
        pc->custom_free_function(p);
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	4798      	blx	r3
 800a7c8:	e01d      	b.n	800a806 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d104      	bne.n	800a7da <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a7d0:	6879      	ldr	r1, [r7, #4]
 800a7d2:	2008      	movs	r0, #8
 800a7d4:	f7ff f99a 	bl	8009b0c <memp_free>
 800a7d8:	e015      	b.n	800a806 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a7da:	7bfb      	ldrb	r3, [r7, #15]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d104      	bne.n	800a7ea <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a7e0:	6879      	ldr	r1, [r7, #4]
 800a7e2:	2007      	movs	r0, #7
 800a7e4:	f7ff f992 	bl	8009b0c <memp_free>
 800a7e8:	e00d      	b.n	800a806 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a7ea:	7bfb      	ldrb	r3, [r7, #15]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d103      	bne.n	800a7f8 <pbuf_free+0xc8>
          mem_free(p);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7fe fe6b 	bl	80094cc <mem_free>
 800a7f6:	e006      	b.n	800a806 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a7f8:	4b0b      	ldr	r3, [pc, #44]	; (800a828 <pbuf_free+0xf8>)
 800a7fa:	f240 320f 	movw	r2, #783	; 0x30f
 800a7fe:	490f      	ldr	r1, [pc, #60]	; (800a83c <pbuf_free+0x10c>)
 800a800:	480b      	ldr	r0, [pc, #44]	; (800a830 <pbuf_free+0x100>)
 800a802:	f008 fe09 	bl	8013418 <iprintf>
        }
      }
      count++;
 800a806:	7dfb      	ldrb	r3, [r7, #23]
 800a808:	3301      	adds	r3, #1
 800a80a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	607b      	str	r3, [r7, #4]
 800a810:	e001      	b.n	800a816 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a812:	2300      	movs	r3, #0
 800a814:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d19f      	bne.n	800a75c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	08014e54 	.word	0x08014e54
 800a82c:	08014fb8 	.word	0x08014fb8
 800a830:	08014eb4 	.word	0x08014eb4
 800a834:	08014fe4 	.word	0x08014fe4
 800a838:	08014ffc 	.word	0x08014ffc
 800a83c:	08015020 	.word	0x08015020

0800a840 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a84c:	e005      	b.n	800a85a <pbuf_clen+0x1a>
    ++len;
 800a84e:	89fb      	ldrh	r3, [r7, #14]
 800a850:	3301      	adds	r3, #1
 800a852:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1f6      	bne.n	800a84e <pbuf_clen+0xe>
  }
  return len;
 800a860:	89fb      	ldrh	r3, [r7, #14]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
	...

0800a870 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d010      	beq.n	800a8a0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	7b9b      	ldrb	r3, [r3, #14]
 800a882:	3301      	adds	r3, #1
 800a884:	b2da      	uxtb	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	7b9b      	ldrb	r3, [r3, #14]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d106      	bne.n	800a8a0 <pbuf_ref+0x30>
 800a892:	4b05      	ldr	r3, [pc, #20]	; (800a8a8 <pbuf_ref+0x38>)
 800a894:	f240 3242 	movw	r2, #834	; 0x342
 800a898:	4904      	ldr	r1, [pc, #16]	; (800a8ac <pbuf_ref+0x3c>)
 800a89a:	4805      	ldr	r0, [pc, #20]	; (800a8b0 <pbuf_ref+0x40>)
 800a89c:	f008 fdbc 	bl	8013418 <iprintf>
  }
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	08014e54 	.word	0x08014e54
 800a8ac:	08015034 	.word	0x08015034
 800a8b0:	08014eb4 	.word	0x08014eb4

0800a8b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d002      	beq.n	800a8ca <pbuf_cat+0x16>
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d107      	bne.n	800a8da <pbuf_cat+0x26>
 800a8ca:	4b20      	ldr	r3, [pc, #128]	; (800a94c <pbuf_cat+0x98>)
 800a8cc:	f240 3259 	movw	r2, #857	; 0x359
 800a8d0:	491f      	ldr	r1, [pc, #124]	; (800a950 <pbuf_cat+0x9c>)
 800a8d2:	4820      	ldr	r0, [pc, #128]	; (800a954 <pbuf_cat+0xa0>)
 800a8d4:	f008 fda0 	bl	8013418 <iprintf>
 800a8d8:	e034      	b.n	800a944 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	60fb      	str	r3, [r7, #12]
 800a8de:	e00a      	b.n	800a8f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	891a      	ldrh	r2, [r3, #8]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	891b      	ldrh	r3, [r3, #8]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	60fb      	str	r3, [r7, #12]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1f0      	bne.n	800a8e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	891a      	ldrh	r2, [r3, #8]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	895b      	ldrh	r3, [r3, #10]
 800a906:	429a      	cmp	r2, r3
 800a908:	d006      	beq.n	800a918 <pbuf_cat+0x64>
 800a90a:	4b10      	ldr	r3, [pc, #64]	; (800a94c <pbuf_cat+0x98>)
 800a90c:	f240 3262 	movw	r2, #866	; 0x362
 800a910:	4911      	ldr	r1, [pc, #68]	; (800a958 <pbuf_cat+0xa4>)
 800a912:	4810      	ldr	r0, [pc, #64]	; (800a954 <pbuf_cat+0xa0>)
 800a914:	f008 fd80 	bl	8013418 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d006      	beq.n	800a92e <pbuf_cat+0x7a>
 800a920:	4b0a      	ldr	r3, [pc, #40]	; (800a94c <pbuf_cat+0x98>)
 800a922:	f240 3263 	movw	r2, #867	; 0x363
 800a926:	490d      	ldr	r1, [pc, #52]	; (800a95c <pbuf_cat+0xa8>)
 800a928:	480a      	ldr	r0, [pc, #40]	; (800a954 <pbuf_cat+0xa0>)
 800a92a:	f008 fd75 	bl	8013418 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	891a      	ldrh	r2, [r3, #8]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	891b      	ldrh	r3, [r3, #8]
 800a936:	4413      	add	r3, r2
 800a938:	b29a      	uxth	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	08014e54 	.word	0x08014e54
 800a950:	08015048 	.word	0x08015048
 800a954:	08014eb4 	.word	0x08014eb4
 800a958:	08015080 	.word	0x08015080
 800a95c:	080150b0 	.word	0x080150b0

0800a960 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a96a:	6839      	ldr	r1, [r7, #0]
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7ff ffa1 	bl	800a8b4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a972:	6838      	ldr	r0, [r7, #0]
 800a974:	f7ff ff7c 	bl	800a870 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a978:	bf00      	nop
 800a97a:	3708      	adds	r7, #8
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a98a:	2300      	movs	r3, #0
 800a98c:	617b      	str	r3, [r7, #20]
 800a98e:	2300      	movs	r3, #0
 800a990:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d008      	beq.n	800a9aa <pbuf_copy+0x2a>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d005      	beq.n	800a9aa <pbuf_copy+0x2a>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	891a      	ldrh	r2, [r3, #8]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	891b      	ldrh	r3, [r3, #8]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d209      	bcs.n	800a9be <pbuf_copy+0x3e>
 800a9aa:	4b57      	ldr	r3, [pc, #348]	; (800ab08 <pbuf_copy+0x188>)
 800a9ac:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a9b0:	4956      	ldr	r1, [pc, #344]	; (800ab0c <pbuf_copy+0x18c>)
 800a9b2:	4857      	ldr	r0, [pc, #348]	; (800ab10 <pbuf_copy+0x190>)
 800a9b4:	f008 fd30 	bl	8013418 <iprintf>
 800a9b8:	f06f 030f 	mvn.w	r3, #15
 800a9bc:	e09f      	b.n	800aafe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	895b      	ldrh	r3, [r3, #10]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	1ad2      	subs	r2, r2, r3
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	895b      	ldrh	r3, [r3, #10]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	1acb      	subs	r3, r1, r3
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d306      	bcc.n	800a9e4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	895b      	ldrh	r3, [r3, #10]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	60fb      	str	r3, [r7, #12]
 800a9e2:	e005      	b.n	800a9f0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	895b      	ldrh	r3, [r3, #10]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	18d0      	adds	r0, r2, r3
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	4413      	add	r3, r2
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	4619      	mov	r1, r3
 800aa04:	f008 fcd8 	bl	80133b8 <memcpy>
    offset_to += len;
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	4413      	add	r3, r2
 800aa16:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	895b      	ldrh	r3, [r3, #10]
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d906      	bls.n	800aa32 <pbuf_copy+0xb2>
 800aa24:	4b38      	ldr	r3, [pc, #224]	; (800ab08 <pbuf_copy+0x188>)
 800aa26:	f240 32d9 	movw	r2, #985	; 0x3d9
 800aa2a:	493a      	ldr	r1, [pc, #232]	; (800ab14 <pbuf_copy+0x194>)
 800aa2c:	4838      	ldr	r0, [pc, #224]	; (800ab10 <pbuf_copy+0x190>)
 800aa2e:	f008 fcf3 	bl	8013418 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	895b      	ldrh	r3, [r3, #10]
 800aa36:	461a      	mov	r2, r3
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d906      	bls.n	800aa4c <pbuf_copy+0xcc>
 800aa3e:	4b32      	ldr	r3, [pc, #200]	; (800ab08 <pbuf_copy+0x188>)
 800aa40:	f240 32da 	movw	r2, #986	; 0x3da
 800aa44:	4934      	ldr	r1, [pc, #208]	; (800ab18 <pbuf_copy+0x198>)
 800aa46:	4832      	ldr	r0, [pc, #200]	; (800ab10 <pbuf_copy+0x190>)
 800aa48:	f008 fce6 	bl	8013418 <iprintf>
    if (offset_from >= p_from->len) {
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	895b      	ldrh	r3, [r3, #10]
 800aa50:	461a      	mov	r2, r3
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d304      	bcc.n	800aa62 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	895b      	ldrh	r3, [r3, #10]
 800aa66:	461a      	mov	r2, r3
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d114      	bne.n	800aa98 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10c      	bne.n	800aa98 <pbuf_copy+0x118>
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d009      	beq.n	800aa98 <pbuf_copy+0x118>
 800aa84:	4b20      	ldr	r3, [pc, #128]	; (800ab08 <pbuf_copy+0x188>)
 800aa86:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800aa8a:	4924      	ldr	r1, [pc, #144]	; (800ab1c <pbuf_copy+0x19c>)
 800aa8c:	4820      	ldr	r0, [pc, #128]	; (800ab10 <pbuf_copy+0x190>)
 800aa8e:	f008 fcc3 	bl	8013418 <iprintf>
 800aa92:	f06f 030f 	mvn.w	r3, #15
 800aa96:	e032      	b.n	800aafe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d013      	beq.n	800aac6 <pbuf_copy+0x146>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	895a      	ldrh	r2, [r3, #10]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	891b      	ldrh	r3, [r3, #8]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d10d      	bne.n	800aac6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d009      	beq.n	800aac6 <pbuf_copy+0x146>
 800aab2:	4b15      	ldr	r3, [pc, #84]	; (800ab08 <pbuf_copy+0x188>)
 800aab4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800aab8:	4919      	ldr	r1, [pc, #100]	; (800ab20 <pbuf_copy+0x1a0>)
 800aaba:	4815      	ldr	r0, [pc, #84]	; (800ab10 <pbuf_copy+0x190>)
 800aabc:	f008 fcac 	bl	8013418 <iprintf>
 800aac0:	f06f 0305 	mvn.w	r3, #5
 800aac4:	e01b      	b.n	800aafe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d013      	beq.n	800aaf4 <pbuf_copy+0x174>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	895a      	ldrh	r2, [r3, #10]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	891b      	ldrh	r3, [r3, #8]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d10d      	bne.n	800aaf4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d009      	beq.n	800aaf4 <pbuf_copy+0x174>
 800aae0:	4b09      	ldr	r3, [pc, #36]	; (800ab08 <pbuf_copy+0x188>)
 800aae2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800aae6:	490e      	ldr	r1, [pc, #56]	; (800ab20 <pbuf_copy+0x1a0>)
 800aae8:	4809      	ldr	r0, [pc, #36]	; (800ab10 <pbuf_copy+0x190>)
 800aaea:	f008 fc95 	bl	8013418 <iprintf>
 800aaee:	f06f 0305 	mvn.w	r3, #5
 800aaf2:	e004      	b.n	800aafe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f47f af61 	bne.w	800a9be <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3718      	adds	r7, #24
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	08014e54 	.word	0x08014e54
 800ab0c:	080150fc 	.word	0x080150fc
 800ab10:	08014eb4 	.word	0x08014eb4
 800ab14:	0801512c 	.word	0x0801512c
 800ab18:	08015144 	.word	0x08015144
 800ab1c:	08015160 	.word	0x08015160
 800ab20:	08015170 	.word	0x08015170

0800ab24 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b088      	sub	sp, #32
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	4611      	mov	r1, r2
 800ab30:	461a      	mov	r2, r3
 800ab32:	460b      	mov	r3, r1
 800ab34:	80fb      	strh	r3, [r7, #6]
 800ab36:	4613      	mov	r3, r2
 800ab38:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d108      	bne.n	800ab5a <pbuf_copy_partial+0x36>
 800ab48:	4b2b      	ldr	r3, [pc, #172]	; (800abf8 <pbuf_copy_partial+0xd4>)
 800ab4a:	f240 420a 	movw	r2, #1034	; 0x40a
 800ab4e:	492b      	ldr	r1, [pc, #172]	; (800abfc <pbuf_copy_partial+0xd8>)
 800ab50:	482b      	ldr	r0, [pc, #172]	; (800ac00 <pbuf_copy_partial+0xdc>)
 800ab52:	f008 fc61 	bl	8013418 <iprintf>
 800ab56:	2300      	movs	r3, #0
 800ab58:	e04a      	b.n	800abf0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d108      	bne.n	800ab72 <pbuf_copy_partial+0x4e>
 800ab60:	4b25      	ldr	r3, [pc, #148]	; (800abf8 <pbuf_copy_partial+0xd4>)
 800ab62:	f240 420b 	movw	r2, #1035	; 0x40b
 800ab66:	4927      	ldr	r1, [pc, #156]	; (800ac04 <pbuf_copy_partial+0xe0>)
 800ab68:	4825      	ldr	r0, [pc, #148]	; (800ac00 <pbuf_copy_partial+0xdc>)
 800ab6a:	f008 fc55 	bl	8013418 <iprintf>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	e03e      	b.n	800abf0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	61fb      	str	r3, [r7, #28]
 800ab76:	e034      	b.n	800abe2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ab78:	88bb      	ldrh	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00a      	beq.n	800ab94 <pbuf_copy_partial+0x70>
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	895b      	ldrh	r3, [r3, #10]
 800ab82:	88ba      	ldrh	r2, [r7, #4]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d305      	bcc.n	800ab94 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	895b      	ldrh	r3, [r3, #10]
 800ab8c:	88ba      	ldrh	r2, [r7, #4]
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	80bb      	strh	r3, [r7, #4]
 800ab92:	e023      	b.n	800abdc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	895a      	ldrh	r2, [r3, #10]
 800ab98:	88bb      	ldrh	r3, [r7, #4]
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ab9e:	8b3a      	ldrh	r2, [r7, #24]
 800aba0:	88fb      	ldrh	r3, [r7, #6]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d901      	bls.n	800abaa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800aba6:	88fb      	ldrh	r3, [r7, #6]
 800aba8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800abaa:	8b7b      	ldrh	r3, [r7, #26]
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	18d0      	adds	r0, r2, r3
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	685a      	ldr	r2, [r3, #4]
 800abb4:	88bb      	ldrh	r3, [r7, #4]
 800abb6:	4413      	add	r3, r2
 800abb8:	8b3a      	ldrh	r2, [r7, #24]
 800abba:	4619      	mov	r1, r3
 800abbc:	f008 fbfc 	bl	80133b8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800abc0:	8afa      	ldrh	r2, [r7, #22]
 800abc2:	8b3b      	ldrh	r3, [r7, #24]
 800abc4:	4413      	add	r3, r2
 800abc6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800abc8:	8b7a      	ldrh	r2, [r7, #26]
 800abca:	8b3b      	ldrh	r3, [r7, #24]
 800abcc:	4413      	add	r3, r2
 800abce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800abd0:	88fa      	ldrh	r2, [r7, #6]
 800abd2:	8b3b      	ldrh	r3, [r7, #24]
 800abd4:	1ad3      	subs	r3, r2, r3
 800abd6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	61fb      	str	r3, [r7, #28]
 800abe2:	88fb      	ldrh	r3, [r7, #6]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <pbuf_copy_partial+0xca>
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1c4      	bne.n	800ab78 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800abee:	8afb      	ldrh	r3, [r7, #22]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3720      	adds	r7, #32
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	08014e54 	.word	0x08014e54
 800abfc:	0801519c 	.word	0x0801519c
 800ac00:	08014eb4 	.word	0x08014eb4
 800ac04:	080151bc 	.word	0x080151bc

0800ac08 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	4613      	mov	r3, r2
 800ac14:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800ac16:	88fb      	ldrh	r3, [r7, #6]
 800ac18:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d109      	bne.n	800ac38 <pbuf_take+0x30>
 800ac24:	4b3a      	ldr	r3, [pc, #232]	; (800ad10 <pbuf_take+0x108>)
 800ac26:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800ac2a:	493a      	ldr	r1, [pc, #232]	; (800ad14 <pbuf_take+0x10c>)
 800ac2c:	483a      	ldr	r0, [pc, #232]	; (800ad18 <pbuf_take+0x110>)
 800ac2e:	f008 fbf3 	bl	8013418 <iprintf>
 800ac32:	f06f 030f 	mvn.w	r3, #15
 800ac36:	e067      	b.n	800ad08 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d109      	bne.n	800ac52 <pbuf_take+0x4a>
 800ac3e:	4b34      	ldr	r3, [pc, #208]	; (800ad10 <pbuf_take+0x108>)
 800ac40:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800ac44:	4935      	ldr	r1, [pc, #212]	; (800ad1c <pbuf_take+0x114>)
 800ac46:	4834      	ldr	r0, [pc, #208]	; (800ad18 <pbuf_take+0x110>)
 800ac48:	f008 fbe6 	bl	8013418 <iprintf>
 800ac4c:	f06f 030f 	mvn.w	r3, #15
 800ac50:	e05a      	b.n	800ad08 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	891b      	ldrh	r3, [r3, #8]
 800ac56:	88fa      	ldrh	r2, [r7, #6]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d909      	bls.n	800ac70 <pbuf_take+0x68>
 800ac5c:	4b2c      	ldr	r3, [pc, #176]	; (800ad10 <pbuf_take+0x108>)
 800ac5e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800ac62:	492f      	ldr	r1, [pc, #188]	; (800ad20 <pbuf_take+0x118>)
 800ac64:	482c      	ldr	r0, [pc, #176]	; (800ad18 <pbuf_take+0x110>)
 800ac66:	f008 fbd7 	bl	8013418 <iprintf>
 800ac6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac6e:	e04b      	b.n	800ad08 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d007      	beq.n	800ac86 <pbuf_take+0x7e>
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d004      	beq.n	800ac86 <pbuf_take+0x7e>
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	891b      	ldrh	r3, [r3, #8]
 800ac80:	88fa      	ldrh	r2, [r7, #6]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d902      	bls.n	800ac8c <pbuf_take+0x84>
    return ERR_ARG;
 800ac86:	f06f 030f 	mvn.w	r3, #15
 800ac8a:	e03d      	b.n	800ad08 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	61fb      	str	r3, [r7, #28]
 800ac90:	e028      	b.n	800ace4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d106      	bne.n	800aca6 <pbuf_take+0x9e>
 800ac98:	4b1d      	ldr	r3, [pc, #116]	; (800ad10 <pbuf_take+0x108>)
 800ac9a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ac9e:	4921      	ldr	r1, [pc, #132]	; (800ad24 <pbuf_take+0x11c>)
 800aca0:	481d      	ldr	r0, [pc, #116]	; (800ad18 <pbuf_take+0x110>)
 800aca2:	f008 fbb9 	bl	8013418 <iprintf>
    buf_copy_len = total_copy_len;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	895b      	ldrh	r3, [r3, #10]
 800acae:	461a      	mov	r2, r3
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d902      	bls.n	800acbc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	895b      	ldrh	r3, [r3, #10]
 800acba:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	6858      	ldr	r0, [r3, #4]
 800acc0:	68ba      	ldr	r2, [r7, #8]
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	4413      	add	r3, r2
 800acc6:	69ba      	ldr	r2, [r7, #24]
 800acc8:	4619      	mov	r1, r3
 800acca:	f008 fb75 	bl	80133b8 <memcpy>
    total_copy_len -= buf_copy_len;
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	4413      	add	r3, r2
 800acdc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	61fb      	str	r3, [r7, #28]
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1d3      	bne.n	800ac92 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d103      	bne.n	800acf8 <pbuf_take+0xf0>
 800acf0:	88fb      	ldrh	r3, [r7, #6]
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d006      	beq.n	800ad06 <pbuf_take+0xfe>
 800acf8:	4b05      	ldr	r3, [pc, #20]	; (800ad10 <pbuf_take+0x108>)
 800acfa:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800acfe:	490a      	ldr	r1, [pc, #40]	; (800ad28 <pbuf_take+0x120>)
 800ad00:	4805      	ldr	r0, [pc, #20]	; (800ad18 <pbuf_take+0x110>)
 800ad02:	f008 fb89 	bl	8013418 <iprintf>
  return ERR_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3720      	adds	r7, #32
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	08014e54 	.word	0x08014e54
 800ad14:	0801522c 	.word	0x0801522c
 800ad18:	08014eb4 	.word	0x08014eb4
 800ad1c:	08015244 	.word	0x08015244
 800ad20:	08015260 	.word	0x08015260
 800ad24:	08015280 	.word	0x08015280
 800ad28:	08015298 	.word	0x08015298

0800ad2c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	4603      	mov	r3, r0
 800ad34:	603a      	str	r2, [r7, #0]
 800ad36:	71fb      	strb	r3, [r7, #7]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	8919      	ldrh	r1, [r3, #8]
 800ad40:	88ba      	ldrh	r2, [r7, #4]
 800ad42:	79fb      	ldrb	r3, [r7, #7]
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7ff fa0f 	bl	800a168 <pbuf_alloc>
 800ad4a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <pbuf_clone+0x2a>
    return NULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e011      	b.n	800ad7a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f7ff fe11 	bl	800a980 <pbuf_copy>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ad62:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d006      	beq.n	800ad78 <pbuf_clone+0x4c>
 800ad6a:	4b06      	ldr	r3, [pc, #24]	; (800ad84 <pbuf_clone+0x58>)
 800ad6c:	f240 5224 	movw	r2, #1316	; 0x524
 800ad70:	4905      	ldr	r1, [pc, #20]	; (800ad88 <pbuf_clone+0x5c>)
 800ad72:	4806      	ldr	r0, [pc, #24]	; (800ad8c <pbuf_clone+0x60>)
 800ad74:	f008 fb50 	bl	8013418 <iprintf>
  return q;
 800ad78:	68fb      	ldr	r3, [r7, #12]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	08014e54 	.word	0x08014e54
 800ad88:	080152c8 	.word	0x080152c8
 800ad8c:	08014eb4 	.word	0x08014eb4

0800ad90 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ad94:	f008 fb58 	bl	8013448 <rand>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	4b01      	ldr	r3, [pc, #4]	; (800adb0 <tcp_init+0x20>)
 800adaa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800adac:	bf00      	nop
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	2000000e 	.word	0x2000000e

0800adb4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	7d1b      	ldrb	r3, [r3, #20]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d105      	bne.n	800add0 <tcp_free+0x1c>
 800adc4:	4b06      	ldr	r3, [pc, #24]	; (800ade0 <tcp_free+0x2c>)
 800adc6:	22d4      	movs	r2, #212	; 0xd4
 800adc8:	4906      	ldr	r1, [pc, #24]	; (800ade4 <tcp_free+0x30>)
 800adca:	4807      	ldr	r0, [pc, #28]	; (800ade8 <tcp_free+0x34>)
 800adcc:	f008 fb24 	bl	8013418 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	2001      	movs	r0, #1
 800add4:	f7fe fe9a 	bl	8009b0c <memp_free>
}
 800add8:	bf00      	nop
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	08015354 	.word	0x08015354
 800ade4:	08015384 	.word	0x08015384
 800ade8:	08015398 	.word	0x08015398

0800adec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	7d1b      	ldrb	r3, [r3, #20]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d105      	bne.n	800ae08 <tcp_free_listen+0x1c>
 800adfc:	4b06      	ldr	r3, [pc, #24]	; (800ae18 <tcp_free_listen+0x2c>)
 800adfe:	22df      	movs	r2, #223	; 0xdf
 800ae00:	4906      	ldr	r1, [pc, #24]	; (800ae1c <tcp_free_listen+0x30>)
 800ae02:	4807      	ldr	r0, [pc, #28]	; (800ae20 <tcp_free_listen+0x34>)
 800ae04:	f008 fb08 	bl	8013418 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ae08:	6879      	ldr	r1, [r7, #4]
 800ae0a:	2002      	movs	r0, #2
 800ae0c:	f7fe fe7e 	bl	8009b0c <memp_free>
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	08015354 	.word	0x08015354
 800ae1c:	080153c0 	.word	0x080153c0
 800ae20:	08015398 	.word	0x08015398

0800ae24 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ae28:	f000 fea2 	bl	800bb70 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ae2c:	4b07      	ldr	r3, [pc, #28]	; (800ae4c <tcp_tmr+0x28>)
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	3301      	adds	r3, #1
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	4b05      	ldr	r3, [pc, #20]	; (800ae4c <tcp_tmr+0x28>)
 800ae36:	701a      	strb	r2, [r3, #0]
 800ae38:	4b04      	ldr	r3, [pc, #16]	; (800ae4c <tcp_tmr+0x28>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	f003 0301 	and.w	r3, r3, #1
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d001      	beq.n	800ae48 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ae44:	f000 fb54 	bl	800b4f0 <tcp_slowtmr>
  }
}
 800ae48:	bf00      	nop
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	20008e65 	.word	0x20008e65

0800ae50 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d105      	bne.n	800ae6c <tcp_remove_listener+0x1c>
 800ae60:	4b0d      	ldr	r3, [pc, #52]	; (800ae98 <tcp_remove_listener+0x48>)
 800ae62:	22ff      	movs	r2, #255	; 0xff
 800ae64:	490d      	ldr	r1, [pc, #52]	; (800ae9c <tcp_remove_listener+0x4c>)
 800ae66:	480e      	ldr	r0, [pc, #56]	; (800aea0 <tcp_remove_listener+0x50>)
 800ae68:	f008 fad6 	bl	8013418 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	e00a      	b.n	800ae88 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d102      	bne.n	800ae82 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	60fb      	str	r3, [r7, #12]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1f1      	bne.n	800ae72 <tcp_remove_listener+0x22>
    }
  }
}
 800ae8e:	bf00      	nop
 800ae90:	bf00      	nop
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	08015354 	.word	0x08015354
 800ae9c:	080153dc 	.word	0x080153dc
 800aea0:	08015398 	.word	0x08015398

0800aea4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d106      	bne.n	800aec0 <tcp_listen_closed+0x1c>
 800aeb2:	4b14      	ldr	r3, [pc, #80]	; (800af04 <tcp_listen_closed+0x60>)
 800aeb4:	f240 1211 	movw	r2, #273	; 0x111
 800aeb8:	4913      	ldr	r1, [pc, #76]	; (800af08 <tcp_listen_closed+0x64>)
 800aeba:	4814      	ldr	r0, [pc, #80]	; (800af0c <tcp_listen_closed+0x68>)
 800aebc:	f008 faac 	bl	8013418 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	7d1b      	ldrb	r3, [r3, #20]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d006      	beq.n	800aed6 <tcp_listen_closed+0x32>
 800aec8:	4b0e      	ldr	r3, [pc, #56]	; (800af04 <tcp_listen_closed+0x60>)
 800aeca:	f44f 7289 	mov.w	r2, #274	; 0x112
 800aece:	4910      	ldr	r1, [pc, #64]	; (800af10 <tcp_listen_closed+0x6c>)
 800aed0:	480e      	ldr	r0, [pc, #56]	; (800af0c <tcp_listen_closed+0x68>)
 800aed2:	f008 faa1 	bl	8013418 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aed6:	2301      	movs	r3, #1
 800aed8:	60fb      	str	r3, [r7, #12]
 800aeda:	e00b      	b.n	800aef4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800aedc:	4a0d      	ldr	r2, [pc, #52]	; (800af14 <tcp_listen_closed+0x70>)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6879      	ldr	r1, [r7, #4]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7ff ffb1 	bl	800ae50 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	3301      	adds	r3, #1
 800aef2:	60fb      	str	r3, [r7, #12]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	d9f0      	bls.n	800aedc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800aefa:	bf00      	nop
 800aefc:	bf00      	nop
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	08015354 	.word	0x08015354
 800af08:	08015404 	.word	0x08015404
 800af0c:	08015398 	.word	0x08015398
 800af10:	08015410 	.word	0x08015410
 800af14:	08017330 	.word	0x08017330

0800af18 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800af18:	b5b0      	push	{r4, r5, r7, lr}
 800af1a:	b088      	sub	sp, #32
 800af1c:	af04      	add	r7, sp, #16
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d106      	bne.n	800af38 <tcp_close_shutdown+0x20>
 800af2a:	4b63      	ldr	r3, [pc, #396]	; (800b0b8 <tcp_close_shutdown+0x1a0>)
 800af2c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800af30:	4962      	ldr	r1, [pc, #392]	; (800b0bc <tcp_close_shutdown+0x1a4>)
 800af32:	4863      	ldr	r0, [pc, #396]	; (800b0c0 <tcp_close_shutdown+0x1a8>)
 800af34:	f008 fa70 	bl	8013418 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800af38:	78fb      	ldrb	r3, [r7, #3]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d066      	beq.n	800b00c <tcp_close_shutdown+0xf4>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	7d1b      	ldrb	r3, [r3, #20]
 800af42:	2b04      	cmp	r3, #4
 800af44:	d003      	beq.n	800af4e <tcp_close_shutdown+0x36>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	7d1b      	ldrb	r3, [r3, #20]
 800af4a:	2b07      	cmp	r3, #7
 800af4c:	d15e      	bne.n	800b00c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af52:	2b00      	cmp	r3, #0
 800af54:	d104      	bne.n	800af60 <tcp_close_shutdown+0x48>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800af5e:	d055      	beq.n	800b00c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	8b5b      	ldrh	r3, [r3, #26]
 800af64:	f003 0310 	and.w	r3, r3, #16
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d106      	bne.n	800af7a <tcp_close_shutdown+0x62>
 800af6c:	4b52      	ldr	r3, [pc, #328]	; (800b0b8 <tcp_close_shutdown+0x1a0>)
 800af6e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800af72:	4954      	ldr	r1, [pc, #336]	; (800b0c4 <tcp_close_shutdown+0x1ac>)
 800af74:	4852      	ldr	r0, [pc, #328]	; (800b0c0 <tcp_close_shutdown+0x1a8>)
 800af76:	f008 fa4f 	bl	8013418 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800af82:	687d      	ldr	r5, [r7, #4]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3304      	adds	r3, #4
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	8ad2      	ldrh	r2, [r2, #22]
 800af8c:	6879      	ldr	r1, [r7, #4]
 800af8e:	8b09      	ldrh	r1, [r1, #24]
 800af90:	9102      	str	r1, [sp, #8]
 800af92:	9201      	str	r2, [sp, #4]
 800af94:	9300      	str	r3, [sp, #0]
 800af96:	462b      	mov	r3, r5
 800af98:	4622      	mov	r2, r4
 800af9a:	4601      	mov	r1, r0
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f004 fe91 	bl	800fcc4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f001 f8c6 	bl	800c134 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800afa8:	4b47      	ldr	r3, [pc, #284]	; (800b0c8 <tcp_close_shutdown+0x1b0>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d105      	bne.n	800afbe <tcp_close_shutdown+0xa6>
 800afb2:	4b45      	ldr	r3, [pc, #276]	; (800b0c8 <tcp_close_shutdown+0x1b0>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	4a43      	ldr	r2, [pc, #268]	; (800b0c8 <tcp_close_shutdown+0x1b0>)
 800afba:	6013      	str	r3, [r2, #0]
 800afbc:	e013      	b.n	800afe6 <tcp_close_shutdown+0xce>
 800afbe:	4b42      	ldr	r3, [pc, #264]	; (800b0c8 <tcp_close_shutdown+0x1b0>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	60fb      	str	r3, [r7, #12]
 800afc4:	e00c      	b.n	800afe0 <tcp_close_shutdown+0xc8>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d104      	bne.n	800afda <tcp_close_shutdown+0xc2>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68da      	ldr	r2, [r3, #12]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	60da      	str	r2, [r3, #12]
 800afd8:	e005      	b.n	800afe6 <tcp_close_shutdown+0xce>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1ef      	bne.n	800afc6 <tcp_close_shutdown+0xae>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	60da      	str	r2, [r3, #12]
 800afec:	4b37      	ldr	r3, [pc, #220]	; (800b0cc <tcp_close_shutdown+0x1b4>)
 800afee:	2201      	movs	r2, #1
 800aff0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800aff2:	4b37      	ldr	r3, [pc, #220]	; (800b0d0 <tcp_close_shutdown+0x1b8>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d102      	bne.n	800b002 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800affc:	f003 fd5e 	bl	800eabc <tcp_trigger_input_pcb_close>
 800b000:	e002      	b.n	800b008 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7ff fed6 	bl	800adb4 <tcp_free>
      }
      return ERR_OK;
 800b008:	2300      	movs	r3, #0
 800b00a:	e050      	b.n	800b0ae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	7d1b      	ldrb	r3, [r3, #20]
 800b010:	2b02      	cmp	r3, #2
 800b012:	d03b      	beq.n	800b08c <tcp_close_shutdown+0x174>
 800b014:	2b02      	cmp	r3, #2
 800b016:	dc44      	bgt.n	800b0a2 <tcp_close_shutdown+0x18a>
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <tcp_close_shutdown+0x10a>
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d02a      	beq.n	800b076 <tcp_close_shutdown+0x15e>
 800b020:	e03f      	b.n	800b0a2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	8adb      	ldrh	r3, [r3, #22]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d021      	beq.n	800b06e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b02a:	4b2a      	ldr	r3, [pc, #168]	; (800b0d4 <tcp_close_shutdown+0x1bc>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	429a      	cmp	r2, r3
 800b032:	d105      	bne.n	800b040 <tcp_close_shutdown+0x128>
 800b034:	4b27      	ldr	r3, [pc, #156]	; (800b0d4 <tcp_close_shutdown+0x1bc>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	4a26      	ldr	r2, [pc, #152]	; (800b0d4 <tcp_close_shutdown+0x1bc>)
 800b03c:	6013      	str	r3, [r2, #0]
 800b03e:	e013      	b.n	800b068 <tcp_close_shutdown+0x150>
 800b040:	4b24      	ldr	r3, [pc, #144]	; (800b0d4 <tcp_close_shutdown+0x1bc>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	60bb      	str	r3, [r7, #8]
 800b046:	e00c      	b.n	800b062 <tcp_close_shutdown+0x14a>
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d104      	bne.n	800b05c <tcp_close_shutdown+0x144>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	68da      	ldr	r2, [r3, #12]
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	60da      	str	r2, [r3, #12]
 800b05a:	e005      	b.n	800b068 <tcp_close_shutdown+0x150>
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	60bb      	str	r3, [r7, #8]
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1ef      	bne.n	800b048 <tcp_close_shutdown+0x130>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f7ff fea0 	bl	800adb4 <tcp_free>
      break;
 800b074:	e01a      	b.n	800b0ac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7ff ff14 	bl	800aea4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b07c:	6879      	ldr	r1, [r7, #4]
 800b07e:	4816      	ldr	r0, [pc, #88]	; (800b0d8 <tcp_close_shutdown+0x1c0>)
 800b080:	f001 f8a8 	bl	800c1d4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f7ff feb1 	bl	800adec <tcp_free_listen>
      break;
 800b08a:	e00f      	b.n	800b0ac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	480e      	ldr	r0, [pc, #56]	; (800b0c8 <tcp_close_shutdown+0x1b0>)
 800b090:	f001 f8a0 	bl	800c1d4 <tcp_pcb_remove>
 800b094:	4b0d      	ldr	r3, [pc, #52]	; (800b0cc <tcp_close_shutdown+0x1b4>)
 800b096:	2201      	movs	r2, #1
 800b098:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7ff fe8a 	bl	800adb4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b0a0:	e004      	b.n	800b0ac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f81a 	bl	800b0dc <tcp_close_shutdown_fin>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	e000      	b.n	800b0ae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bdb0      	pop	{r4, r5, r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	08015354 	.word	0x08015354
 800b0bc:	08015428 	.word	0x08015428
 800b0c0:	08015398 	.word	0x08015398
 800b0c4:	08015448 	.word	0x08015448
 800b0c8:	20008e5c 	.word	0x20008e5c
 800b0cc:	20008e64 	.word	0x20008e64
 800b0d0:	20008e9c 	.word	0x20008e9c
 800b0d4:	20008e54 	.word	0x20008e54
 800b0d8:	20008e58 	.word	0x20008e58

0800b0dc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d106      	bne.n	800b0f8 <tcp_close_shutdown_fin+0x1c>
 800b0ea:	4b2e      	ldr	r3, [pc, #184]	; (800b1a4 <tcp_close_shutdown_fin+0xc8>)
 800b0ec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b0f0:	492d      	ldr	r1, [pc, #180]	; (800b1a8 <tcp_close_shutdown_fin+0xcc>)
 800b0f2:	482e      	ldr	r0, [pc, #184]	; (800b1ac <tcp_close_shutdown_fin+0xd0>)
 800b0f4:	f008 f990 	bl	8013418 <iprintf>

  switch (pcb->state) {
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	7d1b      	ldrb	r3, [r3, #20]
 800b0fc:	2b07      	cmp	r3, #7
 800b0fe:	d020      	beq.n	800b142 <tcp_close_shutdown_fin+0x66>
 800b100:	2b07      	cmp	r3, #7
 800b102:	dc2b      	bgt.n	800b15c <tcp_close_shutdown_fin+0x80>
 800b104:	2b03      	cmp	r3, #3
 800b106:	d002      	beq.n	800b10e <tcp_close_shutdown_fin+0x32>
 800b108:	2b04      	cmp	r3, #4
 800b10a:	d00d      	beq.n	800b128 <tcp_close_shutdown_fin+0x4c>
 800b10c:	e026      	b.n	800b15c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f003 fee6 	bl	800eee0 <tcp_send_fin>
 800b114:	4603      	mov	r3, r0
 800b116:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d11f      	bne.n	800b160 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2205      	movs	r2, #5
 800b124:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b126:	e01b      	b.n	800b160 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f003 fed9 	bl	800eee0 <tcp_send_fin>
 800b12e:	4603      	mov	r3, r0
 800b130:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d114      	bne.n	800b164 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2205      	movs	r2, #5
 800b13e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b140:	e010      	b.n	800b164 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f003 fecc 	bl	800eee0 <tcp_send_fin>
 800b148:	4603      	mov	r3, r0
 800b14a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b14c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d109      	bne.n	800b168 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2209      	movs	r2, #9
 800b158:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b15a:	e005      	b.n	800b168 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	e01c      	b.n	800b19a <tcp_close_shutdown_fin+0xbe>
      break;
 800b160:	bf00      	nop
 800b162:	e002      	b.n	800b16a <tcp_close_shutdown_fin+0x8e>
      break;
 800b164:	bf00      	nop
 800b166:	e000      	b.n	800b16a <tcp_close_shutdown_fin+0x8e>
      break;
 800b168:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b16a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d103      	bne.n	800b17a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f003 fff2 	bl	800f15c <tcp_output>
 800b178:	e00d      	b.n	800b196 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b17a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b182:	d108      	bne.n	800b196 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	8b5b      	ldrh	r3, [r3, #26]
 800b188:	f043 0308 	orr.w	r3, r3, #8
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	e001      	b.n	800b19a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b196:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	08015354 	.word	0x08015354
 800b1a8:	08015404 	.word	0x08015404
 800b1ac:	08015398 	.word	0x08015398

0800b1b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d109      	bne.n	800b1d2 <tcp_close+0x22>
 800b1be:	4b0f      	ldr	r3, [pc, #60]	; (800b1fc <tcp_close+0x4c>)
 800b1c0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b1c4:	490e      	ldr	r1, [pc, #56]	; (800b200 <tcp_close+0x50>)
 800b1c6:	480f      	ldr	r0, [pc, #60]	; (800b204 <tcp_close+0x54>)
 800b1c8:	f008 f926 	bl	8013418 <iprintf>
 800b1cc:	f06f 030f 	mvn.w	r3, #15
 800b1d0:	e00f      	b.n	800b1f2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	7d1b      	ldrb	r3, [r3, #20]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d006      	beq.n	800b1e8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	8b5b      	ldrh	r3, [r3, #26]
 800b1de:	f043 0310 	orr.w	r3, r3, #16
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff fe94 	bl	800af18 <tcp_close_shutdown>
 800b1f0:	4603      	mov	r3, r0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	08015354 	.word	0x08015354
 800b200:	08015464 	.word	0x08015464
 800b204:	08015398 	.word	0x08015398

0800b208 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08e      	sub	sp, #56	; 0x38
 800b20c:	af04      	add	r7, sp, #16
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d107      	bne.n	800b228 <tcp_abandon+0x20>
 800b218:	4b52      	ldr	r3, [pc, #328]	; (800b364 <tcp_abandon+0x15c>)
 800b21a:	f240 223d 	movw	r2, #573	; 0x23d
 800b21e:	4952      	ldr	r1, [pc, #328]	; (800b368 <tcp_abandon+0x160>)
 800b220:	4852      	ldr	r0, [pc, #328]	; (800b36c <tcp_abandon+0x164>)
 800b222:	f008 f8f9 	bl	8013418 <iprintf>
 800b226:	e099      	b.n	800b35c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	7d1b      	ldrb	r3, [r3, #20]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d106      	bne.n	800b23e <tcp_abandon+0x36>
 800b230:	4b4c      	ldr	r3, [pc, #304]	; (800b364 <tcp_abandon+0x15c>)
 800b232:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b236:	494e      	ldr	r1, [pc, #312]	; (800b370 <tcp_abandon+0x168>)
 800b238:	484c      	ldr	r0, [pc, #304]	; (800b36c <tcp_abandon+0x164>)
 800b23a:	f008 f8ed 	bl	8013418 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	7d1b      	ldrb	r3, [r3, #20]
 800b242:	2b0a      	cmp	r3, #10
 800b244:	d107      	bne.n	800b256 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	484a      	ldr	r0, [pc, #296]	; (800b374 <tcp_abandon+0x16c>)
 800b24a:	f000 ffc3 	bl	800c1d4 <tcp_pcb_remove>
    tcp_free(pcb);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7ff fdb0 	bl	800adb4 <tcp_free>
 800b254:	e082      	b.n	800b35c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b256:	2300      	movs	r3, #0
 800b258:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b25a:	2300      	movs	r3, #0
 800b25c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b262:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b268:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b270:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	7d1b      	ldrb	r3, [r3, #20]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d126      	bne.n	800b2ce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	8adb      	ldrh	r3, [r3, #22]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d02e      	beq.n	800b2e6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b288:	4b3b      	ldr	r3, [pc, #236]	; (800b378 <tcp_abandon+0x170>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d105      	bne.n	800b29e <tcp_abandon+0x96>
 800b292:	4b39      	ldr	r3, [pc, #228]	; (800b378 <tcp_abandon+0x170>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	4a37      	ldr	r2, [pc, #220]	; (800b378 <tcp_abandon+0x170>)
 800b29a:	6013      	str	r3, [r2, #0]
 800b29c:	e013      	b.n	800b2c6 <tcp_abandon+0xbe>
 800b29e:	4b36      	ldr	r3, [pc, #216]	; (800b378 <tcp_abandon+0x170>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	61fb      	str	r3, [r7, #28]
 800b2a4:	e00c      	b.n	800b2c0 <tcp_abandon+0xb8>
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d104      	bne.n	800b2ba <tcp_abandon+0xb2>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	68da      	ldr	r2, [r3, #12]
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	60da      	str	r2, [r3, #12]
 800b2b8:	e005      	b.n	800b2c6 <tcp_abandon+0xbe>
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	61fb      	str	r3, [r7, #28]
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1ef      	bne.n	800b2a6 <tcp_abandon+0x9e>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	60da      	str	r2, [r3, #12]
 800b2cc:	e00b      	b.n	800b2e6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	8adb      	ldrh	r3, [r3, #22]
 800b2d6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b2d8:	6879      	ldr	r1, [r7, #4]
 800b2da:	4828      	ldr	r0, [pc, #160]	; (800b37c <tcp_abandon+0x174>)
 800b2dc:	f000 ff7a 	bl	800c1d4 <tcp_pcb_remove>
 800b2e0:	4b27      	ldr	r3, [pc, #156]	; (800b380 <tcp_abandon+0x178>)
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d004      	beq.n	800b2f8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 fd1c 	bl	800bd30 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d004      	beq.n	800b30a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b304:	4618      	mov	r0, r3
 800b306:	f000 fd13 	bl	800bd30 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d004      	beq.n	800b31c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b316:	4618      	mov	r0, r3
 800b318:	f000 fd0a 	bl	800bd30 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00e      	beq.n	800b340 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b322:	6879      	ldr	r1, [r7, #4]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	3304      	adds	r3, #4
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	8b12      	ldrh	r2, [r2, #24]
 800b32c:	9202      	str	r2, [sp, #8]
 800b32e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b330:	9201      	str	r2, [sp, #4]
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	460b      	mov	r3, r1
 800b336:	697a      	ldr	r2, [r7, #20]
 800b338:	69b9      	ldr	r1, [r7, #24]
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f004 fcc2 	bl	800fcc4 <tcp_rst>
    }
    last_state = pcb->state;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	7d1b      	ldrb	r3, [r3, #20]
 800b344:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff fd34 	bl	800adb4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d004      	beq.n	800b35c <tcp_abandon+0x154>
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	f06f 010c 	mvn.w	r1, #12
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	4798      	blx	r3
  }
}
 800b35c:	3728      	adds	r7, #40	; 0x28
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	08015354 	.word	0x08015354
 800b368:	08015498 	.word	0x08015498
 800b36c:	08015398 	.word	0x08015398
 800b370:	080154b4 	.word	0x080154b4
 800b374:	20008e60 	.word	0x20008e60
 800b378:	20008e54 	.word	0x20008e54
 800b37c:	20008e5c 	.word	0x20008e5c
 800b380:	20008e64 	.word	0x20008e64

0800b384 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b38c:	2101      	movs	r1, #1
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f7ff ff3a 	bl	800b208 <tcp_abandon>
}
 800b394:	bf00      	nop
 800b396:	3708      	adds	r7, #8
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d106      	bne.n	800b3b8 <tcp_update_rcv_ann_wnd+0x1c>
 800b3aa:	4b25      	ldr	r3, [pc, #148]	; (800b440 <tcp_update_rcv_ann_wnd+0xa4>)
 800b3ac:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b3b0:	4924      	ldr	r1, [pc, #144]	; (800b444 <tcp_update_rcv_ann_wnd+0xa8>)
 800b3b2:	4825      	ldr	r0, [pc, #148]	; (800b448 <tcp_update_rcv_ann_wnd+0xac>)
 800b3b4:	f008 f830 	bl	8013418 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b3c0:	4413      	add	r3, r2
 800b3c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b3cc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b3d0:	bf28      	it	cs
 800b3d2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b3d6:	b292      	uxth	r2, r2
 800b3d8:	4413      	add	r3, r2
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	db08      	blt.n	800b3f4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	e020      	b.n	800b436 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	dd03      	ble.n	800b40a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b408:	e014      	b.n	800b434 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b41c:	d306      	bcc.n	800b42c <tcp_update_rcv_ann_wnd+0x90>
 800b41e:	4b08      	ldr	r3, [pc, #32]	; (800b440 <tcp_update_rcv_ann_wnd+0xa4>)
 800b420:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b424:	4909      	ldr	r1, [pc, #36]	; (800b44c <tcp_update_rcv_ann_wnd+0xb0>)
 800b426:	4808      	ldr	r0, [pc, #32]	; (800b448 <tcp_update_rcv_ann_wnd+0xac>)
 800b428:	f007 fff6 	bl	8013418 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	b29a      	uxth	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b434:	2300      	movs	r3, #0
  }
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	08015354 	.word	0x08015354
 800b444:	080155b0 	.word	0x080155b0
 800b448:	08015398 	.word	0x08015398
 800b44c:	080155d4 	.word	0x080155d4

0800b450 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	460b      	mov	r3, r1
 800b45a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d107      	bne.n	800b472 <tcp_recved+0x22>
 800b462:	4b1f      	ldr	r3, [pc, #124]	; (800b4e0 <tcp_recved+0x90>)
 800b464:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b468:	491e      	ldr	r1, [pc, #120]	; (800b4e4 <tcp_recved+0x94>)
 800b46a:	481f      	ldr	r0, [pc, #124]	; (800b4e8 <tcp_recved+0x98>)
 800b46c:	f007 ffd4 	bl	8013418 <iprintf>
 800b470:	e032      	b.n	800b4d8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	7d1b      	ldrb	r3, [r3, #20]
 800b476:	2b01      	cmp	r3, #1
 800b478:	d106      	bne.n	800b488 <tcp_recved+0x38>
 800b47a:	4b19      	ldr	r3, [pc, #100]	; (800b4e0 <tcp_recved+0x90>)
 800b47c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b480:	491a      	ldr	r1, [pc, #104]	; (800b4ec <tcp_recved+0x9c>)
 800b482:	4819      	ldr	r0, [pc, #100]	; (800b4e8 <tcp_recved+0x98>)
 800b484:	f007 ffc8 	bl	8013418 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b48c:	887b      	ldrh	r3, [r7, #2]
 800b48e:	4413      	add	r3, r2
 800b490:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b492:	89fb      	ldrh	r3, [r7, #14]
 800b494:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b498:	d804      	bhi.n	800b4a4 <tcp_recved+0x54>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b49e:	89fa      	ldrh	r2, [r7, #14]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d204      	bcs.n	800b4ae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b4aa:	851a      	strh	r2, [r3, #40]	; 0x28
 800b4ac:	e002      	b.n	800b4b4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	89fa      	ldrh	r2, [r7, #14]
 800b4b2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f7ff ff71 	bl	800b39c <tcp_update_rcv_ann_wnd>
 800b4ba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b4c2:	d309      	bcc.n	800b4d8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	8b5b      	ldrh	r3, [r3, #26]
 800b4c8:	f043 0302 	orr.w	r3, r3, #2
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f003 fe42 	bl	800f15c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	08015354 	.word	0x08015354
 800b4e4:	080155f0 	.word	0x080155f0
 800b4e8:	08015398 	.word	0x08015398
 800b4ec:	08015608 	.word	0x08015608

0800b4f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b4f0:	b5b0      	push	{r4, r5, r7, lr}
 800b4f2:	b090      	sub	sp, #64	; 0x40
 800b4f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b4fc:	4b94      	ldr	r3, [pc, #592]	; (800b750 <tcp_slowtmr+0x260>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3301      	adds	r3, #1
 800b502:	4a93      	ldr	r2, [pc, #588]	; (800b750 <tcp_slowtmr+0x260>)
 800b504:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b506:	4b93      	ldr	r3, [pc, #588]	; (800b754 <tcp_slowtmr+0x264>)
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	3301      	adds	r3, #1
 800b50c:	b2da      	uxtb	r2, r3
 800b50e:	4b91      	ldr	r3, [pc, #580]	; (800b754 <tcp_slowtmr+0x264>)
 800b510:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b512:	2300      	movs	r3, #0
 800b514:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b516:	4b90      	ldr	r3, [pc, #576]	; (800b758 <tcp_slowtmr+0x268>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b51c:	e29f      	b.n	800ba5e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b520:	7d1b      	ldrb	r3, [r3, #20]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d106      	bne.n	800b534 <tcp_slowtmr+0x44>
 800b526:	4b8d      	ldr	r3, [pc, #564]	; (800b75c <tcp_slowtmr+0x26c>)
 800b528:	f240 42be 	movw	r2, #1214	; 0x4be
 800b52c:	498c      	ldr	r1, [pc, #560]	; (800b760 <tcp_slowtmr+0x270>)
 800b52e:	488d      	ldr	r0, [pc, #564]	; (800b764 <tcp_slowtmr+0x274>)
 800b530:	f007 ff72 	bl	8013418 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b536:	7d1b      	ldrb	r3, [r3, #20]
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d106      	bne.n	800b54a <tcp_slowtmr+0x5a>
 800b53c:	4b87      	ldr	r3, [pc, #540]	; (800b75c <tcp_slowtmr+0x26c>)
 800b53e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b542:	4989      	ldr	r1, [pc, #548]	; (800b768 <tcp_slowtmr+0x278>)
 800b544:	4887      	ldr	r0, [pc, #540]	; (800b764 <tcp_slowtmr+0x274>)
 800b546:	f007 ff67 	bl	8013418 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54c:	7d1b      	ldrb	r3, [r3, #20]
 800b54e:	2b0a      	cmp	r3, #10
 800b550:	d106      	bne.n	800b560 <tcp_slowtmr+0x70>
 800b552:	4b82      	ldr	r3, [pc, #520]	; (800b75c <tcp_slowtmr+0x26c>)
 800b554:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b558:	4984      	ldr	r1, [pc, #528]	; (800b76c <tcp_slowtmr+0x27c>)
 800b55a:	4882      	ldr	r0, [pc, #520]	; (800b764 <tcp_slowtmr+0x274>)
 800b55c:	f007 ff5c 	bl	8013418 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b562:	7f9a      	ldrb	r2, [r3, #30]
 800b564:	4b7b      	ldr	r3, [pc, #492]	; (800b754 <tcp_slowtmr+0x264>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d105      	bne.n	800b578 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b576:	e272      	b.n	800ba5e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b578:	4b76      	ldr	r3, [pc, #472]	; (800b754 <tcp_slowtmr+0x264>)
 800b57a:	781a      	ldrb	r2, [r3, #0]
 800b57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b580:	2300      	movs	r3, #0
 800b582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b586:	2300      	movs	r3, #0
 800b588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58e:	7d1b      	ldrb	r3, [r3, #20]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d10a      	bne.n	800b5aa <tcp_slowtmr+0xba>
 800b594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b59a:	2b05      	cmp	r3, #5
 800b59c:	d905      	bls.n	800b5aa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b59e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5a8:	e11e      	b.n	800b7e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b5b0:	2b0b      	cmp	r3, #11
 800b5b2:	d905      	bls.n	800b5c0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5be:	e113      	b.n	800b7e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d075      	beq.n	800b6b6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d006      	beq.n	800b5e0 <tcp_slowtmr+0xf0>
 800b5d2:	4b62      	ldr	r3, [pc, #392]	; (800b75c <tcp_slowtmr+0x26c>)
 800b5d4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b5d8:	4965      	ldr	r1, [pc, #404]	; (800b770 <tcp_slowtmr+0x280>)
 800b5da:	4862      	ldr	r0, [pc, #392]	; (800b764 <tcp_slowtmr+0x274>)
 800b5dc:	f007 ff1c 	bl	8013418 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d106      	bne.n	800b5f6 <tcp_slowtmr+0x106>
 800b5e8:	4b5c      	ldr	r3, [pc, #368]	; (800b75c <tcp_slowtmr+0x26c>)
 800b5ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b5ee:	4961      	ldr	r1, [pc, #388]	; (800b774 <tcp_slowtmr+0x284>)
 800b5f0:	485c      	ldr	r0, [pc, #368]	; (800b764 <tcp_slowtmr+0x274>)
 800b5f2:	f007 ff11 	bl	8013418 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b5fc:	2b0b      	cmp	r3, #11
 800b5fe:	d905      	bls.n	800b60c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b604:	3301      	adds	r3, #1
 800b606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b60a:	e0ed      	b.n	800b7e8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b612:	3b01      	subs	r3, #1
 800b614:	4a58      	ldr	r2, [pc, #352]	; (800b778 <tcp_slowtmr+0x288>)
 800b616:	5cd3      	ldrb	r3, [r2, r3]
 800b618:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b620:	7c7a      	ldrb	r2, [r7, #17]
 800b622:	429a      	cmp	r2, r3
 800b624:	d907      	bls.n	800b636 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b628:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b62c:	3301      	adds	r3, #1
 800b62e:	b2da      	uxtb	r2, r3
 800b630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b632:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b638:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b63c:	7c7a      	ldrb	r2, [r7, #17]
 800b63e:	429a      	cmp	r2, r3
 800b640:	f200 80d2 	bhi.w	800b7e8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b644:	2301      	movs	r3, #1
 800b646:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d108      	bne.n	800b664 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b654:	f004 fc2a 	bl	800feac <tcp_zero_window_probe>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d014      	beq.n	800b688 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b65e:	2300      	movs	r3, #0
 800b660:	623b      	str	r3, [r7, #32]
 800b662:	e011      	b.n	800b688 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b66a:	4619      	mov	r1, r3
 800b66c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b66e:	f003 faef 	bl	800ec50 <tcp_split_unsent_seg>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d107      	bne.n	800b688 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b67a:	f003 fd6f 	bl	800f15c <tcp_output>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b688:	6a3b      	ldr	r3, [r7, #32]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 80ac 	beq.w	800b7e8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b69e:	2b06      	cmp	r3, #6
 800b6a0:	f200 80a2 	bhi.w	800b7e8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b6b4:	e098      	b.n	800b7e8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	db0f      	blt.n	800b6e0 <tcp_slowtmr+0x1f0>
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b6c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d008      	beq.n	800b6e0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	b21a      	sxth	r2, r3
 800b6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6de:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	db7b      	blt.n	800b7e8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b6f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b6f2:	f004 f825 	bl	800f740 <tcp_rexmit_rto_prepare>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d007      	beq.n	800b70c <tcp_slowtmr+0x21c>
 800b6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b700:	2b00      	cmp	r3, #0
 800b702:	d171      	bne.n	800b7e8 <tcp_slowtmr+0x2f8>
 800b704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d06d      	beq.n	800b7e8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70e:	7d1b      	ldrb	r3, [r3, #20]
 800b710:	2b02      	cmp	r3, #2
 800b712:	d03a      	beq.n	800b78a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b716:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b71a:	2b0c      	cmp	r3, #12
 800b71c:	bf28      	it	cs
 800b71e:	230c      	movcs	r3, #12
 800b720:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b724:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b728:	10db      	asrs	r3, r3, #3
 800b72a:	b21b      	sxth	r3, r3
 800b72c:	461a      	mov	r2, r3
 800b72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b730:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b734:	4413      	add	r3, r2
 800b736:	7efa      	ldrb	r2, [r7, #27]
 800b738:	4910      	ldr	r1, [pc, #64]	; (800b77c <tcp_slowtmr+0x28c>)
 800b73a:	5c8a      	ldrb	r2, [r1, r2]
 800b73c:	4093      	lsls	r3, r2
 800b73e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b746:	4293      	cmp	r3, r2
 800b748:	dc1a      	bgt.n	800b780 <tcp_slowtmr+0x290>
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	b21a      	sxth	r2, r3
 800b74e:	e019      	b.n	800b784 <tcp_slowtmr+0x294>
 800b750:	20008e50 	.word	0x20008e50
 800b754:	20008e66 	.word	0x20008e66
 800b758:	20008e5c 	.word	0x20008e5c
 800b75c:	08015354 	.word	0x08015354
 800b760:	08015698 	.word	0x08015698
 800b764:	08015398 	.word	0x08015398
 800b768:	080156c4 	.word	0x080156c4
 800b76c:	080156f0 	.word	0x080156f0
 800b770:	08015720 	.word	0x08015720
 800b774:	08015754 	.word	0x08015754
 800b778:	08017328 	.word	0x08017328
 800b77c:	08017318 	.word	0x08017318
 800b780:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b786:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78c:	2200      	movs	r2, #0
 800b78e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b792:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b798:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b79c:	4293      	cmp	r3, r2
 800b79e:	bf28      	it	cs
 800b7a0:	4613      	movcs	r3, r2
 800b7a2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b7a4:	8a7b      	ldrh	r3, [r7, #18]
 800b7a6:	085b      	lsrs	r3, r3, #1
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7ba:	005b      	lsls	r3, r3, #1
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d206      	bcs.n	800b7d0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7c6:	005b      	lsls	r3, r3, #1
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b7e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7e4:	f004 f81c 	bl	800f820 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ea:	7d1b      	ldrb	r3, [r3, #20]
 800b7ec:	2b06      	cmp	r3, #6
 800b7ee:	d111      	bne.n	800b814 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f2:	8b5b      	ldrh	r3, [r3, #26]
 800b7f4:	f003 0310 	and.w	r3, r3, #16
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00b      	beq.n	800b814 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7fc:	4b9d      	ldr	r3, [pc, #628]	; (800ba74 <tcp_slowtmr+0x584>)
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b802:	6a1b      	ldr	r3, [r3, #32]
 800b804:	1ad3      	subs	r3, r2, r3
 800b806:	2b28      	cmp	r3, #40	; 0x28
 800b808:	d904      	bls.n	800b814 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b80a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b80e:	3301      	adds	r3, #1
 800b810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b816:	7a5b      	ldrb	r3, [r3, #9]
 800b818:	f003 0308 	and.w	r3, r3, #8
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d04c      	beq.n	800b8ba <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b822:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b824:	2b04      	cmp	r3, #4
 800b826:	d003      	beq.n	800b830 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b82c:	2b07      	cmp	r3, #7
 800b82e:	d144      	bne.n	800b8ba <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b830:	4b90      	ldr	r3, [pc, #576]	; (800ba74 <tcp_slowtmr+0x584>)
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b836:	6a1b      	ldr	r3, [r3, #32]
 800b838:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b840:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b844:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b848:	498b      	ldr	r1, [pc, #556]	; (800ba78 <tcp_slowtmr+0x588>)
 800b84a:	fba1 1303 	umull	r1, r3, r1, r3
 800b84e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b850:	429a      	cmp	r2, r3
 800b852:	d90a      	bls.n	800b86a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b858:	3301      	adds	r3, #1
 800b85a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b85e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b862:	3301      	adds	r3, #1
 800b864:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b868:	e027      	b.n	800b8ba <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b86a:	4b82      	ldr	r3, [pc, #520]	; (800ba74 <tcp_slowtmr+0x584>)
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b880:	4618      	mov	r0, r3
 800b882:	4b7e      	ldr	r3, [pc, #504]	; (800ba7c <tcp_slowtmr+0x58c>)
 800b884:	fb00 f303 	mul.w	r3, r0, r3
 800b888:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b88a:	497b      	ldr	r1, [pc, #492]	; (800ba78 <tcp_slowtmr+0x588>)
 800b88c:	fba1 1303 	umull	r1, r3, r1, r3
 800b890:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b892:	429a      	cmp	r2, r3
 800b894:	d911      	bls.n	800b8ba <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b898:	f004 fac8 	bl	800fe2c <tcp_keepalive>
 800b89c:	4603      	mov	r3, r0
 800b89e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b8a2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d107      	bne.n	800b8ba <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d011      	beq.n	800b8e6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b8c2:	4b6c      	ldr	r3, [pc, #432]	; (800ba74 <tcp_slowtmr+0x584>)
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c8:	6a1b      	ldr	r3, [r3, #32]
 800b8ca:	1ad2      	subs	r2, r2, r3
 800b8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	005b      	lsls	r3, r3, #1
 800b8d8:	440b      	add	r3, r1
 800b8da:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d302      	bcc.n	800b8e6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b8e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8e2:	f000 fddb 	bl	800c49c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e8:	7d1b      	ldrb	r3, [r3, #20]
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d10b      	bne.n	800b906 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b8ee:	4b61      	ldr	r3, [pc, #388]	; (800ba74 <tcp_slowtmr+0x584>)
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	2b28      	cmp	r3, #40	; 0x28
 800b8fa:	d904      	bls.n	800b906 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b900:	3301      	adds	r3, #1
 800b902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b908:	7d1b      	ldrb	r3, [r3, #20]
 800b90a:	2b09      	cmp	r3, #9
 800b90c:	d10b      	bne.n	800b926 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b90e:	4b59      	ldr	r3, [pc, #356]	; (800ba74 <tcp_slowtmr+0x584>)
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	2bf0      	cmp	r3, #240	; 0xf0
 800b91a:	d904      	bls.n	800b926 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b920:	3301      	adds	r3, #1
 800b922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d060      	beq.n	800b9f0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b934:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b936:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b938:	f000 fbfc 	bl	800c134 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d010      	beq.n	800b964 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b942:	4b4f      	ldr	r3, [pc, #316]	; (800ba80 <tcp_slowtmr+0x590>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b948:	429a      	cmp	r2, r3
 800b94a:	d106      	bne.n	800b95a <tcp_slowtmr+0x46a>
 800b94c:	4b4d      	ldr	r3, [pc, #308]	; (800ba84 <tcp_slowtmr+0x594>)
 800b94e:	f240 526d 	movw	r2, #1389	; 0x56d
 800b952:	494d      	ldr	r1, [pc, #308]	; (800ba88 <tcp_slowtmr+0x598>)
 800b954:	484d      	ldr	r0, [pc, #308]	; (800ba8c <tcp_slowtmr+0x59c>)
 800b956:	f007 fd5f 	bl	8013418 <iprintf>
        prev->next = pcb->next;
 800b95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95c:	68da      	ldr	r2, [r3, #12]
 800b95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b960:	60da      	str	r2, [r3, #12]
 800b962:	e00f      	b.n	800b984 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b964:	4b46      	ldr	r3, [pc, #280]	; (800ba80 <tcp_slowtmr+0x590>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d006      	beq.n	800b97c <tcp_slowtmr+0x48c>
 800b96e:	4b45      	ldr	r3, [pc, #276]	; (800ba84 <tcp_slowtmr+0x594>)
 800b970:	f240 5271 	movw	r2, #1393	; 0x571
 800b974:	4946      	ldr	r1, [pc, #280]	; (800ba90 <tcp_slowtmr+0x5a0>)
 800b976:	4845      	ldr	r0, [pc, #276]	; (800ba8c <tcp_slowtmr+0x59c>)
 800b978:	f007 fd4e 	bl	8013418 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	4a3f      	ldr	r2, [pc, #252]	; (800ba80 <tcp_slowtmr+0x590>)
 800b982:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b984:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d013      	beq.n	800b9b4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b992:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b994:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b998:	3304      	adds	r3, #4
 800b99a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b99c:	8ad2      	ldrh	r2, [r2, #22]
 800b99e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9a0:	8b09      	ldrh	r1, [r1, #24]
 800b9a2:	9102      	str	r1, [sp, #8]
 800b9a4:	9201      	str	r2, [sp, #4]
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	462b      	mov	r3, r5
 800b9aa:	4622      	mov	r2, r4
 800b9ac:	4601      	mov	r1, r0
 800b9ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9b0:	f004 f988 	bl	800fcc4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9bc:	7d1b      	ldrb	r3, [r3, #20]
 800b9be:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b9ca:	6838      	ldr	r0, [r7, #0]
 800b9cc:	f7ff f9f2 	bl	800adb4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b9d0:	4b30      	ldr	r3, [pc, #192]	; (800ba94 <tcp_slowtmr+0x5a4>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d004      	beq.n	800b9e6 <tcp_slowtmr+0x4f6>
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f06f 010c 	mvn.w	r1, #12
 800b9e2:	68b8      	ldr	r0, [r7, #8]
 800b9e4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b9e6:	4b2b      	ldr	r3, [pc, #172]	; (800ba94 <tcp_slowtmr+0x5a4>)
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d037      	beq.n	800ba5e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b9ee:	e590      	b.n	800b512 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fc:	7f1b      	ldrb	r3, [r3, #28]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ba06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba08:	7f1a      	ldrb	r2, [r3, #28]
 800ba0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0c:	7f5b      	ldrb	r3, [r3, #29]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d325      	bcc.n	800ba5e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	2200      	movs	r2, #0
 800ba16:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ba18:	4b1e      	ldr	r3, [pc, #120]	; (800ba94 <tcp_slowtmr+0x5a4>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ba1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00b      	beq.n	800ba40 <tcp_slowtmr+0x550>
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba30:	6912      	ldr	r2, [r2, #16]
 800ba32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba34:	4610      	mov	r0, r2
 800ba36:	4798      	blx	r3
 800ba38:	4603      	mov	r3, r0
 800ba3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ba3e:	e002      	b.n	800ba46 <tcp_slowtmr+0x556>
 800ba40:	2300      	movs	r3, #0
 800ba42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ba46:	4b13      	ldr	r3, [pc, #76]	; (800ba94 <tcp_slowtmr+0x5a4>)
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d000      	beq.n	800ba50 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ba4e:	e560      	b.n	800b512 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ba50:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d102      	bne.n	800ba5e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ba58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba5a:	f003 fb7f 	bl	800f15c <tcp_output>
  while (pcb != NULL) {
 800ba5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f47f ad5c 	bne.w	800b51e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ba66:	2300      	movs	r3, #0
 800ba68:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ba6a:	4b0b      	ldr	r3, [pc, #44]	; (800ba98 <tcp_slowtmr+0x5a8>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ba70:	e067      	b.n	800bb42 <tcp_slowtmr+0x652>
 800ba72:	bf00      	nop
 800ba74:	20008e50 	.word	0x20008e50
 800ba78:	10624dd3 	.word	0x10624dd3
 800ba7c:	000124f8 	.word	0x000124f8
 800ba80:	20008e5c 	.word	0x20008e5c
 800ba84:	08015354 	.word	0x08015354
 800ba88:	0801578c 	.word	0x0801578c
 800ba8c:	08015398 	.word	0x08015398
 800ba90:	080157b8 	.word	0x080157b8
 800ba94:	20008e64 	.word	0x20008e64
 800ba98:	20008e60 	.word	0x20008e60
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ba9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9e:	7d1b      	ldrb	r3, [r3, #20]
 800baa0:	2b0a      	cmp	r3, #10
 800baa2:	d006      	beq.n	800bab2 <tcp_slowtmr+0x5c2>
 800baa4:	4b2b      	ldr	r3, [pc, #172]	; (800bb54 <tcp_slowtmr+0x664>)
 800baa6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800baaa:	492b      	ldr	r1, [pc, #172]	; (800bb58 <tcp_slowtmr+0x668>)
 800baac:	482b      	ldr	r0, [pc, #172]	; (800bb5c <tcp_slowtmr+0x66c>)
 800baae:	f007 fcb3 	bl	8013418 <iprintf>
    pcb_remove = 0;
 800bab2:	2300      	movs	r3, #0
 800bab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bab8:	4b29      	ldr	r3, [pc, #164]	; (800bb60 <tcp_slowtmr+0x670>)
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	6a1b      	ldr	r3, [r3, #32]
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	2bf0      	cmp	r3, #240	; 0xf0
 800bac4:	d904      	bls.n	800bad0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800bac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baca:	3301      	adds	r3, #1
 800bacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d02f      	beq.n	800bb38 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800bad8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bada:	f000 fb2b 	bl	800c134 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d010      	beq.n	800bb06 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800bae4:	4b1f      	ldr	r3, [pc, #124]	; (800bb64 <tcp_slowtmr+0x674>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baea:	429a      	cmp	r2, r3
 800baec:	d106      	bne.n	800bafc <tcp_slowtmr+0x60c>
 800baee:	4b19      	ldr	r3, [pc, #100]	; (800bb54 <tcp_slowtmr+0x664>)
 800baf0:	f240 52af 	movw	r2, #1455	; 0x5af
 800baf4:	491c      	ldr	r1, [pc, #112]	; (800bb68 <tcp_slowtmr+0x678>)
 800baf6:	4819      	ldr	r0, [pc, #100]	; (800bb5c <tcp_slowtmr+0x66c>)
 800baf8:	f007 fc8e 	bl	8013418 <iprintf>
        prev->next = pcb->next;
 800bafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafe:	68da      	ldr	r2, [r3, #12]
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	60da      	str	r2, [r3, #12]
 800bb04:	e00f      	b.n	800bb26 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800bb06:	4b17      	ldr	r3, [pc, #92]	; (800bb64 <tcp_slowtmr+0x674>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d006      	beq.n	800bb1e <tcp_slowtmr+0x62e>
 800bb10:	4b10      	ldr	r3, [pc, #64]	; (800bb54 <tcp_slowtmr+0x664>)
 800bb12:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800bb16:	4915      	ldr	r1, [pc, #84]	; (800bb6c <tcp_slowtmr+0x67c>)
 800bb18:	4810      	ldr	r0, [pc, #64]	; (800bb5c <tcp_slowtmr+0x66c>)
 800bb1a:	f007 fc7d 	bl	8013418 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800bb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	4a10      	ldr	r2, [pc, #64]	; (800bb64 <tcp_slowtmr+0x674>)
 800bb24:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800bb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb28:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800bb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bb30:	69f8      	ldr	r0, [r7, #28]
 800bb32:	f7ff f93f 	bl	800adb4 <tcp_free>
 800bb36:	e004      	b.n	800bb42 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800bb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d1a9      	bne.n	800ba9c <tcp_slowtmr+0x5ac>
    }
  }
}
 800bb48:	bf00      	nop
 800bb4a:	bf00      	nop
 800bb4c:	3730      	adds	r7, #48	; 0x30
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bdb0      	pop	{r4, r5, r7, pc}
 800bb52:	bf00      	nop
 800bb54:	08015354 	.word	0x08015354
 800bb58:	080157e4 	.word	0x080157e4
 800bb5c:	08015398 	.word	0x08015398
 800bb60:	20008e50 	.word	0x20008e50
 800bb64:	20008e60 	.word	0x20008e60
 800bb68:	08015814 	.word	0x08015814
 800bb6c:	0801583c 	.word	0x0801583c

0800bb70 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800bb76:	4b2d      	ldr	r3, [pc, #180]	; (800bc2c <tcp_fasttmr+0xbc>)
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	4b2b      	ldr	r3, [pc, #172]	; (800bc2c <tcp_fasttmr+0xbc>)
 800bb80:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bb82:	4b2b      	ldr	r3, [pc, #172]	; (800bc30 <tcp_fasttmr+0xc0>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bb88:	e048      	b.n	800bc1c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	7f9a      	ldrb	r2, [r3, #30]
 800bb8e:	4b27      	ldr	r3, [pc, #156]	; (800bc2c <tcp_fasttmr+0xbc>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d03f      	beq.n	800bc16 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bb96:	4b25      	ldr	r3, [pc, #148]	; (800bc2c <tcp_fasttmr+0xbc>)
 800bb98:	781a      	ldrb	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	8b5b      	ldrh	r3, [r3, #26]
 800bba2:	f003 0301 	and.w	r3, r3, #1
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d010      	beq.n	800bbcc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	8b5b      	ldrh	r3, [r3, #26]
 800bbae:	f043 0302 	orr.w	r3, r3, #2
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f003 facf 	bl	800f15c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	8b5b      	ldrh	r3, [r3, #26]
 800bbc2:	f023 0303 	bic.w	r3, r3, #3
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	8b5b      	ldrh	r3, [r3, #26]
 800bbd0:	f003 0308 	and.w	r3, r3, #8
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d009      	beq.n	800bbec <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	8b5b      	ldrh	r3, [r3, #26]
 800bbdc:	f023 0308 	bic.w	r3, r3, #8
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7ff fa78 	bl	800b0dc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00a      	beq.n	800bc10 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bbfa:	4b0e      	ldr	r3, [pc, #56]	; (800bc34 <tcp_fasttmr+0xc4>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f819 	bl	800bc38 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bc06:	4b0b      	ldr	r3, [pc, #44]	; (800bc34 <tcp_fasttmr+0xc4>)
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d000      	beq.n	800bc10 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bc0e:	e7b8      	b.n	800bb82 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	607b      	str	r3, [r7, #4]
 800bc14:	e002      	b.n	800bc1c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1b3      	bne.n	800bb8a <tcp_fasttmr+0x1a>
    }
  }
}
 800bc22:	bf00      	nop
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	20008e66 	.word	0x20008e66
 800bc30:	20008e5c 	.word	0x20008e5c
 800bc34:	20008e64 	.word	0x20008e64

0800bc38 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bc38:	b590      	push	{r4, r7, lr}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d109      	bne.n	800bc5a <tcp_process_refused_data+0x22>
 800bc46:	4b37      	ldr	r3, [pc, #220]	; (800bd24 <tcp_process_refused_data+0xec>)
 800bc48:	f240 6209 	movw	r2, #1545	; 0x609
 800bc4c:	4936      	ldr	r1, [pc, #216]	; (800bd28 <tcp_process_refused_data+0xf0>)
 800bc4e:	4837      	ldr	r0, [pc, #220]	; (800bd2c <tcp_process_refused_data+0xf4>)
 800bc50:	f007 fbe2 	bl	8013418 <iprintf>
 800bc54:	f06f 030f 	mvn.w	r3, #15
 800bc58:	e060      	b.n	800bd1c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc5e:	7b5b      	ldrb	r3, [r3, #13]
 800bc60:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc66:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00b      	beq.n	800bc90 <tcp_process_refused_data+0x58>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6918      	ldr	r0, [r3, #16]
 800bc82:	2300      	movs	r3, #0
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	6879      	ldr	r1, [r7, #4]
 800bc88:	47a0      	blx	r4
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	73fb      	strb	r3, [r7, #15]
 800bc8e:	e007      	b.n	800bca0 <tcp_process_refused_data+0x68>
 800bc90:	2300      	movs	r3, #0
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	6879      	ldr	r1, [r7, #4]
 800bc96:	2000      	movs	r0, #0
 800bc98:	f000 f8a4 	bl	800bde4 <tcp_recv_null>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d12a      	bne.n	800bcfe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bca8:	7bbb      	ldrb	r3, [r7, #14]
 800bcaa:	f003 0320 	and.w	r3, r3, #32
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d033      	beq.n	800bd1a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcb6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bcba:	d005      	beq.n	800bcc8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00b      	beq.n	800bcea <tcp_process_refused_data+0xb2>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6918      	ldr	r0, [r3, #16]
 800bcdc:	2300      	movs	r3, #0
 800bcde:	2200      	movs	r2, #0
 800bce0:	6879      	ldr	r1, [r7, #4]
 800bce2:	47a0      	blx	r4
 800bce4:	4603      	mov	r3, r0
 800bce6:	73fb      	strb	r3, [r7, #15]
 800bce8:	e001      	b.n	800bcee <tcp_process_refused_data+0xb6>
 800bcea:	2300      	movs	r3, #0
 800bcec:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bcee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcf2:	f113 0f0d 	cmn.w	r3, #13
 800bcf6:	d110      	bne.n	800bd1a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bcf8:	f06f 030c 	mvn.w	r3, #12
 800bcfc:	e00e      	b.n	800bd1c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bcfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd02:	f113 0f0d 	cmn.w	r3, #13
 800bd06:	d102      	bne.n	800bd0e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800bd08:	f06f 030c 	mvn.w	r3, #12
 800bd0c:	e006      	b.n	800bd1c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bd14:	f06f 0304 	mvn.w	r3, #4
 800bd18:	e000      	b.n	800bd1c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3714      	adds	r7, #20
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd90      	pop	{r4, r7, pc}
 800bd24:	08015354 	.word	0x08015354
 800bd28:	08015864 	.word	0x08015864
 800bd2c:	08015398 	.word	0x08015398

0800bd30 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800bd38:	e007      	b.n	800bd4a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f80a 	bl	800bd5a <tcp_seg_free>
    seg = next;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1f4      	bne.n	800bd3a <tcp_segs_free+0xa>
  }
}
 800bd50:	bf00      	nop
 800bd52:	bf00      	nop
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b082      	sub	sp, #8
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00c      	beq.n	800bd82 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d004      	beq.n	800bd7a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fe fcdb 	bl	800a730 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800bd7a:	6879      	ldr	r1, [r7, #4]
 800bd7c:	2003      	movs	r0, #3
 800bd7e:	f7fd fec5 	bl	8009b0c <memp_free>
  }
}
 800bd82:	bf00      	nop
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d106      	bne.n	800bda8 <tcp_seg_copy+0x1c>
 800bd9a:	4b0f      	ldr	r3, [pc, #60]	; (800bdd8 <tcp_seg_copy+0x4c>)
 800bd9c:	f240 6282 	movw	r2, #1666	; 0x682
 800bda0:	490e      	ldr	r1, [pc, #56]	; (800bddc <tcp_seg_copy+0x50>)
 800bda2:	480f      	ldr	r0, [pc, #60]	; (800bde0 <tcp_seg_copy+0x54>)
 800bda4:	f007 fb38 	bl	8013418 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bda8:	2003      	movs	r0, #3
 800bdaa:	f7fd fe63 	bl	8009a74 <memp_malloc>
 800bdae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <tcp_seg_copy+0x2e>
    return NULL;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	e00a      	b.n	800bdd0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800bdba:	2210      	movs	r2, #16
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f007 fafa 	bl	80133b8 <memcpy>
  pbuf_ref(cseg->p);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fe fd51 	bl	800a870 <pbuf_ref>
  return cseg;
 800bdce:	68fb      	ldr	r3, [r7, #12]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3710      	adds	r7, #16
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	08015354 	.word	0x08015354
 800bddc:	080158a8 	.word	0x080158a8
 800bde0:	08015398 	.word	0x08015398

0800bde4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d109      	bne.n	800be0c <tcp_recv_null+0x28>
 800bdf8:	4b12      	ldr	r3, [pc, #72]	; (800be44 <tcp_recv_null+0x60>)
 800bdfa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bdfe:	4912      	ldr	r1, [pc, #72]	; (800be48 <tcp_recv_null+0x64>)
 800be00:	4812      	ldr	r0, [pc, #72]	; (800be4c <tcp_recv_null+0x68>)
 800be02:	f007 fb09 	bl	8013418 <iprintf>
 800be06:	f06f 030f 	mvn.w	r3, #15
 800be0a:	e016      	b.n	800be3a <tcp_recv_null+0x56>

  if (p != NULL) {
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d009      	beq.n	800be26 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	891b      	ldrh	r3, [r3, #8]
 800be16:	4619      	mov	r1, r3
 800be18:	68b8      	ldr	r0, [r7, #8]
 800be1a:	f7ff fb19 	bl	800b450 <tcp_recved>
    pbuf_free(p);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7fe fc86 	bl	800a730 <pbuf_free>
 800be24:	e008      	b.n	800be38 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800be26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d104      	bne.n	800be38 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800be2e:	68b8      	ldr	r0, [r7, #8]
 800be30:	f7ff f9be 	bl	800b1b0 <tcp_close>
 800be34:	4603      	mov	r3, r0
 800be36:	e000      	b.n	800be3a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	08015354 	.word	0x08015354
 800be48:	080158c4 	.word	0x080158c4
 800be4c:	08015398 	.word	0x08015398

0800be50 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0
 800be56:	4603      	mov	r3, r0
 800be58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800be5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	db01      	blt.n	800be66 <tcp_kill_prio+0x16>
 800be62:	79fb      	ldrb	r3, [r7, #7]
 800be64:	e000      	b.n	800be68 <tcp_kill_prio+0x18>
 800be66:	237f      	movs	r3, #127	; 0x7f
 800be68:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800be6a:	7afb      	ldrb	r3, [r7, #11]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d034      	beq.n	800beda <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800be70:	7afb      	ldrb	r3, [r7, #11]
 800be72:	3b01      	subs	r3, #1
 800be74:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800be76:	2300      	movs	r3, #0
 800be78:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800be7a:	2300      	movs	r3, #0
 800be7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be7e:	4b19      	ldr	r3, [pc, #100]	; (800bee4 <tcp_kill_prio+0x94>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	617b      	str	r3, [r7, #20]
 800be84:	e01f      	b.n	800bec6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	7d5b      	ldrb	r3, [r3, #21]
 800be8a:	7afa      	ldrb	r2, [r7, #11]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d80c      	bhi.n	800beaa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800be94:	7afa      	ldrb	r2, [r7, #11]
 800be96:	429a      	cmp	r2, r3
 800be98:	d112      	bne.n	800bec0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800be9a:	4b13      	ldr	r3, [pc, #76]	; (800bee8 <tcp_kill_prio+0x98>)
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	6a1b      	ldr	r3, [r3, #32]
 800bea2:	1ad3      	subs	r3, r2, r3
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d80a      	bhi.n	800bec0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800beaa:	4b0f      	ldr	r3, [pc, #60]	; (800bee8 <tcp_kill_prio+0x98>)
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	6a1b      	ldr	r3, [r3, #32]
 800beb2:	1ad3      	subs	r3, r2, r3
 800beb4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	7d5b      	ldrb	r3, [r3, #21]
 800bebe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	617b      	str	r3, [r7, #20]
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1dc      	bne.n	800be86 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d004      	beq.n	800bedc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bed2:	6938      	ldr	r0, [r7, #16]
 800bed4:	f7ff fa56 	bl	800b384 <tcp_abort>
 800bed8:	e000      	b.n	800bedc <tcp_kill_prio+0x8c>
    return;
 800beda:	bf00      	nop
  }
}
 800bedc:	3718      	adds	r7, #24
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	20008e5c 	.word	0x20008e5c
 800bee8:	20008e50 	.word	0x20008e50

0800beec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	4603      	mov	r3, r0
 800bef4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bef6:	79fb      	ldrb	r3, [r7, #7]
 800bef8:	2b08      	cmp	r3, #8
 800befa:	d009      	beq.n	800bf10 <tcp_kill_state+0x24>
 800befc:	79fb      	ldrb	r3, [r7, #7]
 800befe:	2b09      	cmp	r3, #9
 800bf00:	d006      	beq.n	800bf10 <tcp_kill_state+0x24>
 800bf02:	4b1a      	ldr	r3, [pc, #104]	; (800bf6c <tcp_kill_state+0x80>)
 800bf04:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800bf08:	4919      	ldr	r1, [pc, #100]	; (800bf70 <tcp_kill_state+0x84>)
 800bf0a:	481a      	ldr	r0, [pc, #104]	; (800bf74 <tcp_kill_state+0x88>)
 800bf0c:	f007 fa84 	bl	8013418 <iprintf>

  inactivity = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bf14:	2300      	movs	r3, #0
 800bf16:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf18:	4b17      	ldr	r3, [pc, #92]	; (800bf78 <tcp_kill_state+0x8c>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	617b      	str	r3, [r7, #20]
 800bf1e:	e017      	b.n	800bf50 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	7d1b      	ldrb	r3, [r3, #20]
 800bf24:	79fa      	ldrb	r2, [r7, #7]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d10f      	bne.n	800bf4a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bf2a:	4b14      	ldr	r3, [pc, #80]	; (800bf7c <tcp_kill_state+0x90>)
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d807      	bhi.n	800bf4a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bf3a:	4b10      	ldr	r3, [pc, #64]	; (800bf7c <tcp_kill_state+0x90>)
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	617b      	str	r3, [r7, #20]
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1e4      	bne.n	800bf20 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d003      	beq.n	800bf64 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	6938      	ldr	r0, [r7, #16]
 800bf60:	f7ff f952 	bl	800b208 <tcp_abandon>
  }
}
 800bf64:	bf00      	nop
 800bf66:	3718      	adds	r7, #24
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	08015354 	.word	0x08015354
 800bf70:	080158e0 	.word	0x080158e0
 800bf74:	08015398 	.word	0x08015398
 800bf78:	20008e5c 	.word	0x20008e5c
 800bf7c:	20008e50 	.word	0x20008e50

0800bf80 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bf86:	2300      	movs	r3, #0
 800bf88:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf8e:	4b12      	ldr	r3, [pc, #72]	; (800bfd8 <tcp_kill_timewait+0x58>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	60fb      	str	r3, [r7, #12]
 800bf94:	e012      	b.n	800bfbc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bf96:	4b11      	ldr	r3, [pc, #68]	; (800bfdc <tcp_kill_timewait+0x5c>)
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d807      	bhi.n	800bfb6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bfa6:	4b0d      	ldr	r3, [pc, #52]	; (800bfdc <tcp_kill_timewait+0x5c>)
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6a1b      	ldr	r3, [r3, #32]
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	60fb      	str	r3, [r7, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1e9      	bne.n	800bf96 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bfc8:	68b8      	ldr	r0, [r7, #8]
 800bfca:	f7ff f9db 	bl	800b384 <tcp_abort>
  }
}
 800bfce:	bf00      	nop
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	20008e60 	.word	0x20008e60
 800bfdc:	20008e50 	.word	0x20008e50

0800bfe0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bfe6:	4b10      	ldr	r3, [pc, #64]	; (800c028 <tcp_handle_closepend+0x48>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bfec:	e014      	b.n	800c018 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	8b5b      	ldrh	r3, [r3, #26]
 800bff8:	f003 0308 	and.w	r3, r3, #8
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d009      	beq.n	800c014 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	8b5b      	ldrh	r3, [r3, #26]
 800c004:	f023 0308 	bic.w	r3, r3, #8
 800c008:	b29a      	uxth	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7ff f864 	bl	800b0dc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1e7      	bne.n	800bfee <tcp_handle_closepend+0xe>
  }
}
 800c01e:	bf00      	nop
 800c020:	bf00      	nop
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	20008e5c 	.word	0x20008e5c

0800c02c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	4603      	mov	r3, r0
 800c034:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c036:	2001      	movs	r0, #1
 800c038:	f7fd fd1c 	bl	8009a74 <memp_malloc>
 800c03c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d126      	bne.n	800c092 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c044:	f7ff ffcc 	bl	800bfe0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c048:	f7ff ff9a 	bl	800bf80 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c04c:	2001      	movs	r0, #1
 800c04e:	f7fd fd11 	bl	8009a74 <memp_malloc>
 800c052:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d11b      	bne.n	800c092 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c05a:	2009      	movs	r0, #9
 800c05c:	f7ff ff46 	bl	800beec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c060:	2001      	movs	r0, #1
 800c062:	f7fd fd07 	bl	8009a74 <memp_malloc>
 800c066:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d111      	bne.n	800c092 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c06e:	2008      	movs	r0, #8
 800c070:	f7ff ff3c 	bl	800beec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c074:	2001      	movs	r0, #1
 800c076:	f7fd fcfd 	bl	8009a74 <memp_malloc>
 800c07a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d107      	bne.n	800c092 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c082:	79fb      	ldrb	r3, [r7, #7]
 800c084:	4618      	mov	r0, r3
 800c086:	f7ff fee3 	bl	800be50 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c08a:	2001      	movs	r0, #1
 800c08c:	f7fd fcf2 	bl	8009a74 <memp_malloc>
 800c090:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d03f      	beq.n	800c118 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c098:	229c      	movs	r2, #156	; 0x9c
 800c09a:	2100      	movs	r1, #0
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f007 f9b3 	bl	8013408 <memset>
    pcb->prio = prio;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	79fa      	ldrb	r2, [r7, #7]
 800c0a6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c0ae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c0b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	22ff      	movs	r2, #255	; 0xff
 800c0c6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c0ce:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2206      	movs	r2, #6
 800c0d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2206      	movs	r2, #6
 800c0dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0e4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c0ee:	4b0d      	ldr	r3, [pc, #52]	; (800c124 <tcp_alloc+0xf8>)
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c0f6:	4b0c      	ldr	r3, [pc, #48]	; (800c128 <tcp_alloc+0xfc>)
 800c0f8:	781a      	ldrb	r2, [r3, #0]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c104:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	4a08      	ldr	r2, [pc, #32]	; (800c12c <tcp_alloc+0x100>)
 800c10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	4a07      	ldr	r2, [pc, #28]	; (800c130 <tcp_alloc+0x104>)
 800c114:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c118:	68fb      	ldr	r3, [r7, #12]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	20008e50 	.word	0x20008e50
 800c128:	20008e66 	.word	0x20008e66
 800c12c:	0800bde5 	.word	0x0800bde5
 800c130:	006ddd00 	.word	0x006ddd00

0800c134 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d107      	bne.n	800c152 <tcp_pcb_purge+0x1e>
 800c142:	4b21      	ldr	r3, [pc, #132]	; (800c1c8 <tcp_pcb_purge+0x94>)
 800c144:	f640 0251 	movw	r2, #2129	; 0x851
 800c148:	4920      	ldr	r1, [pc, #128]	; (800c1cc <tcp_pcb_purge+0x98>)
 800c14a:	4821      	ldr	r0, [pc, #132]	; (800c1d0 <tcp_pcb_purge+0x9c>)
 800c14c:	f007 f964 	bl	8013418 <iprintf>
 800c150:	e037      	b.n	800c1c2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	7d1b      	ldrb	r3, [r3, #20]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d033      	beq.n	800c1c2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c15e:	2b0a      	cmp	r3, #10
 800c160:	d02f      	beq.n	800c1c2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c166:	2b01      	cmp	r3, #1
 800c168:	d02b      	beq.n	800c1c2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d007      	beq.n	800c182 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c176:	4618      	mov	r0, r3
 800c178:	f7fe fada 	bl	800a730 <pbuf_free>
      pcb->refused_data = NULL;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c186:	2b00      	cmp	r3, #0
 800c188:	d002      	beq.n	800c190 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f986 	bl	800c49c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c196:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7ff fdc7 	bl	800bd30 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7ff fdc2 	bl	800bd30 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	66da      	str	r2, [r3, #108]	; 0x6c
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	08015354 	.word	0x08015354
 800c1cc:	080159a0 	.word	0x080159a0
 800c1d0:	08015398 	.word	0x08015398

0800c1d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d106      	bne.n	800c1f2 <tcp_pcb_remove+0x1e>
 800c1e4:	4b3e      	ldr	r3, [pc, #248]	; (800c2e0 <tcp_pcb_remove+0x10c>)
 800c1e6:	f640 0283 	movw	r2, #2179	; 0x883
 800c1ea:	493e      	ldr	r1, [pc, #248]	; (800c2e4 <tcp_pcb_remove+0x110>)
 800c1ec:	483e      	ldr	r0, [pc, #248]	; (800c2e8 <tcp_pcb_remove+0x114>)
 800c1ee:	f007 f913 	bl	8013418 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d106      	bne.n	800c206 <tcp_pcb_remove+0x32>
 800c1f8:	4b39      	ldr	r3, [pc, #228]	; (800c2e0 <tcp_pcb_remove+0x10c>)
 800c1fa:	f640 0284 	movw	r2, #2180	; 0x884
 800c1fe:	493b      	ldr	r1, [pc, #236]	; (800c2ec <tcp_pcb_remove+0x118>)
 800c200:	4839      	ldr	r0, [pc, #228]	; (800c2e8 <tcp_pcb_remove+0x114>)
 800c202:	f007 f909 	bl	8013418 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	683a      	ldr	r2, [r7, #0]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d105      	bne.n	800c21c <tcp_pcb_remove+0x48>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	68da      	ldr	r2, [r3, #12]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	601a      	str	r2, [r3, #0]
 800c21a:	e013      	b.n	800c244 <tcp_pcb_remove+0x70>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	60fb      	str	r3, [r7, #12]
 800c222:	e00c      	b.n	800c23e <tcp_pcb_remove+0x6a>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	683a      	ldr	r2, [r7, #0]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d104      	bne.n	800c238 <tcp_pcb_remove+0x64>
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	68da      	ldr	r2, [r3, #12]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	60da      	str	r2, [r3, #12]
 800c236:	e005      	b.n	800c244 <tcp_pcb_remove+0x70>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	60fb      	str	r3, [r7, #12]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1ef      	bne.n	800c224 <tcp_pcb_remove+0x50>
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	2200      	movs	r2, #0
 800c248:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c24a:	6838      	ldr	r0, [r7, #0]
 800c24c:	f7ff ff72 	bl	800c134 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	7d1b      	ldrb	r3, [r3, #20]
 800c254:	2b0a      	cmp	r3, #10
 800c256:	d013      	beq.n	800c280 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d00f      	beq.n	800c280 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	8b5b      	ldrh	r3, [r3, #26]
 800c264:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d009      	beq.n	800c280 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	8b5b      	ldrh	r3, [r3, #26]
 800c270:	f043 0302 	orr.w	r3, r3, #2
 800c274:	b29a      	uxth	r2, r3
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c27a:	6838      	ldr	r0, [r7, #0]
 800c27c:	f002 ff6e 	bl	800f15c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	7d1b      	ldrb	r3, [r3, #20]
 800c284:	2b01      	cmp	r3, #1
 800c286:	d020      	beq.n	800c2ca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d006      	beq.n	800c29e <tcp_pcb_remove+0xca>
 800c290:	4b13      	ldr	r3, [pc, #76]	; (800c2e0 <tcp_pcb_remove+0x10c>)
 800c292:	f640 0293 	movw	r2, #2195	; 0x893
 800c296:	4916      	ldr	r1, [pc, #88]	; (800c2f0 <tcp_pcb_remove+0x11c>)
 800c298:	4813      	ldr	r0, [pc, #76]	; (800c2e8 <tcp_pcb_remove+0x114>)
 800c29a:	f007 f8bd 	bl	8013418 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d006      	beq.n	800c2b4 <tcp_pcb_remove+0xe0>
 800c2a6:	4b0e      	ldr	r3, [pc, #56]	; (800c2e0 <tcp_pcb_remove+0x10c>)
 800c2a8:	f640 0294 	movw	r2, #2196	; 0x894
 800c2ac:	4911      	ldr	r1, [pc, #68]	; (800c2f4 <tcp_pcb_remove+0x120>)
 800c2ae:	480e      	ldr	r0, [pc, #56]	; (800c2e8 <tcp_pcb_remove+0x114>)
 800c2b0:	f007 f8b2 	bl	8013418 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d006      	beq.n	800c2ca <tcp_pcb_remove+0xf6>
 800c2bc:	4b08      	ldr	r3, [pc, #32]	; (800c2e0 <tcp_pcb_remove+0x10c>)
 800c2be:	f640 0296 	movw	r2, #2198	; 0x896
 800c2c2:	490d      	ldr	r1, [pc, #52]	; (800c2f8 <tcp_pcb_remove+0x124>)
 800c2c4:	4808      	ldr	r0, [pc, #32]	; (800c2e8 <tcp_pcb_remove+0x114>)
 800c2c6:	f007 f8a7 	bl	8013418 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c2d6:	bf00      	nop
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	08015354 	.word	0x08015354
 800c2e4:	080159bc 	.word	0x080159bc
 800c2e8:	08015398 	.word	0x08015398
 800c2ec:	080159d8 	.word	0x080159d8
 800c2f0:	080159f8 	.word	0x080159f8
 800c2f4:	08015a10 	.word	0x08015a10
 800c2f8:	08015a2c 	.word	0x08015a2c

0800c2fc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d106      	bne.n	800c318 <tcp_next_iss+0x1c>
 800c30a:	4b0a      	ldr	r3, [pc, #40]	; (800c334 <tcp_next_iss+0x38>)
 800c30c:	f640 02af 	movw	r2, #2223	; 0x8af
 800c310:	4909      	ldr	r1, [pc, #36]	; (800c338 <tcp_next_iss+0x3c>)
 800c312:	480a      	ldr	r0, [pc, #40]	; (800c33c <tcp_next_iss+0x40>)
 800c314:	f007 f880 	bl	8013418 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c318:	4b09      	ldr	r3, [pc, #36]	; (800c340 <tcp_next_iss+0x44>)
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	4b09      	ldr	r3, [pc, #36]	; (800c344 <tcp_next_iss+0x48>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4413      	add	r3, r2
 800c322:	4a07      	ldr	r2, [pc, #28]	; (800c340 <tcp_next_iss+0x44>)
 800c324:	6013      	str	r3, [r2, #0]
  return iss;
 800c326:	4b06      	ldr	r3, [pc, #24]	; (800c340 <tcp_next_iss+0x44>)
 800c328:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	08015354 	.word	0x08015354
 800c338:	08015a44 	.word	0x08015a44
 800c33c:	08015398 	.word	0x08015398
 800c340:	20000010 	.word	0x20000010
 800c344:	20008e50 	.word	0x20008e50

0800c348 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
 800c354:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d106      	bne.n	800c36a <tcp_eff_send_mss_netif+0x22>
 800c35c:	4b14      	ldr	r3, [pc, #80]	; (800c3b0 <tcp_eff_send_mss_netif+0x68>)
 800c35e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c362:	4914      	ldr	r1, [pc, #80]	; (800c3b4 <tcp_eff_send_mss_netif+0x6c>)
 800c364:	4814      	ldr	r0, [pc, #80]	; (800c3b8 <tcp_eff_send_mss_netif+0x70>)
 800c366:	f007 f857 	bl	8013418 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d101      	bne.n	800c374 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c370:	89fb      	ldrh	r3, [r7, #14]
 800c372:	e019      	b.n	800c3a8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c378:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c37a:	8afb      	ldrh	r3, [r7, #22]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d012      	beq.n	800c3a6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c380:	2328      	movs	r3, #40	; 0x28
 800c382:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c384:	8afa      	ldrh	r2, [r7, #22]
 800c386:	8abb      	ldrh	r3, [r7, #20]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d904      	bls.n	800c396 <tcp_eff_send_mss_netif+0x4e>
 800c38c:	8afa      	ldrh	r2, [r7, #22]
 800c38e:	8abb      	ldrh	r3, [r7, #20]
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	b29b      	uxth	r3, r3
 800c394:	e000      	b.n	800c398 <tcp_eff_send_mss_netif+0x50>
 800c396:	2300      	movs	r3, #0
 800c398:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c39a:	8a7a      	ldrh	r2, [r7, #18]
 800c39c:	89fb      	ldrh	r3, [r7, #14]
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	bf28      	it	cs
 800c3a2:	4613      	movcs	r3, r2
 800c3a4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c3a6:	89fb      	ldrh	r3, [r7, #14]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3718      	adds	r7, #24
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	08015354 	.word	0x08015354
 800c3b4:	08015a60 	.word	0x08015a60
 800c3b8:	08015398 	.word	0x08015398

0800c3bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d119      	bne.n	800c404 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c3d0:	4b10      	ldr	r3, [pc, #64]	; (800c414 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c3d2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c3d6:	4910      	ldr	r1, [pc, #64]	; (800c418 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c3d8:	4810      	ldr	r0, [pc, #64]	; (800c41c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c3da:	f007 f81d 	bl	8013418 <iprintf>

  while (pcb != NULL) {
 800c3de:	e011      	b.n	800c404 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d108      	bne.n	800c3fe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f7fe ffc6 	bl	800b384 <tcp_abort>
      pcb = next;
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	60fb      	str	r3, [r7, #12]
 800c3fc:	e002      	b.n	800c404 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1ea      	bne.n	800c3e0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c40a:	bf00      	nop
 800c40c:	bf00      	nop
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	08015354 	.word	0x08015354
 800c418:	08015a88 	.word	0x08015a88
 800c41c:	08015398 	.word	0x08015398

0800c420 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d02a      	beq.n	800c486 <tcp_netif_ip_addr_changed+0x66>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d026      	beq.n	800c486 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c438:	4b15      	ldr	r3, [pc, #84]	; (800c490 <tcp_netif_ip_addr_changed+0x70>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4619      	mov	r1, r3
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff ffbc 	bl	800c3bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c444:	4b13      	ldr	r3, [pc, #76]	; (800c494 <tcp_netif_ip_addr_changed+0x74>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4619      	mov	r1, r3
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f7ff ffb6 	bl	800c3bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d017      	beq.n	800c486 <tcp_netif_ip_addr_changed+0x66>
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d013      	beq.n	800c486 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c45e:	4b0e      	ldr	r3, [pc, #56]	; (800c498 <tcp_netif_ip_addr_changed+0x78>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	60fb      	str	r3, [r7, #12]
 800c464:	e00c      	b.n	800c480 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d103      	bne.n	800c47a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	60fb      	str	r3, [r7, #12]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1ef      	bne.n	800c466 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c486:	bf00      	nop
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	20008e5c 	.word	0x20008e5c
 800c494:	20008e54 	.word	0x20008e54
 800c498:	20008e58 	.word	0x20008e58

0800c49c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d007      	beq.n	800c4bc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff fc3d 	bl	800bd30 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c4bc:	bf00      	nop
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c4c4:	b590      	push	{r4, r7, lr}
 800c4c6:	b08d      	sub	sp, #52	; 0x34
 800c4c8:	af04      	add	r7, sp, #16
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d105      	bne.n	800c4e0 <tcp_input+0x1c>
 800c4d4:	4b9b      	ldr	r3, [pc, #620]	; (800c744 <tcp_input+0x280>)
 800c4d6:	2283      	movs	r2, #131	; 0x83
 800c4d8:	499b      	ldr	r1, [pc, #620]	; (800c748 <tcp_input+0x284>)
 800c4da:	489c      	ldr	r0, [pc, #624]	; (800c74c <tcp_input+0x288>)
 800c4dc:	f006 ff9c 	bl	8013418 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	4a9a      	ldr	r2, [pc, #616]	; (800c750 <tcp_input+0x28c>)
 800c4e6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	895b      	ldrh	r3, [r3, #10]
 800c4ec:	2b13      	cmp	r3, #19
 800c4ee:	f240 83d1 	bls.w	800cc94 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c4f2:	4b98      	ldr	r3, [pc, #608]	; (800c754 <tcp_input+0x290>)
 800c4f4:	695b      	ldr	r3, [r3, #20]
 800c4f6:	4a97      	ldr	r2, [pc, #604]	; (800c754 <tcp_input+0x290>)
 800c4f8:	6812      	ldr	r2, [r2, #0]
 800c4fa:	4611      	mov	r1, r2
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f005 ffd1 	bl	80124a4 <ip4_addr_isbroadcast_u32>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	f040 83c7 	bne.w	800cc98 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c50a:	4b92      	ldr	r3, [pc, #584]	; (800c754 <tcp_input+0x290>)
 800c50c:	695b      	ldr	r3, [r3, #20]
 800c50e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c512:	2be0      	cmp	r3, #224	; 0xe0
 800c514:	f000 83c0 	beq.w	800cc98 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c518:	4b8d      	ldr	r3, [pc, #564]	; (800c750 <tcp_input+0x28c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	899b      	ldrh	r3, [r3, #12]
 800c51e:	b29b      	uxth	r3, r3
 800c520:	4618      	mov	r0, r3
 800c522:	f7fc fe51 	bl	80091c8 <lwip_htons>
 800c526:	4603      	mov	r3, r0
 800c528:	0b1b      	lsrs	r3, r3, #12
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c532:	7cbb      	ldrb	r3, [r7, #18]
 800c534:	2b13      	cmp	r3, #19
 800c536:	f240 83b1 	bls.w	800cc9c <tcp_input+0x7d8>
 800c53a:	7cbb      	ldrb	r3, [r7, #18]
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	891b      	ldrh	r3, [r3, #8]
 800c542:	429a      	cmp	r2, r3
 800c544:	f200 83aa 	bhi.w	800cc9c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c548:	7cbb      	ldrb	r3, [r7, #18]
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	3b14      	subs	r3, #20
 800c54e:	b29a      	uxth	r2, r3
 800c550:	4b81      	ldr	r3, [pc, #516]	; (800c758 <tcp_input+0x294>)
 800c552:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c554:	4b81      	ldr	r3, [pc, #516]	; (800c75c <tcp_input+0x298>)
 800c556:	2200      	movs	r2, #0
 800c558:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	895a      	ldrh	r2, [r3, #10]
 800c55e:	7cbb      	ldrb	r3, [r7, #18]
 800c560:	b29b      	uxth	r3, r3
 800c562:	429a      	cmp	r2, r3
 800c564:	d309      	bcc.n	800c57a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c566:	4b7c      	ldr	r3, [pc, #496]	; (800c758 <tcp_input+0x294>)
 800c568:	881a      	ldrh	r2, [r3, #0]
 800c56a:	4b7d      	ldr	r3, [pc, #500]	; (800c760 <tcp_input+0x29c>)
 800c56c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c56e:	7cbb      	ldrb	r3, [r7, #18]
 800c570:	4619      	mov	r1, r3
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7fe f856 	bl	800a624 <pbuf_remove_header>
 800c578:	e04e      	b.n	800c618 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d105      	bne.n	800c58e <tcp_input+0xca>
 800c582:	4b70      	ldr	r3, [pc, #448]	; (800c744 <tcp_input+0x280>)
 800c584:	22c2      	movs	r2, #194	; 0xc2
 800c586:	4977      	ldr	r1, [pc, #476]	; (800c764 <tcp_input+0x2a0>)
 800c588:	4870      	ldr	r0, [pc, #448]	; (800c74c <tcp_input+0x288>)
 800c58a:	f006 ff45 	bl	8013418 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c58e:	2114      	movs	r1, #20
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7fe f847 	bl	800a624 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	895a      	ldrh	r2, [r3, #10]
 800c59a:	4b71      	ldr	r3, [pc, #452]	; (800c760 <tcp_input+0x29c>)
 800c59c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c59e:	4b6e      	ldr	r3, [pc, #440]	; (800c758 <tcp_input+0x294>)
 800c5a0:	881a      	ldrh	r2, [r3, #0]
 800c5a2:	4b6f      	ldr	r3, [pc, #444]	; (800c760 <tcp_input+0x29c>)
 800c5a4:	881b      	ldrh	r3, [r3, #0]
 800c5a6:	1ad3      	subs	r3, r2, r3
 800c5a8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c5aa:	4b6d      	ldr	r3, [pc, #436]	; (800c760 <tcp_input+0x29c>)
 800c5ac:	881b      	ldrh	r3, [r3, #0]
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f7fe f837 	bl	800a624 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	895b      	ldrh	r3, [r3, #10]
 800c5bc:	8a3a      	ldrh	r2, [r7, #16]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	f200 836e 	bhi.w	800cca0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	4a64      	ldr	r2, [pc, #400]	; (800c75c <tcp_input+0x298>)
 800c5cc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	8a3a      	ldrh	r2, [r7, #16]
 800c5d4:	4611      	mov	r1, r2
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fe f824 	bl	800a624 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	891a      	ldrh	r2, [r3, #8]
 800c5e0:	8a3b      	ldrh	r3, [r7, #16]
 800c5e2:	1ad3      	subs	r3, r2, r3
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	895b      	ldrh	r3, [r3, #10]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d005      	beq.n	800c5fe <tcp_input+0x13a>
 800c5f2:	4b54      	ldr	r3, [pc, #336]	; (800c744 <tcp_input+0x280>)
 800c5f4:	22df      	movs	r2, #223	; 0xdf
 800c5f6:	495c      	ldr	r1, [pc, #368]	; (800c768 <tcp_input+0x2a4>)
 800c5f8:	4854      	ldr	r0, [pc, #336]	; (800c74c <tcp_input+0x288>)
 800c5fa:	f006 ff0d 	bl	8013418 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	891a      	ldrh	r2, [r3, #8]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	891b      	ldrh	r3, [r3, #8]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d005      	beq.n	800c618 <tcp_input+0x154>
 800c60c:	4b4d      	ldr	r3, [pc, #308]	; (800c744 <tcp_input+0x280>)
 800c60e:	22e0      	movs	r2, #224	; 0xe0
 800c610:	4956      	ldr	r1, [pc, #344]	; (800c76c <tcp_input+0x2a8>)
 800c612:	484e      	ldr	r0, [pc, #312]	; (800c74c <tcp_input+0x288>)
 800c614:	f006 ff00 	bl	8013418 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c618:	4b4d      	ldr	r3, [pc, #308]	; (800c750 <tcp_input+0x28c>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	881b      	ldrh	r3, [r3, #0]
 800c61e:	b29b      	uxth	r3, r3
 800c620:	4a4b      	ldr	r2, [pc, #300]	; (800c750 <tcp_input+0x28c>)
 800c622:	6814      	ldr	r4, [r2, #0]
 800c624:	4618      	mov	r0, r3
 800c626:	f7fc fdcf 	bl	80091c8 <lwip_htons>
 800c62a:	4603      	mov	r3, r0
 800c62c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c62e:	4b48      	ldr	r3, [pc, #288]	; (800c750 <tcp_input+0x28c>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	885b      	ldrh	r3, [r3, #2]
 800c634:	b29b      	uxth	r3, r3
 800c636:	4a46      	ldr	r2, [pc, #280]	; (800c750 <tcp_input+0x28c>)
 800c638:	6814      	ldr	r4, [r2, #0]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fc fdc4 	bl	80091c8 <lwip_htons>
 800c640:	4603      	mov	r3, r0
 800c642:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c644:	4b42      	ldr	r3, [pc, #264]	; (800c750 <tcp_input+0x28c>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	4a41      	ldr	r2, [pc, #260]	; (800c750 <tcp_input+0x28c>)
 800c64c:	6814      	ldr	r4, [r2, #0]
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fc fdcf 	bl	80091f2 <lwip_htonl>
 800c654:	4603      	mov	r3, r0
 800c656:	6063      	str	r3, [r4, #4]
 800c658:	6863      	ldr	r3, [r4, #4]
 800c65a:	4a45      	ldr	r2, [pc, #276]	; (800c770 <tcp_input+0x2ac>)
 800c65c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c65e:	4b3c      	ldr	r3, [pc, #240]	; (800c750 <tcp_input+0x28c>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	689b      	ldr	r3, [r3, #8]
 800c664:	4a3a      	ldr	r2, [pc, #232]	; (800c750 <tcp_input+0x28c>)
 800c666:	6814      	ldr	r4, [r2, #0]
 800c668:	4618      	mov	r0, r3
 800c66a:	f7fc fdc2 	bl	80091f2 <lwip_htonl>
 800c66e:	4603      	mov	r3, r0
 800c670:	60a3      	str	r3, [r4, #8]
 800c672:	68a3      	ldr	r3, [r4, #8]
 800c674:	4a3f      	ldr	r2, [pc, #252]	; (800c774 <tcp_input+0x2b0>)
 800c676:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c678:	4b35      	ldr	r3, [pc, #212]	; (800c750 <tcp_input+0x28c>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	89db      	ldrh	r3, [r3, #14]
 800c67e:	b29b      	uxth	r3, r3
 800c680:	4a33      	ldr	r2, [pc, #204]	; (800c750 <tcp_input+0x28c>)
 800c682:	6814      	ldr	r4, [r2, #0]
 800c684:	4618      	mov	r0, r3
 800c686:	f7fc fd9f 	bl	80091c8 <lwip_htons>
 800c68a:	4603      	mov	r3, r0
 800c68c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c68e:	4b30      	ldr	r3, [pc, #192]	; (800c750 <tcp_input+0x28c>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	899b      	ldrh	r3, [r3, #12]
 800c694:	b29b      	uxth	r3, r3
 800c696:	4618      	mov	r0, r3
 800c698:	f7fc fd96 	bl	80091c8 <lwip_htons>
 800c69c:	4603      	mov	r3, r0
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	4b34      	ldr	r3, [pc, #208]	; (800c778 <tcp_input+0x2b4>)
 800c6a8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	891a      	ldrh	r2, [r3, #8]
 800c6ae:	4b33      	ldr	r3, [pc, #204]	; (800c77c <tcp_input+0x2b8>)
 800c6b0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c6b2:	4b31      	ldr	r3, [pc, #196]	; (800c778 <tcp_input+0x2b4>)
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	f003 0303 	and.w	r3, r3, #3
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00c      	beq.n	800c6d8 <tcp_input+0x214>
    tcplen++;
 800c6be:	4b2f      	ldr	r3, [pc, #188]	; (800c77c <tcp_input+0x2b8>)
 800c6c0:	881b      	ldrh	r3, [r3, #0]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	4b2d      	ldr	r3, [pc, #180]	; (800c77c <tcp_input+0x2b8>)
 800c6c8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	891a      	ldrh	r2, [r3, #8]
 800c6ce:	4b2b      	ldr	r3, [pc, #172]	; (800c77c <tcp_input+0x2b8>)
 800c6d0:	881b      	ldrh	r3, [r3, #0]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	f200 82e6 	bhi.w	800cca4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6dc:	4b28      	ldr	r3, [pc, #160]	; (800c780 <tcp_input+0x2bc>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	61fb      	str	r3, [r7, #28]
 800c6e2:	e09d      	b.n	800c820 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	7d1b      	ldrb	r3, [r3, #20]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d105      	bne.n	800c6f8 <tcp_input+0x234>
 800c6ec:	4b15      	ldr	r3, [pc, #84]	; (800c744 <tcp_input+0x280>)
 800c6ee:	22fb      	movs	r2, #251	; 0xfb
 800c6f0:	4924      	ldr	r1, [pc, #144]	; (800c784 <tcp_input+0x2c0>)
 800c6f2:	4816      	ldr	r0, [pc, #88]	; (800c74c <tcp_input+0x288>)
 800c6f4:	f006 fe90 	bl	8013418 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	7d1b      	ldrb	r3, [r3, #20]
 800c6fc:	2b0a      	cmp	r3, #10
 800c6fe:	d105      	bne.n	800c70c <tcp_input+0x248>
 800c700:	4b10      	ldr	r3, [pc, #64]	; (800c744 <tcp_input+0x280>)
 800c702:	22fc      	movs	r2, #252	; 0xfc
 800c704:	4920      	ldr	r1, [pc, #128]	; (800c788 <tcp_input+0x2c4>)
 800c706:	4811      	ldr	r0, [pc, #68]	; (800c74c <tcp_input+0x288>)
 800c708:	f006 fe86 	bl	8013418 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	7d1b      	ldrb	r3, [r3, #20]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d105      	bne.n	800c720 <tcp_input+0x25c>
 800c714:	4b0b      	ldr	r3, [pc, #44]	; (800c744 <tcp_input+0x280>)
 800c716:	22fd      	movs	r2, #253	; 0xfd
 800c718:	491c      	ldr	r1, [pc, #112]	; (800c78c <tcp_input+0x2c8>)
 800c71a:	480c      	ldr	r0, [pc, #48]	; (800c74c <tcp_input+0x288>)
 800c71c:	f006 fe7c 	bl	8013418 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	7a1b      	ldrb	r3, [r3, #8]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d033      	beq.n	800c790 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	7a1a      	ldrb	r2, [r3, #8]
 800c72c:	4b09      	ldr	r3, [pc, #36]	; (800c754 <tcp_input+0x290>)
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c734:	3301      	adds	r3, #1
 800c736:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c738:	429a      	cmp	r2, r3
 800c73a:	d029      	beq.n	800c790 <tcp_input+0x2cc>
      prev = pcb;
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	61bb      	str	r3, [r7, #24]
      continue;
 800c740:	e06b      	b.n	800c81a <tcp_input+0x356>
 800c742:	bf00      	nop
 800c744:	08015abc 	.word	0x08015abc
 800c748:	08015af0 	.word	0x08015af0
 800c74c:	08015b08 	.word	0x08015b08
 800c750:	20008e78 	.word	0x20008e78
 800c754:	20003720 	.word	0x20003720
 800c758:	20008e7c 	.word	0x20008e7c
 800c75c:	20008e80 	.word	0x20008e80
 800c760:	20008e7e 	.word	0x20008e7e
 800c764:	08015b30 	.word	0x08015b30
 800c768:	08015b40 	.word	0x08015b40
 800c76c:	08015b4c 	.word	0x08015b4c
 800c770:	20008e88 	.word	0x20008e88
 800c774:	20008e8c 	.word	0x20008e8c
 800c778:	20008e94 	.word	0x20008e94
 800c77c:	20008e92 	.word	0x20008e92
 800c780:	20008e5c 	.word	0x20008e5c
 800c784:	08015b6c 	.word	0x08015b6c
 800c788:	08015b94 	.word	0x08015b94
 800c78c:	08015bc0 	.word	0x08015bc0
    }

    if (pcb->remote_port == tcphdr->src &&
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	8b1a      	ldrh	r2, [r3, #24]
 800c794:	4b72      	ldr	r3, [pc, #456]	; (800c960 <tcp_input+0x49c>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	881b      	ldrh	r3, [r3, #0]
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d13a      	bne.n	800c816 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	8ada      	ldrh	r2, [r3, #22]
 800c7a4:	4b6e      	ldr	r3, [pc, #440]	; (800c960 <tcp_input+0x49c>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	885b      	ldrh	r3, [r3, #2]
 800c7aa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d132      	bne.n	800c816 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	685a      	ldr	r2, [r3, #4]
 800c7b4:	4b6b      	ldr	r3, [pc, #428]	; (800c964 <tcp_input+0x4a0>)
 800c7b6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d12c      	bne.n	800c816 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	4b68      	ldr	r3, [pc, #416]	; (800c964 <tcp_input+0x4a0>)
 800c7c2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d126      	bne.n	800c816 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	69fa      	ldr	r2, [r7, #28]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d106      	bne.n	800c7e0 <tcp_input+0x31c>
 800c7d2:	4b65      	ldr	r3, [pc, #404]	; (800c968 <tcp_input+0x4a4>)
 800c7d4:	f240 120d 	movw	r2, #269	; 0x10d
 800c7d8:	4964      	ldr	r1, [pc, #400]	; (800c96c <tcp_input+0x4a8>)
 800c7da:	4865      	ldr	r0, [pc, #404]	; (800c970 <tcp_input+0x4ac>)
 800c7dc:	f006 fe1c 	bl	8013418 <iprintf>
      if (prev != NULL) {
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00a      	beq.n	800c7fc <tcp_input+0x338>
        prev->next = pcb->next;
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	68da      	ldr	r2, [r3, #12]
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c7ee:	4b61      	ldr	r3, [pc, #388]	; (800c974 <tcp_input+0x4b0>)
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c7f6:	4a5f      	ldr	r2, [pc, #380]	; (800c974 <tcp_input+0x4b0>)
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	69fa      	ldr	r2, [r7, #28]
 800c802:	429a      	cmp	r2, r3
 800c804:	d111      	bne.n	800c82a <tcp_input+0x366>
 800c806:	4b58      	ldr	r3, [pc, #352]	; (800c968 <tcp_input+0x4a4>)
 800c808:	f240 1215 	movw	r2, #277	; 0x115
 800c80c:	495a      	ldr	r1, [pc, #360]	; (800c978 <tcp_input+0x4b4>)
 800c80e:	4858      	ldr	r0, [pc, #352]	; (800c970 <tcp_input+0x4ac>)
 800c810:	f006 fe02 	bl	8013418 <iprintf>
      break;
 800c814:	e009      	b.n	800c82a <tcp_input+0x366>
    }
    prev = pcb;
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	61fb      	str	r3, [r7, #28]
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	2b00      	cmp	r3, #0
 800c824:	f47f af5e 	bne.w	800c6e4 <tcp_input+0x220>
 800c828:	e000      	b.n	800c82c <tcp_input+0x368>
      break;
 800c82a:	bf00      	nop
  }

  if (pcb == NULL) {
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f040 80aa 	bne.w	800c988 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c834:	4b51      	ldr	r3, [pc, #324]	; (800c97c <tcp_input+0x4b8>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	61fb      	str	r3, [r7, #28]
 800c83a:	e03f      	b.n	800c8bc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	7d1b      	ldrb	r3, [r3, #20]
 800c840:	2b0a      	cmp	r3, #10
 800c842:	d006      	beq.n	800c852 <tcp_input+0x38e>
 800c844:	4b48      	ldr	r3, [pc, #288]	; (800c968 <tcp_input+0x4a4>)
 800c846:	f240 121f 	movw	r2, #287	; 0x11f
 800c84a:	494d      	ldr	r1, [pc, #308]	; (800c980 <tcp_input+0x4bc>)
 800c84c:	4848      	ldr	r0, [pc, #288]	; (800c970 <tcp_input+0x4ac>)
 800c84e:	f006 fde3 	bl	8013418 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	7a1b      	ldrb	r3, [r3, #8]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d009      	beq.n	800c86e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	7a1a      	ldrb	r2, [r3, #8]
 800c85e:	4b41      	ldr	r3, [pc, #260]	; (800c964 <tcp_input+0x4a0>)
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c866:	3301      	adds	r3, #1
 800c868:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d122      	bne.n	800c8b4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	8b1a      	ldrh	r2, [r3, #24]
 800c872:	4b3b      	ldr	r3, [pc, #236]	; (800c960 <tcp_input+0x49c>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	881b      	ldrh	r3, [r3, #0]
 800c878:	b29b      	uxth	r3, r3
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d11b      	bne.n	800c8b6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c87e:	69fb      	ldr	r3, [r7, #28]
 800c880:	8ada      	ldrh	r2, [r3, #22]
 800c882:	4b37      	ldr	r3, [pc, #220]	; (800c960 <tcp_input+0x49c>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	885b      	ldrh	r3, [r3, #2]
 800c888:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d113      	bne.n	800c8b6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	4b34      	ldr	r3, [pc, #208]	; (800c964 <tcp_input+0x4a0>)
 800c894:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c896:	429a      	cmp	r2, r3
 800c898:	d10d      	bne.n	800c8b6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	4b31      	ldr	r3, [pc, #196]	; (800c964 <tcp_input+0x4a0>)
 800c8a0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d107      	bne.n	800c8b6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c8a6:	69f8      	ldr	r0, [r7, #28]
 800c8a8:	f000 fb56 	bl	800cf58 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f7fd ff3f 	bl	800a730 <pbuf_free>
        return;
 800c8b2:	e1fd      	b.n	800ccb0 <tcp_input+0x7ec>
        continue;
 800c8b4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	61fb      	str	r3, [r7, #28]
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1bc      	bne.n	800c83c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c8c6:	4b2f      	ldr	r3, [pc, #188]	; (800c984 <tcp_input+0x4c0>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	617b      	str	r3, [r7, #20]
 800c8cc:	e02a      	b.n	800c924 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	7a1b      	ldrb	r3, [r3, #8]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00c      	beq.n	800c8f0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	7a1a      	ldrb	r2, [r3, #8]
 800c8da:	4b22      	ldr	r3, [pc, #136]	; (800c964 <tcp_input+0x4a0>)
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d002      	beq.n	800c8f0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	61bb      	str	r3, [r7, #24]
        continue;
 800c8ee:	e016      	b.n	800c91e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	8ada      	ldrh	r2, [r3, #22]
 800c8f4:	4b1a      	ldr	r3, [pc, #104]	; (800c960 <tcp_input+0x49c>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	885b      	ldrh	r3, [r3, #2]
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d10c      	bne.n	800c91a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	4b17      	ldr	r3, [pc, #92]	; (800c964 <tcp_input+0x4a0>)
 800c906:	695b      	ldr	r3, [r3, #20]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d00f      	beq.n	800c92c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00d      	beq.n	800c92e <tcp_input+0x46a>
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d009      	beq.n	800c92e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	617b      	str	r3, [r7, #20]
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1d1      	bne.n	800c8ce <tcp_input+0x40a>
 800c92a:	e000      	b.n	800c92e <tcp_input+0x46a>
            break;
 800c92c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d029      	beq.n	800c988 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00a      	beq.n	800c950 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	68da      	ldr	r2, [r3, #12]
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c942:	4b10      	ldr	r3, [pc, #64]	; (800c984 <tcp_input+0x4c0>)
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c94a:	4a0e      	ldr	r2, [pc, #56]	; (800c984 <tcp_input+0x4c0>)
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c950:	6978      	ldr	r0, [r7, #20]
 800c952:	f000 fa03 	bl	800cd5c <tcp_listen_input>
      }
      pbuf_free(p);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7fd feea 	bl	800a730 <pbuf_free>
      return;
 800c95c:	e1a8      	b.n	800ccb0 <tcp_input+0x7ec>
 800c95e:	bf00      	nop
 800c960:	20008e78 	.word	0x20008e78
 800c964:	20003720 	.word	0x20003720
 800c968:	08015abc 	.word	0x08015abc
 800c96c:	08015be8 	.word	0x08015be8
 800c970:	08015b08 	.word	0x08015b08
 800c974:	20008e5c 	.word	0x20008e5c
 800c978:	08015c14 	.word	0x08015c14
 800c97c:	20008e60 	.word	0x20008e60
 800c980:	08015c40 	.word	0x08015c40
 800c984:	20008e58 	.word	0x20008e58
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f000 8158 	beq.w	800cc40 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c990:	4b95      	ldr	r3, [pc, #596]	; (800cbe8 <tcp_input+0x724>)
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	891a      	ldrh	r2, [r3, #8]
 800c99a:	4b93      	ldr	r3, [pc, #588]	; (800cbe8 <tcp_input+0x724>)
 800c99c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c99e:	4a92      	ldr	r2, [pc, #584]	; (800cbe8 <tcp_input+0x724>)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c9a4:	4b91      	ldr	r3, [pc, #580]	; (800cbec <tcp_input+0x728>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a8f      	ldr	r2, [pc, #572]	; (800cbe8 <tcp_input+0x724>)
 800c9aa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c9ac:	4b90      	ldr	r3, [pc, #576]	; (800cbf0 <tcp_input+0x72c>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c9b2:	4b90      	ldr	r3, [pc, #576]	; (800cbf4 <tcp_input+0x730>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c9b8:	4b8f      	ldr	r3, [pc, #572]	; (800cbf8 <tcp_input+0x734>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c9be:	4b8f      	ldr	r3, [pc, #572]	; (800cbfc <tcp_input+0x738>)
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	f003 0308 	and.w	r3, r3, #8
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d006      	beq.n	800c9d8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	7b5b      	ldrb	r3, [r3, #13]
 800c9ce:	f043 0301 	orr.w	r3, r3, #1
 800c9d2:	b2da      	uxtb	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d017      	beq.n	800ca10 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c9e0:	69f8      	ldr	r0, [r7, #28]
 800c9e2:	f7ff f929 	bl	800bc38 <tcp_process_refused_data>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	f113 0f0d 	cmn.w	r3, #13
 800c9ec:	d007      	beq.n	800c9fe <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00c      	beq.n	800ca10 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c9f6:	4b82      	ldr	r3, [pc, #520]	; (800cc00 <tcp_input+0x73c>)
 800c9f8:	881b      	ldrh	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d008      	beq.n	800ca10 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	f040 80e3 	bne.w	800cbce <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ca08:	69f8      	ldr	r0, [r7, #28]
 800ca0a:	f003 f9ad 	bl	800fd68 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ca0e:	e0de      	b.n	800cbce <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800ca10:	4a7c      	ldr	r2, [pc, #496]	; (800cc04 <tcp_input+0x740>)
 800ca12:	69fb      	ldr	r3, [r7, #28]
 800ca14:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ca16:	69f8      	ldr	r0, [r7, #28]
 800ca18:	f000 fb18 	bl	800d04c <tcp_process>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ca20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca24:	f113 0f0d 	cmn.w	r3, #13
 800ca28:	f000 80d3 	beq.w	800cbd2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ca2c:	4b71      	ldr	r3, [pc, #452]	; (800cbf4 <tcp_input+0x730>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	f003 0308 	and.w	r3, r3, #8
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d015      	beq.n	800ca64 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d008      	beq.n	800ca54 <tcp_input+0x590>
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca48:	69fa      	ldr	r2, [r7, #28]
 800ca4a:	6912      	ldr	r2, [r2, #16]
 800ca4c:	f06f 010d 	mvn.w	r1, #13
 800ca50:	4610      	mov	r0, r2
 800ca52:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ca54:	69f9      	ldr	r1, [r7, #28]
 800ca56:	486c      	ldr	r0, [pc, #432]	; (800cc08 <tcp_input+0x744>)
 800ca58:	f7ff fbbc 	bl	800c1d4 <tcp_pcb_remove>
        tcp_free(pcb);
 800ca5c:	69f8      	ldr	r0, [r7, #28]
 800ca5e:	f7fe f9a9 	bl	800adb4 <tcp_free>
 800ca62:	e0da      	b.n	800cc1a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ca64:	2300      	movs	r3, #0
 800ca66:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ca68:	4b63      	ldr	r3, [pc, #396]	; (800cbf8 <tcp_input+0x734>)
 800ca6a:	881b      	ldrh	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d01d      	beq.n	800caac <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ca70:	4b61      	ldr	r3, [pc, #388]	; (800cbf8 <tcp_input+0x734>)
 800ca72:	881b      	ldrh	r3, [r3, #0]
 800ca74:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00a      	beq.n	800ca96 <tcp_input+0x5d2>
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca86:	69fa      	ldr	r2, [r7, #28]
 800ca88:	6910      	ldr	r0, [r2, #16]
 800ca8a:	89fa      	ldrh	r2, [r7, #14]
 800ca8c:	69f9      	ldr	r1, [r7, #28]
 800ca8e:	4798      	blx	r3
 800ca90:	4603      	mov	r3, r0
 800ca92:	74fb      	strb	r3, [r7, #19]
 800ca94:	e001      	b.n	800ca9a <tcp_input+0x5d6>
 800ca96:	2300      	movs	r3, #0
 800ca98:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ca9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca9e:	f113 0f0d 	cmn.w	r3, #13
 800caa2:	f000 8098 	beq.w	800cbd6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800caa6:	4b54      	ldr	r3, [pc, #336]	; (800cbf8 <tcp_input+0x734>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800caac:	69f8      	ldr	r0, [r7, #28]
 800caae:	f000 f915 	bl	800ccdc <tcp_input_delayed_close>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f040 8090 	bne.w	800cbda <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800caba:	4b4d      	ldr	r3, [pc, #308]	; (800cbf0 <tcp_input+0x72c>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d041      	beq.n	800cb46 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d006      	beq.n	800cad8 <tcp_input+0x614>
 800caca:	4b50      	ldr	r3, [pc, #320]	; (800cc0c <tcp_input+0x748>)
 800cacc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cad0:	494f      	ldr	r1, [pc, #316]	; (800cc10 <tcp_input+0x74c>)
 800cad2:	4850      	ldr	r0, [pc, #320]	; (800cc14 <tcp_input+0x750>)
 800cad4:	f006 fca0 	bl	8013418 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	8b5b      	ldrh	r3, [r3, #26]
 800cadc:	f003 0310 	and.w	r3, r3, #16
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d008      	beq.n	800caf6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800cae4:	4b42      	ldr	r3, [pc, #264]	; (800cbf0 <tcp_input+0x72c>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fd fe21 	bl	800a730 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800caee:	69f8      	ldr	r0, [r7, #28]
 800caf0:	f7fe fc48 	bl	800b384 <tcp_abort>
            goto aborted;
 800caf4:	e091      	b.n	800cc1a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00c      	beq.n	800cb1a <tcp_input+0x656>
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	6918      	ldr	r0, [r3, #16]
 800cb0a:	4b39      	ldr	r3, [pc, #228]	; (800cbf0 <tcp_input+0x72c>)
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	2300      	movs	r3, #0
 800cb10:	69f9      	ldr	r1, [r7, #28]
 800cb12:	47a0      	blx	r4
 800cb14:	4603      	mov	r3, r0
 800cb16:	74fb      	strb	r3, [r7, #19]
 800cb18:	e008      	b.n	800cb2c <tcp_input+0x668>
 800cb1a:	4b35      	ldr	r3, [pc, #212]	; (800cbf0 <tcp_input+0x72c>)
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	2300      	movs	r3, #0
 800cb20:	69f9      	ldr	r1, [r7, #28]
 800cb22:	2000      	movs	r0, #0
 800cb24:	f7ff f95e 	bl	800bde4 <tcp_recv_null>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800cb2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb30:	f113 0f0d 	cmn.w	r3, #13
 800cb34:	d053      	beq.n	800cbde <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800cb36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d003      	beq.n	800cb46 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cb3e:	4b2c      	ldr	r3, [pc, #176]	; (800cbf0 <tcp_input+0x72c>)
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cb46:	4b2b      	ldr	r3, [pc, #172]	; (800cbf4 <tcp_input+0x730>)
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	f003 0320 	and.w	r3, r3, #32
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d030      	beq.n	800cbb4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d009      	beq.n	800cb6e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb5e:	7b5a      	ldrb	r2, [r3, #13]
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb64:	f042 0220 	orr.w	r2, r2, #32
 800cb68:	b2d2      	uxtb	r2, r2
 800cb6a:	735a      	strb	r2, [r3, #13]
 800cb6c:	e022      	b.n	800cbb4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb72:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cb76:	d005      	beq.n	800cb84 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	b29a      	uxth	r2, r3
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d00b      	beq.n	800cba6 <tcp_input+0x6e2>
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	6918      	ldr	r0, [r3, #16]
 800cb98:	2300      	movs	r3, #0
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	69f9      	ldr	r1, [r7, #28]
 800cb9e:	47a0      	blx	r4
 800cba0:	4603      	mov	r3, r0
 800cba2:	74fb      	strb	r3, [r7, #19]
 800cba4:	e001      	b.n	800cbaa <tcp_input+0x6e6>
 800cba6:	2300      	movs	r3, #0
 800cba8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cbaa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cbae:	f113 0f0d 	cmn.w	r3, #13
 800cbb2:	d016      	beq.n	800cbe2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cbb4:	4b13      	ldr	r3, [pc, #76]	; (800cc04 <tcp_input+0x740>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cbba:	69f8      	ldr	r0, [r7, #28]
 800cbbc:	f000 f88e 	bl	800ccdc <tcp_input_delayed_close>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d128      	bne.n	800cc18 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cbc6:	69f8      	ldr	r0, [r7, #28]
 800cbc8:	f002 fac8 	bl	800f15c <tcp_output>
 800cbcc:	e025      	b.n	800cc1a <tcp_input+0x756>
        goto aborted;
 800cbce:	bf00      	nop
 800cbd0:	e023      	b.n	800cc1a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cbd2:	bf00      	nop
 800cbd4:	e021      	b.n	800cc1a <tcp_input+0x756>
              goto aborted;
 800cbd6:	bf00      	nop
 800cbd8:	e01f      	b.n	800cc1a <tcp_input+0x756>
          goto aborted;
 800cbda:	bf00      	nop
 800cbdc:	e01d      	b.n	800cc1a <tcp_input+0x756>
            goto aborted;
 800cbde:	bf00      	nop
 800cbe0:	e01b      	b.n	800cc1a <tcp_input+0x756>
              goto aborted;
 800cbe2:	bf00      	nop
 800cbe4:	e019      	b.n	800cc1a <tcp_input+0x756>
 800cbe6:	bf00      	nop
 800cbe8:	20008e68 	.word	0x20008e68
 800cbec:	20008e78 	.word	0x20008e78
 800cbf0:	20008e98 	.word	0x20008e98
 800cbf4:	20008e95 	.word	0x20008e95
 800cbf8:	20008e90 	.word	0x20008e90
 800cbfc:	20008e94 	.word	0x20008e94
 800cc00:	20008e92 	.word	0x20008e92
 800cc04:	20008e9c 	.word	0x20008e9c
 800cc08:	20008e5c 	.word	0x20008e5c
 800cc0c:	08015abc 	.word	0x08015abc
 800cc10:	08015c70 	.word	0x08015c70
 800cc14:	08015b08 	.word	0x08015b08
          goto aborted;
 800cc18:	bf00      	nop
    tcp_input_pcb = NULL;
 800cc1a:	4b27      	ldr	r3, [pc, #156]	; (800ccb8 <tcp_input+0x7f4>)
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cc20:	4b26      	ldr	r3, [pc, #152]	; (800ccbc <tcp_input+0x7f8>)
 800cc22:	2200      	movs	r2, #0
 800cc24:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800cc26:	4b26      	ldr	r3, [pc, #152]	; (800ccc0 <tcp_input+0x7fc>)
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d03f      	beq.n	800ccae <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800cc2e:	4b24      	ldr	r3, [pc, #144]	; (800ccc0 <tcp_input+0x7fc>)
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fd fd7c 	bl	800a730 <pbuf_free>
      inseg.p = NULL;
 800cc38:	4b21      	ldr	r3, [pc, #132]	; (800ccc0 <tcp_input+0x7fc>)
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cc3e:	e036      	b.n	800ccae <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cc40:	4b20      	ldr	r3, [pc, #128]	; (800ccc4 <tcp_input+0x800>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	899b      	ldrh	r3, [r3, #12]
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7fc fabd 	bl	80091c8 <lwip_htons>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	f003 0304 	and.w	r3, r3, #4
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d118      	bne.n	800cc8c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc5a:	4b1b      	ldr	r3, [pc, #108]	; (800ccc8 <tcp_input+0x804>)
 800cc5c:	6819      	ldr	r1, [r3, #0]
 800cc5e:	4b1b      	ldr	r3, [pc, #108]	; (800cccc <tcp_input+0x808>)
 800cc60:	881b      	ldrh	r3, [r3, #0]
 800cc62:	461a      	mov	r2, r3
 800cc64:	4b1a      	ldr	r3, [pc, #104]	; (800ccd0 <tcp_input+0x80c>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc6a:	4b16      	ldr	r3, [pc, #88]	; (800ccc4 <tcp_input+0x800>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc6e:	885b      	ldrh	r3, [r3, #2]
 800cc70:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc72:	4a14      	ldr	r2, [pc, #80]	; (800ccc4 <tcp_input+0x800>)
 800cc74:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc76:	8812      	ldrh	r2, [r2, #0]
 800cc78:	b292      	uxth	r2, r2
 800cc7a:	9202      	str	r2, [sp, #8]
 800cc7c:	9301      	str	r3, [sp, #4]
 800cc7e:	4b15      	ldr	r3, [pc, #84]	; (800ccd4 <tcp_input+0x810>)
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	4b15      	ldr	r3, [pc, #84]	; (800ccd8 <tcp_input+0x814>)
 800cc84:	4602      	mov	r2, r0
 800cc86:	2000      	movs	r0, #0
 800cc88:	f003 f81c 	bl	800fcc4 <tcp_rst>
    pbuf_free(p);
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f7fd fd4f 	bl	800a730 <pbuf_free>
  return;
 800cc92:	e00c      	b.n	800ccae <tcp_input+0x7ea>
    goto dropped;
 800cc94:	bf00      	nop
 800cc96:	e006      	b.n	800cca6 <tcp_input+0x7e2>
    goto dropped;
 800cc98:	bf00      	nop
 800cc9a:	e004      	b.n	800cca6 <tcp_input+0x7e2>
    goto dropped;
 800cc9c:	bf00      	nop
 800cc9e:	e002      	b.n	800cca6 <tcp_input+0x7e2>
      goto dropped;
 800cca0:	bf00      	nop
 800cca2:	e000      	b.n	800cca6 <tcp_input+0x7e2>
      goto dropped;
 800cca4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f7fd fd42 	bl	800a730 <pbuf_free>
 800ccac:	e000      	b.n	800ccb0 <tcp_input+0x7ec>
  return;
 800ccae:	bf00      	nop
}
 800ccb0:	3724      	adds	r7, #36	; 0x24
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd90      	pop	{r4, r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20008e9c 	.word	0x20008e9c
 800ccbc:	20008e98 	.word	0x20008e98
 800ccc0:	20008e68 	.word	0x20008e68
 800ccc4:	20008e78 	.word	0x20008e78
 800ccc8:	20008e8c 	.word	0x20008e8c
 800cccc:	20008e92 	.word	0x20008e92
 800ccd0:	20008e88 	.word	0x20008e88
 800ccd4:	20003730 	.word	0x20003730
 800ccd8:	20003734 	.word	0x20003734

0800ccdc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d106      	bne.n	800ccf8 <tcp_input_delayed_close+0x1c>
 800ccea:	4b17      	ldr	r3, [pc, #92]	; (800cd48 <tcp_input_delayed_close+0x6c>)
 800ccec:	f240 225a 	movw	r2, #602	; 0x25a
 800ccf0:	4916      	ldr	r1, [pc, #88]	; (800cd4c <tcp_input_delayed_close+0x70>)
 800ccf2:	4817      	ldr	r0, [pc, #92]	; (800cd50 <tcp_input_delayed_close+0x74>)
 800ccf4:	f006 fb90 	bl	8013418 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ccf8:	4b16      	ldr	r3, [pc, #88]	; (800cd54 <tcp_input_delayed_close+0x78>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	f003 0310 	and.w	r3, r3, #16
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d01c      	beq.n	800cd3e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	8b5b      	ldrh	r3, [r3, #26]
 800cd08:	f003 0310 	and.w	r3, r3, #16
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10d      	bne.n	800cd2c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d008      	beq.n	800cd2c <tcp_input_delayed_close+0x50>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	6912      	ldr	r2, [r2, #16]
 800cd24:	f06f 010e 	mvn.w	r1, #14
 800cd28:	4610      	mov	r0, r2
 800cd2a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cd2c:	6879      	ldr	r1, [r7, #4]
 800cd2e:	480a      	ldr	r0, [pc, #40]	; (800cd58 <tcp_input_delayed_close+0x7c>)
 800cd30:	f7ff fa50 	bl	800c1d4 <tcp_pcb_remove>
    tcp_free(pcb);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f7fe f83d 	bl	800adb4 <tcp_free>
    return 1;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e000      	b.n	800cd40 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800cd3e:	2300      	movs	r3, #0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	08015abc 	.word	0x08015abc
 800cd4c:	08015c8c 	.word	0x08015c8c
 800cd50:	08015b08 	.word	0x08015b08
 800cd54:	20008e95 	.word	0x20008e95
 800cd58:	20008e5c 	.word	0x20008e5c

0800cd5c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800cd5c:	b590      	push	{r4, r7, lr}
 800cd5e:	b08b      	sub	sp, #44	; 0x2c
 800cd60:	af04      	add	r7, sp, #16
 800cd62:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800cd64:	4b6f      	ldr	r3, [pc, #444]	; (800cf24 <tcp_listen_input+0x1c8>)
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	f003 0304 	and.w	r3, r3, #4
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f040 80d2 	bne.w	800cf16 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d106      	bne.n	800cd86 <tcp_listen_input+0x2a>
 800cd78:	4b6b      	ldr	r3, [pc, #428]	; (800cf28 <tcp_listen_input+0x1cc>)
 800cd7a:	f240 2281 	movw	r2, #641	; 0x281
 800cd7e:	496b      	ldr	r1, [pc, #428]	; (800cf2c <tcp_listen_input+0x1d0>)
 800cd80:	486b      	ldr	r0, [pc, #428]	; (800cf30 <tcp_listen_input+0x1d4>)
 800cd82:	f006 fb49 	bl	8013418 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800cd86:	4b67      	ldr	r3, [pc, #412]	; (800cf24 <tcp_listen_input+0x1c8>)
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	f003 0310 	and.w	r3, r3, #16
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d019      	beq.n	800cdc6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd92:	4b68      	ldr	r3, [pc, #416]	; (800cf34 <tcp_listen_input+0x1d8>)
 800cd94:	6819      	ldr	r1, [r3, #0]
 800cd96:	4b68      	ldr	r3, [pc, #416]	; (800cf38 <tcp_listen_input+0x1dc>)
 800cd98:	881b      	ldrh	r3, [r3, #0]
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	4b67      	ldr	r3, [pc, #412]	; (800cf3c <tcp_listen_input+0x1e0>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cda2:	4b67      	ldr	r3, [pc, #412]	; (800cf40 <tcp_listen_input+0x1e4>)
 800cda4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cda6:	885b      	ldrh	r3, [r3, #2]
 800cda8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cdaa:	4a65      	ldr	r2, [pc, #404]	; (800cf40 <tcp_listen_input+0x1e4>)
 800cdac:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cdae:	8812      	ldrh	r2, [r2, #0]
 800cdb0:	b292      	uxth	r2, r2
 800cdb2:	9202      	str	r2, [sp, #8]
 800cdb4:	9301      	str	r3, [sp, #4]
 800cdb6:	4b63      	ldr	r3, [pc, #396]	; (800cf44 <tcp_listen_input+0x1e8>)
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	4b63      	ldr	r3, [pc, #396]	; (800cf48 <tcp_listen_input+0x1ec>)
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f002 ff80 	bl	800fcc4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800cdc4:	e0a9      	b.n	800cf1a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800cdc6:	4b57      	ldr	r3, [pc, #348]	; (800cf24 <tcp_listen_input+0x1c8>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	f003 0302 	and.w	r3, r3, #2
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f000 80a3 	beq.w	800cf1a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	7d5b      	ldrb	r3, [r3, #21]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7ff f927 	bl	800c02c <tcp_alloc>
 800cdde:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d111      	bne.n	800ce0a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	699b      	ldr	r3, [r3, #24]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00a      	beq.n	800ce04 <tcp_listen_input+0xa8>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	6910      	ldr	r0, [r2, #16]
 800cdf6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	4798      	blx	r3
 800cdfe:	4603      	mov	r3, r0
 800ce00:	73bb      	strb	r3, [r7, #14]
      return;
 800ce02:	e08b      	b.n	800cf1c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ce04:	23f0      	movs	r3, #240	; 0xf0
 800ce06:	73bb      	strb	r3, [r7, #14]
      return;
 800ce08:	e088      	b.n	800cf1c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ce0a:	4b50      	ldr	r3, [pc, #320]	; (800cf4c <tcp_listen_input+0x1f0>)
 800ce0c:	695a      	ldr	r2, [r3, #20]
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ce12:	4b4e      	ldr	r3, [pc, #312]	; (800cf4c <tcp_listen_input+0x1f0>)
 800ce14:	691a      	ldr	r2, [r3, #16]
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	8ada      	ldrh	r2, [r3, #22]
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ce22:	4b47      	ldr	r3, [pc, #284]	; (800cf40 <tcp_listen_input+0x1e4>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	881b      	ldrh	r3, [r3, #0]
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	2203      	movs	r2, #3
 800ce32:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ce34:	4b41      	ldr	r3, [pc, #260]	; (800cf3c <tcp_listen_input+0x1e0>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	1c5a      	adds	r2, r3, #1
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ce46:	6978      	ldr	r0, [r7, #20]
 800ce48:	f7ff fa58 	bl	800c2fc <tcp_next_iss>
 800ce4c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	693a      	ldr	r2, [r7, #16]
 800ce52:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	693a      	ldr	r2, [r7, #16]
 800ce58:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	693a      	ldr	r2, [r7, #16]
 800ce5e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	693a      	ldr	r2, [r7, #16]
 800ce64:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ce66:	4b35      	ldr	r3, [pc, #212]	; (800cf3c <tcp_listen_input+0x1e0>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	1e5a      	subs	r2, r3, #1
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	691a      	ldr	r2, [r3, #16]
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	7a5b      	ldrb	r3, [r3, #9]
 800ce82:	f003 030c 	and.w	r3, r3, #12
 800ce86:	b2da      	uxtb	r2, r3
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	7a1a      	ldrb	r2, [r3, #8]
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ce94:	4b2e      	ldr	r3, [pc, #184]	; (800cf50 <tcp_listen_input+0x1f4>)
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	60da      	str	r2, [r3, #12]
 800ce9c:	4a2c      	ldr	r2, [pc, #176]	; (800cf50 <tcp_listen_input+0x1f4>)
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	6013      	str	r3, [r2, #0]
 800cea2:	f003 f8d1 	bl	8010048 <tcp_timer_needed>
 800cea6:	4b2b      	ldr	r3, [pc, #172]	; (800cf54 <tcp_listen_input+0x1f8>)
 800cea8:	2201      	movs	r2, #1
 800ceaa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ceac:	6978      	ldr	r0, [r7, #20]
 800ceae:	f001 fd8f 	bl	800e9d0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ceb2:	4b23      	ldr	r3, [pc, #140]	; (800cf40 <tcp_listen_input+0x1e4>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	89db      	ldrh	r3, [r3, #14]
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	3304      	adds	r3, #4
 800ced4:	4618      	mov	r0, r3
 800ced6:	f005 f84f 	bl	8011f78 <ip4_route>
 800ceda:	4601      	mov	r1, r0
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	3304      	adds	r3, #4
 800cee0:	461a      	mov	r2, r3
 800cee2:	4620      	mov	r0, r4
 800cee4:	f7ff fa30 	bl	800c348 <tcp_eff_send_mss_netif>
 800cee8:	4603      	mov	r3, r0
 800ceea:	461a      	mov	r2, r3
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cef0:	2112      	movs	r1, #18
 800cef2:	6978      	ldr	r0, [r7, #20]
 800cef4:	f002 f844 	bl	800ef80 <tcp_enqueue_flags>
 800cef8:	4603      	mov	r3, r0
 800cefa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cefc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d004      	beq.n	800cf0e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800cf04:	2100      	movs	r1, #0
 800cf06:	6978      	ldr	r0, [r7, #20]
 800cf08:	f7fe f97e 	bl	800b208 <tcp_abandon>
      return;
 800cf0c:	e006      	b.n	800cf1c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800cf0e:	6978      	ldr	r0, [r7, #20]
 800cf10:	f002 f924 	bl	800f15c <tcp_output>
  return;
 800cf14:	e001      	b.n	800cf1a <tcp_listen_input+0x1be>
    return;
 800cf16:	bf00      	nop
 800cf18:	e000      	b.n	800cf1c <tcp_listen_input+0x1c0>
  return;
 800cf1a:	bf00      	nop
}
 800cf1c:	371c      	adds	r7, #28
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd90      	pop	{r4, r7, pc}
 800cf22:	bf00      	nop
 800cf24:	20008e94 	.word	0x20008e94
 800cf28:	08015abc 	.word	0x08015abc
 800cf2c:	08015cb4 	.word	0x08015cb4
 800cf30:	08015b08 	.word	0x08015b08
 800cf34:	20008e8c 	.word	0x20008e8c
 800cf38:	20008e92 	.word	0x20008e92
 800cf3c:	20008e88 	.word	0x20008e88
 800cf40:	20008e78 	.word	0x20008e78
 800cf44:	20003730 	.word	0x20003730
 800cf48:	20003734 	.word	0x20003734
 800cf4c:	20003720 	.word	0x20003720
 800cf50:	20008e5c 	.word	0x20008e5c
 800cf54:	20008e64 	.word	0x20008e64

0800cf58 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af04      	add	r7, sp, #16
 800cf5e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cf60:	4b2f      	ldr	r3, [pc, #188]	; (800d020 <tcp_timewait_input+0xc8>)
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	f003 0304 	and.w	r3, r3, #4
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d153      	bne.n	800d014 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d106      	bne.n	800cf80 <tcp_timewait_input+0x28>
 800cf72:	4b2c      	ldr	r3, [pc, #176]	; (800d024 <tcp_timewait_input+0xcc>)
 800cf74:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cf78:	492b      	ldr	r1, [pc, #172]	; (800d028 <tcp_timewait_input+0xd0>)
 800cf7a:	482c      	ldr	r0, [pc, #176]	; (800d02c <tcp_timewait_input+0xd4>)
 800cf7c:	f006 fa4c 	bl	8013418 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cf80:	4b27      	ldr	r3, [pc, #156]	; (800d020 <tcp_timewait_input+0xc8>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	f003 0302 	and.w	r3, r3, #2
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d02a      	beq.n	800cfe2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cf8c:	4b28      	ldr	r3, [pc, #160]	; (800d030 <tcp_timewait_input+0xd8>)
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	db2d      	blt.n	800cff6 <tcp_timewait_input+0x9e>
 800cf9a:	4b25      	ldr	r3, [pc, #148]	; (800d030 <tcp_timewait_input+0xd8>)
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cfa6:	440b      	add	r3, r1
 800cfa8:	1ad3      	subs	r3, r2, r3
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	dc23      	bgt.n	800cff6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfae:	4b21      	ldr	r3, [pc, #132]	; (800d034 <tcp_timewait_input+0xdc>)
 800cfb0:	6819      	ldr	r1, [r3, #0]
 800cfb2:	4b21      	ldr	r3, [pc, #132]	; (800d038 <tcp_timewait_input+0xe0>)
 800cfb4:	881b      	ldrh	r3, [r3, #0]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	4b1d      	ldr	r3, [pc, #116]	; (800d030 <tcp_timewait_input+0xd8>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cfbe:	4b1f      	ldr	r3, [pc, #124]	; (800d03c <tcp_timewait_input+0xe4>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfc2:	885b      	ldrh	r3, [r3, #2]
 800cfc4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cfc6:	4a1d      	ldr	r2, [pc, #116]	; (800d03c <tcp_timewait_input+0xe4>)
 800cfc8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfca:	8812      	ldrh	r2, [r2, #0]
 800cfcc:	b292      	uxth	r2, r2
 800cfce:	9202      	str	r2, [sp, #8]
 800cfd0:	9301      	str	r3, [sp, #4]
 800cfd2:	4b1b      	ldr	r3, [pc, #108]	; (800d040 <tcp_timewait_input+0xe8>)
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	4b1b      	ldr	r3, [pc, #108]	; (800d044 <tcp_timewait_input+0xec>)
 800cfd8:	4602      	mov	r2, r0
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f002 fe72 	bl	800fcc4 <tcp_rst>
      return;
 800cfe0:	e01b      	b.n	800d01a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cfe2:	4b0f      	ldr	r3, [pc, #60]	; (800d020 <tcp_timewait_input+0xc8>)
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	f003 0301 	and.w	r3, r3, #1
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d003      	beq.n	800cff6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cfee:	4b16      	ldr	r3, [pc, #88]	; (800d048 <tcp_timewait_input+0xf0>)
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cff6:	4b10      	ldr	r3, [pc, #64]	; (800d038 <tcp_timewait_input+0xe0>)
 800cff8:	881b      	ldrh	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00c      	beq.n	800d018 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	8b5b      	ldrh	r3, [r3, #26]
 800d002:	f043 0302 	orr.w	r3, r3, #2
 800d006:	b29a      	uxth	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f002 f8a5 	bl	800f15c <tcp_output>
  }
  return;
 800d012:	e001      	b.n	800d018 <tcp_timewait_input+0xc0>
    return;
 800d014:	bf00      	nop
 800d016:	e000      	b.n	800d01a <tcp_timewait_input+0xc2>
  return;
 800d018:	bf00      	nop
}
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	20008e94 	.word	0x20008e94
 800d024:	08015abc 	.word	0x08015abc
 800d028:	08015cd4 	.word	0x08015cd4
 800d02c:	08015b08 	.word	0x08015b08
 800d030:	20008e88 	.word	0x20008e88
 800d034:	20008e8c 	.word	0x20008e8c
 800d038:	20008e92 	.word	0x20008e92
 800d03c:	20008e78 	.word	0x20008e78
 800d040:	20003730 	.word	0x20003730
 800d044:	20003734 	.word	0x20003734
 800d048:	20008e50 	.word	0x20008e50

0800d04c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d04c:	b590      	push	{r4, r7, lr}
 800d04e:	b08d      	sub	sp, #52	; 0x34
 800d050:	af04      	add	r7, sp, #16
 800d052:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d054:	2300      	movs	r3, #0
 800d056:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d058:	2300      	movs	r3, #0
 800d05a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d106      	bne.n	800d070 <tcp_process+0x24>
 800d062:	4b9d      	ldr	r3, [pc, #628]	; (800d2d8 <tcp_process+0x28c>)
 800d064:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d068:	499c      	ldr	r1, [pc, #624]	; (800d2dc <tcp_process+0x290>)
 800d06a:	489d      	ldr	r0, [pc, #628]	; (800d2e0 <tcp_process+0x294>)
 800d06c:	f006 f9d4 	bl	8013418 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d070:	4b9c      	ldr	r3, [pc, #624]	; (800d2e4 <tcp_process+0x298>)
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	f003 0304 	and.w	r3, r3, #4
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d04e      	beq.n	800d11a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	7d1b      	ldrb	r3, [r3, #20]
 800d080:	2b02      	cmp	r3, #2
 800d082:	d108      	bne.n	800d096 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d088:	4b97      	ldr	r3, [pc, #604]	; (800d2e8 <tcp_process+0x29c>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d123      	bne.n	800d0d8 <tcp_process+0x8c>
        acceptable = 1;
 800d090:	2301      	movs	r3, #1
 800d092:	76fb      	strb	r3, [r7, #27]
 800d094:	e020      	b.n	800d0d8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d09a:	4b94      	ldr	r3, [pc, #592]	; (800d2ec <tcp_process+0x2a0>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d102      	bne.n	800d0a8 <tcp_process+0x5c>
        acceptable = 1;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	76fb      	strb	r3, [r7, #27]
 800d0a6:	e017      	b.n	800d0d8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d0a8:	4b90      	ldr	r3, [pc, #576]	; (800d2ec <tcp_process+0x2a0>)
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	db10      	blt.n	800d0d8 <tcp_process+0x8c>
 800d0b6:	4b8d      	ldr	r3, [pc, #564]	; (800d2ec <tcp_process+0x2a0>)
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0be:	6879      	ldr	r1, [r7, #4]
 800d0c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d0c2:	440b      	add	r3, r1
 800d0c4:	1ad3      	subs	r3, r2, r3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	dc06      	bgt.n	800d0d8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	8b5b      	ldrh	r3, [r3, #26]
 800d0ce:	f043 0302 	orr.w	r3, r3, #2
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d0d8:	7efb      	ldrb	r3, [r7, #27]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d01b      	beq.n	800d116 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	7d1b      	ldrb	r3, [r3, #20]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d106      	bne.n	800d0f4 <tcp_process+0xa8>
 800d0e6:	4b7c      	ldr	r3, [pc, #496]	; (800d2d8 <tcp_process+0x28c>)
 800d0e8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d0ec:	4980      	ldr	r1, [pc, #512]	; (800d2f0 <tcp_process+0x2a4>)
 800d0ee:	487c      	ldr	r0, [pc, #496]	; (800d2e0 <tcp_process+0x294>)
 800d0f0:	f006 f992 	bl	8013418 <iprintf>
      recv_flags |= TF_RESET;
 800d0f4:	4b7f      	ldr	r3, [pc, #508]	; (800d2f4 <tcp_process+0x2a8>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	f043 0308 	orr.w	r3, r3, #8
 800d0fc:	b2da      	uxtb	r2, r3
 800d0fe:	4b7d      	ldr	r3, [pc, #500]	; (800d2f4 <tcp_process+0x2a8>)
 800d100:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	8b5b      	ldrh	r3, [r3, #26]
 800d106:	f023 0301 	bic.w	r3, r3, #1
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d110:	f06f 030d 	mvn.w	r3, #13
 800d114:	e37a      	b.n	800d80c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	e378      	b.n	800d80c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d11a:	4b72      	ldr	r3, [pc, #456]	; (800d2e4 <tcp_process+0x298>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	f003 0302 	and.w	r3, r3, #2
 800d122:	2b00      	cmp	r3, #0
 800d124:	d010      	beq.n	800d148 <tcp_process+0xfc>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	7d1b      	ldrb	r3, [r3, #20]
 800d12a:	2b02      	cmp	r3, #2
 800d12c:	d00c      	beq.n	800d148 <tcp_process+0xfc>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	7d1b      	ldrb	r3, [r3, #20]
 800d132:	2b03      	cmp	r3, #3
 800d134:	d008      	beq.n	800d148 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	8b5b      	ldrh	r3, [r3, #26]
 800d13a:	f043 0302 	orr.w	r3, r3, #2
 800d13e:	b29a      	uxth	r2, r3
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d144:	2300      	movs	r3, #0
 800d146:	e361      	b.n	800d80c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	8b5b      	ldrh	r3, [r3, #26]
 800d14c:	f003 0310 	and.w	r3, r3, #16
 800d150:	2b00      	cmp	r3, #0
 800d152:	d103      	bne.n	800d15c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d154:	4b68      	ldr	r3, [pc, #416]	; (800d2f8 <tcp_process+0x2ac>)
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f001 fc2f 	bl	800e9d0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	7d1b      	ldrb	r3, [r3, #20]
 800d176:	3b02      	subs	r3, #2
 800d178:	2b07      	cmp	r3, #7
 800d17a:	f200 8337 	bhi.w	800d7ec <tcp_process+0x7a0>
 800d17e:	a201      	add	r2, pc, #4	; (adr r2, 800d184 <tcp_process+0x138>)
 800d180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d184:	0800d1a5 	.word	0x0800d1a5
 800d188:	0800d3d5 	.word	0x0800d3d5
 800d18c:	0800d54d 	.word	0x0800d54d
 800d190:	0800d577 	.word	0x0800d577
 800d194:	0800d69b 	.word	0x0800d69b
 800d198:	0800d54d 	.word	0x0800d54d
 800d19c:	0800d727 	.word	0x0800d727
 800d1a0:	0800d7b7 	.word	0x0800d7b7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d1a4:	4b4f      	ldr	r3, [pc, #316]	; (800d2e4 <tcp_process+0x298>)
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	f003 0310 	and.w	r3, r3, #16
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 80e4 	beq.w	800d37a <tcp_process+0x32e>
 800d1b2:	4b4c      	ldr	r3, [pc, #304]	; (800d2e4 <tcp_process+0x298>)
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	f003 0302 	and.w	r3, r3, #2
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f000 80dd 	beq.w	800d37a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1c4:	1c5a      	adds	r2, r3, #1
 800d1c6:	4b48      	ldr	r3, [pc, #288]	; (800d2e8 <tcp_process+0x29c>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	f040 80d5 	bne.w	800d37a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d1d0:	4b46      	ldr	r3, [pc, #280]	; (800d2ec <tcp_process+0x2a0>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	1c5a      	adds	r2, r3, #1
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d1e2:	4b41      	ldr	r3, [pc, #260]	; (800d2e8 <tcp_process+0x29c>)
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d1ea:	4b44      	ldr	r3, [pc, #272]	; (800d2fc <tcp_process+0x2b0>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	89db      	ldrh	r3, [r3, #14]
 800d1f0:	b29a      	uxth	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d204:	4b39      	ldr	r3, [pc, #228]	; (800d2ec <tcp_process+0x2a0>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	1e5a      	subs	r2, r3, #1
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2204      	movs	r2, #4
 800d212:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	3304      	adds	r3, #4
 800d21c:	4618      	mov	r0, r3
 800d21e:	f004 feab 	bl	8011f78 <ip4_route>
 800d222:	4601      	mov	r1, r0
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	3304      	adds	r3, #4
 800d228:	461a      	mov	r2, r3
 800d22a:	4620      	mov	r0, r4
 800d22c:	f7ff f88c 	bl	800c348 <tcp_eff_send_mss_netif>
 800d230:	4603      	mov	r3, r0
 800d232:	461a      	mov	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d23c:	009a      	lsls	r2, r3, #2
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d242:	005b      	lsls	r3, r3, #1
 800d244:	f241 111c 	movw	r1, #4380	; 0x111c
 800d248:	428b      	cmp	r3, r1
 800d24a:	bf38      	it	cc
 800d24c:	460b      	movcc	r3, r1
 800d24e:	429a      	cmp	r2, r3
 800d250:	d204      	bcs.n	800d25c <tcp_process+0x210>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	b29b      	uxth	r3, r3
 800d25a:	e00d      	b.n	800d278 <tcp_process+0x22c>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d260:	005b      	lsls	r3, r3, #1
 800d262:	f241 121c 	movw	r2, #4380	; 0x111c
 800d266:	4293      	cmp	r3, r2
 800d268:	d904      	bls.n	800d274 <tcp_process+0x228>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d26e:	005b      	lsls	r3, r3, #1
 800d270:	b29b      	uxth	r3, r3
 800d272:	e001      	b.n	800d278 <tcp_process+0x22c>
 800d274:	f241 131c 	movw	r3, #4380	; 0x111c
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d284:	2b00      	cmp	r3, #0
 800d286:	d106      	bne.n	800d296 <tcp_process+0x24a>
 800d288:	4b13      	ldr	r3, [pc, #76]	; (800d2d8 <tcp_process+0x28c>)
 800d28a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d28e:	491c      	ldr	r1, [pc, #112]	; (800d300 <tcp_process+0x2b4>)
 800d290:	4813      	ldr	r0, [pc, #76]	; (800d2e0 <tcp_process+0x294>)
 800d292:	f006 f8c1 	bl	8013418 <iprintf>
        --pcb->snd_queuelen;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d29c:	3b01      	subs	r3, #1
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2aa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d12a      	bne.n	800d308 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2b6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d106      	bne.n	800d2cc <tcp_process+0x280>
 800d2be:	4b06      	ldr	r3, [pc, #24]	; (800d2d8 <tcp_process+0x28c>)
 800d2c0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d2c4:	490f      	ldr	r1, [pc, #60]	; (800d304 <tcp_process+0x2b8>)
 800d2c6:	4806      	ldr	r0, [pc, #24]	; (800d2e0 <tcp_process+0x294>)
 800d2c8:	f006 f8a6 	bl	8013418 <iprintf>
          pcb->unsent = rseg->next;
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	66da      	str	r2, [r3, #108]	; 0x6c
 800d2d4:	e01c      	b.n	800d310 <tcp_process+0x2c4>
 800d2d6:	bf00      	nop
 800d2d8:	08015abc 	.word	0x08015abc
 800d2dc:	08015cf4 	.word	0x08015cf4
 800d2e0:	08015b08 	.word	0x08015b08
 800d2e4:	20008e94 	.word	0x20008e94
 800d2e8:	20008e8c 	.word	0x20008e8c
 800d2ec:	20008e88 	.word	0x20008e88
 800d2f0:	08015d10 	.word	0x08015d10
 800d2f4:	20008e95 	.word	0x20008e95
 800d2f8:	20008e50 	.word	0x20008e50
 800d2fc:	20008e78 	.word	0x20008e78
 800d300:	08015d30 	.word	0x08015d30
 800d304:	08015d48 	.word	0x08015d48
        } else {
          pcb->unacked = rseg->next;
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d310:	69f8      	ldr	r0, [r7, #28]
 800d312:	f7fe fd22 	bl	800bd5a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d104      	bne.n	800d328 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d324:	861a      	strh	r2, [r3, #48]	; 0x30
 800d326:	e006      	b.n	800d336 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00a      	beq.n	800d356 <tcp_process+0x30a>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	6910      	ldr	r0, [r2, #16]
 800d34a:	2200      	movs	r2, #0
 800d34c:	6879      	ldr	r1, [r7, #4]
 800d34e:	4798      	blx	r3
 800d350:	4603      	mov	r3, r0
 800d352:	76bb      	strb	r3, [r7, #26]
 800d354:	e001      	b.n	800d35a <tcp_process+0x30e>
 800d356:	2300      	movs	r3, #0
 800d358:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d35a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d35e:	f113 0f0d 	cmn.w	r3, #13
 800d362:	d102      	bne.n	800d36a <tcp_process+0x31e>
          return ERR_ABRT;
 800d364:	f06f 030c 	mvn.w	r3, #12
 800d368:	e250      	b.n	800d80c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	8b5b      	ldrh	r3, [r3, #26]
 800d36e:	f043 0302 	orr.w	r3, r3, #2
 800d372:	b29a      	uxth	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d378:	e23a      	b.n	800d7f0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d37a:	4b98      	ldr	r3, [pc, #608]	; (800d5dc <tcp_process+0x590>)
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	f003 0310 	and.w	r3, r3, #16
 800d382:	2b00      	cmp	r3, #0
 800d384:	f000 8234 	beq.w	800d7f0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d388:	4b95      	ldr	r3, [pc, #596]	; (800d5e0 <tcp_process+0x594>)
 800d38a:	6819      	ldr	r1, [r3, #0]
 800d38c:	4b95      	ldr	r3, [pc, #596]	; (800d5e4 <tcp_process+0x598>)
 800d38e:	881b      	ldrh	r3, [r3, #0]
 800d390:	461a      	mov	r2, r3
 800d392:	4b95      	ldr	r3, [pc, #596]	; (800d5e8 <tcp_process+0x59c>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d398:	4b94      	ldr	r3, [pc, #592]	; (800d5ec <tcp_process+0x5a0>)
 800d39a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d39c:	885b      	ldrh	r3, [r3, #2]
 800d39e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3a0:	4a92      	ldr	r2, [pc, #584]	; (800d5ec <tcp_process+0x5a0>)
 800d3a2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3a4:	8812      	ldrh	r2, [r2, #0]
 800d3a6:	b292      	uxth	r2, r2
 800d3a8:	9202      	str	r2, [sp, #8]
 800d3aa:	9301      	str	r3, [sp, #4]
 800d3ac:	4b90      	ldr	r3, [pc, #576]	; (800d5f0 <tcp_process+0x5a4>)
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	4b90      	ldr	r3, [pc, #576]	; (800d5f4 <tcp_process+0x5a8>)
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f002 fc85 	bl	800fcc4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d3c0:	2b05      	cmp	r3, #5
 800d3c2:	f200 8215 	bhi.w	800d7f0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f002 fa4f 	bl	800f870 <tcp_rexmit_rto>
      break;
 800d3d2:	e20d      	b.n	800d7f0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d3d4:	4b81      	ldr	r3, [pc, #516]	; (800d5dc <tcp_process+0x590>)
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	f003 0310 	and.w	r3, r3, #16
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f000 80a1 	beq.w	800d524 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d3e2:	4b7f      	ldr	r3, [pc, #508]	; (800d5e0 <tcp_process+0x594>)
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	db7e      	blt.n	800d4f0 <tcp_process+0x4a4>
 800d3f2:	4b7b      	ldr	r3, [pc, #492]	; (800d5e0 <tcp_process+0x594>)
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3fa:	1ad3      	subs	r3, r2, r3
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	dc77      	bgt.n	800d4f0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2204      	movs	r2, #4
 800d404:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d102      	bne.n	800d414 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d40e:	23fa      	movs	r3, #250	; 0xfa
 800d410:	76bb      	strb	r3, [r7, #26]
 800d412:	e01d      	b.n	800d450 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d418:	699b      	ldr	r3, [r3, #24]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d106      	bne.n	800d42c <tcp_process+0x3e0>
 800d41e:	4b76      	ldr	r3, [pc, #472]	; (800d5f8 <tcp_process+0x5ac>)
 800d420:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d424:	4975      	ldr	r1, [pc, #468]	; (800d5fc <tcp_process+0x5b0>)
 800d426:	4876      	ldr	r0, [pc, #472]	; (800d600 <tcp_process+0x5b4>)
 800d428:	f005 fff6 	bl	8013418 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d430:	699b      	ldr	r3, [r3, #24]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00a      	beq.n	800d44c <tcp_process+0x400>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d43a:	699b      	ldr	r3, [r3, #24]
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	6910      	ldr	r0, [r2, #16]
 800d440:	2200      	movs	r2, #0
 800d442:	6879      	ldr	r1, [r7, #4]
 800d444:	4798      	blx	r3
 800d446:	4603      	mov	r3, r0
 800d448:	76bb      	strb	r3, [r7, #26]
 800d44a:	e001      	b.n	800d450 <tcp_process+0x404>
 800d44c:	23f0      	movs	r3, #240	; 0xf0
 800d44e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d450:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d00a      	beq.n	800d46e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d458:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d45c:	f113 0f0d 	cmn.w	r3, #13
 800d460:	d002      	beq.n	800d468 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f7fd ff8e 	bl	800b384 <tcp_abort>
            }
            return ERR_ABRT;
 800d468:	f06f 030c 	mvn.w	r3, #12
 800d46c:	e1ce      	b.n	800d80c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 fae0 	bl	800da34 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d474:	4b63      	ldr	r3, [pc, #396]	; (800d604 <tcp_process+0x5b8>)
 800d476:	881b      	ldrh	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d005      	beq.n	800d488 <tcp_process+0x43c>
            recv_acked--;
 800d47c:	4b61      	ldr	r3, [pc, #388]	; (800d604 <tcp_process+0x5b8>)
 800d47e:	881b      	ldrh	r3, [r3, #0]
 800d480:	3b01      	subs	r3, #1
 800d482:	b29a      	uxth	r2, r3
 800d484:	4b5f      	ldr	r3, [pc, #380]	; (800d604 <tcp_process+0x5b8>)
 800d486:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d48c:	009a      	lsls	r2, r3, #2
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d492:	005b      	lsls	r3, r3, #1
 800d494:	f241 111c 	movw	r1, #4380	; 0x111c
 800d498:	428b      	cmp	r3, r1
 800d49a:	bf38      	it	cc
 800d49c:	460b      	movcc	r3, r1
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d204      	bcs.n	800d4ac <tcp_process+0x460>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	e00d      	b.n	800d4c8 <tcp_process+0x47c>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4b0:	005b      	lsls	r3, r3, #1
 800d4b2:	f241 121c 	movw	r2, #4380	; 0x111c
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d904      	bls.n	800d4c4 <tcp_process+0x478>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4be:	005b      	lsls	r3, r3, #1
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	e001      	b.n	800d4c8 <tcp_process+0x47c>
 800d4c4:	f241 131c 	movw	r3, #4380	; 0x111c
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d4ce:	4b4e      	ldr	r3, [pc, #312]	; (800d608 <tcp_process+0x5bc>)
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	f003 0320 	and.w	r3, r3, #32
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d037      	beq.n	800d54a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	8b5b      	ldrh	r3, [r3, #26]
 800d4de:	f043 0302 	orr.w	r3, r3, #2
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2207      	movs	r2, #7
 800d4ec:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d4ee:	e02c      	b.n	800d54a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4f0:	4b3b      	ldr	r3, [pc, #236]	; (800d5e0 <tcp_process+0x594>)
 800d4f2:	6819      	ldr	r1, [r3, #0]
 800d4f4:	4b3b      	ldr	r3, [pc, #236]	; (800d5e4 <tcp_process+0x598>)
 800d4f6:	881b      	ldrh	r3, [r3, #0]
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	4b3b      	ldr	r3, [pc, #236]	; (800d5e8 <tcp_process+0x59c>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d500:	4b3a      	ldr	r3, [pc, #232]	; (800d5ec <tcp_process+0x5a0>)
 800d502:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d504:	885b      	ldrh	r3, [r3, #2]
 800d506:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d508:	4a38      	ldr	r2, [pc, #224]	; (800d5ec <tcp_process+0x5a0>)
 800d50a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d50c:	8812      	ldrh	r2, [r2, #0]
 800d50e:	b292      	uxth	r2, r2
 800d510:	9202      	str	r2, [sp, #8]
 800d512:	9301      	str	r3, [sp, #4]
 800d514:	4b36      	ldr	r3, [pc, #216]	; (800d5f0 <tcp_process+0x5a4>)
 800d516:	9300      	str	r3, [sp, #0]
 800d518:	4b36      	ldr	r3, [pc, #216]	; (800d5f4 <tcp_process+0x5a8>)
 800d51a:	4602      	mov	r2, r0
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f002 fbd1 	bl	800fcc4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d522:	e167      	b.n	800d7f4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d524:	4b2d      	ldr	r3, [pc, #180]	; (800d5dc <tcp_process+0x590>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	f003 0302 	and.w	r3, r3, #2
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 8161 	beq.w	800d7f4 <tcp_process+0x7a8>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d536:	1e5a      	subs	r2, r3, #1
 800d538:	4b2b      	ldr	r3, [pc, #172]	; (800d5e8 <tcp_process+0x59c>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	f040 8159 	bne.w	800d7f4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f002 f9b6 	bl	800f8b4 <tcp_rexmit>
      break;
 800d548:	e154      	b.n	800d7f4 <tcp_process+0x7a8>
 800d54a:	e153      	b.n	800d7f4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 fa71 	bl	800da34 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d552:	4b2d      	ldr	r3, [pc, #180]	; (800d608 <tcp_process+0x5bc>)
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	f003 0320 	and.w	r3, r3, #32
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f000 814c 	beq.w	800d7f8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	8b5b      	ldrh	r3, [r3, #26]
 800d564:	f043 0302 	orr.w	r3, r3, #2
 800d568:	b29a      	uxth	r2, r3
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2207      	movs	r2, #7
 800d572:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d574:	e140      	b.n	800d7f8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 fa5c 	bl	800da34 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d57c:	4b22      	ldr	r3, [pc, #136]	; (800d608 <tcp_process+0x5bc>)
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	f003 0320 	and.w	r3, r3, #32
 800d584:	2b00      	cmp	r3, #0
 800d586:	d071      	beq.n	800d66c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d588:	4b14      	ldr	r3, [pc, #80]	; (800d5dc <tcp_process+0x590>)
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	f003 0310 	and.w	r3, r3, #16
 800d590:	2b00      	cmp	r3, #0
 800d592:	d060      	beq.n	800d656 <tcp_process+0x60a>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d598:	4b11      	ldr	r3, [pc, #68]	; (800d5e0 <tcp_process+0x594>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d15a      	bne.n	800d656 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d156      	bne.n	800d656 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	8b5b      	ldrh	r3, [r3, #26]
 800d5ac:	f043 0302 	orr.w	r3, r3, #2
 800d5b0:	b29a      	uxth	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7fe fdbc 	bl	800c134 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d5bc:	4b13      	ldr	r3, [pc, #76]	; (800d60c <tcp_process+0x5c0>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d105      	bne.n	800d5d2 <tcp_process+0x586>
 800d5c6:	4b11      	ldr	r3, [pc, #68]	; (800d60c <tcp_process+0x5c0>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	4a0f      	ldr	r2, [pc, #60]	; (800d60c <tcp_process+0x5c0>)
 800d5ce:	6013      	str	r3, [r2, #0]
 800d5d0:	e02e      	b.n	800d630 <tcp_process+0x5e4>
 800d5d2:	4b0e      	ldr	r3, [pc, #56]	; (800d60c <tcp_process+0x5c0>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	617b      	str	r3, [r7, #20]
 800d5d8:	e027      	b.n	800d62a <tcp_process+0x5de>
 800d5da:	bf00      	nop
 800d5dc:	20008e94 	.word	0x20008e94
 800d5e0:	20008e8c 	.word	0x20008e8c
 800d5e4:	20008e92 	.word	0x20008e92
 800d5e8:	20008e88 	.word	0x20008e88
 800d5ec:	20008e78 	.word	0x20008e78
 800d5f0:	20003730 	.word	0x20003730
 800d5f4:	20003734 	.word	0x20003734
 800d5f8:	08015abc 	.word	0x08015abc
 800d5fc:	08015d5c 	.word	0x08015d5c
 800d600:	08015b08 	.word	0x08015b08
 800d604:	20008e90 	.word	0x20008e90
 800d608:	20008e95 	.word	0x20008e95
 800d60c:	20008e5c 	.word	0x20008e5c
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	429a      	cmp	r2, r3
 800d618:	d104      	bne.n	800d624 <tcp_process+0x5d8>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	68da      	ldr	r2, [r3, #12]
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	60da      	str	r2, [r3, #12]
 800d622:	e005      	b.n	800d630 <tcp_process+0x5e4>
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	617b      	str	r3, [r7, #20]
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d1ef      	bne.n	800d610 <tcp_process+0x5c4>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	60da      	str	r2, [r3, #12]
 800d636:	4b77      	ldr	r3, [pc, #476]	; (800d814 <tcp_process+0x7c8>)
 800d638:	2201      	movs	r2, #1
 800d63a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	220a      	movs	r2, #10
 800d640:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d642:	4b75      	ldr	r3, [pc, #468]	; (800d818 <tcp_process+0x7cc>)
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	60da      	str	r2, [r3, #12]
 800d64a:	4a73      	ldr	r2, [pc, #460]	; (800d818 <tcp_process+0x7cc>)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6013      	str	r3, [r2, #0]
 800d650:	f002 fcfa 	bl	8010048 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d654:	e0d2      	b.n	800d7fc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	8b5b      	ldrh	r3, [r3, #26]
 800d65a:	f043 0302 	orr.w	r3, r3, #2
 800d65e:	b29a      	uxth	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2208      	movs	r2, #8
 800d668:	751a      	strb	r2, [r3, #20]
      break;
 800d66a:	e0c7      	b.n	800d7fc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d66c:	4b6b      	ldr	r3, [pc, #428]	; (800d81c <tcp_process+0x7d0>)
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	f003 0310 	and.w	r3, r3, #16
 800d674:	2b00      	cmp	r3, #0
 800d676:	f000 80c1 	beq.w	800d7fc <tcp_process+0x7b0>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d67e:	4b68      	ldr	r3, [pc, #416]	; (800d820 <tcp_process+0x7d4>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	429a      	cmp	r2, r3
 800d684:	f040 80ba 	bne.w	800d7fc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f040 80b5 	bne.w	800d7fc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2206      	movs	r2, #6
 800d696:	751a      	strb	r2, [r3, #20]
      break;
 800d698:	e0b0      	b.n	800d7fc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 f9ca 	bl	800da34 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d6a0:	4b60      	ldr	r3, [pc, #384]	; (800d824 <tcp_process+0x7d8>)
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	f003 0320 	and.w	r3, r3, #32
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f000 80a9 	beq.w	800d800 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	8b5b      	ldrh	r3, [r3, #26]
 800d6b2:	f043 0302 	orr.w	r3, r3, #2
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7fe fd39 	bl	800c134 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d6c2:	4b59      	ldr	r3, [pc, #356]	; (800d828 <tcp_process+0x7dc>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d105      	bne.n	800d6d8 <tcp_process+0x68c>
 800d6cc:	4b56      	ldr	r3, [pc, #344]	; (800d828 <tcp_process+0x7dc>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	4a55      	ldr	r2, [pc, #340]	; (800d828 <tcp_process+0x7dc>)
 800d6d4:	6013      	str	r3, [r2, #0]
 800d6d6:	e013      	b.n	800d700 <tcp_process+0x6b4>
 800d6d8:	4b53      	ldr	r3, [pc, #332]	; (800d828 <tcp_process+0x7dc>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	613b      	str	r3, [r7, #16]
 800d6de:	e00c      	b.n	800d6fa <tcp_process+0x6ae>
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d104      	bne.n	800d6f4 <tcp_process+0x6a8>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	68da      	ldr	r2, [r3, #12]
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	60da      	str	r2, [r3, #12]
 800d6f2:	e005      	b.n	800d700 <tcp_process+0x6b4>
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	613b      	str	r3, [r7, #16]
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1ef      	bne.n	800d6e0 <tcp_process+0x694>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	60da      	str	r2, [r3, #12]
 800d706:	4b43      	ldr	r3, [pc, #268]	; (800d814 <tcp_process+0x7c8>)
 800d708:	2201      	movs	r2, #1
 800d70a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	220a      	movs	r2, #10
 800d710:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d712:	4b41      	ldr	r3, [pc, #260]	; (800d818 <tcp_process+0x7cc>)
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	60da      	str	r2, [r3, #12]
 800d71a:	4a3f      	ldr	r2, [pc, #252]	; (800d818 <tcp_process+0x7cc>)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6013      	str	r3, [r2, #0]
 800d720:	f002 fc92 	bl	8010048 <tcp_timer_needed>
      }
      break;
 800d724:	e06c      	b.n	800d800 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 f984 	bl	800da34 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d72c:	4b3b      	ldr	r3, [pc, #236]	; (800d81c <tcp_process+0x7d0>)
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	f003 0310 	and.w	r3, r3, #16
 800d734:	2b00      	cmp	r3, #0
 800d736:	d065      	beq.n	800d804 <tcp_process+0x7b8>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d73c:	4b38      	ldr	r3, [pc, #224]	; (800d820 <tcp_process+0x7d4>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	429a      	cmp	r2, r3
 800d742:	d15f      	bne.n	800d804 <tcp_process+0x7b8>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d15b      	bne.n	800d804 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f7fe fcf1 	bl	800c134 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d752:	4b35      	ldr	r3, [pc, #212]	; (800d828 <tcp_process+0x7dc>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d105      	bne.n	800d768 <tcp_process+0x71c>
 800d75c:	4b32      	ldr	r3, [pc, #200]	; (800d828 <tcp_process+0x7dc>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	4a31      	ldr	r2, [pc, #196]	; (800d828 <tcp_process+0x7dc>)
 800d764:	6013      	str	r3, [r2, #0]
 800d766:	e013      	b.n	800d790 <tcp_process+0x744>
 800d768:	4b2f      	ldr	r3, [pc, #188]	; (800d828 <tcp_process+0x7dc>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	60fb      	str	r3, [r7, #12]
 800d76e:	e00c      	b.n	800d78a <tcp_process+0x73e>
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	429a      	cmp	r2, r3
 800d778:	d104      	bne.n	800d784 <tcp_process+0x738>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	68da      	ldr	r2, [r3, #12]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	60da      	str	r2, [r3, #12]
 800d782:	e005      	b.n	800d790 <tcp_process+0x744>
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	60fb      	str	r3, [r7, #12]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d1ef      	bne.n	800d770 <tcp_process+0x724>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	60da      	str	r2, [r3, #12]
 800d796:	4b1f      	ldr	r3, [pc, #124]	; (800d814 <tcp_process+0x7c8>)
 800d798:	2201      	movs	r2, #1
 800d79a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	220a      	movs	r2, #10
 800d7a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d7a2:	4b1d      	ldr	r3, [pc, #116]	; (800d818 <tcp_process+0x7cc>)
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	60da      	str	r2, [r3, #12]
 800d7aa:	4a1b      	ldr	r2, [pc, #108]	; (800d818 <tcp_process+0x7cc>)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6013      	str	r3, [r2, #0]
 800d7b0:	f002 fc4a 	bl	8010048 <tcp_timer_needed>
      }
      break;
 800d7b4:	e026      	b.n	800d804 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 f93c 	bl	800da34 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d7bc:	4b17      	ldr	r3, [pc, #92]	; (800d81c <tcp_process+0x7d0>)
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	f003 0310 	and.w	r3, r3, #16
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d01f      	beq.n	800d808 <tcp_process+0x7bc>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7cc:	4b14      	ldr	r3, [pc, #80]	; (800d820 <tcp_process+0x7d4>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d119      	bne.n	800d808 <tcp_process+0x7bc>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d115      	bne.n	800d808 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d7dc:	4b11      	ldr	r3, [pc, #68]	; (800d824 <tcp_process+0x7d8>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	f043 0310 	orr.w	r3, r3, #16
 800d7e4:	b2da      	uxtb	r2, r3
 800d7e6:	4b0f      	ldr	r3, [pc, #60]	; (800d824 <tcp_process+0x7d8>)
 800d7e8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d7ea:	e00d      	b.n	800d808 <tcp_process+0x7bc>
    default:
      break;
 800d7ec:	bf00      	nop
 800d7ee:	e00c      	b.n	800d80a <tcp_process+0x7be>
      break;
 800d7f0:	bf00      	nop
 800d7f2:	e00a      	b.n	800d80a <tcp_process+0x7be>
      break;
 800d7f4:	bf00      	nop
 800d7f6:	e008      	b.n	800d80a <tcp_process+0x7be>
      break;
 800d7f8:	bf00      	nop
 800d7fa:	e006      	b.n	800d80a <tcp_process+0x7be>
      break;
 800d7fc:	bf00      	nop
 800d7fe:	e004      	b.n	800d80a <tcp_process+0x7be>
      break;
 800d800:	bf00      	nop
 800d802:	e002      	b.n	800d80a <tcp_process+0x7be>
      break;
 800d804:	bf00      	nop
 800d806:	e000      	b.n	800d80a <tcp_process+0x7be>
      break;
 800d808:	bf00      	nop
  }
  return ERR_OK;
 800d80a:	2300      	movs	r3, #0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3724      	adds	r7, #36	; 0x24
 800d810:	46bd      	mov	sp, r7
 800d812:	bd90      	pop	{r4, r7, pc}
 800d814:	20008e64 	.word	0x20008e64
 800d818:	20008e60 	.word	0x20008e60
 800d81c:	20008e94 	.word	0x20008e94
 800d820:	20008e8c 	.word	0x20008e8c
 800d824:	20008e95 	.word	0x20008e95
 800d828:	20008e5c 	.word	0x20008e5c

0800d82c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d82c:	b590      	push	{r4, r7, lr}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d106      	bne.n	800d84a <tcp_oos_insert_segment+0x1e>
 800d83c:	4b3b      	ldr	r3, [pc, #236]	; (800d92c <tcp_oos_insert_segment+0x100>)
 800d83e:	f240 421f 	movw	r2, #1055	; 0x41f
 800d842:	493b      	ldr	r1, [pc, #236]	; (800d930 <tcp_oos_insert_segment+0x104>)
 800d844:	483b      	ldr	r0, [pc, #236]	; (800d934 <tcp_oos_insert_segment+0x108>)
 800d846:	f005 fde7 	bl	8013418 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	899b      	ldrh	r3, [r3, #12]
 800d850:	b29b      	uxth	r3, r3
 800d852:	4618      	mov	r0, r3
 800d854:	f7fb fcb8 	bl	80091c8 <lwip_htons>
 800d858:	4603      	mov	r3, r0
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	f003 0301 	and.w	r3, r3, #1
 800d860:	2b00      	cmp	r3, #0
 800d862:	d028      	beq.n	800d8b6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d864:	6838      	ldr	r0, [r7, #0]
 800d866:	f7fe fa63 	bl	800bd30 <tcp_segs_free>
    next = NULL;
 800d86a:	2300      	movs	r3, #0
 800d86c:	603b      	str	r3, [r7, #0]
 800d86e:	e056      	b.n	800d91e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	899b      	ldrh	r3, [r3, #12]
 800d876:	b29b      	uxth	r3, r3
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fb fca5 	bl	80091c8 <lwip_htons>
 800d87e:	4603      	mov	r3, r0
 800d880:	b2db      	uxtb	r3, r3
 800d882:	f003 0301 	and.w	r3, r3, #1
 800d886:	2b00      	cmp	r3, #0
 800d888:	d00d      	beq.n	800d8a6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	899b      	ldrh	r3, [r3, #12]
 800d890:	b29c      	uxth	r4, r3
 800d892:	2001      	movs	r0, #1
 800d894:	f7fb fc98 	bl	80091c8 <lwip_htons>
 800d898:	4603      	mov	r3, r0
 800d89a:	461a      	mov	r2, r3
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	4322      	orrs	r2, r4
 800d8a2:	b292      	uxth	r2, r2
 800d8a4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f7fe fa52 	bl	800bd5a <tcp_seg_free>
    while (next &&
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00e      	beq.n	800d8da <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	891b      	ldrh	r3, [r3, #8]
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	4b1d      	ldr	r3, [pc, #116]	; (800d938 <tcp_oos_insert_segment+0x10c>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	441a      	add	r2, r3
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	6839      	ldr	r1, [r7, #0]
 800d8d0:	8909      	ldrh	r1, [r1, #8]
 800d8d2:	440b      	add	r3, r1
 800d8d4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	daca      	bge.n	800d870 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d01e      	beq.n	800d91e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	891b      	ldrh	r3, [r3, #8]
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	4b14      	ldr	r3, [pc, #80]	; (800d938 <tcp_oos_insert_segment+0x10c>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	441a      	add	r2, r3
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	68db      	ldr	r3, [r3, #12]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	dd12      	ble.n	800d91e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	4b0d      	ldr	r3, [pc, #52]	; (800d938 <tcp_oos_insert_segment+0x10c>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	b29b      	uxth	r3, r3
 800d906:	1ad3      	subs	r3, r2, r3
 800d908:	b29a      	uxth	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	685a      	ldr	r2, [r3, #4]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	891b      	ldrh	r3, [r3, #8]
 800d916:	4619      	mov	r1, r3
 800d918:	4610      	mov	r0, r2
 800d91a:	f7fc fd83 	bl	800a424 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	683a      	ldr	r2, [r7, #0]
 800d922:	601a      	str	r2, [r3, #0]
}
 800d924:	bf00      	nop
 800d926:	3714      	adds	r7, #20
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd90      	pop	{r4, r7, pc}
 800d92c:	08015abc 	.word	0x08015abc
 800d930:	08015d7c 	.word	0x08015d7c
 800d934:	08015b08 	.word	0x08015b08
 800d938:	20008e88 	.word	0x20008e88

0800d93c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d93c:	b5b0      	push	{r4, r5, r7, lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
 800d948:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d94a:	e03e      	b.n	800d9ca <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fc ff70 	bl	800a840 <pbuf_clen>
 800d960:	4603      	mov	r3, r0
 800d962:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d96a:	8a7a      	ldrh	r2, [r7, #18]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d906      	bls.n	800d97e <tcp_free_acked_segments+0x42>
 800d970:	4b2a      	ldr	r3, [pc, #168]	; (800da1c <tcp_free_acked_segments+0xe0>)
 800d972:	f240 4257 	movw	r2, #1111	; 0x457
 800d976:	492a      	ldr	r1, [pc, #168]	; (800da20 <tcp_free_acked_segments+0xe4>)
 800d978:	482a      	ldr	r0, [pc, #168]	; (800da24 <tcp_free_acked_segments+0xe8>)
 800d97a:	f005 fd4d 	bl	8013418 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d984:	8a7b      	ldrh	r3, [r7, #18]
 800d986:	1ad3      	subs	r3, r2, r3
 800d988:	b29a      	uxth	r2, r3
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	891a      	ldrh	r2, [r3, #8]
 800d994:	4b24      	ldr	r3, [pc, #144]	; (800da28 <tcp_free_acked_segments+0xec>)
 800d996:	881b      	ldrh	r3, [r3, #0]
 800d998:	4413      	add	r3, r2
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	4b22      	ldr	r3, [pc, #136]	; (800da28 <tcp_free_acked_segments+0xec>)
 800d99e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d9a0:	6978      	ldr	r0, [r7, #20]
 800d9a2:	f7fe f9da 	bl	800bd5a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d00c      	beq.n	800d9ca <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d109      	bne.n	800d9ca <tcp_free_acked_segments+0x8e>
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d106      	bne.n	800d9ca <tcp_free_acked_segments+0x8e>
 800d9bc:	4b17      	ldr	r3, [pc, #92]	; (800da1c <tcp_free_acked_segments+0xe0>)
 800d9be:	f240 4261 	movw	r2, #1121	; 0x461
 800d9c2:	491a      	ldr	r1, [pc, #104]	; (800da2c <tcp_free_acked_segments+0xf0>)
 800d9c4:	4817      	ldr	r0, [pc, #92]	; (800da24 <tcp_free_acked_segments+0xe8>)
 800d9c6:	f005 fd27 	bl	8013418 <iprintf>
  while (seg_list != NULL &&
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d020      	beq.n	800da12 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fb fc0b 	bl	80091f2 <lwip_htonl>
 800d9dc:	4604      	mov	r4, r0
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	891b      	ldrh	r3, [r3, #8]
 800d9e2:	461d      	mov	r5, r3
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	899b      	ldrh	r3, [r3, #12]
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fb fbeb 	bl	80091c8 <lwip_htons>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	f003 0303 	and.w	r3, r3, #3
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d001      	beq.n	800da02 <tcp_free_acked_segments+0xc6>
 800d9fe:	2301      	movs	r3, #1
 800da00:	e000      	b.n	800da04 <tcp_free_acked_segments+0xc8>
 800da02:	2300      	movs	r3, #0
 800da04:	442b      	add	r3, r5
 800da06:	18e2      	adds	r2, r4, r3
 800da08:	4b09      	ldr	r3, [pc, #36]	; (800da30 <tcp_free_acked_segments+0xf4>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800da0e:	2b00      	cmp	r3, #0
 800da10:	dd9c      	ble.n	800d94c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800da12:	68bb      	ldr	r3, [r7, #8]
}
 800da14:	4618      	mov	r0, r3
 800da16:	3718      	adds	r7, #24
 800da18:	46bd      	mov	sp, r7
 800da1a:	bdb0      	pop	{r4, r5, r7, pc}
 800da1c:	08015abc 	.word	0x08015abc
 800da20:	08015da4 	.word	0x08015da4
 800da24:	08015b08 	.word	0x08015b08
 800da28:	20008e90 	.word	0x20008e90
 800da2c:	08015dcc 	.word	0x08015dcc
 800da30:	20008e8c 	.word	0x20008e8c

0800da34 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800da34:	b5b0      	push	{r4, r5, r7, lr}
 800da36:	b094      	sub	sp, #80	; 0x50
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800da3c:	2300      	movs	r3, #0
 800da3e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d106      	bne.n	800da54 <tcp_receive+0x20>
 800da46:	4b91      	ldr	r3, [pc, #580]	; (800dc8c <tcp_receive+0x258>)
 800da48:	f240 427b 	movw	r2, #1147	; 0x47b
 800da4c:	4990      	ldr	r1, [pc, #576]	; (800dc90 <tcp_receive+0x25c>)
 800da4e:	4891      	ldr	r0, [pc, #580]	; (800dc94 <tcp_receive+0x260>)
 800da50:	f005 fce2 	bl	8013418 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	7d1b      	ldrb	r3, [r3, #20]
 800da58:	2b03      	cmp	r3, #3
 800da5a:	d806      	bhi.n	800da6a <tcp_receive+0x36>
 800da5c:	4b8b      	ldr	r3, [pc, #556]	; (800dc8c <tcp_receive+0x258>)
 800da5e:	f240 427c 	movw	r2, #1148	; 0x47c
 800da62:	498d      	ldr	r1, [pc, #564]	; (800dc98 <tcp_receive+0x264>)
 800da64:	488b      	ldr	r0, [pc, #556]	; (800dc94 <tcp_receive+0x260>)
 800da66:	f005 fcd7 	bl	8013418 <iprintf>

  if (flags & TCP_ACK) {
 800da6a:	4b8c      	ldr	r3, [pc, #560]	; (800dc9c <tcp_receive+0x268>)
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	f003 0310 	and.w	r3, r3, #16
 800da72:	2b00      	cmp	r3, #0
 800da74:	f000 8264 	beq.w	800df40 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da7e:	461a      	mov	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da84:	4413      	add	r3, r2
 800da86:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da8c:	4b84      	ldr	r3, [pc, #528]	; (800dca0 <tcp_receive+0x26c>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	1ad3      	subs	r3, r2, r3
 800da92:	2b00      	cmp	r3, #0
 800da94:	db1b      	blt.n	800dace <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da9a:	4b81      	ldr	r3, [pc, #516]	; (800dca0 <tcp_receive+0x26c>)
 800da9c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d106      	bne.n	800dab0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800daa6:	4b7f      	ldr	r3, [pc, #508]	; (800dca4 <tcp_receive+0x270>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	2b00      	cmp	r3, #0
 800daae:	db0e      	blt.n	800dace <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dab4:	4b7b      	ldr	r3, [pc, #492]	; (800dca4 <tcp_receive+0x270>)
 800dab6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dab8:	429a      	cmp	r2, r3
 800daba:	d125      	bne.n	800db08 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dabc:	4b7a      	ldr	r3, [pc, #488]	; (800dca8 <tcp_receive+0x274>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	89db      	ldrh	r3, [r3, #14]
 800dac2:	b29a      	uxth	r2, r3
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800daca:	429a      	cmp	r2, r3
 800dacc:	d91c      	bls.n	800db08 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800dace:	4b76      	ldr	r3, [pc, #472]	; (800dca8 <tcp_receive+0x274>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	89db      	ldrh	r3, [r3, #14]
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dae8:	429a      	cmp	r2, r3
 800daea:	d205      	bcs.n	800daf8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800daf8:	4b69      	ldr	r3, [pc, #420]	; (800dca0 <tcp_receive+0x26c>)
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800db00:	4b68      	ldr	r3, [pc, #416]	; (800dca4 <tcp_receive+0x270>)
 800db02:	681a      	ldr	r2, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800db08:	4b66      	ldr	r3, [pc, #408]	; (800dca4 <tcp_receive+0x270>)
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	2b00      	cmp	r3, #0
 800db14:	dc58      	bgt.n	800dbc8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800db16:	4b65      	ldr	r3, [pc, #404]	; (800dcac <tcp_receive+0x278>)
 800db18:	881b      	ldrh	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d14b      	bne.n	800dbb6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800db28:	4413      	add	r3, r2
 800db2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d142      	bne.n	800dbb6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800db36:	2b00      	cmp	r3, #0
 800db38:	db3d      	blt.n	800dbb6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db3e:	4b59      	ldr	r3, [pc, #356]	; (800dca4 <tcp_receive+0x270>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	429a      	cmp	r2, r3
 800db44:	d137      	bne.n	800dbb6 <tcp_receive+0x182>
              found_dupack = 1;
 800db46:	2301      	movs	r3, #1
 800db48:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800db50:	2bff      	cmp	r3, #255	; 0xff
 800db52:	d007      	beq.n	800db64 <tcp_receive+0x130>
                ++pcb->dupacks;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800db5a:	3301      	adds	r3, #1
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800db6a:	2b03      	cmp	r3, #3
 800db6c:	d91b      	bls.n	800dba6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db78:	4413      	add	r3, r2
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db82:	429a      	cmp	r2, r3
 800db84:	d30a      	bcc.n	800db9c <tcp_receive+0x168>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db90:	4413      	add	r3, r2
 800db92:	b29a      	uxth	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800db9a:	e004      	b.n	800dba6 <tcp_receive+0x172>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dba2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d902      	bls.n	800dbb6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f001 feeb 	bl	800f98c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800dbb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	f040 8161 	bne.w	800de80 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dbc6:	e15b      	b.n	800de80 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dbc8:	4b36      	ldr	r3, [pc, #216]	; (800dca4 <tcp_receive+0x270>)
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbd0:	1ad3      	subs	r3, r2, r3
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	f2c0 814e 	blt.w	800de76 <tcp_receive+0x442>
 800dbda:	4b32      	ldr	r3, [pc, #200]	; (800dca4 <tcp_receive+0x270>)
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbe2:	1ad3      	subs	r3, r2, r3
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	f300 8146 	bgt.w	800de76 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	8b5b      	ldrh	r3, [r3, #26]
 800dbee:	f003 0304 	and.w	r3, r3, #4
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d010      	beq.n	800dc18 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	8b5b      	ldrh	r3, [r3, #26]
 800dbfa:	f023 0304 	bic.w	r3, r3, #4
 800dbfe:	b29a      	uxth	r2, r3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dc26:	10db      	asrs	r3, r3, #3
 800dc28:	b21b      	sxth	r3, r3
 800dc2a:	b29a      	uxth	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	4413      	add	r3, r2
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	b21a      	sxth	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800dc40:	4b18      	ldr	r3, [pc, #96]	; (800dca4 <tcp_receive+0x270>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	b29a      	uxth	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	1ad3      	subs	r3, r2, r3
 800dc4e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800dc58:	4b12      	ldr	r3, [pc, #72]	; (800dca4 <tcp_receive+0x270>)
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	7d1b      	ldrb	r3, [r3, #20]
 800dc64:	2b03      	cmp	r3, #3
 800dc66:	f240 8097 	bls.w	800dd98 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d245      	bcs.n	800dd06 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	8b5b      	ldrh	r3, [r3, #26]
 800dc7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d014      	beq.n	800dcb0 <tcp_receive+0x27c>
 800dc86:	2301      	movs	r3, #1
 800dc88:	e013      	b.n	800dcb2 <tcp_receive+0x27e>
 800dc8a:	bf00      	nop
 800dc8c:	08015abc 	.word	0x08015abc
 800dc90:	08015dec 	.word	0x08015dec
 800dc94:	08015b08 	.word	0x08015b08
 800dc98:	08015e08 	.word	0x08015e08
 800dc9c:	20008e94 	.word	0x20008e94
 800dca0:	20008e88 	.word	0x20008e88
 800dca4:	20008e8c 	.word	0x20008e8c
 800dca8:	20008e78 	.word	0x20008e78
 800dcac:	20008e92 	.word	0x20008e92
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800dcb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcc0:	fb12 f303 	smulbb	r3, r2, r3
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	bf28      	it	cs
 800dccc:	4613      	movcs	r3, r2
 800dcce:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dcd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dcd8:	4413      	add	r3, r2
 800dcda:	b29a      	uxth	r2, r3
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d309      	bcc.n	800dcfa <tcp_receive+0x2c6>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dcec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dcee:	4413      	add	r3, r2
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dcf8:	e04e      	b.n	800dd98 <tcp_receive+0x364>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd00:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dd04:	e048      	b.n	800dd98 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dd0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd0e:	4413      	add	r3, r2
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d309      	bcc.n	800dd30 <tcp_receive+0x2fc>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dd22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd24:	4413      	add	r3, r2
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dd2e:	e004      	b.n	800dd3a <tcp_receive+0x306>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d326      	bcc.n	800dd98 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	b29a      	uxth	r2, r3
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd6a:	4413      	add	r3, r2
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d30a      	bcc.n	800dd8e <tcp_receive+0x35a>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd82:	4413      	add	r3, r2
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dd8c:	e004      	b.n	800dd98 <tcp_receive+0x364>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dda0:	4a98      	ldr	r2, [pc, #608]	; (800e004 <tcp_receive+0x5d0>)
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f7ff fdca 	bl	800d93c <tcp_free_acked_segments>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddb6:	4a94      	ldr	r2, [pc, #592]	; (800e008 <tcp_receive+0x5d4>)
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7ff fdbf 	bl	800d93c <tcp_free_acked_segments>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d104      	bne.n	800ddd6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddd2:	861a      	strh	r2, [r3, #48]	; 0x30
 800ddd4:	e002      	b.n	800dddc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2200      	movs	r2, #0
 800dde0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d103      	bne.n	800ddf2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ddf8:	4b84      	ldr	r3, [pc, #528]	; (800e00c <tcp_receive+0x5d8>)
 800ddfa:	881b      	ldrh	r3, [r3, #0]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	8b5b      	ldrh	r3, [r3, #26]
 800de0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d035      	beq.n	800de7e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de16:	2b00      	cmp	r3, #0
 800de18:	d118      	bne.n	800de4c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00c      	beq.n	800de3c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fb f9df 	bl	80091f2 <lwip_htonl>
 800de34:	4603      	mov	r3, r0
 800de36:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800de38:	2b00      	cmp	r3, #0
 800de3a:	dc20      	bgt.n	800de7e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	8b5b      	ldrh	r3, [r3, #26]
 800de40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de44:	b29a      	uxth	r2, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800de4a:	e018      	b.n	800de7e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	4618      	mov	r0, r3
 800de5a:	f7fb f9ca 	bl	80091f2 <lwip_htonl>
 800de5e:	4603      	mov	r3, r0
 800de60:	1ae3      	subs	r3, r4, r3
 800de62:	2b00      	cmp	r3, #0
 800de64:	dc0b      	bgt.n	800de7e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	8b5b      	ldrh	r3, [r3, #26]
 800de6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de6e:	b29a      	uxth	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800de74:	e003      	b.n	800de7e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f001 ff76 	bl	800fd68 <tcp_send_empty_ack>
 800de7c:	e000      	b.n	800de80 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800de7e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de84:	2b00      	cmp	r3, #0
 800de86:	d05b      	beq.n	800df40 <tcp_receive+0x50c>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de8c:	4b60      	ldr	r3, [pc, #384]	; (800e010 <tcp_receive+0x5dc>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	1ad3      	subs	r3, r2, r3
 800de92:	2b00      	cmp	r3, #0
 800de94:	da54      	bge.n	800df40 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800de96:	4b5f      	ldr	r3, [pc, #380]	; (800e014 <tcp_receive+0x5e0>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	1ad3      	subs	r3, r2, r3
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800deaa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800deb4:	10db      	asrs	r3, r3, #3
 800deb6:	b21b      	sxth	r3, r3
 800deb8:	b29b      	uxth	r3, r3
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	b29b      	uxth	r3, r3
 800debe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dec8:	b29a      	uxth	r2, r3
 800deca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dece:	4413      	add	r3, r2
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	b21a      	sxth	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ded8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800dedc:	2b00      	cmp	r3, #0
 800dede:	da05      	bge.n	800deec <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800dee0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dee4:	425b      	negs	r3, r3
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800deec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800def6:	109b      	asrs	r3, r3, #2
 800def8:	b21b      	sxth	r3, r3
 800defa:	b29b      	uxth	r3, r3
 800defc:	1ad3      	subs	r3, r2, r3
 800defe:	b29b      	uxth	r3, r3
 800df00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800df0a:	b29a      	uxth	r2, r3
 800df0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800df10:	4413      	add	r3, r2
 800df12:	b29b      	uxth	r3, r3
 800df14:	b21a      	sxth	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800df20:	10db      	asrs	r3, r3, #3
 800df22:	b21b      	sxth	r3, r3
 800df24:	b29a      	uxth	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	4413      	add	r3, r2
 800df30:	b29b      	uxth	r3, r3
 800df32:	b21a      	sxth	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800df40:	4b35      	ldr	r3, [pc, #212]	; (800e018 <tcp_receive+0x5e4>)
 800df42:	881b      	ldrh	r3, [r3, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	f000 84e2 	beq.w	800e90e <tcp_receive+0xeda>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	7d1b      	ldrb	r3, [r3, #20]
 800df4e:	2b06      	cmp	r3, #6
 800df50:	f200 84dd 	bhi.w	800e90e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df58:	4b30      	ldr	r3, [pc, #192]	; (800e01c <tcp_receive+0x5e8>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	1ad3      	subs	r3, r2, r3
 800df5e:	3b01      	subs	r3, #1
 800df60:	2b00      	cmp	r3, #0
 800df62:	f2c0 808f 	blt.w	800e084 <tcp_receive+0x650>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df6a:	4b2b      	ldr	r3, [pc, #172]	; (800e018 <tcp_receive+0x5e4>)
 800df6c:	881b      	ldrh	r3, [r3, #0]
 800df6e:	4619      	mov	r1, r3
 800df70:	4b2a      	ldr	r3, [pc, #168]	; (800e01c <tcp_receive+0x5e8>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	440b      	add	r3, r1
 800df76:	1ad3      	subs	r3, r2, r3
 800df78:	3301      	adds	r3, #1
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f300 8082 	bgt.w	800e084 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800df80:	4b27      	ldr	r3, [pc, #156]	; (800e020 <tcp_receive+0x5ec>)
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df8a:	4b24      	ldr	r3, [pc, #144]	; (800e01c <tcp_receive+0x5e8>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	1ad3      	subs	r3, r2, r3
 800df90:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800df92:	4b23      	ldr	r3, [pc, #140]	; (800e020 <tcp_receive+0x5ec>)
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d106      	bne.n	800dfa8 <tcp_receive+0x574>
 800df9a:	4b22      	ldr	r3, [pc, #136]	; (800e024 <tcp_receive+0x5f0>)
 800df9c:	f240 5294 	movw	r2, #1428	; 0x594
 800dfa0:	4921      	ldr	r1, [pc, #132]	; (800e028 <tcp_receive+0x5f4>)
 800dfa2:	4822      	ldr	r0, [pc, #136]	; (800e02c <tcp_receive+0x5f8>)
 800dfa4:	f005 fa38 	bl	8013418 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfaa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d906      	bls.n	800dfc0 <tcp_receive+0x58c>
 800dfb2:	4b1c      	ldr	r3, [pc, #112]	; (800e024 <tcp_receive+0x5f0>)
 800dfb4:	f240 5295 	movw	r2, #1429	; 0x595
 800dfb8:	491d      	ldr	r1, [pc, #116]	; (800e030 <tcp_receive+0x5fc>)
 800dfba:	481c      	ldr	r0, [pc, #112]	; (800e02c <tcp_receive+0x5f8>)
 800dfbc:	f005 fa2c 	bl	8013418 <iprintf>
      off = (u16_t)off32;
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800dfc6:	4b16      	ldr	r3, [pc, #88]	; (800e020 <tcp_receive+0x5ec>)
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	891b      	ldrh	r3, [r3, #8]
 800dfcc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d906      	bls.n	800dfe2 <tcp_receive+0x5ae>
 800dfd4:	4b13      	ldr	r3, [pc, #76]	; (800e024 <tcp_receive+0x5f0>)
 800dfd6:	f240 5297 	movw	r2, #1431	; 0x597
 800dfda:	4916      	ldr	r1, [pc, #88]	; (800e034 <tcp_receive+0x600>)
 800dfdc:	4813      	ldr	r0, [pc, #76]	; (800e02c <tcp_receive+0x5f8>)
 800dfde:	f005 fa1b 	bl	8013418 <iprintf>
      inseg.len -= off;
 800dfe2:	4b0f      	ldr	r3, [pc, #60]	; (800e020 <tcp_receive+0x5ec>)
 800dfe4:	891a      	ldrh	r2, [r3, #8]
 800dfe6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dfea:	1ad3      	subs	r3, r2, r3
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	4b0c      	ldr	r3, [pc, #48]	; (800e020 <tcp_receive+0x5ec>)
 800dff0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800dff2:	4b0b      	ldr	r3, [pc, #44]	; (800e020 <tcp_receive+0x5ec>)
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	891a      	ldrh	r2, [r3, #8]
 800dff8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dffc:	1ad3      	subs	r3, r2, r3
 800dffe:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e000:	e02a      	b.n	800e058 <tcp_receive+0x624>
 800e002:	bf00      	nop
 800e004:	08015e24 	.word	0x08015e24
 800e008:	08015e2c 	.word	0x08015e2c
 800e00c:	20008e90 	.word	0x20008e90
 800e010:	20008e8c 	.word	0x20008e8c
 800e014:	20008e50 	.word	0x20008e50
 800e018:	20008e92 	.word	0x20008e92
 800e01c:	20008e88 	.word	0x20008e88
 800e020:	20008e68 	.word	0x20008e68
 800e024:	08015abc 	.word	0x08015abc
 800e028:	08015e34 	.word	0x08015e34
 800e02c:	08015b08 	.word	0x08015b08
 800e030:	08015e44 	.word	0x08015e44
 800e034:	08015e54 	.word	0x08015e54
        off -= p->len;
 800e038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e03a:	895b      	ldrh	r3, [r3, #10]
 800e03c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e048:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e04a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e04e:	2200      	movs	r2, #0
 800e050:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e05a:	895b      	ldrh	r3, [r3, #10]
 800e05c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e060:	429a      	cmp	r2, r3
 800e062:	d8e9      	bhi.n	800e038 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e064:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e068:	4619      	mov	r1, r3
 800e06a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e06c:	f7fc fada 	bl	800a624 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e074:	4a91      	ldr	r2, [pc, #580]	; (800e2bc <tcp_receive+0x888>)
 800e076:	6013      	str	r3, [r2, #0]
 800e078:	4b91      	ldr	r3, [pc, #580]	; (800e2c0 <tcp_receive+0x88c>)
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	4a8f      	ldr	r2, [pc, #572]	; (800e2bc <tcp_receive+0x888>)
 800e07e:	6812      	ldr	r2, [r2, #0]
 800e080:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e082:	e00d      	b.n	800e0a0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e084:	4b8d      	ldr	r3, [pc, #564]	; (800e2bc <tcp_receive+0x888>)
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08c:	1ad3      	subs	r3, r2, r3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	da06      	bge.n	800e0a0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	8b5b      	ldrh	r3, [r3, #26]
 800e096:	f043 0302 	orr.w	r3, r3, #2
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e0a0:	4b86      	ldr	r3, [pc, #536]	; (800e2bc <tcp_receive+0x888>)
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a8:	1ad3      	subs	r3, r2, r3
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f2c0 842a 	blt.w	800e904 <tcp_receive+0xed0>
 800e0b0:	4b82      	ldr	r3, [pc, #520]	; (800e2bc <tcp_receive+0x888>)
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b8:	6879      	ldr	r1, [r7, #4]
 800e0ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e0bc:	440b      	add	r3, r1
 800e0be:	1ad3      	subs	r3, r2, r3
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	f300 841e 	bgt.w	800e904 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0cc:	4b7b      	ldr	r3, [pc, #492]	; (800e2bc <tcp_receive+0x888>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	f040 829a 	bne.w	800e60a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e0d6:	4b7a      	ldr	r3, [pc, #488]	; (800e2c0 <tcp_receive+0x88c>)
 800e0d8:	891c      	ldrh	r4, [r3, #8]
 800e0da:	4b79      	ldr	r3, [pc, #484]	; (800e2c0 <tcp_receive+0x88c>)
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	899b      	ldrh	r3, [r3, #12]
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fb f870 	bl	80091c8 <lwip_htons>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	f003 0303 	and.w	r3, r3, #3
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <tcp_receive+0x6c4>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	e000      	b.n	800e0fa <tcp_receive+0x6c6>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	4423      	add	r3, r4
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	4b71      	ldr	r3, [pc, #452]	; (800e2c4 <tcp_receive+0x890>)
 800e100:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e106:	4b6f      	ldr	r3, [pc, #444]	; (800e2c4 <tcp_receive+0x890>)
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d275      	bcs.n	800e1fa <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e10e:	4b6c      	ldr	r3, [pc, #432]	; (800e2c0 <tcp_receive+0x88c>)
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	899b      	ldrh	r3, [r3, #12]
 800e114:	b29b      	uxth	r3, r3
 800e116:	4618      	mov	r0, r3
 800e118:	f7fb f856 	bl	80091c8 <lwip_htons>
 800e11c:	4603      	mov	r3, r0
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	f003 0301 	and.w	r3, r3, #1
 800e124:	2b00      	cmp	r3, #0
 800e126:	d01f      	beq.n	800e168 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e128:	4b65      	ldr	r3, [pc, #404]	; (800e2c0 <tcp_receive+0x88c>)
 800e12a:	68db      	ldr	r3, [r3, #12]
 800e12c:	899b      	ldrh	r3, [r3, #12]
 800e12e:	b29b      	uxth	r3, r3
 800e130:	b21b      	sxth	r3, r3
 800e132:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e136:	b21c      	sxth	r4, r3
 800e138:	4b61      	ldr	r3, [pc, #388]	; (800e2c0 <tcp_receive+0x88c>)
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	899b      	ldrh	r3, [r3, #12]
 800e13e:	b29b      	uxth	r3, r3
 800e140:	4618      	mov	r0, r3
 800e142:	f7fb f841 	bl	80091c8 <lwip_htons>
 800e146:	4603      	mov	r3, r0
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e150:	b29b      	uxth	r3, r3
 800e152:	4618      	mov	r0, r3
 800e154:	f7fb f838 	bl	80091c8 <lwip_htons>
 800e158:	4603      	mov	r3, r0
 800e15a:	b21b      	sxth	r3, r3
 800e15c:	4323      	orrs	r3, r4
 800e15e:	b21a      	sxth	r2, r3
 800e160:	4b57      	ldr	r3, [pc, #348]	; (800e2c0 <tcp_receive+0x88c>)
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	b292      	uxth	r2, r2
 800e166:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e16c:	4b54      	ldr	r3, [pc, #336]	; (800e2c0 <tcp_receive+0x88c>)
 800e16e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e170:	4b53      	ldr	r3, [pc, #332]	; (800e2c0 <tcp_receive+0x88c>)
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	899b      	ldrh	r3, [r3, #12]
 800e176:	b29b      	uxth	r3, r3
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fb f825 	bl	80091c8 <lwip_htons>
 800e17e:	4603      	mov	r3, r0
 800e180:	b2db      	uxtb	r3, r3
 800e182:	f003 0302 	and.w	r3, r3, #2
 800e186:	2b00      	cmp	r3, #0
 800e188:	d005      	beq.n	800e196 <tcp_receive+0x762>
            inseg.len -= 1;
 800e18a:	4b4d      	ldr	r3, [pc, #308]	; (800e2c0 <tcp_receive+0x88c>)
 800e18c:	891b      	ldrh	r3, [r3, #8]
 800e18e:	3b01      	subs	r3, #1
 800e190:	b29a      	uxth	r2, r3
 800e192:	4b4b      	ldr	r3, [pc, #300]	; (800e2c0 <tcp_receive+0x88c>)
 800e194:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e196:	4b4a      	ldr	r3, [pc, #296]	; (800e2c0 <tcp_receive+0x88c>)
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	4a49      	ldr	r2, [pc, #292]	; (800e2c0 <tcp_receive+0x88c>)
 800e19c:	8912      	ldrh	r2, [r2, #8]
 800e19e:	4611      	mov	r1, r2
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fc f93f 	bl	800a424 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e1a6:	4b46      	ldr	r3, [pc, #280]	; (800e2c0 <tcp_receive+0x88c>)
 800e1a8:	891c      	ldrh	r4, [r3, #8]
 800e1aa:	4b45      	ldr	r3, [pc, #276]	; (800e2c0 <tcp_receive+0x88c>)
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	899b      	ldrh	r3, [r3, #12]
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fb f808 	bl	80091c8 <lwip_htons>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	f003 0303 	and.w	r3, r3, #3
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d001      	beq.n	800e1c8 <tcp_receive+0x794>
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	e000      	b.n	800e1ca <tcp_receive+0x796>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	4423      	add	r3, r4
 800e1cc:	b29a      	uxth	r2, r3
 800e1ce:	4b3d      	ldr	r3, [pc, #244]	; (800e2c4 <tcp_receive+0x890>)
 800e1d0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e1d2:	4b3c      	ldr	r3, [pc, #240]	; (800e2c4 <tcp_receive+0x890>)
 800e1d4:	881b      	ldrh	r3, [r3, #0]
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	4b38      	ldr	r3, [pc, #224]	; (800e2bc <tcp_receive+0x888>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	441a      	add	r2, r3
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e2:	6879      	ldr	r1, [r7, #4]
 800e1e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e1e6:	440b      	add	r3, r1
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d006      	beq.n	800e1fa <tcp_receive+0x7c6>
 800e1ec:	4b36      	ldr	r3, [pc, #216]	; (800e2c8 <tcp_receive+0x894>)
 800e1ee:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e1f2:	4936      	ldr	r1, [pc, #216]	; (800e2cc <tcp_receive+0x898>)
 800e1f4:	4836      	ldr	r0, [pc, #216]	; (800e2d0 <tcp_receive+0x89c>)
 800e1f6:	f005 f90f 	bl	8013418 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	f000 80e7 	beq.w	800e3d2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e204:	4b2e      	ldr	r3, [pc, #184]	; (800e2c0 <tcp_receive+0x88c>)
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	899b      	ldrh	r3, [r3, #12]
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fa ffdb 	bl	80091c8 <lwip_htons>
 800e212:	4603      	mov	r3, r0
 800e214:	b2db      	uxtb	r3, r3
 800e216:	f003 0301 	and.w	r3, r3, #1
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d010      	beq.n	800e240 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e21e:	e00a      	b.n	800e236 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e224:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f7fd fd92 	bl	800bd5a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d1f0      	bne.n	800e220 <tcp_receive+0x7ec>
 800e23e:	e0c8      	b.n	800e3d2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e244:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e246:	e052      	b.n	800e2ee <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	899b      	ldrh	r3, [r3, #12]
 800e24e:	b29b      	uxth	r3, r3
 800e250:	4618      	mov	r0, r3
 800e252:	f7fa ffb9 	bl	80091c8 <lwip_htons>
 800e256:	4603      	mov	r3, r0
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	f003 0301 	and.w	r3, r3, #1
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d03d      	beq.n	800e2de <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e262:	4b17      	ldr	r3, [pc, #92]	; (800e2c0 <tcp_receive+0x88c>)
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	899b      	ldrh	r3, [r3, #12]
 800e268:	b29b      	uxth	r3, r3
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fa ffac 	bl	80091c8 <lwip_htons>
 800e270:	4603      	mov	r3, r0
 800e272:	b2db      	uxtb	r3, r3
 800e274:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d130      	bne.n	800e2de <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e27c:	4b10      	ldr	r3, [pc, #64]	; (800e2c0 <tcp_receive+0x88c>)
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	899b      	ldrh	r3, [r3, #12]
 800e282:	b29c      	uxth	r4, r3
 800e284:	2001      	movs	r0, #1
 800e286:	f7fa ff9f 	bl	80091c8 <lwip_htons>
 800e28a:	4603      	mov	r3, r0
 800e28c:	461a      	mov	r2, r3
 800e28e:	4b0c      	ldr	r3, [pc, #48]	; (800e2c0 <tcp_receive+0x88c>)
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	4322      	orrs	r2, r4
 800e294:	b292      	uxth	r2, r2
 800e296:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e298:	4b09      	ldr	r3, [pc, #36]	; (800e2c0 <tcp_receive+0x88c>)
 800e29a:	891c      	ldrh	r4, [r3, #8]
 800e29c:	4b08      	ldr	r3, [pc, #32]	; (800e2c0 <tcp_receive+0x88c>)
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	899b      	ldrh	r3, [r3, #12]
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7fa ff8f 	bl	80091c8 <lwip_htons>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	f003 0303 	and.w	r3, r3, #3
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00e      	beq.n	800e2d4 <tcp_receive+0x8a0>
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e00d      	b.n	800e2d6 <tcp_receive+0x8a2>
 800e2ba:	bf00      	nop
 800e2bc:	20008e88 	.word	0x20008e88
 800e2c0:	20008e68 	.word	0x20008e68
 800e2c4:	20008e92 	.word	0x20008e92
 800e2c8:	08015abc 	.word	0x08015abc
 800e2cc:	08015e64 	.word	0x08015e64
 800e2d0:	08015b08 	.word	0x08015b08
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	4423      	add	r3, r4
 800e2d8:	b29a      	uxth	r2, r3
 800e2da:	4b98      	ldr	r3, [pc, #608]	; (800e53c <tcp_receive+0xb08>)
 800e2dc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2e0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e2e8:	6938      	ldr	r0, [r7, #16]
 800e2ea:	f7fd fd36 	bl	800bd5a <tcp_seg_free>
            while (next &&
 800e2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00e      	beq.n	800e312 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e2f4:	4b91      	ldr	r3, [pc, #580]	; (800e53c <tcp_receive+0xb08>)
 800e2f6:	881b      	ldrh	r3, [r3, #0]
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	4b91      	ldr	r3, [pc, #580]	; (800e540 <tcp_receive+0xb0c>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	441a      	add	r2, r3
 800e300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e308:	8909      	ldrh	r1, [r1, #8]
 800e30a:	440b      	add	r3, r1
 800e30c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e30e:	2b00      	cmp	r3, #0
 800e310:	da9a      	bge.n	800e248 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e314:	2b00      	cmp	r3, #0
 800e316:	d059      	beq.n	800e3cc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e318:	4b88      	ldr	r3, [pc, #544]	; (800e53c <tcp_receive+0xb08>)
 800e31a:	881b      	ldrh	r3, [r3, #0]
 800e31c:	461a      	mov	r2, r3
 800e31e:	4b88      	ldr	r3, [pc, #544]	; (800e540 <tcp_receive+0xb0c>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	441a      	add	r2, r3
 800e324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	dd4d      	ble.n	800e3cc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e332:	68db      	ldr	r3, [r3, #12]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	b29a      	uxth	r2, r3
 800e338:	4b81      	ldr	r3, [pc, #516]	; (800e540 <tcp_receive+0xb0c>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	1ad3      	subs	r3, r2, r3
 800e340:	b29a      	uxth	r2, r3
 800e342:	4b80      	ldr	r3, [pc, #512]	; (800e544 <tcp_receive+0xb10>)
 800e344:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e346:	4b7f      	ldr	r3, [pc, #508]	; (800e544 <tcp_receive+0xb10>)
 800e348:	68db      	ldr	r3, [r3, #12]
 800e34a:	899b      	ldrh	r3, [r3, #12]
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fa ff3a 	bl	80091c8 <lwip_htons>
 800e354:	4603      	mov	r3, r0
 800e356:	b2db      	uxtb	r3, r3
 800e358:	f003 0302 	and.w	r3, r3, #2
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d005      	beq.n	800e36c <tcp_receive+0x938>
                inseg.len -= 1;
 800e360:	4b78      	ldr	r3, [pc, #480]	; (800e544 <tcp_receive+0xb10>)
 800e362:	891b      	ldrh	r3, [r3, #8]
 800e364:	3b01      	subs	r3, #1
 800e366:	b29a      	uxth	r2, r3
 800e368:	4b76      	ldr	r3, [pc, #472]	; (800e544 <tcp_receive+0xb10>)
 800e36a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e36c:	4b75      	ldr	r3, [pc, #468]	; (800e544 <tcp_receive+0xb10>)
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	4a74      	ldr	r2, [pc, #464]	; (800e544 <tcp_receive+0xb10>)
 800e372:	8912      	ldrh	r2, [r2, #8]
 800e374:	4611      	mov	r1, r2
 800e376:	4618      	mov	r0, r3
 800e378:	f7fc f854 	bl	800a424 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e37c:	4b71      	ldr	r3, [pc, #452]	; (800e544 <tcp_receive+0xb10>)
 800e37e:	891c      	ldrh	r4, [r3, #8]
 800e380:	4b70      	ldr	r3, [pc, #448]	; (800e544 <tcp_receive+0xb10>)
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	899b      	ldrh	r3, [r3, #12]
 800e386:	b29b      	uxth	r3, r3
 800e388:	4618      	mov	r0, r3
 800e38a:	f7fa ff1d 	bl	80091c8 <lwip_htons>
 800e38e:	4603      	mov	r3, r0
 800e390:	b2db      	uxtb	r3, r3
 800e392:	f003 0303 	and.w	r3, r3, #3
 800e396:	2b00      	cmp	r3, #0
 800e398:	d001      	beq.n	800e39e <tcp_receive+0x96a>
 800e39a:	2301      	movs	r3, #1
 800e39c:	e000      	b.n	800e3a0 <tcp_receive+0x96c>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	4423      	add	r3, r4
 800e3a2:	b29a      	uxth	r2, r3
 800e3a4:	4b65      	ldr	r3, [pc, #404]	; (800e53c <tcp_receive+0xb08>)
 800e3a6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e3a8:	4b64      	ldr	r3, [pc, #400]	; (800e53c <tcp_receive+0xb08>)
 800e3aa:	881b      	ldrh	r3, [r3, #0]
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	4b64      	ldr	r3, [pc, #400]	; (800e540 <tcp_receive+0xb0c>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	441a      	add	r2, r3
 800e3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d006      	beq.n	800e3cc <tcp_receive+0x998>
 800e3be:	4b62      	ldr	r3, [pc, #392]	; (800e548 <tcp_receive+0xb14>)
 800e3c0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e3c4:	4961      	ldr	r1, [pc, #388]	; (800e54c <tcp_receive+0xb18>)
 800e3c6:	4862      	ldr	r0, [pc, #392]	; (800e550 <tcp_receive+0xb1c>)
 800e3c8:	f005 f826 	bl	8013418 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e3d0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e3d2:	4b5a      	ldr	r3, [pc, #360]	; (800e53c <tcp_receive+0xb08>)
 800e3d4:	881b      	ldrh	r3, [r3, #0]
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	4b59      	ldr	r3, [pc, #356]	; (800e540 <tcp_receive+0xb0c>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	441a      	add	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e3e6:	4b55      	ldr	r3, [pc, #340]	; (800e53c <tcp_receive+0xb08>)
 800e3e8:	881b      	ldrh	r3, [r3, #0]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d206      	bcs.n	800e3fc <tcp_receive+0x9c8>
 800e3ee:	4b56      	ldr	r3, [pc, #344]	; (800e548 <tcp_receive+0xb14>)
 800e3f0:	f240 6207 	movw	r2, #1543	; 0x607
 800e3f4:	4957      	ldr	r1, [pc, #348]	; (800e554 <tcp_receive+0xb20>)
 800e3f6:	4856      	ldr	r0, [pc, #344]	; (800e550 <tcp_receive+0xb1c>)
 800e3f8:	f005 f80e 	bl	8013418 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e400:	4b4e      	ldr	r3, [pc, #312]	; (800e53c <tcp_receive+0xb08>)
 800e402:	881b      	ldrh	r3, [r3, #0]
 800e404:	1ad3      	subs	r3, r2, r3
 800e406:	b29a      	uxth	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f7fc ffc5 	bl	800b39c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e412:	4b4c      	ldr	r3, [pc, #304]	; (800e544 <tcp_receive+0xb10>)
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	891b      	ldrh	r3, [r3, #8]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d006      	beq.n	800e42a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e41c:	4b49      	ldr	r3, [pc, #292]	; (800e544 <tcp_receive+0xb10>)
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	4a4d      	ldr	r2, [pc, #308]	; (800e558 <tcp_receive+0xb24>)
 800e422:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e424:	4b47      	ldr	r3, [pc, #284]	; (800e544 <tcp_receive+0xb10>)
 800e426:	2200      	movs	r2, #0
 800e428:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e42a:	4b46      	ldr	r3, [pc, #280]	; (800e544 <tcp_receive+0xb10>)
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	899b      	ldrh	r3, [r3, #12]
 800e430:	b29b      	uxth	r3, r3
 800e432:	4618      	mov	r0, r3
 800e434:	f7fa fec8 	bl	80091c8 <lwip_htons>
 800e438:	4603      	mov	r3, r0
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	f003 0301 	and.w	r3, r3, #1
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 80b8 	beq.w	800e5b6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e446:	4b45      	ldr	r3, [pc, #276]	; (800e55c <tcp_receive+0xb28>)
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	f043 0320 	orr.w	r3, r3, #32
 800e44e:	b2da      	uxtb	r2, r3
 800e450:	4b42      	ldr	r3, [pc, #264]	; (800e55c <tcp_receive+0xb28>)
 800e452:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e454:	e0af      	b.n	800e5b6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e45a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e460:	68db      	ldr	r3, [r3, #12]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	4a36      	ldr	r2, [pc, #216]	; (800e540 <tcp_receive+0xb0c>)
 800e466:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	891b      	ldrh	r3, [r3, #8]
 800e46c:	461c      	mov	r4, r3
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	899b      	ldrh	r3, [r3, #12]
 800e474:	b29b      	uxth	r3, r3
 800e476:	4618      	mov	r0, r3
 800e478:	f7fa fea6 	bl	80091c8 <lwip_htons>
 800e47c:	4603      	mov	r3, r0
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	f003 0303 	and.w	r3, r3, #3
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <tcp_receive+0xa58>
 800e488:	2301      	movs	r3, #1
 800e48a:	e000      	b.n	800e48e <tcp_receive+0xa5a>
 800e48c:	2300      	movs	r3, #0
 800e48e:	191a      	adds	r2, r3, r4
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e494:	441a      	add	r2, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e49e:	461c      	mov	r4, r3
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	891b      	ldrh	r3, [r3, #8]
 800e4a4:	461d      	mov	r5, r3
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	68db      	ldr	r3, [r3, #12]
 800e4aa:	899b      	ldrh	r3, [r3, #12]
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fa fe8a 	bl	80091c8 <lwip_htons>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	b2db      	uxtb	r3, r3
 800e4b8:	f003 0303 	and.w	r3, r3, #3
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d001      	beq.n	800e4c4 <tcp_receive+0xa90>
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	e000      	b.n	800e4c6 <tcp_receive+0xa92>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	442b      	add	r3, r5
 800e4c8:	429c      	cmp	r4, r3
 800e4ca:	d206      	bcs.n	800e4da <tcp_receive+0xaa6>
 800e4cc:	4b1e      	ldr	r3, [pc, #120]	; (800e548 <tcp_receive+0xb14>)
 800e4ce:	f240 622b 	movw	r2, #1579	; 0x62b
 800e4d2:	4923      	ldr	r1, [pc, #140]	; (800e560 <tcp_receive+0xb2c>)
 800e4d4:	481e      	ldr	r0, [pc, #120]	; (800e550 <tcp_receive+0xb1c>)
 800e4d6:	f004 ff9f 	bl	8013418 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	891b      	ldrh	r3, [r3, #8]
 800e4de:	461c      	mov	r4, r3
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	899b      	ldrh	r3, [r3, #12]
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7fa fe6d 	bl	80091c8 <lwip_htons>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	f003 0303 	and.w	r3, r3, #3
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d001      	beq.n	800e4fe <tcp_receive+0xaca>
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e000      	b.n	800e500 <tcp_receive+0xacc>
 800e4fe:	2300      	movs	r3, #0
 800e500:	1919      	adds	r1, r3, r4
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e506:	b28b      	uxth	r3, r1
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	b29a      	uxth	r2, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7fc ff43 	bl	800b39c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	891b      	ldrh	r3, [r3, #8]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d028      	beq.n	800e572 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e520:	4b0d      	ldr	r3, [pc, #52]	; (800e558 <tcp_receive+0xb24>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d01d      	beq.n	800e564 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e528:	4b0b      	ldr	r3, [pc, #44]	; (800e558 <tcp_receive+0xb24>)
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	4619      	mov	r1, r3
 800e532:	4610      	mov	r0, r2
 800e534:	f7fc f9be 	bl	800a8b4 <pbuf_cat>
 800e538:	e018      	b.n	800e56c <tcp_receive+0xb38>
 800e53a:	bf00      	nop
 800e53c:	20008e92 	.word	0x20008e92
 800e540:	20008e88 	.word	0x20008e88
 800e544:	20008e68 	.word	0x20008e68
 800e548:	08015abc 	.word	0x08015abc
 800e54c:	08015e9c 	.word	0x08015e9c
 800e550:	08015b08 	.word	0x08015b08
 800e554:	08015ed8 	.word	0x08015ed8
 800e558:	20008e98 	.word	0x20008e98
 800e55c:	20008e95 	.word	0x20008e95
 800e560:	08015ef8 	.word	0x08015ef8
            } else {
              recv_data = cseg->p;
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	4a70      	ldr	r2, [pc, #448]	; (800e72c <tcp_receive+0xcf8>)
 800e56a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	2200      	movs	r2, #0
 800e570:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	899b      	ldrh	r3, [r3, #12]
 800e578:	b29b      	uxth	r3, r3
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fa fe24 	bl	80091c8 <lwip_htons>
 800e580:	4603      	mov	r3, r0
 800e582:	b2db      	uxtb	r3, r3
 800e584:	f003 0301 	and.w	r3, r3, #1
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00d      	beq.n	800e5a8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e58c:	4b68      	ldr	r3, [pc, #416]	; (800e730 <tcp_receive+0xcfc>)
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	f043 0320 	orr.w	r3, r3, #32
 800e594:	b2da      	uxtb	r2, r3
 800e596:	4b66      	ldr	r3, [pc, #408]	; (800e730 <tcp_receive+0xcfc>)
 800e598:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	7d1b      	ldrb	r3, [r3, #20]
 800e59e:	2b04      	cmp	r3, #4
 800e5a0:	d102      	bne.n	800e5a8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2207      	movs	r2, #7
 800e5a6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e5b0:	68b8      	ldr	r0, [r7, #8]
 800e5b2:	f7fd fbd2 	bl	800bd5a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d008      	beq.n	800e5d0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	f43f af43 	beq.w	800e456 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	8b5b      	ldrh	r3, [r3, #26]
 800e5d4:	f003 0301 	and.w	r3, r3, #1
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d00e      	beq.n	800e5fa <tcp_receive+0xbc6>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	8b5b      	ldrh	r3, [r3, #26]
 800e5e0:	f023 0301 	bic.w	r3, r3, #1
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	835a      	strh	r2, [r3, #26]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	8b5b      	ldrh	r3, [r3, #26]
 800e5ee:	f043 0302 	orr.w	r3, r3, #2
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e5f8:	e188      	b.n	800e90c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	8b5b      	ldrh	r3, [r3, #26]
 800e5fe:	f043 0301 	orr.w	r3, r3, #1
 800e602:	b29a      	uxth	r2, r3
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e608:	e180      	b.n	800e90c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d106      	bne.n	800e620 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e612:	4848      	ldr	r0, [pc, #288]	; (800e734 <tcp_receive+0xd00>)
 800e614:	f7fd fbba 	bl	800bd8c <tcp_seg_copy>
 800e618:	4602      	mov	r2, r0
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	675a      	str	r2, [r3, #116]	; 0x74
 800e61e:	e16d      	b.n	800e8fc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e620:	2300      	movs	r3, #0
 800e622:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e628:	63bb      	str	r3, [r7, #56]	; 0x38
 800e62a:	e157      	b.n	800e8dc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	685a      	ldr	r2, [r3, #4]
 800e632:	4b41      	ldr	r3, [pc, #260]	; (800e738 <tcp_receive+0xd04>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	429a      	cmp	r2, r3
 800e638:	d11d      	bne.n	800e676 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e63a:	4b3e      	ldr	r3, [pc, #248]	; (800e734 <tcp_receive+0xd00>)
 800e63c:	891a      	ldrh	r2, [r3, #8]
 800e63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e640:	891b      	ldrh	r3, [r3, #8]
 800e642:	429a      	cmp	r2, r3
 800e644:	f240 814f 	bls.w	800e8e6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e648:	483a      	ldr	r0, [pc, #232]	; (800e734 <tcp_receive+0xd00>)
 800e64a:	f7fd fb9f 	bl	800bd8c <tcp_seg_copy>
 800e64e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	2b00      	cmp	r3, #0
 800e654:	f000 8149 	beq.w	800e8ea <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d003      	beq.n	800e666 <tcp_receive+0xc32>
                    prev->next = cseg;
 800e65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e660:	697a      	ldr	r2, [r7, #20]
 800e662:	601a      	str	r2, [r3, #0]
 800e664:	e002      	b.n	800e66c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	697a      	ldr	r2, [r7, #20]
 800e66a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e66c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e66e:	6978      	ldr	r0, [r7, #20]
 800e670:	f7ff f8dc 	bl	800d82c <tcp_oos_insert_segment>
                }
                break;
 800e674:	e139      	b.n	800e8ea <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d117      	bne.n	800e6ac <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e67c:	4b2e      	ldr	r3, [pc, #184]	; (800e738 <tcp_receive+0xd04>)
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e682:	68db      	ldr	r3, [r3, #12]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	1ad3      	subs	r3, r2, r3
 800e688:	2b00      	cmp	r3, #0
 800e68a:	da57      	bge.n	800e73c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e68c:	4829      	ldr	r0, [pc, #164]	; (800e734 <tcp_receive+0xd00>)
 800e68e:	f7fd fb7d 	bl	800bd8c <tcp_seg_copy>
 800e692:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	2b00      	cmp	r3, #0
 800e698:	f000 8129 	beq.w	800e8ee <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	69ba      	ldr	r2, [r7, #24]
 800e6a0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e6a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e6a4:	69b8      	ldr	r0, [r7, #24]
 800e6a6:	f7ff f8c1 	bl	800d82c <tcp_oos_insert_segment>
                  }
                  break;
 800e6aa:	e120      	b.n	800e8ee <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e6ac:	4b22      	ldr	r3, [pc, #136]	; (800e738 <tcp_receive+0xd04>)
 800e6ae:	681a      	ldr	r2, [r3, #0]
 800e6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	1ad3      	subs	r3, r2, r3
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	db3e      	blt.n	800e73c <tcp_receive+0xd08>
 800e6be:	4b1e      	ldr	r3, [pc, #120]	; (800e738 <tcp_receive+0xd04>)
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c4:	68db      	ldr	r3, [r3, #12]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	dc35      	bgt.n	800e73c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e6d0:	4818      	ldr	r0, [pc, #96]	; (800e734 <tcp_receive+0xd00>)
 800e6d2:	f7fd fb5b 	bl	800bd8c <tcp_seg_copy>
 800e6d6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f000 8109 	beq.w	800e8f2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6e8:	8912      	ldrh	r2, [r2, #8]
 800e6ea:	441a      	add	r2, r3
 800e6ec:	4b12      	ldr	r3, [pc, #72]	; (800e738 <tcp_receive+0xd04>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	1ad3      	subs	r3, r2, r3
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	dd12      	ble.n	800e71c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e6f6:	4b10      	ldr	r3, [pc, #64]	; (800e738 <tcp_receive+0xd04>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	b29a      	uxth	r2, r3
 800e6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	b29b      	uxth	r3, r3
 800e704:	1ad3      	subs	r3, r2, r3
 800e706:	b29a      	uxth	r2, r3
 800e708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70e:	685a      	ldr	r2, [r3, #4]
 800e710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e712:	891b      	ldrh	r3, [r3, #8]
 800e714:	4619      	mov	r1, r3
 800e716:	4610      	mov	r0, r2
 800e718:	f7fb fe84 	bl	800a424 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e71e:	69fa      	ldr	r2, [r7, #28]
 800e720:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e722:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e724:	69f8      	ldr	r0, [r7, #28]
 800e726:	f7ff f881 	bl	800d82c <tcp_oos_insert_segment>
                  }
                  break;
 800e72a:	e0e2      	b.n	800e8f2 <tcp_receive+0xebe>
 800e72c:	20008e98 	.word	0x20008e98
 800e730:	20008e95 	.word	0x20008e95
 800e734:	20008e68 	.word	0x20008e68
 800e738:	20008e88 	.word	0x20008e88
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	f040 80c6 	bne.w	800e8d6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e74a:	4b80      	ldr	r3, [pc, #512]	; (800e94c <tcp_receive+0xf18>)
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e750:	68db      	ldr	r3, [r3, #12]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e756:	2b00      	cmp	r3, #0
 800e758:	f340 80bd 	ble.w	800e8d6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75e:	68db      	ldr	r3, [r3, #12]
 800e760:	899b      	ldrh	r3, [r3, #12]
 800e762:	b29b      	uxth	r3, r3
 800e764:	4618      	mov	r0, r3
 800e766:	f7fa fd2f 	bl	80091c8 <lwip_htons>
 800e76a:	4603      	mov	r3, r0
 800e76c:	b2db      	uxtb	r3, r3
 800e76e:	f003 0301 	and.w	r3, r3, #1
 800e772:	2b00      	cmp	r3, #0
 800e774:	f040 80bf 	bne.w	800e8f6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e778:	4875      	ldr	r0, [pc, #468]	; (800e950 <tcp_receive+0xf1c>)
 800e77a:	f7fd fb07 	bl	800bd8c <tcp_seg_copy>
 800e77e:	4602      	mov	r2, r0
 800e780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e782:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f000 80b6 	beq.w	800e8fa <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e796:	8912      	ldrh	r2, [r2, #8]
 800e798:	441a      	add	r2, r3
 800e79a:	4b6c      	ldr	r3, [pc, #432]	; (800e94c <tcp_receive+0xf18>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	1ad3      	subs	r3, r2, r3
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	dd12      	ble.n	800e7ca <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e7a4:	4b69      	ldr	r3, [pc, #420]	; (800e94c <tcp_receive+0xf18>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	b29a      	uxth	r2, r3
 800e7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	1ad3      	subs	r3, r2, r3
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7bc:	685a      	ldr	r2, [r3, #4]
 800e7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c0:	891b      	ldrh	r3, [r3, #8]
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	4610      	mov	r0, r2
 800e7c6:	f7fb fe2d 	bl	800a424 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e7ca:	4b62      	ldr	r3, [pc, #392]	; (800e954 <tcp_receive+0xf20>)
 800e7cc:	881b      	ldrh	r3, [r3, #0]
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	4b5e      	ldr	r3, [pc, #376]	; (800e94c <tcp_receive+0xf18>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	441a      	add	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7da:	6879      	ldr	r1, [r7, #4]
 800e7dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e7de:	440b      	add	r3, r1
 800e7e0:	1ad3      	subs	r3, r2, r3
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	f340 8089 	ble.w	800e8fa <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	899b      	ldrh	r3, [r3, #12]
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fa fce8 	bl	80091c8 <lwip_htons>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	f003 0301 	and.w	r3, r3, #1
 800e800:	2b00      	cmp	r3, #0
 800e802:	d022      	beq.n	800e84a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	68db      	ldr	r3, [r3, #12]
 800e80a:	899b      	ldrh	r3, [r3, #12]
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	b21b      	sxth	r3, r3
 800e810:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e814:	b21c      	sxth	r4, r3
 800e816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	899b      	ldrh	r3, [r3, #12]
 800e81e:	b29b      	uxth	r3, r3
 800e820:	4618      	mov	r0, r3
 800e822:	f7fa fcd1 	bl	80091c8 <lwip_htons>
 800e826:	4603      	mov	r3, r0
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e830:	b29b      	uxth	r3, r3
 800e832:	4618      	mov	r0, r3
 800e834:	f7fa fcc8 	bl	80091c8 <lwip_htons>
 800e838:	4603      	mov	r3, r0
 800e83a:	b21b      	sxth	r3, r3
 800e83c:	4323      	orrs	r3, r4
 800e83e:	b21a      	sxth	r2, r3
 800e840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	b292      	uxth	r2, r2
 800e848:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e84e:	b29a      	uxth	r2, r3
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e854:	4413      	add	r3, r2
 800e856:	b299      	uxth	r1, r3
 800e858:	4b3c      	ldr	r3, [pc, #240]	; (800e94c <tcp_receive+0xf18>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	1a8a      	subs	r2, r1, r2
 800e864:	b292      	uxth	r2, r2
 800e866:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	685a      	ldr	r2, [r3, #4]
 800e86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	891b      	ldrh	r3, [r3, #8]
 800e874:	4619      	mov	r1, r3
 800e876:	4610      	mov	r0, r2
 800e878:	f7fb fdd4 	bl	800a424 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	891c      	ldrh	r4, [r3, #8]
 800e882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	899b      	ldrh	r3, [r3, #12]
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fa fc9b 	bl	80091c8 <lwip_htons>
 800e892:	4603      	mov	r3, r0
 800e894:	b2db      	uxtb	r3, r3
 800e896:	f003 0303 	and.w	r3, r3, #3
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d001      	beq.n	800e8a2 <tcp_receive+0xe6e>
 800e89e:	2301      	movs	r3, #1
 800e8a0:	e000      	b.n	800e8a4 <tcp_receive+0xe70>
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	4423      	add	r3, r4
 800e8a6:	b29a      	uxth	r2, r3
 800e8a8:	4b2a      	ldr	r3, [pc, #168]	; (800e954 <tcp_receive+0xf20>)
 800e8aa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e8ac:	4b29      	ldr	r3, [pc, #164]	; (800e954 <tcp_receive+0xf20>)
 800e8ae:	881b      	ldrh	r3, [r3, #0]
 800e8b0:	461a      	mov	r2, r3
 800e8b2:	4b26      	ldr	r3, [pc, #152]	; (800e94c <tcp_receive+0xf18>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	441a      	add	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8bc:	6879      	ldr	r1, [r7, #4]
 800e8be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e8c0:	440b      	add	r3, r1
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d019      	beq.n	800e8fa <tcp_receive+0xec6>
 800e8c6:	4b24      	ldr	r3, [pc, #144]	; (800e958 <tcp_receive+0xf24>)
 800e8c8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e8cc:	4923      	ldr	r1, [pc, #140]	; (800e95c <tcp_receive+0xf28>)
 800e8ce:	4824      	ldr	r0, [pc, #144]	; (800e960 <tcp_receive+0xf2c>)
 800e8d0:	f004 fda2 	bl	8013418 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e8d4:	e011      	b.n	800e8fa <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f47f aea4 	bne.w	800e62c <tcp_receive+0xbf8>
 800e8e4:	e00a      	b.n	800e8fc <tcp_receive+0xec8>
                break;
 800e8e6:	bf00      	nop
 800e8e8:	e008      	b.n	800e8fc <tcp_receive+0xec8>
                break;
 800e8ea:	bf00      	nop
 800e8ec:	e006      	b.n	800e8fc <tcp_receive+0xec8>
                  break;
 800e8ee:	bf00      	nop
 800e8f0:	e004      	b.n	800e8fc <tcp_receive+0xec8>
                  break;
 800e8f2:	bf00      	nop
 800e8f4:	e002      	b.n	800e8fc <tcp_receive+0xec8>
                  break;
 800e8f6:	bf00      	nop
 800e8f8:	e000      	b.n	800e8fc <tcp_receive+0xec8>
                break;
 800e8fa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f001 fa33 	bl	800fd68 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e902:	e003      	b.n	800e90c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f001 fa2f 	bl	800fd68 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e90a:	e01a      	b.n	800e942 <tcp_receive+0xf0e>
 800e90c:	e019      	b.n	800e942 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e90e:	4b0f      	ldr	r3, [pc, #60]	; (800e94c <tcp_receive+0xf18>)
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	2b00      	cmp	r3, #0
 800e91a:	db0a      	blt.n	800e932 <tcp_receive+0xefe>
 800e91c:	4b0b      	ldr	r3, [pc, #44]	; (800e94c <tcp_receive+0xf18>)
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e924:	6879      	ldr	r1, [r7, #4]
 800e926:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e928:	440b      	add	r3, r1
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	3301      	adds	r3, #1
 800e92e:	2b00      	cmp	r3, #0
 800e930:	dd07      	ble.n	800e942 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	8b5b      	ldrh	r3, [r3, #26]
 800e936:	f043 0302 	orr.w	r3, r3, #2
 800e93a:	b29a      	uxth	r2, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e940:	e7ff      	b.n	800e942 <tcp_receive+0xf0e>
 800e942:	bf00      	nop
 800e944:	3750      	adds	r7, #80	; 0x50
 800e946:	46bd      	mov	sp, r7
 800e948:	bdb0      	pop	{r4, r5, r7, pc}
 800e94a:	bf00      	nop
 800e94c:	20008e88 	.word	0x20008e88
 800e950:	20008e68 	.word	0x20008e68
 800e954:	20008e92 	.word	0x20008e92
 800e958:	08015abc 	.word	0x08015abc
 800e95c:	08015e64 	.word	0x08015e64
 800e960:	08015b08 	.word	0x08015b08

0800e964 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e96a:	4b15      	ldr	r3, [pc, #84]	; (800e9c0 <tcp_get_next_optbyte+0x5c>)
 800e96c:	881b      	ldrh	r3, [r3, #0]
 800e96e:	1c5a      	adds	r2, r3, #1
 800e970:	b291      	uxth	r1, r2
 800e972:	4a13      	ldr	r2, [pc, #76]	; (800e9c0 <tcp_get_next_optbyte+0x5c>)
 800e974:	8011      	strh	r1, [r2, #0]
 800e976:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e978:	4b12      	ldr	r3, [pc, #72]	; (800e9c4 <tcp_get_next_optbyte+0x60>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d004      	beq.n	800e98a <tcp_get_next_optbyte+0x26>
 800e980:	4b11      	ldr	r3, [pc, #68]	; (800e9c8 <tcp_get_next_optbyte+0x64>)
 800e982:	881b      	ldrh	r3, [r3, #0]
 800e984:	88fa      	ldrh	r2, [r7, #6]
 800e986:	429a      	cmp	r2, r3
 800e988:	d208      	bcs.n	800e99c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e98a:	4b10      	ldr	r3, [pc, #64]	; (800e9cc <tcp_get_next_optbyte+0x68>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	3314      	adds	r3, #20
 800e990:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e992:	88fb      	ldrh	r3, [r7, #6]
 800e994:	683a      	ldr	r2, [r7, #0]
 800e996:	4413      	add	r3, r2
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	e00b      	b.n	800e9b4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e99c:	88fb      	ldrh	r3, [r7, #6]
 800e99e:	b2da      	uxtb	r2, r3
 800e9a0:	4b09      	ldr	r3, [pc, #36]	; (800e9c8 <tcp_get_next_optbyte+0x64>)
 800e9a2:	881b      	ldrh	r3, [r3, #0]
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	1ad3      	subs	r3, r2, r3
 800e9a8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e9aa:	4b06      	ldr	r3, [pc, #24]	; (800e9c4 <tcp_get_next_optbyte+0x60>)
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	797b      	ldrb	r3, [r7, #5]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	370c      	adds	r7, #12
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr
 800e9c0:	20008e84 	.word	0x20008e84
 800e9c4:	20008e80 	.word	0x20008e80
 800e9c8:	20008e7e 	.word	0x20008e7e
 800e9cc:	20008e78 	.word	0x20008e78

0800e9d0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b084      	sub	sp, #16
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d106      	bne.n	800e9ec <tcp_parseopt+0x1c>
 800e9de:	4b32      	ldr	r3, [pc, #200]	; (800eaa8 <tcp_parseopt+0xd8>)
 800e9e0:	f240 727d 	movw	r2, #1917	; 0x77d
 800e9e4:	4931      	ldr	r1, [pc, #196]	; (800eaac <tcp_parseopt+0xdc>)
 800e9e6:	4832      	ldr	r0, [pc, #200]	; (800eab0 <tcp_parseopt+0xe0>)
 800e9e8:	f004 fd16 	bl	8013418 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e9ec:	4b31      	ldr	r3, [pc, #196]	; (800eab4 <tcp_parseopt+0xe4>)
 800e9ee:	881b      	ldrh	r3, [r3, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d055      	beq.n	800eaa0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e9f4:	4b30      	ldr	r3, [pc, #192]	; (800eab8 <tcp_parseopt+0xe8>)
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	801a      	strh	r2, [r3, #0]
 800e9fa:	e045      	b.n	800ea88 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e9fc:	f7ff ffb2 	bl	800e964 <tcp_get_next_optbyte>
 800ea00:	4603      	mov	r3, r0
 800ea02:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ea04:	7bfb      	ldrb	r3, [r7, #15]
 800ea06:	2b02      	cmp	r3, #2
 800ea08:	d006      	beq.n	800ea18 <tcp_parseopt+0x48>
 800ea0a:	2b02      	cmp	r3, #2
 800ea0c:	dc2b      	bgt.n	800ea66 <tcp_parseopt+0x96>
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d041      	beq.n	800ea96 <tcp_parseopt+0xc6>
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d127      	bne.n	800ea66 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ea16:	e037      	b.n	800ea88 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ea18:	f7ff ffa4 	bl	800e964 <tcp_get_next_optbyte>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b04      	cmp	r3, #4
 800ea20:	d13b      	bne.n	800ea9a <tcp_parseopt+0xca>
 800ea22:	4b25      	ldr	r3, [pc, #148]	; (800eab8 <tcp_parseopt+0xe8>)
 800ea24:	881b      	ldrh	r3, [r3, #0]
 800ea26:	3301      	adds	r3, #1
 800ea28:	4a22      	ldr	r2, [pc, #136]	; (800eab4 <tcp_parseopt+0xe4>)
 800ea2a:	8812      	ldrh	r2, [r2, #0]
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	da34      	bge.n	800ea9a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ea30:	f7ff ff98 	bl	800e964 <tcp_get_next_optbyte>
 800ea34:	4603      	mov	r3, r0
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	021b      	lsls	r3, r3, #8
 800ea3a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ea3c:	f7ff ff92 	bl	800e964 <tcp_get_next_optbyte>
 800ea40:	4603      	mov	r3, r0
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	89bb      	ldrh	r3, [r7, #12]
 800ea46:	4313      	orrs	r3, r2
 800ea48:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ea4a:	89bb      	ldrh	r3, [r7, #12]
 800ea4c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ea50:	d804      	bhi.n	800ea5c <tcp_parseopt+0x8c>
 800ea52:	89bb      	ldrh	r3, [r7, #12]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d001      	beq.n	800ea5c <tcp_parseopt+0x8c>
 800ea58:	89ba      	ldrh	r2, [r7, #12]
 800ea5a:	e001      	b.n	800ea60 <tcp_parseopt+0x90>
 800ea5c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ea64:	e010      	b.n	800ea88 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ea66:	f7ff ff7d 	bl	800e964 <tcp_get_next_optbyte>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ea6e:	7afb      	ldrb	r3, [r7, #11]
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d914      	bls.n	800ea9e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ea74:	7afb      	ldrb	r3, [r7, #11]
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	4b0f      	ldr	r3, [pc, #60]	; (800eab8 <tcp_parseopt+0xe8>)
 800ea7a:	881b      	ldrh	r3, [r3, #0]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	3b02      	subs	r3, #2
 800ea82:	b29a      	uxth	r2, r3
 800ea84:	4b0c      	ldr	r3, [pc, #48]	; (800eab8 <tcp_parseopt+0xe8>)
 800ea86:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ea88:	4b0b      	ldr	r3, [pc, #44]	; (800eab8 <tcp_parseopt+0xe8>)
 800ea8a:	881a      	ldrh	r2, [r3, #0]
 800ea8c:	4b09      	ldr	r3, [pc, #36]	; (800eab4 <tcp_parseopt+0xe4>)
 800ea8e:	881b      	ldrh	r3, [r3, #0]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d3b3      	bcc.n	800e9fc <tcp_parseopt+0x2c>
 800ea94:	e004      	b.n	800eaa0 <tcp_parseopt+0xd0>
          return;
 800ea96:	bf00      	nop
 800ea98:	e002      	b.n	800eaa0 <tcp_parseopt+0xd0>
            return;
 800ea9a:	bf00      	nop
 800ea9c:	e000      	b.n	800eaa0 <tcp_parseopt+0xd0>
            return;
 800ea9e:	bf00      	nop
      }
    }
  }
}
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	08015abc 	.word	0x08015abc
 800eaac:	08015f20 	.word	0x08015f20
 800eab0:	08015b08 	.word	0x08015b08
 800eab4:	20008e7c 	.word	0x20008e7c
 800eab8:	20008e84 	.word	0x20008e84

0800eabc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800eabc:	b480      	push	{r7}
 800eabe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800eac0:	4b05      	ldr	r3, [pc, #20]	; (800ead8 <tcp_trigger_input_pcb_close+0x1c>)
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	f043 0310 	orr.w	r3, r3, #16
 800eac8:	b2da      	uxtb	r2, r3
 800eaca:	4b03      	ldr	r3, [pc, #12]	; (800ead8 <tcp_trigger_input_pcb_close+0x1c>)
 800eacc:	701a      	strb	r2, [r3, #0]
}
 800eace:	bf00      	nop
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr
 800ead8:	20008e95 	.word	0x20008e95

0800eadc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00a      	beq.n	800eb04 <tcp_route+0x28>
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	7a1b      	ldrb	r3, [r3, #8]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d006      	beq.n	800eb04 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	7a1b      	ldrb	r3, [r3, #8]
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fb fab8 	bl	800a070 <netif_get_by_index>
 800eb00:	4603      	mov	r3, r0
 800eb02:	e003      	b.n	800eb0c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f003 fa37 	bl	8011f78 <ip4_route>
 800eb0a:	4603      	mov	r3, r0
  }
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3710      	adds	r7, #16
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800eb14:	b590      	push	{r4, r7, lr}
 800eb16:	b087      	sub	sp, #28
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	603b      	str	r3, [r7, #0]
 800eb20:	4613      	mov	r3, r2
 800eb22:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d105      	bne.n	800eb36 <tcp_create_segment+0x22>
 800eb2a:	4b44      	ldr	r3, [pc, #272]	; (800ec3c <tcp_create_segment+0x128>)
 800eb2c:	22a3      	movs	r2, #163	; 0xa3
 800eb2e:	4944      	ldr	r1, [pc, #272]	; (800ec40 <tcp_create_segment+0x12c>)
 800eb30:	4844      	ldr	r0, [pc, #272]	; (800ec44 <tcp_create_segment+0x130>)
 800eb32:	f004 fc71 	bl	8013418 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d105      	bne.n	800eb48 <tcp_create_segment+0x34>
 800eb3c:	4b3f      	ldr	r3, [pc, #252]	; (800ec3c <tcp_create_segment+0x128>)
 800eb3e:	22a4      	movs	r2, #164	; 0xa4
 800eb40:	4941      	ldr	r1, [pc, #260]	; (800ec48 <tcp_create_segment+0x134>)
 800eb42:	4840      	ldr	r0, [pc, #256]	; (800ec44 <tcp_create_segment+0x130>)
 800eb44:	f004 fc68 	bl	8013418 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800eb48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eb4c:	009b      	lsls	r3, r3, #2
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	f003 0304 	and.w	r3, r3, #4
 800eb54:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800eb56:	2003      	movs	r0, #3
 800eb58:	f7fa ff8c 	bl	8009a74 <memp_malloc>
 800eb5c:	6138      	str	r0, [r7, #16]
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d104      	bne.n	800eb6e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800eb64:	68b8      	ldr	r0, [r7, #8]
 800eb66:	f7fb fde3 	bl	800a730 <pbuf_free>
    return NULL;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	e061      	b.n	800ec32 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800eb74:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	891a      	ldrh	r2, [r3, #8]
 800eb86:	7dfb      	ldrb	r3, [r7, #23]
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d205      	bcs.n	800eb9a <tcp_create_segment+0x86>
 800eb8e:	4b2b      	ldr	r3, [pc, #172]	; (800ec3c <tcp_create_segment+0x128>)
 800eb90:	22b0      	movs	r2, #176	; 0xb0
 800eb92:	492e      	ldr	r1, [pc, #184]	; (800ec4c <tcp_create_segment+0x138>)
 800eb94:	482b      	ldr	r0, [pc, #172]	; (800ec44 <tcp_create_segment+0x130>)
 800eb96:	f004 fc3f 	bl	8013418 <iprintf>
  seg->len = p->tot_len - optlen;
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	891a      	ldrh	r2, [r3, #8]
 800eb9e:	7dfb      	ldrb	r3, [r7, #23]
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	1ad3      	subs	r3, r2, r3
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ebaa:	2114      	movs	r1, #20
 800ebac:	68b8      	ldr	r0, [r7, #8]
 800ebae:	f7fb fd29 	bl	800a604 <pbuf_add_header>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d004      	beq.n	800ebc2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ebb8:	6938      	ldr	r0, [r7, #16]
 800ebba:	f7fd f8ce 	bl	800bd5a <tcp_seg_free>
    return NULL;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	e037      	b.n	800ec32 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	685a      	ldr	r2, [r3, #4]
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	8ada      	ldrh	r2, [r3, #22]
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	68dc      	ldr	r4, [r3, #12]
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	f7fa faf7 	bl	80091c8 <lwip_htons>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	8b1a      	ldrh	r2, [r3, #24]
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	68dc      	ldr	r4, [r3, #12]
 800ebe6:	4610      	mov	r0, r2
 800ebe8:	f7fa faee 	bl	80091c8 <lwip_htons>
 800ebec:	4603      	mov	r3, r0
 800ebee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	68dc      	ldr	r4, [r3, #12]
 800ebf4:	6838      	ldr	r0, [r7, #0]
 800ebf6:	f7fa fafc 	bl	80091f2 <lwip_htonl>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ebfe:	7dfb      	ldrb	r3, [r7, #23]
 800ec00:	089b      	lsrs	r3, r3, #2
 800ec02:	b2db      	uxtb	r3, r3
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	3305      	adds	r3, #5
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	031b      	lsls	r3, r3, #12
 800ec0c:	b29a      	uxth	r2, r3
 800ec0e:	79fb      	ldrb	r3, [r7, #7]
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	4313      	orrs	r3, r2
 800ec14:	b29a      	uxth	r2, r3
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	68dc      	ldr	r4, [r3, #12]
 800ec1a:	4610      	mov	r0, r2
 800ec1c:	f7fa fad4 	bl	80091c8 <lwip_htons>
 800ec20:	4603      	mov	r3, r0
 800ec22:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	749a      	strb	r2, [r3, #18]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	74da      	strb	r2, [r3, #19]
  return seg;
 800ec30:	693b      	ldr	r3, [r7, #16]
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	371c      	adds	r7, #28
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd90      	pop	{r4, r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	08015f3c 	.word	0x08015f3c
 800ec40:	08015f70 	.word	0x08015f70
 800ec44:	08015f90 	.word	0x08015f90
 800ec48:	08015fb8 	.word	0x08015fb8
 800ec4c:	08015fdc 	.word	0x08015fdc

0800ec50 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ec50:	b590      	push	{r4, r7, lr}
 800ec52:	b08b      	sub	sp, #44	; 0x2c
 800ec54:	af02      	add	r7, sp, #8
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	460b      	mov	r3, r1
 800ec5a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	61fb      	str	r3, [r7, #28]
 800ec60:	2300      	movs	r3, #0
 800ec62:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ec64:	2300      	movs	r3, #0
 800ec66:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d106      	bne.n	800ec7c <tcp_split_unsent_seg+0x2c>
 800ec6e:	4b95      	ldr	r3, [pc, #596]	; (800eec4 <tcp_split_unsent_seg+0x274>)
 800ec70:	f240 324b 	movw	r2, #843	; 0x34b
 800ec74:	4994      	ldr	r1, [pc, #592]	; (800eec8 <tcp_split_unsent_seg+0x278>)
 800ec76:	4895      	ldr	r0, [pc, #596]	; (800eecc <tcp_split_unsent_seg+0x27c>)
 800ec78:	f004 fbce 	bl	8013418 <iprintf>

  useg = pcb->unsent;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec80:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d102      	bne.n	800ec8e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ec88:	f04f 33ff 	mov.w	r3, #4294967295
 800ec8c:	e116      	b.n	800eebc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ec8e:	887b      	ldrh	r3, [r7, #2]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d109      	bne.n	800eca8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ec94:	4b8b      	ldr	r3, [pc, #556]	; (800eec4 <tcp_split_unsent_seg+0x274>)
 800ec96:	f240 3253 	movw	r2, #851	; 0x353
 800ec9a:	498d      	ldr	r1, [pc, #564]	; (800eed0 <tcp_split_unsent_seg+0x280>)
 800ec9c:	488b      	ldr	r0, [pc, #556]	; (800eecc <tcp_split_unsent_seg+0x27c>)
 800ec9e:	f004 fbbb 	bl	8013418 <iprintf>
    return ERR_VAL;
 800eca2:	f06f 0305 	mvn.w	r3, #5
 800eca6:	e109      	b.n	800eebc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	891b      	ldrh	r3, [r3, #8]
 800ecac:	887a      	ldrh	r2, [r7, #2]
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d301      	bcc.n	800ecb6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	e102      	b.n	800eebc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecba:	887a      	ldrh	r2, [r7, #2]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d906      	bls.n	800ecce <tcp_split_unsent_seg+0x7e>
 800ecc0:	4b80      	ldr	r3, [pc, #512]	; (800eec4 <tcp_split_unsent_seg+0x274>)
 800ecc2:	f240 325b 	movw	r2, #859	; 0x35b
 800ecc6:	4983      	ldr	r1, [pc, #524]	; (800eed4 <tcp_split_unsent_seg+0x284>)
 800ecc8:	4880      	ldr	r0, [pc, #512]	; (800eecc <tcp_split_unsent_seg+0x27c>)
 800ecca:	f004 fba5 	bl	8013418 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	891b      	ldrh	r3, [r3, #8]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d106      	bne.n	800ece4 <tcp_split_unsent_seg+0x94>
 800ecd6:	4b7b      	ldr	r3, [pc, #492]	; (800eec4 <tcp_split_unsent_seg+0x274>)
 800ecd8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ecdc:	497e      	ldr	r1, [pc, #504]	; (800eed8 <tcp_split_unsent_seg+0x288>)
 800ecde:	487b      	ldr	r0, [pc, #492]	; (800eecc <tcp_split_unsent_seg+0x27c>)
 800ece0:	f004 fb9a 	bl	8013418 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	7a9b      	ldrb	r3, [r3, #10]
 800ece8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ecea:	7bfb      	ldrb	r3, [r7, #15]
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	f003 0304 	and.w	r3, r3, #4
 800ecf4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	891a      	ldrh	r2, [r3, #8]
 800ecfa:	887b      	ldrh	r3, [r7, #2]
 800ecfc:	1ad3      	subs	r3, r2, r3
 800ecfe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ed00:	7bbb      	ldrb	r3, [r7, #14]
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	89bb      	ldrh	r3, [r7, #12]
 800ed06:	4413      	add	r3, r2
 800ed08:	b29b      	uxth	r3, r3
 800ed0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed0e:	4619      	mov	r1, r3
 800ed10:	2036      	movs	r0, #54	; 0x36
 800ed12:	f7fb fa29 	bl	800a168 <pbuf_alloc>
 800ed16:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	f000 80b7 	beq.w	800ee8e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	891a      	ldrh	r2, [r3, #8]
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	891b      	ldrh	r3, [r3, #8]
 800ed2a:	1ad3      	subs	r3, r2, r3
 800ed2c:	b29a      	uxth	r2, r3
 800ed2e:	887b      	ldrh	r3, [r7, #2]
 800ed30:	4413      	add	r3, r2
 800ed32:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	6858      	ldr	r0, [r3, #4]
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	685a      	ldr	r2, [r3, #4]
 800ed3c:	7bbb      	ldrb	r3, [r7, #14]
 800ed3e:	18d1      	adds	r1, r2, r3
 800ed40:	897b      	ldrh	r3, [r7, #10]
 800ed42:	89ba      	ldrh	r2, [r7, #12]
 800ed44:	f7fb feee 	bl	800ab24 <pbuf_copy_partial>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	89bb      	ldrh	r3, [r7, #12]
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	f040 809f 	bne.w	800ee92 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	899b      	ldrh	r3, [r3, #12]
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7fa fa33 	bl	80091c8 <lwip_htons>
 800ed62:	4603      	mov	r3, r0
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed6a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ed70:	7efb      	ldrb	r3, [r7, #27]
 800ed72:	f003 0308 	and.w	r3, r3, #8
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d007      	beq.n	800ed8a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ed7a:	7efb      	ldrb	r3, [r7, #27]
 800ed7c:	f023 0308 	bic.w	r3, r3, #8
 800ed80:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ed82:	7ebb      	ldrb	r3, [r7, #26]
 800ed84:	f043 0308 	orr.w	r3, r3, #8
 800ed88:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ed8a:	7efb      	ldrb	r3, [r7, #27]
 800ed8c:	f003 0301 	and.w	r3, r3, #1
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d007      	beq.n	800eda4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ed94:	7efb      	ldrb	r3, [r7, #27]
 800ed96:	f023 0301 	bic.w	r3, r3, #1
 800ed9a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ed9c:	7ebb      	ldrb	r3, [r7, #26]
 800ed9e:	f043 0301 	orr.w	r3, r3, #1
 800eda2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	4618      	mov	r0, r3
 800edac:	f7fa fa21 	bl	80091f2 <lwip_htonl>
 800edb0:	4602      	mov	r2, r0
 800edb2:	887b      	ldrh	r3, [r7, #2]
 800edb4:	18d1      	adds	r1, r2, r3
 800edb6:	7eba      	ldrb	r2, [r7, #26]
 800edb8:	7bfb      	ldrb	r3, [r7, #15]
 800edba:	9300      	str	r3, [sp, #0]
 800edbc:	460b      	mov	r3, r1
 800edbe:	6939      	ldr	r1, [r7, #16]
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f7ff fea7 	bl	800eb14 <tcp_create_segment>
 800edc6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d063      	beq.n	800ee96 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	685b      	ldr	r3, [r3, #4]
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fb fd34 	bl	800a840 <pbuf_clen>
 800edd8:	4603      	mov	r3, r0
 800edda:	461a      	mov	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ede2:	1a9b      	subs	r3, r3, r2
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	6858      	ldr	r0, [r3, #4]
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	891a      	ldrh	r2, [r3, #8]
 800edf6:	89bb      	ldrh	r3, [r7, #12]
 800edf8:	1ad3      	subs	r3, r2, r3
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	4619      	mov	r1, r3
 800edfe:	f7fb fb11 	bl	800a424 <pbuf_realloc>
  useg->len -= remainder;
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	891a      	ldrh	r2, [r3, #8]
 800ee06:	89bb      	ldrh	r3, [r7, #12]
 800ee08:	1ad3      	subs	r3, r2, r3
 800ee0a:	b29a      	uxth	r2, r3
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	899b      	ldrh	r3, [r3, #12]
 800ee16:	b29c      	uxth	r4, r3
 800ee18:	7efb      	ldrb	r3, [r7, #27]
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7fa f9d3 	bl	80091c8 <lwip_htons>
 800ee22:	4603      	mov	r3, r0
 800ee24:	461a      	mov	r2, r3
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	68db      	ldr	r3, [r3, #12]
 800ee2a:	4322      	orrs	r2, r4
 800ee2c:	b292      	uxth	r2, r2
 800ee2e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fb fd03 	bl	800a840 <pbuf_clen>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee44:	4413      	add	r3, r2
 800ee46:	b29a      	uxth	r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ee4e:	69fb      	ldr	r3, [r7, #28]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fb fcf4 	bl	800a840 <pbuf_clen>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee62:	4413      	add	r3, r2
 800ee64:	b29a      	uxth	r2, r3
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	69fa      	ldr	r2, [r7, #28]
 800ee78:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d103      	bne.n	800ee8a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	e016      	b.n	800eebc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ee8e:	bf00      	nop
 800ee90:	e002      	b.n	800ee98 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ee92:	bf00      	nop
 800ee94:	e000      	b.n	800ee98 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ee96:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d006      	beq.n	800eeac <tcp_split_unsent_seg+0x25c>
 800ee9e:	4b09      	ldr	r3, [pc, #36]	; (800eec4 <tcp_split_unsent_seg+0x274>)
 800eea0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800eea4:	490d      	ldr	r1, [pc, #52]	; (800eedc <tcp_split_unsent_seg+0x28c>)
 800eea6:	4809      	ldr	r0, [pc, #36]	; (800eecc <tcp_split_unsent_seg+0x27c>)
 800eea8:	f004 fab6 	bl	8013418 <iprintf>
  if (p != NULL) {
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d002      	beq.n	800eeb8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800eeb2:	6938      	ldr	r0, [r7, #16]
 800eeb4:	f7fb fc3c 	bl	800a730 <pbuf_free>
  }

  return ERR_MEM;
 800eeb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3724      	adds	r7, #36	; 0x24
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd90      	pop	{r4, r7, pc}
 800eec4:	08015f3c 	.word	0x08015f3c
 800eec8:	080162d0 	.word	0x080162d0
 800eecc:	08015f90 	.word	0x08015f90
 800eed0:	080162f4 	.word	0x080162f4
 800eed4:	08016318 	.word	0x08016318
 800eed8:	08016328 	.word	0x08016328
 800eedc:	08016338 	.word	0x08016338

0800eee0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800eee0:	b590      	push	{r4, r7, lr}
 800eee2:	b085      	sub	sp, #20
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d106      	bne.n	800eefc <tcp_send_fin+0x1c>
 800eeee:	4b21      	ldr	r3, [pc, #132]	; (800ef74 <tcp_send_fin+0x94>)
 800eef0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800eef4:	4920      	ldr	r1, [pc, #128]	; (800ef78 <tcp_send_fin+0x98>)
 800eef6:	4821      	ldr	r0, [pc, #132]	; (800ef7c <tcp_send_fin+0x9c>)
 800eef8:	f004 fa8e 	bl	8013418 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d02e      	beq.n	800ef62 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef08:	60fb      	str	r3, [r7, #12]
 800ef0a:	e002      	b.n	800ef12 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d1f8      	bne.n	800ef0c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	899b      	ldrh	r3, [r3, #12]
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fa f950 	bl	80091c8 <lwip_htons>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	f003 0307 	and.w	r3, r3, #7
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d116      	bne.n	800ef62 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	899b      	ldrh	r3, [r3, #12]
 800ef3a:	b29c      	uxth	r4, r3
 800ef3c:	2001      	movs	r0, #1
 800ef3e:	f7fa f943 	bl	80091c8 <lwip_htons>
 800ef42:	4603      	mov	r3, r0
 800ef44:	461a      	mov	r2, r3
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	68db      	ldr	r3, [r3, #12]
 800ef4a:	4322      	orrs	r2, r4
 800ef4c:	b292      	uxth	r2, r2
 800ef4e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	8b5b      	ldrh	r3, [r3, #26]
 800ef54:	f043 0320 	orr.w	r3, r3, #32
 800ef58:	b29a      	uxth	r2, r3
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	e004      	b.n	800ef6c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ef62:	2101      	movs	r1, #1
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 f80b 	bl	800ef80 <tcp_enqueue_flags>
 800ef6a:	4603      	mov	r3, r0
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3714      	adds	r7, #20
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd90      	pop	{r4, r7, pc}
 800ef74:	08015f3c 	.word	0x08015f3c
 800ef78:	08016344 	.word	0x08016344
 800ef7c:	08015f90 	.word	0x08015f90

0800ef80 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b08a      	sub	sp, #40	; 0x28
 800ef84:	af02      	add	r7, sp, #8
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	460b      	mov	r3, r1
 800ef8a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ef90:	2300      	movs	r3, #0
 800ef92:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ef94:	78fb      	ldrb	r3, [r7, #3]
 800ef96:	f003 0303 	and.w	r3, r3, #3
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d106      	bne.n	800efac <tcp_enqueue_flags+0x2c>
 800ef9e:	4b67      	ldr	r3, [pc, #412]	; (800f13c <tcp_enqueue_flags+0x1bc>)
 800efa0:	f240 4211 	movw	r2, #1041	; 0x411
 800efa4:	4966      	ldr	r1, [pc, #408]	; (800f140 <tcp_enqueue_flags+0x1c0>)
 800efa6:	4867      	ldr	r0, [pc, #412]	; (800f144 <tcp_enqueue_flags+0x1c4>)
 800efa8:	f004 fa36 	bl	8013418 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d106      	bne.n	800efc0 <tcp_enqueue_flags+0x40>
 800efb2:	4b62      	ldr	r3, [pc, #392]	; (800f13c <tcp_enqueue_flags+0x1bc>)
 800efb4:	f240 4213 	movw	r2, #1043	; 0x413
 800efb8:	4963      	ldr	r1, [pc, #396]	; (800f148 <tcp_enqueue_flags+0x1c8>)
 800efba:	4862      	ldr	r0, [pc, #392]	; (800f144 <tcp_enqueue_flags+0x1c4>)
 800efbc:	f004 fa2c 	bl	8013418 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800efc0:	78fb      	ldrb	r3, [r7, #3]
 800efc2:	f003 0302 	and.w	r3, r3, #2
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d001      	beq.n	800efce <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800efca:	2301      	movs	r3, #1
 800efcc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800efce:	7ffb      	ldrb	r3, [r7, #31]
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	f003 0304 	and.w	r3, r3, #4
 800efd8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800efda:	7dfb      	ldrb	r3, [r7, #23]
 800efdc:	b29b      	uxth	r3, r3
 800efde:	f44f 7220 	mov.w	r2, #640	; 0x280
 800efe2:	4619      	mov	r1, r3
 800efe4:	2036      	movs	r0, #54	; 0x36
 800efe6:	f7fb f8bf 	bl	800a168 <pbuf_alloc>
 800efea:	6138      	str	r0, [r7, #16]
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d109      	bne.n	800f006 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	8b5b      	ldrh	r3, [r3, #26]
 800eff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800effa:	b29a      	uxth	r2, r3
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f000:	f04f 33ff 	mov.w	r3, #4294967295
 800f004:	e095      	b.n	800f132 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	895a      	ldrh	r2, [r3, #10]
 800f00a:	7dfb      	ldrb	r3, [r7, #23]
 800f00c:	b29b      	uxth	r3, r3
 800f00e:	429a      	cmp	r2, r3
 800f010:	d206      	bcs.n	800f020 <tcp_enqueue_flags+0xa0>
 800f012:	4b4a      	ldr	r3, [pc, #296]	; (800f13c <tcp_enqueue_flags+0x1bc>)
 800f014:	f240 4239 	movw	r2, #1081	; 0x439
 800f018:	494c      	ldr	r1, [pc, #304]	; (800f14c <tcp_enqueue_flags+0x1cc>)
 800f01a:	484a      	ldr	r0, [pc, #296]	; (800f144 <tcp_enqueue_flags+0x1c4>)
 800f01c:	f004 f9fc 	bl	8013418 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f024:	78fa      	ldrb	r2, [r7, #3]
 800f026:	7ffb      	ldrb	r3, [r7, #31]
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	460b      	mov	r3, r1
 800f02c:	6939      	ldr	r1, [r7, #16]
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f7ff fd70 	bl	800eb14 <tcp_create_segment>
 800f034:	60f8      	str	r0, [r7, #12]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d109      	bne.n	800f050 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	8b5b      	ldrh	r3, [r3, #26]
 800f040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f044:	b29a      	uxth	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f04a:	f04f 33ff 	mov.w	r3, #4294967295
 800f04e:	e070      	b.n	800f132 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	68db      	ldr	r3, [r3, #12]
 800f054:	f003 0303 	and.w	r3, r3, #3
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d006      	beq.n	800f06a <tcp_enqueue_flags+0xea>
 800f05c:	4b37      	ldr	r3, [pc, #220]	; (800f13c <tcp_enqueue_flags+0x1bc>)
 800f05e:	f240 4242 	movw	r2, #1090	; 0x442
 800f062:	493b      	ldr	r1, [pc, #236]	; (800f150 <tcp_enqueue_flags+0x1d0>)
 800f064:	4837      	ldr	r0, [pc, #220]	; (800f144 <tcp_enqueue_flags+0x1c4>)
 800f066:	f004 f9d7 	bl	8013418 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	891b      	ldrh	r3, [r3, #8]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d006      	beq.n	800f080 <tcp_enqueue_flags+0x100>
 800f072:	4b32      	ldr	r3, [pc, #200]	; (800f13c <tcp_enqueue_flags+0x1bc>)
 800f074:	f240 4243 	movw	r2, #1091	; 0x443
 800f078:	4936      	ldr	r1, [pc, #216]	; (800f154 <tcp_enqueue_flags+0x1d4>)
 800f07a:	4832      	ldr	r0, [pc, #200]	; (800f144 <tcp_enqueue_flags+0x1c4>)
 800f07c:	f004 f9cc 	bl	8013418 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f084:	2b00      	cmp	r3, #0
 800f086:	d103      	bne.n	800f090 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	68fa      	ldr	r2, [r7, #12]
 800f08c:	66da      	str	r2, [r3, #108]	; 0x6c
 800f08e:	e00d      	b.n	800f0ac <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f094:	61bb      	str	r3, [r7, #24]
 800f096:	e002      	b.n	800f09e <tcp_enqueue_flags+0x11e>
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	61bb      	str	r3, [r7, #24]
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d1f8      	bne.n	800f098 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f0a6:	69bb      	ldr	r3, [r7, #24]
 800f0a8:	68fa      	ldr	r2, [r7, #12]
 800f0aa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f0b4:	78fb      	ldrb	r3, [r7, #3]
 800f0b6:	f003 0302 	and.w	r3, r3, #2
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d104      	bne.n	800f0c8 <tcp_enqueue_flags+0x148>
 800f0be:	78fb      	ldrb	r3, [r7, #3]
 800f0c0:	f003 0301 	and.w	r3, r3, #1
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d004      	beq.n	800f0d2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0cc:	1c5a      	adds	r2, r3, #1
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f0d2:	78fb      	ldrb	r3, [r7, #3]
 800f0d4:	f003 0301 	and.w	r3, r3, #1
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d006      	beq.n	800f0ea <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	8b5b      	ldrh	r3, [r3, #26]
 800f0e0:	f043 0320 	orr.w	r3, r3, #32
 800f0e4:	b29a      	uxth	r2, r3
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fb fba6 	bl	800a840 <pbuf_clen>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f0fe:	4413      	add	r3, r2
 800f100:	b29a      	uxth	r2, r3
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d00e      	beq.n	800f130 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f116:	2b00      	cmp	r3, #0
 800f118:	d10a      	bne.n	800f130 <tcp_enqueue_flags+0x1b0>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d106      	bne.n	800f130 <tcp_enqueue_flags+0x1b0>
 800f122:	4b06      	ldr	r3, [pc, #24]	; (800f13c <tcp_enqueue_flags+0x1bc>)
 800f124:	f240 4265 	movw	r2, #1125	; 0x465
 800f128:	490b      	ldr	r1, [pc, #44]	; (800f158 <tcp_enqueue_flags+0x1d8>)
 800f12a:	4806      	ldr	r0, [pc, #24]	; (800f144 <tcp_enqueue_flags+0x1c4>)
 800f12c:	f004 f974 	bl	8013418 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f130:	2300      	movs	r3, #0
}
 800f132:	4618      	mov	r0, r3
 800f134:	3720      	adds	r7, #32
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	08015f3c 	.word	0x08015f3c
 800f140:	08016360 	.word	0x08016360
 800f144:	08015f90 	.word	0x08015f90
 800f148:	080163b8 	.word	0x080163b8
 800f14c:	080163d8 	.word	0x080163d8
 800f150:	08016414 	.word	0x08016414
 800f154:	0801642c 	.word	0x0801642c
 800f158:	08016458 	.word	0x08016458

0800f15c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f15c:	b5b0      	push	{r4, r5, r7, lr}
 800f15e:	b08a      	sub	sp, #40	; 0x28
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d106      	bne.n	800f178 <tcp_output+0x1c>
 800f16a:	4b8a      	ldr	r3, [pc, #552]	; (800f394 <tcp_output+0x238>)
 800f16c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f170:	4989      	ldr	r1, [pc, #548]	; (800f398 <tcp_output+0x23c>)
 800f172:	488a      	ldr	r0, [pc, #552]	; (800f39c <tcp_output+0x240>)
 800f174:	f004 f950 	bl	8013418 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	7d1b      	ldrb	r3, [r3, #20]
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d106      	bne.n	800f18e <tcp_output+0x32>
 800f180:	4b84      	ldr	r3, [pc, #528]	; (800f394 <tcp_output+0x238>)
 800f182:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f186:	4986      	ldr	r1, [pc, #536]	; (800f3a0 <tcp_output+0x244>)
 800f188:	4884      	ldr	r0, [pc, #528]	; (800f39c <tcp_output+0x240>)
 800f18a:	f004 f945 	bl	8013418 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f18e:	4b85      	ldr	r3, [pc, #532]	; (800f3a4 <tcp_output+0x248>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	687a      	ldr	r2, [r7, #4]
 800f194:	429a      	cmp	r2, r3
 800f196:	d101      	bne.n	800f19c <tcp_output+0x40>
    return ERR_OK;
 800f198:	2300      	movs	r3, #0
 800f19a:	e1ce      	b.n	800f53a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	bf28      	it	cs
 800f1ac:	4613      	movcs	r3, r2
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d10b      	bne.n	800f1d6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	8b5b      	ldrh	r3, [r3, #26]
 800f1c2:	f003 0302 	and.w	r3, r3, #2
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	f000 81aa 	beq.w	800f520 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f000 fdcb 	bl	800fd68 <tcp_send_empty_ack>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	e1b1      	b.n	800f53a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f1d6:	6879      	ldr	r1, [r7, #4]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	3304      	adds	r3, #4
 800f1dc:	461a      	mov	r2, r3
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f7ff fc7c 	bl	800eadc <tcp_route>
 800f1e4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d102      	bne.n	800f1f2 <tcp_output+0x96>
    return ERR_RTE;
 800f1ec:	f06f 0303 	mvn.w	r3, #3
 800f1f0:	e1a3      	b.n	800f53a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d003      	beq.n	800f200 <tcp_output+0xa4>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d111      	bne.n	800f224 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d002      	beq.n	800f20c <tcp_output+0xb0>
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	3304      	adds	r3, #4
 800f20a:	e000      	b.n	800f20e <tcp_output+0xb2>
 800f20c:	2300      	movs	r3, #0
 800f20e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d102      	bne.n	800f21c <tcp_output+0xc0>
      return ERR_RTE;
 800f216:	f06f 0303 	mvn.w	r3, #3
 800f21a:	e18e      	b.n	800f53a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7f9 ffe1 	bl	80091f2 <lwip_htonl>
 800f230:	4602      	mov	r2, r0
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f236:	1ad3      	subs	r3, r2, r3
 800f238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f23a:	8912      	ldrh	r2, [r2, #8]
 800f23c:	4413      	add	r3, r2
 800f23e:	69ba      	ldr	r2, [r7, #24]
 800f240:	429a      	cmp	r2, r3
 800f242:	d227      	bcs.n	800f294 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f24a:	461a      	mov	r2, r3
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	4293      	cmp	r3, r2
 800f250:	d114      	bne.n	800f27c <tcp_output+0x120>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f256:	2b00      	cmp	r3, #0
 800f258:	d110      	bne.n	800f27c <tcp_output+0x120>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f260:	2b00      	cmp	r3, #0
 800f262:	d10b      	bne.n	800f27c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2200      	movs	r2, #0
 800f268:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2201      	movs	r2, #1
 800f270:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2200      	movs	r2, #0
 800f278:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	8b5b      	ldrh	r3, [r3, #26]
 800f280:	f003 0302 	and.w	r3, r3, #2
 800f284:	2b00      	cmp	r3, #0
 800f286:	f000 814d 	beq.w	800f524 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 fd6c 	bl	800fd68 <tcp_send_empty_ack>
 800f290:	4603      	mov	r3, r0
 800f292:	e152      	b.n	800f53a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2200      	movs	r2, #0
 800f298:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2a0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f2a2:	6a3b      	ldr	r3, [r7, #32]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f000 811c 	beq.w	800f4e2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f2aa:	e002      	b.n	800f2b2 <tcp_output+0x156>
 800f2ac:	6a3b      	ldr	r3, [r7, #32]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	623b      	str	r3, [r7, #32]
 800f2b2:	6a3b      	ldr	r3, [r7, #32]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1f8      	bne.n	800f2ac <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f2ba:	e112      	b.n	800f4e2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	899b      	ldrh	r3, [r3, #12]
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7f9 ff7f 	bl	80091c8 <lwip_htons>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	f003 0304 	and.w	r3, r3, #4
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d006      	beq.n	800f2e4 <tcp_output+0x188>
 800f2d6:	4b2f      	ldr	r3, [pc, #188]	; (800f394 <tcp_output+0x238>)
 800f2d8:	f240 5236 	movw	r2, #1334	; 0x536
 800f2dc:	4932      	ldr	r1, [pc, #200]	; (800f3a8 <tcp_output+0x24c>)
 800f2de:	482f      	ldr	r0, [pc, #188]	; (800f39c <tcp_output+0x240>)
 800f2e0:	f004 f89a 	bl	8013418 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d01f      	beq.n	800f32c <tcp_output+0x1d0>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	8b5b      	ldrh	r3, [r3, #26]
 800f2f0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d119      	bne.n	800f32c <tcp_output+0x1d0>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d00b      	beq.n	800f318 <tcp_output+0x1bc>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d110      	bne.n	800f32c <tcp_output+0x1d0>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f30e:	891a      	ldrh	r2, [r3, #8]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f314:	429a      	cmp	r2, r3
 800f316:	d209      	bcs.n	800f32c <tcp_output+0x1d0>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d004      	beq.n	800f32c <tcp_output+0x1d0>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f328:	2b08      	cmp	r3, #8
 800f32a:	d901      	bls.n	800f330 <tcp_output+0x1d4>
 800f32c:	2301      	movs	r3, #1
 800f32e:	e000      	b.n	800f332 <tcp_output+0x1d6>
 800f330:	2300      	movs	r3, #0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d106      	bne.n	800f344 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	8b5b      	ldrh	r3, [r3, #26]
 800f33a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f33e:	2b00      	cmp	r3, #0
 800f340:	f000 80e4 	beq.w	800f50c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	7d1b      	ldrb	r3, [r3, #20]
 800f348:	2b02      	cmp	r3, #2
 800f34a:	d00d      	beq.n	800f368 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34e:	68db      	ldr	r3, [r3, #12]
 800f350:	899b      	ldrh	r3, [r3, #12]
 800f352:	b29c      	uxth	r4, r3
 800f354:	2010      	movs	r0, #16
 800f356:	f7f9 ff37 	bl	80091c8 <lwip_htons>
 800f35a:	4603      	mov	r3, r0
 800f35c:	461a      	mov	r2, r3
 800f35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	4322      	orrs	r2, r4
 800f364:	b292      	uxth	r2, r2
 800f366:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f368:	697a      	ldr	r2, [r7, #20]
 800f36a:	6879      	ldr	r1, [r7, #4]
 800f36c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f36e:	f000 f909 	bl	800f584 <tcp_output_segment>
 800f372:	4603      	mov	r3, r0
 800f374:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d016      	beq.n	800f3ac <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	8b5b      	ldrh	r3, [r3, #26]
 800f382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f386:	b29a      	uxth	r2, r3
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	835a      	strh	r2, [r3, #26]
      return err;
 800f38c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f390:	e0d3      	b.n	800f53a <tcp_output+0x3de>
 800f392:	bf00      	nop
 800f394:	08015f3c 	.word	0x08015f3c
 800f398:	08016480 	.word	0x08016480
 800f39c:	08015f90 	.word	0x08015f90
 800f3a0:	08016498 	.word	0x08016498
 800f3a4:	20008e9c 	.word	0x20008e9c
 800f3a8:	080164c0 	.word	0x080164c0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	7d1b      	ldrb	r3, [r3, #20]
 800f3b8:	2b02      	cmp	r3, #2
 800f3ba:	d006      	beq.n	800f3ca <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	8b5b      	ldrh	r3, [r3, #26]
 800f3c0:	f023 0303 	bic.w	r3, r3, #3
 800f3c4:	b29a      	uxth	r2, r3
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7f9 ff0e 	bl	80091f2 <lwip_htonl>
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3da:	891b      	ldrh	r3, [r3, #8]
 800f3dc:	461d      	mov	r5, r3
 800f3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	899b      	ldrh	r3, [r3, #12]
 800f3e4:	b29b      	uxth	r3, r3
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7f9 feee 	bl	80091c8 <lwip_htons>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	f003 0303 	and.w	r3, r3, #3
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d001      	beq.n	800f3fc <tcp_output+0x2a0>
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	e000      	b.n	800f3fe <tcp_output+0x2a2>
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	442b      	add	r3, r5
 800f400:	4423      	add	r3, r4
 800f402:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	1ad3      	subs	r3, r2, r3
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	da02      	bge.n	800f416 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	68ba      	ldr	r2, [r7, #8]
 800f414:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f418:	891b      	ldrh	r3, [r3, #8]
 800f41a:	461c      	mov	r4, r3
 800f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	899b      	ldrh	r3, [r3, #12]
 800f422:	b29b      	uxth	r3, r3
 800f424:	4618      	mov	r0, r3
 800f426:	f7f9 fecf 	bl	80091c8 <lwip_htons>
 800f42a:	4603      	mov	r3, r0
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	f003 0303 	and.w	r3, r3, #3
 800f432:	2b00      	cmp	r3, #0
 800f434:	d001      	beq.n	800f43a <tcp_output+0x2de>
 800f436:	2301      	movs	r3, #1
 800f438:	e000      	b.n	800f43c <tcp_output+0x2e0>
 800f43a:	2300      	movs	r3, #0
 800f43c:	4423      	add	r3, r4
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d049      	beq.n	800f4d6 <tcp_output+0x37a>
      seg->next = NULL;
 800f442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f444:	2200      	movs	r2, #0
 800f446:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d105      	bne.n	800f45c <tcp_output+0x300>
        pcb->unacked = seg;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f454:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f458:	623b      	str	r3, [r7, #32]
 800f45a:	e03f      	b.n	800f4dc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45e:	68db      	ldr	r3, [r3, #12]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	4618      	mov	r0, r3
 800f464:	f7f9 fec5 	bl	80091f2 <lwip_htonl>
 800f468:	4604      	mov	r4, r0
 800f46a:	6a3b      	ldr	r3, [r7, #32]
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	4618      	mov	r0, r3
 800f472:	f7f9 febe 	bl	80091f2 <lwip_htonl>
 800f476:	4603      	mov	r3, r0
 800f478:	1ae3      	subs	r3, r4, r3
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	da24      	bge.n	800f4c8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	3370      	adds	r3, #112	; 0x70
 800f482:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f484:	e002      	b.n	800f48c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f486:	69fb      	ldr	r3, [r7, #28]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d011      	beq.n	800f4b8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	68db      	ldr	r3, [r3, #12]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7f9 fea8 	bl	80091f2 <lwip_htonl>
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	68db      	ldr	r3, [r3, #12]
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7f9 fea1 	bl	80091f2 <lwip_htonl>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	dbe6      	blt.n	800f486 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4be:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f4c0:	69fb      	ldr	r3, [r7, #28]
 800f4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4c4:	601a      	str	r2, [r3, #0]
 800f4c6:	e009      	b.n	800f4dc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f4c8:	6a3b      	ldr	r3, [r7, #32]
 800f4ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4cc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f4ce:	6a3b      	ldr	r3, [r7, #32]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	623b      	str	r3, [r7, #32]
 800f4d4:	e002      	b.n	800f4dc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f4d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4d8:	f7fc fc3f 	bl	800bd5a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4e0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d012      	beq.n	800f50e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ea:	68db      	ldr	r3, [r3, #12]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7f9 fe7f 	bl	80091f2 <lwip_htonl>
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4fa:	1ad3      	subs	r3, r2, r3
 800f4fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4fe:	8912      	ldrh	r2, [r2, #8]
 800f500:	4413      	add	r3, r2
  while (seg != NULL &&
 800f502:	69ba      	ldr	r2, [r7, #24]
 800f504:	429a      	cmp	r2, r3
 800f506:	f4bf aed9 	bcs.w	800f2bc <tcp_output+0x160>
 800f50a:	e000      	b.n	800f50e <tcp_output+0x3b2>
      break;
 800f50c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f512:	2b00      	cmp	r3, #0
 800f514:	d108      	bne.n	800f528 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f51e:	e004      	b.n	800f52a <tcp_output+0x3ce>
    goto output_done;
 800f520:	bf00      	nop
 800f522:	e002      	b.n	800f52a <tcp_output+0x3ce>
    goto output_done;
 800f524:	bf00      	nop
 800f526:	e000      	b.n	800f52a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f528:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	8b5b      	ldrh	r3, [r3, #26]
 800f52e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f532:	b29a      	uxth	r2, r3
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3728      	adds	r7, #40	; 0x28
 800f53e:	46bd      	mov	sp, r7
 800f540:	bdb0      	pop	{r4, r5, r7, pc}
 800f542:	bf00      	nop

0800f544 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b082      	sub	sp, #8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d106      	bne.n	800f560 <tcp_output_segment_busy+0x1c>
 800f552:	4b09      	ldr	r3, [pc, #36]	; (800f578 <tcp_output_segment_busy+0x34>)
 800f554:	f240 529a 	movw	r2, #1434	; 0x59a
 800f558:	4908      	ldr	r1, [pc, #32]	; (800f57c <tcp_output_segment_busy+0x38>)
 800f55a:	4809      	ldr	r0, [pc, #36]	; (800f580 <tcp_output_segment_busy+0x3c>)
 800f55c:	f003 ff5c 	bl	8013418 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	7b9b      	ldrb	r3, [r3, #14]
 800f566:	2b01      	cmp	r3, #1
 800f568:	d001      	beq.n	800f56e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f56a:	2301      	movs	r3, #1
 800f56c:	e000      	b.n	800f570 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f56e:	2300      	movs	r3, #0
}
 800f570:	4618      	mov	r0, r3
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	08015f3c 	.word	0x08015f3c
 800f57c:	080164d8 	.word	0x080164d8
 800f580:	08015f90 	.word	0x08015f90

0800f584 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f584:	b5b0      	push	{r4, r5, r7, lr}
 800f586:	b08c      	sub	sp, #48	; 0x30
 800f588:	af04      	add	r7, sp, #16
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d106      	bne.n	800f5a4 <tcp_output_segment+0x20>
 800f596:	4b63      	ldr	r3, [pc, #396]	; (800f724 <tcp_output_segment+0x1a0>)
 800f598:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f59c:	4962      	ldr	r1, [pc, #392]	; (800f728 <tcp_output_segment+0x1a4>)
 800f59e:	4863      	ldr	r0, [pc, #396]	; (800f72c <tcp_output_segment+0x1a8>)
 800f5a0:	f003 ff3a 	bl	8013418 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d106      	bne.n	800f5b8 <tcp_output_segment+0x34>
 800f5aa:	4b5e      	ldr	r3, [pc, #376]	; (800f724 <tcp_output_segment+0x1a0>)
 800f5ac:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f5b0:	495f      	ldr	r1, [pc, #380]	; (800f730 <tcp_output_segment+0x1ac>)
 800f5b2:	485e      	ldr	r0, [pc, #376]	; (800f72c <tcp_output_segment+0x1a8>)
 800f5b4:	f003 ff30 	bl	8013418 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d106      	bne.n	800f5cc <tcp_output_segment+0x48>
 800f5be:	4b59      	ldr	r3, [pc, #356]	; (800f724 <tcp_output_segment+0x1a0>)
 800f5c0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f5c4:	495b      	ldr	r1, [pc, #364]	; (800f734 <tcp_output_segment+0x1b0>)
 800f5c6:	4859      	ldr	r0, [pc, #356]	; (800f72c <tcp_output_segment+0x1a8>)
 800f5c8:	f003 ff26 	bl	8013418 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f7ff ffb9 	bl	800f544 <tcp_output_segment_busy>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d001      	beq.n	800f5dc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	e09f      	b.n	800f71c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	68dc      	ldr	r4, [r3, #12]
 800f5e4:	4610      	mov	r0, r2
 800f5e6:	f7f9 fe04 	bl	80091f2 <lwip_htonl>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	68dc      	ldr	r4, [r3, #12]
 800f5f6:	4610      	mov	r0, r2
 800f5f8:	f7f9 fde6 	bl	80091c8 <lwip_htons>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f604:	68ba      	ldr	r2, [r7, #8]
 800f606:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f608:	441a      	add	r2, r3
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	3314      	adds	r3, #20
 800f614:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	7a9b      	ldrb	r3, [r3, #10]
 800f61a:	f003 0301 	and.w	r3, r3, #1
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d015      	beq.n	800f64e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	3304      	adds	r3, #4
 800f626:	461a      	mov	r2, r3
 800f628:	6879      	ldr	r1, [r7, #4]
 800f62a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f62e:	f7fc fe8b 	bl	800c348 <tcp_eff_send_mss_netif>
 800f632:	4603      	mov	r3, r0
 800f634:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f636:	8b7b      	ldrh	r3, [r7, #26]
 800f638:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7f9 fdd8 	bl	80091f2 <lwip_htonl>
 800f642:	4602      	mov	r2, r0
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	3304      	adds	r3, #4
 800f64c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f654:	2b00      	cmp	r3, #0
 800f656:	da02      	bge.n	800f65e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	2200      	movs	r2, #0
 800f65c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f662:	2b00      	cmp	r3, #0
 800f664:	d10c      	bne.n	800f680 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f666:	4b34      	ldr	r3, [pc, #208]	; (800f738 <tcp_output_segment+0x1b4>)
 800f668:	681a      	ldr	r2, [r3, #0]
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	4618      	mov	r0, r3
 800f676:	f7f9 fdbc 	bl	80091f2 <lwip_htonl>
 800f67a:	4602      	mov	r2, r0
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	68da      	ldr	r2, [r3, #12]
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	685b      	ldr	r3, [r3, #4]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	1ad3      	subs	r3, r2, r3
 800f68c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	8959      	ldrh	r1, [r3, #10]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	8b3a      	ldrh	r2, [r7, #24]
 800f69a:	1a8a      	subs	r2, r1, r2
 800f69c:	b292      	uxth	r2, r2
 800f69e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	8919      	ldrh	r1, [r3, #8]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	8b3a      	ldrh	r2, [r7, #24]
 800f6ac:	1a8a      	subs	r2, r1, r2
 800f6ae:	b292      	uxth	r2, r2
 800f6b0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	68d2      	ldr	r2, [r2, #12]
 800f6ba:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	741a      	strb	r2, [r3, #16]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	68db      	ldr	r3, [r3, #12]
 800f6cc:	f103 0214 	add.w	r2, r3, #20
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	7a9b      	ldrb	r3, [r3, #10]
 800f6d4:	009b      	lsls	r3, r3, #2
 800f6d6:	f003 0304 	and.w	r3, r3, #4
 800f6da:	4413      	add	r3, r2
 800f6dc:	69fa      	ldr	r2, [r7, #28]
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d006      	beq.n	800f6f0 <tcp_output_segment+0x16c>
 800f6e2:	4b10      	ldr	r3, [pc, #64]	; (800f724 <tcp_output_segment+0x1a0>)
 800f6e4:	f240 621c 	movw	r2, #1564	; 0x61c
 800f6e8:	4914      	ldr	r1, [pc, #80]	; (800f73c <tcp_output_segment+0x1b8>)
 800f6ea:	4810      	ldr	r0, [pc, #64]	; (800f72c <tcp_output_segment+0x1a8>)
 800f6ec:	f003 fe94 	bl	8013418 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	6858      	ldr	r0, [r3, #4]
 800f6f4:	68b9      	ldr	r1, [r7, #8]
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	1d1c      	adds	r4, r3, #4
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	7add      	ldrb	r5, [r3, #11]
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	7a9b      	ldrb	r3, [r3, #10]
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	9202      	str	r2, [sp, #8]
 800f706:	2206      	movs	r2, #6
 800f708:	9201      	str	r2, [sp, #4]
 800f70a:	9300      	str	r3, [sp, #0]
 800f70c:	462b      	mov	r3, r5
 800f70e:	4622      	mov	r2, r4
 800f710:	f002 fdf0 	bl	80122f4 <ip4_output_if>
 800f714:	4603      	mov	r3, r0
 800f716:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f718:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3720      	adds	r7, #32
 800f720:	46bd      	mov	sp, r7
 800f722:	bdb0      	pop	{r4, r5, r7, pc}
 800f724:	08015f3c 	.word	0x08015f3c
 800f728:	08016500 	.word	0x08016500
 800f72c:	08015f90 	.word	0x08015f90
 800f730:	08016520 	.word	0x08016520
 800f734:	08016540 	.word	0x08016540
 800f738:	20008e50 	.word	0x20008e50
 800f73c:	08016564 	.word	0x08016564

0800f740 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f740:	b5b0      	push	{r4, r5, r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d106      	bne.n	800f75c <tcp_rexmit_rto_prepare+0x1c>
 800f74e:	4b31      	ldr	r3, [pc, #196]	; (800f814 <tcp_rexmit_rto_prepare+0xd4>)
 800f750:	f240 6263 	movw	r2, #1635	; 0x663
 800f754:	4930      	ldr	r1, [pc, #192]	; (800f818 <tcp_rexmit_rto_prepare+0xd8>)
 800f756:	4831      	ldr	r0, [pc, #196]	; (800f81c <tcp_rexmit_rto_prepare+0xdc>)
 800f758:	f003 fe5e 	bl	8013418 <iprintf>

  if (pcb->unacked == NULL) {
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f760:	2b00      	cmp	r3, #0
 800f762:	d102      	bne.n	800f76a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f764:	f06f 0305 	mvn.w	r3, #5
 800f768:	e050      	b.n	800f80c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f76e:	60fb      	str	r3, [r7, #12]
 800f770:	e00b      	b.n	800f78a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f772:	68f8      	ldr	r0, [r7, #12]
 800f774:	f7ff fee6 	bl	800f544 <tcp_output_segment_busy>
 800f778:	4603      	mov	r3, r0
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d002      	beq.n	800f784 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f77e:	f06f 0305 	mvn.w	r3, #5
 800f782:	e043      	b.n	800f80c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	60fb      	str	r3, [r7, #12]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d1ef      	bne.n	800f772 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f7ff fed6 	bl	800f544 <tcp_output_segment_busy>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d002      	beq.n	800f7a4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f79e:	f06f 0305 	mvn.w	r3, #5
 800f7a2:	e033      	b.n	800f80c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	8b5b      	ldrh	r3, [r3, #26]
 800f7be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f7c2:	b29a      	uxth	r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7f9 fd0f 	bl	80091f2 <lwip_htonl>
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	891b      	ldrh	r3, [r3, #8]
 800f7da:	461d      	mov	r5, r3
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	68db      	ldr	r3, [r3, #12]
 800f7e0:	899b      	ldrh	r3, [r3, #12]
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7f9 fcef 	bl	80091c8 <lwip_htons>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	f003 0303 	and.w	r3, r3, #3
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d001      	beq.n	800f7fa <tcp_rexmit_rto_prepare+0xba>
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	e000      	b.n	800f7fc <tcp_rexmit_rto_prepare+0xbc>
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	442b      	add	r3, r5
 800f7fe:	18e2      	adds	r2, r4, r3
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2200      	movs	r2, #0
 800f808:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f80a:	2300      	movs	r3, #0
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3710      	adds	r7, #16
 800f810:	46bd      	mov	sp, r7
 800f812:	bdb0      	pop	{r4, r5, r7, pc}
 800f814:	08015f3c 	.word	0x08015f3c
 800f818:	08016578 	.word	0x08016578
 800f81c:	08015f90 	.word	0x08015f90

0800f820 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d106      	bne.n	800f83c <tcp_rexmit_rto_commit+0x1c>
 800f82e:	4b0d      	ldr	r3, [pc, #52]	; (800f864 <tcp_rexmit_rto_commit+0x44>)
 800f830:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f834:	490c      	ldr	r1, [pc, #48]	; (800f868 <tcp_rexmit_rto_commit+0x48>)
 800f836:	480d      	ldr	r0, [pc, #52]	; (800f86c <tcp_rexmit_rto_commit+0x4c>)
 800f838:	f003 fdee 	bl	8013418 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f842:	2bff      	cmp	r3, #255	; 0xff
 800f844:	d007      	beq.n	800f856 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f84c:	3301      	adds	r3, #1
 800f84e:	b2da      	uxtb	r2, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7ff fc80 	bl	800f15c <tcp_output>
}
 800f85c:	bf00      	nop
 800f85e:	3708      	adds	r7, #8
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	08015f3c 	.word	0x08015f3c
 800f868:	0801659c 	.word	0x0801659c
 800f86c:	08015f90 	.word	0x08015f90

0800f870 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d106      	bne.n	800f88c <tcp_rexmit_rto+0x1c>
 800f87e:	4b0a      	ldr	r3, [pc, #40]	; (800f8a8 <tcp_rexmit_rto+0x38>)
 800f880:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f884:	4909      	ldr	r1, [pc, #36]	; (800f8ac <tcp_rexmit_rto+0x3c>)
 800f886:	480a      	ldr	r0, [pc, #40]	; (800f8b0 <tcp_rexmit_rto+0x40>)
 800f888:	f003 fdc6 	bl	8013418 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f7ff ff57 	bl	800f740 <tcp_rexmit_rto_prepare>
 800f892:	4603      	mov	r3, r0
 800f894:	2b00      	cmp	r3, #0
 800f896:	d102      	bne.n	800f89e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f7ff ffc1 	bl	800f820 <tcp_rexmit_rto_commit>
  }
}
 800f89e:	bf00      	nop
 800f8a0:	3708      	adds	r7, #8
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
 800f8a6:	bf00      	nop
 800f8a8:	08015f3c 	.word	0x08015f3c
 800f8ac:	080165c0 	.word	0x080165c0
 800f8b0:	08015f90 	.word	0x08015f90

0800f8b4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f8b4:	b590      	push	{r4, r7, lr}
 800f8b6:	b085      	sub	sp, #20
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d106      	bne.n	800f8d0 <tcp_rexmit+0x1c>
 800f8c2:	4b2f      	ldr	r3, [pc, #188]	; (800f980 <tcp_rexmit+0xcc>)
 800f8c4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f8c8:	492e      	ldr	r1, [pc, #184]	; (800f984 <tcp_rexmit+0xd0>)
 800f8ca:	482f      	ldr	r0, [pc, #188]	; (800f988 <tcp_rexmit+0xd4>)
 800f8cc:	f003 fda4 	bl	8013418 <iprintf>

  if (pcb->unacked == NULL) {
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d102      	bne.n	800f8de <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f8d8:	f06f 0305 	mvn.w	r3, #5
 800f8dc:	e04c      	b.n	800f978 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8e2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f8e4:	68b8      	ldr	r0, [r7, #8]
 800f8e6:	f7ff fe2d 	bl	800f544 <tcp_output_segment_busy>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d002      	beq.n	800f8f6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f8f0:	f06f 0305 	mvn.w	r3, #5
 800f8f4:	e040      	b.n	800f978 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	336c      	adds	r3, #108	; 0x6c
 800f902:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f904:	e002      	b.n	800f90c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d011      	beq.n	800f938 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	685b      	ldr	r3, [r3, #4]
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7f9 fc68 	bl	80091f2 <lwip_htonl>
 800f922:	4604      	mov	r4, r0
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	68db      	ldr	r3, [r3, #12]
 800f928:	685b      	ldr	r3, [r3, #4]
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7f9 fc61 	bl	80091f2 <lwip_htonl>
 800f930:	4603      	mov	r3, r0
 800f932:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f934:	2b00      	cmp	r3, #0
 800f936:	dbe6      	blt.n	800f906 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	68ba      	ldr	r2, [r7, #8]
 800f944:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d103      	bne.n	800f956 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2200      	movs	r2, #0
 800f952:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f95c:	2bff      	cmp	r3, #255	; 0xff
 800f95e:	d007      	beq.n	800f970 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f966:	3301      	adds	r3, #1
 800f968:	b2da      	uxtb	r2, r3
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2200      	movs	r2, #0
 800f974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f976:	2300      	movs	r3, #0
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3714      	adds	r7, #20
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd90      	pop	{r4, r7, pc}
 800f980:	08015f3c 	.word	0x08015f3c
 800f984:	080165dc 	.word	0x080165dc
 800f988:	08015f90 	.word	0x08015f90

0800f98c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d106      	bne.n	800f9a8 <tcp_rexmit_fast+0x1c>
 800f99a:	4b2a      	ldr	r3, [pc, #168]	; (800fa44 <tcp_rexmit_fast+0xb8>)
 800f99c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f9a0:	4929      	ldr	r1, [pc, #164]	; (800fa48 <tcp_rexmit_fast+0xbc>)
 800f9a2:	482a      	ldr	r0, [pc, #168]	; (800fa4c <tcp_rexmit_fast+0xc0>)
 800f9a4:	f003 fd38 	bl	8013418 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d044      	beq.n	800fa3a <tcp_rexmit_fast+0xae>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	8b5b      	ldrh	r3, [r3, #26]
 800f9b4:	f003 0304 	and.w	r3, r3, #4
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d13e      	bne.n	800fa3a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f7ff ff79 	bl	800f8b4 <tcp_rexmit>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d138      	bne.n	800fa3a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	bf28      	it	cs
 800f9d8:	4613      	movcs	r3, r2
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	0fda      	lsrs	r2, r3, #31
 800f9de:	4413      	add	r3, r2
 800f9e0:	105b      	asrs	r3, r3, #1
 800f9e2:	b29a      	uxth	r2, r3
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9f6:	005b      	lsls	r3, r3, #1
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d206      	bcs.n	800fa0a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa00:	005b      	lsls	r3, r3, #1
 800fa02:	b29a      	uxth	r2, r3
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa14:	4619      	mov	r1, r3
 800fa16:	0049      	lsls	r1, r1, #1
 800fa18:	440b      	add	r3, r1
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	4413      	add	r3, r2
 800fa1e:	b29a      	uxth	r2, r3
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	8b5b      	ldrh	r3, [r3, #26]
 800fa2a:	f043 0304 	orr.w	r3, r3, #4
 800fa2e:	b29a      	uxth	r2, r3
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2200      	movs	r2, #0
 800fa38:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800fa3a:	bf00      	nop
 800fa3c:	3708      	adds	r7, #8
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	08015f3c 	.word	0x08015f3c
 800fa48:	080165f4 	.word	0x080165f4
 800fa4c:	08015f90 	.word	0x08015f90

0800fa50 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b086      	sub	sp, #24
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	607b      	str	r3, [r7, #4]
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	817b      	strh	r3, [r7, #10]
 800fa5e:	4613      	mov	r3, r2
 800fa60:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fa62:	897a      	ldrh	r2, [r7, #10]
 800fa64:	893b      	ldrh	r3, [r7, #8]
 800fa66:	4413      	add	r3, r2
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	3314      	adds	r3, #20
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa72:	4619      	mov	r1, r3
 800fa74:	2022      	movs	r0, #34	; 0x22
 800fa76:	f7fa fb77 	bl	800a168 <pbuf_alloc>
 800fa7a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d04d      	beq.n	800fb1e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fa82:	897b      	ldrh	r3, [r7, #10]
 800fa84:	3313      	adds	r3, #19
 800fa86:	697a      	ldr	r2, [r7, #20]
 800fa88:	8952      	ldrh	r2, [r2, #10]
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	db06      	blt.n	800fa9c <tcp_output_alloc_header_common+0x4c>
 800fa8e:	4b26      	ldr	r3, [pc, #152]	; (800fb28 <tcp_output_alloc_header_common+0xd8>)
 800fa90:	f240 7223 	movw	r2, #1827	; 0x723
 800fa94:	4925      	ldr	r1, [pc, #148]	; (800fb2c <tcp_output_alloc_header_common+0xdc>)
 800fa96:	4826      	ldr	r0, [pc, #152]	; (800fb30 <tcp_output_alloc_header_common+0xe0>)
 800fa98:	f003 fcbe 	bl	8013418 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800faa2:	8c3b      	ldrh	r3, [r7, #32]
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7f9 fb8f 	bl	80091c8 <lwip_htons>
 800faaa:	4603      	mov	r3, r0
 800faac:	461a      	mov	r2, r3
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800fab2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7f9 fb87 	bl	80091c8 <lwip_htons>
 800faba:	4603      	mov	r3, r0
 800fabc:	461a      	mov	r2, r3
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fac8:	68f8      	ldr	r0, [r7, #12]
 800faca:	f7f9 fb92 	bl	80091f2 <lwip_htonl>
 800face:	4602      	mov	r2, r0
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fad4:	897b      	ldrh	r3, [r7, #10]
 800fad6:	089b      	lsrs	r3, r3, #2
 800fad8:	b29b      	uxth	r3, r3
 800fada:	3305      	adds	r3, #5
 800fadc:	b29b      	uxth	r3, r3
 800fade:	031b      	lsls	r3, r3, #12
 800fae0:	b29a      	uxth	r2, r3
 800fae2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	4313      	orrs	r3, r2
 800faea:	b29b      	uxth	r3, r3
 800faec:	4618      	mov	r0, r3
 800faee:	f7f9 fb6b 	bl	80091c8 <lwip_htons>
 800faf2:	4603      	mov	r3, r0
 800faf4:	461a      	mov	r2, r3
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fafa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7f9 fb63 	bl	80091c8 <lwip_htons>
 800fb02:	4603      	mov	r3, r0
 800fb04:	461a      	mov	r2, r3
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	741a      	strb	r2, [r3, #16]
 800fb10:	2200      	movs	r2, #0
 800fb12:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	2200      	movs	r2, #0
 800fb18:	749a      	strb	r2, [r3, #18]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800fb1e:	697b      	ldr	r3, [r7, #20]
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3718      	adds	r7, #24
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	08015f3c 	.word	0x08015f3c
 800fb2c:	08016614 	.word	0x08016614
 800fb30:	08015f90 	.word	0x08015f90

0800fb34 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800fb34:	b5b0      	push	{r4, r5, r7, lr}
 800fb36:	b08a      	sub	sp, #40	; 0x28
 800fb38:	af04      	add	r7, sp, #16
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	607b      	str	r3, [r7, #4]
 800fb3e:	460b      	mov	r3, r1
 800fb40:	817b      	strh	r3, [r7, #10]
 800fb42:	4613      	mov	r3, r2
 800fb44:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d106      	bne.n	800fb5a <tcp_output_alloc_header+0x26>
 800fb4c:	4b15      	ldr	r3, [pc, #84]	; (800fba4 <tcp_output_alloc_header+0x70>)
 800fb4e:	f240 7242 	movw	r2, #1858	; 0x742
 800fb52:	4915      	ldr	r1, [pc, #84]	; (800fba8 <tcp_output_alloc_header+0x74>)
 800fb54:	4815      	ldr	r0, [pc, #84]	; (800fbac <tcp_output_alloc_header+0x78>)
 800fb56:	f003 fc5f 	bl	8013418 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	8adb      	ldrh	r3, [r3, #22]
 800fb62:	68fa      	ldr	r2, [r7, #12]
 800fb64:	8b12      	ldrh	r2, [r2, #24]
 800fb66:	68f9      	ldr	r1, [r7, #12]
 800fb68:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800fb6a:	893d      	ldrh	r5, [r7, #8]
 800fb6c:	897c      	ldrh	r4, [r7, #10]
 800fb6e:	9103      	str	r1, [sp, #12]
 800fb70:	2110      	movs	r1, #16
 800fb72:	9102      	str	r1, [sp, #8]
 800fb74:	9201      	str	r2, [sp, #4]
 800fb76:	9300      	str	r3, [sp, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	462a      	mov	r2, r5
 800fb7c:	4621      	mov	r1, r4
 800fb7e:	f7ff ff67 	bl	800fa50 <tcp_output_alloc_header_common>
 800fb82:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d006      	beq.n	800fb98 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb8e:	68fa      	ldr	r2, [r7, #12]
 800fb90:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fb92:	441a      	add	r2, r3
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fb98:	697b      	ldr	r3, [r7, #20]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3718      	adds	r7, #24
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bdb0      	pop	{r4, r5, r7, pc}
 800fba2:	bf00      	nop
 800fba4:	08015f3c 	.word	0x08015f3c
 800fba8:	08016644 	.word	0x08016644
 800fbac:	08015f90 	.word	0x08015f90

0800fbb0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b088      	sub	sp, #32
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	4611      	mov	r1, r2
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	460b      	mov	r3, r1
 800fbc0:	71fb      	strb	r3, [r7, #7]
 800fbc2:	4613      	mov	r3, r2
 800fbc4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d106      	bne.n	800fbde <tcp_output_fill_options+0x2e>
 800fbd0:	4b13      	ldr	r3, [pc, #76]	; (800fc20 <tcp_output_fill_options+0x70>)
 800fbd2:	f240 7256 	movw	r2, #1878	; 0x756
 800fbd6:	4913      	ldr	r1, [pc, #76]	; (800fc24 <tcp_output_fill_options+0x74>)
 800fbd8:	4813      	ldr	r0, [pc, #76]	; (800fc28 <tcp_output_fill_options+0x78>)
 800fbda:	f003 fc1d 	bl	8013418 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fbe4:	69bb      	ldr	r3, [r7, #24]
 800fbe6:	3314      	adds	r3, #20
 800fbe8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fbea:	69bb      	ldr	r3, [r7, #24]
 800fbec:	f103 0214 	add.w	r2, r3, #20
 800fbf0:	8bfb      	ldrh	r3, [r7, #30]
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	79fb      	ldrb	r3, [r7, #7]
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	f003 0304 	and.w	r3, r3, #4
 800fbfe:	440b      	add	r3, r1
 800fc00:	4413      	add	r3, r2
 800fc02:	697a      	ldr	r2, [r7, #20]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d006      	beq.n	800fc16 <tcp_output_fill_options+0x66>
 800fc08:	4b05      	ldr	r3, [pc, #20]	; (800fc20 <tcp_output_fill_options+0x70>)
 800fc0a:	f240 7275 	movw	r2, #1909	; 0x775
 800fc0e:	4907      	ldr	r1, [pc, #28]	; (800fc2c <tcp_output_fill_options+0x7c>)
 800fc10:	4805      	ldr	r0, [pc, #20]	; (800fc28 <tcp_output_fill_options+0x78>)
 800fc12:	f003 fc01 	bl	8013418 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800fc16:	bf00      	nop
 800fc18:	3720      	adds	r7, #32
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	08015f3c 	.word	0x08015f3c
 800fc24:	0801666c 	.word	0x0801666c
 800fc28:	08015f90 	.word	0x08015f90
 800fc2c:	08016564 	.word	0x08016564

0800fc30 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b08a      	sub	sp, #40	; 0x28
 800fc34:	af04      	add	r7, sp, #16
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	60b9      	str	r1, [r7, #8]
 800fc3a:	607a      	str	r2, [r7, #4]
 800fc3c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d106      	bne.n	800fc52 <tcp_output_control_segment+0x22>
 800fc44:	4b1c      	ldr	r3, [pc, #112]	; (800fcb8 <tcp_output_control_segment+0x88>)
 800fc46:	f240 7287 	movw	r2, #1927	; 0x787
 800fc4a:	491c      	ldr	r1, [pc, #112]	; (800fcbc <tcp_output_control_segment+0x8c>)
 800fc4c:	481c      	ldr	r0, [pc, #112]	; (800fcc0 <tcp_output_control_segment+0x90>)
 800fc4e:	f003 fbe3 	bl	8013418 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800fc52:	683a      	ldr	r2, [r7, #0]
 800fc54:	6879      	ldr	r1, [r7, #4]
 800fc56:	68f8      	ldr	r0, [r7, #12]
 800fc58:	f7fe ff40 	bl	800eadc <tcp_route>
 800fc5c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d102      	bne.n	800fc6a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800fc64:	23fc      	movs	r3, #252	; 0xfc
 800fc66:	75fb      	strb	r3, [r7, #23]
 800fc68:	e01c      	b.n	800fca4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d006      	beq.n	800fc7e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	7adb      	ldrb	r3, [r3, #11]
 800fc74:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	7a9b      	ldrb	r3, [r3, #10]
 800fc7a:	757b      	strb	r3, [r7, #21]
 800fc7c:	e003      	b.n	800fc86 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800fc7e:	23ff      	movs	r3, #255	; 0xff
 800fc80:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800fc82:	2300      	movs	r3, #0
 800fc84:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800fc86:	7dba      	ldrb	r2, [r7, #22]
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	9302      	str	r3, [sp, #8]
 800fc8c:	2306      	movs	r3, #6
 800fc8e:	9301      	str	r3, [sp, #4]
 800fc90:	7d7b      	ldrb	r3, [r7, #21]
 800fc92:	9300      	str	r3, [sp, #0]
 800fc94:	4613      	mov	r3, r2
 800fc96:	683a      	ldr	r2, [r7, #0]
 800fc98:	6879      	ldr	r1, [r7, #4]
 800fc9a:	68b8      	ldr	r0, [r7, #8]
 800fc9c:	f002 fb2a 	bl	80122f4 <ip4_output_if>
 800fca0:	4603      	mov	r3, r0
 800fca2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fca4:	68b8      	ldr	r0, [r7, #8]
 800fca6:	f7fa fd43 	bl	800a730 <pbuf_free>
  return err;
 800fcaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3718      	adds	r7, #24
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	08015f3c 	.word	0x08015f3c
 800fcbc:	08016694 	.word	0x08016694
 800fcc0:	08015f90 	.word	0x08015f90

0800fcc4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fcc4:	b590      	push	{r4, r7, lr}
 800fcc6:	b08b      	sub	sp, #44	; 0x2c
 800fcc8:	af04      	add	r7, sp, #16
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	607a      	str	r2, [r7, #4]
 800fcd0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d106      	bne.n	800fce6 <tcp_rst+0x22>
 800fcd8:	4b1f      	ldr	r3, [pc, #124]	; (800fd58 <tcp_rst+0x94>)
 800fcda:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fcde:	491f      	ldr	r1, [pc, #124]	; (800fd5c <tcp_rst+0x98>)
 800fce0:	481f      	ldr	r0, [pc, #124]	; (800fd60 <tcp_rst+0x9c>)
 800fce2:	f003 fb99 	bl	8013418 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d106      	bne.n	800fcfa <tcp_rst+0x36>
 800fcec:	4b1a      	ldr	r3, [pc, #104]	; (800fd58 <tcp_rst+0x94>)
 800fcee:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fcf2:	491c      	ldr	r1, [pc, #112]	; (800fd64 <tcp_rst+0xa0>)
 800fcf4:	481a      	ldr	r0, [pc, #104]	; (800fd60 <tcp_rst+0x9c>)
 800fcf6:	f003 fb8f 	bl	8013418 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fcfe:	f246 0308 	movw	r3, #24584	; 0x6008
 800fd02:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fd04:	7dfb      	ldrb	r3, [r7, #23]
 800fd06:	b29c      	uxth	r4, r3
 800fd08:	68b8      	ldr	r0, [r7, #8]
 800fd0a:	f7f9 fa72 	bl	80091f2 <lwip_htonl>
 800fd0e:	4602      	mov	r2, r0
 800fd10:	8abb      	ldrh	r3, [r7, #20]
 800fd12:	9303      	str	r3, [sp, #12]
 800fd14:	2314      	movs	r3, #20
 800fd16:	9302      	str	r3, [sp, #8]
 800fd18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fd1a:	9301      	str	r3, [sp, #4]
 800fd1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fd1e:	9300      	str	r3, [sp, #0]
 800fd20:	4613      	mov	r3, r2
 800fd22:	2200      	movs	r2, #0
 800fd24:	4621      	mov	r1, r4
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f7ff fe92 	bl	800fa50 <tcp_output_alloc_header_common>
 800fd2c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d00c      	beq.n	800fd4e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fd34:	7dfb      	ldrb	r3, [r7, #23]
 800fd36:	2200      	movs	r2, #0
 800fd38:	6939      	ldr	r1, [r7, #16]
 800fd3a:	68f8      	ldr	r0, [r7, #12]
 800fd3c:	f7ff ff38 	bl	800fbb0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd42:	683a      	ldr	r2, [r7, #0]
 800fd44:	6939      	ldr	r1, [r7, #16]
 800fd46:	68f8      	ldr	r0, [r7, #12]
 800fd48:	f7ff ff72 	bl	800fc30 <tcp_output_control_segment>
 800fd4c:	e000      	b.n	800fd50 <tcp_rst+0x8c>
    return;
 800fd4e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fd50:	371c      	adds	r7, #28
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd90      	pop	{r4, r7, pc}
 800fd56:	bf00      	nop
 800fd58:	08015f3c 	.word	0x08015f3c
 800fd5c:	080166c0 	.word	0x080166c0
 800fd60:	08015f90 	.word	0x08015f90
 800fd64:	080166dc 	.word	0x080166dc

0800fd68 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fd68:	b590      	push	{r4, r7, lr}
 800fd6a:	b087      	sub	sp, #28
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fd70:	2300      	movs	r3, #0
 800fd72:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fd74:	2300      	movs	r3, #0
 800fd76:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d106      	bne.n	800fd8c <tcp_send_empty_ack+0x24>
 800fd7e:	4b28      	ldr	r3, [pc, #160]	; (800fe20 <tcp_send_empty_ack+0xb8>)
 800fd80:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800fd84:	4927      	ldr	r1, [pc, #156]	; (800fe24 <tcp_send_empty_ack+0xbc>)
 800fd86:	4828      	ldr	r0, [pc, #160]	; (800fe28 <tcp_send_empty_ack+0xc0>)
 800fd88:	f003 fb46 	bl	8013418 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd8c:	7dfb      	ldrb	r3, [r7, #23]
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	b2db      	uxtb	r3, r3
 800fd92:	f003 0304 	and.w	r3, r3, #4
 800fd96:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fd98:	7d7b      	ldrb	r3, [r7, #21]
 800fd9a:	b29c      	uxth	r4, r3
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fda0:	4618      	mov	r0, r3
 800fda2:	f7f9 fa26 	bl	80091f2 <lwip_htonl>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2200      	movs	r2, #0
 800fdaa:	4621      	mov	r1, r4
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f7ff fec1 	bl	800fb34 <tcp_output_alloc_header>
 800fdb2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d109      	bne.n	800fdce <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	8b5b      	ldrh	r3, [r3, #26]
 800fdbe:	f043 0303 	orr.w	r3, r3, #3
 800fdc2:	b29a      	uxth	r2, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fdc8:	f06f 0301 	mvn.w	r3, #1
 800fdcc:	e023      	b.n	800fe16 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fdce:	7dbb      	ldrb	r3, [r7, #22]
 800fdd0:	7dfa      	ldrb	r2, [r7, #23]
 800fdd2:	6939      	ldr	r1, [r7, #16]
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7ff feeb 	bl	800fbb0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	3304      	adds	r3, #4
 800fde0:	6939      	ldr	r1, [r7, #16]
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f7ff ff24 	bl	800fc30 <tcp_output_control_segment>
 800fde8:	4603      	mov	r3, r0
 800fdea:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fdec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d007      	beq.n	800fe04 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	8b5b      	ldrh	r3, [r3, #26]
 800fdf8:	f043 0303 	orr.w	r3, r3, #3
 800fdfc:	b29a      	uxth	r2, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	835a      	strh	r2, [r3, #26]
 800fe02:	e006      	b.n	800fe12 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	8b5b      	ldrh	r3, [r3, #26]
 800fe08:	f023 0303 	bic.w	r3, r3, #3
 800fe0c:	b29a      	uxth	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fe12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	371c      	adds	r7, #28
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd90      	pop	{r4, r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	08015f3c 	.word	0x08015f3c
 800fe24:	080166f8 	.word	0x080166f8
 800fe28:	08015f90 	.word	0x08015f90

0800fe2c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fe2c:	b590      	push	{r4, r7, lr}
 800fe2e:	b087      	sub	sp, #28
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fe34:	2300      	movs	r3, #0
 800fe36:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d106      	bne.n	800fe4c <tcp_keepalive+0x20>
 800fe3e:	4b18      	ldr	r3, [pc, #96]	; (800fea0 <tcp_keepalive+0x74>)
 800fe40:	f640 0224 	movw	r2, #2084	; 0x824
 800fe44:	4917      	ldr	r1, [pc, #92]	; (800fea4 <tcp_keepalive+0x78>)
 800fe46:	4818      	ldr	r0, [pc, #96]	; (800fea8 <tcp_keepalive+0x7c>)
 800fe48:	f003 fae6 	bl	8013418 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fe4c:	7dfb      	ldrb	r3, [r7, #23]
 800fe4e:	b29c      	uxth	r4, r3
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe54:	3b01      	subs	r3, #1
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7f9 f9cb 	bl	80091f2 <lwip_htonl>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2200      	movs	r2, #0
 800fe60:	4621      	mov	r1, r4
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f7ff fe66 	bl	800fb34 <tcp_output_alloc_header>
 800fe68:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d102      	bne.n	800fe76 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fe70:	f04f 33ff 	mov.w	r3, #4294967295
 800fe74:	e010      	b.n	800fe98 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fe76:	7dfb      	ldrb	r3, [r7, #23]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	6939      	ldr	r1, [r7, #16]
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f7ff fe97 	bl	800fbb0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	3304      	adds	r3, #4
 800fe88:	6939      	ldr	r1, [r7, #16]
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f7ff fed0 	bl	800fc30 <tcp_output_control_segment>
 800fe90:	4603      	mov	r3, r0
 800fe92:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fe94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	371c      	adds	r7, #28
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd90      	pop	{r4, r7, pc}
 800fea0:	08015f3c 	.word	0x08015f3c
 800fea4:	08016718 	.word	0x08016718
 800fea8:	08015f90 	.word	0x08015f90

0800feac <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800feac:	b590      	push	{r4, r7, lr}
 800feae:	b08b      	sub	sp, #44	; 0x2c
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800feb4:	2300      	movs	r3, #0
 800feb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d106      	bne.n	800fece <tcp_zero_window_probe+0x22>
 800fec0:	4b4c      	ldr	r3, [pc, #304]	; (800fff4 <tcp_zero_window_probe+0x148>)
 800fec2:	f640 024f 	movw	r2, #2127	; 0x84f
 800fec6:	494c      	ldr	r1, [pc, #304]	; (800fff8 <tcp_zero_window_probe+0x14c>)
 800fec8:	484c      	ldr	r0, [pc, #304]	; (800fffc <tcp_zero_window_probe+0x150>)
 800feca:	f003 faa5 	bl	8013418 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fed2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fed4:	6a3b      	ldr	r3, [r7, #32]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d101      	bne.n	800fede <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800feda:	2300      	movs	r3, #0
 800fedc:	e086      	b.n	800ffec <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fee4:	2bff      	cmp	r3, #255	; 0xff
 800fee6:	d007      	beq.n	800fef8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800feee:	3301      	adds	r3, #1
 800fef0:	b2da      	uxtb	r2, r3
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fef8:	6a3b      	ldr	r3, [r7, #32]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	899b      	ldrh	r3, [r3, #12]
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7f9 f961 	bl	80091c8 <lwip_htons>
 800ff06:	4603      	mov	r3, r0
 800ff08:	b2db      	uxtb	r3, r3
 800ff0a:	f003 0301 	and.w	r3, r3, #1
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d005      	beq.n	800ff1e <tcp_zero_window_probe+0x72>
 800ff12:	6a3b      	ldr	r3, [r7, #32]
 800ff14:	891b      	ldrh	r3, [r3, #8]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d101      	bne.n	800ff1e <tcp_zero_window_probe+0x72>
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	e000      	b.n	800ff20 <tcp_zero_window_probe+0x74>
 800ff1e:	2300      	movs	r3, #0
 800ff20:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ff22:	7ffb      	ldrb	r3, [r7, #31]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	bf0c      	ite	eq
 800ff28:	2301      	moveq	r3, #1
 800ff2a:	2300      	movne	r3, #0
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ff30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff34:	b299      	uxth	r1, r3
 800ff36:	6a3b      	ldr	r3, [r7, #32]
 800ff38:	68db      	ldr	r3, [r3, #12]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	8bba      	ldrh	r2, [r7, #28]
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f7ff fdf8 	bl	800fb34 <tcp_output_alloc_header>
 800ff44:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ff46:	69bb      	ldr	r3, [r7, #24]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d102      	bne.n	800ff52 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ff4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff50:	e04c      	b.n	800ffec <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ff58:	7ffb      	ldrb	r3, [r7, #31]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d011      	beq.n	800ff82 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	899b      	ldrh	r3, [r3, #12]
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	b21b      	sxth	r3, r3
 800ff66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ff6a:	b21c      	sxth	r4, r3
 800ff6c:	2011      	movs	r0, #17
 800ff6e:	f7f9 f92b 	bl	80091c8 <lwip_htons>
 800ff72:	4603      	mov	r3, r0
 800ff74:	b21b      	sxth	r3, r3
 800ff76:	4323      	orrs	r3, r4
 800ff78:	b21b      	sxth	r3, r3
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	819a      	strh	r2, [r3, #12]
 800ff80:	e010      	b.n	800ffa4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ff82:	69bb      	ldr	r3, [r7, #24]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	3314      	adds	r3, #20
 800ff88:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ff8a:	6a3b      	ldr	r3, [r7, #32]
 800ff8c:	6858      	ldr	r0, [r3, #4]
 800ff8e:	6a3b      	ldr	r3, [r7, #32]
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	891a      	ldrh	r2, [r3, #8]
 800ff94:	6a3b      	ldr	r3, [r7, #32]
 800ff96:	891b      	ldrh	r3, [r3, #8]
 800ff98:	1ad3      	subs	r3, r2, r3
 800ff9a:	b29b      	uxth	r3, r3
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	6939      	ldr	r1, [r7, #16]
 800ffa0:	f7fa fdc0 	bl	800ab24 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ffa4:	6a3b      	ldr	r3, [r7, #32]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7f9 f921 	bl	80091f2 <lwip_htonl>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	1ad3      	subs	r3, r2, r3
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	da02      	bge.n	800ffc8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	68fa      	ldr	r2, [r7, #12]
 800ffc6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ffc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffcc:	2200      	movs	r2, #0
 800ffce:	69b9      	ldr	r1, [r7, #24]
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f7ff fded 	bl	800fbb0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ffd6:	687a      	ldr	r2, [r7, #4]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	3304      	adds	r3, #4
 800ffdc:	69b9      	ldr	r1, [r7, #24]
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f7ff fe26 	bl	800fc30 <tcp_output_control_segment>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ffe8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	372c      	adds	r7, #44	; 0x2c
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd90      	pop	{r4, r7, pc}
 800fff4:	08015f3c 	.word	0x08015f3c
 800fff8:	08016734 	.word	0x08016734
 800fffc:	08015f90 	.word	0x08015f90

08010000 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010008:	f7fa ff0c 	bl	800ae24 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801000c:	4b0a      	ldr	r3, [pc, #40]	; (8010038 <tcpip_tcp_timer+0x38>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d103      	bne.n	801001c <tcpip_tcp_timer+0x1c>
 8010014:	4b09      	ldr	r3, [pc, #36]	; (801003c <tcpip_tcp_timer+0x3c>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d005      	beq.n	8010028 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801001c:	2200      	movs	r2, #0
 801001e:	4908      	ldr	r1, [pc, #32]	; (8010040 <tcpip_tcp_timer+0x40>)
 8010020:	20fa      	movs	r0, #250	; 0xfa
 8010022:	f000 f8f3 	bl	801020c <sys_timeout>
 8010026:	e003      	b.n	8010030 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010028:	4b06      	ldr	r3, [pc, #24]	; (8010044 <tcpip_tcp_timer+0x44>)
 801002a:	2200      	movs	r2, #0
 801002c:	601a      	str	r2, [r3, #0]
  }
}
 801002e:	bf00      	nop
 8010030:	bf00      	nop
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	20008e5c 	.word	0x20008e5c
 801003c:	20008e60 	.word	0x20008e60
 8010040:	08010001 	.word	0x08010001
 8010044:	20008ea8 	.word	0x20008ea8

08010048 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801004c:	4b0a      	ldr	r3, [pc, #40]	; (8010078 <tcp_timer_needed+0x30>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d10f      	bne.n	8010074 <tcp_timer_needed+0x2c>
 8010054:	4b09      	ldr	r3, [pc, #36]	; (801007c <tcp_timer_needed+0x34>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d103      	bne.n	8010064 <tcp_timer_needed+0x1c>
 801005c:	4b08      	ldr	r3, [pc, #32]	; (8010080 <tcp_timer_needed+0x38>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d007      	beq.n	8010074 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010064:	4b04      	ldr	r3, [pc, #16]	; (8010078 <tcp_timer_needed+0x30>)
 8010066:	2201      	movs	r2, #1
 8010068:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801006a:	2200      	movs	r2, #0
 801006c:	4905      	ldr	r1, [pc, #20]	; (8010084 <tcp_timer_needed+0x3c>)
 801006e:	20fa      	movs	r0, #250	; 0xfa
 8010070:	f000 f8cc 	bl	801020c <sys_timeout>
  }
}
 8010074:	bf00      	nop
 8010076:	bd80      	pop	{r7, pc}
 8010078:	20008ea8 	.word	0x20008ea8
 801007c:	20008e5c 	.word	0x20008e5c
 8010080:	20008e60 	.word	0x20008e60
 8010084:	08010001 	.word	0x08010001

08010088 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b086      	sub	sp, #24
 801008c:	af00      	add	r7, sp, #0
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	60b9      	str	r1, [r7, #8]
 8010092:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010094:	2006      	movs	r0, #6
 8010096:	f7f9 fced 	bl	8009a74 <memp_malloc>
 801009a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d109      	bne.n	80100b6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d151      	bne.n	801014c <sys_timeout_abs+0xc4>
 80100a8:	4b2a      	ldr	r3, [pc, #168]	; (8010154 <sys_timeout_abs+0xcc>)
 80100aa:	22be      	movs	r2, #190	; 0xbe
 80100ac:	492a      	ldr	r1, [pc, #168]	; (8010158 <sys_timeout_abs+0xd0>)
 80100ae:	482b      	ldr	r0, [pc, #172]	; (801015c <sys_timeout_abs+0xd4>)
 80100b0:	f003 f9b2 	bl	8013418 <iprintf>
    return;
 80100b4:	e04a      	b.n	801014c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	2200      	movs	r2, #0
 80100ba:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	68ba      	ldr	r2, [r7, #8]
 80100c0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	687a      	ldr	r2, [r7, #4]
 80100c6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	68fa      	ldr	r2, [r7, #12]
 80100cc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80100ce:	4b24      	ldr	r3, [pc, #144]	; (8010160 <sys_timeout_abs+0xd8>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d103      	bne.n	80100de <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80100d6:	4a22      	ldr	r2, [pc, #136]	; (8010160 <sys_timeout_abs+0xd8>)
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	6013      	str	r3, [r2, #0]
    return;
 80100dc:	e037      	b.n	801014e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	685a      	ldr	r2, [r3, #4]
 80100e2:	4b1f      	ldr	r3, [pc, #124]	; (8010160 <sys_timeout_abs+0xd8>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	1ad3      	subs	r3, r2, r3
 80100ea:	0fdb      	lsrs	r3, r3, #31
 80100ec:	f003 0301 	and.w	r3, r3, #1
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d007      	beq.n	8010106 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80100f6:	4b1a      	ldr	r3, [pc, #104]	; (8010160 <sys_timeout_abs+0xd8>)
 80100f8:	681a      	ldr	r2, [r3, #0]
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80100fe:	4a18      	ldr	r2, [pc, #96]	; (8010160 <sys_timeout_abs+0xd8>)
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	6013      	str	r3, [r2, #0]
 8010104:	e023      	b.n	801014e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010106:	4b16      	ldr	r3, [pc, #88]	; (8010160 <sys_timeout_abs+0xd8>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	617b      	str	r3, [r7, #20]
 801010c:	e01a      	b.n	8010144 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d00b      	beq.n	801012e <sys_timeout_abs+0xa6>
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	685a      	ldr	r2, [r3, #4]
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	685b      	ldr	r3, [r3, #4]
 8010120:	1ad3      	subs	r3, r2, r3
 8010122:	0fdb      	lsrs	r3, r3, #31
 8010124:	f003 0301 	and.w	r3, r3, #1
 8010128:	b2db      	uxtb	r3, r3
 801012a:	2b00      	cmp	r3, #0
 801012c:	d007      	beq.n	801013e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	693a      	ldr	r2, [r7, #16]
 801013a:	601a      	str	r2, [r3, #0]
        break;
 801013c:	e007      	b.n	801014e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	617b      	str	r3, [r7, #20]
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d1e1      	bne.n	801010e <sys_timeout_abs+0x86>
 801014a:	e000      	b.n	801014e <sys_timeout_abs+0xc6>
    return;
 801014c:	bf00      	nop
      }
    }
  }
}
 801014e:	3718      	adds	r7, #24
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	08016758 	.word	0x08016758
 8010158:	0801678c 	.word	0x0801678c
 801015c:	080167cc 	.word	0x080167cc
 8010160:	20008ea0 	.word	0x20008ea0

08010164 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b086      	sub	sp, #24
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	4798      	blx	r3

  now = sys_now();
 8010176:	f7f8 ff99 	bl	80090ac <sys_now>
 801017a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	681a      	ldr	r2, [r3, #0]
 8010180:	4b0f      	ldr	r3, [pc, #60]	; (80101c0 <lwip_cyclic_timer+0x5c>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4413      	add	r3, r2
 8010186:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010188:	68fa      	ldr	r2, [r7, #12]
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	1ad3      	subs	r3, r2, r3
 801018e:	0fdb      	lsrs	r3, r3, #31
 8010190:	f003 0301 	and.w	r3, r3, #1
 8010194:	b2db      	uxtb	r3, r3
 8010196:	2b00      	cmp	r3, #0
 8010198:	d009      	beq.n	80101ae <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	681a      	ldr	r2, [r3, #0]
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	4413      	add	r3, r2
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	4907      	ldr	r1, [pc, #28]	; (80101c4 <lwip_cyclic_timer+0x60>)
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7ff ff6e 	bl	8010088 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80101ac:	e004      	b.n	80101b8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80101ae:	687a      	ldr	r2, [r7, #4]
 80101b0:	4904      	ldr	r1, [pc, #16]	; (80101c4 <lwip_cyclic_timer+0x60>)
 80101b2:	68f8      	ldr	r0, [r7, #12]
 80101b4:	f7ff ff68 	bl	8010088 <sys_timeout_abs>
}
 80101b8:	bf00      	nop
 80101ba:	3718      	adds	r7, #24
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	20008ea4 	.word	0x20008ea4
 80101c4:	08010165 	.word	0x08010165

080101c8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80101ce:	2301      	movs	r3, #1
 80101d0:	607b      	str	r3, [r7, #4]
 80101d2:	e00e      	b.n	80101f2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80101d4:	4a0b      	ldr	r2, [pc, #44]	; (8010204 <sys_timeouts_init+0x3c>)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	00db      	lsls	r3, r3, #3
 80101e0:	4a08      	ldr	r2, [pc, #32]	; (8010204 <sys_timeouts_init+0x3c>)
 80101e2:	4413      	add	r3, r2
 80101e4:	461a      	mov	r2, r3
 80101e6:	4908      	ldr	r1, [pc, #32]	; (8010208 <sys_timeouts_init+0x40>)
 80101e8:	f000 f810 	bl	801020c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	3301      	adds	r3, #1
 80101f0:	607b      	str	r3, [r7, #4]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2b02      	cmp	r3, #2
 80101f6:	d9ed      	bls.n	80101d4 <sys_timeouts_init+0xc>
  }
}
 80101f8:	bf00      	nop
 80101fa:	bf00      	nop
 80101fc:	3708      	adds	r7, #8
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}
 8010202:	bf00      	nop
 8010204:	08017340 	.word	0x08017340
 8010208:	08010165 	.word	0x08010165

0801020c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b086      	sub	sp, #24
 8010210:	af00      	add	r7, sp, #0
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801021e:	d306      	bcc.n	801022e <sys_timeout+0x22>
 8010220:	4b0a      	ldr	r3, [pc, #40]	; (801024c <sys_timeout+0x40>)
 8010222:	f240 1229 	movw	r2, #297	; 0x129
 8010226:	490a      	ldr	r1, [pc, #40]	; (8010250 <sys_timeout+0x44>)
 8010228:	480a      	ldr	r0, [pc, #40]	; (8010254 <sys_timeout+0x48>)
 801022a:	f003 f8f5 	bl	8013418 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801022e:	f7f8 ff3d 	bl	80090ac <sys_now>
 8010232:	4602      	mov	r2, r0
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	4413      	add	r3, r2
 8010238:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801023a:	687a      	ldr	r2, [r7, #4]
 801023c:	68b9      	ldr	r1, [r7, #8]
 801023e:	6978      	ldr	r0, [r7, #20]
 8010240:	f7ff ff22 	bl	8010088 <sys_timeout_abs>
#endif
}
 8010244:	bf00      	nop
 8010246:	3718      	adds	r7, #24
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}
 801024c:	08016758 	.word	0x08016758
 8010250:	080167f4 	.word	0x080167f4
 8010254:	080167cc 	.word	0x080167cc

08010258 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801025e:	f7f8 ff25 	bl	80090ac <sys_now>
 8010262:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010264:	4b1a      	ldr	r3, [pc, #104]	; (80102d0 <sys_check_timeouts+0x78>)
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	b2db      	uxtb	r3, r3
 801026a:	2b00      	cmp	r3, #0
 801026c:	d001      	beq.n	8010272 <sys_check_timeouts+0x1a>
 801026e:	f7f9 ff25 	bl	800a0bc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010272:	4b18      	ldr	r3, [pc, #96]	; (80102d4 <sys_check_timeouts+0x7c>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d022      	beq.n	80102c4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	68fa      	ldr	r2, [r7, #12]
 8010284:	1ad3      	subs	r3, r2, r3
 8010286:	0fdb      	lsrs	r3, r3, #31
 8010288:	f003 0301 	and.w	r3, r3, #1
 801028c:	b2db      	uxtb	r3, r3
 801028e:	2b00      	cmp	r3, #0
 8010290:	d11a      	bne.n	80102c8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4a0f      	ldr	r2, [pc, #60]	; (80102d4 <sys_check_timeouts+0x7c>)
 8010298:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	689b      	ldr	r3, [r3, #8]
 801029e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	4a0b      	ldr	r2, [pc, #44]	; (80102d8 <sys_check_timeouts+0x80>)
 80102ac:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80102ae:	68b9      	ldr	r1, [r7, #8]
 80102b0:	2006      	movs	r0, #6
 80102b2:	f7f9 fc2b 	bl	8009b0c <memp_free>
    if (handler != NULL) {
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d0d3      	beq.n	8010264 <sys_check_timeouts+0xc>
      handler(arg);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6838      	ldr	r0, [r7, #0]
 80102c0:	4798      	blx	r3
  do {
 80102c2:	e7cf      	b.n	8010264 <sys_check_timeouts+0xc>
      return;
 80102c4:	bf00      	nop
 80102c6:	e000      	b.n	80102ca <sys_check_timeouts+0x72>
      return;
 80102c8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80102ca:	3710      	adds	r7, #16
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	20008e4d 	.word	0x20008e4d
 80102d4:	20008ea0 	.word	0x20008ea0
 80102d8:	20008ea4 	.word	0x20008ea4

080102dc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80102e0:	f003 f8b2 	bl	8013448 <rand>
 80102e4:	4603      	mov	r3, r0
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	4b01      	ldr	r3, [pc, #4]	; (80102fc <udp_init+0x20>)
 80102f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80102f8:	bf00      	nop
 80102fa:	bd80      	pop	{r7, pc}
 80102fc:	20000014 	.word	0x20000014

08010300 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010300:	b480      	push	{r7}
 8010302:	b083      	sub	sp, #12
 8010304:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010306:	2300      	movs	r3, #0
 8010308:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801030a:	4b17      	ldr	r3, [pc, #92]	; (8010368 <udp_new_port+0x68>)
 801030c:	881b      	ldrh	r3, [r3, #0]
 801030e:	1c5a      	adds	r2, r3, #1
 8010310:	b291      	uxth	r1, r2
 8010312:	4a15      	ldr	r2, [pc, #84]	; (8010368 <udp_new_port+0x68>)
 8010314:	8011      	strh	r1, [r2, #0]
 8010316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801031a:	4293      	cmp	r3, r2
 801031c:	d103      	bne.n	8010326 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801031e:	4b12      	ldr	r3, [pc, #72]	; (8010368 <udp_new_port+0x68>)
 8010320:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010324:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010326:	4b11      	ldr	r3, [pc, #68]	; (801036c <udp_new_port+0x6c>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	603b      	str	r3, [r7, #0]
 801032c:	e011      	b.n	8010352 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	8a5a      	ldrh	r2, [r3, #18]
 8010332:	4b0d      	ldr	r3, [pc, #52]	; (8010368 <udp_new_port+0x68>)
 8010334:	881b      	ldrh	r3, [r3, #0]
 8010336:	429a      	cmp	r2, r3
 8010338:	d108      	bne.n	801034c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801033a:	88fb      	ldrh	r3, [r7, #6]
 801033c:	3301      	adds	r3, #1
 801033e:	80fb      	strh	r3, [r7, #6]
 8010340:	88fb      	ldrh	r3, [r7, #6]
 8010342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010346:	d3e0      	bcc.n	801030a <udp_new_port+0xa>
        return 0;
 8010348:	2300      	movs	r3, #0
 801034a:	e007      	b.n	801035c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	603b      	str	r3, [r7, #0]
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d1ea      	bne.n	801032e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010358:	4b03      	ldr	r3, [pc, #12]	; (8010368 <udp_new_port+0x68>)
 801035a:	881b      	ldrh	r3, [r3, #0]
}
 801035c:	4618      	mov	r0, r3
 801035e:	370c      	adds	r7, #12
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr
 8010368:	20000014 	.word	0x20000014
 801036c:	20008eac 	.word	0x20008eac

08010370 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b084      	sub	sp, #16
 8010374:	af00      	add	r7, sp, #0
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	60b9      	str	r1, [r7, #8]
 801037a:	4613      	mov	r3, r2
 801037c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d105      	bne.n	8010390 <udp_input_local_match+0x20>
 8010384:	4b27      	ldr	r3, [pc, #156]	; (8010424 <udp_input_local_match+0xb4>)
 8010386:	2287      	movs	r2, #135	; 0x87
 8010388:	4927      	ldr	r1, [pc, #156]	; (8010428 <udp_input_local_match+0xb8>)
 801038a:	4828      	ldr	r0, [pc, #160]	; (801042c <udp_input_local_match+0xbc>)
 801038c:	f003 f844 	bl	8013418 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d105      	bne.n	80103a2 <udp_input_local_match+0x32>
 8010396:	4b23      	ldr	r3, [pc, #140]	; (8010424 <udp_input_local_match+0xb4>)
 8010398:	2288      	movs	r2, #136	; 0x88
 801039a:	4925      	ldr	r1, [pc, #148]	; (8010430 <udp_input_local_match+0xc0>)
 801039c:	4823      	ldr	r0, [pc, #140]	; (801042c <udp_input_local_match+0xbc>)
 801039e:	f003 f83b 	bl	8013418 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	7a1b      	ldrb	r3, [r3, #8]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00b      	beq.n	80103c2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	7a1a      	ldrb	r2, [r3, #8]
 80103ae:	4b21      	ldr	r3, [pc, #132]	; (8010434 <udp_input_local_match+0xc4>)
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103b6:	3301      	adds	r3, #1
 80103b8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d001      	beq.n	80103c2 <udp_input_local_match+0x52>
    return 0;
 80103be:	2300      	movs	r3, #0
 80103c0:	e02b      	b.n	801041a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80103c2:	79fb      	ldrb	r3, [r7, #7]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d018      	beq.n	80103fa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d013      	beq.n	80103f6 <udp_input_local_match+0x86>
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d00f      	beq.n	80103f6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80103d6:	4b17      	ldr	r3, [pc, #92]	; (8010434 <udp_input_local_match+0xc4>)
 80103d8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80103da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103de:	d00a      	beq.n	80103f6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681a      	ldr	r2, [r3, #0]
 80103e4:	4b13      	ldr	r3, [pc, #76]	; (8010434 <udp_input_local_match+0xc4>)
 80103e6:	695b      	ldr	r3, [r3, #20]
 80103e8:	405a      	eors	r2, r3
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	3308      	adds	r3, #8
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d110      	bne.n	8010418 <udp_input_local_match+0xa8>
          return 1;
 80103f6:	2301      	movs	r3, #1
 80103f8:	e00f      	b.n	801041a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d009      	beq.n	8010414 <udp_input_local_match+0xa4>
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d005      	beq.n	8010414 <udp_input_local_match+0xa4>
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	4b09      	ldr	r3, [pc, #36]	; (8010434 <udp_input_local_match+0xc4>)
 801040e:	695b      	ldr	r3, [r3, #20]
 8010410:	429a      	cmp	r2, r3
 8010412:	d101      	bne.n	8010418 <udp_input_local_match+0xa8>
        return 1;
 8010414:	2301      	movs	r3, #1
 8010416:	e000      	b.n	801041a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010418:	2300      	movs	r3, #0
}
 801041a:	4618      	mov	r0, r3
 801041c:	3710      	adds	r7, #16
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}
 8010422:	bf00      	nop
 8010424:	08016840 	.word	0x08016840
 8010428:	08016870 	.word	0x08016870
 801042c:	08016894 	.word	0x08016894
 8010430:	080168bc 	.word	0x080168bc
 8010434:	20003720 	.word	0x20003720

08010438 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010438:	b590      	push	{r4, r7, lr}
 801043a:	b08d      	sub	sp, #52	; 0x34
 801043c:	af02      	add	r7, sp, #8
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010442:	2300      	movs	r3, #0
 8010444:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d105      	bne.n	8010458 <udp_input+0x20>
 801044c:	4b7c      	ldr	r3, [pc, #496]	; (8010640 <udp_input+0x208>)
 801044e:	22cf      	movs	r2, #207	; 0xcf
 8010450:	497c      	ldr	r1, [pc, #496]	; (8010644 <udp_input+0x20c>)
 8010452:	487d      	ldr	r0, [pc, #500]	; (8010648 <udp_input+0x210>)
 8010454:	f002 ffe0 	bl	8013418 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d105      	bne.n	801046a <udp_input+0x32>
 801045e:	4b78      	ldr	r3, [pc, #480]	; (8010640 <udp_input+0x208>)
 8010460:	22d0      	movs	r2, #208	; 0xd0
 8010462:	497a      	ldr	r1, [pc, #488]	; (801064c <udp_input+0x214>)
 8010464:	4878      	ldr	r0, [pc, #480]	; (8010648 <udp_input+0x210>)
 8010466:	f002 ffd7 	bl	8013418 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	895b      	ldrh	r3, [r3, #10]
 801046e:	2b07      	cmp	r3, #7
 8010470:	d803      	bhi.n	801047a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f7fa f95c 	bl	800a730 <pbuf_free>
    goto end;
 8010478:	e0de      	b.n	8010638 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010480:	4b73      	ldr	r3, [pc, #460]	; (8010650 <udp_input+0x218>)
 8010482:	695b      	ldr	r3, [r3, #20]
 8010484:	4a72      	ldr	r2, [pc, #456]	; (8010650 <udp_input+0x218>)
 8010486:	6812      	ldr	r2, [r2, #0]
 8010488:	4611      	mov	r1, r2
 801048a:	4618      	mov	r0, r3
 801048c:	f002 f80a 	bl	80124a4 <ip4_addr_isbroadcast_u32>
 8010490:	4603      	mov	r3, r0
 8010492:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	881b      	ldrh	r3, [r3, #0]
 8010498:	b29b      	uxth	r3, r3
 801049a:	4618      	mov	r0, r3
 801049c:	f7f8 fe94 	bl	80091c8 <lwip_htons>
 80104a0:	4603      	mov	r3, r0
 80104a2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	885b      	ldrh	r3, [r3, #2]
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7f8 fe8c 	bl	80091c8 <lwip_htons>
 80104b0:	4603      	mov	r3, r0
 80104b2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80104b4:	2300      	movs	r3, #0
 80104b6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80104b8:	2300      	movs	r3, #0
 80104ba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80104bc:	2300      	movs	r3, #0
 80104be:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80104c0:	4b64      	ldr	r3, [pc, #400]	; (8010654 <udp_input+0x21c>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	627b      	str	r3, [r7, #36]	; 0x24
 80104c6:	e054      	b.n	8010572 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80104c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ca:	8a5b      	ldrh	r3, [r3, #18]
 80104cc:	89fa      	ldrh	r2, [r7, #14]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d14a      	bne.n	8010568 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80104d2:	7cfb      	ldrb	r3, [r7, #19]
 80104d4:	461a      	mov	r2, r3
 80104d6:	6839      	ldr	r1, [r7, #0]
 80104d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104da:	f7ff ff49 	bl	8010370 <udp_input_local_match>
 80104de:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d041      	beq.n	8010568 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80104e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e6:	7c1b      	ldrb	r3, [r3, #16]
 80104e8:	f003 0304 	and.w	r3, r3, #4
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d11d      	bne.n	801052c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80104f0:	69fb      	ldr	r3, [r7, #28]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d102      	bne.n	80104fc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80104f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f8:	61fb      	str	r3, [r7, #28]
 80104fa:	e017      	b.n	801052c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80104fc:	7cfb      	ldrb	r3, [r7, #19]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d014      	beq.n	801052c <udp_input+0xf4>
 8010502:	4b53      	ldr	r3, [pc, #332]	; (8010650 <udp_input+0x218>)
 8010504:	695b      	ldr	r3, [r3, #20]
 8010506:	f1b3 3fff 	cmp.w	r3, #4294967295
 801050a:	d10f      	bne.n	801052c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	3304      	adds	r3, #4
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	429a      	cmp	r2, r3
 8010518:	d008      	beq.n	801052c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	3304      	adds	r3, #4
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	429a      	cmp	r2, r3
 8010526:	d101      	bne.n	801052c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052e:	8a9b      	ldrh	r3, [r3, #20]
 8010530:	8a3a      	ldrh	r2, [r7, #16]
 8010532:	429a      	cmp	r2, r3
 8010534:	d118      	bne.n	8010568 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010538:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801053a:	2b00      	cmp	r3, #0
 801053c:	d005      	beq.n	801054a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801053e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010540:	685a      	ldr	r2, [r3, #4]
 8010542:	4b43      	ldr	r3, [pc, #268]	; (8010650 <udp_input+0x218>)
 8010544:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010546:	429a      	cmp	r2, r3
 8010548:	d10e      	bne.n	8010568 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801054a:	6a3b      	ldr	r3, [r7, #32]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d014      	beq.n	801057a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010552:	68da      	ldr	r2, [r3, #12]
 8010554:	6a3b      	ldr	r3, [r7, #32]
 8010556:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010558:	4b3e      	ldr	r3, [pc, #248]	; (8010654 <udp_input+0x21c>)
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010560:	4a3c      	ldr	r2, [pc, #240]	; (8010654 <udp_input+0x21c>)
 8010562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010564:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010566:	e008      	b.n	801057a <udp_input+0x142>
      }
    }

    prev = pcb;
 8010568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801056c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	627b      	str	r3, [r7, #36]	; 0x24
 8010572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010574:	2b00      	cmp	r3, #0
 8010576:	d1a7      	bne.n	80104c8 <udp_input+0x90>
 8010578:	e000      	b.n	801057c <udp_input+0x144>
        break;
 801057a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057e:	2b00      	cmp	r3, #0
 8010580:	d101      	bne.n	8010586 <udp_input+0x14e>
    pcb = uncon_pcb;
 8010582:	69fb      	ldr	r3, [r7, #28]
 8010584:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010588:	2b00      	cmp	r3, #0
 801058a:	d002      	beq.n	8010592 <udp_input+0x15a>
    for_us = 1;
 801058c:	2301      	movs	r3, #1
 801058e:	76fb      	strb	r3, [r7, #27]
 8010590:	e00a      	b.n	80105a8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	3304      	adds	r3, #4
 8010596:	681a      	ldr	r2, [r3, #0]
 8010598:	4b2d      	ldr	r3, [pc, #180]	; (8010650 <udp_input+0x218>)
 801059a:	695b      	ldr	r3, [r3, #20]
 801059c:	429a      	cmp	r2, r3
 801059e:	bf0c      	ite	eq
 80105a0:	2301      	moveq	r3, #1
 80105a2:	2300      	movne	r3, #0
 80105a4:	b2db      	uxtb	r3, r3
 80105a6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80105a8:	7efb      	ldrb	r3, [r7, #27]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d041      	beq.n	8010632 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80105ae:	2108      	movs	r1, #8
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f7fa f837 	bl	800a624 <pbuf_remove_header>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d00a      	beq.n	80105d2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80105bc:	4b20      	ldr	r3, [pc, #128]	; (8010640 <udp_input+0x208>)
 80105be:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80105c2:	4925      	ldr	r1, [pc, #148]	; (8010658 <udp_input+0x220>)
 80105c4:	4820      	ldr	r0, [pc, #128]	; (8010648 <udp_input+0x210>)
 80105c6:	f002 ff27 	bl	8013418 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f7fa f8b0 	bl	800a730 <pbuf_free>
      goto end;
 80105d0:	e032      	b.n	8010638 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80105d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d012      	beq.n	80105fe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80105d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105da:	699b      	ldr	r3, [r3, #24]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d00a      	beq.n	80105f6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80105e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e2:	699c      	ldr	r4, [r3, #24]
 80105e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e6:	69d8      	ldr	r0, [r3, #28]
 80105e8:	8a3b      	ldrh	r3, [r7, #16]
 80105ea:	9300      	str	r3, [sp, #0]
 80105ec:	4b1b      	ldr	r3, [pc, #108]	; (801065c <udp_input+0x224>)
 80105ee:	687a      	ldr	r2, [r7, #4]
 80105f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80105f2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80105f4:	e021      	b.n	801063a <udp_input+0x202>
        pbuf_free(p);
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f7fa f89a 	bl	800a730 <pbuf_free>
        goto end;
 80105fc:	e01c      	b.n	8010638 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80105fe:	7cfb      	ldrb	r3, [r7, #19]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d112      	bne.n	801062a <udp_input+0x1f2>
 8010604:	4b12      	ldr	r3, [pc, #72]	; (8010650 <udp_input+0x218>)
 8010606:	695b      	ldr	r3, [r3, #20]
 8010608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801060c:	2be0      	cmp	r3, #224	; 0xe0
 801060e:	d00c      	beq.n	801062a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010610:	4b0f      	ldr	r3, [pc, #60]	; (8010650 <udp_input+0x218>)
 8010612:	899b      	ldrh	r3, [r3, #12]
 8010614:	3308      	adds	r3, #8
 8010616:	b29b      	uxth	r3, r3
 8010618:	b21b      	sxth	r3, r3
 801061a:	4619      	mov	r1, r3
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f7fa f874 	bl	800a70a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010622:	2103      	movs	r1, #3
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f001 fc1d 	bl	8011e64 <icmp_dest_unreach>
      pbuf_free(p);
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f7fa f880 	bl	800a730 <pbuf_free>
  return;
 8010630:	e003      	b.n	801063a <udp_input+0x202>
    pbuf_free(p);
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f7fa f87c 	bl	800a730 <pbuf_free>
  return;
 8010638:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801063a:	372c      	adds	r7, #44	; 0x2c
 801063c:	46bd      	mov	sp, r7
 801063e:	bd90      	pop	{r4, r7, pc}
 8010640:	08016840 	.word	0x08016840
 8010644:	080168e4 	.word	0x080168e4
 8010648:	08016894 	.word	0x08016894
 801064c:	080168fc 	.word	0x080168fc
 8010650:	20003720 	.word	0x20003720
 8010654:	20008eac 	.word	0x20008eac
 8010658:	08016918 	.word	0x08016918
 801065c:	20003730 	.word	0x20003730

08010660 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d109      	bne.n	8010684 <udp_send+0x24>
 8010670:	4b11      	ldr	r3, [pc, #68]	; (80106b8 <udp_send+0x58>)
 8010672:	f240 12d5 	movw	r2, #469	; 0x1d5
 8010676:	4911      	ldr	r1, [pc, #68]	; (80106bc <udp_send+0x5c>)
 8010678:	4811      	ldr	r0, [pc, #68]	; (80106c0 <udp_send+0x60>)
 801067a:	f002 fecd 	bl	8013418 <iprintf>
 801067e:	f06f 030f 	mvn.w	r3, #15
 8010682:	e015      	b.n	80106b0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d109      	bne.n	801069e <udp_send+0x3e>
 801068a:	4b0b      	ldr	r3, [pc, #44]	; (80106b8 <udp_send+0x58>)
 801068c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8010690:	490c      	ldr	r1, [pc, #48]	; (80106c4 <udp_send+0x64>)
 8010692:	480b      	ldr	r0, [pc, #44]	; (80106c0 <udp_send+0x60>)
 8010694:	f002 fec0 	bl	8013418 <iprintf>
 8010698:	f06f 030f 	mvn.w	r3, #15
 801069c:	e008      	b.n	80106b0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	1d1a      	adds	r2, r3, #4
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	8a9b      	ldrh	r3, [r3, #20]
 80106a6:	6839      	ldr	r1, [r7, #0]
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f000 f80d 	bl	80106c8 <udp_sendto>
 80106ae:	4603      	mov	r3, r0
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	08016840 	.word	0x08016840
 80106bc:	08016934 	.word	0x08016934
 80106c0:	08016894 	.word	0x08016894
 80106c4:	0801694c 	.word	0x0801694c

080106c8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b088      	sub	sp, #32
 80106cc:	af02      	add	r7, sp, #8
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	607a      	str	r2, [r7, #4]
 80106d4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d109      	bne.n	80106f0 <udp_sendto+0x28>
 80106dc:	4b23      	ldr	r3, [pc, #140]	; (801076c <udp_sendto+0xa4>)
 80106de:	f44f 7206 	mov.w	r2, #536	; 0x218
 80106e2:	4923      	ldr	r1, [pc, #140]	; (8010770 <udp_sendto+0xa8>)
 80106e4:	4823      	ldr	r0, [pc, #140]	; (8010774 <udp_sendto+0xac>)
 80106e6:	f002 fe97 	bl	8013418 <iprintf>
 80106ea:	f06f 030f 	mvn.w	r3, #15
 80106ee:	e038      	b.n	8010762 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d109      	bne.n	801070a <udp_sendto+0x42>
 80106f6:	4b1d      	ldr	r3, [pc, #116]	; (801076c <udp_sendto+0xa4>)
 80106f8:	f240 2219 	movw	r2, #537	; 0x219
 80106fc:	491e      	ldr	r1, [pc, #120]	; (8010778 <udp_sendto+0xb0>)
 80106fe:	481d      	ldr	r0, [pc, #116]	; (8010774 <udp_sendto+0xac>)
 8010700:	f002 fe8a 	bl	8013418 <iprintf>
 8010704:	f06f 030f 	mvn.w	r3, #15
 8010708:	e02b      	b.n	8010762 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d109      	bne.n	8010724 <udp_sendto+0x5c>
 8010710:	4b16      	ldr	r3, [pc, #88]	; (801076c <udp_sendto+0xa4>)
 8010712:	f240 221a 	movw	r2, #538	; 0x21a
 8010716:	4919      	ldr	r1, [pc, #100]	; (801077c <udp_sendto+0xb4>)
 8010718:	4816      	ldr	r0, [pc, #88]	; (8010774 <udp_sendto+0xac>)
 801071a:	f002 fe7d 	bl	8013418 <iprintf>
 801071e:	f06f 030f 	mvn.w	r3, #15
 8010722:	e01e      	b.n	8010762 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	7a1b      	ldrb	r3, [r3, #8]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d006      	beq.n	801073a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	7a1b      	ldrb	r3, [r3, #8]
 8010730:	4618      	mov	r0, r3
 8010732:	f7f9 fc9d 	bl	800a070 <netif_get_by_index>
 8010736:	6178      	str	r0, [r7, #20]
 8010738:	e003      	b.n	8010742 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f001 fc1c 	bl	8011f78 <ip4_route>
 8010740:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d102      	bne.n	801074e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8010748:	f06f 0303 	mvn.w	r3, #3
 801074c:	e009      	b.n	8010762 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801074e:	887a      	ldrh	r2, [r7, #2]
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	9300      	str	r3, [sp, #0]
 8010754:	4613      	mov	r3, r2
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	68b9      	ldr	r1, [r7, #8]
 801075a:	68f8      	ldr	r0, [r7, #12]
 801075c:	f000 f810 	bl	8010780 <udp_sendto_if>
 8010760:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010762:	4618      	mov	r0, r3
 8010764:	3718      	adds	r7, #24
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
 801076a:	bf00      	nop
 801076c:	08016840 	.word	0x08016840
 8010770:	08016964 	.word	0x08016964
 8010774:	08016894 	.word	0x08016894
 8010778:	0801697c 	.word	0x0801697c
 801077c:	08016998 	.word	0x08016998

08010780 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b088      	sub	sp, #32
 8010784:	af02      	add	r7, sp, #8
 8010786:	60f8      	str	r0, [r7, #12]
 8010788:	60b9      	str	r1, [r7, #8]
 801078a:	607a      	str	r2, [r7, #4]
 801078c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d109      	bne.n	80107a8 <udp_sendto_if+0x28>
 8010794:	4b2e      	ldr	r3, [pc, #184]	; (8010850 <udp_sendto_if+0xd0>)
 8010796:	f44f 7220 	mov.w	r2, #640	; 0x280
 801079a:	492e      	ldr	r1, [pc, #184]	; (8010854 <udp_sendto_if+0xd4>)
 801079c:	482e      	ldr	r0, [pc, #184]	; (8010858 <udp_sendto_if+0xd8>)
 801079e:	f002 fe3b 	bl	8013418 <iprintf>
 80107a2:	f06f 030f 	mvn.w	r3, #15
 80107a6:	e04f      	b.n	8010848 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d109      	bne.n	80107c2 <udp_sendto_if+0x42>
 80107ae:	4b28      	ldr	r3, [pc, #160]	; (8010850 <udp_sendto_if+0xd0>)
 80107b0:	f240 2281 	movw	r2, #641	; 0x281
 80107b4:	4929      	ldr	r1, [pc, #164]	; (801085c <udp_sendto_if+0xdc>)
 80107b6:	4828      	ldr	r0, [pc, #160]	; (8010858 <udp_sendto_if+0xd8>)
 80107b8:	f002 fe2e 	bl	8013418 <iprintf>
 80107bc:	f06f 030f 	mvn.w	r3, #15
 80107c0:	e042      	b.n	8010848 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d109      	bne.n	80107dc <udp_sendto_if+0x5c>
 80107c8:	4b21      	ldr	r3, [pc, #132]	; (8010850 <udp_sendto_if+0xd0>)
 80107ca:	f240 2282 	movw	r2, #642	; 0x282
 80107ce:	4924      	ldr	r1, [pc, #144]	; (8010860 <udp_sendto_if+0xe0>)
 80107d0:	4821      	ldr	r0, [pc, #132]	; (8010858 <udp_sendto_if+0xd8>)
 80107d2:	f002 fe21 	bl	8013418 <iprintf>
 80107d6:	f06f 030f 	mvn.w	r3, #15
 80107da:	e035      	b.n	8010848 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80107dc:	6a3b      	ldr	r3, [r7, #32]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d109      	bne.n	80107f6 <udp_sendto_if+0x76>
 80107e2:	4b1b      	ldr	r3, [pc, #108]	; (8010850 <udp_sendto_if+0xd0>)
 80107e4:	f240 2283 	movw	r2, #643	; 0x283
 80107e8:	491e      	ldr	r1, [pc, #120]	; (8010864 <udp_sendto_if+0xe4>)
 80107ea:	481b      	ldr	r0, [pc, #108]	; (8010858 <udp_sendto_if+0xd8>)
 80107ec:	f002 fe14 	bl	8013418 <iprintf>
 80107f0:	f06f 030f 	mvn.w	r3, #15
 80107f4:	e028      	b.n	8010848 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d009      	beq.n	8010810 <udp_sendto_if+0x90>
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d005      	beq.n	8010810 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801080c:	2be0      	cmp	r3, #224	; 0xe0
 801080e:	d103      	bne.n	8010818 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010810:	6a3b      	ldr	r3, [r7, #32]
 8010812:	3304      	adds	r3, #4
 8010814:	617b      	str	r3, [r7, #20]
 8010816:	e00b      	b.n	8010830 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	681a      	ldr	r2, [r3, #0]
 801081c:	6a3b      	ldr	r3, [r7, #32]
 801081e:	3304      	adds	r3, #4
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	429a      	cmp	r2, r3
 8010824:	d002      	beq.n	801082c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8010826:	f06f 0303 	mvn.w	r3, #3
 801082a:	e00d      	b.n	8010848 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010830:	887a      	ldrh	r2, [r7, #2]
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	9301      	str	r3, [sp, #4]
 8010836:	6a3b      	ldr	r3, [r7, #32]
 8010838:	9300      	str	r3, [sp, #0]
 801083a:	4613      	mov	r3, r2
 801083c:	687a      	ldr	r2, [r7, #4]
 801083e:	68b9      	ldr	r1, [r7, #8]
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f000 f811 	bl	8010868 <udp_sendto_if_src>
 8010846:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010848:	4618      	mov	r0, r3
 801084a:	3718      	adds	r7, #24
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	08016840 	.word	0x08016840
 8010854:	080169b4 	.word	0x080169b4
 8010858:	08016894 	.word	0x08016894
 801085c:	080169d0 	.word	0x080169d0
 8010860:	080169ec 	.word	0x080169ec
 8010864:	08016a0c 	.word	0x08016a0c

08010868 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b08c      	sub	sp, #48	; 0x30
 801086c:	af04      	add	r7, sp, #16
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	60b9      	str	r1, [r7, #8]
 8010872:	607a      	str	r2, [r7, #4]
 8010874:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d109      	bne.n	8010890 <udp_sendto_if_src+0x28>
 801087c:	4b65      	ldr	r3, [pc, #404]	; (8010a14 <udp_sendto_if_src+0x1ac>)
 801087e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010882:	4965      	ldr	r1, [pc, #404]	; (8010a18 <udp_sendto_if_src+0x1b0>)
 8010884:	4865      	ldr	r0, [pc, #404]	; (8010a1c <udp_sendto_if_src+0x1b4>)
 8010886:	f002 fdc7 	bl	8013418 <iprintf>
 801088a:	f06f 030f 	mvn.w	r3, #15
 801088e:	e0bc      	b.n	8010a0a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d109      	bne.n	80108aa <udp_sendto_if_src+0x42>
 8010896:	4b5f      	ldr	r3, [pc, #380]	; (8010a14 <udp_sendto_if_src+0x1ac>)
 8010898:	f240 22d2 	movw	r2, #722	; 0x2d2
 801089c:	4960      	ldr	r1, [pc, #384]	; (8010a20 <udp_sendto_if_src+0x1b8>)
 801089e:	485f      	ldr	r0, [pc, #380]	; (8010a1c <udp_sendto_if_src+0x1b4>)
 80108a0:	f002 fdba 	bl	8013418 <iprintf>
 80108a4:	f06f 030f 	mvn.w	r3, #15
 80108a8:	e0af      	b.n	8010a0a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d109      	bne.n	80108c4 <udp_sendto_if_src+0x5c>
 80108b0:	4b58      	ldr	r3, [pc, #352]	; (8010a14 <udp_sendto_if_src+0x1ac>)
 80108b2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80108b6:	495b      	ldr	r1, [pc, #364]	; (8010a24 <udp_sendto_if_src+0x1bc>)
 80108b8:	4858      	ldr	r0, [pc, #352]	; (8010a1c <udp_sendto_if_src+0x1b4>)
 80108ba:	f002 fdad 	bl	8013418 <iprintf>
 80108be:	f06f 030f 	mvn.w	r3, #15
 80108c2:	e0a2      	b.n	8010a0a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80108c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d109      	bne.n	80108de <udp_sendto_if_src+0x76>
 80108ca:	4b52      	ldr	r3, [pc, #328]	; (8010a14 <udp_sendto_if_src+0x1ac>)
 80108cc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80108d0:	4955      	ldr	r1, [pc, #340]	; (8010a28 <udp_sendto_if_src+0x1c0>)
 80108d2:	4852      	ldr	r0, [pc, #328]	; (8010a1c <udp_sendto_if_src+0x1b4>)
 80108d4:	f002 fda0 	bl	8013418 <iprintf>
 80108d8:	f06f 030f 	mvn.w	r3, #15
 80108dc:	e095      	b.n	8010a0a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80108de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d109      	bne.n	80108f8 <udp_sendto_if_src+0x90>
 80108e4:	4b4b      	ldr	r3, [pc, #300]	; (8010a14 <udp_sendto_if_src+0x1ac>)
 80108e6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80108ea:	4950      	ldr	r1, [pc, #320]	; (8010a2c <udp_sendto_if_src+0x1c4>)
 80108ec:	484b      	ldr	r0, [pc, #300]	; (8010a1c <udp_sendto_if_src+0x1b4>)
 80108ee:	f002 fd93 	bl	8013418 <iprintf>
 80108f2:	f06f 030f 	mvn.w	r3, #15
 80108f6:	e088      	b.n	8010a0a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	8a5b      	ldrh	r3, [r3, #18]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d10f      	bne.n	8010920 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010900:	68f9      	ldr	r1, [r7, #12]
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	8a5b      	ldrh	r3, [r3, #18]
 8010906:	461a      	mov	r2, r3
 8010908:	68f8      	ldr	r0, [r7, #12]
 801090a:	f000 f893 	bl	8010a34 <udp_bind>
 801090e:	4603      	mov	r3, r0
 8010910:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010912:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d002      	beq.n	8010920 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801091a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801091e:	e074      	b.n	8010a0a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	891b      	ldrh	r3, [r3, #8]
 8010924:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010928:	4293      	cmp	r3, r2
 801092a:	d902      	bls.n	8010932 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801092c:	f04f 33ff 	mov.w	r3, #4294967295
 8010930:	e06b      	b.n	8010a0a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8010932:	2108      	movs	r1, #8
 8010934:	68b8      	ldr	r0, [r7, #8]
 8010936:	f7f9 fe65 	bl	800a604 <pbuf_add_header>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d015      	beq.n	801096c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010940:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010944:	2108      	movs	r1, #8
 8010946:	2022      	movs	r0, #34	; 0x22
 8010948:	f7f9 fc0e 	bl	800a168 <pbuf_alloc>
 801094c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801094e:	69fb      	ldr	r3, [r7, #28]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d102      	bne.n	801095a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010954:	f04f 33ff 	mov.w	r3, #4294967295
 8010958:	e057      	b.n	8010a0a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	891b      	ldrh	r3, [r3, #8]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d006      	beq.n	8010970 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010962:	68b9      	ldr	r1, [r7, #8]
 8010964:	69f8      	ldr	r0, [r7, #28]
 8010966:	f7f9 fffb 	bl	800a960 <pbuf_chain>
 801096a:	e001      	b.n	8010970 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010970:	69fb      	ldr	r3, [r7, #28]
 8010972:	895b      	ldrh	r3, [r3, #10]
 8010974:	2b07      	cmp	r3, #7
 8010976:	d806      	bhi.n	8010986 <udp_sendto_if_src+0x11e>
 8010978:	4b26      	ldr	r3, [pc, #152]	; (8010a14 <udp_sendto_if_src+0x1ac>)
 801097a:	f240 320d 	movw	r2, #781	; 0x30d
 801097e:	492c      	ldr	r1, [pc, #176]	; (8010a30 <udp_sendto_if_src+0x1c8>)
 8010980:	4826      	ldr	r0, [pc, #152]	; (8010a1c <udp_sendto_if_src+0x1b4>)
 8010982:	f002 fd49 	bl	8013418 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	8a5b      	ldrh	r3, [r3, #18]
 8010990:	4618      	mov	r0, r3
 8010992:	f7f8 fc19 	bl	80091c8 <lwip_htons>
 8010996:	4603      	mov	r3, r0
 8010998:	461a      	mov	r2, r3
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801099e:	887b      	ldrh	r3, [r7, #2]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7f8 fc11 	bl	80091c8 <lwip_htons>
 80109a6:	4603      	mov	r3, r0
 80109a8:	461a      	mov	r2, r3
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	2200      	movs	r2, #0
 80109b2:	719a      	strb	r2, [r3, #6]
 80109b4:	2200      	movs	r2, #0
 80109b6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	891b      	ldrh	r3, [r3, #8]
 80109bc:	4618      	mov	r0, r3
 80109be:	f7f8 fc03 	bl	80091c8 <lwip_htons>
 80109c2:	4603      	mov	r3, r0
 80109c4:	461a      	mov	r2, r3
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80109ca:	2311      	movs	r3, #17
 80109cc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	7adb      	ldrb	r3, [r3, #11]
 80109d2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	7a9b      	ldrb	r3, [r3, #10]
 80109d8:	7cb9      	ldrb	r1, [r7, #18]
 80109da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109dc:	9202      	str	r2, [sp, #8]
 80109de:	7cfa      	ldrb	r2, [r7, #19]
 80109e0:	9201      	str	r2, [sp, #4]
 80109e2:	9300      	str	r3, [sp, #0]
 80109e4:	460b      	mov	r3, r1
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80109ea:	69f8      	ldr	r0, [r7, #28]
 80109ec:	f001 fcac 	bl	8012348 <ip4_output_if_src>
 80109f0:	4603      	mov	r3, r0
 80109f2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80109f4:	69fa      	ldr	r2, [r7, #28]
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d004      	beq.n	8010a06 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80109fc:	69f8      	ldr	r0, [r7, #28]
 80109fe:	f7f9 fe97 	bl	800a730 <pbuf_free>
    q = NULL;
 8010a02:	2300      	movs	r3, #0
 8010a04:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010a06:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3720      	adds	r7, #32
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop
 8010a14:	08016840 	.word	0x08016840
 8010a18:	08016a2c 	.word	0x08016a2c
 8010a1c:	08016894 	.word	0x08016894
 8010a20:	08016a4c 	.word	0x08016a4c
 8010a24:	08016a6c 	.word	0x08016a6c
 8010a28:	08016a90 	.word	0x08016a90
 8010a2c:	08016ab4 	.word	0x08016ab4
 8010a30:	08016ad8 	.word	0x08016ad8

08010a34 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b086      	sub	sp, #24
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	4613      	mov	r3, r2
 8010a40:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d101      	bne.n	8010a4c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010a48:	4b39      	ldr	r3, [pc, #228]	; (8010b30 <udp_bind+0xfc>)
 8010a4a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d109      	bne.n	8010a66 <udp_bind+0x32>
 8010a52:	4b38      	ldr	r3, [pc, #224]	; (8010b34 <udp_bind+0x100>)
 8010a54:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010a58:	4937      	ldr	r1, [pc, #220]	; (8010b38 <udp_bind+0x104>)
 8010a5a:	4838      	ldr	r0, [pc, #224]	; (8010b3c <udp_bind+0x108>)
 8010a5c:	f002 fcdc 	bl	8013418 <iprintf>
 8010a60:	f06f 030f 	mvn.w	r3, #15
 8010a64:	e060      	b.n	8010b28 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010a66:	2300      	movs	r3, #0
 8010a68:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010a6a:	4b35      	ldr	r3, [pc, #212]	; (8010b40 <udp_bind+0x10c>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	617b      	str	r3, [r7, #20]
 8010a70:	e009      	b.n	8010a86 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010a72:	68fa      	ldr	r2, [r7, #12]
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d102      	bne.n	8010a80 <udp_bind+0x4c>
      rebind = 1;
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	74fb      	strb	r3, [r7, #19]
      break;
 8010a7e:	e005      	b.n	8010a8c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	617b      	str	r3, [r7, #20]
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d1f2      	bne.n	8010a72 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010a8c:	88fb      	ldrh	r3, [r7, #6]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d109      	bne.n	8010aa6 <udp_bind+0x72>
    port = udp_new_port();
 8010a92:	f7ff fc35 	bl	8010300 <udp_new_port>
 8010a96:	4603      	mov	r3, r0
 8010a98:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010a9a:	88fb      	ldrh	r3, [r7, #6]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d12c      	bne.n	8010afa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010aa0:	f06f 0307 	mvn.w	r3, #7
 8010aa4:	e040      	b.n	8010b28 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010aa6:	4b26      	ldr	r3, [pc, #152]	; (8010b40 <udp_bind+0x10c>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	617b      	str	r3, [r7, #20]
 8010aac:	e022      	b.n	8010af4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010aae:	68fa      	ldr	r2, [r7, #12]
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d01b      	beq.n	8010aee <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	8a5b      	ldrh	r3, [r3, #18]
 8010aba:	88fa      	ldrh	r2, [r7, #6]
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d116      	bne.n	8010aee <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	681a      	ldr	r2, [r3, #0]
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d00d      	beq.n	8010ae8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d00a      	beq.n	8010ae8 <udp_bind+0xb4>
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d006      	beq.n	8010ae8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010ada:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d003      	beq.n	8010ae8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d102      	bne.n	8010aee <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010ae8:	f06f 0307 	mvn.w	r3, #7
 8010aec:	e01c      	b.n	8010b28 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	68db      	ldr	r3, [r3, #12]
 8010af2:	617b      	str	r3, [r7, #20]
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d1d9      	bne.n	8010aae <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d002      	beq.n	8010b06 <udp_bind+0xd2>
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	e000      	b.n	8010b08 <udp_bind+0xd4>
 8010b06:	2300      	movs	r3, #0
 8010b08:	68fa      	ldr	r2, [r7, #12]
 8010b0a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	88fa      	ldrh	r2, [r7, #6]
 8010b10:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010b12:	7cfb      	ldrb	r3, [r7, #19]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d106      	bne.n	8010b26 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010b18:	4b09      	ldr	r3, [pc, #36]	; (8010b40 <udp_bind+0x10c>)
 8010b1a:	681a      	ldr	r2, [r3, #0]
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010b20:	4a07      	ldr	r2, [pc, #28]	; (8010b40 <udp_bind+0x10c>)
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010b26:	2300      	movs	r3, #0
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3718      	adds	r7, #24
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}
 8010b30:	08017358 	.word	0x08017358
 8010b34:	08016840 	.word	0x08016840
 8010b38:	08016b08 	.word	0x08016b08
 8010b3c:	08016894 	.word	0x08016894
 8010b40:	20008eac 	.word	0x20008eac

08010b44 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b086      	sub	sp, #24
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	4613      	mov	r3, r2
 8010b50:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d109      	bne.n	8010b6c <udp_connect+0x28>
 8010b58:	4b2c      	ldr	r3, [pc, #176]	; (8010c0c <udp_connect+0xc8>)
 8010b5a:	f240 4235 	movw	r2, #1077	; 0x435
 8010b5e:	492c      	ldr	r1, [pc, #176]	; (8010c10 <udp_connect+0xcc>)
 8010b60:	482c      	ldr	r0, [pc, #176]	; (8010c14 <udp_connect+0xd0>)
 8010b62:	f002 fc59 	bl	8013418 <iprintf>
 8010b66:	f06f 030f 	mvn.w	r3, #15
 8010b6a:	e04b      	b.n	8010c04 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d109      	bne.n	8010b86 <udp_connect+0x42>
 8010b72:	4b26      	ldr	r3, [pc, #152]	; (8010c0c <udp_connect+0xc8>)
 8010b74:	f240 4236 	movw	r2, #1078	; 0x436
 8010b78:	4927      	ldr	r1, [pc, #156]	; (8010c18 <udp_connect+0xd4>)
 8010b7a:	4826      	ldr	r0, [pc, #152]	; (8010c14 <udp_connect+0xd0>)
 8010b7c:	f002 fc4c 	bl	8013418 <iprintf>
 8010b80:	f06f 030f 	mvn.w	r3, #15
 8010b84:	e03e      	b.n	8010c04 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	8a5b      	ldrh	r3, [r3, #18]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d10f      	bne.n	8010bae <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010b8e:	68f9      	ldr	r1, [r7, #12]
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	8a5b      	ldrh	r3, [r3, #18]
 8010b94:	461a      	mov	r2, r3
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f7ff ff4c 	bl	8010a34 <udp_bind>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010ba0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d002      	beq.n	8010bae <udp_connect+0x6a>
      return err;
 8010ba8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010bac:	e02a      	b.n	8010c04 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d002      	beq.n	8010bba <udp_connect+0x76>
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	e000      	b.n	8010bbc <udp_connect+0x78>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	68fa      	ldr	r2, [r7, #12]
 8010bbe:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	88fa      	ldrh	r2, [r7, #6]
 8010bc4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	7c1b      	ldrb	r3, [r3, #16]
 8010bca:	f043 0304 	orr.w	r3, r3, #4
 8010bce:	b2da      	uxtb	r2, r3
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010bd4:	4b11      	ldr	r3, [pc, #68]	; (8010c1c <udp_connect+0xd8>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	617b      	str	r3, [r7, #20]
 8010bda:	e008      	b.n	8010bee <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010bdc:	68fa      	ldr	r2, [r7, #12]
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d101      	bne.n	8010be8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010be4:	2300      	movs	r3, #0
 8010be6:	e00d      	b.n	8010c04 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	617b      	str	r3, [r7, #20]
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d1f3      	bne.n	8010bdc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010bf4:	4b09      	ldr	r3, [pc, #36]	; (8010c1c <udp_connect+0xd8>)
 8010bf6:	681a      	ldr	r2, [r3, #0]
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010bfc:	4a07      	ldr	r2, [pc, #28]	; (8010c1c <udp_connect+0xd8>)
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010c02:	2300      	movs	r3, #0
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	3718      	adds	r7, #24
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}
 8010c0c:	08016840 	.word	0x08016840
 8010c10:	08016b20 	.word	0x08016b20
 8010c14:	08016894 	.word	0x08016894
 8010c18:	08016b3c 	.word	0x08016b3c
 8010c1c:	20008eac 	.word	0x20008eac

08010c20 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b082      	sub	sp, #8
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d107      	bne.n	8010c3e <udp_disconnect+0x1e>
 8010c2e:	4b0d      	ldr	r3, [pc, #52]	; (8010c64 <udp_disconnect+0x44>)
 8010c30:	f240 426a 	movw	r2, #1130	; 0x46a
 8010c34:	490c      	ldr	r1, [pc, #48]	; (8010c68 <udp_disconnect+0x48>)
 8010c36:	480d      	ldr	r0, [pc, #52]	; (8010c6c <udp_disconnect+0x4c>)
 8010c38:	f002 fbee 	bl	8013418 <iprintf>
 8010c3c:	e00f      	b.n	8010c5e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2200      	movs	r2, #0
 8010c42:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2200      	movs	r2, #0
 8010c48:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	7c1b      	ldrb	r3, [r3, #16]
 8010c54:	f023 0304 	bic.w	r3, r3, #4
 8010c58:	b2da      	uxtb	r2, r3
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	741a      	strb	r2, [r3, #16]
}
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	08016840 	.word	0x08016840
 8010c68:	08016b58 	.word	0x08016b58
 8010c6c:	08016894 	.word	0x08016894

08010c70 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	60f8      	str	r0, [r7, #12]
 8010c78:	60b9      	str	r1, [r7, #8]
 8010c7a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d107      	bne.n	8010c92 <udp_recv+0x22>
 8010c82:	4b08      	ldr	r3, [pc, #32]	; (8010ca4 <udp_recv+0x34>)
 8010c84:	f240 428a 	movw	r2, #1162	; 0x48a
 8010c88:	4907      	ldr	r1, [pc, #28]	; (8010ca8 <udp_recv+0x38>)
 8010c8a:	4808      	ldr	r0, [pc, #32]	; (8010cac <udp_recv+0x3c>)
 8010c8c:	f002 fbc4 	bl	8013418 <iprintf>
 8010c90:	e005      	b.n	8010c9e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	68ba      	ldr	r2, [r7, #8]
 8010c96:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	61da      	str	r2, [r3, #28]
}
 8010c9e:	3710      	adds	r7, #16
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}
 8010ca4:	08016840 	.word	0x08016840
 8010ca8:	08016b74 	.word	0x08016b74
 8010cac:	08016894 	.word	0x08016894

08010cb0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b084      	sub	sp, #16
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d107      	bne.n	8010cce <udp_remove+0x1e>
 8010cbe:	4b19      	ldr	r3, [pc, #100]	; (8010d24 <udp_remove+0x74>)
 8010cc0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8010cc4:	4918      	ldr	r1, [pc, #96]	; (8010d28 <udp_remove+0x78>)
 8010cc6:	4819      	ldr	r0, [pc, #100]	; (8010d2c <udp_remove+0x7c>)
 8010cc8:	f002 fba6 	bl	8013418 <iprintf>
 8010ccc:	e026      	b.n	8010d1c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010cce:	4b18      	ldr	r3, [pc, #96]	; (8010d30 <udp_remove+0x80>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d105      	bne.n	8010ce4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010cd8:	4b15      	ldr	r3, [pc, #84]	; (8010d30 <udp_remove+0x80>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	68db      	ldr	r3, [r3, #12]
 8010cde:	4a14      	ldr	r2, [pc, #80]	; (8010d30 <udp_remove+0x80>)
 8010ce0:	6013      	str	r3, [r2, #0]
 8010ce2:	e017      	b.n	8010d14 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010ce4:	4b12      	ldr	r3, [pc, #72]	; (8010d30 <udp_remove+0x80>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	60fb      	str	r3, [r7, #12]
 8010cea:	e010      	b.n	8010d0e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d009      	beq.n	8010d08 <udp_remove+0x58>
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d104      	bne.n	8010d08 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	68da      	ldr	r2, [r3, #12]
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	60da      	str	r2, [r3, #12]
        break;
 8010d06:	e005      	b.n	8010d14 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	68db      	ldr	r3, [r3, #12]
 8010d0c:	60fb      	str	r3, [r7, #12]
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d1eb      	bne.n	8010cec <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010d14:	6879      	ldr	r1, [r7, #4]
 8010d16:	2000      	movs	r0, #0
 8010d18:	f7f8 fef8 	bl	8009b0c <memp_free>
}
 8010d1c:	3710      	adds	r7, #16
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
 8010d22:	bf00      	nop
 8010d24:	08016840 	.word	0x08016840
 8010d28:	08016b8c 	.word	0x08016b8c
 8010d2c:	08016894 	.word	0x08016894
 8010d30:	20008eac 	.word	0x20008eac

08010d34 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010d3a:	2000      	movs	r0, #0
 8010d3c:	f7f8 fe9a 	bl	8009a74 <memp_malloc>
 8010d40:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d007      	beq.n	8010d58 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010d48:	2220      	movs	r2, #32
 8010d4a:	2100      	movs	r1, #0
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f002 fb5b 	bl	8013408 <memset>
    pcb->ttl = UDP_TTL;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	22ff      	movs	r2, #255	; 0xff
 8010d56:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010d58:	687b      	ldr	r3, [r7, #4]
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3708      	adds	r7, #8
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
	...

08010d64 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b085      	sub	sp, #20
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d01e      	beq.n	8010db2 <udp_netif_ip_addr_changed+0x4e>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d01a      	beq.n	8010db2 <udp_netif_ip_addr_changed+0x4e>
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d017      	beq.n	8010db2 <udp_netif_ip_addr_changed+0x4e>
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d013      	beq.n	8010db2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010d8a:	4b0d      	ldr	r3, [pc, #52]	; (8010dc0 <udp_netif_ip_addr_changed+0x5c>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	60fb      	str	r3, [r7, #12]
 8010d90:	e00c      	b.n	8010dac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d103      	bne.n	8010da6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	681a      	ldr	r2, [r3, #0]
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	68db      	ldr	r3, [r3, #12]
 8010daa:	60fb      	str	r3, [r7, #12]
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d1ef      	bne.n	8010d92 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010db2:	bf00      	nop
 8010db4:	3714      	adds	r7, #20
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop
 8010dc0:	20008eac 	.word	0x20008eac

08010dc4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010dcc:	4915      	ldr	r1, [pc, #84]	; (8010e24 <etharp_free_entry+0x60>)
 8010dce:	687a      	ldr	r2, [r7, #4]
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	005b      	lsls	r3, r3, #1
 8010dd4:	4413      	add	r3, r2
 8010dd6:	00db      	lsls	r3, r3, #3
 8010dd8:	440b      	add	r3, r1
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d013      	beq.n	8010e08 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010de0:	4910      	ldr	r1, [pc, #64]	; (8010e24 <etharp_free_entry+0x60>)
 8010de2:	687a      	ldr	r2, [r7, #4]
 8010de4:	4613      	mov	r3, r2
 8010de6:	005b      	lsls	r3, r3, #1
 8010de8:	4413      	add	r3, r2
 8010dea:	00db      	lsls	r3, r3, #3
 8010dec:	440b      	add	r3, r1
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7f9 fc9d 	bl	800a730 <pbuf_free>
    arp_table[i].q = NULL;
 8010df6:	490b      	ldr	r1, [pc, #44]	; (8010e24 <etharp_free_entry+0x60>)
 8010df8:	687a      	ldr	r2, [r7, #4]
 8010dfa:	4613      	mov	r3, r2
 8010dfc:	005b      	lsls	r3, r3, #1
 8010dfe:	4413      	add	r3, r2
 8010e00:	00db      	lsls	r3, r3, #3
 8010e02:	440b      	add	r3, r1
 8010e04:	2200      	movs	r2, #0
 8010e06:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010e08:	4906      	ldr	r1, [pc, #24]	; (8010e24 <etharp_free_entry+0x60>)
 8010e0a:	687a      	ldr	r2, [r7, #4]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	005b      	lsls	r3, r3, #1
 8010e10:	4413      	add	r3, r2
 8010e12:	00db      	lsls	r3, r3, #3
 8010e14:	440b      	add	r3, r1
 8010e16:	3314      	adds	r3, #20
 8010e18:	2200      	movs	r2, #0
 8010e1a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010e1c:	bf00      	nop
 8010e1e:	3708      	adds	r7, #8
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd80      	pop	{r7, pc}
 8010e24:	20008eb0 	.word	0x20008eb0

08010e28 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e2e:	2300      	movs	r3, #0
 8010e30:	607b      	str	r3, [r7, #4]
 8010e32:	e096      	b.n	8010f62 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010e34:	494f      	ldr	r1, [pc, #316]	; (8010f74 <etharp_tmr+0x14c>)
 8010e36:	687a      	ldr	r2, [r7, #4]
 8010e38:	4613      	mov	r3, r2
 8010e3a:	005b      	lsls	r3, r3, #1
 8010e3c:	4413      	add	r3, r2
 8010e3e:	00db      	lsls	r3, r3, #3
 8010e40:	440b      	add	r3, r1
 8010e42:	3314      	adds	r3, #20
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010e48:	78fb      	ldrb	r3, [r7, #3]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f000 8086 	beq.w	8010f5c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010e50:	4948      	ldr	r1, [pc, #288]	; (8010f74 <etharp_tmr+0x14c>)
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	4613      	mov	r3, r2
 8010e56:	005b      	lsls	r3, r3, #1
 8010e58:	4413      	add	r3, r2
 8010e5a:	00db      	lsls	r3, r3, #3
 8010e5c:	440b      	add	r3, r1
 8010e5e:	3312      	adds	r3, #18
 8010e60:	881b      	ldrh	r3, [r3, #0]
 8010e62:	3301      	adds	r3, #1
 8010e64:	b298      	uxth	r0, r3
 8010e66:	4943      	ldr	r1, [pc, #268]	; (8010f74 <etharp_tmr+0x14c>)
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	4613      	mov	r3, r2
 8010e6c:	005b      	lsls	r3, r3, #1
 8010e6e:	4413      	add	r3, r2
 8010e70:	00db      	lsls	r3, r3, #3
 8010e72:	440b      	add	r3, r1
 8010e74:	3312      	adds	r3, #18
 8010e76:	4602      	mov	r2, r0
 8010e78:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010e7a:	493e      	ldr	r1, [pc, #248]	; (8010f74 <etharp_tmr+0x14c>)
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	4613      	mov	r3, r2
 8010e80:	005b      	lsls	r3, r3, #1
 8010e82:	4413      	add	r3, r2
 8010e84:	00db      	lsls	r3, r3, #3
 8010e86:	440b      	add	r3, r1
 8010e88:	3312      	adds	r3, #18
 8010e8a:	881b      	ldrh	r3, [r3, #0]
 8010e8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010e90:	d215      	bcs.n	8010ebe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010e92:	4938      	ldr	r1, [pc, #224]	; (8010f74 <etharp_tmr+0x14c>)
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	4613      	mov	r3, r2
 8010e98:	005b      	lsls	r3, r3, #1
 8010e9a:	4413      	add	r3, r2
 8010e9c:	00db      	lsls	r3, r3, #3
 8010e9e:	440b      	add	r3, r1
 8010ea0:	3314      	adds	r3, #20
 8010ea2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	d10e      	bne.n	8010ec6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010ea8:	4932      	ldr	r1, [pc, #200]	; (8010f74 <etharp_tmr+0x14c>)
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	4613      	mov	r3, r2
 8010eae:	005b      	lsls	r3, r3, #1
 8010eb0:	4413      	add	r3, r2
 8010eb2:	00db      	lsls	r3, r3, #3
 8010eb4:	440b      	add	r3, r1
 8010eb6:	3312      	adds	r3, #18
 8010eb8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010eba:	2b04      	cmp	r3, #4
 8010ebc:	d903      	bls.n	8010ec6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f7ff ff80 	bl	8010dc4 <etharp_free_entry>
 8010ec4:	e04a      	b.n	8010f5c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010ec6:	492b      	ldr	r1, [pc, #172]	; (8010f74 <etharp_tmr+0x14c>)
 8010ec8:	687a      	ldr	r2, [r7, #4]
 8010eca:	4613      	mov	r3, r2
 8010ecc:	005b      	lsls	r3, r3, #1
 8010ece:	4413      	add	r3, r2
 8010ed0:	00db      	lsls	r3, r3, #3
 8010ed2:	440b      	add	r3, r1
 8010ed4:	3314      	adds	r3, #20
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	2b03      	cmp	r3, #3
 8010eda:	d10a      	bne.n	8010ef2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010edc:	4925      	ldr	r1, [pc, #148]	; (8010f74 <etharp_tmr+0x14c>)
 8010ede:	687a      	ldr	r2, [r7, #4]
 8010ee0:	4613      	mov	r3, r2
 8010ee2:	005b      	lsls	r3, r3, #1
 8010ee4:	4413      	add	r3, r2
 8010ee6:	00db      	lsls	r3, r3, #3
 8010ee8:	440b      	add	r3, r1
 8010eea:	3314      	adds	r3, #20
 8010eec:	2204      	movs	r2, #4
 8010eee:	701a      	strb	r2, [r3, #0]
 8010ef0:	e034      	b.n	8010f5c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010ef2:	4920      	ldr	r1, [pc, #128]	; (8010f74 <etharp_tmr+0x14c>)
 8010ef4:	687a      	ldr	r2, [r7, #4]
 8010ef6:	4613      	mov	r3, r2
 8010ef8:	005b      	lsls	r3, r3, #1
 8010efa:	4413      	add	r3, r2
 8010efc:	00db      	lsls	r3, r3, #3
 8010efe:	440b      	add	r3, r1
 8010f00:	3314      	adds	r3, #20
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	2b04      	cmp	r3, #4
 8010f06:	d10a      	bne.n	8010f1e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010f08:	491a      	ldr	r1, [pc, #104]	; (8010f74 <etharp_tmr+0x14c>)
 8010f0a:	687a      	ldr	r2, [r7, #4]
 8010f0c:	4613      	mov	r3, r2
 8010f0e:	005b      	lsls	r3, r3, #1
 8010f10:	4413      	add	r3, r2
 8010f12:	00db      	lsls	r3, r3, #3
 8010f14:	440b      	add	r3, r1
 8010f16:	3314      	adds	r3, #20
 8010f18:	2202      	movs	r2, #2
 8010f1a:	701a      	strb	r2, [r3, #0]
 8010f1c:	e01e      	b.n	8010f5c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010f1e:	4915      	ldr	r1, [pc, #84]	; (8010f74 <etharp_tmr+0x14c>)
 8010f20:	687a      	ldr	r2, [r7, #4]
 8010f22:	4613      	mov	r3, r2
 8010f24:	005b      	lsls	r3, r3, #1
 8010f26:	4413      	add	r3, r2
 8010f28:	00db      	lsls	r3, r3, #3
 8010f2a:	440b      	add	r3, r1
 8010f2c:	3314      	adds	r3, #20
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	2b01      	cmp	r3, #1
 8010f32:	d113      	bne.n	8010f5c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010f34:	490f      	ldr	r1, [pc, #60]	; (8010f74 <etharp_tmr+0x14c>)
 8010f36:	687a      	ldr	r2, [r7, #4]
 8010f38:	4613      	mov	r3, r2
 8010f3a:	005b      	lsls	r3, r3, #1
 8010f3c:	4413      	add	r3, r2
 8010f3e:	00db      	lsls	r3, r3, #3
 8010f40:	440b      	add	r3, r1
 8010f42:	3308      	adds	r3, #8
 8010f44:	6818      	ldr	r0, [r3, #0]
 8010f46:	687a      	ldr	r2, [r7, #4]
 8010f48:	4613      	mov	r3, r2
 8010f4a:	005b      	lsls	r3, r3, #1
 8010f4c:	4413      	add	r3, r2
 8010f4e:	00db      	lsls	r3, r3, #3
 8010f50:	4a08      	ldr	r2, [pc, #32]	; (8010f74 <etharp_tmr+0x14c>)
 8010f52:	4413      	add	r3, r2
 8010f54:	3304      	adds	r3, #4
 8010f56:	4619      	mov	r1, r3
 8010f58:	f000 fe6e 	bl	8011c38 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	3301      	adds	r3, #1
 8010f60:	607b      	str	r3, [r7, #4]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2b09      	cmp	r3, #9
 8010f66:	f77f af65 	ble.w	8010e34 <etharp_tmr+0xc>
      }
    }
  }
}
 8010f6a:	bf00      	nop
 8010f6c:	bf00      	nop
 8010f6e:	3708      	adds	r7, #8
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	20008eb0 	.word	0x20008eb0

08010f78 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b08a      	sub	sp, #40	; 0x28
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	60f8      	str	r0, [r7, #12]
 8010f80:	460b      	mov	r3, r1
 8010f82:	607a      	str	r2, [r7, #4]
 8010f84:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010f86:	230a      	movs	r3, #10
 8010f88:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010f8a:	230a      	movs	r3, #10
 8010f8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010f8e:	230a      	movs	r3, #10
 8010f90:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010f92:	2300      	movs	r3, #0
 8010f94:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010f96:	230a      	movs	r3, #10
 8010f98:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	83bb      	strh	r3, [r7, #28]
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	837b      	strh	r3, [r7, #26]
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	843b      	strh	r3, [r7, #32]
 8010faa:	e0ae      	b.n	801110a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010fac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fb0:	49a6      	ldr	r1, [pc, #664]	; (801124c <etharp_find_entry+0x2d4>)
 8010fb2:	4613      	mov	r3, r2
 8010fb4:	005b      	lsls	r3, r3, #1
 8010fb6:	4413      	add	r3, r2
 8010fb8:	00db      	lsls	r3, r3, #3
 8010fba:	440b      	add	r3, r1
 8010fbc:	3314      	adds	r3, #20
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010fc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010fc6:	2b0a      	cmp	r3, #10
 8010fc8:	d105      	bne.n	8010fd6 <etharp_find_entry+0x5e>
 8010fca:	7dfb      	ldrb	r3, [r7, #23]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d102      	bne.n	8010fd6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010fd0:	8c3b      	ldrh	r3, [r7, #32]
 8010fd2:	847b      	strh	r3, [r7, #34]	; 0x22
 8010fd4:	e095      	b.n	8011102 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010fd6:	7dfb      	ldrb	r3, [r7, #23]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	f000 8092 	beq.w	8011102 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010fde:	7dfb      	ldrb	r3, [r7, #23]
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d009      	beq.n	8010ff8 <etharp_find_entry+0x80>
 8010fe4:	7dfb      	ldrb	r3, [r7, #23]
 8010fe6:	2b01      	cmp	r3, #1
 8010fe8:	d806      	bhi.n	8010ff8 <etharp_find_entry+0x80>
 8010fea:	4b99      	ldr	r3, [pc, #612]	; (8011250 <etharp_find_entry+0x2d8>)
 8010fec:	f240 1223 	movw	r2, #291	; 0x123
 8010ff0:	4998      	ldr	r1, [pc, #608]	; (8011254 <etharp_find_entry+0x2dc>)
 8010ff2:	4899      	ldr	r0, [pc, #612]	; (8011258 <etharp_find_entry+0x2e0>)
 8010ff4:	f002 fa10 	bl	8013418 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d020      	beq.n	8011040 <etharp_find_entry+0xc8>
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	6819      	ldr	r1, [r3, #0]
 8011002:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011006:	4891      	ldr	r0, [pc, #580]	; (801124c <etharp_find_entry+0x2d4>)
 8011008:	4613      	mov	r3, r2
 801100a:	005b      	lsls	r3, r3, #1
 801100c:	4413      	add	r3, r2
 801100e:	00db      	lsls	r3, r3, #3
 8011010:	4403      	add	r3, r0
 8011012:	3304      	adds	r3, #4
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	4299      	cmp	r1, r3
 8011018:	d112      	bne.n	8011040 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d00c      	beq.n	801103a <etharp_find_entry+0xc2>
 8011020:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011024:	4989      	ldr	r1, [pc, #548]	; (801124c <etharp_find_entry+0x2d4>)
 8011026:	4613      	mov	r3, r2
 8011028:	005b      	lsls	r3, r3, #1
 801102a:	4413      	add	r3, r2
 801102c:	00db      	lsls	r3, r3, #3
 801102e:	440b      	add	r3, r1
 8011030:	3308      	adds	r3, #8
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	687a      	ldr	r2, [r7, #4]
 8011036:	429a      	cmp	r2, r3
 8011038:	d102      	bne.n	8011040 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801103a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801103e:	e100      	b.n	8011242 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011040:	7dfb      	ldrb	r3, [r7, #23]
 8011042:	2b01      	cmp	r3, #1
 8011044:	d140      	bne.n	80110c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011046:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801104a:	4980      	ldr	r1, [pc, #512]	; (801124c <etharp_find_entry+0x2d4>)
 801104c:	4613      	mov	r3, r2
 801104e:	005b      	lsls	r3, r3, #1
 8011050:	4413      	add	r3, r2
 8011052:	00db      	lsls	r3, r3, #3
 8011054:	440b      	add	r3, r1
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d01a      	beq.n	8011092 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801105c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011060:	497a      	ldr	r1, [pc, #488]	; (801124c <etharp_find_entry+0x2d4>)
 8011062:	4613      	mov	r3, r2
 8011064:	005b      	lsls	r3, r3, #1
 8011066:	4413      	add	r3, r2
 8011068:	00db      	lsls	r3, r3, #3
 801106a:	440b      	add	r3, r1
 801106c:	3312      	adds	r3, #18
 801106e:	881b      	ldrh	r3, [r3, #0]
 8011070:	8bba      	ldrh	r2, [r7, #28]
 8011072:	429a      	cmp	r2, r3
 8011074:	d845      	bhi.n	8011102 <etharp_find_entry+0x18a>
            old_queue = i;
 8011076:	8c3b      	ldrh	r3, [r7, #32]
 8011078:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801107a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801107e:	4973      	ldr	r1, [pc, #460]	; (801124c <etharp_find_entry+0x2d4>)
 8011080:	4613      	mov	r3, r2
 8011082:	005b      	lsls	r3, r3, #1
 8011084:	4413      	add	r3, r2
 8011086:	00db      	lsls	r3, r3, #3
 8011088:	440b      	add	r3, r1
 801108a:	3312      	adds	r3, #18
 801108c:	881b      	ldrh	r3, [r3, #0]
 801108e:	83bb      	strh	r3, [r7, #28]
 8011090:	e037      	b.n	8011102 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011092:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011096:	496d      	ldr	r1, [pc, #436]	; (801124c <etharp_find_entry+0x2d4>)
 8011098:	4613      	mov	r3, r2
 801109a:	005b      	lsls	r3, r3, #1
 801109c:	4413      	add	r3, r2
 801109e:	00db      	lsls	r3, r3, #3
 80110a0:	440b      	add	r3, r1
 80110a2:	3312      	adds	r3, #18
 80110a4:	881b      	ldrh	r3, [r3, #0]
 80110a6:	8b7a      	ldrh	r2, [r7, #26]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d82a      	bhi.n	8011102 <etharp_find_entry+0x18a>
            old_pending = i;
 80110ac:	8c3b      	ldrh	r3, [r7, #32]
 80110ae:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80110b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110b4:	4965      	ldr	r1, [pc, #404]	; (801124c <etharp_find_entry+0x2d4>)
 80110b6:	4613      	mov	r3, r2
 80110b8:	005b      	lsls	r3, r3, #1
 80110ba:	4413      	add	r3, r2
 80110bc:	00db      	lsls	r3, r3, #3
 80110be:	440b      	add	r3, r1
 80110c0:	3312      	adds	r3, #18
 80110c2:	881b      	ldrh	r3, [r3, #0]
 80110c4:	837b      	strh	r3, [r7, #26]
 80110c6:	e01c      	b.n	8011102 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80110c8:	7dfb      	ldrb	r3, [r7, #23]
 80110ca:	2b01      	cmp	r3, #1
 80110cc:	d919      	bls.n	8011102 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80110ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110d2:	495e      	ldr	r1, [pc, #376]	; (801124c <etharp_find_entry+0x2d4>)
 80110d4:	4613      	mov	r3, r2
 80110d6:	005b      	lsls	r3, r3, #1
 80110d8:	4413      	add	r3, r2
 80110da:	00db      	lsls	r3, r3, #3
 80110dc:	440b      	add	r3, r1
 80110de:	3312      	adds	r3, #18
 80110e0:	881b      	ldrh	r3, [r3, #0]
 80110e2:	8b3a      	ldrh	r2, [r7, #24]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d80c      	bhi.n	8011102 <etharp_find_entry+0x18a>
            old_stable = i;
 80110e8:	8c3b      	ldrh	r3, [r7, #32]
 80110ea:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80110ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110f0:	4956      	ldr	r1, [pc, #344]	; (801124c <etharp_find_entry+0x2d4>)
 80110f2:	4613      	mov	r3, r2
 80110f4:	005b      	lsls	r3, r3, #1
 80110f6:	4413      	add	r3, r2
 80110f8:	00db      	lsls	r3, r3, #3
 80110fa:	440b      	add	r3, r1
 80110fc:	3312      	adds	r3, #18
 80110fe:	881b      	ldrh	r3, [r3, #0]
 8011100:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011102:	8c3b      	ldrh	r3, [r7, #32]
 8011104:	3301      	adds	r3, #1
 8011106:	b29b      	uxth	r3, r3
 8011108:	843b      	strh	r3, [r7, #32]
 801110a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801110e:	2b09      	cmp	r3, #9
 8011110:	f77f af4c 	ble.w	8010fac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011114:	7afb      	ldrb	r3, [r7, #11]
 8011116:	f003 0302 	and.w	r3, r3, #2
 801111a:	2b00      	cmp	r3, #0
 801111c:	d108      	bne.n	8011130 <etharp_find_entry+0x1b8>
 801111e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011122:	2b0a      	cmp	r3, #10
 8011124:	d107      	bne.n	8011136 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011126:	7afb      	ldrb	r3, [r7, #11]
 8011128:	f003 0301 	and.w	r3, r3, #1
 801112c:	2b00      	cmp	r3, #0
 801112e:	d102      	bne.n	8011136 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011130:	f04f 33ff 	mov.w	r3, #4294967295
 8011134:	e085      	b.n	8011242 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011136:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801113a:	2b09      	cmp	r3, #9
 801113c:	dc02      	bgt.n	8011144 <etharp_find_entry+0x1cc>
    i = empty;
 801113e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011140:	843b      	strh	r3, [r7, #32]
 8011142:	e039      	b.n	80111b8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011144:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011148:	2b09      	cmp	r3, #9
 801114a:	dc14      	bgt.n	8011176 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801114c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801114e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011150:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011154:	493d      	ldr	r1, [pc, #244]	; (801124c <etharp_find_entry+0x2d4>)
 8011156:	4613      	mov	r3, r2
 8011158:	005b      	lsls	r3, r3, #1
 801115a:	4413      	add	r3, r2
 801115c:	00db      	lsls	r3, r3, #3
 801115e:	440b      	add	r3, r1
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d018      	beq.n	8011198 <etharp_find_entry+0x220>
 8011166:	4b3a      	ldr	r3, [pc, #232]	; (8011250 <etharp_find_entry+0x2d8>)
 8011168:	f240 126d 	movw	r2, #365	; 0x16d
 801116c:	493b      	ldr	r1, [pc, #236]	; (801125c <etharp_find_entry+0x2e4>)
 801116e:	483a      	ldr	r0, [pc, #232]	; (8011258 <etharp_find_entry+0x2e0>)
 8011170:	f002 f952 	bl	8013418 <iprintf>
 8011174:	e010      	b.n	8011198 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011176:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801117a:	2b09      	cmp	r3, #9
 801117c:	dc02      	bgt.n	8011184 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801117e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011180:	843b      	strh	r3, [r7, #32]
 8011182:	e009      	b.n	8011198 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011184:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011188:	2b09      	cmp	r3, #9
 801118a:	dc02      	bgt.n	8011192 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801118c:	8bfb      	ldrh	r3, [r7, #30]
 801118e:	843b      	strh	r3, [r7, #32]
 8011190:	e002      	b.n	8011198 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011192:	f04f 33ff 	mov.w	r3, #4294967295
 8011196:	e054      	b.n	8011242 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011198:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801119c:	2b09      	cmp	r3, #9
 801119e:	dd06      	ble.n	80111ae <etharp_find_entry+0x236>
 80111a0:	4b2b      	ldr	r3, [pc, #172]	; (8011250 <etharp_find_entry+0x2d8>)
 80111a2:	f240 127f 	movw	r2, #383	; 0x17f
 80111a6:	492e      	ldr	r1, [pc, #184]	; (8011260 <etharp_find_entry+0x2e8>)
 80111a8:	482b      	ldr	r0, [pc, #172]	; (8011258 <etharp_find_entry+0x2e0>)
 80111aa:	f002 f935 	bl	8013418 <iprintf>
    etharp_free_entry(i);
 80111ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7ff fe06 	bl	8010dc4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80111b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80111bc:	2b09      	cmp	r3, #9
 80111be:	dd06      	ble.n	80111ce <etharp_find_entry+0x256>
 80111c0:	4b23      	ldr	r3, [pc, #140]	; (8011250 <etharp_find_entry+0x2d8>)
 80111c2:	f240 1283 	movw	r2, #387	; 0x183
 80111c6:	4926      	ldr	r1, [pc, #152]	; (8011260 <etharp_find_entry+0x2e8>)
 80111c8:	4823      	ldr	r0, [pc, #140]	; (8011258 <etharp_find_entry+0x2e0>)
 80111ca:	f002 f925 	bl	8013418 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80111ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80111d2:	491e      	ldr	r1, [pc, #120]	; (801124c <etharp_find_entry+0x2d4>)
 80111d4:	4613      	mov	r3, r2
 80111d6:	005b      	lsls	r3, r3, #1
 80111d8:	4413      	add	r3, r2
 80111da:	00db      	lsls	r3, r3, #3
 80111dc:	440b      	add	r3, r1
 80111de:	3314      	adds	r3, #20
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d006      	beq.n	80111f4 <etharp_find_entry+0x27c>
 80111e6:	4b1a      	ldr	r3, [pc, #104]	; (8011250 <etharp_find_entry+0x2d8>)
 80111e8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80111ec:	491d      	ldr	r1, [pc, #116]	; (8011264 <etharp_find_entry+0x2ec>)
 80111ee:	481a      	ldr	r0, [pc, #104]	; (8011258 <etharp_find_entry+0x2e0>)
 80111f0:	f002 f912 	bl	8013418 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d00b      	beq.n	8011212 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80111fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	6819      	ldr	r1, [r3, #0]
 8011202:	4812      	ldr	r0, [pc, #72]	; (801124c <etharp_find_entry+0x2d4>)
 8011204:	4613      	mov	r3, r2
 8011206:	005b      	lsls	r3, r3, #1
 8011208:	4413      	add	r3, r2
 801120a:	00db      	lsls	r3, r3, #3
 801120c:	4403      	add	r3, r0
 801120e:	3304      	adds	r3, #4
 8011210:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011212:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011216:	490d      	ldr	r1, [pc, #52]	; (801124c <etharp_find_entry+0x2d4>)
 8011218:	4613      	mov	r3, r2
 801121a:	005b      	lsls	r3, r3, #1
 801121c:	4413      	add	r3, r2
 801121e:	00db      	lsls	r3, r3, #3
 8011220:	440b      	add	r3, r1
 8011222:	3312      	adds	r3, #18
 8011224:	2200      	movs	r2, #0
 8011226:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011228:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801122c:	4907      	ldr	r1, [pc, #28]	; (801124c <etharp_find_entry+0x2d4>)
 801122e:	4613      	mov	r3, r2
 8011230:	005b      	lsls	r3, r3, #1
 8011232:	4413      	add	r3, r2
 8011234:	00db      	lsls	r3, r3, #3
 8011236:	440b      	add	r3, r1
 8011238:	3308      	adds	r3, #8
 801123a:	687a      	ldr	r2, [r7, #4]
 801123c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801123e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011242:	4618      	mov	r0, r3
 8011244:	3728      	adds	r7, #40	; 0x28
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
 801124a:	bf00      	nop
 801124c:	20008eb0 	.word	0x20008eb0
 8011250:	08016ba4 	.word	0x08016ba4
 8011254:	08016bdc 	.word	0x08016bdc
 8011258:	08016c1c 	.word	0x08016c1c
 801125c:	08016c44 	.word	0x08016c44
 8011260:	08016c5c 	.word	0x08016c5c
 8011264:	08016c70 	.word	0x08016c70

08011268 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b088      	sub	sp, #32
 801126c:	af02      	add	r7, sp, #8
 801126e:	60f8      	str	r0, [r7, #12]
 8011270:	60b9      	str	r1, [r7, #8]
 8011272:	607a      	str	r2, [r7, #4]
 8011274:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801127c:	2b06      	cmp	r3, #6
 801127e:	d006      	beq.n	801128e <etharp_update_arp_entry+0x26>
 8011280:	4b48      	ldr	r3, [pc, #288]	; (80113a4 <etharp_update_arp_entry+0x13c>)
 8011282:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011286:	4948      	ldr	r1, [pc, #288]	; (80113a8 <etharp_update_arp_entry+0x140>)
 8011288:	4848      	ldr	r0, [pc, #288]	; (80113ac <etharp_update_arp_entry+0x144>)
 801128a:	f002 f8c5 	bl	8013418 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d012      	beq.n	80112ba <etharp_update_arp_entry+0x52>
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d00e      	beq.n	80112ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	68f9      	ldr	r1, [r7, #12]
 80112a2:	4618      	mov	r0, r3
 80112a4:	f001 f8fe 	bl	80124a4 <ip4_addr_isbroadcast_u32>
 80112a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d105      	bne.n	80112ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80112b6:	2be0      	cmp	r3, #224	; 0xe0
 80112b8:	d102      	bne.n	80112c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80112ba:	f06f 030f 	mvn.w	r3, #15
 80112be:	e06c      	b.n	801139a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80112c0:	78fb      	ldrb	r3, [r7, #3]
 80112c2:	68fa      	ldr	r2, [r7, #12]
 80112c4:	4619      	mov	r1, r3
 80112c6:	68b8      	ldr	r0, [r7, #8]
 80112c8:	f7ff fe56 	bl	8010f78 <etharp_find_entry>
 80112cc:	4603      	mov	r3, r0
 80112ce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80112d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	da02      	bge.n	80112de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80112d8:	8afb      	ldrh	r3, [r7, #22]
 80112da:	b25b      	sxtb	r3, r3
 80112dc:	e05d      	b.n	801139a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80112de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112e2:	4933      	ldr	r1, [pc, #204]	; (80113b0 <etharp_update_arp_entry+0x148>)
 80112e4:	4613      	mov	r3, r2
 80112e6:	005b      	lsls	r3, r3, #1
 80112e8:	4413      	add	r3, r2
 80112ea:	00db      	lsls	r3, r3, #3
 80112ec:	440b      	add	r3, r1
 80112ee:	3314      	adds	r3, #20
 80112f0:	2202      	movs	r2, #2
 80112f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80112f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112f8:	492d      	ldr	r1, [pc, #180]	; (80113b0 <etharp_update_arp_entry+0x148>)
 80112fa:	4613      	mov	r3, r2
 80112fc:	005b      	lsls	r3, r3, #1
 80112fe:	4413      	add	r3, r2
 8011300:	00db      	lsls	r3, r3, #3
 8011302:	440b      	add	r3, r1
 8011304:	3308      	adds	r3, #8
 8011306:	68fa      	ldr	r2, [r7, #12]
 8011308:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801130a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801130e:	4613      	mov	r3, r2
 8011310:	005b      	lsls	r3, r3, #1
 8011312:	4413      	add	r3, r2
 8011314:	00db      	lsls	r3, r3, #3
 8011316:	3308      	adds	r3, #8
 8011318:	4a25      	ldr	r2, [pc, #148]	; (80113b0 <etharp_update_arp_entry+0x148>)
 801131a:	4413      	add	r3, r2
 801131c:	3304      	adds	r3, #4
 801131e:	2206      	movs	r2, #6
 8011320:	6879      	ldr	r1, [r7, #4]
 8011322:	4618      	mov	r0, r3
 8011324:	f002 f848 	bl	80133b8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011328:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801132c:	4920      	ldr	r1, [pc, #128]	; (80113b0 <etharp_update_arp_entry+0x148>)
 801132e:	4613      	mov	r3, r2
 8011330:	005b      	lsls	r3, r3, #1
 8011332:	4413      	add	r3, r2
 8011334:	00db      	lsls	r3, r3, #3
 8011336:	440b      	add	r3, r1
 8011338:	3312      	adds	r3, #18
 801133a:	2200      	movs	r2, #0
 801133c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801133e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011342:	491b      	ldr	r1, [pc, #108]	; (80113b0 <etharp_update_arp_entry+0x148>)
 8011344:	4613      	mov	r3, r2
 8011346:	005b      	lsls	r3, r3, #1
 8011348:	4413      	add	r3, r2
 801134a:	00db      	lsls	r3, r3, #3
 801134c:	440b      	add	r3, r1
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d021      	beq.n	8011398 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011354:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011358:	4915      	ldr	r1, [pc, #84]	; (80113b0 <etharp_update_arp_entry+0x148>)
 801135a:	4613      	mov	r3, r2
 801135c:	005b      	lsls	r3, r3, #1
 801135e:	4413      	add	r3, r2
 8011360:	00db      	lsls	r3, r3, #3
 8011362:	440b      	add	r3, r1
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011368:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801136c:	4910      	ldr	r1, [pc, #64]	; (80113b0 <etharp_update_arp_entry+0x148>)
 801136e:	4613      	mov	r3, r2
 8011370:	005b      	lsls	r3, r3, #1
 8011372:	4413      	add	r3, r2
 8011374:	00db      	lsls	r3, r3, #3
 8011376:	440b      	add	r3, r1
 8011378:	2200      	movs	r2, #0
 801137a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011382:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011386:	9300      	str	r3, [sp, #0]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6939      	ldr	r1, [r7, #16]
 801138c:	68f8      	ldr	r0, [r7, #12]
 801138e:	f001 ff97 	bl	80132c0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011392:	6938      	ldr	r0, [r7, #16]
 8011394:	f7f9 f9cc 	bl	800a730 <pbuf_free>
  }
  return ERR_OK;
 8011398:	2300      	movs	r3, #0
}
 801139a:	4618      	mov	r0, r3
 801139c:	3718      	adds	r7, #24
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	08016ba4 	.word	0x08016ba4
 80113a8:	08016c9c 	.word	0x08016c9c
 80113ac:	08016c1c 	.word	0x08016c1c
 80113b0:	20008eb0 	.word	0x20008eb0

080113b4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b084      	sub	sp, #16
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80113bc:	2300      	movs	r3, #0
 80113be:	60fb      	str	r3, [r7, #12]
 80113c0:	e01e      	b.n	8011400 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80113c2:	4913      	ldr	r1, [pc, #76]	; (8011410 <etharp_cleanup_netif+0x5c>)
 80113c4:	68fa      	ldr	r2, [r7, #12]
 80113c6:	4613      	mov	r3, r2
 80113c8:	005b      	lsls	r3, r3, #1
 80113ca:	4413      	add	r3, r2
 80113cc:	00db      	lsls	r3, r3, #3
 80113ce:	440b      	add	r3, r1
 80113d0:	3314      	adds	r3, #20
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80113d6:	7afb      	ldrb	r3, [r7, #11]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d00e      	beq.n	80113fa <etharp_cleanup_netif+0x46>
 80113dc:	490c      	ldr	r1, [pc, #48]	; (8011410 <etharp_cleanup_netif+0x5c>)
 80113de:	68fa      	ldr	r2, [r7, #12]
 80113e0:	4613      	mov	r3, r2
 80113e2:	005b      	lsls	r3, r3, #1
 80113e4:	4413      	add	r3, r2
 80113e6:	00db      	lsls	r3, r3, #3
 80113e8:	440b      	add	r3, r1
 80113ea:	3308      	adds	r3, #8
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d102      	bne.n	80113fa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80113f4:	68f8      	ldr	r0, [r7, #12]
 80113f6:	f7ff fce5 	bl	8010dc4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	3301      	adds	r3, #1
 80113fe:	60fb      	str	r3, [r7, #12]
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2b09      	cmp	r3, #9
 8011404:	dddd      	ble.n	80113c2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011406:	bf00      	nop
 8011408:	bf00      	nop
 801140a:	3710      	adds	r7, #16
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	20008eb0 	.word	0x20008eb0

08011414 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011414:	b5b0      	push	{r4, r5, r7, lr}
 8011416:	b08a      	sub	sp, #40	; 0x28
 8011418:	af04      	add	r7, sp, #16
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d107      	bne.n	8011434 <etharp_input+0x20>
 8011424:	4b3d      	ldr	r3, [pc, #244]	; (801151c <etharp_input+0x108>)
 8011426:	f240 228a 	movw	r2, #650	; 0x28a
 801142a:	493d      	ldr	r1, [pc, #244]	; (8011520 <etharp_input+0x10c>)
 801142c:	483d      	ldr	r0, [pc, #244]	; (8011524 <etharp_input+0x110>)
 801142e:	f001 fff3 	bl	8013418 <iprintf>
 8011432:	e06f      	b.n	8011514 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	685b      	ldr	r3, [r3, #4]
 8011438:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	881b      	ldrh	r3, [r3, #0]
 801143e:	b29b      	uxth	r3, r3
 8011440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011444:	d10c      	bne.n	8011460 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801144a:	2b06      	cmp	r3, #6
 801144c:	d108      	bne.n	8011460 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011452:	2b04      	cmp	r3, #4
 8011454:	d104      	bne.n	8011460 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	885b      	ldrh	r3, [r3, #2]
 801145a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801145c:	2b08      	cmp	r3, #8
 801145e:	d003      	beq.n	8011468 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7f9 f965 	bl	800a730 <pbuf_free>
    return;
 8011466:	e055      	b.n	8011514 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	330e      	adds	r3, #14
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	3318      	adds	r3, #24
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	3304      	adds	r3, #4
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d102      	bne.n	8011488 <etharp_input+0x74>
    for_us = 0;
 8011482:	2300      	movs	r3, #0
 8011484:	75fb      	strb	r3, [r7, #23]
 8011486:	e009      	b.n	801149c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011488:	68ba      	ldr	r2, [r7, #8]
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	3304      	adds	r3, #4
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	429a      	cmp	r2, r3
 8011492:	bf0c      	ite	eq
 8011494:	2301      	moveq	r3, #1
 8011496:	2300      	movne	r3, #0
 8011498:	b2db      	uxtb	r3, r3
 801149a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	f103 0208 	add.w	r2, r3, #8
 80114a2:	7dfb      	ldrb	r3, [r7, #23]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d001      	beq.n	80114ac <etharp_input+0x98>
 80114a8:	2301      	movs	r3, #1
 80114aa:	e000      	b.n	80114ae <etharp_input+0x9a>
 80114ac:	2302      	movs	r3, #2
 80114ae:	f107 010c 	add.w	r1, r7, #12
 80114b2:	6838      	ldr	r0, [r7, #0]
 80114b4:	f7ff fed8 	bl	8011268 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	88db      	ldrh	r3, [r3, #6]
 80114bc:	b29b      	uxth	r3, r3
 80114be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114c2:	d003      	beq.n	80114cc <etharp_input+0xb8>
 80114c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114c8:	d01e      	beq.n	8011508 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80114ca:	e020      	b.n	801150e <etharp_input+0xfa>
      if (for_us) {
 80114cc:	7dfb      	ldrb	r3, [r7, #23]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d01c      	beq.n	801150c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80114e8:	693a      	ldr	r2, [r7, #16]
 80114ea:	3208      	adds	r2, #8
        etharp_raw(netif,
 80114ec:	2102      	movs	r1, #2
 80114ee:	9103      	str	r1, [sp, #12]
 80114f0:	f107 010c 	add.w	r1, r7, #12
 80114f4:	9102      	str	r1, [sp, #8]
 80114f6:	9201      	str	r2, [sp, #4]
 80114f8:	9300      	str	r3, [sp, #0]
 80114fa:	462b      	mov	r3, r5
 80114fc:	4622      	mov	r2, r4
 80114fe:	4601      	mov	r1, r0
 8011500:	6838      	ldr	r0, [r7, #0]
 8011502:	f000 faeb 	bl	8011adc <etharp_raw>
      break;
 8011506:	e001      	b.n	801150c <etharp_input+0xf8>
      break;
 8011508:	bf00      	nop
 801150a:	e000      	b.n	801150e <etharp_input+0xfa>
      break;
 801150c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f7f9 f90e 	bl	800a730 <pbuf_free>
}
 8011514:	3718      	adds	r7, #24
 8011516:	46bd      	mov	sp, r7
 8011518:	bdb0      	pop	{r4, r5, r7, pc}
 801151a:	bf00      	nop
 801151c:	08016ba4 	.word	0x08016ba4
 8011520:	08016cf4 	.word	0x08016cf4
 8011524:	08016c1c 	.word	0x08016c1c

08011528 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b086      	sub	sp, #24
 801152c:	af02      	add	r7, sp, #8
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	4613      	mov	r3, r2
 8011534:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011536:	79fa      	ldrb	r2, [r7, #7]
 8011538:	4944      	ldr	r1, [pc, #272]	; (801164c <etharp_output_to_arp_index+0x124>)
 801153a:	4613      	mov	r3, r2
 801153c:	005b      	lsls	r3, r3, #1
 801153e:	4413      	add	r3, r2
 8011540:	00db      	lsls	r3, r3, #3
 8011542:	440b      	add	r3, r1
 8011544:	3314      	adds	r3, #20
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	2b01      	cmp	r3, #1
 801154a:	d806      	bhi.n	801155a <etharp_output_to_arp_index+0x32>
 801154c:	4b40      	ldr	r3, [pc, #256]	; (8011650 <etharp_output_to_arp_index+0x128>)
 801154e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011552:	4940      	ldr	r1, [pc, #256]	; (8011654 <etharp_output_to_arp_index+0x12c>)
 8011554:	4840      	ldr	r0, [pc, #256]	; (8011658 <etharp_output_to_arp_index+0x130>)
 8011556:	f001 ff5f 	bl	8013418 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801155a:	79fa      	ldrb	r2, [r7, #7]
 801155c:	493b      	ldr	r1, [pc, #236]	; (801164c <etharp_output_to_arp_index+0x124>)
 801155e:	4613      	mov	r3, r2
 8011560:	005b      	lsls	r3, r3, #1
 8011562:	4413      	add	r3, r2
 8011564:	00db      	lsls	r3, r3, #3
 8011566:	440b      	add	r3, r1
 8011568:	3314      	adds	r3, #20
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	2b02      	cmp	r3, #2
 801156e:	d153      	bne.n	8011618 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011570:	79fa      	ldrb	r2, [r7, #7]
 8011572:	4936      	ldr	r1, [pc, #216]	; (801164c <etharp_output_to_arp_index+0x124>)
 8011574:	4613      	mov	r3, r2
 8011576:	005b      	lsls	r3, r3, #1
 8011578:	4413      	add	r3, r2
 801157a:	00db      	lsls	r3, r3, #3
 801157c:	440b      	add	r3, r1
 801157e:	3312      	adds	r3, #18
 8011580:	881b      	ldrh	r3, [r3, #0]
 8011582:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011586:	d919      	bls.n	80115bc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011588:	79fa      	ldrb	r2, [r7, #7]
 801158a:	4613      	mov	r3, r2
 801158c:	005b      	lsls	r3, r3, #1
 801158e:	4413      	add	r3, r2
 8011590:	00db      	lsls	r3, r3, #3
 8011592:	4a2e      	ldr	r2, [pc, #184]	; (801164c <etharp_output_to_arp_index+0x124>)
 8011594:	4413      	add	r3, r2
 8011596:	3304      	adds	r3, #4
 8011598:	4619      	mov	r1, r3
 801159a:	68f8      	ldr	r0, [r7, #12]
 801159c:	f000 fb4c 	bl	8011c38 <etharp_request>
 80115a0:	4603      	mov	r3, r0
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d138      	bne.n	8011618 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80115a6:	79fa      	ldrb	r2, [r7, #7]
 80115a8:	4928      	ldr	r1, [pc, #160]	; (801164c <etharp_output_to_arp_index+0x124>)
 80115aa:	4613      	mov	r3, r2
 80115ac:	005b      	lsls	r3, r3, #1
 80115ae:	4413      	add	r3, r2
 80115b0:	00db      	lsls	r3, r3, #3
 80115b2:	440b      	add	r3, r1
 80115b4:	3314      	adds	r3, #20
 80115b6:	2203      	movs	r2, #3
 80115b8:	701a      	strb	r2, [r3, #0]
 80115ba:	e02d      	b.n	8011618 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80115bc:	79fa      	ldrb	r2, [r7, #7]
 80115be:	4923      	ldr	r1, [pc, #140]	; (801164c <etharp_output_to_arp_index+0x124>)
 80115c0:	4613      	mov	r3, r2
 80115c2:	005b      	lsls	r3, r3, #1
 80115c4:	4413      	add	r3, r2
 80115c6:	00db      	lsls	r3, r3, #3
 80115c8:	440b      	add	r3, r1
 80115ca:	3312      	adds	r3, #18
 80115cc:	881b      	ldrh	r3, [r3, #0]
 80115ce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80115d2:	d321      	bcc.n	8011618 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80115d4:	79fa      	ldrb	r2, [r7, #7]
 80115d6:	4613      	mov	r3, r2
 80115d8:	005b      	lsls	r3, r3, #1
 80115da:	4413      	add	r3, r2
 80115dc:	00db      	lsls	r3, r3, #3
 80115de:	4a1b      	ldr	r2, [pc, #108]	; (801164c <etharp_output_to_arp_index+0x124>)
 80115e0:	4413      	add	r3, r2
 80115e2:	1d19      	adds	r1, r3, #4
 80115e4:	79fa      	ldrb	r2, [r7, #7]
 80115e6:	4613      	mov	r3, r2
 80115e8:	005b      	lsls	r3, r3, #1
 80115ea:	4413      	add	r3, r2
 80115ec:	00db      	lsls	r3, r3, #3
 80115ee:	3308      	adds	r3, #8
 80115f0:	4a16      	ldr	r2, [pc, #88]	; (801164c <etharp_output_to_arp_index+0x124>)
 80115f2:	4413      	add	r3, r2
 80115f4:	3304      	adds	r3, #4
 80115f6:	461a      	mov	r2, r3
 80115f8:	68f8      	ldr	r0, [r7, #12]
 80115fa:	f000 fafb 	bl	8011bf4 <etharp_request_dst>
 80115fe:	4603      	mov	r3, r0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d109      	bne.n	8011618 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011604:	79fa      	ldrb	r2, [r7, #7]
 8011606:	4911      	ldr	r1, [pc, #68]	; (801164c <etharp_output_to_arp_index+0x124>)
 8011608:	4613      	mov	r3, r2
 801160a:	005b      	lsls	r3, r3, #1
 801160c:	4413      	add	r3, r2
 801160e:	00db      	lsls	r3, r3, #3
 8011610:	440b      	add	r3, r1
 8011612:	3314      	adds	r3, #20
 8011614:	2203      	movs	r2, #3
 8011616:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801161e:	79fa      	ldrb	r2, [r7, #7]
 8011620:	4613      	mov	r3, r2
 8011622:	005b      	lsls	r3, r3, #1
 8011624:	4413      	add	r3, r2
 8011626:	00db      	lsls	r3, r3, #3
 8011628:	3308      	adds	r3, #8
 801162a:	4a08      	ldr	r2, [pc, #32]	; (801164c <etharp_output_to_arp_index+0x124>)
 801162c:	4413      	add	r3, r2
 801162e:	3304      	adds	r3, #4
 8011630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011634:	9200      	str	r2, [sp, #0]
 8011636:	460a      	mov	r2, r1
 8011638:	68b9      	ldr	r1, [r7, #8]
 801163a:	68f8      	ldr	r0, [r7, #12]
 801163c:	f001 fe40 	bl	80132c0 <ethernet_output>
 8011640:	4603      	mov	r3, r0
}
 8011642:	4618      	mov	r0, r3
 8011644:	3710      	adds	r7, #16
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}
 801164a:	bf00      	nop
 801164c:	20008eb0 	.word	0x20008eb0
 8011650:	08016ba4 	.word	0x08016ba4
 8011654:	08016d14 	.word	0x08016d14
 8011658:	08016c1c 	.word	0x08016c1c

0801165c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b08a      	sub	sp, #40	; 0x28
 8011660:	af02      	add	r7, sp, #8
 8011662:	60f8      	str	r0, [r7, #12]
 8011664:	60b9      	str	r1, [r7, #8]
 8011666:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d106      	bne.n	8011680 <etharp_output+0x24>
 8011672:	4b73      	ldr	r3, [pc, #460]	; (8011840 <etharp_output+0x1e4>)
 8011674:	f240 321e 	movw	r2, #798	; 0x31e
 8011678:	4972      	ldr	r1, [pc, #456]	; (8011844 <etharp_output+0x1e8>)
 801167a:	4873      	ldr	r0, [pc, #460]	; (8011848 <etharp_output+0x1ec>)
 801167c:	f001 fecc 	bl	8013418 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d106      	bne.n	8011694 <etharp_output+0x38>
 8011686:	4b6e      	ldr	r3, [pc, #440]	; (8011840 <etharp_output+0x1e4>)
 8011688:	f240 321f 	movw	r2, #799	; 0x31f
 801168c:	496f      	ldr	r1, [pc, #444]	; (801184c <etharp_output+0x1f0>)
 801168e:	486e      	ldr	r0, [pc, #440]	; (8011848 <etharp_output+0x1ec>)
 8011690:	f001 fec2 	bl	8013418 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d106      	bne.n	80116a8 <etharp_output+0x4c>
 801169a:	4b69      	ldr	r3, [pc, #420]	; (8011840 <etharp_output+0x1e4>)
 801169c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80116a0:	496b      	ldr	r1, [pc, #428]	; (8011850 <etharp_output+0x1f4>)
 80116a2:	4869      	ldr	r0, [pc, #420]	; (8011848 <etharp_output+0x1ec>)
 80116a4:	f001 feb8 	bl	8013418 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	68f9      	ldr	r1, [r7, #12]
 80116ae:	4618      	mov	r0, r3
 80116b0:	f000 fef8 	bl	80124a4 <ip4_addr_isbroadcast_u32>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d002      	beq.n	80116c0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80116ba:	4b66      	ldr	r3, [pc, #408]	; (8011854 <etharp_output+0x1f8>)
 80116bc:	61fb      	str	r3, [r7, #28]
 80116be:	e0af      	b.n	8011820 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80116c8:	2be0      	cmp	r3, #224	; 0xe0
 80116ca:	d118      	bne.n	80116fe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80116cc:	2301      	movs	r3, #1
 80116ce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80116d0:	2300      	movs	r3, #0
 80116d2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80116d4:	235e      	movs	r3, #94	; 0x5e
 80116d6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	3301      	adds	r3, #1
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	3302      	adds	r3, #2
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	3303      	adds	r3, #3
 80116f2:	781b      	ldrb	r3, [r3, #0]
 80116f4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80116f6:	f107 0310 	add.w	r3, r7, #16
 80116fa:	61fb      	str	r3, [r7, #28]
 80116fc:	e090      	b.n	8011820 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	3304      	adds	r3, #4
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	405a      	eors	r2, r3
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	3308      	adds	r3, #8
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	4013      	ands	r3, r2
 8011712:	2b00      	cmp	r3, #0
 8011714:	d012      	beq.n	801173c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801171c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011720:	4293      	cmp	r3, r2
 8011722:	d00b      	beq.n	801173c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	330c      	adds	r3, #12
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d003      	beq.n	8011736 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	330c      	adds	r3, #12
 8011732:	61bb      	str	r3, [r7, #24]
 8011734:	e002      	b.n	801173c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011736:	f06f 0303 	mvn.w	r3, #3
 801173a:	e07d      	b.n	8011838 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801173c:	4b46      	ldr	r3, [pc, #280]	; (8011858 <etharp_output+0x1fc>)
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	4619      	mov	r1, r3
 8011742:	4a46      	ldr	r2, [pc, #280]	; (801185c <etharp_output+0x200>)
 8011744:	460b      	mov	r3, r1
 8011746:	005b      	lsls	r3, r3, #1
 8011748:	440b      	add	r3, r1
 801174a:	00db      	lsls	r3, r3, #3
 801174c:	4413      	add	r3, r2
 801174e:	3314      	adds	r3, #20
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	2b01      	cmp	r3, #1
 8011754:	d925      	bls.n	80117a2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011756:	4b40      	ldr	r3, [pc, #256]	; (8011858 <etharp_output+0x1fc>)
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	4619      	mov	r1, r3
 801175c:	4a3f      	ldr	r2, [pc, #252]	; (801185c <etharp_output+0x200>)
 801175e:	460b      	mov	r3, r1
 8011760:	005b      	lsls	r3, r3, #1
 8011762:	440b      	add	r3, r1
 8011764:	00db      	lsls	r3, r3, #3
 8011766:	4413      	add	r3, r2
 8011768:	3308      	adds	r3, #8
 801176a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801176c:	68fa      	ldr	r2, [r7, #12]
 801176e:	429a      	cmp	r2, r3
 8011770:	d117      	bne.n	80117a2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011772:	69bb      	ldr	r3, [r7, #24]
 8011774:	681a      	ldr	r2, [r3, #0]
 8011776:	4b38      	ldr	r3, [pc, #224]	; (8011858 <etharp_output+0x1fc>)
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	4618      	mov	r0, r3
 801177c:	4937      	ldr	r1, [pc, #220]	; (801185c <etharp_output+0x200>)
 801177e:	4603      	mov	r3, r0
 8011780:	005b      	lsls	r3, r3, #1
 8011782:	4403      	add	r3, r0
 8011784:	00db      	lsls	r3, r3, #3
 8011786:	440b      	add	r3, r1
 8011788:	3304      	adds	r3, #4
 801178a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801178c:	429a      	cmp	r2, r3
 801178e:	d108      	bne.n	80117a2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011790:	4b31      	ldr	r3, [pc, #196]	; (8011858 <etharp_output+0x1fc>)
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	461a      	mov	r2, r3
 8011796:	68b9      	ldr	r1, [r7, #8]
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f7ff fec5 	bl	8011528 <etharp_output_to_arp_index>
 801179e:	4603      	mov	r3, r0
 80117a0:	e04a      	b.n	8011838 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80117a2:	2300      	movs	r3, #0
 80117a4:	75fb      	strb	r3, [r7, #23]
 80117a6:	e031      	b.n	801180c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80117a8:	7dfa      	ldrb	r2, [r7, #23]
 80117aa:	492c      	ldr	r1, [pc, #176]	; (801185c <etharp_output+0x200>)
 80117ac:	4613      	mov	r3, r2
 80117ae:	005b      	lsls	r3, r3, #1
 80117b0:	4413      	add	r3, r2
 80117b2:	00db      	lsls	r3, r3, #3
 80117b4:	440b      	add	r3, r1
 80117b6:	3314      	adds	r3, #20
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	2b01      	cmp	r3, #1
 80117bc:	d923      	bls.n	8011806 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80117be:	7dfa      	ldrb	r2, [r7, #23]
 80117c0:	4926      	ldr	r1, [pc, #152]	; (801185c <etharp_output+0x200>)
 80117c2:	4613      	mov	r3, r2
 80117c4:	005b      	lsls	r3, r3, #1
 80117c6:	4413      	add	r3, r2
 80117c8:	00db      	lsls	r3, r3, #3
 80117ca:	440b      	add	r3, r1
 80117cc:	3308      	adds	r3, #8
 80117ce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80117d0:	68fa      	ldr	r2, [r7, #12]
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d117      	bne.n	8011806 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80117d6:	69bb      	ldr	r3, [r7, #24]
 80117d8:	6819      	ldr	r1, [r3, #0]
 80117da:	7dfa      	ldrb	r2, [r7, #23]
 80117dc:	481f      	ldr	r0, [pc, #124]	; (801185c <etharp_output+0x200>)
 80117de:	4613      	mov	r3, r2
 80117e0:	005b      	lsls	r3, r3, #1
 80117e2:	4413      	add	r3, r2
 80117e4:	00db      	lsls	r3, r3, #3
 80117e6:	4403      	add	r3, r0
 80117e8:	3304      	adds	r3, #4
 80117ea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80117ec:	4299      	cmp	r1, r3
 80117ee:	d10a      	bne.n	8011806 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80117f0:	4a19      	ldr	r2, [pc, #100]	; (8011858 <etharp_output+0x1fc>)
 80117f2:	7dfb      	ldrb	r3, [r7, #23]
 80117f4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80117f6:	7dfb      	ldrb	r3, [r7, #23]
 80117f8:	461a      	mov	r2, r3
 80117fa:	68b9      	ldr	r1, [r7, #8]
 80117fc:	68f8      	ldr	r0, [r7, #12]
 80117fe:	f7ff fe93 	bl	8011528 <etharp_output_to_arp_index>
 8011802:	4603      	mov	r3, r0
 8011804:	e018      	b.n	8011838 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011806:	7dfb      	ldrb	r3, [r7, #23]
 8011808:	3301      	adds	r3, #1
 801180a:	75fb      	strb	r3, [r7, #23]
 801180c:	7dfb      	ldrb	r3, [r7, #23]
 801180e:	2b09      	cmp	r3, #9
 8011810:	d9ca      	bls.n	80117a8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011812:	68ba      	ldr	r2, [r7, #8]
 8011814:	69b9      	ldr	r1, [r7, #24]
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f000 f822 	bl	8011860 <etharp_query>
 801181c:	4603      	mov	r3, r0
 801181e:	e00b      	b.n	8011838 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011826:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801182a:	9300      	str	r3, [sp, #0]
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	68b9      	ldr	r1, [r7, #8]
 8011830:	68f8      	ldr	r0, [r7, #12]
 8011832:	f001 fd45 	bl	80132c0 <ethernet_output>
 8011836:	4603      	mov	r3, r0
}
 8011838:	4618      	mov	r0, r3
 801183a:	3720      	adds	r7, #32
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}
 8011840:	08016ba4 	.word	0x08016ba4
 8011844:	08016cf4 	.word	0x08016cf4
 8011848:	08016c1c 	.word	0x08016c1c
 801184c:	08016d44 	.word	0x08016d44
 8011850:	08016ce4 	.word	0x08016ce4
 8011854:	0801735c 	.word	0x0801735c
 8011858:	20008fa0 	.word	0x20008fa0
 801185c:	20008eb0 	.word	0x20008eb0

08011860 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b08c      	sub	sp, #48	; 0x30
 8011864:	af02      	add	r7, sp, #8
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	3326      	adds	r3, #38	; 0x26
 8011870:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011872:	23ff      	movs	r3, #255	; 0xff
 8011874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011878:	2300      	movs	r3, #0
 801187a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	68f9      	ldr	r1, [r7, #12]
 8011882:	4618      	mov	r0, r3
 8011884:	f000 fe0e 	bl	80124a4 <ip4_addr_isbroadcast_u32>
 8011888:	4603      	mov	r3, r0
 801188a:	2b00      	cmp	r3, #0
 801188c:	d10c      	bne.n	80118a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011896:	2be0      	cmp	r3, #224	; 0xe0
 8011898:	d006      	beq.n	80118a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d003      	beq.n	80118a8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d102      	bne.n	80118ae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80118a8:	f06f 030f 	mvn.w	r3, #15
 80118ac:	e101      	b.n	8011ab2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80118ae:	68fa      	ldr	r2, [r7, #12]
 80118b0:	2101      	movs	r1, #1
 80118b2:	68b8      	ldr	r0, [r7, #8]
 80118b4:	f7ff fb60 	bl	8010f78 <etharp_find_entry>
 80118b8:	4603      	mov	r3, r0
 80118ba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80118bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	da02      	bge.n	80118ca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80118c4:	8a7b      	ldrh	r3, [r7, #18]
 80118c6:	b25b      	sxtb	r3, r3
 80118c8:	e0f3      	b.n	8011ab2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80118ca:	8a7b      	ldrh	r3, [r7, #18]
 80118cc:	2b7e      	cmp	r3, #126	; 0x7e
 80118ce:	d906      	bls.n	80118de <etharp_query+0x7e>
 80118d0:	4b7a      	ldr	r3, [pc, #488]	; (8011abc <etharp_query+0x25c>)
 80118d2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80118d6:	497a      	ldr	r1, [pc, #488]	; (8011ac0 <etharp_query+0x260>)
 80118d8:	487a      	ldr	r0, [pc, #488]	; (8011ac4 <etharp_query+0x264>)
 80118da:	f001 fd9d 	bl	8013418 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80118de:	8a7b      	ldrh	r3, [r7, #18]
 80118e0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80118e2:	7c7a      	ldrb	r2, [r7, #17]
 80118e4:	4978      	ldr	r1, [pc, #480]	; (8011ac8 <etharp_query+0x268>)
 80118e6:	4613      	mov	r3, r2
 80118e8:	005b      	lsls	r3, r3, #1
 80118ea:	4413      	add	r3, r2
 80118ec:	00db      	lsls	r3, r3, #3
 80118ee:	440b      	add	r3, r1
 80118f0:	3314      	adds	r3, #20
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d115      	bne.n	8011924 <etharp_query+0xc4>
    is_new_entry = 1;
 80118f8:	2301      	movs	r3, #1
 80118fa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80118fc:	7c7a      	ldrb	r2, [r7, #17]
 80118fe:	4972      	ldr	r1, [pc, #456]	; (8011ac8 <etharp_query+0x268>)
 8011900:	4613      	mov	r3, r2
 8011902:	005b      	lsls	r3, r3, #1
 8011904:	4413      	add	r3, r2
 8011906:	00db      	lsls	r3, r3, #3
 8011908:	440b      	add	r3, r1
 801190a:	3314      	adds	r3, #20
 801190c:	2201      	movs	r2, #1
 801190e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011910:	7c7a      	ldrb	r2, [r7, #17]
 8011912:	496d      	ldr	r1, [pc, #436]	; (8011ac8 <etharp_query+0x268>)
 8011914:	4613      	mov	r3, r2
 8011916:	005b      	lsls	r3, r3, #1
 8011918:	4413      	add	r3, r2
 801191a:	00db      	lsls	r3, r3, #3
 801191c:	440b      	add	r3, r1
 801191e:	3308      	adds	r3, #8
 8011920:	68fa      	ldr	r2, [r7, #12]
 8011922:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011924:	7c7a      	ldrb	r2, [r7, #17]
 8011926:	4968      	ldr	r1, [pc, #416]	; (8011ac8 <etharp_query+0x268>)
 8011928:	4613      	mov	r3, r2
 801192a:	005b      	lsls	r3, r3, #1
 801192c:	4413      	add	r3, r2
 801192e:	00db      	lsls	r3, r3, #3
 8011930:	440b      	add	r3, r1
 8011932:	3314      	adds	r3, #20
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	2b01      	cmp	r3, #1
 8011938:	d011      	beq.n	801195e <etharp_query+0xfe>
 801193a:	7c7a      	ldrb	r2, [r7, #17]
 801193c:	4962      	ldr	r1, [pc, #392]	; (8011ac8 <etharp_query+0x268>)
 801193e:	4613      	mov	r3, r2
 8011940:	005b      	lsls	r3, r3, #1
 8011942:	4413      	add	r3, r2
 8011944:	00db      	lsls	r3, r3, #3
 8011946:	440b      	add	r3, r1
 8011948:	3314      	adds	r3, #20
 801194a:	781b      	ldrb	r3, [r3, #0]
 801194c:	2b01      	cmp	r3, #1
 801194e:	d806      	bhi.n	801195e <etharp_query+0xfe>
 8011950:	4b5a      	ldr	r3, [pc, #360]	; (8011abc <etharp_query+0x25c>)
 8011952:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011956:	495d      	ldr	r1, [pc, #372]	; (8011acc <etharp_query+0x26c>)
 8011958:	485a      	ldr	r0, [pc, #360]	; (8011ac4 <etharp_query+0x264>)
 801195a:	f001 fd5d 	bl	8013418 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801195e:	6a3b      	ldr	r3, [r7, #32]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d102      	bne.n	801196a <etharp_query+0x10a>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d10c      	bne.n	8011984 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801196a:	68b9      	ldr	r1, [r7, #8]
 801196c:	68f8      	ldr	r0, [r7, #12]
 801196e:	f000 f963 	bl	8011c38 <etharp_request>
 8011972:	4603      	mov	r3, r0
 8011974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d102      	bne.n	8011984 <etharp_query+0x124>
      return result;
 801197e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011982:	e096      	b.n	8011ab2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d106      	bne.n	8011998 <etharp_query+0x138>
 801198a:	4b4c      	ldr	r3, [pc, #304]	; (8011abc <etharp_query+0x25c>)
 801198c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011990:	494f      	ldr	r1, [pc, #316]	; (8011ad0 <etharp_query+0x270>)
 8011992:	484c      	ldr	r0, [pc, #304]	; (8011ac4 <etharp_query+0x264>)
 8011994:	f001 fd40 	bl	8013418 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011998:	7c7a      	ldrb	r2, [r7, #17]
 801199a:	494b      	ldr	r1, [pc, #300]	; (8011ac8 <etharp_query+0x268>)
 801199c:	4613      	mov	r3, r2
 801199e:	005b      	lsls	r3, r3, #1
 80119a0:	4413      	add	r3, r2
 80119a2:	00db      	lsls	r3, r3, #3
 80119a4:	440b      	add	r3, r1
 80119a6:	3314      	adds	r3, #20
 80119a8:	781b      	ldrb	r3, [r3, #0]
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d917      	bls.n	80119de <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80119ae:	4a49      	ldr	r2, [pc, #292]	; (8011ad4 <etharp_query+0x274>)
 80119b0:	7c7b      	ldrb	r3, [r7, #17]
 80119b2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80119b4:	7c7a      	ldrb	r2, [r7, #17]
 80119b6:	4613      	mov	r3, r2
 80119b8:	005b      	lsls	r3, r3, #1
 80119ba:	4413      	add	r3, r2
 80119bc:	00db      	lsls	r3, r3, #3
 80119be:	3308      	adds	r3, #8
 80119c0:	4a41      	ldr	r2, [pc, #260]	; (8011ac8 <etharp_query+0x268>)
 80119c2:	4413      	add	r3, r2
 80119c4:	3304      	adds	r3, #4
 80119c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80119ca:	9200      	str	r2, [sp, #0]
 80119cc:	697a      	ldr	r2, [r7, #20]
 80119ce:	6879      	ldr	r1, [r7, #4]
 80119d0:	68f8      	ldr	r0, [r7, #12]
 80119d2:	f001 fc75 	bl	80132c0 <ethernet_output>
 80119d6:	4603      	mov	r3, r0
 80119d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80119dc:	e067      	b.n	8011aae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80119de:	7c7a      	ldrb	r2, [r7, #17]
 80119e0:	4939      	ldr	r1, [pc, #228]	; (8011ac8 <etharp_query+0x268>)
 80119e2:	4613      	mov	r3, r2
 80119e4:	005b      	lsls	r3, r3, #1
 80119e6:	4413      	add	r3, r2
 80119e8:	00db      	lsls	r3, r3, #3
 80119ea:	440b      	add	r3, r1
 80119ec:	3314      	adds	r3, #20
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	2b01      	cmp	r3, #1
 80119f2:	d15c      	bne.n	8011aae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80119f4:	2300      	movs	r3, #0
 80119f6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80119fc:	e01c      	b.n	8011a38 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80119fe:	69fb      	ldr	r3, [r7, #28]
 8011a00:	895a      	ldrh	r2, [r3, #10]
 8011a02:	69fb      	ldr	r3, [r7, #28]
 8011a04:	891b      	ldrh	r3, [r3, #8]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d10a      	bne.n	8011a20 <etharp_query+0x1c0>
 8011a0a:	69fb      	ldr	r3, [r7, #28]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d006      	beq.n	8011a20 <etharp_query+0x1c0>
 8011a12:	4b2a      	ldr	r3, [pc, #168]	; (8011abc <etharp_query+0x25c>)
 8011a14:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011a18:	492f      	ldr	r1, [pc, #188]	; (8011ad8 <etharp_query+0x278>)
 8011a1a:	482a      	ldr	r0, [pc, #168]	; (8011ac4 <etharp_query+0x264>)
 8011a1c:	f001 fcfc 	bl	8013418 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011a20:	69fb      	ldr	r3, [r7, #28]
 8011a22:	7b1b      	ldrb	r3, [r3, #12]
 8011a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d002      	beq.n	8011a32 <etharp_query+0x1d2>
        copy_needed = 1;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	61bb      	str	r3, [r7, #24]
        break;
 8011a30:	e005      	b.n	8011a3e <etharp_query+0x1de>
      }
      p = p->next;
 8011a32:	69fb      	ldr	r3, [r7, #28]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011a38:	69fb      	ldr	r3, [r7, #28]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d1df      	bne.n	80119fe <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d007      	beq.n	8011a54 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011a44:	687a      	ldr	r2, [r7, #4]
 8011a46:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011a4a:	200e      	movs	r0, #14
 8011a4c:	f7f9 f96e 	bl	800ad2c <pbuf_clone>
 8011a50:	61f8      	str	r0, [r7, #28]
 8011a52:	e004      	b.n	8011a5e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011a58:	69f8      	ldr	r0, [r7, #28]
 8011a5a:	f7f8 ff09 	bl	800a870 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d021      	beq.n	8011aa8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011a64:	7c7a      	ldrb	r2, [r7, #17]
 8011a66:	4918      	ldr	r1, [pc, #96]	; (8011ac8 <etharp_query+0x268>)
 8011a68:	4613      	mov	r3, r2
 8011a6a:	005b      	lsls	r3, r3, #1
 8011a6c:	4413      	add	r3, r2
 8011a6e:	00db      	lsls	r3, r3, #3
 8011a70:	440b      	add	r3, r1
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d00a      	beq.n	8011a8e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011a78:	7c7a      	ldrb	r2, [r7, #17]
 8011a7a:	4913      	ldr	r1, [pc, #76]	; (8011ac8 <etharp_query+0x268>)
 8011a7c:	4613      	mov	r3, r2
 8011a7e:	005b      	lsls	r3, r3, #1
 8011a80:	4413      	add	r3, r2
 8011a82:	00db      	lsls	r3, r3, #3
 8011a84:	440b      	add	r3, r1
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f7f8 fe51 	bl	800a730 <pbuf_free>
      }
      arp_table[i].q = p;
 8011a8e:	7c7a      	ldrb	r2, [r7, #17]
 8011a90:	490d      	ldr	r1, [pc, #52]	; (8011ac8 <etharp_query+0x268>)
 8011a92:	4613      	mov	r3, r2
 8011a94:	005b      	lsls	r3, r3, #1
 8011a96:	4413      	add	r3, r2
 8011a98:	00db      	lsls	r3, r3, #3
 8011a9a:	440b      	add	r3, r1
 8011a9c:	69fa      	ldr	r2, [r7, #28]
 8011a9e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011aa6:	e002      	b.n	8011aae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011aa8:	23ff      	movs	r3, #255	; 0xff
 8011aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011aae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3728      	adds	r7, #40	; 0x28
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	08016ba4 	.word	0x08016ba4
 8011ac0:	08016d50 	.word	0x08016d50
 8011ac4:	08016c1c 	.word	0x08016c1c
 8011ac8:	20008eb0 	.word	0x20008eb0
 8011acc:	08016d60 	.word	0x08016d60
 8011ad0:	08016d44 	.word	0x08016d44
 8011ad4:	20008fa0 	.word	0x20008fa0
 8011ad8:	08016d88 	.word	0x08016d88

08011adc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b08a      	sub	sp, #40	; 0x28
 8011ae0:	af02      	add	r7, sp, #8
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	60b9      	str	r1, [r7, #8]
 8011ae6:	607a      	str	r2, [r7, #4]
 8011ae8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011aea:	2300      	movs	r3, #0
 8011aec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d106      	bne.n	8011b02 <etharp_raw+0x26>
 8011af4:	4b3a      	ldr	r3, [pc, #232]	; (8011be0 <etharp_raw+0x104>)
 8011af6:	f240 4257 	movw	r2, #1111	; 0x457
 8011afa:	493a      	ldr	r1, [pc, #232]	; (8011be4 <etharp_raw+0x108>)
 8011afc:	483a      	ldr	r0, [pc, #232]	; (8011be8 <etharp_raw+0x10c>)
 8011afe:	f001 fc8b 	bl	8013418 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011b02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b06:	211c      	movs	r1, #28
 8011b08:	200e      	movs	r0, #14
 8011b0a:	f7f8 fb2d 	bl	800a168 <pbuf_alloc>
 8011b0e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d102      	bne.n	8011b1c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011b16:	f04f 33ff 	mov.w	r3, #4294967295
 8011b1a:	e05d      	b.n	8011bd8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011b1c:	69bb      	ldr	r3, [r7, #24]
 8011b1e:	895b      	ldrh	r3, [r3, #10]
 8011b20:	2b1b      	cmp	r3, #27
 8011b22:	d806      	bhi.n	8011b32 <etharp_raw+0x56>
 8011b24:	4b2e      	ldr	r3, [pc, #184]	; (8011be0 <etharp_raw+0x104>)
 8011b26:	f240 4262 	movw	r2, #1122	; 0x462
 8011b2a:	4930      	ldr	r1, [pc, #192]	; (8011bec <etharp_raw+0x110>)
 8011b2c:	482e      	ldr	r0, [pc, #184]	; (8011be8 <etharp_raw+0x10c>)
 8011b2e:	f001 fc73 	bl	8013418 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011b38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7f7 fb44 	bl	80091c8 <lwip_htons>
 8011b40:	4603      	mov	r3, r0
 8011b42:	461a      	mov	r2, r3
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011b4e:	2b06      	cmp	r3, #6
 8011b50:	d006      	beq.n	8011b60 <etharp_raw+0x84>
 8011b52:	4b23      	ldr	r3, [pc, #140]	; (8011be0 <etharp_raw+0x104>)
 8011b54:	f240 4269 	movw	r2, #1129	; 0x469
 8011b58:	4925      	ldr	r1, [pc, #148]	; (8011bf0 <etharp_raw+0x114>)
 8011b5a:	4823      	ldr	r0, [pc, #140]	; (8011be8 <etharp_raw+0x10c>)
 8011b5c:	f001 fc5c 	bl	8013418 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	3308      	adds	r3, #8
 8011b64:	2206      	movs	r2, #6
 8011b66:	6839      	ldr	r1, [r7, #0]
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f001 fc25 	bl	80133b8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	3312      	adds	r3, #18
 8011b72:	2206      	movs	r2, #6
 8011b74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b76:	4618      	mov	r0, r3
 8011b78:	f001 fc1e 	bl	80133b8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	330e      	adds	r3, #14
 8011b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b82:	6812      	ldr	r2, [r2, #0]
 8011b84:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	3318      	adds	r3, #24
 8011b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b8c:	6812      	ldr	r2, [r2, #0]
 8011b8e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	2200      	movs	r2, #0
 8011b94:	701a      	strb	r2, [r3, #0]
 8011b96:	2200      	movs	r2, #0
 8011b98:	f042 0201 	orr.w	r2, r2, #1
 8011b9c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	f042 0208 	orr.w	r2, r2, #8
 8011ba6:	709a      	strb	r2, [r3, #2]
 8011ba8:	2200      	movs	r2, #0
 8011baa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	2206      	movs	r2, #6
 8011bb0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	2204      	movs	r2, #4
 8011bb6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011bb8:	f640 0306 	movw	r3, #2054	; 0x806
 8011bbc:	9300      	str	r3, [sp, #0]
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	68ba      	ldr	r2, [r7, #8]
 8011bc2:	69b9      	ldr	r1, [r7, #24]
 8011bc4:	68f8      	ldr	r0, [r7, #12]
 8011bc6:	f001 fb7b 	bl	80132c0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011bca:	69b8      	ldr	r0, [r7, #24]
 8011bcc:	f7f8 fdb0 	bl	800a730 <pbuf_free>
  p = NULL;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011bd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3720      	adds	r7, #32
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	08016ba4 	.word	0x08016ba4
 8011be4:	08016cf4 	.word	0x08016cf4
 8011be8:	08016c1c 	.word	0x08016c1c
 8011bec:	08016da4 	.word	0x08016da4
 8011bf0:	08016dd8 	.word	0x08016dd8

08011bf4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b088      	sub	sp, #32
 8011bf8:	af04      	add	r7, sp, #16
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011c10:	2201      	movs	r2, #1
 8011c12:	9203      	str	r2, [sp, #12]
 8011c14:	68ba      	ldr	r2, [r7, #8]
 8011c16:	9202      	str	r2, [sp, #8]
 8011c18:	4a06      	ldr	r2, [pc, #24]	; (8011c34 <etharp_request_dst+0x40>)
 8011c1a:	9201      	str	r2, [sp, #4]
 8011c1c:	9300      	str	r3, [sp, #0]
 8011c1e:	4603      	mov	r3, r0
 8011c20:	687a      	ldr	r2, [r7, #4]
 8011c22:	68f8      	ldr	r0, [r7, #12]
 8011c24:	f7ff ff5a 	bl	8011adc <etharp_raw>
 8011c28:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3710      	adds	r7, #16
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	bf00      	nop
 8011c34:	08017364 	.word	0x08017364

08011c38 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011c42:	4a05      	ldr	r2, [pc, #20]	; (8011c58 <etharp_request+0x20>)
 8011c44:	6839      	ldr	r1, [r7, #0]
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f7ff ffd4 	bl	8011bf4 <etharp_request_dst>
 8011c4c:	4603      	mov	r3, r0
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3708      	adds	r7, #8
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}
 8011c56:	bf00      	nop
 8011c58:	0801735c 	.word	0x0801735c

08011c5c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b08e      	sub	sp, #56	; 0x38
 8011c60:	af04      	add	r7, sp, #16
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011c66:	4b79      	ldr	r3, [pc, #484]	; (8011e4c <icmp_input+0x1f0>)
 8011c68:	689b      	ldr	r3, [r3, #8]
 8011c6a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	f003 030f 	and.w	r3, r3, #15
 8011c74:	b2db      	uxtb	r3, r3
 8011c76:	009b      	lsls	r3, r3, #2
 8011c78:	b2db      	uxtb	r3, r3
 8011c7a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011c7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c7e:	2b13      	cmp	r3, #19
 8011c80:	f240 80cd 	bls.w	8011e1e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	895b      	ldrh	r3, [r3, #10]
 8011c88:	2b03      	cmp	r3, #3
 8011c8a:	f240 80ca 	bls.w	8011e22 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011c98:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	f000 80b7 	beq.w	8011e10 <icmp_input+0x1b4>
 8011ca2:	2b08      	cmp	r3, #8
 8011ca4:	f040 80b7 	bne.w	8011e16 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011ca8:	4b69      	ldr	r3, [pc, #420]	; (8011e50 <icmp_input+0x1f4>)
 8011caa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011cac:	4b67      	ldr	r3, [pc, #412]	; (8011e4c <icmp_input+0x1f0>)
 8011cae:	695b      	ldr	r3, [r3, #20]
 8011cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011cb4:	2be0      	cmp	r3, #224	; 0xe0
 8011cb6:	f000 80bb 	beq.w	8011e30 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011cba:	4b64      	ldr	r3, [pc, #400]	; (8011e4c <icmp_input+0x1f0>)
 8011cbc:	695b      	ldr	r3, [r3, #20]
 8011cbe:	4a63      	ldr	r2, [pc, #396]	; (8011e4c <icmp_input+0x1f0>)
 8011cc0:	6812      	ldr	r2, [r2, #0]
 8011cc2:	4611      	mov	r1, r2
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f000 fbed 	bl	80124a4 <ip4_addr_isbroadcast_u32>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	f040 80b1 	bne.w	8011e34 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	891b      	ldrh	r3, [r3, #8]
 8011cd6:	2b07      	cmp	r3, #7
 8011cd8:	f240 80a5 	bls.w	8011e26 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011cdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011cde:	330e      	adds	r3, #14
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f7f8 fc8e 	bl	800a604 <pbuf_add_header>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d04b      	beq.n	8011d86 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	891a      	ldrh	r2, [r3, #8]
 8011cf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011cf4:	4413      	add	r3, r2
 8011cf6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	891b      	ldrh	r3, [r3, #8]
 8011cfc:	8b7a      	ldrh	r2, [r7, #26]
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	f0c0 809a 	bcc.w	8011e38 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011d04:	8b7b      	ldrh	r3, [r7, #26]
 8011d06:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	200e      	movs	r0, #14
 8011d0e:	f7f8 fa2b 	bl	800a168 <pbuf_alloc>
 8011d12:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	f000 8090 	beq.w	8011e3c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	895b      	ldrh	r3, [r3, #10]
 8011d20:	461a      	mov	r2, r3
 8011d22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d24:	3308      	adds	r3, #8
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d203      	bcs.n	8011d32 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011d2a:	6978      	ldr	r0, [r7, #20]
 8011d2c:	f7f8 fd00 	bl	800a730 <pbuf_free>
          goto icmperr;
 8011d30:	e085      	b.n	8011e3e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011d32:	697b      	ldr	r3, [r7, #20]
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f001 fb3c 	bl	80133b8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011d40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d42:	4619      	mov	r1, r3
 8011d44:	6978      	ldr	r0, [r7, #20]
 8011d46:	f7f8 fc6d 	bl	800a624 <pbuf_remove_header>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d009      	beq.n	8011d64 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011d50:	4b40      	ldr	r3, [pc, #256]	; (8011e54 <icmp_input+0x1f8>)
 8011d52:	22b6      	movs	r2, #182	; 0xb6
 8011d54:	4940      	ldr	r1, [pc, #256]	; (8011e58 <icmp_input+0x1fc>)
 8011d56:	4841      	ldr	r0, [pc, #260]	; (8011e5c <icmp_input+0x200>)
 8011d58:	f001 fb5e 	bl	8013418 <iprintf>
          pbuf_free(r);
 8011d5c:	6978      	ldr	r0, [r7, #20]
 8011d5e:	f7f8 fce7 	bl	800a730 <pbuf_free>
          goto icmperr;
 8011d62:	e06c      	b.n	8011e3e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011d64:	6879      	ldr	r1, [r7, #4]
 8011d66:	6978      	ldr	r0, [r7, #20]
 8011d68:	f7f8 fe0a 	bl	800a980 <pbuf_copy>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d003      	beq.n	8011d7a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011d72:	6978      	ldr	r0, [r7, #20]
 8011d74:	f7f8 fcdc 	bl	800a730 <pbuf_free>
          goto icmperr;
 8011d78:	e061      	b.n	8011e3e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f7f8 fcd8 	bl	800a730 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	607b      	str	r3, [r7, #4]
 8011d84:	e00f      	b.n	8011da6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011d86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d88:	330e      	adds	r3, #14
 8011d8a:	4619      	mov	r1, r3
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f7f8 fc49 	bl	800a624 <pbuf_remove_header>
 8011d92:	4603      	mov	r3, r0
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d006      	beq.n	8011da6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011d98:	4b2e      	ldr	r3, [pc, #184]	; (8011e54 <icmp_input+0x1f8>)
 8011d9a:	22c7      	movs	r2, #199	; 0xc7
 8011d9c:	4930      	ldr	r1, [pc, #192]	; (8011e60 <icmp_input+0x204>)
 8011d9e:	482f      	ldr	r0, [pc, #188]	; (8011e5c <icmp_input+0x200>)
 8011da0:	f001 fb3a 	bl	8013418 <iprintf>
          goto icmperr;
 8011da4:	e04b      	b.n	8011e3e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011dac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011dae:	4619      	mov	r1, r3
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f7f8 fc27 	bl	800a604 <pbuf_add_header>
 8011db6:	4603      	mov	r3, r0
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d12b      	bne.n	8011e14 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011dc2:	69fb      	ldr	r3, [r7, #28]
 8011dc4:	681a      	ldr	r2, [r3, #0]
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011dca:	4b20      	ldr	r3, [pc, #128]	; (8011e4c <icmp_input+0x1f0>)
 8011dcc:	691a      	ldr	r2, [r3, #16]
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	709a      	strb	r2, [r3, #2]
 8011dde:	2200      	movs	r2, #0
 8011de0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	22ff      	movs	r2, #255	; 0xff
 8011de6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	2200      	movs	r2, #0
 8011dec:	729a      	strb	r2, [r3, #10]
 8011dee:	2200      	movs	r2, #0
 8011df0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	9302      	str	r3, [sp, #8]
 8011df6:	2301      	movs	r3, #1
 8011df8:	9301      	str	r3, [sp, #4]
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	9300      	str	r3, [sp, #0]
 8011dfe:	23ff      	movs	r3, #255	; 0xff
 8011e00:	2200      	movs	r2, #0
 8011e02:	69f9      	ldr	r1, [r7, #28]
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f000 fa75 	bl	80122f4 <ip4_output_if>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011e0e:	e001      	b.n	8011e14 <icmp_input+0x1b8>
      break;
 8011e10:	bf00      	nop
 8011e12:	e000      	b.n	8011e16 <icmp_input+0x1ba>
      break;
 8011e14:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f7f8 fc8a 	bl	800a730 <pbuf_free>
  return;
 8011e1c:	e013      	b.n	8011e46 <icmp_input+0x1ea>
    goto lenerr;
 8011e1e:	bf00      	nop
 8011e20:	e002      	b.n	8011e28 <icmp_input+0x1cc>
    goto lenerr;
 8011e22:	bf00      	nop
 8011e24:	e000      	b.n	8011e28 <icmp_input+0x1cc>
        goto lenerr;
 8011e26:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f7f8 fc81 	bl	800a730 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011e2e:	e00a      	b.n	8011e46 <icmp_input+0x1ea>
        goto icmperr;
 8011e30:	bf00      	nop
 8011e32:	e004      	b.n	8011e3e <icmp_input+0x1e2>
        goto icmperr;
 8011e34:	bf00      	nop
 8011e36:	e002      	b.n	8011e3e <icmp_input+0x1e2>
          goto icmperr;
 8011e38:	bf00      	nop
 8011e3a:	e000      	b.n	8011e3e <icmp_input+0x1e2>
          goto icmperr;
 8011e3c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f7f8 fc76 	bl	800a730 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011e44:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011e46:	3728      	adds	r7, #40	; 0x28
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	20003720 	.word	0x20003720
 8011e50:	20003734 	.word	0x20003734
 8011e54:	08016e1c 	.word	0x08016e1c
 8011e58:	08016e54 	.word	0x08016e54
 8011e5c:	08016e8c 	.word	0x08016e8c
 8011e60:	08016eb4 	.word	0x08016eb4

08011e64 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b082      	sub	sp, #8
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	460b      	mov	r3, r1
 8011e6e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011e70:	78fb      	ldrb	r3, [r7, #3]
 8011e72:	461a      	mov	r2, r3
 8011e74:	2103      	movs	r1, #3
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f000 f814 	bl	8011ea4 <icmp_send_response>
}
 8011e7c:	bf00      	nop
 8011e7e:	3708      	adds	r7, #8
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}

08011e84 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b082      	sub	sp, #8
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
 8011e8c:	460b      	mov	r3, r1
 8011e8e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011e90:	78fb      	ldrb	r3, [r7, #3]
 8011e92:	461a      	mov	r2, r3
 8011e94:	210b      	movs	r1, #11
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f000 f804 	bl	8011ea4 <icmp_send_response>
}
 8011e9c:	bf00      	nop
 8011e9e:	3708      	adds	r7, #8
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}

08011ea4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b08c      	sub	sp, #48	; 0x30
 8011ea8:	af04      	add	r7, sp, #16
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	460b      	mov	r3, r1
 8011eae:	70fb      	strb	r3, [r7, #3]
 8011eb0:	4613      	mov	r3, r2
 8011eb2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011eb4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011eb8:	2124      	movs	r1, #36	; 0x24
 8011eba:	2022      	movs	r0, #34	; 0x22
 8011ebc:	f7f8 f954 	bl	800a168 <pbuf_alloc>
 8011ec0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011ec2:	69fb      	ldr	r3, [r7, #28]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d04c      	beq.n	8011f62 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011ec8:	69fb      	ldr	r3, [r7, #28]
 8011eca:	895b      	ldrh	r3, [r3, #10]
 8011ecc:	2b23      	cmp	r3, #35	; 0x23
 8011ece:	d806      	bhi.n	8011ede <icmp_send_response+0x3a>
 8011ed0:	4b26      	ldr	r3, [pc, #152]	; (8011f6c <icmp_send_response+0xc8>)
 8011ed2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011ed6:	4926      	ldr	r1, [pc, #152]	; (8011f70 <icmp_send_response+0xcc>)
 8011ed8:	4826      	ldr	r0, [pc, #152]	; (8011f74 <icmp_send_response+0xd0>)
 8011eda:	f001 fa9d 	bl	8013418 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	685b      	ldr	r3, [r3, #4]
 8011ee2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011ee4:	69fb      	ldr	r3, [r7, #28]
 8011ee6:	685b      	ldr	r3, [r3, #4]
 8011ee8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	78fa      	ldrb	r2, [r7, #3]
 8011eee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	78ba      	ldrb	r2, [r7, #2]
 8011ef4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011ef6:	697b      	ldr	r3, [r7, #20]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	711a      	strb	r2, [r3, #4]
 8011efc:	2200      	movs	r2, #0
 8011efe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	2200      	movs	r2, #0
 8011f04:	719a      	strb	r2, [r3, #6]
 8011f06:	2200      	movs	r2, #0
 8011f08:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011f0a:	69fb      	ldr	r3, [r7, #28]
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	f103 0008 	add.w	r0, r3, #8
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	221c      	movs	r2, #28
 8011f18:	4619      	mov	r1, r3
 8011f1a:	f001 fa4d 	bl	80133b8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011f1e:	69bb      	ldr	r3, [r7, #24]
 8011f20:	68db      	ldr	r3, [r3, #12]
 8011f22:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011f24:	f107 030c 	add.w	r3, r7, #12
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f000 f825 	bl	8011f78 <ip4_route>
 8011f2e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d011      	beq.n	8011f5a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	709a      	strb	r2, [r3, #2]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011f40:	f107 020c 	add.w	r2, r7, #12
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	9302      	str	r3, [sp, #8]
 8011f48:	2301      	movs	r3, #1
 8011f4a:	9301      	str	r3, [sp, #4]
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	9300      	str	r3, [sp, #0]
 8011f50:	23ff      	movs	r3, #255	; 0xff
 8011f52:	2100      	movs	r1, #0
 8011f54:	69f8      	ldr	r0, [r7, #28]
 8011f56:	f000 f9cd 	bl	80122f4 <ip4_output_if>
  }
  pbuf_free(q);
 8011f5a:	69f8      	ldr	r0, [r7, #28]
 8011f5c:	f7f8 fbe8 	bl	800a730 <pbuf_free>
 8011f60:	e000      	b.n	8011f64 <icmp_send_response+0xc0>
    return;
 8011f62:	bf00      	nop
}
 8011f64:	3720      	adds	r7, #32
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	08016e1c 	.word	0x08016e1c
 8011f70:	08016ee8 	.word	0x08016ee8
 8011f74:	08016e8c 	.word	0x08016e8c

08011f78 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b085      	sub	sp, #20
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011f80:	4b33      	ldr	r3, [pc, #204]	; (8012050 <ip4_route+0xd8>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	60fb      	str	r3, [r7, #12]
 8011f86:	e036      	b.n	8011ff6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f8e:	f003 0301 	and.w	r3, r3, #1
 8011f92:	b2db      	uxtb	r3, r3
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d02b      	beq.n	8011ff0 <ip4_route+0x78>
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f9e:	089b      	lsrs	r3, r3, #2
 8011fa0:	f003 0301 	and.w	r3, r3, #1
 8011fa4:	b2db      	uxtb	r3, r3
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d022      	beq.n	8011ff0 <ip4_route+0x78>
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	3304      	adds	r3, #4
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d01d      	beq.n	8011ff0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681a      	ldr	r2, [r3, #0]
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	3304      	adds	r3, #4
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	405a      	eors	r2, r3
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	3308      	adds	r3, #8
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	4013      	ands	r3, r2
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d101      	bne.n	8011fd0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	e038      	b.n	8012042 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011fd6:	f003 0302 	and.w	r3, r3, #2
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d108      	bne.n	8011ff0 <ip4_route+0x78>
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681a      	ldr	r2, [r3, #0]
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	330c      	adds	r3, #12
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d101      	bne.n	8011ff0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	e028      	b.n	8012042 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	60fb      	str	r3, [r7, #12]
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d1c5      	bne.n	8011f88 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011ffc:	4b15      	ldr	r3, [pc, #84]	; (8012054 <ip4_route+0xdc>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d01a      	beq.n	801203a <ip4_route+0xc2>
 8012004:	4b13      	ldr	r3, [pc, #76]	; (8012054 <ip4_route+0xdc>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801200c:	f003 0301 	and.w	r3, r3, #1
 8012010:	2b00      	cmp	r3, #0
 8012012:	d012      	beq.n	801203a <ip4_route+0xc2>
 8012014:	4b0f      	ldr	r3, [pc, #60]	; (8012054 <ip4_route+0xdc>)
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801201c:	f003 0304 	and.w	r3, r3, #4
 8012020:	2b00      	cmp	r3, #0
 8012022:	d00a      	beq.n	801203a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012024:	4b0b      	ldr	r3, [pc, #44]	; (8012054 <ip4_route+0xdc>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	3304      	adds	r3, #4
 801202a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801202c:	2b00      	cmp	r3, #0
 801202e:	d004      	beq.n	801203a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	b2db      	uxtb	r3, r3
 8012036:	2b7f      	cmp	r3, #127	; 0x7f
 8012038:	d101      	bne.n	801203e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801203a:	2300      	movs	r3, #0
 801203c:	e001      	b.n	8012042 <ip4_route+0xca>
  }

  return netif_default;
 801203e:	4b05      	ldr	r3, [pc, #20]	; (8012054 <ip4_route+0xdc>)
 8012040:	681b      	ldr	r3, [r3, #0]
}
 8012042:	4618      	mov	r0, r3
 8012044:	3714      	adds	r7, #20
 8012046:	46bd      	mov	sp, r7
 8012048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204c:	4770      	bx	lr
 801204e:	bf00      	nop
 8012050:	20008e44 	.word	0x20008e44
 8012054:	20008e48 	.word	0x20008e48

08012058 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012066:	f003 0301 	and.w	r3, r3, #1
 801206a:	b2db      	uxtb	r3, r3
 801206c:	2b00      	cmp	r3, #0
 801206e:	d016      	beq.n	801209e <ip4_input_accept+0x46>
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	3304      	adds	r3, #4
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d011      	beq.n	801209e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801207a:	4b0b      	ldr	r3, [pc, #44]	; (80120a8 <ip4_input_accept+0x50>)
 801207c:	695a      	ldr	r2, [r3, #20]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	3304      	adds	r3, #4
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	429a      	cmp	r2, r3
 8012086:	d008      	beq.n	801209a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012088:	4b07      	ldr	r3, [pc, #28]	; (80120a8 <ip4_input_accept+0x50>)
 801208a:	695b      	ldr	r3, [r3, #20]
 801208c:	6879      	ldr	r1, [r7, #4]
 801208e:	4618      	mov	r0, r3
 8012090:	f000 fa08 	bl	80124a4 <ip4_addr_isbroadcast_u32>
 8012094:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012096:	2b00      	cmp	r3, #0
 8012098:	d001      	beq.n	801209e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801209a:	2301      	movs	r3, #1
 801209c:	e000      	b.n	80120a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801209e:	2300      	movs	r3, #0
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	3708      	adds	r7, #8
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	20003720 	.word	0x20003720

080120ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b086      	sub	sp, #24
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	781b      	ldrb	r3, [r3, #0]
 80120c0:	091b      	lsrs	r3, r3, #4
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	2b04      	cmp	r3, #4
 80120c6:	d004      	beq.n	80120d2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f7f8 fb31 	bl	800a730 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80120ce:	2300      	movs	r3, #0
 80120d0:	e107      	b.n	80122e2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	f003 030f 	and.w	r3, r3, #15
 80120da:	b2db      	uxtb	r3, r3
 80120dc:	009b      	lsls	r3, r3, #2
 80120de:	b2db      	uxtb	r3, r3
 80120e0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	885b      	ldrh	r3, [r3, #2]
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	4618      	mov	r0, r3
 80120ea:	f7f7 f86d 	bl	80091c8 <lwip_htons>
 80120ee:	4603      	mov	r3, r0
 80120f0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	891b      	ldrh	r3, [r3, #8]
 80120f6:	89ba      	ldrh	r2, [r7, #12]
 80120f8:	429a      	cmp	r2, r3
 80120fa:	d204      	bcs.n	8012106 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80120fc:	89bb      	ldrh	r3, [r7, #12]
 80120fe:	4619      	mov	r1, r3
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7f8 f98f 	bl	800a424 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	895b      	ldrh	r3, [r3, #10]
 801210a:	89fa      	ldrh	r2, [r7, #14]
 801210c:	429a      	cmp	r2, r3
 801210e:	d807      	bhi.n	8012120 <ip4_input+0x74>
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	891b      	ldrh	r3, [r3, #8]
 8012114:	89ba      	ldrh	r2, [r7, #12]
 8012116:	429a      	cmp	r2, r3
 8012118:	d802      	bhi.n	8012120 <ip4_input+0x74>
 801211a:	89fb      	ldrh	r3, [r7, #14]
 801211c:	2b13      	cmp	r3, #19
 801211e:	d804      	bhi.n	801212a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f7f8 fb05 	bl	800a730 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012126:	2300      	movs	r3, #0
 8012128:	e0db      	b.n	80122e2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	691b      	ldr	r3, [r3, #16]
 801212e:	4a6f      	ldr	r2, [pc, #444]	; (80122ec <ip4_input+0x240>)
 8012130:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012132:	697b      	ldr	r3, [r7, #20]
 8012134:	68db      	ldr	r3, [r3, #12]
 8012136:	4a6d      	ldr	r2, [pc, #436]	; (80122ec <ip4_input+0x240>)
 8012138:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801213a:	4b6c      	ldr	r3, [pc, #432]	; (80122ec <ip4_input+0x240>)
 801213c:	695b      	ldr	r3, [r3, #20]
 801213e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012142:	2be0      	cmp	r3, #224	; 0xe0
 8012144:	d112      	bne.n	801216c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801214c:	f003 0301 	and.w	r3, r3, #1
 8012150:	b2db      	uxtb	r3, r3
 8012152:	2b00      	cmp	r3, #0
 8012154:	d007      	beq.n	8012166 <ip4_input+0xba>
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	3304      	adds	r3, #4
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d002      	beq.n	8012166 <ip4_input+0xba>
      netif = inp;
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	613b      	str	r3, [r7, #16]
 8012164:	e02a      	b.n	80121bc <ip4_input+0x110>
    } else {
      netif = NULL;
 8012166:	2300      	movs	r3, #0
 8012168:	613b      	str	r3, [r7, #16]
 801216a:	e027      	b.n	80121bc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801216c:	6838      	ldr	r0, [r7, #0]
 801216e:	f7ff ff73 	bl	8012058 <ip4_input_accept>
 8012172:	4603      	mov	r3, r0
 8012174:	2b00      	cmp	r3, #0
 8012176:	d002      	beq.n	801217e <ip4_input+0xd2>
      netif = inp;
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	613b      	str	r3, [r7, #16]
 801217c:	e01e      	b.n	80121bc <ip4_input+0x110>
    } else {
      netif = NULL;
 801217e:	2300      	movs	r3, #0
 8012180:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012182:	4b5a      	ldr	r3, [pc, #360]	; (80122ec <ip4_input+0x240>)
 8012184:	695b      	ldr	r3, [r3, #20]
 8012186:	b2db      	uxtb	r3, r3
 8012188:	2b7f      	cmp	r3, #127	; 0x7f
 801218a:	d017      	beq.n	80121bc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801218c:	4b58      	ldr	r3, [pc, #352]	; (80122f0 <ip4_input+0x244>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	613b      	str	r3, [r7, #16]
 8012192:	e00e      	b.n	80121b2 <ip4_input+0x106>
          if (netif == inp) {
 8012194:	693a      	ldr	r2, [r7, #16]
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	429a      	cmp	r2, r3
 801219a:	d006      	beq.n	80121aa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801219c:	6938      	ldr	r0, [r7, #16]
 801219e:	f7ff ff5b 	bl	8012058 <ip4_input_accept>
 80121a2:	4603      	mov	r3, r0
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d108      	bne.n	80121ba <ip4_input+0x10e>
 80121a8:	e000      	b.n	80121ac <ip4_input+0x100>
            continue;
 80121aa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80121ac:	693b      	ldr	r3, [r7, #16]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	613b      	str	r3, [r7, #16]
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d1ed      	bne.n	8012194 <ip4_input+0xe8>
 80121b8:	e000      	b.n	80121bc <ip4_input+0x110>
            break;
 80121ba:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80121bc:	4b4b      	ldr	r3, [pc, #300]	; (80122ec <ip4_input+0x240>)
 80121be:	691b      	ldr	r3, [r3, #16]
 80121c0:	6839      	ldr	r1, [r7, #0]
 80121c2:	4618      	mov	r0, r3
 80121c4:	f000 f96e 	bl	80124a4 <ip4_addr_isbroadcast_u32>
 80121c8:	4603      	mov	r3, r0
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d105      	bne.n	80121da <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80121ce:	4b47      	ldr	r3, [pc, #284]	; (80122ec <ip4_input+0x240>)
 80121d0:	691b      	ldr	r3, [r3, #16]
 80121d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80121d6:	2be0      	cmp	r3, #224	; 0xe0
 80121d8:	d104      	bne.n	80121e4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f7f8 faa8 	bl	800a730 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80121e0:	2300      	movs	r3, #0
 80121e2:	e07e      	b.n	80122e2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80121e4:	693b      	ldr	r3, [r7, #16]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d104      	bne.n	80121f4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f7f8 faa0 	bl	800a730 <pbuf_free>
    return ERR_OK;
 80121f0:	2300      	movs	r3, #0
 80121f2:	e076      	b.n	80122e2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	88db      	ldrh	r3, [r3, #6]
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	461a      	mov	r2, r3
 80121fc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012200:	4013      	ands	r3, r2
 8012202:	2b00      	cmp	r3, #0
 8012204:	d00b      	beq.n	801221e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f000 fc92 	bl	8012b30 <ip4_reass>
 801220c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d101      	bne.n	8012218 <ip4_input+0x16c>
      return ERR_OK;
 8012214:	2300      	movs	r3, #0
 8012216:	e064      	b.n	80122e2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	685b      	ldr	r3, [r3, #4]
 801221c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801221e:	4a33      	ldr	r2, [pc, #204]	; (80122ec <ip4_input+0x240>)
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012224:	4a31      	ldr	r2, [pc, #196]	; (80122ec <ip4_input+0x240>)
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801222a:	4a30      	ldr	r2, [pc, #192]	; (80122ec <ip4_input+0x240>)
 801222c:	697b      	ldr	r3, [r7, #20]
 801222e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	f003 030f 	and.w	r3, r3, #15
 8012238:	b2db      	uxtb	r3, r3
 801223a:	009b      	lsls	r3, r3, #2
 801223c:	b2db      	uxtb	r3, r3
 801223e:	b29a      	uxth	r2, r3
 8012240:	4b2a      	ldr	r3, [pc, #168]	; (80122ec <ip4_input+0x240>)
 8012242:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012244:	89fb      	ldrh	r3, [r7, #14]
 8012246:	4619      	mov	r1, r3
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f7f8 f9eb 	bl	800a624 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	7a5b      	ldrb	r3, [r3, #9]
 8012252:	2b11      	cmp	r3, #17
 8012254:	d006      	beq.n	8012264 <ip4_input+0x1b8>
 8012256:	2b11      	cmp	r3, #17
 8012258:	dc13      	bgt.n	8012282 <ip4_input+0x1d6>
 801225a:	2b01      	cmp	r3, #1
 801225c:	d00c      	beq.n	8012278 <ip4_input+0x1cc>
 801225e:	2b06      	cmp	r3, #6
 8012260:	d005      	beq.n	801226e <ip4_input+0x1c2>
 8012262:	e00e      	b.n	8012282 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012264:	6839      	ldr	r1, [r7, #0]
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f7fe f8e6 	bl	8010438 <udp_input>
        break;
 801226c:	e026      	b.n	80122bc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801226e:	6839      	ldr	r1, [r7, #0]
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f7fa f927 	bl	800c4c4 <tcp_input>
        break;
 8012276:	e021      	b.n	80122bc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012278:	6839      	ldr	r1, [r7, #0]
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f7ff fcee 	bl	8011c5c <icmp_input>
        break;
 8012280:	e01c      	b.n	80122bc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012282:	4b1a      	ldr	r3, [pc, #104]	; (80122ec <ip4_input+0x240>)
 8012284:	695b      	ldr	r3, [r3, #20]
 8012286:	6939      	ldr	r1, [r7, #16]
 8012288:	4618      	mov	r0, r3
 801228a:	f000 f90b 	bl	80124a4 <ip4_addr_isbroadcast_u32>
 801228e:	4603      	mov	r3, r0
 8012290:	2b00      	cmp	r3, #0
 8012292:	d10f      	bne.n	80122b4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012294:	4b15      	ldr	r3, [pc, #84]	; (80122ec <ip4_input+0x240>)
 8012296:	695b      	ldr	r3, [r3, #20]
 8012298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801229c:	2be0      	cmp	r3, #224	; 0xe0
 801229e:	d009      	beq.n	80122b4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80122a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80122a4:	4619      	mov	r1, r3
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f7f8 fa2f 	bl	800a70a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80122ac:	2102      	movs	r1, #2
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f7ff fdd8 	bl	8011e64 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f7f8 fa3b 	bl	800a730 <pbuf_free>
        break;
 80122ba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80122bc:	4b0b      	ldr	r3, [pc, #44]	; (80122ec <ip4_input+0x240>)
 80122be:	2200      	movs	r2, #0
 80122c0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80122c2:	4b0a      	ldr	r3, [pc, #40]	; (80122ec <ip4_input+0x240>)
 80122c4:	2200      	movs	r2, #0
 80122c6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80122c8:	4b08      	ldr	r3, [pc, #32]	; (80122ec <ip4_input+0x240>)
 80122ca:	2200      	movs	r2, #0
 80122cc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80122ce:	4b07      	ldr	r3, [pc, #28]	; (80122ec <ip4_input+0x240>)
 80122d0:	2200      	movs	r2, #0
 80122d2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80122d4:	4b05      	ldr	r3, [pc, #20]	; (80122ec <ip4_input+0x240>)
 80122d6:	2200      	movs	r2, #0
 80122d8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80122da:	4b04      	ldr	r3, [pc, #16]	; (80122ec <ip4_input+0x240>)
 80122dc:	2200      	movs	r2, #0
 80122de:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80122e0:	2300      	movs	r3, #0
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3718      	adds	r7, #24
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
 80122ea:	bf00      	nop
 80122ec:	20003720 	.word	0x20003720
 80122f0:	20008e44 	.word	0x20008e44

080122f4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b08a      	sub	sp, #40	; 0x28
 80122f8:	af04      	add	r7, sp, #16
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
 8012300:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d009      	beq.n	8012320 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d003      	beq.n	801231a <ip4_output_if+0x26>
 8012312:	68bb      	ldr	r3, [r7, #8]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d102      	bne.n	8012320 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801231c:	3304      	adds	r3, #4
 801231e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012320:	78fa      	ldrb	r2, [r7, #3]
 8012322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012324:	9302      	str	r3, [sp, #8]
 8012326:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801232a:	9301      	str	r3, [sp, #4]
 801232c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012330:	9300      	str	r3, [sp, #0]
 8012332:	4613      	mov	r3, r2
 8012334:	687a      	ldr	r2, [r7, #4]
 8012336:	6979      	ldr	r1, [r7, #20]
 8012338:	68f8      	ldr	r0, [r7, #12]
 801233a:	f000 f805 	bl	8012348 <ip4_output_if_src>
 801233e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012340:	4618      	mov	r0, r3
 8012342:	3718      	adds	r7, #24
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b088      	sub	sp, #32
 801234c:	af00      	add	r7, sp, #0
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	607a      	str	r2, [r7, #4]
 8012354:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	7b9b      	ldrb	r3, [r3, #14]
 801235a:	2b01      	cmp	r3, #1
 801235c:	d006      	beq.n	801236c <ip4_output_if_src+0x24>
 801235e:	4b4b      	ldr	r3, [pc, #300]	; (801248c <ip4_output_if_src+0x144>)
 8012360:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012364:	494a      	ldr	r1, [pc, #296]	; (8012490 <ip4_output_if_src+0x148>)
 8012366:	484b      	ldr	r0, [pc, #300]	; (8012494 <ip4_output_if_src+0x14c>)
 8012368:	f001 f856 	bl	8013418 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d060      	beq.n	8012434 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012372:	2314      	movs	r3, #20
 8012374:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012376:	2114      	movs	r1, #20
 8012378:	68f8      	ldr	r0, [r7, #12]
 801237a:	f7f8 f943 	bl	800a604 <pbuf_add_header>
 801237e:	4603      	mov	r3, r0
 8012380:	2b00      	cmp	r3, #0
 8012382:	d002      	beq.n	801238a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012384:	f06f 0301 	mvn.w	r3, #1
 8012388:	e07c      	b.n	8012484 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	895b      	ldrh	r3, [r3, #10]
 8012394:	2b13      	cmp	r3, #19
 8012396:	d806      	bhi.n	80123a6 <ip4_output_if_src+0x5e>
 8012398:	4b3c      	ldr	r3, [pc, #240]	; (801248c <ip4_output_if_src+0x144>)
 801239a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801239e:	493e      	ldr	r1, [pc, #248]	; (8012498 <ip4_output_if_src+0x150>)
 80123a0:	483c      	ldr	r0, [pc, #240]	; (8012494 <ip4_output_if_src+0x14c>)
 80123a2:	f001 f839 	bl	8013418 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80123a6:	69fb      	ldr	r3, [r7, #28]
 80123a8:	78fa      	ldrb	r2, [r7, #3]
 80123aa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80123ac:	69fb      	ldr	r3, [r7, #28]
 80123ae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80123b2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681a      	ldr	r2, [r3, #0]
 80123b8:	69fb      	ldr	r3, [r7, #28]
 80123ba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80123bc:	8b7b      	ldrh	r3, [r7, #26]
 80123be:	089b      	lsrs	r3, r3, #2
 80123c0:	b29b      	uxth	r3, r3
 80123c2:	b2db      	uxtb	r3, r3
 80123c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123c8:	b2da      	uxtb	r2, r3
 80123ca:	69fb      	ldr	r3, [r7, #28]
 80123cc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80123d4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	891b      	ldrh	r3, [r3, #8]
 80123da:	4618      	mov	r0, r3
 80123dc:	f7f6 fef4 	bl	80091c8 <lwip_htons>
 80123e0:	4603      	mov	r3, r0
 80123e2:	461a      	mov	r2, r3
 80123e4:	69fb      	ldr	r3, [r7, #28]
 80123e6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80123e8:	69fb      	ldr	r3, [r7, #28]
 80123ea:	2200      	movs	r2, #0
 80123ec:	719a      	strb	r2, [r3, #6]
 80123ee:	2200      	movs	r2, #0
 80123f0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80123f2:	4b2a      	ldr	r3, [pc, #168]	; (801249c <ip4_output_if_src+0x154>)
 80123f4:	881b      	ldrh	r3, [r3, #0]
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7f6 fee6 	bl	80091c8 <lwip_htons>
 80123fc:	4603      	mov	r3, r0
 80123fe:	461a      	mov	r2, r3
 8012400:	69fb      	ldr	r3, [r7, #28]
 8012402:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012404:	4b25      	ldr	r3, [pc, #148]	; (801249c <ip4_output_if_src+0x154>)
 8012406:	881b      	ldrh	r3, [r3, #0]
 8012408:	3301      	adds	r3, #1
 801240a:	b29a      	uxth	r2, r3
 801240c:	4b23      	ldr	r3, [pc, #140]	; (801249c <ip4_output_if_src+0x154>)
 801240e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d104      	bne.n	8012420 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012416:	4b22      	ldr	r3, [pc, #136]	; (80124a0 <ip4_output_if_src+0x158>)
 8012418:	681a      	ldr	r2, [r3, #0]
 801241a:	69fb      	ldr	r3, [r7, #28]
 801241c:	60da      	str	r2, [r3, #12]
 801241e:	e003      	b.n	8012428 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	681a      	ldr	r2, [r3, #0]
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012428:	69fb      	ldr	r3, [r7, #28]
 801242a:	2200      	movs	r2, #0
 801242c:	729a      	strb	r2, [r3, #10]
 801242e:	2200      	movs	r2, #0
 8012430:	72da      	strb	r2, [r3, #11]
 8012432:	e00f      	b.n	8012454 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	895b      	ldrh	r3, [r3, #10]
 8012438:	2b13      	cmp	r3, #19
 801243a:	d802      	bhi.n	8012442 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801243c:	f06f 0301 	mvn.w	r3, #1
 8012440:	e020      	b.n	8012484 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	691b      	ldr	r3, [r3, #16]
 801244c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801244e:	f107 0314 	add.w	r3, r7, #20
 8012452:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012456:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012458:	2b00      	cmp	r3, #0
 801245a:	d00c      	beq.n	8012476 <ip4_output_if_src+0x12e>
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	891a      	ldrh	r2, [r3, #8]
 8012460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012462:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012464:	429a      	cmp	r2, r3
 8012466:	d906      	bls.n	8012476 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012468:	687a      	ldr	r2, [r7, #4]
 801246a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801246c:	68f8      	ldr	r0, [r7, #12]
 801246e:	f000 fd53 	bl	8012f18 <ip4_frag>
 8012472:	4603      	mov	r3, r0
 8012474:	e006      	b.n	8012484 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012478:	695b      	ldr	r3, [r3, #20]
 801247a:	687a      	ldr	r2, [r7, #4]
 801247c:	68f9      	ldr	r1, [r7, #12]
 801247e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012480:	4798      	blx	r3
 8012482:	4603      	mov	r3, r0
}
 8012484:	4618      	mov	r0, r3
 8012486:	3720      	adds	r7, #32
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}
 801248c:	08016f14 	.word	0x08016f14
 8012490:	08016f48 	.word	0x08016f48
 8012494:	08016f54 	.word	0x08016f54
 8012498:	08016f7c 	.word	0x08016f7c
 801249c:	20008fa2 	.word	0x20008fa2
 80124a0:	08017358 	.word	0x08017358

080124a4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80124a4:	b480      	push	{r7}
 80124a6:	b085      	sub	sp, #20
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124b8:	d002      	beq.n	80124c0 <ip4_addr_isbroadcast_u32+0x1c>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d101      	bne.n	80124c4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80124c0:	2301      	movs	r3, #1
 80124c2:	e02a      	b.n	801251a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80124ca:	f003 0302 	and.w	r3, r3, #2
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d101      	bne.n	80124d6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80124d2:	2300      	movs	r3, #0
 80124d4:	e021      	b.n	801251a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	3304      	adds	r3, #4
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	687a      	ldr	r2, [r7, #4]
 80124de:	429a      	cmp	r2, r3
 80124e0:	d101      	bne.n	80124e6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80124e2:	2300      	movs	r3, #0
 80124e4:	e019      	b.n	801251a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80124e6:	68fa      	ldr	r2, [r7, #12]
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	3304      	adds	r3, #4
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	405a      	eors	r2, r3
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	3308      	adds	r3, #8
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	4013      	ands	r3, r2
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d10d      	bne.n	8012518 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	3308      	adds	r3, #8
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	43da      	mvns	r2, r3
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	3308      	adds	r3, #8
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012510:	429a      	cmp	r2, r3
 8012512:	d101      	bne.n	8012518 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012514:	2301      	movs	r3, #1
 8012516:	e000      	b.n	801251a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012518:	2300      	movs	r3, #0
  }
}
 801251a:	4618      	mov	r0, r3
 801251c:	3714      	adds	r7, #20
 801251e:	46bd      	mov	sp, r7
 8012520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012524:	4770      	bx	lr
	...

08012528 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b084      	sub	sp, #16
 801252c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801252e:	2300      	movs	r3, #0
 8012530:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012532:	4b12      	ldr	r3, [pc, #72]	; (801257c <ip_reass_tmr+0x54>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012538:	e018      	b.n	801256c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	7fdb      	ldrb	r3, [r3, #31]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d00b      	beq.n	801255a <ip_reass_tmr+0x32>
      r->timer--;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	7fdb      	ldrb	r3, [r3, #31]
 8012546:	3b01      	subs	r3, #1
 8012548:	b2da      	uxtb	r2, r3
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	60fb      	str	r3, [r7, #12]
 8012558:	e008      	b.n	801256c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012564:	68b9      	ldr	r1, [r7, #8]
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f000 f80a 	bl	8012580 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d1e3      	bne.n	801253a <ip_reass_tmr+0x12>
    }
  }
}
 8012572:	bf00      	nop
 8012574:	bf00      	nop
 8012576:	3710      	adds	r7, #16
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}
 801257c:	20008fa4 	.word	0x20008fa4

08012580 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b088      	sub	sp, #32
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801258a:	2300      	movs	r3, #0
 801258c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801258e:	683a      	ldr	r2, [r7, #0]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	429a      	cmp	r2, r3
 8012594:	d105      	bne.n	80125a2 <ip_reass_free_complete_datagram+0x22>
 8012596:	4b45      	ldr	r3, [pc, #276]	; (80126ac <ip_reass_free_complete_datagram+0x12c>)
 8012598:	22ab      	movs	r2, #171	; 0xab
 801259a:	4945      	ldr	r1, [pc, #276]	; (80126b0 <ip_reass_free_complete_datagram+0x130>)
 801259c:	4845      	ldr	r0, [pc, #276]	; (80126b4 <ip_reass_free_complete_datagram+0x134>)
 801259e:	f000 ff3b 	bl	8013418 <iprintf>
  if (prev != NULL) {
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d00a      	beq.n	80125be <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	687a      	ldr	r2, [r7, #4]
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d005      	beq.n	80125be <ip_reass_free_complete_datagram+0x3e>
 80125b2:	4b3e      	ldr	r3, [pc, #248]	; (80126ac <ip_reass_free_complete_datagram+0x12c>)
 80125b4:	22ad      	movs	r2, #173	; 0xad
 80125b6:	4940      	ldr	r1, [pc, #256]	; (80126b8 <ip_reass_free_complete_datagram+0x138>)
 80125b8:	483e      	ldr	r0, [pc, #248]	; (80126b4 <ip_reass_free_complete_datagram+0x134>)
 80125ba:	f000 ff2d 	bl	8013418 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	685b      	ldr	r3, [r3, #4]
 80125c2:	685b      	ldr	r3, [r3, #4]
 80125c4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	889b      	ldrh	r3, [r3, #4]
 80125ca:	b29b      	uxth	r3, r3
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d12a      	bne.n	8012626 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	681a      	ldr	r2, [r3, #0]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80125de:	69bb      	ldr	r3, [r7, #24]
 80125e0:	6858      	ldr	r0, [r3, #4]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	3308      	adds	r3, #8
 80125e6:	2214      	movs	r2, #20
 80125e8:	4619      	mov	r1, r3
 80125ea:	f000 fee5 	bl	80133b8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80125ee:	2101      	movs	r1, #1
 80125f0:	69b8      	ldr	r0, [r7, #24]
 80125f2:	f7ff fc47 	bl	8011e84 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80125f6:	69b8      	ldr	r0, [r7, #24]
 80125f8:	f7f8 f922 	bl	800a840 <pbuf_clen>
 80125fc:	4603      	mov	r3, r0
 80125fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012600:	8bfa      	ldrh	r2, [r7, #30]
 8012602:	8a7b      	ldrh	r3, [r7, #18]
 8012604:	4413      	add	r3, r2
 8012606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801260a:	db05      	blt.n	8012618 <ip_reass_free_complete_datagram+0x98>
 801260c:	4b27      	ldr	r3, [pc, #156]	; (80126ac <ip_reass_free_complete_datagram+0x12c>)
 801260e:	22bc      	movs	r2, #188	; 0xbc
 8012610:	492a      	ldr	r1, [pc, #168]	; (80126bc <ip_reass_free_complete_datagram+0x13c>)
 8012612:	4828      	ldr	r0, [pc, #160]	; (80126b4 <ip_reass_free_complete_datagram+0x134>)
 8012614:	f000 ff00 	bl	8013418 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012618:	8bfa      	ldrh	r2, [r7, #30]
 801261a:	8a7b      	ldrh	r3, [r7, #18]
 801261c:	4413      	add	r3, r2
 801261e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012620:	69b8      	ldr	r0, [r7, #24]
 8012622:	f7f8 f885 	bl	800a730 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	685b      	ldr	r3, [r3, #4]
 801262a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801262c:	e01f      	b.n	801266e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801262e:	69bb      	ldr	r3, [r7, #24]
 8012630:	685b      	ldr	r3, [r3, #4]
 8012632:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012634:	69bb      	ldr	r3, [r7, #24]
 8012636:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801263e:	68f8      	ldr	r0, [r7, #12]
 8012640:	f7f8 f8fe 	bl	800a840 <pbuf_clen>
 8012644:	4603      	mov	r3, r0
 8012646:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012648:	8bfa      	ldrh	r2, [r7, #30]
 801264a:	8a7b      	ldrh	r3, [r7, #18]
 801264c:	4413      	add	r3, r2
 801264e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012652:	db05      	blt.n	8012660 <ip_reass_free_complete_datagram+0xe0>
 8012654:	4b15      	ldr	r3, [pc, #84]	; (80126ac <ip_reass_free_complete_datagram+0x12c>)
 8012656:	22cc      	movs	r2, #204	; 0xcc
 8012658:	4918      	ldr	r1, [pc, #96]	; (80126bc <ip_reass_free_complete_datagram+0x13c>)
 801265a:	4816      	ldr	r0, [pc, #88]	; (80126b4 <ip_reass_free_complete_datagram+0x134>)
 801265c:	f000 fedc 	bl	8013418 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012660:	8bfa      	ldrh	r2, [r7, #30]
 8012662:	8a7b      	ldrh	r3, [r7, #18]
 8012664:	4413      	add	r3, r2
 8012666:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012668:	68f8      	ldr	r0, [r7, #12]
 801266a:	f7f8 f861 	bl	800a730 <pbuf_free>
  while (p != NULL) {
 801266e:	69bb      	ldr	r3, [r7, #24]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d1dc      	bne.n	801262e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012674:	6839      	ldr	r1, [r7, #0]
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f000 f8c2 	bl	8012800 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801267c:	4b10      	ldr	r3, [pc, #64]	; (80126c0 <ip_reass_free_complete_datagram+0x140>)
 801267e:	881b      	ldrh	r3, [r3, #0]
 8012680:	8bfa      	ldrh	r2, [r7, #30]
 8012682:	429a      	cmp	r2, r3
 8012684:	d905      	bls.n	8012692 <ip_reass_free_complete_datagram+0x112>
 8012686:	4b09      	ldr	r3, [pc, #36]	; (80126ac <ip_reass_free_complete_datagram+0x12c>)
 8012688:	22d2      	movs	r2, #210	; 0xd2
 801268a:	490e      	ldr	r1, [pc, #56]	; (80126c4 <ip_reass_free_complete_datagram+0x144>)
 801268c:	4809      	ldr	r0, [pc, #36]	; (80126b4 <ip_reass_free_complete_datagram+0x134>)
 801268e:	f000 fec3 	bl	8013418 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012692:	4b0b      	ldr	r3, [pc, #44]	; (80126c0 <ip_reass_free_complete_datagram+0x140>)
 8012694:	881a      	ldrh	r2, [r3, #0]
 8012696:	8bfb      	ldrh	r3, [r7, #30]
 8012698:	1ad3      	subs	r3, r2, r3
 801269a:	b29a      	uxth	r2, r3
 801269c:	4b08      	ldr	r3, [pc, #32]	; (80126c0 <ip_reass_free_complete_datagram+0x140>)
 801269e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80126a0:	8bfb      	ldrh	r3, [r7, #30]
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	3720      	adds	r7, #32
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd80      	pop	{r7, pc}
 80126aa:	bf00      	nop
 80126ac:	08016fac 	.word	0x08016fac
 80126b0:	08016fe8 	.word	0x08016fe8
 80126b4:	08016ff4 	.word	0x08016ff4
 80126b8:	0801701c 	.word	0x0801701c
 80126bc:	08017030 	.word	0x08017030
 80126c0:	20008fa8 	.word	0x20008fa8
 80126c4:	08017050 	.word	0x08017050

080126c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b08a      	sub	sp, #40	; 0x28
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80126d2:	2300      	movs	r3, #0
 80126d4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80126d6:	2300      	movs	r3, #0
 80126d8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80126da:	2300      	movs	r3, #0
 80126dc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80126de:	2300      	movs	r3, #0
 80126e0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80126e2:	2300      	movs	r3, #0
 80126e4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80126e6:	4b28      	ldr	r3, [pc, #160]	; (8012788 <ip_reass_remove_oldest_datagram+0xc0>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80126ec:	e030      	b.n	8012750 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80126ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f0:	695a      	ldr	r2, [r3, #20]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	68db      	ldr	r3, [r3, #12]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d10c      	bne.n	8012714 <ip_reass_remove_oldest_datagram+0x4c>
 80126fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fc:	699a      	ldr	r2, [r3, #24]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	691b      	ldr	r3, [r3, #16]
 8012702:	429a      	cmp	r2, r3
 8012704:	d106      	bne.n	8012714 <ip_reass_remove_oldest_datagram+0x4c>
 8012706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012708:	899a      	ldrh	r2, [r3, #12]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	889b      	ldrh	r3, [r3, #4]
 801270e:	b29b      	uxth	r3, r3
 8012710:	429a      	cmp	r2, r3
 8012712:	d014      	beq.n	801273e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	3301      	adds	r3, #1
 8012718:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801271a:	6a3b      	ldr	r3, [r7, #32]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d104      	bne.n	801272a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012722:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012724:	69fb      	ldr	r3, [r7, #28]
 8012726:	61bb      	str	r3, [r7, #24]
 8012728:	e009      	b.n	801273e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272c:	7fda      	ldrb	r2, [r3, #31]
 801272e:	6a3b      	ldr	r3, [r7, #32]
 8012730:	7fdb      	ldrb	r3, [r3, #31]
 8012732:	429a      	cmp	r2, r3
 8012734:	d803      	bhi.n	801273e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012738:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d001      	beq.n	801274a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012748:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012752:	2b00      	cmp	r3, #0
 8012754:	d1cb      	bne.n	80126ee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012756:	6a3b      	ldr	r3, [r7, #32]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d008      	beq.n	801276e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801275c:	69b9      	ldr	r1, [r7, #24]
 801275e:	6a38      	ldr	r0, [r7, #32]
 8012760:	f7ff ff0e 	bl	8012580 <ip_reass_free_complete_datagram>
 8012764:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012766:	697a      	ldr	r2, [r7, #20]
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	4413      	add	r3, r2
 801276c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801276e:	697a      	ldr	r2, [r7, #20]
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	429a      	cmp	r2, r3
 8012774:	da02      	bge.n	801277c <ip_reass_remove_oldest_datagram+0xb4>
 8012776:	693b      	ldr	r3, [r7, #16]
 8012778:	2b01      	cmp	r3, #1
 801277a:	dcac      	bgt.n	80126d6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801277c:	697b      	ldr	r3, [r7, #20]
}
 801277e:	4618      	mov	r0, r3
 8012780:	3728      	adds	r7, #40	; 0x28
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}
 8012786:	bf00      	nop
 8012788:	20008fa4 	.word	0x20008fa4

0801278c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b084      	sub	sp, #16
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012796:	2004      	movs	r0, #4
 8012798:	f7f7 f96c 	bl	8009a74 <memp_malloc>
 801279c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d110      	bne.n	80127c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80127a4:	6839      	ldr	r1, [r7, #0]
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f7ff ff8e 	bl	80126c8 <ip_reass_remove_oldest_datagram>
 80127ac:	4602      	mov	r2, r0
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	4293      	cmp	r3, r2
 80127b2:	dc03      	bgt.n	80127bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80127b4:	2004      	movs	r0, #4
 80127b6:	f7f7 f95d 	bl	8009a74 <memp_malloc>
 80127ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d101      	bne.n	80127c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80127c2:	2300      	movs	r3, #0
 80127c4:	e016      	b.n	80127f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80127c6:	2220      	movs	r2, #32
 80127c8:	2100      	movs	r1, #0
 80127ca:	68f8      	ldr	r0, [r7, #12]
 80127cc:	f000 fe1c 	bl	8013408 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	220f      	movs	r2, #15
 80127d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80127d6:	4b09      	ldr	r3, [pc, #36]	; (80127fc <ip_reass_enqueue_new_datagram+0x70>)
 80127d8:	681a      	ldr	r2, [r3, #0]
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80127de:	4a07      	ldr	r2, [pc, #28]	; (80127fc <ip_reass_enqueue_new_datagram+0x70>)
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	3308      	adds	r3, #8
 80127e8:	2214      	movs	r2, #20
 80127ea:	6879      	ldr	r1, [r7, #4]
 80127ec:	4618      	mov	r0, r3
 80127ee:	f000 fde3 	bl	80133b8 <memcpy>
  return ipr;
 80127f2:	68fb      	ldr	r3, [r7, #12]
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3710      	adds	r7, #16
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}
 80127fc:	20008fa4 	.word	0x20008fa4

08012800 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801280a:	4b10      	ldr	r3, [pc, #64]	; (801284c <ip_reass_dequeue_datagram+0x4c>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	429a      	cmp	r2, r3
 8012812:	d104      	bne.n	801281e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	4a0c      	ldr	r2, [pc, #48]	; (801284c <ip_reass_dequeue_datagram+0x4c>)
 801281a:	6013      	str	r3, [r2, #0]
 801281c:	e00d      	b.n	801283a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d106      	bne.n	8012832 <ip_reass_dequeue_datagram+0x32>
 8012824:	4b0a      	ldr	r3, [pc, #40]	; (8012850 <ip_reass_dequeue_datagram+0x50>)
 8012826:	f240 1245 	movw	r2, #325	; 0x145
 801282a:	490a      	ldr	r1, [pc, #40]	; (8012854 <ip_reass_dequeue_datagram+0x54>)
 801282c:	480a      	ldr	r0, [pc, #40]	; (8012858 <ip_reass_dequeue_datagram+0x58>)
 801282e:	f000 fdf3 	bl	8013418 <iprintf>
    prev->next = ipr->next;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681a      	ldr	r2, [r3, #0]
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801283a:	6879      	ldr	r1, [r7, #4]
 801283c:	2004      	movs	r0, #4
 801283e:	f7f7 f965 	bl	8009b0c <memp_free>
}
 8012842:	bf00      	nop
 8012844:	3708      	adds	r7, #8
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}
 801284a:	bf00      	nop
 801284c:	20008fa4 	.word	0x20008fa4
 8012850:	08016fac 	.word	0x08016fac
 8012854:	08017074 	.word	0x08017074
 8012858:	08016ff4 	.word	0x08016ff4

0801285c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b08c      	sub	sp, #48	; 0x30
 8012860:	af00      	add	r7, sp, #0
 8012862:	60f8      	str	r0, [r7, #12]
 8012864:	60b9      	str	r1, [r7, #8]
 8012866:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012868:	2300      	movs	r3, #0
 801286a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801286c:	2301      	movs	r3, #1
 801286e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	685b      	ldr	r3, [r3, #4]
 8012874:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012876:	69fb      	ldr	r3, [r7, #28]
 8012878:	885b      	ldrh	r3, [r3, #2]
 801287a:	b29b      	uxth	r3, r3
 801287c:	4618      	mov	r0, r3
 801287e:	f7f6 fca3 	bl	80091c8 <lwip_htons>
 8012882:	4603      	mov	r3, r0
 8012884:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012886:	69fb      	ldr	r3, [r7, #28]
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	f003 030f 	and.w	r3, r3, #15
 801288e:	b2db      	uxtb	r3, r3
 8012890:	009b      	lsls	r3, r3, #2
 8012892:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012894:	7e7b      	ldrb	r3, [r7, #25]
 8012896:	b29b      	uxth	r3, r3
 8012898:	8b7a      	ldrh	r2, [r7, #26]
 801289a:	429a      	cmp	r2, r3
 801289c:	d202      	bcs.n	80128a4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801289e:	f04f 33ff 	mov.w	r3, #4294967295
 80128a2:	e135      	b.n	8012b10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80128a4:	7e7b      	ldrb	r3, [r7, #25]
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	8b7a      	ldrh	r2, [r7, #26]
 80128aa:	1ad3      	subs	r3, r2, r3
 80128ac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80128ae:	69fb      	ldr	r3, [r7, #28]
 80128b0:	88db      	ldrh	r3, [r3, #6]
 80128b2:	b29b      	uxth	r3, r3
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7f6 fc87 	bl	80091c8 <lwip_htons>
 80128ba:	4603      	mov	r3, r0
 80128bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80128c0:	b29b      	uxth	r3, r3
 80128c2:	00db      	lsls	r3, r3, #3
 80128c4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80128cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ce:	2200      	movs	r2, #0
 80128d0:	701a      	strb	r2, [r3, #0]
 80128d2:	2200      	movs	r2, #0
 80128d4:	705a      	strb	r2, [r3, #1]
 80128d6:	2200      	movs	r2, #0
 80128d8:	709a      	strb	r2, [r3, #2]
 80128da:	2200      	movs	r2, #0
 80128dc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80128de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e0:	8afa      	ldrh	r2, [r7, #22]
 80128e2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80128e4:	8afa      	ldrh	r2, [r7, #22]
 80128e6:	8b7b      	ldrh	r3, [r7, #26]
 80128e8:	4413      	add	r3, r2
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80128f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f2:	88db      	ldrh	r3, [r3, #6]
 80128f4:	b29b      	uxth	r3, r3
 80128f6:	8afa      	ldrh	r2, [r7, #22]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d902      	bls.n	8012902 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80128fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012900:	e106      	b.n	8012b10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	685b      	ldr	r3, [r3, #4]
 8012906:	627b      	str	r3, [r7, #36]	; 0x24
 8012908:	e068      	b.n	80129dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801290c:	685b      	ldr	r3, [r3, #4]
 801290e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012912:	889b      	ldrh	r3, [r3, #4]
 8012914:	b29a      	uxth	r2, r3
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	889b      	ldrh	r3, [r3, #4]
 801291a:	b29b      	uxth	r3, r3
 801291c:	429a      	cmp	r2, r3
 801291e:	d235      	bcs.n	801298c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012924:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012928:	2b00      	cmp	r3, #0
 801292a:	d020      	beq.n	801296e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801292c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801292e:	889b      	ldrh	r3, [r3, #4]
 8012930:	b29a      	uxth	r2, r3
 8012932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012934:	88db      	ldrh	r3, [r3, #6]
 8012936:	b29b      	uxth	r3, r3
 8012938:	429a      	cmp	r2, r3
 801293a:	d307      	bcc.n	801294c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801293e:	88db      	ldrh	r3, [r3, #6]
 8012940:	b29a      	uxth	r2, r3
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	889b      	ldrh	r3, [r3, #4]
 8012946:	b29b      	uxth	r3, r3
 8012948:	429a      	cmp	r2, r3
 801294a:	d902      	bls.n	8012952 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801294c:	f04f 33ff 	mov.w	r3, #4294967295
 8012950:	e0de      	b.n	8012b10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012954:	68ba      	ldr	r2, [r7, #8]
 8012956:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295a:	88db      	ldrh	r3, [r3, #6]
 801295c:	b29a      	uxth	r2, r3
 801295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012960:	889b      	ldrh	r3, [r3, #4]
 8012962:	b29b      	uxth	r3, r3
 8012964:	429a      	cmp	r2, r3
 8012966:	d03d      	beq.n	80129e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012968:	2300      	movs	r3, #0
 801296a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801296c:	e03a      	b.n	80129e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012970:	88db      	ldrh	r3, [r3, #6]
 8012972:	b29a      	uxth	r2, r3
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	889b      	ldrh	r3, [r3, #4]
 8012978:	b29b      	uxth	r3, r3
 801297a:	429a      	cmp	r2, r3
 801297c:	d902      	bls.n	8012984 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801297e:	f04f 33ff 	mov.w	r3, #4294967295
 8012982:	e0c5      	b.n	8012b10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	68ba      	ldr	r2, [r7, #8]
 8012988:	605a      	str	r2, [r3, #4]
      break;
 801298a:	e02b      	b.n	80129e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801298e:	889b      	ldrh	r3, [r3, #4]
 8012990:	b29a      	uxth	r2, r3
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	889b      	ldrh	r3, [r3, #4]
 8012996:	b29b      	uxth	r3, r3
 8012998:	429a      	cmp	r2, r3
 801299a:	d102      	bne.n	80129a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801299c:	f04f 33ff 	mov.w	r3, #4294967295
 80129a0:	e0b6      	b.n	8012b10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80129a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a4:	889b      	ldrh	r3, [r3, #4]
 80129a6:	b29a      	uxth	r2, r3
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	88db      	ldrh	r3, [r3, #6]
 80129ac:	b29b      	uxth	r3, r3
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d202      	bcs.n	80129b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80129b2:	f04f 33ff 	mov.w	r3, #4294967295
 80129b6:	e0ab      	b.n	8012b10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80129b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d009      	beq.n	80129d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80129be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c0:	88db      	ldrh	r3, [r3, #6]
 80129c2:	b29a      	uxth	r2, r3
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	889b      	ldrh	r3, [r3, #4]
 80129c8:	b29b      	uxth	r3, r3
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d001      	beq.n	80129d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80129ce:	2300      	movs	r3, #0
 80129d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80129dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d193      	bne.n	801290a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80129e2:	e000      	b.n	80129e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80129e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80129e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d12d      	bne.n	8012a48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80129ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d01c      	beq.n	8012a2c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80129f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f4:	88db      	ldrh	r3, [r3, #6]
 80129f6:	b29a      	uxth	r2, r3
 80129f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129fa:	889b      	ldrh	r3, [r3, #4]
 80129fc:	b29b      	uxth	r3, r3
 80129fe:	429a      	cmp	r2, r3
 8012a00:	d906      	bls.n	8012a10 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012a02:	4b45      	ldr	r3, [pc, #276]	; (8012b18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012a04:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012a08:	4944      	ldr	r1, [pc, #272]	; (8012b1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012a0a:	4845      	ldr	r0, [pc, #276]	; (8012b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012a0c:	f000 fd04 	bl	8013418 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a12:	68ba      	ldr	r2, [r7, #8]
 8012a14:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a18:	88db      	ldrh	r3, [r3, #6]
 8012a1a:	b29a      	uxth	r2, r3
 8012a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1e:	889b      	ldrh	r3, [r3, #4]
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d010      	beq.n	8012a48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012a26:	2300      	movs	r3, #0
 8012a28:	623b      	str	r3, [r7, #32]
 8012a2a:	e00d      	b.n	8012a48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d006      	beq.n	8012a42 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012a34:	4b38      	ldr	r3, [pc, #224]	; (8012b18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012a36:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012a3a:	493a      	ldr	r1, [pc, #232]	; (8012b24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012a3c:	4838      	ldr	r0, [pc, #224]	; (8012b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012a3e:	f000 fceb 	bl	8013418 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	68ba      	ldr	r2, [r7, #8]
 8012a46:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d105      	bne.n	8012a5a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	7f9b      	ldrb	r3, [r3, #30]
 8012a52:	f003 0301 	and.w	r3, r3, #1
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d059      	beq.n	8012b0e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012a5a:	6a3b      	ldr	r3, [r7, #32]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d04f      	beq.n	8012b00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d006      	beq.n	8012a76 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	685b      	ldr	r3, [r3, #4]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	889b      	ldrh	r3, [r3, #4]
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d002      	beq.n	8012a7c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012a76:	2300      	movs	r3, #0
 8012a78:	623b      	str	r3, [r7, #32]
 8012a7a:	e041      	b.n	8012b00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a7e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012a86:	e012      	b.n	8012aae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a90:	88db      	ldrh	r3, [r3, #6]
 8012a92:	b29a      	uxth	r2, r3
 8012a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a96:	889b      	ldrh	r3, [r3, #4]
 8012a98:	b29b      	uxth	r3, r3
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d002      	beq.n	8012aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	623b      	str	r3, [r7, #32]
            break;
 8012aa2:	e007      	b.n	8012ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d1e9      	bne.n	8012a88 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012ab4:	6a3b      	ldr	r3, [r7, #32]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d022      	beq.n	8012b00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	685b      	ldr	r3, [r3, #4]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d106      	bne.n	8012ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012ac2:	4b15      	ldr	r3, [pc, #84]	; (8012b18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012ac4:	f240 12df 	movw	r2, #479	; 0x1df
 8012ac8:	4917      	ldr	r1, [pc, #92]	; (8012b28 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012aca:	4815      	ldr	r0, [pc, #84]	; (8012b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012acc:	f000 fca4 	bl	8013418 <iprintf>
          LWIP_ASSERT("sanity check",
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	685b      	ldr	r3, [r3, #4]
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ad8:	429a      	cmp	r2, r3
 8012ada:	d106      	bne.n	8012aea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012adc:	4b0e      	ldr	r3, [pc, #56]	; (8012b18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012ade:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012ae2:	4911      	ldr	r1, [pc, #68]	; (8012b28 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012ae4:	480e      	ldr	r0, [pc, #56]	; (8012b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012ae6:	f000 fc97 	bl	8013418 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d006      	beq.n	8012b00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012af2:	4b09      	ldr	r3, [pc, #36]	; (8012b18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012af4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012af8:	490c      	ldr	r1, [pc, #48]	; (8012b2c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012afa:	4809      	ldr	r0, [pc, #36]	; (8012b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012afc:	f000 fc8c 	bl	8013418 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012b00:	6a3b      	ldr	r3, [r7, #32]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	bf14      	ite	ne
 8012b06:	2301      	movne	r3, #1
 8012b08:	2300      	moveq	r3, #0
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	e000      	b.n	8012b10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012b0e:	2300      	movs	r3, #0
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	3730      	adds	r7, #48	; 0x30
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	08016fac 	.word	0x08016fac
 8012b1c:	08017090 	.word	0x08017090
 8012b20:	08016ff4 	.word	0x08016ff4
 8012b24:	080170b0 	.word	0x080170b0
 8012b28:	080170e8 	.word	0x080170e8
 8012b2c:	080170f8 	.word	0x080170f8

08012b30 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b08e      	sub	sp, #56	; 0x38
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	685b      	ldr	r3, [r3, #4]
 8012b3c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b40:	781b      	ldrb	r3, [r3, #0]
 8012b42:	f003 030f 	and.w	r3, r3, #15
 8012b46:	b2db      	uxtb	r3, r3
 8012b48:	009b      	lsls	r3, r3, #2
 8012b4a:	b2db      	uxtb	r3, r3
 8012b4c:	2b14      	cmp	r3, #20
 8012b4e:	f040 8171 	bne.w	8012e34 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b54:	88db      	ldrh	r3, [r3, #6]
 8012b56:	b29b      	uxth	r3, r3
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7f6 fb35 	bl	80091c8 <lwip_htons>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b64:	b29b      	uxth	r3, r3
 8012b66:	00db      	lsls	r3, r3, #3
 8012b68:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b6c:	885b      	ldrh	r3, [r3, #2]
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7f6 fb29 	bl	80091c8 <lwip_htons>
 8012b76:	4603      	mov	r3, r0
 8012b78:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	f003 030f 	and.w	r3, r3, #15
 8012b82:	b2db      	uxtb	r3, r3
 8012b84:	009b      	lsls	r3, r3, #2
 8012b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012b8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b92:	429a      	cmp	r2, r3
 8012b94:	f0c0 8150 	bcc.w	8012e38 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b9c:	b29b      	uxth	r3, r3
 8012b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012ba0:	1ad3      	subs	r3, r2, r3
 8012ba2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f7f7 fe4b 	bl	800a840 <pbuf_clen>
 8012baa:	4603      	mov	r3, r0
 8012bac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012bae:	4b8c      	ldr	r3, [pc, #560]	; (8012de0 <ip4_reass+0x2b0>)
 8012bb0:	881b      	ldrh	r3, [r3, #0]
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	8c3b      	ldrh	r3, [r7, #32]
 8012bb6:	4413      	add	r3, r2
 8012bb8:	2b0a      	cmp	r3, #10
 8012bba:	dd10      	ble.n	8012bde <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012bbc:	8c3b      	ldrh	r3, [r7, #32]
 8012bbe:	4619      	mov	r1, r3
 8012bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012bc2:	f7ff fd81 	bl	80126c8 <ip_reass_remove_oldest_datagram>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	f000 8137 	beq.w	8012e3c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012bce:	4b84      	ldr	r3, [pc, #528]	; (8012de0 <ip4_reass+0x2b0>)
 8012bd0:	881b      	ldrh	r3, [r3, #0]
 8012bd2:	461a      	mov	r2, r3
 8012bd4:	8c3b      	ldrh	r3, [r7, #32]
 8012bd6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012bd8:	2b0a      	cmp	r3, #10
 8012bda:	f300 812f 	bgt.w	8012e3c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012bde:	4b81      	ldr	r3, [pc, #516]	; (8012de4 <ip4_reass+0x2b4>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	633b      	str	r3, [r7, #48]	; 0x30
 8012be4:	e015      	b.n	8012c12 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be8:	695a      	ldr	r2, [r3, #20]
 8012bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bec:	68db      	ldr	r3, [r3, #12]
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d10c      	bne.n	8012c0c <ip4_reass+0xdc>
 8012bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf4:	699a      	ldr	r2, [r3, #24]
 8012bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf8:	691b      	ldr	r3, [r3, #16]
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d106      	bne.n	8012c0c <ip4_reass+0xdc>
 8012bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c00:	899a      	ldrh	r2, [r3, #12]
 8012c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c04:	889b      	ldrh	r3, [r3, #4]
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d006      	beq.n	8012c1a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	633b      	str	r3, [r7, #48]	; 0x30
 8012c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d1e6      	bne.n	8012be6 <ip4_reass+0xb6>
 8012c18:	e000      	b.n	8012c1c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012c1a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d109      	bne.n	8012c36 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012c22:	8c3b      	ldrh	r3, [r7, #32]
 8012c24:	4619      	mov	r1, r3
 8012c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c28:	f7ff fdb0 	bl	801278c <ip_reass_enqueue_new_datagram>
 8012c2c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d11c      	bne.n	8012c6e <ip4_reass+0x13e>
      goto nullreturn;
 8012c34:	e105      	b.n	8012e42 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c38:	88db      	ldrh	r3, [r3, #6]
 8012c3a:	b29b      	uxth	r3, r3
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7f6 fac3 	bl	80091c8 <lwip_htons>
 8012c42:	4603      	mov	r3, r0
 8012c44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d110      	bne.n	8012c6e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c4e:	89db      	ldrh	r3, [r3, #14]
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7f6 fab9 	bl	80091c8 <lwip_htons>
 8012c56:	4603      	mov	r3, r0
 8012c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d006      	beq.n	8012c6e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c62:	3308      	adds	r3, #8
 8012c64:	2214      	movs	r2, #20
 8012c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f000 fba5 	bl	80133b8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c70:	88db      	ldrh	r3, [r3, #6]
 8012c72:	b29b      	uxth	r3, r3
 8012c74:	f003 0320 	and.w	r3, r3, #32
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	bf0c      	ite	eq
 8012c7c:	2301      	moveq	r3, #1
 8012c7e:	2300      	movne	r3, #0
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012c84:	69fb      	ldr	r3, [r7, #28]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d00e      	beq.n	8012ca8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012c8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012c8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c8e:	4413      	add	r3, r2
 8012c90:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012c92:	8b7a      	ldrh	r2, [r7, #26]
 8012c94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012c96:	429a      	cmp	r2, r3
 8012c98:	f0c0 80a0 	bcc.w	8012ddc <ip4_reass+0x2ac>
 8012c9c:	8b7b      	ldrh	r3, [r7, #26]
 8012c9e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	f200 809a 	bhi.w	8012ddc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012ca8:	69fa      	ldr	r2, [r7, #28]
 8012caa:	6879      	ldr	r1, [r7, #4]
 8012cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cae:	f7ff fdd5 	bl	801285c <ip_reass_chain_frag_into_datagram_and_validate>
 8012cb2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012cb4:	697b      	ldr	r3, [r7, #20]
 8012cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cba:	f000 809b 	beq.w	8012df4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012cbe:	4b48      	ldr	r3, [pc, #288]	; (8012de0 <ip4_reass+0x2b0>)
 8012cc0:	881a      	ldrh	r2, [r3, #0]
 8012cc2:	8c3b      	ldrh	r3, [r7, #32]
 8012cc4:	4413      	add	r3, r2
 8012cc6:	b29a      	uxth	r2, r3
 8012cc8:	4b45      	ldr	r3, [pc, #276]	; (8012de0 <ip4_reass+0x2b0>)
 8012cca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012ccc:	69fb      	ldr	r3, [r7, #28]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d00d      	beq.n	8012cee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012cd2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012cd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012cd6:	4413      	add	r3, r2
 8012cd8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cdc:	8a7a      	ldrh	r2, [r7, #18]
 8012cde:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce2:	7f9b      	ldrb	r3, [r3, #30]
 8012ce4:	f043 0301 	orr.w	r3, r3, #1
 8012ce8:	b2da      	uxtb	r2, r3
 8012cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012cee:	697b      	ldr	r3, [r7, #20]
 8012cf0:	2b01      	cmp	r3, #1
 8012cf2:	d171      	bne.n	8012dd8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf6:	8b9b      	ldrh	r3, [r3, #28]
 8012cf8:	3314      	adds	r3, #20
 8012cfa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	685b      	ldr	r3, [r3, #4]
 8012d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d10:	3308      	adds	r3, #8
 8012d12:	2214      	movs	r2, #20
 8012d14:	4619      	mov	r1, r3
 8012d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d18:	f000 fb4e 	bl	80133b8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012d1c:	8a3b      	ldrh	r3, [r7, #16]
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7f6 fa52 	bl	80091c8 <lwip_htons>
 8012d24:	4603      	mov	r3, r0
 8012d26:	461a      	mov	r2, r3
 8012d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d2a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d2e:	2200      	movs	r2, #0
 8012d30:	719a      	strb	r2, [r3, #6]
 8012d32:	2200      	movs	r2, #0
 8012d34:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d38:	2200      	movs	r2, #0
 8012d3a:	729a      	strb	r2, [r3, #10]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012d46:	e00d      	b.n	8012d64 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012d4e:	2114      	movs	r1, #20
 8012d50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012d52:	f7f7 fc67 	bl	800a624 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012d56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f7f7 fdab 	bl	800a8b4 <pbuf_cat>
      r = iprh->next_pbuf;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d1ee      	bne.n	8012d48 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012d6a:	4b1e      	ldr	r3, [pc, #120]	; (8012de4 <ip4_reass+0x2b4>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d102      	bne.n	8012d7a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012d74:	2300      	movs	r3, #0
 8012d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d78:	e010      	b.n	8012d9c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012d7a:	4b1a      	ldr	r3, [pc, #104]	; (8012de4 <ip4_reass+0x2b4>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d80:	e007      	b.n	8012d92 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d006      	beq.n	8012d9a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d1f4      	bne.n	8012d82 <ip4_reass+0x252>
 8012d98:	e000      	b.n	8012d9c <ip4_reass+0x26c>
          break;
 8012d9a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012d9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012da0:	f7ff fd2e 	bl	8012800 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f7f7 fd4b 	bl	800a840 <pbuf_clen>
 8012daa:	4603      	mov	r3, r0
 8012dac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012dae:	4b0c      	ldr	r3, [pc, #48]	; (8012de0 <ip4_reass+0x2b0>)
 8012db0:	881b      	ldrh	r3, [r3, #0]
 8012db2:	8c3a      	ldrh	r2, [r7, #32]
 8012db4:	429a      	cmp	r2, r3
 8012db6:	d906      	bls.n	8012dc6 <ip4_reass+0x296>
 8012db8:	4b0b      	ldr	r3, [pc, #44]	; (8012de8 <ip4_reass+0x2b8>)
 8012dba:	f240 229b 	movw	r2, #667	; 0x29b
 8012dbe:	490b      	ldr	r1, [pc, #44]	; (8012dec <ip4_reass+0x2bc>)
 8012dc0:	480b      	ldr	r0, [pc, #44]	; (8012df0 <ip4_reass+0x2c0>)
 8012dc2:	f000 fb29 	bl	8013418 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012dc6:	4b06      	ldr	r3, [pc, #24]	; (8012de0 <ip4_reass+0x2b0>)
 8012dc8:	881a      	ldrh	r2, [r3, #0]
 8012dca:	8c3b      	ldrh	r3, [r7, #32]
 8012dcc:	1ad3      	subs	r3, r2, r3
 8012dce:	b29a      	uxth	r2, r3
 8012dd0:	4b03      	ldr	r3, [pc, #12]	; (8012de0 <ip4_reass+0x2b0>)
 8012dd2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	e038      	b.n	8012e4a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	e036      	b.n	8012e4a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012ddc:	bf00      	nop
 8012dde:	e00a      	b.n	8012df6 <ip4_reass+0x2c6>
 8012de0:	20008fa8 	.word	0x20008fa8
 8012de4:	20008fa4 	.word	0x20008fa4
 8012de8:	08016fac 	.word	0x08016fac
 8012dec:	0801711c 	.word	0x0801711c
 8012df0:	08016ff4 	.word	0x08016ff4
    goto nullreturn_ipr;
 8012df4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d106      	bne.n	8012e0a <ip4_reass+0x2da>
 8012dfc:	4b15      	ldr	r3, [pc, #84]	; (8012e54 <ip4_reass+0x324>)
 8012dfe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012e02:	4915      	ldr	r1, [pc, #84]	; (8012e58 <ip4_reass+0x328>)
 8012e04:	4815      	ldr	r0, [pc, #84]	; (8012e5c <ip4_reass+0x32c>)
 8012e06:	f000 fb07 	bl	8013418 <iprintf>
  if (ipr->p == NULL) {
 8012e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e0c:	685b      	ldr	r3, [r3, #4]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d116      	bne.n	8012e40 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012e12:	4b13      	ldr	r3, [pc, #76]	; (8012e60 <ip4_reass+0x330>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d006      	beq.n	8012e2a <ip4_reass+0x2fa>
 8012e1c:	4b0d      	ldr	r3, [pc, #52]	; (8012e54 <ip4_reass+0x324>)
 8012e1e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012e22:	4910      	ldr	r1, [pc, #64]	; (8012e64 <ip4_reass+0x334>)
 8012e24:	480d      	ldr	r0, [pc, #52]	; (8012e5c <ip4_reass+0x32c>)
 8012e26:	f000 faf7 	bl	8013418 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012e2a:	2100      	movs	r1, #0
 8012e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e2e:	f7ff fce7 	bl	8012800 <ip_reass_dequeue_datagram>
 8012e32:	e006      	b.n	8012e42 <ip4_reass+0x312>
    goto nullreturn;
 8012e34:	bf00      	nop
 8012e36:	e004      	b.n	8012e42 <ip4_reass+0x312>
    goto nullreturn;
 8012e38:	bf00      	nop
 8012e3a:	e002      	b.n	8012e42 <ip4_reass+0x312>
      goto nullreturn;
 8012e3c:	bf00      	nop
 8012e3e:	e000      	b.n	8012e42 <ip4_reass+0x312>
  }

nullreturn:
 8012e40:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f7f7 fc74 	bl	800a730 <pbuf_free>
  return NULL;
 8012e48:	2300      	movs	r3, #0
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3738      	adds	r7, #56	; 0x38
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}
 8012e52:	bf00      	nop
 8012e54:	08016fac 	.word	0x08016fac
 8012e58:	08017138 	.word	0x08017138
 8012e5c:	08016ff4 	.word	0x08016ff4
 8012e60:	20008fa4 	.word	0x20008fa4
 8012e64:	08017144 	.word	0x08017144

08012e68 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012e6c:	2005      	movs	r0, #5
 8012e6e:	f7f6 fe01 	bl	8009a74 <memp_malloc>
 8012e72:	4603      	mov	r3, r0
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	bd80      	pop	{r7, pc}

08012e78 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d106      	bne.n	8012e94 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012e86:	4b07      	ldr	r3, [pc, #28]	; (8012ea4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012e88:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012e8c:	4906      	ldr	r1, [pc, #24]	; (8012ea8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012e8e:	4807      	ldr	r0, [pc, #28]	; (8012eac <ip_frag_free_pbuf_custom_ref+0x34>)
 8012e90:	f000 fac2 	bl	8013418 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012e94:	6879      	ldr	r1, [r7, #4]
 8012e96:	2005      	movs	r0, #5
 8012e98:	f7f6 fe38 	bl	8009b0c <memp_free>
}
 8012e9c:	bf00      	nop
 8012e9e:	3708      	adds	r7, #8
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	08016fac 	.word	0x08016fac
 8012ea8:	08017164 	.word	0x08017164
 8012eac:	08016ff4 	.word	0x08016ff4

08012eb0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b084      	sub	sp, #16
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d106      	bne.n	8012ed0 <ipfrag_free_pbuf_custom+0x20>
 8012ec2:	4b11      	ldr	r3, [pc, #68]	; (8012f08 <ipfrag_free_pbuf_custom+0x58>)
 8012ec4:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012ec8:	4910      	ldr	r1, [pc, #64]	; (8012f0c <ipfrag_free_pbuf_custom+0x5c>)
 8012eca:	4811      	ldr	r0, [pc, #68]	; (8012f10 <ipfrag_free_pbuf_custom+0x60>)
 8012ecc:	f000 faa4 	bl	8013418 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012ed0:	68fa      	ldr	r2, [r7, #12]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d006      	beq.n	8012ee6 <ipfrag_free_pbuf_custom+0x36>
 8012ed8:	4b0b      	ldr	r3, [pc, #44]	; (8012f08 <ipfrag_free_pbuf_custom+0x58>)
 8012eda:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012ede:	490d      	ldr	r1, [pc, #52]	; (8012f14 <ipfrag_free_pbuf_custom+0x64>)
 8012ee0:	480b      	ldr	r0, [pc, #44]	; (8012f10 <ipfrag_free_pbuf_custom+0x60>)
 8012ee2:	f000 fa99 	bl	8013418 <iprintf>
  if (pcr->original != NULL) {
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	695b      	ldr	r3, [r3, #20]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d004      	beq.n	8012ef8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	695b      	ldr	r3, [r3, #20]
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7f7 fc1c 	bl	800a730 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012ef8:	68f8      	ldr	r0, [r7, #12]
 8012efa:	f7ff ffbd 	bl	8012e78 <ip_frag_free_pbuf_custom_ref>
}
 8012efe:	bf00      	nop
 8012f00:	3710      	adds	r7, #16
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	08016fac 	.word	0x08016fac
 8012f0c:	08017170 	.word	0x08017170
 8012f10:	08016ff4 	.word	0x08016ff4
 8012f14:	0801717c 	.word	0x0801717c

08012f18 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b094      	sub	sp, #80	; 0x50
 8012f1c:	af02      	add	r7, sp, #8
 8012f1e:	60f8      	str	r0, [r7, #12]
 8012f20:	60b9      	str	r1, [r7, #8]
 8012f22:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012f24:	2300      	movs	r3, #0
 8012f26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012f2e:	3b14      	subs	r3, #20
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	da00      	bge.n	8012f36 <ip4_frag+0x1e>
 8012f34:	3307      	adds	r3, #7
 8012f36:	10db      	asrs	r3, r3, #3
 8012f38:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012f3a:	2314      	movs	r3, #20
 8012f3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f46:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	f003 030f 	and.w	r3, r3, #15
 8012f50:	b2db      	uxtb	r3, r3
 8012f52:	009b      	lsls	r3, r3, #2
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	2b14      	cmp	r3, #20
 8012f58:	d002      	beq.n	8012f60 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012f5a:	f06f 0305 	mvn.w	r3, #5
 8012f5e:	e110      	b.n	8013182 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	895b      	ldrh	r3, [r3, #10]
 8012f64:	2b13      	cmp	r3, #19
 8012f66:	d809      	bhi.n	8012f7c <ip4_frag+0x64>
 8012f68:	4b88      	ldr	r3, [pc, #544]	; (801318c <ip4_frag+0x274>)
 8012f6a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012f6e:	4988      	ldr	r1, [pc, #544]	; (8013190 <ip4_frag+0x278>)
 8012f70:	4888      	ldr	r0, [pc, #544]	; (8013194 <ip4_frag+0x27c>)
 8012f72:	f000 fa51 	bl	8013418 <iprintf>
 8012f76:	f06f 0305 	mvn.w	r3, #5
 8012f7a:	e102      	b.n	8013182 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7e:	88db      	ldrh	r3, [r3, #6]
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7f6 f920 	bl	80091c8 <lwip_htons>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012f8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012f92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012f96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012f9c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	891b      	ldrh	r3, [r3, #8]
 8012fa2:	3b14      	subs	r3, #20
 8012fa4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012fa8:	e0e1      	b.n	801316e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012faa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012fac:	00db      	lsls	r3, r3, #3
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	bf28      	it	cs
 8012fb8:	4613      	movcs	r3, r2
 8012fba:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012fbc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012fc0:	2114      	movs	r1, #20
 8012fc2:	200e      	movs	r0, #14
 8012fc4:	f7f7 f8d0 	bl	800a168 <pbuf_alloc>
 8012fc8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	f000 80d5 	beq.w	801317c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd4:	895b      	ldrh	r3, [r3, #10]
 8012fd6:	2b13      	cmp	r3, #19
 8012fd8:	d806      	bhi.n	8012fe8 <ip4_frag+0xd0>
 8012fda:	4b6c      	ldr	r3, [pc, #432]	; (801318c <ip4_frag+0x274>)
 8012fdc:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012fe0:	496d      	ldr	r1, [pc, #436]	; (8013198 <ip4_frag+0x280>)
 8012fe2:	486c      	ldr	r0, [pc, #432]	; (8013194 <ip4_frag+0x27c>)
 8012fe4:	f000 fa18 	bl	8013418 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fea:	685b      	ldr	r3, [r3, #4]
 8012fec:	2214      	movs	r2, #20
 8012fee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f000 f9e1 	bl	80133b8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff8:	685b      	ldr	r3, [r3, #4]
 8012ffa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012ffc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012ffe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013002:	e064      	b.n	80130ce <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	895a      	ldrh	r2, [r3, #10]
 8013008:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801300a:	1ad3      	subs	r3, r2, r3
 801300c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	895b      	ldrh	r3, [r3, #10]
 8013012:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013014:	429a      	cmp	r2, r3
 8013016:	d906      	bls.n	8013026 <ip4_frag+0x10e>
 8013018:	4b5c      	ldr	r3, [pc, #368]	; (801318c <ip4_frag+0x274>)
 801301a:	f240 322d 	movw	r2, #813	; 0x32d
 801301e:	495f      	ldr	r1, [pc, #380]	; (801319c <ip4_frag+0x284>)
 8013020:	485c      	ldr	r0, [pc, #368]	; (8013194 <ip4_frag+0x27c>)
 8013022:	f000 f9f9 	bl	8013418 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013026:	8bfa      	ldrh	r2, [r7, #30]
 8013028:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801302c:	4293      	cmp	r3, r2
 801302e:	bf28      	it	cs
 8013030:	4613      	movcs	r3, r2
 8013032:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013036:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801303a:	2b00      	cmp	r3, #0
 801303c:	d105      	bne.n	801304a <ip4_frag+0x132>
        poff = 0;
 801303e:	2300      	movs	r3, #0
 8013040:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	60fb      	str	r3, [r7, #12]
        continue;
 8013048:	e041      	b.n	80130ce <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801304a:	f7ff ff0d 	bl	8012e68 <ip_frag_alloc_pbuf_custom_ref>
 801304e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013050:	69bb      	ldr	r3, [r7, #24]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d103      	bne.n	801305e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013056:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013058:	f7f7 fb6a 	bl	800a730 <pbuf_free>
        goto memerr;
 801305c:	e08f      	b.n	801317e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801305e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013064:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013066:	4413      	add	r3, r2
 8013068:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801306c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013070:	9201      	str	r2, [sp, #4]
 8013072:	9300      	str	r3, [sp, #0]
 8013074:	4603      	mov	r3, r0
 8013076:	2241      	movs	r2, #65	; 0x41
 8013078:	2000      	movs	r0, #0
 801307a:	f7f7 f99f 	bl	800a3bc <pbuf_alloced_custom>
 801307e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d106      	bne.n	8013094 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013086:	69b8      	ldr	r0, [r7, #24]
 8013088:	f7ff fef6 	bl	8012e78 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801308c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801308e:	f7f7 fb4f 	bl	800a730 <pbuf_free>
        goto memerr;
 8013092:	e074      	b.n	801317e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013094:	68f8      	ldr	r0, [r7, #12]
 8013096:	f7f7 fbeb 	bl	800a870 <pbuf_ref>
      pcr->original = p;
 801309a:	69bb      	ldr	r3, [r7, #24]
 801309c:	68fa      	ldr	r2, [r7, #12]
 801309e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80130a0:	69bb      	ldr	r3, [r7, #24]
 80130a2:	4a3f      	ldr	r2, [pc, #252]	; (80131a0 <ip4_frag+0x288>)
 80130a4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80130a6:	6979      	ldr	r1, [r7, #20]
 80130a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130aa:	f7f7 fc03 	bl	800a8b4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80130ae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80130b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80130b6:	1ad3      	subs	r3, r2, r3
 80130b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80130bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d004      	beq.n	80130ce <ip4_frag+0x1b6>
        poff = 0;
 80130c4:	2300      	movs	r3, #0
 80130c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80130ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d196      	bne.n	8013004 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80130d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80130d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80130dc:	4413      	add	r3, r2
 80130de:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80130e4:	f1a3 0213 	sub.w	r2, r3, #19
 80130e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80130ec:	429a      	cmp	r2, r3
 80130ee:	bfcc      	ite	gt
 80130f0:	2301      	movgt	r3, #1
 80130f2:	2300      	movle	r3, #0
 80130f4:	b2db      	uxtb	r3, r3
 80130f6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80130f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80130fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013100:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013102:	6a3b      	ldr	r3, [r7, #32]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d002      	beq.n	801310e <ip4_frag+0x1f6>
 8013108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310a:	2b00      	cmp	r3, #0
 801310c:	d003      	beq.n	8013116 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801310e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013110:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013114:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013116:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013118:	4618      	mov	r0, r3
 801311a:	f7f6 f855 	bl	80091c8 <lwip_htons>
 801311e:	4603      	mov	r3, r0
 8013120:	461a      	mov	r2, r3
 8013122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013124:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013126:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013128:	3314      	adds	r3, #20
 801312a:	b29b      	uxth	r3, r3
 801312c:	4618      	mov	r0, r3
 801312e:	f7f6 f84b 	bl	80091c8 <lwip_htons>
 8013132:	4603      	mov	r3, r0
 8013134:	461a      	mov	r2, r3
 8013136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013138:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313c:	2200      	movs	r2, #0
 801313e:	729a      	strb	r2, [r3, #10]
 8013140:	2200      	movs	r2, #0
 8013142:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	695b      	ldr	r3, [r3, #20]
 8013148:	687a      	ldr	r2, [r7, #4]
 801314a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801314c:	68b8      	ldr	r0, [r7, #8]
 801314e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013152:	f7f7 faed 	bl	800a730 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013156:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801315a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801315c:	1ad3      	subs	r3, r2, r3
 801315e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013162:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013166:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013168:	4413      	add	r3, r2
 801316a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801316e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013172:	2b00      	cmp	r3, #0
 8013174:	f47f af19 	bne.w	8012faa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013178:	2300      	movs	r3, #0
 801317a:	e002      	b.n	8013182 <ip4_frag+0x26a>
      goto memerr;
 801317c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801317e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013182:	4618      	mov	r0, r3
 8013184:	3748      	adds	r7, #72	; 0x48
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
 801318a:	bf00      	nop
 801318c:	08016fac 	.word	0x08016fac
 8013190:	08017188 	.word	0x08017188
 8013194:	08016ff4 	.word	0x08016ff4
 8013198:	080171a4 	.word	0x080171a4
 801319c:	080171c4 	.word	0x080171c4
 80131a0:	08012eb1 	.word	0x08012eb1

080131a4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b086      	sub	sp, #24
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
 80131ac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80131ae:	230e      	movs	r3, #14
 80131b0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	895b      	ldrh	r3, [r3, #10]
 80131b6:	2b0e      	cmp	r3, #14
 80131b8:	d96e      	bls.n	8013298 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	7bdb      	ldrb	r3, [r3, #15]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d106      	bne.n	80131d0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80131c8:	3301      	adds	r3, #1
 80131ca:	b2da      	uxtb	r2, r3
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	685b      	ldr	r3, [r3, #4]
 80131d4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80131d6:	693b      	ldr	r3, [r7, #16]
 80131d8:	7b1a      	ldrb	r2, [r3, #12]
 80131da:	7b5b      	ldrb	r3, [r3, #13]
 80131dc:	021b      	lsls	r3, r3, #8
 80131de:	4313      	orrs	r3, r2
 80131e0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	f003 0301 	and.w	r3, r3, #1
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d023      	beq.n	8013236 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	2b01      	cmp	r3, #1
 80131f4:	d10f      	bne.n	8013216 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	785b      	ldrb	r3, [r3, #1]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d11b      	bne.n	8013236 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80131fe:	693b      	ldr	r3, [r7, #16]
 8013200:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013202:	2b5e      	cmp	r3, #94	; 0x5e
 8013204:	d117      	bne.n	8013236 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	7b5b      	ldrb	r3, [r3, #13]
 801320a:	f043 0310 	orr.w	r3, r3, #16
 801320e:	b2da      	uxtb	r2, r3
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	735a      	strb	r2, [r3, #13]
 8013214:	e00f      	b.n	8013236 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	2206      	movs	r2, #6
 801321a:	4928      	ldr	r1, [pc, #160]	; (80132bc <ethernet_input+0x118>)
 801321c:	4618      	mov	r0, r3
 801321e:	f000 f8bb 	bl	8013398 <memcmp>
 8013222:	4603      	mov	r3, r0
 8013224:	2b00      	cmp	r3, #0
 8013226:	d106      	bne.n	8013236 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	7b5b      	ldrb	r3, [r3, #13]
 801322c:	f043 0308 	orr.w	r3, r3, #8
 8013230:	b2da      	uxtb	r2, r3
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013236:	89fb      	ldrh	r3, [r7, #14]
 8013238:	2b08      	cmp	r3, #8
 801323a:	d003      	beq.n	8013244 <ethernet_input+0xa0>
 801323c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013240:	d014      	beq.n	801326c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013242:	e032      	b.n	80132aa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801324a:	f003 0308 	and.w	r3, r3, #8
 801324e:	2b00      	cmp	r3, #0
 8013250:	d024      	beq.n	801329c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013252:	8afb      	ldrh	r3, [r7, #22]
 8013254:	4619      	mov	r1, r3
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f7f7 f9e4 	bl	800a624 <pbuf_remove_header>
 801325c:	4603      	mov	r3, r0
 801325e:	2b00      	cmp	r3, #0
 8013260:	d11e      	bne.n	80132a0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013262:	6839      	ldr	r1, [r7, #0]
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f7fe ff21 	bl	80120ac <ip4_input>
      break;
 801326a:	e013      	b.n	8013294 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013272:	f003 0308 	and.w	r3, r3, #8
 8013276:	2b00      	cmp	r3, #0
 8013278:	d014      	beq.n	80132a4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801327a:	8afb      	ldrh	r3, [r7, #22]
 801327c:	4619      	mov	r1, r3
 801327e:	6878      	ldr	r0, [r7, #4]
 8013280:	f7f7 f9d0 	bl	800a624 <pbuf_remove_header>
 8013284:	4603      	mov	r3, r0
 8013286:	2b00      	cmp	r3, #0
 8013288:	d10e      	bne.n	80132a8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801328a:	6839      	ldr	r1, [r7, #0]
 801328c:	6878      	ldr	r0, [r7, #4]
 801328e:	f7fe f8c1 	bl	8011414 <etharp_input>
      break;
 8013292:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013294:	2300      	movs	r3, #0
 8013296:	e00c      	b.n	80132b2 <ethernet_input+0x10e>
    goto free_and_return;
 8013298:	bf00      	nop
 801329a:	e006      	b.n	80132aa <ethernet_input+0x106>
        goto free_and_return;
 801329c:	bf00      	nop
 801329e:	e004      	b.n	80132aa <ethernet_input+0x106>
        goto free_and_return;
 80132a0:	bf00      	nop
 80132a2:	e002      	b.n	80132aa <ethernet_input+0x106>
        goto free_and_return;
 80132a4:	bf00      	nop
 80132a6:	e000      	b.n	80132aa <ethernet_input+0x106>
        goto free_and_return;
 80132a8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f7f7 fa40 	bl	800a730 <pbuf_free>
  return ERR_OK;
 80132b0:	2300      	movs	r3, #0
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3718      	adds	r7, #24
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	0801735c 	.word	0x0801735c

080132c0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b086      	sub	sp, #24
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	60f8      	str	r0, [r7, #12]
 80132c8:	60b9      	str	r1, [r7, #8]
 80132ca:	607a      	str	r2, [r7, #4]
 80132cc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80132ce:	8c3b      	ldrh	r3, [r7, #32]
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7f5 ff79 	bl	80091c8 <lwip_htons>
 80132d6:	4603      	mov	r3, r0
 80132d8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80132da:	210e      	movs	r1, #14
 80132dc:	68b8      	ldr	r0, [r7, #8]
 80132de:	f7f7 f991 	bl	800a604 <pbuf_add_header>
 80132e2:	4603      	mov	r3, r0
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d125      	bne.n	8013334 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	685b      	ldr	r3, [r3, #4]
 80132ec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	8afa      	ldrh	r2, [r7, #22]
 80132f2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	2206      	movs	r2, #6
 80132f8:	6839      	ldr	r1, [r7, #0]
 80132fa:	4618      	mov	r0, r3
 80132fc:	f000 f85c 	bl	80133b8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	3306      	adds	r3, #6
 8013304:	2206      	movs	r2, #6
 8013306:	6879      	ldr	r1, [r7, #4]
 8013308:	4618      	mov	r0, r3
 801330a:	f000 f855 	bl	80133b8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013314:	2b06      	cmp	r3, #6
 8013316:	d006      	beq.n	8013326 <ethernet_output+0x66>
 8013318:	4b0a      	ldr	r3, [pc, #40]	; (8013344 <ethernet_output+0x84>)
 801331a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801331e:	490a      	ldr	r1, [pc, #40]	; (8013348 <ethernet_output+0x88>)
 8013320:	480a      	ldr	r0, [pc, #40]	; (801334c <ethernet_output+0x8c>)
 8013322:	f000 f879 	bl	8013418 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	699b      	ldr	r3, [r3, #24]
 801332a:	68b9      	ldr	r1, [r7, #8]
 801332c:	68f8      	ldr	r0, [r7, #12]
 801332e:	4798      	blx	r3
 8013330:	4603      	mov	r3, r0
 8013332:	e002      	b.n	801333a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013334:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013336:	f06f 0301 	mvn.w	r3, #1
}
 801333a:	4618      	mov	r0, r3
 801333c:	3718      	adds	r7, #24
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}
 8013342:	bf00      	nop
 8013344:	080171d4 	.word	0x080171d4
 8013348:	0801720c 	.word	0x0801720c
 801334c:	08017240 	.word	0x08017240

08013350 <__libc_init_array>:
 8013350:	b570      	push	{r4, r5, r6, lr}
 8013352:	4d0d      	ldr	r5, [pc, #52]	; (8013388 <__libc_init_array+0x38>)
 8013354:	4c0d      	ldr	r4, [pc, #52]	; (801338c <__libc_init_array+0x3c>)
 8013356:	1b64      	subs	r4, r4, r5
 8013358:	10a4      	asrs	r4, r4, #2
 801335a:	2600      	movs	r6, #0
 801335c:	42a6      	cmp	r6, r4
 801335e:	d109      	bne.n	8013374 <__libc_init_array+0x24>
 8013360:	4d0b      	ldr	r5, [pc, #44]	; (8013390 <__libc_init_array+0x40>)
 8013362:	4c0c      	ldr	r4, [pc, #48]	; (8013394 <__libc_init_array+0x44>)
 8013364:	f001 fa5c 	bl	8014820 <_init>
 8013368:	1b64      	subs	r4, r4, r5
 801336a:	10a4      	asrs	r4, r4, #2
 801336c:	2600      	movs	r6, #0
 801336e:	42a6      	cmp	r6, r4
 8013370:	d105      	bne.n	801337e <__libc_init_array+0x2e>
 8013372:	bd70      	pop	{r4, r5, r6, pc}
 8013374:	f855 3b04 	ldr.w	r3, [r5], #4
 8013378:	4798      	blx	r3
 801337a:	3601      	adds	r6, #1
 801337c:	e7ee      	b.n	801335c <__libc_init_array+0xc>
 801337e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013382:	4798      	blx	r3
 8013384:	3601      	adds	r6, #1
 8013386:	e7f2      	b.n	801336e <__libc_init_array+0x1e>
 8013388:	080174bc 	.word	0x080174bc
 801338c:	080174bc 	.word	0x080174bc
 8013390:	080174bc 	.word	0x080174bc
 8013394:	080174c0 	.word	0x080174c0

08013398 <memcmp>:
 8013398:	b510      	push	{r4, lr}
 801339a:	3901      	subs	r1, #1
 801339c:	4402      	add	r2, r0
 801339e:	4290      	cmp	r0, r2
 80133a0:	d101      	bne.n	80133a6 <memcmp+0xe>
 80133a2:	2000      	movs	r0, #0
 80133a4:	e005      	b.n	80133b2 <memcmp+0x1a>
 80133a6:	7803      	ldrb	r3, [r0, #0]
 80133a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80133ac:	42a3      	cmp	r3, r4
 80133ae:	d001      	beq.n	80133b4 <memcmp+0x1c>
 80133b0:	1b18      	subs	r0, r3, r4
 80133b2:	bd10      	pop	{r4, pc}
 80133b4:	3001      	adds	r0, #1
 80133b6:	e7f2      	b.n	801339e <memcmp+0x6>

080133b8 <memcpy>:
 80133b8:	440a      	add	r2, r1
 80133ba:	4291      	cmp	r1, r2
 80133bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80133c0:	d100      	bne.n	80133c4 <memcpy+0xc>
 80133c2:	4770      	bx	lr
 80133c4:	b510      	push	{r4, lr}
 80133c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80133ce:	4291      	cmp	r1, r2
 80133d0:	d1f9      	bne.n	80133c6 <memcpy+0xe>
 80133d2:	bd10      	pop	{r4, pc}

080133d4 <memmove>:
 80133d4:	4288      	cmp	r0, r1
 80133d6:	b510      	push	{r4, lr}
 80133d8:	eb01 0402 	add.w	r4, r1, r2
 80133dc:	d902      	bls.n	80133e4 <memmove+0x10>
 80133de:	4284      	cmp	r4, r0
 80133e0:	4623      	mov	r3, r4
 80133e2:	d807      	bhi.n	80133f4 <memmove+0x20>
 80133e4:	1e43      	subs	r3, r0, #1
 80133e6:	42a1      	cmp	r1, r4
 80133e8:	d008      	beq.n	80133fc <memmove+0x28>
 80133ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80133ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80133f2:	e7f8      	b.n	80133e6 <memmove+0x12>
 80133f4:	4402      	add	r2, r0
 80133f6:	4601      	mov	r1, r0
 80133f8:	428a      	cmp	r2, r1
 80133fa:	d100      	bne.n	80133fe <memmove+0x2a>
 80133fc:	bd10      	pop	{r4, pc}
 80133fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013406:	e7f7      	b.n	80133f8 <memmove+0x24>

08013408 <memset>:
 8013408:	4402      	add	r2, r0
 801340a:	4603      	mov	r3, r0
 801340c:	4293      	cmp	r3, r2
 801340e:	d100      	bne.n	8013412 <memset+0xa>
 8013410:	4770      	bx	lr
 8013412:	f803 1b01 	strb.w	r1, [r3], #1
 8013416:	e7f9      	b.n	801340c <memset+0x4>

08013418 <iprintf>:
 8013418:	b40f      	push	{r0, r1, r2, r3}
 801341a:	4b0a      	ldr	r3, [pc, #40]	; (8013444 <iprintf+0x2c>)
 801341c:	b513      	push	{r0, r1, r4, lr}
 801341e:	681c      	ldr	r4, [r3, #0]
 8013420:	b124      	cbz	r4, 801342c <iprintf+0x14>
 8013422:	69a3      	ldr	r3, [r4, #24]
 8013424:	b913      	cbnz	r3, 801342c <iprintf+0x14>
 8013426:	4620      	mov	r0, r4
 8013428:	f000 f8e2 	bl	80135f0 <__sinit>
 801342c:	ab05      	add	r3, sp, #20
 801342e:	9a04      	ldr	r2, [sp, #16]
 8013430:	68a1      	ldr	r1, [r4, #8]
 8013432:	9301      	str	r3, [sp, #4]
 8013434:	4620      	mov	r0, r4
 8013436:	f000 fbfb 	bl	8013c30 <_vfiprintf_r>
 801343a:	b002      	add	sp, #8
 801343c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013440:	b004      	add	sp, #16
 8013442:	4770      	bx	lr
 8013444:	20000018 	.word	0x20000018

08013448 <rand>:
 8013448:	4b16      	ldr	r3, [pc, #88]	; (80134a4 <rand+0x5c>)
 801344a:	b510      	push	{r4, lr}
 801344c:	681c      	ldr	r4, [r3, #0]
 801344e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013450:	b9b3      	cbnz	r3, 8013480 <rand+0x38>
 8013452:	2018      	movs	r0, #24
 8013454:	f000 f97e 	bl	8013754 <malloc>
 8013458:	63a0      	str	r0, [r4, #56]	; 0x38
 801345a:	b928      	cbnz	r0, 8013468 <rand+0x20>
 801345c:	4602      	mov	r2, r0
 801345e:	4b12      	ldr	r3, [pc, #72]	; (80134a8 <rand+0x60>)
 8013460:	4812      	ldr	r0, [pc, #72]	; (80134ac <rand+0x64>)
 8013462:	214e      	movs	r1, #78	; 0x4e
 8013464:	f000 f84e 	bl	8013504 <__assert_func>
 8013468:	4a11      	ldr	r2, [pc, #68]	; (80134b0 <rand+0x68>)
 801346a:	4b12      	ldr	r3, [pc, #72]	; (80134b4 <rand+0x6c>)
 801346c:	e9c0 2300 	strd	r2, r3, [r0]
 8013470:	4b11      	ldr	r3, [pc, #68]	; (80134b8 <rand+0x70>)
 8013472:	6083      	str	r3, [r0, #8]
 8013474:	230b      	movs	r3, #11
 8013476:	8183      	strh	r3, [r0, #12]
 8013478:	2201      	movs	r2, #1
 801347a:	2300      	movs	r3, #0
 801347c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013480:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013482:	4a0e      	ldr	r2, [pc, #56]	; (80134bc <rand+0x74>)
 8013484:	6920      	ldr	r0, [r4, #16]
 8013486:	6963      	ldr	r3, [r4, #20]
 8013488:	490d      	ldr	r1, [pc, #52]	; (80134c0 <rand+0x78>)
 801348a:	4342      	muls	r2, r0
 801348c:	fb01 2203 	mla	r2, r1, r3, r2
 8013490:	fba0 0101 	umull	r0, r1, r0, r1
 8013494:	1c43      	adds	r3, r0, #1
 8013496:	eb42 0001 	adc.w	r0, r2, r1
 801349a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801349e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80134a2:	bd10      	pop	{r4, pc}
 80134a4:	20000018 	.word	0x20000018
 80134a8:	08017370 	.word	0x08017370
 80134ac:	08017387 	.word	0x08017387
 80134b0:	abcd330e 	.word	0xabcd330e
 80134b4:	e66d1234 	.word	0xe66d1234
 80134b8:	0005deec 	.word	0x0005deec
 80134bc:	5851f42d 	.word	0x5851f42d
 80134c0:	4c957f2d 	.word	0x4c957f2d

080134c4 <siprintf>:
 80134c4:	b40e      	push	{r1, r2, r3}
 80134c6:	b500      	push	{lr}
 80134c8:	b09c      	sub	sp, #112	; 0x70
 80134ca:	ab1d      	add	r3, sp, #116	; 0x74
 80134cc:	9002      	str	r0, [sp, #8]
 80134ce:	9006      	str	r0, [sp, #24]
 80134d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80134d4:	4809      	ldr	r0, [pc, #36]	; (80134fc <siprintf+0x38>)
 80134d6:	9107      	str	r1, [sp, #28]
 80134d8:	9104      	str	r1, [sp, #16]
 80134da:	4909      	ldr	r1, [pc, #36]	; (8013500 <siprintf+0x3c>)
 80134dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80134e0:	9105      	str	r1, [sp, #20]
 80134e2:	6800      	ldr	r0, [r0, #0]
 80134e4:	9301      	str	r3, [sp, #4]
 80134e6:	a902      	add	r1, sp, #8
 80134e8:	f000 fa78 	bl	80139dc <_svfiprintf_r>
 80134ec:	9b02      	ldr	r3, [sp, #8]
 80134ee:	2200      	movs	r2, #0
 80134f0:	701a      	strb	r2, [r3, #0]
 80134f2:	b01c      	add	sp, #112	; 0x70
 80134f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80134f8:	b003      	add	sp, #12
 80134fa:	4770      	bx	lr
 80134fc:	20000018 	.word	0x20000018
 8013500:	ffff0208 	.word	0xffff0208

08013504 <__assert_func>:
 8013504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013506:	4614      	mov	r4, r2
 8013508:	461a      	mov	r2, r3
 801350a:	4b09      	ldr	r3, [pc, #36]	; (8013530 <__assert_func+0x2c>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	4605      	mov	r5, r0
 8013510:	68d8      	ldr	r0, [r3, #12]
 8013512:	b14c      	cbz	r4, 8013528 <__assert_func+0x24>
 8013514:	4b07      	ldr	r3, [pc, #28]	; (8013534 <__assert_func+0x30>)
 8013516:	9100      	str	r1, [sp, #0]
 8013518:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801351c:	4906      	ldr	r1, [pc, #24]	; (8013538 <__assert_func+0x34>)
 801351e:	462b      	mov	r3, r5
 8013520:	f000 f8e4 	bl	80136ec <fiprintf>
 8013524:	f000 ff6e 	bl	8014404 <abort>
 8013528:	4b04      	ldr	r3, [pc, #16]	; (801353c <__assert_func+0x38>)
 801352a:	461c      	mov	r4, r3
 801352c:	e7f3      	b.n	8013516 <__assert_func+0x12>
 801352e:	bf00      	nop
 8013530:	20000018 	.word	0x20000018
 8013534:	080173e2 	.word	0x080173e2
 8013538:	080173ef 	.word	0x080173ef
 801353c:	0801741d 	.word	0x0801741d

08013540 <std>:
 8013540:	2300      	movs	r3, #0
 8013542:	b510      	push	{r4, lr}
 8013544:	4604      	mov	r4, r0
 8013546:	e9c0 3300 	strd	r3, r3, [r0]
 801354a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801354e:	6083      	str	r3, [r0, #8]
 8013550:	8181      	strh	r1, [r0, #12]
 8013552:	6643      	str	r3, [r0, #100]	; 0x64
 8013554:	81c2      	strh	r2, [r0, #14]
 8013556:	6183      	str	r3, [r0, #24]
 8013558:	4619      	mov	r1, r3
 801355a:	2208      	movs	r2, #8
 801355c:	305c      	adds	r0, #92	; 0x5c
 801355e:	f7ff ff53 	bl	8013408 <memset>
 8013562:	4b05      	ldr	r3, [pc, #20]	; (8013578 <std+0x38>)
 8013564:	6263      	str	r3, [r4, #36]	; 0x24
 8013566:	4b05      	ldr	r3, [pc, #20]	; (801357c <std+0x3c>)
 8013568:	62a3      	str	r3, [r4, #40]	; 0x28
 801356a:	4b05      	ldr	r3, [pc, #20]	; (8013580 <std+0x40>)
 801356c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801356e:	4b05      	ldr	r3, [pc, #20]	; (8013584 <std+0x44>)
 8013570:	6224      	str	r4, [r4, #32]
 8013572:	6323      	str	r3, [r4, #48]	; 0x30
 8013574:	bd10      	pop	{r4, pc}
 8013576:	bf00      	nop
 8013578:	080141d9 	.word	0x080141d9
 801357c:	080141fb 	.word	0x080141fb
 8013580:	08014233 	.word	0x08014233
 8013584:	08014257 	.word	0x08014257

08013588 <_cleanup_r>:
 8013588:	4901      	ldr	r1, [pc, #4]	; (8013590 <_cleanup_r+0x8>)
 801358a:	f000 b8c1 	b.w	8013710 <_fwalk_reent>
 801358e:	bf00      	nop
 8013590:	08014541 	.word	0x08014541

08013594 <__sfmoreglue>:
 8013594:	b570      	push	{r4, r5, r6, lr}
 8013596:	2268      	movs	r2, #104	; 0x68
 8013598:	1e4d      	subs	r5, r1, #1
 801359a:	4355      	muls	r5, r2
 801359c:	460e      	mov	r6, r1
 801359e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80135a2:	f000 f94b 	bl	801383c <_malloc_r>
 80135a6:	4604      	mov	r4, r0
 80135a8:	b140      	cbz	r0, 80135bc <__sfmoreglue+0x28>
 80135aa:	2100      	movs	r1, #0
 80135ac:	e9c0 1600 	strd	r1, r6, [r0]
 80135b0:	300c      	adds	r0, #12
 80135b2:	60a0      	str	r0, [r4, #8]
 80135b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80135b8:	f7ff ff26 	bl	8013408 <memset>
 80135bc:	4620      	mov	r0, r4
 80135be:	bd70      	pop	{r4, r5, r6, pc}

080135c0 <__sfp_lock_acquire>:
 80135c0:	4801      	ldr	r0, [pc, #4]	; (80135c8 <__sfp_lock_acquire+0x8>)
 80135c2:	f000 b8c5 	b.w	8013750 <__retarget_lock_acquire_recursive>
 80135c6:	bf00      	nop
 80135c8:	20008fb1 	.word	0x20008fb1

080135cc <__sfp_lock_release>:
 80135cc:	4801      	ldr	r0, [pc, #4]	; (80135d4 <__sfp_lock_release+0x8>)
 80135ce:	f000 b8c0 	b.w	8013752 <__retarget_lock_release_recursive>
 80135d2:	bf00      	nop
 80135d4:	20008fb1 	.word	0x20008fb1

080135d8 <__sinit_lock_acquire>:
 80135d8:	4801      	ldr	r0, [pc, #4]	; (80135e0 <__sinit_lock_acquire+0x8>)
 80135da:	f000 b8b9 	b.w	8013750 <__retarget_lock_acquire_recursive>
 80135de:	bf00      	nop
 80135e0:	20008fb2 	.word	0x20008fb2

080135e4 <__sinit_lock_release>:
 80135e4:	4801      	ldr	r0, [pc, #4]	; (80135ec <__sinit_lock_release+0x8>)
 80135e6:	f000 b8b4 	b.w	8013752 <__retarget_lock_release_recursive>
 80135ea:	bf00      	nop
 80135ec:	20008fb2 	.word	0x20008fb2

080135f0 <__sinit>:
 80135f0:	b510      	push	{r4, lr}
 80135f2:	4604      	mov	r4, r0
 80135f4:	f7ff fff0 	bl	80135d8 <__sinit_lock_acquire>
 80135f8:	69a3      	ldr	r3, [r4, #24]
 80135fa:	b11b      	cbz	r3, 8013604 <__sinit+0x14>
 80135fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013600:	f7ff bff0 	b.w	80135e4 <__sinit_lock_release>
 8013604:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013608:	6523      	str	r3, [r4, #80]	; 0x50
 801360a:	4b13      	ldr	r3, [pc, #76]	; (8013658 <__sinit+0x68>)
 801360c:	4a13      	ldr	r2, [pc, #76]	; (801365c <__sinit+0x6c>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	62a2      	str	r2, [r4, #40]	; 0x28
 8013612:	42a3      	cmp	r3, r4
 8013614:	bf04      	itt	eq
 8013616:	2301      	moveq	r3, #1
 8013618:	61a3      	streq	r3, [r4, #24]
 801361a:	4620      	mov	r0, r4
 801361c:	f000 f820 	bl	8013660 <__sfp>
 8013620:	6060      	str	r0, [r4, #4]
 8013622:	4620      	mov	r0, r4
 8013624:	f000 f81c 	bl	8013660 <__sfp>
 8013628:	60a0      	str	r0, [r4, #8]
 801362a:	4620      	mov	r0, r4
 801362c:	f000 f818 	bl	8013660 <__sfp>
 8013630:	2200      	movs	r2, #0
 8013632:	60e0      	str	r0, [r4, #12]
 8013634:	2104      	movs	r1, #4
 8013636:	6860      	ldr	r0, [r4, #4]
 8013638:	f7ff ff82 	bl	8013540 <std>
 801363c:	68a0      	ldr	r0, [r4, #8]
 801363e:	2201      	movs	r2, #1
 8013640:	2109      	movs	r1, #9
 8013642:	f7ff ff7d 	bl	8013540 <std>
 8013646:	68e0      	ldr	r0, [r4, #12]
 8013648:	2202      	movs	r2, #2
 801364a:	2112      	movs	r1, #18
 801364c:	f7ff ff78 	bl	8013540 <std>
 8013650:	2301      	movs	r3, #1
 8013652:	61a3      	str	r3, [r4, #24]
 8013654:	e7d2      	b.n	80135fc <__sinit+0xc>
 8013656:	bf00      	nop
 8013658:	0801736c 	.word	0x0801736c
 801365c:	08013589 	.word	0x08013589

08013660 <__sfp>:
 8013660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013662:	4607      	mov	r7, r0
 8013664:	f7ff ffac 	bl	80135c0 <__sfp_lock_acquire>
 8013668:	4b1e      	ldr	r3, [pc, #120]	; (80136e4 <__sfp+0x84>)
 801366a:	681e      	ldr	r6, [r3, #0]
 801366c:	69b3      	ldr	r3, [r6, #24]
 801366e:	b913      	cbnz	r3, 8013676 <__sfp+0x16>
 8013670:	4630      	mov	r0, r6
 8013672:	f7ff ffbd 	bl	80135f0 <__sinit>
 8013676:	3648      	adds	r6, #72	; 0x48
 8013678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801367c:	3b01      	subs	r3, #1
 801367e:	d503      	bpl.n	8013688 <__sfp+0x28>
 8013680:	6833      	ldr	r3, [r6, #0]
 8013682:	b30b      	cbz	r3, 80136c8 <__sfp+0x68>
 8013684:	6836      	ldr	r6, [r6, #0]
 8013686:	e7f7      	b.n	8013678 <__sfp+0x18>
 8013688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801368c:	b9d5      	cbnz	r5, 80136c4 <__sfp+0x64>
 801368e:	4b16      	ldr	r3, [pc, #88]	; (80136e8 <__sfp+0x88>)
 8013690:	60e3      	str	r3, [r4, #12]
 8013692:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013696:	6665      	str	r5, [r4, #100]	; 0x64
 8013698:	f000 f859 	bl	801374e <__retarget_lock_init_recursive>
 801369c:	f7ff ff96 	bl	80135cc <__sfp_lock_release>
 80136a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80136a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80136a8:	6025      	str	r5, [r4, #0]
 80136aa:	61a5      	str	r5, [r4, #24]
 80136ac:	2208      	movs	r2, #8
 80136ae:	4629      	mov	r1, r5
 80136b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80136b4:	f7ff fea8 	bl	8013408 <memset>
 80136b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80136bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80136c0:	4620      	mov	r0, r4
 80136c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136c4:	3468      	adds	r4, #104	; 0x68
 80136c6:	e7d9      	b.n	801367c <__sfp+0x1c>
 80136c8:	2104      	movs	r1, #4
 80136ca:	4638      	mov	r0, r7
 80136cc:	f7ff ff62 	bl	8013594 <__sfmoreglue>
 80136d0:	4604      	mov	r4, r0
 80136d2:	6030      	str	r0, [r6, #0]
 80136d4:	2800      	cmp	r0, #0
 80136d6:	d1d5      	bne.n	8013684 <__sfp+0x24>
 80136d8:	f7ff ff78 	bl	80135cc <__sfp_lock_release>
 80136dc:	230c      	movs	r3, #12
 80136de:	603b      	str	r3, [r7, #0]
 80136e0:	e7ee      	b.n	80136c0 <__sfp+0x60>
 80136e2:	bf00      	nop
 80136e4:	0801736c 	.word	0x0801736c
 80136e8:	ffff0001 	.word	0xffff0001

080136ec <fiprintf>:
 80136ec:	b40e      	push	{r1, r2, r3}
 80136ee:	b503      	push	{r0, r1, lr}
 80136f0:	4601      	mov	r1, r0
 80136f2:	ab03      	add	r3, sp, #12
 80136f4:	4805      	ldr	r0, [pc, #20]	; (801370c <fiprintf+0x20>)
 80136f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80136fa:	6800      	ldr	r0, [r0, #0]
 80136fc:	9301      	str	r3, [sp, #4]
 80136fe:	f000 fa97 	bl	8013c30 <_vfiprintf_r>
 8013702:	b002      	add	sp, #8
 8013704:	f85d eb04 	ldr.w	lr, [sp], #4
 8013708:	b003      	add	sp, #12
 801370a:	4770      	bx	lr
 801370c:	20000018 	.word	0x20000018

08013710 <_fwalk_reent>:
 8013710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013714:	4606      	mov	r6, r0
 8013716:	4688      	mov	r8, r1
 8013718:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801371c:	2700      	movs	r7, #0
 801371e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013722:	f1b9 0901 	subs.w	r9, r9, #1
 8013726:	d505      	bpl.n	8013734 <_fwalk_reent+0x24>
 8013728:	6824      	ldr	r4, [r4, #0]
 801372a:	2c00      	cmp	r4, #0
 801372c:	d1f7      	bne.n	801371e <_fwalk_reent+0xe>
 801372e:	4638      	mov	r0, r7
 8013730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013734:	89ab      	ldrh	r3, [r5, #12]
 8013736:	2b01      	cmp	r3, #1
 8013738:	d907      	bls.n	801374a <_fwalk_reent+0x3a>
 801373a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801373e:	3301      	adds	r3, #1
 8013740:	d003      	beq.n	801374a <_fwalk_reent+0x3a>
 8013742:	4629      	mov	r1, r5
 8013744:	4630      	mov	r0, r6
 8013746:	47c0      	blx	r8
 8013748:	4307      	orrs	r7, r0
 801374a:	3568      	adds	r5, #104	; 0x68
 801374c:	e7e9      	b.n	8013722 <_fwalk_reent+0x12>

0801374e <__retarget_lock_init_recursive>:
 801374e:	4770      	bx	lr

08013750 <__retarget_lock_acquire_recursive>:
 8013750:	4770      	bx	lr

08013752 <__retarget_lock_release_recursive>:
 8013752:	4770      	bx	lr

08013754 <malloc>:
 8013754:	4b02      	ldr	r3, [pc, #8]	; (8013760 <malloc+0xc>)
 8013756:	4601      	mov	r1, r0
 8013758:	6818      	ldr	r0, [r3, #0]
 801375a:	f000 b86f 	b.w	801383c <_malloc_r>
 801375e:	bf00      	nop
 8013760:	20000018 	.word	0x20000018

08013764 <_free_r>:
 8013764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013766:	2900      	cmp	r1, #0
 8013768:	d044      	beq.n	80137f4 <_free_r+0x90>
 801376a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801376e:	9001      	str	r0, [sp, #4]
 8013770:	2b00      	cmp	r3, #0
 8013772:	f1a1 0404 	sub.w	r4, r1, #4
 8013776:	bfb8      	it	lt
 8013778:	18e4      	addlt	r4, r4, r3
 801377a:	f000 ff95 	bl	80146a8 <__malloc_lock>
 801377e:	4a1e      	ldr	r2, [pc, #120]	; (80137f8 <_free_r+0x94>)
 8013780:	9801      	ldr	r0, [sp, #4]
 8013782:	6813      	ldr	r3, [r2, #0]
 8013784:	b933      	cbnz	r3, 8013794 <_free_r+0x30>
 8013786:	6063      	str	r3, [r4, #4]
 8013788:	6014      	str	r4, [r2, #0]
 801378a:	b003      	add	sp, #12
 801378c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013790:	f000 bf90 	b.w	80146b4 <__malloc_unlock>
 8013794:	42a3      	cmp	r3, r4
 8013796:	d908      	bls.n	80137aa <_free_r+0x46>
 8013798:	6825      	ldr	r5, [r4, #0]
 801379a:	1961      	adds	r1, r4, r5
 801379c:	428b      	cmp	r3, r1
 801379e:	bf01      	itttt	eq
 80137a0:	6819      	ldreq	r1, [r3, #0]
 80137a2:	685b      	ldreq	r3, [r3, #4]
 80137a4:	1949      	addeq	r1, r1, r5
 80137a6:	6021      	streq	r1, [r4, #0]
 80137a8:	e7ed      	b.n	8013786 <_free_r+0x22>
 80137aa:	461a      	mov	r2, r3
 80137ac:	685b      	ldr	r3, [r3, #4]
 80137ae:	b10b      	cbz	r3, 80137b4 <_free_r+0x50>
 80137b0:	42a3      	cmp	r3, r4
 80137b2:	d9fa      	bls.n	80137aa <_free_r+0x46>
 80137b4:	6811      	ldr	r1, [r2, #0]
 80137b6:	1855      	adds	r5, r2, r1
 80137b8:	42a5      	cmp	r5, r4
 80137ba:	d10b      	bne.n	80137d4 <_free_r+0x70>
 80137bc:	6824      	ldr	r4, [r4, #0]
 80137be:	4421      	add	r1, r4
 80137c0:	1854      	adds	r4, r2, r1
 80137c2:	42a3      	cmp	r3, r4
 80137c4:	6011      	str	r1, [r2, #0]
 80137c6:	d1e0      	bne.n	801378a <_free_r+0x26>
 80137c8:	681c      	ldr	r4, [r3, #0]
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	6053      	str	r3, [r2, #4]
 80137ce:	4421      	add	r1, r4
 80137d0:	6011      	str	r1, [r2, #0]
 80137d2:	e7da      	b.n	801378a <_free_r+0x26>
 80137d4:	d902      	bls.n	80137dc <_free_r+0x78>
 80137d6:	230c      	movs	r3, #12
 80137d8:	6003      	str	r3, [r0, #0]
 80137da:	e7d6      	b.n	801378a <_free_r+0x26>
 80137dc:	6825      	ldr	r5, [r4, #0]
 80137de:	1961      	adds	r1, r4, r5
 80137e0:	428b      	cmp	r3, r1
 80137e2:	bf04      	itt	eq
 80137e4:	6819      	ldreq	r1, [r3, #0]
 80137e6:	685b      	ldreq	r3, [r3, #4]
 80137e8:	6063      	str	r3, [r4, #4]
 80137ea:	bf04      	itt	eq
 80137ec:	1949      	addeq	r1, r1, r5
 80137ee:	6021      	streq	r1, [r4, #0]
 80137f0:	6054      	str	r4, [r2, #4]
 80137f2:	e7ca      	b.n	801378a <_free_r+0x26>
 80137f4:	b003      	add	sp, #12
 80137f6:	bd30      	pop	{r4, r5, pc}
 80137f8:	20008fb4 	.word	0x20008fb4

080137fc <sbrk_aligned>:
 80137fc:	b570      	push	{r4, r5, r6, lr}
 80137fe:	4e0e      	ldr	r6, [pc, #56]	; (8013838 <sbrk_aligned+0x3c>)
 8013800:	460c      	mov	r4, r1
 8013802:	6831      	ldr	r1, [r6, #0]
 8013804:	4605      	mov	r5, r0
 8013806:	b911      	cbnz	r1, 801380e <sbrk_aligned+0x12>
 8013808:	f000 fcd6 	bl	80141b8 <_sbrk_r>
 801380c:	6030      	str	r0, [r6, #0]
 801380e:	4621      	mov	r1, r4
 8013810:	4628      	mov	r0, r5
 8013812:	f000 fcd1 	bl	80141b8 <_sbrk_r>
 8013816:	1c43      	adds	r3, r0, #1
 8013818:	d00a      	beq.n	8013830 <sbrk_aligned+0x34>
 801381a:	1cc4      	adds	r4, r0, #3
 801381c:	f024 0403 	bic.w	r4, r4, #3
 8013820:	42a0      	cmp	r0, r4
 8013822:	d007      	beq.n	8013834 <sbrk_aligned+0x38>
 8013824:	1a21      	subs	r1, r4, r0
 8013826:	4628      	mov	r0, r5
 8013828:	f000 fcc6 	bl	80141b8 <_sbrk_r>
 801382c:	3001      	adds	r0, #1
 801382e:	d101      	bne.n	8013834 <sbrk_aligned+0x38>
 8013830:	f04f 34ff 	mov.w	r4, #4294967295
 8013834:	4620      	mov	r0, r4
 8013836:	bd70      	pop	{r4, r5, r6, pc}
 8013838:	20008fb8 	.word	0x20008fb8

0801383c <_malloc_r>:
 801383c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013840:	1ccd      	adds	r5, r1, #3
 8013842:	f025 0503 	bic.w	r5, r5, #3
 8013846:	3508      	adds	r5, #8
 8013848:	2d0c      	cmp	r5, #12
 801384a:	bf38      	it	cc
 801384c:	250c      	movcc	r5, #12
 801384e:	2d00      	cmp	r5, #0
 8013850:	4607      	mov	r7, r0
 8013852:	db01      	blt.n	8013858 <_malloc_r+0x1c>
 8013854:	42a9      	cmp	r1, r5
 8013856:	d905      	bls.n	8013864 <_malloc_r+0x28>
 8013858:	230c      	movs	r3, #12
 801385a:	603b      	str	r3, [r7, #0]
 801385c:	2600      	movs	r6, #0
 801385e:	4630      	mov	r0, r6
 8013860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013864:	4e2e      	ldr	r6, [pc, #184]	; (8013920 <_malloc_r+0xe4>)
 8013866:	f000 ff1f 	bl	80146a8 <__malloc_lock>
 801386a:	6833      	ldr	r3, [r6, #0]
 801386c:	461c      	mov	r4, r3
 801386e:	bb34      	cbnz	r4, 80138be <_malloc_r+0x82>
 8013870:	4629      	mov	r1, r5
 8013872:	4638      	mov	r0, r7
 8013874:	f7ff ffc2 	bl	80137fc <sbrk_aligned>
 8013878:	1c43      	adds	r3, r0, #1
 801387a:	4604      	mov	r4, r0
 801387c:	d14d      	bne.n	801391a <_malloc_r+0xde>
 801387e:	6834      	ldr	r4, [r6, #0]
 8013880:	4626      	mov	r6, r4
 8013882:	2e00      	cmp	r6, #0
 8013884:	d140      	bne.n	8013908 <_malloc_r+0xcc>
 8013886:	6823      	ldr	r3, [r4, #0]
 8013888:	4631      	mov	r1, r6
 801388a:	4638      	mov	r0, r7
 801388c:	eb04 0803 	add.w	r8, r4, r3
 8013890:	f000 fc92 	bl	80141b8 <_sbrk_r>
 8013894:	4580      	cmp	r8, r0
 8013896:	d13a      	bne.n	801390e <_malloc_r+0xd2>
 8013898:	6821      	ldr	r1, [r4, #0]
 801389a:	3503      	adds	r5, #3
 801389c:	1a6d      	subs	r5, r5, r1
 801389e:	f025 0503 	bic.w	r5, r5, #3
 80138a2:	3508      	adds	r5, #8
 80138a4:	2d0c      	cmp	r5, #12
 80138a6:	bf38      	it	cc
 80138a8:	250c      	movcc	r5, #12
 80138aa:	4629      	mov	r1, r5
 80138ac:	4638      	mov	r0, r7
 80138ae:	f7ff ffa5 	bl	80137fc <sbrk_aligned>
 80138b2:	3001      	adds	r0, #1
 80138b4:	d02b      	beq.n	801390e <_malloc_r+0xd2>
 80138b6:	6823      	ldr	r3, [r4, #0]
 80138b8:	442b      	add	r3, r5
 80138ba:	6023      	str	r3, [r4, #0]
 80138bc:	e00e      	b.n	80138dc <_malloc_r+0xa0>
 80138be:	6822      	ldr	r2, [r4, #0]
 80138c0:	1b52      	subs	r2, r2, r5
 80138c2:	d41e      	bmi.n	8013902 <_malloc_r+0xc6>
 80138c4:	2a0b      	cmp	r2, #11
 80138c6:	d916      	bls.n	80138f6 <_malloc_r+0xba>
 80138c8:	1961      	adds	r1, r4, r5
 80138ca:	42a3      	cmp	r3, r4
 80138cc:	6025      	str	r5, [r4, #0]
 80138ce:	bf18      	it	ne
 80138d0:	6059      	strne	r1, [r3, #4]
 80138d2:	6863      	ldr	r3, [r4, #4]
 80138d4:	bf08      	it	eq
 80138d6:	6031      	streq	r1, [r6, #0]
 80138d8:	5162      	str	r2, [r4, r5]
 80138da:	604b      	str	r3, [r1, #4]
 80138dc:	4638      	mov	r0, r7
 80138de:	f104 060b 	add.w	r6, r4, #11
 80138e2:	f000 fee7 	bl	80146b4 <__malloc_unlock>
 80138e6:	f026 0607 	bic.w	r6, r6, #7
 80138ea:	1d23      	adds	r3, r4, #4
 80138ec:	1af2      	subs	r2, r6, r3
 80138ee:	d0b6      	beq.n	801385e <_malloc_r+0x22>
 80138f0:	1b9b      	subs	r3, r3, r6
 80138f2:	50a3      	str	r3, [r4, r2]
 80138f4:	e7b3      	b.n	801385e <_malloc_r+0x22>
 80138f6:	6862      	ldr	r2, [r4, #4]
 80138f8:	42a3      	cmp	r3, r4
 80138fa:	bf0c      	ite	eq
 80138fc:	6032      	streq	r2, [r6, #0]
 80138fe:	605a      	strne	r2, [r3, #4]
 8013900:	e7ec      	b.n	80138dc <_malloc_r+0xa0>
 8013902:	4623      	mov	r3, r4
 8013904:	6864      	ldr	r4, [r4, #4]
 8013906:	e7b2      	b.n	801386e <_malloc_r+0x32>
 8013908:	4634      	mov	r4, r6
 801390a:	6876      	ldr	r6, [r6, #4]
 801390c:	e7b9      	b.n	8013882 <_malloc_r+0x46>
 801390e:	230c      	movs	r3, #12
 8013910:	603b      	str	r3, [r7, #0]
 8013912:	4638      	mov	r0, r7
 8013914:	f000 fece 	bl	80146b4 <__malloc_unlock>
 8013918:	e7a1      	b.n	801385e <_malloc_r+0x22>
 801391a:	6025      	str	r5, [r4, #0]
 801391c:	e7de      	b.n	80138dc <_malloc_r+0xa0>
 801391e:	bf00      	nop
 8013920:	20008fb4 	.word	0x20008fb4

08013924 <__ssputs_r>:
 8013924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013928:	688e      	ldr	r6, [r1, #8]
 801392a:	429e      	cmp	r6, r3
 801392c:	4682      	mov	sl, r0
 801392e:	460c      	mov	r4, r1
 8013930:	4690      	mov	r8, r2
 8013932:	461f      	mov	r7, r3
 8013934:	d838      	bhi.n	80139a8 <__ssputs_r+0x84>
 8013936:	898a      	ldrh	r2, [r1, #12]
 8013938:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801393c:	d032      	beq.n	80139a4 <__ssputs_r+0x80>
 801393e:	6825      	ldr	r5, [r4, #0]
 8013940:	6909      	ldr	r1, [r1, #16]
 8013942:	eba5 0901 	sub.w	r9, r5, r1
 8013946:	6965      	ldr	r5, [r4, #20]
 8013948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801394c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013950:	3301      	adds	r3, #1
 8013952:	444b      	add	r3, r9
 8013954:	106d      	asrs	r5, r5, #1
 8013956:	429d      	cmp	r5, r3
 8013958:	bf38      	it	cc
 801395a:	461d      	movcc	r5, r3
 801395c:	0553      	lsls	r3, r2, #21
 801395e:	d531      	bpl.n	80139c4 <__ssputs_r+0xa0>
 8013960:	4629      	mov	r1, r5
 8013962:	f7ff ff6b 	bl	801383c <_malloc_r>
 8013966:	4606      	mov	r6, r0
 8013968:	b950      	cbnz	r0, 8013980 <__ssputs_r+0x5c>
 801396a:	230c      	movs	r3, #12
 801396c:	f8ca 3000 	str.w	r3, [sl]
 8013970:	89a3      	ldrh	r3, [r4, #12]
 8013972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013976:	81a3      	strh	r3, [r4, #12]
 8013978:	f04f 30ff 	mov.w	r0, #4294967295
 801397c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013980:	6921      	ldr	r1, [r4, #16]
 8013982:	464a      	mov	r2, r9
 8013984:	f7ff fd18 	bl	80133b8 <memcpy>
 8013988:	89a3      	ldrh	r3, [r4, #12]
 801398a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801398e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013992:	81a3      	strh	r3, [r4, #12]
 8013994:	6126      	str	r6, [r4, #16]
 8013996:	6165      	str	r5, [r4, #20]
 8013998:	444e      	add	r6, r9
 801399a:	eba5 0509 	sub.w	r5, r5, r9
 801399e:	6026      	str	r6, [r4, #0]
 80139a0:	60a5      	str	r5, [r4, #8]
 80139a2:	463e      	mov	r6, r7
 80139a4:	42be      	cmp	r6, r7
 80139a6:	d900      	bls.n	80139aa <__ssputs_r+0x86>
 80139a8:	463e      	mov	r6, r7
 80139aa:	6820      	ldr	r0, [r4, #0]
 80139ac:	4632      	mov	r2, r6
 80139ae:	4641      	mov	r1, r8
 80139b0:	f7ff fd10 	bl	80133d4 <memmove>
 80139b4:	68a3      	ldr	r3, [r4, #8]
 80139b6:	1b9b      	subs	r3, r3, r6
 80139b8:	60a3      	str	r3, [r4, #8]
 80139ba:	6823      	ldr	r3, [r4, #0]
 80139bc:	4433      	add	r3, r6
 80139be:	6023      	str	r3, [r4, #0]
 80139c0:	2000      	movs	r0, #0
 80139c2:	e7db      	b.n	801397c <__ssputs_r+0x58>
 80139c4:	462a      	mov	r2, r5
 80139c6:	f000 fe7b 	bl	80146c0 <_realloc_r>
 80139ca:	4606      	mov	r6, r0
 80139cc:	2800      	cmp	r0, #0
 80139ce:	d1e1      	bne.n	8013994 <__ssputs_r+0x70>
 80139d0:	6921      	ldr	r1, [r4, #16]
 80139d2:	4650      	mov	r0, sl
 80139d4:	f7ff fec6 	bl	8013764 <_free_r>
 80139d8:	e7c7      	b.n	801396a <__ssputs_r+0x46>
	...

080139dc <_svfiprintf_r>:
 80139dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139e0:	4698      	mov	r8, r3
 80139e2:	898b      	ldrh	r3, [r1, #12]
 80139e4:	061b      	lsls	r3, r3, #24
 80139e6:	b09d      	sub	sp, #116	; 0x74
 80139e8:	4607      	mov	r7, r0
 80139ea:	460d      	mov	r5, r1
 80139ec:	4614      	mov	r4, r2
 80139ee:	d50e      	bpl.n	8013a0e <_svfiprintf_r+0x32>
 80139f0:	690b      	ldr	r3, [r1, #16]
 80139f2:	b963      	cbnz	r3, 8013a0e <_svfiprintf_r+0x32>
 80139f4:	2140      	movs	r1, #64	; 0x40
 80139f6:	f7ff ff21 	bl	801383c <_malloc_r>
 80139fa:	6028      	str	r0, [r5, #0]
 80139fc:	6128      	str	r0, [r5, #16]
 80139fe:	b920      	cbnz	r0, 8013a0a <_svfiprintf_r+0x2e>
 8013a00:	230c      	movs	r3, #12
 8013a02:	603b      	str	r3, [r7, #0]
 8013a04:	f04f 30ff 	mov.w	r0, #4294967295
 8013a08:	e0d1      	b.n	8013bae <_svfiprintf_r+0x1d2>
 8013a0a:	2340      	movs	r3, #64	; 0x40
 8013a0c:	616b      	str	r3, [r5, #20]
 8013a0e:	2300      	movs	r3, #0
 8013a10:	9309      	str	r3, [sp, #36]	; 0x24
 8013a12:	2320      	movs	r3, #32
 8013a14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a1c:	2330      	movs	r3, #48	; 0x30
 8013a1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013bc8 <_svfiprintf_r+0x1ec>
 8013a22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a26:	f04f 0901 	mov.w	r9, #1
 8013a2a:	4623      	mov	r3, r4
 8013a2c:	469a      	mov	sl, r3
 8013a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a32:	b10a      	cbz	r2, 8013a38 <_svfiprintf_r+0x5c>
 8013a34:	2a25      	cmp	r2, #37	; 0x25
 8013a36:	d1f9      	bne.n	8013a2c <_svfiprintf_r+0x50>
 8013a38:	ebba 0b04 	subs.w	fp, sl, r4
 8013a3c:	d00b      	beq.n	8013a56 <_svfiprintf_r+0x7a>
 8013a3e:	465b      	mov	r3, fp
 8013a40:	4622      	mov	r2, r4
 8013a42:	4629      	mov	r1, r5
 8013a44:	4638      	mov	r0, r7
 8013a46:	f7ff ff6d 	bl	8013924 <__ssputs_r>
 8013a4a:	3001      	adds	r0, #1
 8013a4c:	f000 80aa 	beq.w	8013ba4 <_svfiprintf_r+0x1c8>
 8013a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a52:	445a      	add	r2, fp
 8013a54:	9209      	str	r2, [sp, #36]	; 0x24
 8013a56:	f89a 3000 	ldrb.w	r3, [sl]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	f000 80a2 	beq.w	8013ba4 <_svfiprintf_r+0x1c8>
 8013a60:	2300      	movs	r3, #0
 8013a62:	f04f 32ff 	mov.w	r2, #4294967295
 8013a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a6a:	f10a 0a01 	add.w	sl, sl, #1
 8013a6e:	9304      	str	r3, [sp, #16]
 8013a70:	9307      	str	r3, [sp, #28]
 8013a72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a76:	931a      	str	r3, [sp, #104]	; 0x68
 8013a78:	4654      	mov	r4, sl
 8013a7a:	2205      	movs	r2, #5
 8013a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a80:	4851      	ldr	r0, [pc, #324]	; (8013bc8 <_svfiprintf_r+0x1ec>)
 8013a82:	f7ec fbb5 	bl	80001f0 <memchr>
 8013a86:	9a04      	ldr	r2, [sp, #16]
 8013a88:	b9d8      	cbnz	r0, 8013ac2 <_svfiprintf_r+0xe6>
 8013a8a:	06d0      	lsls	r0, r2, #27
 8013a8c:	bf44      	itt	mi
 8013a8e:	2320      	movmi	r3, #32
 8013a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a94:	0711      	lsls	r1, r2, #28
 8013a96:	bf44      	itt	mi
 8013a98:	232b      	movmi	r3, #43	; 0x2b
 8013a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8013aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8013aa4:	d015      	beq.n	8013ad2 <_svfiprintf_r+0xf6>
 8013aa6:	9a07      	ldr	r2, [sp, #28]
 8013aa8:	4654      	mov	r4, sl
 8013aaa:	2000      	movs	r0, #0
 8013aac:	f04f 0c0a 	mov.w	ip, #10
 8013ab0:	4621      	mov	r1, r4
 8013ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ab6:	3b30      	subs	r3, #48	; 0x30
 8013ab8:	2b09      	cmp	r3, #9
 8013aba:	d94e      	bls.n	8013b5a <_svfiprintf_r+0x17e>
 8013abc:	b1b0      	cbz	r0, 8013aec <_svfiprintf_r+0x110>
 8013abe:	9207      	str	r2, [sp, #28]
 8013ac0:	e014      	b.n	8013aec <_svfiprintf_r+0x110>
 8013ac2:	eba0 0308 	sub.w	r3, r0, r8
 8013ac6:	fa09 f303 	lsl.w	r3, r9, r3
 8013aca:	4313      	orrs	r3, r2
 8013acc:	9304      	str	r3, [sp, #16]
 8013ace:	46a2      	mov	sl, r4
 8013ad0:	e7d2      	b.n	8013a78 <_svfiprintf_r+0x9c>
 8013ad2:	9b03      	ldr	r3, [sp, #12]
 8013ad4:	1d19      	adds	r1, r3, #4
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	9103      	str	r1, [sp, #12]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	bfbb      	ittet	lt
 8013ade:	425b      	neglt	r3, r3
 8013ae0:	f042 0202 	orrlt.w	r2, r2, #2
 8013ae4:	9307      	strge	r3, [sp, #28]
 8013ae6:	9307      	strlt	r3, [sp, #28]
 8013ae8:	bfb8      	it	lt
 8013aea:	9204      	strlt	r2, [sp, #16]
 8013aec:	7823      	ldrb	r3, [r4, #0]
 8013aee:	2b2e      	cmp	r3, #46	; 0x2e
 8013af0:	d10c      	bne.n	8013b0c <_svfiprintf_r+0x130>
 8013af2:	7863      	ldrb	r3, [r4, #1]
 8013af4:	2b2a      	cmp	r3, #42	; 0x2a
 8013af6:	d135      	bne.n	8013b64 <_svfiprintf_r+0x188>
 8013af8:	9b03      	ldr	r3, [sp, #12]
 8013afa:	1d1a      	adds	r2, r3, #4
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	9203      	str	r2, [sp, #12]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	bfb8      	it	lt
 8013b04:	f04f 33ff 	movlt.w	r3, #4294967295
 8013b08:	3402      	adds	r4, #2
 8013b0a:	9305      	str	r3, [sp, #20]
 8013b0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013bd8 <_svfiprintf_r+0x1fc>
 8013b10:	7821      	ldrb	r1, [r4, #0]
 8013b12:	2203      	movs	r2, #3
 8013b14:	4650      	mov	r0, sl
 8013b16:	f7ec fb6b 	bl	80001f0 <memchr>
 8013b1a:	b140      	cbz	r0, 8013b2e <_svfiprintf_r+0x152>
 8013b1c:	2340      	movs	r3, #64	; 0x40
 8013b1e:	eba0 000a 	sub.w	r0, r0, sl
 8013b22:	fa03 f000 	lsl.w	r0, r3, r0
 8013b26:	9b04      	ldr	r3, [sp, #16]
 8013b28:	4303      	orrs	r3, r0
 8013b2a:	3401      	adds	r4, #1
 8013b2c:	9304      	str	r3, [sp, #16]
 8013b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b32:	4826      	ldr	r0, [pc, #152]	; (8013bcc <_svfiprintf_r+0x1f0>)
 8013b34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b38:	2206      	movs	r2, #6
 8013b3a:	f7ec fb59 	bl	80001f0 <memchr>
 8013b3e:	2800      	cmp	r0, #0
 8013b40:	d038      	beq.n	8013bb4 <_svfiprintf_r+0x1d8>
 8013b42:	4b23      	ldr	r3, [pc, #140]	; (8013bd0 <_svfiprintf_r+0x1f4>)
 8013b44:	bb1b      	cbnz	r3, 8013b8e <_svfiprintf_r+0x1b2>
 8013b46:	9b03      	ldr	r3, [sp, #12]
 8013b48:	3307      	adds	r3, #7
 8013b4a:	f023 0307 	bic.w	r3, r3, #7
 8013b4e:	3308      	adds	r3, #8
 8013b50:	9303      	str	r3, [sp, #12]
 8013b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b54:	4433      	add	r3, r6
 8013b56:	9309      	str	r3, [sp, #36]	; 0x24
 8013b58:	e767      	b.n	8013a2a <_svfiprintf_r+0x4e>
 8013b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b5e:	460c      	mov	r4, r1
 8013b60:	2001      	movs	r0, #1
 8013b62:	e7a5      	b.n	8013ab0 <_svfiprintf_r+0xd4>
 8013b64:	2300      	movs	r3, #0
 8013b66:	3401      	adds	r4, #1
 8013b68:	9305      	str	r3, [sp, #20]
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	f04f 0c0a 	mov.w	ip, #10
 8013b70:	4620      	mov	r0, r4
 8013b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b76:	3a30      	subs	r2, #48	; 0x30
 8013b78:	2a09      	cmp	r2, #9
 8013b7a:	d903      	bls.n	8013b84 <_svfiprintf_r+0x1a8>
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d0c5      	beq.n	8013b0c <_svfiprintf_r+0x130>
 8013b80:	9105      	str	r1, [sp, #20]
 8013b82:	e7c3      	b.n	8013b0c <_svfiprintf_r+0x130>
 8013b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b88:	4604      	mov	r4, r0
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	e7f0      	b.n	8013b70 <_svfiprintf_r+0x194>
 8013b8e:	ab03      	add	r3, sp, #12
 8013b90:	9300      	str	r3, [sp, #0]
 8013b92:	462a      	mov	r2, r5
 8013b94:	4b0f      	ldr	r3, [pc, #60]	; (8013bd4 <_svfiprintf_r+0x1f8>)
 8013b96:	a904      	add	r1, sp, #16
 8013b98:	4638      	mov	r0, r7
 8013b9a:	f3af 8000 	nop.w
 8013b9e:	1c42      	adds	r2, r0, #1
 8013ba0:	4606      	mov	r6, r0
 8013ba2:	d1d6      	bne.n	8013b52 <_svfiprintf_r+0x176>
 8013ba4:	89ab      	ldrh	r3, [r5, #12]
 8013ba6:	065b      	lsls	r3, r3, #25
 8013ba8:	f53f af2c 	bmi.w	8013a04 <_svfiprintf_r+0x28>
 8013bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013bae:	b01d      	add	sp, #116	; 0x74
 8013bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bb4:	ab03      	add	r3, sp, #12
 8013bb6:	9300      	str	r3, [sp, #0]
 8013bb8:	462a      	mov	r2, r5
 8013bba:	4b06      	ldr	r3, [pc, #24]	; (8013bd4 <_svfiprintf_r+0x1f8>)
 8013bbc:	a904      	add	r1, sp, #16
 8013bbe:	4638      	mov	r0, r7
 8013bc0:	f000 f9d4 	bl	8013f6c <_printf_i>
 8013bc4:	e7eb      	b.n	8013b9e <_svfiprintf_r+0x1c2>
 8013bc6:	bf00      	nop
 8013bc8:	08017480 	.word	0x08017480
 8013bcc:	0801748a 	.word	0x0801748a
 8013bd0:	00000000 	.word	0x00000000
 8013bd4:	08013925 	.word	0x08013925
 8013bd8:	08017486 	.word	0x08017486

08013bdc <__sfputc_r>:
 8013bdc:	6893      	ldr	r3, [r2, #8]
 8013bde:	3b01      	subs	r3, #1
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	b410      	push	{r4}
 8013be4:	6093      	str	r3, [r2, #8]
 8013be6:	da08      	bge.n	8013bfa <__sfputc_r+0x1e>
 8013be8:	6994      	ldr	r4, [r2, #24]
 8013bea:	42a3      	cmp	r3, r4
 8013bec:	db01      	blt.n	8013bf2 <__sfputc_r+0x16>
 8013bee:	290a      	cmp	r1, #10
 8013bf0:	d103      	bne.n	8013bfa <__sfputc_r+0x1e>
 8013bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bf6:	f000 bb33 	b.w	8014260 <__swbuf_r>
 8013bfa:	6813      	ldr	r3, [r2, #0]
 8013bfc:	1c58      	adds	r0, r3, #1
 8013bfe:	6010      	str	r0, [r2, #0]
 8013c00:	7019      	strb	r1, [r3, #0]
 8013c02:	4608      	mov	r0, r1
 8013c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c08:	4770      	bx	lr

08013c0a <__sfputs_r>:
 8013c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c0c:	4606      	mov	r6, r0
 8013c0e:	460f      	mov	r7, r1
 8013c10:	4614      	mov	r4, r2
 8013c12:	18d5      	adds	r5, r2, r3
 8013c14:	42ac      	cmp	r4, r5
 8013c16:	d101      	bne.n	8013c1c <__sfputs_r+0x12>
 8013c18:	2000      	movs	r0, #0
 8013c1a:	e007      	b.n	8013c2c <__sfputs_r+0x22>
 8013c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c20:	463a      	mov	r2, r7
 8013c22:	4630      	mov	r0, r6
 8013c24:	f7ff ffda 	bl	8013bdc <__sfputc_r>
 8013c28:	1c43      	adds	r3, r0, #1
 8013c2a:	d1f3      	bne.n	8013c14 <__sfputs_r+0xa>
 8013c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013c30 <_vfiprintf_r>:
 8013c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c34:	460d      	mov	r5, r1
 8013c36:	b09d      	sub	sp, #116	; 0x74
 8013c38:	4614      	mov	r4, r2
 8013c3a:	4698      	mov	r8, r3
 8013c3c:	4606      	mov	r6, r0
 8013c3e:	b118      	cbz	r0, 8013c48 <_vfiprintf_r+0x18>
 8013c40:	6983      	ldr	r3, [r0, #24]
 8013c42:	b90b      	cbnz	r3, 8013c48 <_vfiprintf_r+0x18>
 8013c44:	f7ff fcd4 	bl	80135f0 <__sinit>
 8013c48:	4b89      	ldr	r3, [pc, #548]	; (8013e70 <_vfiprintf_r+0x240>)
 8013c4a:	429d      	cmp	r5, r3
 8013c4c:	d11b      	bne.n	8013c86 <_vfiprintf_r+0x56>
 8013c4e:	6875      	ldr	r5, [r6, #4]
 8013c50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c52:	07d9      	lsls	r1, r3, #31
 8013c54:	d405      	bmi.n	8013c62 <_vfiprintf_r+0x32>
 8013c56:	89ab      	ldrh	r3, [r5, #12]
 8013c58:	059a      	lsls	r2, r3, #22
 8013c5a:	d402      	bmi.n	8013c62 <_vfiprintf_r+0x32>
 8013c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c5e:	f7ff fd77 	bl	8013750 <__retarget_lock_acquire_recursive>
 8013c62:	89ab      	ldrh	r3, [r5, #12]
 8013c64:	071b      	lsls	r3, r3, #28
 8013c66:	d501      	bpl.n	8013c6c <_vfiprintf_r+0x3c>
 8013c68:	692b      	ldr	r3, [r5, #16]
 8013c6a:	b9eb      	cbnz	r3, 8013ca8 <_vfiprintf_r+0x78>
 8013c6c:	4629      	mov	r1, r5
 8013c6e:	4630      	mov	r0, r6
 8013c70:	f000 fb5a 	bl	8014328 <__swsetup_r>
 8013c74:	b1c0      	cbz	r0, 8013ca8 <_vfiprintf_r+0x78>
 8013c76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c78:	07dc      	lsls	r4, r3, #31
 8013c7a:	d50e      	bpl.n	8013c9a <_vfiprintf_r+0x6a>
 8013c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8013c80:	b01d      	add	sp, #116	; 0x74
 8013c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c86:	4b7b      	ldr	r3, [pc, #492]	; (8013e74 <_vfiprintf_r+0x244>)
 8013c88:	429d      	cmp	r5, r3
 8013c8a:	d101      	bne.n	8013c90 <_vfiprintf_r+0x60>
 8013c8c:	68b5      	ldr	r5, [r6, #8]
 8013c8e:	e7df      	b.n	8013c50 <_vfiprintf_r+0x20>
 8013c90:	4b79      	ldr	r3, [pc, #484]	; (8013e78 <_vfiprintf_r+0x248>)
 8013c92:	429d      	cmp	r5, r3
 8013c94:	bf08      	it	eq
 8013c96:	68f5      	ldreq	r5, [r6, #12]
 8013c98:	e7da      	b.n	8013c50 <_vfiprintf_r+0x20>
 8013c9a:	89ab      	ldrh	r3, [r5, #12]
 8013c9c:	0598      	lsls	r0, r3, #22
 8013c9e:	d4ed      	bmi.n	8013c7c <_vfiprintf_r+0x4c>
 8013ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ca2:	f7ff fd56 	bl	8013752 <__retarget_lock_release_recursive>
 8013ca6:	e7e9      	b.n	8013c7c <_vfiprintf_r+0x4c>
 8013ca8:	2300      	movs	r3, #0
 8013caa:	9309      	str	r3, [sp, #36]	; 0x24
 8013cac:	2320      	movs	r3, #32
 8013cae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8013cb6:	2330      	movs	r3, #48	; 0x30
 8013cb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013e7c <_vfiprintf_r+0x24c>
 8013cbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013cc0:	f04f 0901 	mov.w	r9, #1
 8013cc4:	4623      	mov	r3, r4
 8013cc6:	469a      	mov	sl, r3
 8013cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ccc:	b10a      	cbz	r2, 8013cd2 <_vfiprintf_r+0xa2>
 8013cce:	2a25      	cmp	r2, #37	; 0x25
 8013cd0:	d1f9      	bne.n	8013cc6 <_vfiprintf_r+0x96>
 8013cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8013cd6:	d00b      	beq.n	8013cf0 <_vfiprintf_r+0xc0>
 8013cd8:	465b      	mov	r3, fp
 8013cda:	4622      	mov	r2, r4
 8013cdc:	4629      	mov	r1, r5
 8013cde:	4630      	mov	r0, r6
 8013ce0:	f7ff ff93 	bl	8013c0a <__sfputs_r>
 8013ce4:	3001      	adds	r0, #1
 8013ce6:	f000 80aa 	beq.w	8013e3e <_vfiprintf_r+0x20e>
 8013cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013cec:	445a      	add	r2, fp
 8013cee:	9209      	str	r2, [sp, #36]	; 0x24
 8013cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	f000 80a2 	beq.w	8013e3e <_vfiprintf_r+0x20e>
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8013d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d04:	f10a 0a01 	add.w	sl, sl, #1
 8013d08:	9304      	str	r3, [sp, #16]
 8013d0a:	9307      	str	r3, [sp, #28]
 8013d0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013d10:	931a      	str	r3, [sp, #104]	; 0x68
 8013d12:	4654      	mov	r4, sl
 8013d14:	2205      	movs	r2, #5
 8013d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d1a:	4858      	ldr	r0, [pc, #352]	; (8013e7c <_vfiprintf_r+0x24c>)
 8013d1c:	f7ec fa68 	bl	80001f0 <memchr>
 8013d20:	9a04      	ldr	r2, [sp, #16]
 8013d22:	b9d8      	cbnz	r0, 8013d5c <_vfiprintf_r+0x12c>
 8013d24:	06d1      	lsls	r1, r2, #27
 8013d26:	bf44      	itt	mi
 8013d28:	2320      	movmi	r3, #32
 8013d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d2e:	0713      	lsls	r3, r2, #28
 8013d30:	bf44      	itt	mi
 8013d32:	232b      	movmi	r3, #43	; 0x2b
 8013d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d38:	f89a 3000 	ldrb.w	r3, [sl]
 8013d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8013d3e:	d015      	beq.n	8013d6c <_vfiprintf_r+0x13c>
 8013d40:	9a07      	ldr	r2, [sp, #28]
 8013d42:	4654      	mov	r4, sl
 8013d44:	2000      	movs	r0, #0
 8013d46:	f04f 0c0a 	mov.w	ip, #10
 8013d4a:	4621      	mov	r1, r4
 8013d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d50:	3b30      	subs	r3, #48	; 0x30
 8013d52:	2b09      	cmp	r3, #9
 8013d54:	d94e      	bls.n	8013df4 <_vfiprintf_r+0x1c4>
 8013d56:	b1b0      	cbz	r0, 8013d86 <_vfiprintf_r+0x156>
 8013d58:	9207      	str	r2, [sp, #28]
 8013d5a:	e014      	b.n	8013d86 <_vfiprintf_r+0x156>
 8013d5c:	eba0 0308 	sub.w	r3, r0, r8
 8013d60:	fa09 f303 	lsl.w	r3, r9, r3
 8013d64:	4313      	orrs	r3, r2
 8013d66:	9304      	str	r3, [sp, #16]
 8013d68:	46a2      	mov	sl, r4
 8013d6a:	e7d2      	b.n	8013d12 <_vfiprintf_r+0xe2>
 8013d6c:	9b03      	ldr	r3, [sp, #12]
 8013d6e:	1d19      	adds	r1, r3, #4
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	9103      	str	r1, [sp, #12]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	bfbb      	ittet	lt
 8013d78:	425b      	neglt	r3, r3
 8013d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8013d7e:	9307      	strge	r3, [sp, #28]
 8013d80:	9307      	strlt	r3, [sp, #28]
 8013d82:	bfb8      	it	lt
 8013d84:	9204      	strlt	r2, [sp, #16]
 8013d86:	7823      	ldrb	r3, [r4, #0]
 8013d88:	2b2e      	cmp	r3, #46	; 0x2e
 8013d8a:	d10c      	bne.n	8013da6 <_vfiprintf_r+0x176>
 8013d8c:	7863      	ldrb	r3, [r4, #1]
 8013d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8013d90:	d135      	bne.n	8013dfe <_vfiprintf_r+0x1ce>
 8013d92:	9b03      	ldr	r3, [sp, #12]
 8013d94:	1d1a      	adds	r2, r3, #4
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	9203      	str	r2, [sp, #12]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	bfb8      	it	lt
 8013d9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013da2:	3402      	adds	r4, #2
 8013da4:	9305      	str	r3, [sp, #20]
 8013da6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013e8c <_vfiprintf_r+0x25c>
 8013daa:	7821      	ldrb	r1, [r4, #0]
 8013dac:	2203      	movs	r2, #3
 8013dae:	4650      	mov	r0, sl
 8013db0:	f7ec fa1e 	bl	80001f0 <memchr>
 8013db4:	b140      	cbz	r0, 8013dc8 <_vfiprintf_r+0x198>
 8013db6:	2340      	movs	r3, #64	; 0x40
 8013db8:	eba0 000a 	sub.w	r0, r0, sl
 8013dbc:	fa03 f000 	lsl.w	r0, r3, r0
 8013dc0:	9b04      	ldr	r3, [sp, #16]
 8013dc2:	4303      	orrs	r3, r0
 8013dc4:	3401      	adds	r4, #1
 8013dc6:	9304      	str	r3, [sp, #16]
 8013dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dcc:	482c      	ldr	r0, [pc, #176]	; (8013e80 <_vfiprintf_r+0x250>)
 8013dce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013dd2:	2206      	movs	r2, #6
 8013dd4:	f7ec fa0c 	bl	80001f0 <memchr>
 8013dd8:	2800      	cmp	r0, #0
 8013dda:	d03f      	beq.n	8013e5c <_vfiprintf_r+0x22c>
 8013ddc:	4b29      	ldr	r3, [pc, #164]	; (8013e84 <_vfiprintf_r+0x254>)
 8013dde:	bb1b      	cbnz	r3, 8013e28 <_vfiprintf_r+0x1f8>
 8013de0:	9b03      	ldr	r3, [sp, #12]
 8013de2:	3307      	adds	r3, #7
 8013de4:	f023 0307 	bic.w	r3, r3, #7
 8013de8:	3308      	adds	r3, #8
 8013dea:	9303      	str	r3, [sp, #12]
 8013dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dee:	443b      	add	r3, r7
 8013df0:	9309      	str	r3, [sp, #36]	; 0x24
 8013df2:	e767      	b.n	8013cc4 <_vfiprintf_r+0x94>
 8013df4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013df8:	460c      	mov	r4, r1
 8013dfa:	2001      	movs	r0, #1
 8013dfc:	e7a5      	b.n	8013d4a <_vfiprintf_r+0x11a>
 8013dfe:	2300      	movs	r3, #0
 8013e00:	3401      	adds	r4, #1
 8013e02:	9305      	str	r3, [sp, #20]
 8013e04:	4619      	mov	r1, r3
 8013e06:	f04f 0c0a 	mov.w	ip, #10
 8013e0a:	4620      	mov	r0, r4
 8013e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e10:	3a30      	subs	r2, #48	; 0x30
 8013e12:	2a09      	cmp	r2, #9
 8013e14:	d903      	bls.n	8013e1e <_vfiprintf_r+0x1ee>
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d0c5      	beq.n	8013da6 <_vfiprintf_r+0x176>
 8013e1a:	9105      	str	r1, [sp, #20]
 8013e1c:	e7c3      	b.n	8013da6 <_vfiprintf_r+0x176>
 8013e1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e22:	4604      	mov	r4, r0
 8013e24:	2301      	movs	r3, #1
 8013e26:	e7f0      	b.n	8013e0a <_vfiprintf_r+0x1da>
 8013e28:	ab03      	add	r3, sp, #12
 8013e2a:	9300      	str	r3, [sp, #0]
 8013e2c:	462a      	mov	r2, r5
 8013e2e:	4b16      	ldr	r3, [pc, #88]	; (8013e88 <_vfiprintf_r+0x258>)
 8013e30:	a904      	add	r1, sp, #16
 8013e32:	4630      	mov	r0, r6
 8013e34:	f3af 8000 	nop.w
 8013e38:	4607      	mov	r7, r0
 8013e3a:	1c78      	adds	r0, r7, #1
 8013e3c:	d1d6      	bne.n	8013dec <_vfiprintf_r+0x1bc>
 8013e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e40:	07d9      	lsls	r1, r3, #31
 8013e42:	d405      	bmi.n	8013e50 <_vfiprintf_r+0x220>
 8013e44:	89ab      	ldrh	r3, [r5, #12]
 8013e46:	059a      	lsls	r2, r3, #22
 8013e48:	d402      	bmi.n	8013e50 <_vfiprintf_r+0x220>
 8013e4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e4c:	f7ff fc81 	bl	8013752 <__retarget_lock_release_recursive>
 8013e50:	89ab      	ldrh	r3, [r5, #12]
 8013e52:	065b      	lsls	r3, r3, #25
 8013e54:	f53f af12 	bmi.w	8013c7c <_vfiprintf_r+0x4c>
 8013e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e5a:	e711      	b.n	8013c80 <_vfiprintf_r+0x50>
 8013e5c:	ab03      	add	r3, sp, #12
 8013e5e:	9300      	str	r3, [sp, #0]
 8013e60:	462a      	mov	r2, r5
 8013e62:	4b09      	ldr	r3, [pc, #36]	; (8013e88 <_vfiprintf_r+0x258>)
 8013e64:	a904      	add	r1, sp, #16
 8013e66:	4630      	mov	r0, r6
 8013e68:	f000 f880 	bl	8013f6c <_printf_i>
 8013e6c:	e7e4      	b.n	8013e38 <_vfiprintf_r+0x208>
 8013e6e:	bf00      	nop
 8013e70:	08017440 	.word	0x08017440
 8013e74:	08017460 	.word	0x08017460
 8013e78:	08017420 	.word	0x08017420
 8013e7c:	08017480 	.word	0x08017480
 8013e80:	0801748a 	.word	0x0801748a
 8013e84:	00000000 	.word	0x00000000
 8013e88:	08013c0b 	.word	0x08013c0b
 8013e8c:	08017486 	.word	0x08017486

08013e90 <_printf_common>:
 8013e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e94:	4616      	mov	r6, r2
 8013e96:	4699      	mov	r9, r3
 8013e98:	688a      	ldr	r2, [r1, #8]
 8013e9a:	690b      	ldr	r3, [r1, #16]
 8013e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	bfb8      	it	lt
 8013ea4:	4613      	movlt	r3, r2
 8013ea6:	6033      	str	r3, [r6, #0]
 8013ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013eac:	4607      	mov	r7, r0
 8013eae:	460c      	mov	r4, r1
 8013eb0:	b10a      	cbz	r2, 8013eb6 <_printf_common+0x26>
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	6033      	str	r3, [r6, #0]
 8013eb6:	6823      	ldr	r3, [r4, #0]
 8013eb8:	0699      	lsls	r1, r3, #26
 8013eba:	bf42      	ittt	mi
 8013ebc:	6833      	ldrmi	r3, [r6, #0]
 8013ebe:	3302      	addmi	r3, #2
 8013ec0:	6033      	strmi	r3, [r6, #0]
 8013ec2:	6825      	ldr	r5, [r4, #0]
 8013ec4:	f015 0506 	ands.w	r5, r5, #6
 8013ec8:	d106      	bne.n	8013ed8 <_printf_common+0x48>
 8013eca:	f104 0a19 	add.w	sl, r4, #25
 8013ece:	68e3      	ldr	r3, [r4, #12]
 8013ed0:	6832      	ldr	r2, [r6, #0]
 8013ed2:	1a9b      	subs	r3, r3, r2
 8013ed4:	42ab      	cmp	r3, r5
 8013ed6:	dc26      	bgt.n	8013f26 <_printf_common+0x96>
 8013ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013edc:	1e13      	subs	r3, r2, #0
 8013ede:	6822      	ldr	r2, [r4, #0]
 8013ee0:	bf18      	it	ne
 8013ee2:	2301      	movne	r3, #1
 8013ee4:	0692      	lsls	r2, r2, #26
 8013ee6:	d42b      	bmi.n	8013f40 <_printf_common+0xb0>
 8013ee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013eec:	4649      	mov	r1, r9
 8013eee:	4638      	mov	r0, r7
 8013ef0:	47c0      	blx	r8
 8013ef2:	3001      	adds	r0, #1
 8013ef4:	d01e      	beq.n	8013f34 <_printf_common+0xa4>
 8013ef6:	6823      	ldr	r3, [r4, #0]
 8013ef8:	68e5      	ldr	r5, [r4, #12]
 8013efa:	6832      	ldr	r2, [r6, #0]
 8013efc:	f003 0306 	and.w	r3, r3, #6
 8013f00:	2b04      	cmp	r3, #4
 8013f02:	bf08      	it	eq
 8013f04:	1aad      	subeq	r5, r5, r2
 8013f06:	68a3      	ldr	r3, [r4, #8]
 8013f08:	6922      	ldr	r2, [r4, #16]
 8013f0a:	bf0c      	ite	eq
 8013f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f10:	2500      	movne	r5, #0
 8013f12:	4293      	cmp	r3, r2
 8013f14:	bfc4      	itt	gt
 8013f16:	1a9b      	subgt	r3, r3, r2
 8013f18:	18ed      	addgt	r5, r5, r3
 8013f1a:	2600      	movs	r6, #0
 8013f1c:	341a      	adds	r4, #26
 8013f1e:	42b5      	cmp	r5, r6
 8013f20:	d11a      	bne.n	8013f58 <_printf_common+0xc8>
 8013f22:	2000      	movs	r0, #0
 8013f24:	e008      	b.n	8013f38 <_printf_common+0xa8>
 8013f26:	2301      	movs	r3, #1
 8013f28:	4652      	mov	r2, sl
 8013f2a:	4649      	mov	r1, r9
 8013f2c:	4638      	mov	r0, r7
 8013f2e:	47c0      	blx	r8
 8013f30:	3001      	adds	r0, #1
 8013f32:	d103      	bne.n	8013f3c <_printf_common+0xac>
 8013f34:	f04f 30ff 	mov.w	r0, #4294967295
 8013f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f3c:	3501      	adds	r5, #1
 8013f3e:	e7c6      	b.n	8013ece <_printf_common+0x3e>
 8013f40:	18e1      	adds	r1, r4, r3
 8013f42:	1c5a      	adds	r2, r3, #1
 8013f44:	2030      	movs	r0, #48	; 0x30
 8013f46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013f4a:	4422      	add	r2, r4
 8013f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013f50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013f54:	3302      	adds	r3, #2
 8013f56:	e7c7      	b.n	8013ee8 <_printf_common+0x58>
 8013f58:	2301      	movs	r3, #1
 8013f5a:	4622      	mov	r2, r4
 8013f5c:	4649      	mov	r1, r9
 8013f5e:	4638      	mov	r0, r7
 8013f60:	47c0      	blx	r8
 8013f62:	3001      	adds	r0, #1
 8013f64:	d0e6      	beq.n	8013f34 <_printf_common+0xa4>
 8013f66:	3601      	adds	r6, #1
 8013f68:	e7d9      	b.n	8013f1e <_printf_common+0x8e>
	...

08013f6c <_printf_i>:
 8013f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f70:	7e0f      	ldrb	r7, [r1, #24]
 8013f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013f74:	2f78      	cmp	r7, #120	; 0x78
 8013f76:	4691      	mov	r9, r2
 8013f78:	4680      	mov	r8, r0
 8013f7a:	460c      	mov	r4, r1
 8013f7c:	469a      	mov	sl, r3
 8013f7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013f82:	d807      	bhi.n	8013f94 <_printf_i+0x28>
 8013f84:	2f62      	cmp	r7, #98	; 0x62
 8013f86:	d80a      	bhi.n	8013f9e <_printf_i+0x32>
 8013f88:	2f00      	cmp	r7, #0
 8013f8a:	f000 80d8 	beq.w	801413e <_printf_i+0x1d2>
 8013f8e:	2f58      	cmp	r7, #88	; 0x58
 8013f90:	f000 80a3 	beq.w	80140da <_printf_i+0x16e>
 8013f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013f9c:	e03a      	b.n	8014014 <_printf_i+0xa8>
 8013f9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013fa2:	2b15      	cmp	r3, #21
 8013fa4:	d8f6      	bhi.n	8013f94 <_printf_i+0x28>
 8013fa6:	a101      	add	r1, pc, #4	; (adr r1, 8013fac <_printf_i+0x40>)
 8013fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013fac:	08014005 	.word	0x08014005
 8013fb0:	08014019 	.word	0x08014019
 8013fb4:	08013f95 	.word	0x08013f95
 8013fb8:	08013f95 	.word	0x08013f95
 8013fbc:	08013f95 	.word	0x08013f95
 8013fc0:	08013f95 	.word	0x08013f95
 8013fc4:	08014019 	.word	0x08014019
 8013fc8:	08013f95 	.word	0x08013f95
 8013fcc:	08013f95 	.word	0x08013f95
 8013fd0:	08013f95 	.word	0x08013f95
 8013fd4:	08013f95 	.word	0x08013f95
 8013fd8:	08014125 	.word	0x08014125
 8013fdc:	08014049 	.word	0x08014049
 8013fe0:	08014107 	.word	0x08014107
 8013fe4:	08013f95 	.word	0x08013f95
 8013fe8:	08013f95 	.word	0x08013f95
 8013fec:	08014147 	.word	0x08014147
 8013ff0:	08013f95 	.word	0x08013f95
 8013ff4:	08014049 	.word	0x08014049
 8013ff8:	08013f95 	.word	0x08013f95
 8013ffc:	08013f95 	.word	0x08013f95
 8014000:	0801410f 	.word	0x0801410f
 8014004:	682b      	ldr	r3, [r5, #0]
 8014006:	1d1a      	adds	r2, r3, #4
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	602a      	str	r2, [r5, #0]
 801400c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014014:	2301      	movs	r3, #1
 8014016:	e0a3      	b.n	8014160 <_printf_i+0x1f4>
 8014018:	6820      	ldr	r0, [r4, #0]
 801401a:	6829      	ldr	r1, [r5, #0]
 801401c:	0606      	lsls	r6, r0, #24
 801401e:	f101 0304 	add.w	r3, r1, #4
 8014022:	d50a      	bpl.n	801403a <_printf_i+0xce>
 8014024:	680e      	ldr	r6, [r1, #0]
 8014026:	602b      	str	r3, [r5, #0]
 8014028:	2e00      	cmp	r6, #0
 801402a:	da03      	bge.n	8014034 <_printf_i+0xc8>
 801402c:	232d      	movs	r3, #45	; 0x2d
 801402e:	4276      	negs	r6, r6
 8014030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014034:	485e      	ldr	r0, [pc, #376]	; (80141b0 <_printf_i+0x244>)
 8014036:	230a      	movs	r3, #10
 8014038:	e019      	b.n	801406e <_printf_i+0x102>
 801403a:	680e      	ldr	r6, [r1, #0]
 801403c:	602b      	str	r3, [r5, #0]
 801403e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014042:	bf18      	it	ne
 8014044:	b236      	sxthne	r6, r6
 8014046:	e7ef      	b.n	8014028 <_printf_i+0xbc>
 8014048:	682b      	ldr	r3, [r5, #0]
 801404a:	6820      	ldr	r0, [r4, #0]
 801404c:	1d19      	adds	r1, r3, #4
 801404e:	6029      	str	r1, [r5, #0]
 8014050:	0601      	lsls	r1, r0, #24
 8014052:	d501      	bpl.n	8014058 <_printf_i+0xec>
 8014054:	681e      	ldr	r6, [r3, #0]
 8014056:	e002      	b.n	801405e <_printf_i+0xf2>
 8014058:	0646      	lsls	r6, r0, #25
 801405a:	d5fb      	bpl.n	8014054 <_printf_i+0xe8>
 801405c:	881e      	ldrh	r6, [r3, #0]
 801405e:	4854      	ldr	r0, [pc, #336]	; (80141b0 <_printf_i+0x244>)
 8014060:	2f6f      	cmp	r7, #111	; 0x6f
 8014062:	bf0c      	ite	eq
 8014064:	2308      	moveq	r3, #8
 8014066:	230a      	movne	r3, #10
 8014068:	2100      	movs	r1, #0
 801406a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801406e:	6865      	ldr	r5, [r4, #4]
 8014070:	60a5      	str	r5, [r4, #8]
 8014072:	2d00      	cmp	r5, #0
 8014074:	bfa2      	ittt	ge
 8014076:	6821      	ldrge	r1, [r4, #0]
 8014078:	f021 0104 	bicge.w	r1, r1, #4
 801407c:	6021      	strge	r1, [r4, #0]
 801407e:	b90e      	cbnz	r6, 8014084 <_printf_i+0x118>
 8014080:	2d00      	cmp	r5, #0
 8014082:	d04d      	beq.n	8014120 <_printf_i+0x1b4>
 8014084:	4615      	mov	r5, r2
 8014086:	fbb6 f1f3 	udiv	r1, r6, r3
 801408a:	fb03 6711 	mls	r7, r3, r1, r6
 801408e:	5dc7      	ldrb	r7, [r0, r7]
 8014090:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014094:	4637      	mov	r7, r6
 8014096:	42bb      	cmp	r3, r7
 8014098:	460e      	mov	r6, r1
 801409a:	d9f4      	bls.n	8014086 <_printf_i+0x11a>
 801409c:	2b08      	cmp	r3, #8
 801409e:	d10b      	bne.n	80140b8 <_printf_i+0x14c>
 80140a0:	6823      	ldr	r3, [r4, #0]
 80140a2:	07de      	lsls	r6, r3, #31
 80140a4:	d508      	bpl.n	80140b8 <_printf_i+0x14c>
 80140a6:	6923      	ldr	r3, [r4, #16]
 80140a8:	6861      	ldr	r1, [r4, #4]
 80140aa:	4299      	cmp	r1, r3
 80140ac:	bfde      	ittt	le
 80140ae:	2330      	movle	r3, #48	; 0x30
 80140b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80140b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80140b8:	1b52      	subs	r2, r2, r5
 80140ba:	6122      	str	r2, [r4, #16]
 80140bc:	f8cd a000 	str.w	sl, [sp]
 80140c0:	464b      	mov	r3, r9
 80140c2:	aa03      	add	r2, sp, #12
 80140c4:	4621      	mov	r1, r4
 80140c6:	4640      	mov	r0, r8
 80140c8:	f7ff fee2 	bl	8013e90 <_printf_common>
 80140cc:	3001      	adds	r0, #1
 80140ce:	d14c      	bne.n	801416a <_printf_i+0x1fe>
 80140d0:	f04f 30ff 	mov.w	r0, #4294967295
 80140d4:	b004      	add	sp, #16
 80140d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140da:	4835      	ldr	r0, [pc, #212]	; (80141b0 <_printf_i+0x244>)
 80140dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80140e0:	6829      	ldr	r1, [r5, #0]
 80140e2:	6823      	ldr	r3, [r4, #0]
 80140e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80140e8:	6029      	str	r1, [r5, #0]
 80140ea:	061d      	lsls	r5, r3, #24
 80140ec:	d514      	bpl.n	8014118 <_printf_i+0x1ac>
 80140ee:	07df      	lsls	r7, r3, #31
 80140f0:	bf44      	itt	mi
 80140f2:	f043 0320 	orrmi.w	r3, r3, #32
 80140f6:	6023      	strmi	r3, [r4, #0]
 80140f8:	b91e      	cbnz	r6, 8014102 <_printf_i+0x196>
 80140fa:	6823      	ldr	r3, [r4, #0]
 80140fc:	f023 0320 	bic.w	r3, r3, #32
 8014100:	6023      	str	r3, [r4, #0]
 8014102:	2310      	movs	r3, #16
 8014104:	e7b0      	b.n	8014068 <_printf_i+0xfc>
 8014106:	6823      	ldr	r3, [r4, #0]
 8014108:	f043 0320 	orr.w	r3, r3, #32
 801410c:	6023      	str	r3, [r4, #0]
 801410e:	2378      	movs	r3, #120	; 0x78
 8014110:	4828      	ldr	r0, [pc, #160]	; (80141b4 <_printf_i+0x248>)
 8014112:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014116:	e7e3      	b.n	80140e0 <_printf_i+0x174>
 8014118:	0659      	lsls	r1, r3, #25
 801411a:	bf48      	it	mi
 801411c:	b2b6      	uxthmi	r6, r6
 801411e:	e7e6      	b.n	80140ee <_printf_i+0x182>
 8014120:	4615      	mov	r5, r2
 8014122:	e7bb      	b.n	801409c <_printf_i+0x130>
 8014124:	682b      	ldr	r3, [r5, #0]
 8014126:	6826      	ldr	r6, [r4, #0]
 8014128:	6961      	ldr	r1, [r4, #20]
 801412a:	1d18      	adds	r0, r3, #4
 801412c:	6028      	str	r0, [r5, #0]
 801412e:	0635      	lsls	r5, r6, #24
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	d501      	bpl.n	8014138 <_printf_i+0x1cc>
 8014134:	6019      	str	r1, [r3, #0]
 8014136:	e002      	b.n	801413e <_printf_i+0x1d2>
 8014138:	0670      	lsls	r0, r6, #25
 801413a:	d5fb      	bpl.n	8014134 <_printf_i+0x1c8>
 801413c:	8019      	strh	r1, [r3, #0]
 801413e:	2300      	movs	r3, #0
 8014140:	6123      	str	r3, [r4, #16]
 8014142:	4615      	mov	r5, r2
 8014144:	e7ba      	b.n	80140bc <_printf_i+0x150>
 8014146:	682b      	ldr	r3, [r5, #0]
 8014148:	1d1a      	adds	r2, r3, #4
 801414a:	602a      	str	r2, [r5, #0]
 801414c:	681d      	ldr	r5, [r3, #0]
 801414e:	6862      	ldr	r2, [r4, #4]
 8014150:	2100      	movs	r1, #0
 8014152:	4628      	mov	r0, r5
 8014154:	f7ec f84c 	bl	80001f0 <memchr>
 8014158:	b108      	cbz	r0, 801415e <_printf_i+0x1f2>
 801415a:	1b40      	subs	r0, r0, r5
 801415c:	6060      	str	r0, [r4, #4]
 801415e:	6863      	ldr	r3, [r4, #4]
 8014160:	6123      	str	r3, [r4, #16]
 8014162:	2300      	movs	r3, #0
 8014164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014168:	e7a8      	b.n	80140bc <_printf_i+0x150>
 801416a:	6923      	ldr	r3, [r4, #16]
 801416c:	462a      	mov	r2, r5
 801416e:	4649      	mov	r1, r9
 8014170:	4640      	mov	r0, r8
 8014172:	47d0      	blx	sl
 8014174:	3001      	adds	r0, #1
 8014176:	d0ab      	beq.n	80140d0 <_printf_i+0x164>
 8014178:	6823      	ldr	r3, [r4, #0]
 801417a:	079b      	lsls	r3, r3, #30
 801417c:	d413      	bmi.n	80141a6 <_printf_i+0x23a>
 801417e:	68e0      	ldr	r0, [r4, #12]
 8014180:	9b03      	ldr	r3, [sp, #12]
 8014182:	4298      	cmp	r0, r3
 8014184:	bfb8      	it	lt
 8014186:	4618      	movlt	r0, r3
 8014188:	e7a4      	b.n	80140d4 <_printf_i+0x168>
 801418a:	2301      	movs	r3, #1
 801418c:	4632      	mov	r2, r6
 801418e:	4649      	mov	r1, r9
 8014190:	4640      	mov	r0, r8
 8014192:	47d0      	blx	sl
 8014194:	3001      	adds	r0, #1
 8014196:	d09b      	beq.n	80140d0 <_printf_i+0x164>
 8014198:	3501      	adds	r5, #1
 801419a:	68e3      	ldr	r3, [r4, #12]
 801419c:	9903      	ldr	r1, [sp, #12]
 801419e:	1a5b      	subs	r3, r3, r1
 80141a0:	42ab      	cmp	r3, r5
 80141a2:	dcf2      	bgt.n	801418a <_printf_i+0x21e>
 80141a4:	e7eb      	b.n	801417e <_printf_i+0x212>
 80141a6:	2500      	movs	r5, #0
 80141a8:	f104 0619 	add.w	r6, r4, #25
 80141ac:	e7f5      	b.n	801419a <_printf_i+0x22e>
 80141ae:	bf00      	nop
 80141b0:	08017491 	.word	0x08017491
 80141b4:	080174a2 	.word	0x080174a2

080141b8 <_sbrk_r>:
 80141b8:	b538      	push	{r3, r4, r5, lr}
 80141ba:	4d06      	ldr	r5, [pc, #24]	; (80141d4 <_sbrk_r+0x1c>)
 80141bc:	2300      	movs	r3, #0
 80141be:	4604      	mov	r4, r0
 80141c0:	4608      	mov	r0, r1
 80141c2:	602b      	str	r3, [r5, #0]
 80141c4:	f7ed fb72 	bl	80018ac <_sbrk>
 80141c8:	1c43      	adds	r3, r0, #1
 80141ca:	d102      	bne.n	80141d2 <_sbrk_r+0x1a>
 80141cc:	682b      	ldr	r3, [r5, #0]
 80141ce:	b103      	cbz	r3, 80141d2 <_sbrk_r+0x1a>
 80141d0:	6023      	str	r3, [r4, #0]
 80141d2:	bd38      	pop	{r3, r4, r5, pc}
 80141d4:	20008fac 	.word	0x20008fac

080141d8 <__sread>:
 80141d8:	b510      	push	{r4, lr}
 80141da:	460c      	mov	r4, r1
 80141dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141e0:	f000 fa9e 	bl	8014720 <_read_r>
 80141e4:	2800      	cmp	r0, #0
 80141e6:	bfab      	itete	ge
 80141e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80141ea:	89a3      	ldrhlt	r3, [r4, #12]
 80141ec:	181b      	addge	r3, r3, r0
 80141ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80141f2:	bfac      	ite	ge
 80141f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80141f6:	81a3      	strhlt	r3, [r4, #12]
 80141f8:	bd10      	pop	{r4, pc}

080141fa <__swrite>:
 80141fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141fe:	461f      	mov	r7, r3
 8014200:	898b      	ldrh	r3, [r1, #12]
 8014202:	05db      	lsls	r3, r3, #23
 8014204:	4605      	mov	r5, r0
 8014206:	460c      	mov	r4, r1
 8014208:	4616      	mov	r6, r2
 801420a:	d505      	bpl.n	8014218 <__swrite+0x1e>
 801420c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014210:	2302      	movs	r3, #2
 8014212:	2200      	movs	r2, #0
 8014214:	f000 f9d0 	bl	80145b8 <_lseek_r>
 8014218:	89a3      	ldrh	r3, [r4, #12]
 801421a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801421e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014222:	81a3      	strh	r3, [r4, #12]
 8014224:	4632      	mov	r2, r6
 8014226:	463b      	mov	r3, r7
 8014228:	4628      	mov	r0, r5
 801422a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801422e:	f000 b869 	b.w	8014304 <_write_r>

08014232 <__sseek>:
 8014232:	b510      	push	{r4, lr}
 8014234:	460c      	mov	r4, r1
 8014236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801423a:	f000 f9bd 	bl	80145b8 <_lseek_r>
 801423e:	1c43      	adds	r3, r0, #1
 8014240:	89a3      	ldrh	r3, [r4, #12]
 8014242:	bf15      	itete	ne
 8014244:	6560      	strne	r0, [r4, #84]	; 0x54
 8014246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801424a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801424e:	81a3      	strheq	r3, [r4, #12]
 8014250:	bf18      	it	ne
 8014252:	81a3      	strhne	r3, [r4, #12]
 8014254:	bd10      	pop	{r4, pc}

08014256 <__sclose>:
 8014256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801425a:	f000 b8db 	b.w	8014414 <_close_r>
	...

08014260 <__swbuf_r>:
 8014260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014262:	460e      	mov	r6, r1
 8014264:	4614      	mov	r4, r2
 8014266:	4605      	mov	r5, r0
 8014268:	b118      	cbz	r0, 8014272 <__swbuf_r+0x12>
 801426a:	6983      	ldr	r3, [r0, #24]
 801426c:	b90b      	cbnz	r3, 8014272 <__swbuf_r+0x12>
 801426e:	f7ff f9bf 	bl	80135f0 <__sinit>
 8014272:	4b21      	ldr	r3, [pc, #132]	; (80142f8 <__swbuf_r+0x98>)
 8014274:	429c      	cmp	r4, r3
 8014276:	d12b      	bne.n	80142d0 <__swbuf_r+0x70>
 8014278:	686c      	ldr	r4, [r5, #4]
 801427a:	69a3      	ldr	r3, [r4, #24]
 801427c:	60a3      	str	r3, [r4, #8]
 801427e:	89a3      	ldrh	r3, [r4, #12]
 8014280:	071a      	lsls	r2, r3, #28
 8014282:	d52f      	bpl.n	80142e4 <__swbuf_r+0x84>
 8014284:	6923      	ldr	r3, [r4, #16]
 8014286:	b36b      	cbz	r3, 80142e4 <__swbuf_r+0x84>
 8014288:	6923      	ldr	r3, [r4, #16]
 801428a:	6820      	ldr	r0, [r4, #0]
 801428c:	1ac0      	subs	r0, r0, r3
 801428e:	6963      	ldr	r3, [r4, #20]
 8014290:	b2f6      	uxtb	r6, r6
 8014292:	4283      	cmp	r3, r0
 8014294:	4637      	mov	r7, r6
 8014296:	dc04      	bgt.n	80142a2 <__swbuf_r+0x42>
 8014298:	4621      	mov	r1, r4
 801429a:	4628      	mov	r0, r5
 801429c:	f000 f950 	bl	8014540 <_fflush_r>
 80142a0:	bb30      	cbnz	r0, 80142f0 <__swbuf_r+0x90>
 80142a2:	68a3      	ldr	r3, [r4, #8]
 80142a4:	3b01      	subs	r3, #1
 80142a6:	60a3      	str	r3, [r4, #8]
 80142a8:	6823      	ldr	r3, [r4, #0]
 80142aa:	1c5a      	adds	r2, r3, #1
 80142ac:	6022      	str	r2, [r4, #0]
 80142ae:	701e      	strb	r6, [r3, #0]
 80142b0:	6963      	ldr	r3, [r4, #20]
 80142b2:	3001      	adds	r0, #1
 80142b4:	4283      	cmp	r3, r0
 80142b6:	d004      	beq.n	80142c2 <__swbuf_r+0x62>
 80142b8:	89a3      	ldrh	r3, [r4, #12]
 80142ba:	07db      	lsls	r3, r3, #31
 80142bc:	d506      	bpl.n	80142cc <__swbuf_r+0x6c>
 80142be:	2e0a      	cmp	r6, #10
 80142c0:	d104      	bne.n	80142cc <__swbuf_r+0x6c>
 80142c2:	4621      	mov	r1, r4
 80142c4:	4628      	mov	r0, r5
 80142c6:	f000 f93b 	bl	8014540 <_fflush_r>
 80142ca:	b988      	cbnz	r0, 80142f0 <__swbuf_r+0x90>
 80142cc:	4638      	mov	r0, r7
 80142ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142d0:	4b0a      	ldr	r3, [pc, #40]	; (80142fc <__swbuf_r+0x9c>)
 80142d2:	429c      	cmp	r4, r3
 80142d4:	d101      	bne.n	80142da <__swbuf_r+0x7a>
 80142d6:	68ac      	ldr	r4, [r5, #8]
 80142d8:	e7cf      	b.n	801427a <__swbuf_r+0x1a>
 80142da:	4b09      	ldr	r3, [pc, #36]	; (8014300 <__swbuf_r+0xa0>)
 80142dc:	429c      	cmp	r4, r3
 80142de:	bf08      	it	eq
 80142e0:	68ec      	ldreq	r4, [r5, #12]
 80142e2:	e7ca      	b.n	801427a <__swbuf_r+0x1a>
 80142e4:	4621      	mov	r1, r4
 80142e6:	4628      	mov	r0, r5
 80142e8:	f000 f81e 	bl	8014328 <__swsetup_r>
 80142ec:	2800      	cmp	r0, #0
 80142ee:	d0cb      	beq.n	8014288 <__swbuf_r+0x28>
 80142f0:	f04f 37ff 	mov.w	r7, #4294967295
 80142f4:	e7ea      	b.n	80142cc <__swbuf_r+0x6c>
 80142f6:	bf00      	nop
 80142f8:	08017440 	.word	0x08017440
 80142fc:	08017460 	.word	0x08017460
 8014300:	08017420 	.word	0x08017420

08014304 <_write_r>:
 8014304:	b538      	push	{r3, r4, r5, lr}
 8014306:	4d07      	ldr	r5, [pc, #28]	; (8014324 <_write_r+0x20>)
 8014308:	4604      	mov	r4, r0
 801430a:	4608      	mov	r0, r1
 801430c:	4611      	mov	r1, r2
 801430e:	2200      	movs	r2, #0
 8014310:	602a      	str	r2, [r5, #0]
 8014312:	461a      	mov	r2, r3
 8014314:	f7ed fa79 	bl	800180a <_write>
 8014318:	1c43      	adds	r3, r0, #1
 801431a:	d102      	bne.n	8014322 <_write_r+0x1e>
 801431c:	682b      	ldr	r3, [r5, #0]
 801431e:	b103      	cbz	r3, 8014322 <_write_r+0x1e>
 8014320:	6023      	str	r3, [r4, #0]
 8014322:	bd38      	pop	{r3, r4, r5, pc}
 8014324:	20008fac 	.word	0x20008fac

08014328 <__swsetup_r>:
 8014328:	4b32      	ldr	r3, [pc, #200]	; (80143f4 <__swsetup_r+0xcc>)
 801432a:	b570      	push	{r4, r5, r6, lr}
 801432c:	681d      	ldr	r5, [r3, #0]
 801432e:	4606      	mov	r6, r0
 8014330:	460c      	mov	r4, r1
 8014332:	b125      	cbz	r5, 801433e <__swsetup_r+0x16>
 8014334:	69ab      	ldr	r3, [r5, #24]
 8014336:	b913      	cbnz	r3, 801433e <__swsetup_r+0x16>
 8014338:	4628      	mov	r0, r5
 801433a:	f7ff f959 	bl	80135f0 <__sinit>
 801433e:	4b2e      	ldr	r3, [pc, #184]	; (80143f8 <__swsetup_r+0xd0>)
 8014340:	429c      	cmp	r4, r3
 8014342:	d10f      	bne.n	8014364 <__swsetup_r+0x3c>
 8014344:	686c      	ldr	r4, [r5, #4]
 8014346:	89a3      	ldrh	r3, [r4, #12]
 8014348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801434c:	0719      	lsls	r1, r3, #28
 801434e:	d42c      	bmi.n	80143aa <__swsetup_r+0x82>
 8014350:	06dd      	lsls	r5, r3, #27
 8014352:	d411      	bmi.n	8014378 <__swsetup_r+0x50>
 8014354:	2309      	movs	r3, #9
 8014356:	6033      	str	r3, [r6, #0]
 8014358:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801435c:	81a3      	strh	r3, [r4, #12]
 801435e:	f04f 30ff 	mov.w	r0, #4294967295
 8014362:	e03e      	b.n	80143e2 <__swsetup_r+0xba>
 8014364:	4b25      	ldr	r3, [pc, #148]	; (80143fc <__swsetup_r+0xd4>)
 8014366:	429c      	cmp	r4, r3
 8014368:	d101      	bne.n	801436e <__swsetup_r+0x46>
 801436a:	68ac      	ldr	r4, [r5, #8]
 801436c:	e7eb      	b.n	8014346 <__swsetup_r+0x1e>
 801436e:	4b24      	ldr	r3, [pc, #144]	; (8014400 <__swsetup_r+0xd8>)
 8014370:	429c      	cmp	r4, r3
 8014372:	bf08      	it	eq
 8014374:	68ec      	ldreq	r4, [r5, #12]
 8014376:	e7e6      	b.n	8014346 <__swsetup_r+0x1e>
 8014378:	0758      	lsls	r0, r3, #29
 801437a:	d512      	bpl.n	80143a2 <__swsetup_r+0x7a>
 801437c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801437e:	b141      	cbz	r1, 8014392 <__swsetup_r+0x6a>
 8014380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014384:	4299      	cmp	r1, r3
 8014386:	d002      	beq.n	801438e <__swsetup_r+0x66>
 8014388:	4630      	mov	r0, r6
 801438a:	f7ff f9eb 	bl	8013764 <_free_r>
 801438e:	2300      	movs	r3, #0
 8014390:	6363      	str	r3, [r4, #52]	; 0x34
 8014392:	89a3      	ldrh	r3, [r4, #12]
 8014394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014398:	81a3      	strh	r3, [r4, #12]
 801439a:	2300      	movs	r3, #0
 801439c:	6063      	str	r3, [r4, #4]
 801439e:	6923      	ldr	r3, [r4, #16]
 80143a0:	6023      	str	r3, [r4, #0]
 80143a2:	89a3      	ldrh	r3, [r4, #12]
 80143a4:	f043 0308 	orr.w	r3, r3, #8
 80143a8:	81a3      	strh	r3, [r4, #12]
 80143aa:	6923      	ldr	r3, [r4, #16]
 80143ac:	b94b      	cbnz	r3, 80143c2 <__swsetup_r+0x9a>
 80143ae:	89a3      	ldrh	r3, [r4, #12]
 80143b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80143b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80143b8:	d003      	beq.n	80143c2 <__swsetup_r+0x9a>
 80143ba:	4621      	mov	r1, r4
 80143bc:	4630      	mov	r0, r6
 80143be:	f000 f933 	bl	8014628 <__smakebuf_r>
 80143c2:	89a0      	ldrh	r0, [r4, #12]
 80143c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80143c8:	f010 0301 	ands.w	r3, r0, #1
 80143cc:	d00a      	beq.n	80143e4 <__swsetup_r+0xbc>
 80143ce:	2300      	movs	r3, #0
 80143d0:	60a3      	str	r3, [r4, #8]
 80143d2:	6963      	ldr	r3, [r4, #20]
 80143d4:	425b      	negs	r3, r3
 80143d6:	61a3      	str	r3, [r4, #24]
 80143d8:	6923      	ldr	r3, [r4, #16]
 80143da:	b943      	cbnz	r3, 80143ee <__swsetup_r+0xc6>
 80143dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80143e0:	d1ba      	bne.n	8014358 <__swsetup_r+0x30>
 80143e2:	bd70      	pop	{r4, r5, r6, pc}
 80143e4:	0781      	lsls	r1, r0, #30
 80143e6:	bf58      	it	pl
 80143e8:	6963      	ldrpl	r3, [r4, #20]
 80143ea:	60a3      	str	r3, [r4, #8]
 80143ec:	e7f4      	b.n	80143d8 <__swsetup_r+0xb0>
 80143ee:	2000      	movs	r0, #0
 80143f0:	e7f7      	b.n	80143e2 <__swsetup_r+0xba>
 80143f2:	bf00      	nop
 80143f4:	20000018 	.word	0x20000018
 80143f8:	08017440 	.word	0x08017440
 80143fc:	08017460 	.word	0x08017460
 8014400:	08017420 	.word	0x08017420

08014404 <abort>:
 8014404:	b508      	push	{r3, lr}
 8014406:	2006      	movs	r0, #6
 8014408:	f000 f9c4 	bl	8014794 <raise>
 801440c:	2001      	movs	r0, #1
 801440e:	f7ed f9d5 	bl	80017bc <_exit>
	...

08014414 <_close_r>:
 8014414:	b538      	push	{r3, r4, r5, lr}
 8014416:	4d06      	ldr	r5, [pc, #24]	; (8014430 <_close_r+0x1c>)
 8014418:	2300      	movs	r3, #0
 801441a:	4604      	mov	r4, r0
 801441c:	4608      	mov	r0, r1
 801441e:	602b      	str	r3, [r5, #0]
 8014420:	f7ed fa0f 	bl	8001842 <_close>
 8014424:	1c43      	adds	r3, r0, #1
 8014426:	d102      	bne.n	801442e <_close_r+0x1a>
 8014428:	682b      	ldr	r3, [r5, #0]
 801442a:	b103      	cbz	r3, 801442e <_close_r+0x1a>
 801442c:	6023      	str	r3, [r4, #0]
 801442e:	bd38      	pop	{r3, r4, r5, pc}
 8014430:	20008fac 	.word	0x20008fac

08014434 <__sflush_r>:
 8014434:	898a      	ldrh	r2, [r1, #12]
 8014436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801443a:	4605      	mov	r5, r0
 801443c:	0710      	lsls	r0, r2, #28
 801443e:	460c      	mov	r4, r1
 8014440:	d458      	bmi.n	80144f4 <__sflush_r+0xc0>
 8014442:	684b      	ldr	r3, [r1, #4]
 8014444:	2b00      	cmp	r3, #0
 8014446:	dc05      	bgt.n	8014454 <__sflush_r+0x20>
 8014448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801444a:	2b00      	cmp	r3, #0
 801444c:	dc02      	bgt.n	8014454 <__sflush_r+0x20>
 801444e:	2000      	movs	r0, #0
 8014450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014456:	2e00      	cmp	r6, #0
 8014458:	d0f9      	beq.n	801444e <__sflush_r+0x1a>
 801445a:	2300      	movs	r3, #0
 801445c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014460:	682f      	ldr	r7, [r5, #0]
 8014462:	602b      	str	r3, [r5, #0]
 8014464:	d032      	beq.n	80144cc <__sflush_r+0x98>
 8014466:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014468:	89a3      	ldrh	r3, [r4, #12]
 801446a:	075a      	lsls	r2, r3, #29
 801446c:	d505      	bpl.n	801447a <__sflush_r+0x46>
 801446e:	6863      	ldr	r3, [r4, #4]
 8014470:	1ac0      	subs	r0, r0, r3
 8014472:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014474:	b10b      	cbz	r3, 801447a <__sflush_r+0x46>
 8014476:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014478:	1ac0      	subs	r0, r0, r3
 801447a:	2300      	movs	r3, #0
 801447c:	4602      	mov	r2, r0
 801447e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014480:	6a21      	ldr	r1, [r4, #32]
 8014482:	4628      	mov	r0, r5
 8014484:	47b0      	blx	r6
 8014486:	1c43      	adds	r3, r0, #1
 8014488:	89a3      	ldrh	r3, [r4, #12]
 801448a:	d106      	bne.n	801449a <__sflush_r+0x66>
 801448c:	6829      	ldr	r1, [r5, #0]
 801448e:	291d      	cmp	r1, #29
 8014490:	d82c      	bhi.n	80144ec <__sflush_r+0xb8>
 8014492:	4a2a      	ldr	r2, [pc, #168]	; (801453c <__sflush_r+0x108>)
 8014494:	40ca      	lsrs	r2, r1
 8014496:	07d6      	lsls	r6, r2, #31
 8014498:	d528      	bpl.n	80144ec <__sflush_r+0xb8>
 801449a:	2200      	movs	r2, #0
 801449c:	6062      	str	r2, [r4, #4]
 801449e:	04d9      	lsls	r1, r3, #19
 80144a0:	6922      	ldr	r2, [r4, #16]
 80144a2:	6022      	str	r2, [r4, #0]
 80144a4:	d504      	bpl.n	80144b0 <__sflush_r+0x7c>
 80144a6:	1c42      	adds	r2, r0, #1
 80144a8:	d101      	bne.n	80144ae <__sflush_r+0x7a>
 80144aa:	682b      	ldr	r3, [r5, #0]
 80144ac:	b903      	cbnz	r3, 80144b0 <__sflush_r+0x7c>
 80144ae:	6560      	str	r0, [r4, #84]	; 0x54
 80144b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144b2:	602f      	str	r7, [r5, #0]
 80144b4:	2900      	cmp	r1, #0
 80144b6:	d0ca      	beq.n	801444e <__sflush_r+0x1a>
 80144b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144bc:	4299      	cmp	r1, r3
 80144be:	d002      	beq.n	80144c6 <__sflush_r+0x92>
 80144c0:	4628      	mov	r0, r5
 80144c2:	f7ff f94f 	bl	8013764 <_free_r>
 80144c6:	2000      	movs	r0, #0
 80144c8:	6360      	str	r0, [r4, #52]	; 0x34
 80144ca:	e7c1      	b.n	8014450 <__sflush_r+0x1c>
 80144cc:	6a21      	ldr	r1, [r4, #32]
 80144ce:	2301      	movs	r3, #1
 80144d0:	4628      	mov	r0, r5
 80144d2:	47b0      	blx	r6
 80144d4:	1c41      	adds	r1, r0, #1
 80144d6:	d1c7      	bne.n	8014468 <__sflush_r+0x34>
 80144d8:	682b      	ldr	r3, [r5, #0]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d0c4      	beq.n	8014468 <__sflush_r+0x34>
 80144de:	2b1d      	cmp	r3, #29
 80144e0:	d001      	beq.n	80144e6 <__sflush_r+0xb2>
 80144e2:	2b16      	cmp	r3, #22
 80144e4:	d101      	bne.n	80144ea <__sflush_r+0xb6>
 80144e6:	602f      	str	r7, [r5, #0]
 80144e8:	e7b1      	b.n	801444e <__sflush_r+0x1a>
 80144ea:	89a3      	ldrh	r3, [r4, #12]
 80144ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144f0:	81a3      	strh	r3, [r4, #12]
 80144f2:	e7ad      	b.n	8014450 <__sflush_r+0x1c>
 80144f4:	690f      	ldr	r7, [r1, #16]
 80144f6:	2f00      	cmp	r7, #0
 80144f8:	d0a9      	beq.n	801444e <__sflush_r+0x1a>
 80144fa:	0793      	lsls	r3, r2, #30
 80144fc:	680e      	ldr	r6, [r1, #0]
 80144fe:	bf08      	it	eq
 8014500:	694b      	ldreq	r3, [r1, #20]
 8014502:	600f      	str	r7, [r1, #0]
 8014504:	bf18      	it	ne
 8014506:	2300      	movne	r3, #0
 8014508:	eba6 0807 	sub.w	r8, r6, r7
 801450c:	608b      	str	r3, [r1, #8]
 801450e:	f1b8 0f00 	cmp.w	r8, #0
 8014512:	dd9c      	ble.n	801444e <__sflush_r+0x1a>
 8014514:	6a21      	ldr	r1, [r4, #32]
 8014516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014518:	4643      	mov	r3, r8
 801451a:	463a      	mov	r2, r7
 801451c:	4628      	mov	r0, r5
 801451e:	47b0      	blx	r6
 8014520:	2800      	cmp	r0, #0
 8014522:	dc06      	bgt.n	8014532 <__sflush_r+0xfe>
 8014524:	89a3      	ldrh	r3, [r4, #12]
 8014526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801452a:	81a3      	strh	r3, [r4, #12]
 801452c:	f04f 30ff 	mov.w	r0, #4294967295
 8014530:	e78e      	b.n	8014450 <__sflush_r+0x1c>
 8014532:	4407      	add	r7, r0
 8014534:	eba8 0800 	sub.w	r8, r8, r0
 8014538:	e7e9      	b.n	801450e <__sflush_r+0xda>
 801453a:	bf00      	nop
 801453c:	20400001 	.word	0x20400001

08014540 <_fflush_r>:
 8014540:	b538      	push	{r3, r4, r5, lr}
 8014542:	690b      	ldr	r3, [r1, #16]
 8014544:	4605      	mov	r5, r0
 8014546:	460c      	mov	r4, r1
 8014548:	b913      	cbnz	r3, 8014550 <_fflush_r+0x10>
 801454a:	2500      	movs	r5, #0
 801454c:	4628      	mov	r0, r5
 801454e:	bd38      	pop	{r3, r4, r5, pc}
 8014550:	b118      	cbz	r0, 801455a <_fflush_r+0x1a>
 8014552:	6983      	ldr	r3, [r0, #24]
 8014554:	b90b      	cbnz	r3, 801455a <_fflush_r+0x1a>
 8014556:	f7ff f84b 	bl	80135f0 <__sinit>
 801455a:	4b14      	ldr	r3, [pc, #80]	; (80145ac <_fflush_r+0x6c>)
 801455c:	429c      	cmp	r4, r3
 801455e:	d11b      	bne.n	8014598 <_fflush_r+0x58>
 8014560:	686c      	ldr	r4, [r5, #4]
 8014562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d0ef      	beq.n	801454a <_fflush_r+0xa>
 801456a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801456c:	07d0      	lsls	r0, r2, #31
 801456e:	d404      	bmi.n	801457a <_fflush_r+0x3a>
 8014570:	0599      	lsls	r1, r3, #22
 8014572:	d402      	bmi.n	801457a <_fflush_r+0x3a>
 8014574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014576:	f7ff f8eb 	bl	8013750 <__retarget_lock_acquire_recursive>
 801457a:	4628      	mov	r0, r5
 801457c:	4621      	mov	r1, r4
 801457e:	f7ff ff59 	bl	8014434 <__sflush_r>
 8014582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014584:	07da      	lsls	r2, r3, #31
 8014586:	4605      	mov	r5, r0
 8014588:	d4e0      	bmi.n	801454c <_fflush_r+0xc>
 801458a:	89a3      	ldrh	r3, [r4, #12]
 801458c:	059b      	lsls	r3, r3, #22
 801458e:	d4dd      	bmi.n	801454c <_fflush_r+0xc>
 8014590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014592:	f7ff f8de 	bl	8013752 <__retarget_lock_release_recursive>
 8014596:	e7d9      	b.n	801454c <_fflush_r+0xc>
 8014598:	4b05      	ldr	r3, [pc, #20]	; (80145b0 <_fflush_r+0x70>)
 801459a:	429c      	cmp	r4, r3
 801459c:	d101      	bne.n	80145a2 <_fflush_r+0x62>
 801459e:	68ac      	ldr	r4, [r5, #8]
 80145a0:	e7df      	b.n	8014562 <_fflush_r+0x22>
 80145a2:	4b04      	ldr	r3, [pc, #16]	; (80145b4 <_fflush_r+0x74>)
 80145a4:	429c      	cmp	r4, r3
 80145a6:	bf08      	it	eq
 80145a8:	68ec      	ldreq	r4, [r5, #12]
 80145aa:	e7da      	b.n	8014562 <_fflush_r+0x22>
 80145ac:	08017440 	.word	0x08017440
 80145b0:	08017460 	.word	0x08017460
 80145b4:	08017420 	.word	0x08017420

080145b8 <_lseek_r>:
 80145b8:	b538      	push	{r3, r4, r5, lr}
 80145ba:	4d07      	ldr	r5, [pc, #28]	; (80145d8 <_lseek_r+0x20>)
 80145bc:	4604      	mov	r4, r0
 80145be:	4608      	mov	r0, r1
 80145c0:	4611      	mov	r1, r2
 80145c2:	2200      	movs	r2, #0
 80145c4:	602a      	str	r2, [r5, #0]
 80145c6:	461a      	mov	r2, r3
 80145c8:	f7ed f962 	bl	8001890 <_lseek>
 80145cc:	1c43      	adds	r3, r0, #1
 80145ce:	d102      	bne.n	80145d6 <_lseek_r+0x1e>
 80145d0:	682b      	ldr	r3, [r5, #0]
 80145d2:	b103      	cbz	r3, 80145d6 <_lseek_r+0x1e>
 80145d4:	6023      	str	r3, [r4, #0]
 80145d6:	bd38      	pop	{r3, r4, r5, pc}
 80145d8:	20008fac 	.word	0x20008fac

080145dc <__swhatbuf_r>:
 80145dc:	b570      	push	{r4, r5, r6, lr}
 80145de:	460e      	mov	r6, r1
 80145e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145e4:	2900      	cmp	r1, #0
 80145e6:	b096      	sub	sp, #88	; 0x58
 80145e8:	4614      	mov	r4, r2
 80145ea:	461d      	mov	r5, r3
 80145ec:	da08      	bge.n	8014600 <__swhatbuf_r+0x24>
 80145ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80145f2:	2200      	movs	r2, #0
 80145f4:	602a      	str	r2, [r5, #0]
 80145f6:	061a      	lsls	r2, r3, #24
 80145f8:	d410      	bmi.n	801461c <__swhatbuf_r+0x40>
 80145fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80145fe:	e00e      	b.n	801461e <__swhatbuf_r+0x42>
 8014600:	466a      	mov	r2, sp
 8014602:	f000 f8e3 	bl	80147cc <_fstat_r>
 8014606:	2800      	cmp	r0, #0
 8014608:	dbf1      	blt.n	80145ee <__swhatbuf_r+0x12>
 801460a:	9a01      	ldr	r2, [sp, #4]
 801460c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014610:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014614:	425a      	negs	r2, r3
 8014616:	415a      	adcs	r2, r3
 8014618:	602a      	str	r2, [r5, #0]
 801461a:	e7ee      	b.n	80145fa <__swhatbuf_r+0x1e>
 801461c:	2340      	movs	r3, #64	; 0x40
 801461e:	2000      	movs	r0, #0
 8014620:	6023      	str	r3, [r4, #0]
 8014622:	b016      	add	sp, #88	; 0x58
 8014624:	bd70      	pop	{r4, r5, r6, pc}
	...

08014628 <__smakebuf_r>:
 8014628:	898b      	ldrh	r3, [r1, #12]
 801462a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801462c:	079d      	lsls	r5, r3, #30
 801462e:	4606      	mov	r6, r0
 8014630:	460c      	mov	r4, r1
 8014632:	d507      	bpl.n	8014644 <__smakebuf_r+0x1c>
 8014634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014638:	6023      	str	r3, [r4, #0]
 801463a:	6123      	str	r3, [r4, #16]
 801463c:	2301      	movs	r3, #1
 801463e:	6163      	str	r3, [r4, #20]
 8014640:	b002      	add	sp, #8
 8014642:	bd70      	pop	{r4, r5, r6, pc}
 8014644:	ab01      	add	r3, sp, #4
 8014646:	466a      	mov	r2, sp
 8014648:	f7ff ffc8 	bl	80145dc <__swhatbuf_r>
 801464c:	9900      	ldr	r1, [sp, #0]
 801464e:	4605      	mov	r5, r0
 8014650:	4630      	mov	r0, r6
 8014652:	f7ff f8f3 	bl	801383c <_malloc_r>
 8014656:	b948      	cbnz	r0, 801466c <__smakebuf_r+0x44>
 8014658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801465c:	059a      	lsls	r2, r3, #22
 801465e:	d4ef      	bmi.n	8014640 <__smakebuf_r+0x18>
 8014660:	f023 0303 	bic.w	r3, r3, #3
 8014664:	f043 0302 	orr.w	r3, r3, #2
 8014668:	81a3      	strh	r3, [r4, #12]
 801466a:	e7e3      	b.n	8014634 <__smakebuf_r+0xc>
 801466c:	4b0d      	ldr	r3, [pc, #52]	; (80146a4 <__smakebuf_r+0x7c>)
 801466e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014670:	89a3      	ldrh	r3, [r4, #12]
 8014672:	6020      	str	r0, [r4, #0]
 8014674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014678:	81a3      	strh	r3, [r4, #12]
 801467a:	9b00      	ldr	r3, [sp, #0]
 801467c:	6163      	str	r3, [r4, #20]
 801467e:	9b01      	ldr	r3, [sp, #4]
 8014680:	6120      	str	r0, [r4, #16]
 8014682:	b15b      	cbz	r3, 801469c <__smakebuf_r+0x74>
 8014684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014688:	4630      	mov	r0, r6
 801468a:	f000 f8b1 	bl	80147f0 <_isatty_r>
 801468e:	b128      	cbz	r0, 801469c <__smakebuf_r+0x74>
 8014690:	89a3      	ldrh	r3, [r4, #12]
 8014692:	f023 0303 	bic.w	r3, r3, #3
 8014696:	f043 0301 	orr.w	r3, r3, #1
 801469a:	81a3      	strh	r3, [r4, #12]
 801469c:	89a0      	ldrh	r0, [r4, #12]
 801469e:	4305      	orrs	r5, r0
 80146a0:	81a5      	strh	r5, [r4, #12]
 80146a2:	e7cd      	b.n	8014640 <__smakebuf_r+0x18>
 80146a4:	08013589 	.word	0x08013589

080146a8 <__malloc_lock>:
 80146a8:	4801      	ldr	r0, [pc, #4]	; (80146b0 <__malloc_lock+0x8>)
 80146aa:	f7ff b851 	b.w	8013750 <__retarget_lock_acquire_recursive>
 80146ae:	bf00      	nop
 80146b0:	20008fb0 	.word	0x20008fb0

080146b4 <__malloc_unlock>:
 80146b4:	4801      	ldr	r0, [pc, #4]	; (80146bc <__malloc_unlock+0x8>)
 80146b6:	f7ff b84c 	b.w	8013752 <__retarget_lock_release_recursive>
 80146ba:	bf00      	nop
 80146bc:	20008fb0 	.word	0x20008fb0

080146c0 <_realloc_r>:
 80146c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146c4:	4680      	mov	r8, r0
 80146c6:	4614      	mov	r4, r2
 80146c8:	460e      	mov	r6, r1
 80146ca:	b921      	cbnz	r1, 80146d6 <_realloc_r+0x16>
 80146cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146d0:	4611      	mov	r1, r2
 80146d2:	f7ff b8b3 	b.w	801383c <_malloc_r>
 80146d6:	b92a      	cbnz	r2, 80146e4 <_realloc_r+0x24>
 80146d8:	f7ff f844 	bl	8013764 <_free_r>
 80146dc:	4625      	mov	r5, r4
 80146de:	4628      	mov	r0, r5
 80146e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146e4:	f000 f894 	bl	8014810 <_malloc_usable_size_r>
 80146e8:	4284      	cmp	r4, r0
 80146ea:	4607      	mov	r7, r0
 80146ec:	d802      	bhi.n	80146f4 <_realloc_r+0x34>
 80146ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80146f2:	d812      	bhi.n	801471a <_realloc_r+0x5a>
 80146f4:	4621      	mov	r1, r4
 80146f6:	4640      	mov	r0, r8
 80146f8:	f7ff f8a0 	bl	801383c <_malloc_r>
 80146fc:	4605      	mov	r5, r0
 80146fe:	2800      	cmp	r0, #0
 8014700:	d0ed      	beq.n	80146de <_realloc_r+0x1e>
 8014702:	42bc      	cmp	r4, r7
 8014704:	4622      	mov	r2, r4
 8014706:	4631      	mov	r1, r6
 8014708:	bf28      	it	cs
 801470a:	463a      	movcs	r2, r7
 801470c:	f7fe fe54 	bl	80133b8 <memcpy>
 8014710:	4631      	mov	r1, r6
 8014712:	4640      	mov	r0, r8
 8014714:	f7ff f826 	bl	8013764 <_free_r>
 8014718:	e7e1      	b.n	80146de <_realloc_r+0x1e>
 801471a:	4635      	mov	r5, r6
 801471c:	e7df      	b.n	80146de <_realloc_r+0x1e>
	...

08014720 <_read_r>:
 8014720:	b538      	push	{r3, r4, r5, lr}
 8014722:	4d07      	ldr	r5, [pc, #28]	; (8014740 <_read_r+0x20>)
 8014724:	4604      	mov	r4, r0
 8014726:	4608      	mov	r0, r1
 8014728:	4611      	mov	r1, r2
 801472a:	2200      	movs	r2, #0
 801472c:	602a      	str	r2, [r5, #0]
 801472e:	461a      	mov	r2, r3
 8014730:	f7ed f84e 	bl	80017d0 <_read>
 8014734:	1c43      	adds	r3, r0, #1
 8014736:	d102      	bne.n	801473e <_read_r+0x1e>
 8014738:	682b      	ldr	r3, [r5, #0]
 801473a:	b103      	cbz	r3, 801473e <_read_r+0x1e>
 801473c:	6023      	str	r3, [r4, #0]
 801473e:	bd38      	pop	{r3, r4, r5, pc}
 8014740:	20008fac 	.word	0x20008fac

08014744 <_raise_r>:
 8014744:	291f      	cmp	r1, #31
 8014746:	b538      	push	{r3, r4, r5, lr}
 8014748:	4604      	mov	r4, r0
 801474a:	460d      	mov	r5, r1
 801474c:	d904      	bls.n	8014758 <_raise_r+0x14>
 801474e:	2316      	movs	r3, #22
 8014750:	6003      	str	r3, [r0, #0]
 8014752:	f04f 30ff 	mov.w	r0, #4294967295
 8014756:	bd38      	pop	{r3, r4, r5, pc}
 8014758:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801475a:	b112      	cbz	r2, 8014762 <_raise_r+0x1e>
 801475c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014760:	b94b      	cbnz	r3, 8014776 <_raise_r+0x32>
 8014762:	4620      	mov	r0, r4
 8014764:	f000 f830 	bl	80147c8 <_getpid_r>
 8014768:	462a      	mov	r2, r5
 801476a:	4601      	mov	r1, r0
 801476c:	4620      	mov	r0, r4
 801476e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014772:	f000 b817 	b.w	80147a4 <_kill_r>
 8014776:	2b01      	cmp	r3, #1
 8014778:	d00a      	beq.n	8014790 <_raise_r+0x4c>
 801477a:	1c59      	adds	r1, r3, #1
 801477c:	d103      	bne.n	8014786 <_raise_r+0x42>
 801477e:	2316      	movs	r3, #22
 8014780:	6003      	str	r3, [r0, #0]
 8014782:	2001      	movs	r0, #1
 8014784:	e7e7      	b.n	8014756 <_raise_r+0x12>
 8014786:	2400      	movs	r4, #0
 8014788:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801478c:	4628      	mov	r0, r5
 801478e:	4798      	blx	r3
 8014790:	2000      	movs	r0, #0
 8014792:	e7e0      	b.n	8014756 <_raise_r+0x12>

08014794 <raise>:
 8014794:	4b02      	ldr	r3, [pc, #8]	; (80147a0 <raise+0xc>)
 8014796:	4601      	mov	r1, r0
 8014798:	6818      	ldr	r0, [r3, #0]
 801479a:	f7ff bfd3 	b.w	8014744 <_raise_r>
 801479e:	bf00      	nop
 80147a0:	20000018 	.word	0x20000018

080147a4 <_kill_r>:
 80147a4:	b538      	push	{r3, r4, r5, lr}
 80147a6:	4d07      	ldr	r5, [pc, #28]	; (80147c4 <_kill_r+0x20>)
 80147a8:	2300      	movs	r3, #0
 80147aa:	4604      	mov	r4, r0
 80147ac:	4608      	mov	r0, r1
 80147ae:	4611      	mov	r1, r2
 80147b0:	602b      	str	r3, [r5, #0]
 80147b2:	f7ec fff1 	bl	8001798 <_kill>
 80147b6:	1c43      	adds	r3, r0, #1
 80147b8:	d102      	bne.n	80147c0 <_kill_r+0x1c>
 80147ba:	682b      	ldr	r3, [r5, #0]
 80147bc:	b103      	cbz	r3, 80147c0 <_kill_r+0x1c>
 80147be:	6023      	str	r3, [r4, #0]
 80147c0:	bd38      	pop	{r3, r4, r5, pc}
 80147c2:	bf00      	nop
 80147c4:	20008fac 	.word	0x20008fac

080147c8 <_getpid_r>:
 80147c8:	f7ec bfde 	b.w	8001788 <_getpid>

080147cc <_fstat_r>:
 80147cc:	b538      	push	{r3, r4, r5, lr}
 80147ce:	4d07      	ldr	r5, [pc, #28]	; (80147ec <_fstat_r+0x20>)
 80147d0:	2300      	movs	r3, #0
 80147d2:	4604      	mov	r4, r0
 80147d4:	4608      	mov	r0, r1
 80147d6:	4611      	mov	r1, r2
 80147d8:	602b      	str	r3, [r5, #0]
 80147da:	f7ed f83e 	bl	800185a <_fstat>
 80147de:	1c43      	adds	r3, r0, #1
 80147e0:	d102      	bne.n	80147e8 <_fstat_r+0x1c>
 80147e2:	682b      	ldr	r3, [r5, #0]
 80147e4:	b103      	cbz	r3, 80147e8 <_fstat_r+0x1c>
 80147e6:	6023      	str	r3, [r4, #0]
 80147e8:	bd38      	pop	{r3, r4, r5, pc}
 80147ea:	bf00      	nop
 80147ec:	20008fac 	.word	0x20008fac

080147f0 <_isatty_r>:
 80147f0:	b538      	push	{r3, r4, r5, lr}
 80147f2:	4d06      	ldr	r5, [pc, #24]	; (801480c <_isatty_r+0x1c>)
 80147f4:	2300      	movs	r3, #0
 80147f6:	4604      	mov	r4, r0
 80147f8:	4608      	mov	r0, r1
 80147fa:	602b      	str	r3, [r5, #0]
 80147fc:	f7ed f83d 	bl	800187a <_isatty>
 8014800:	1c43      	adds	r3, r0, #1
 8014802:	d102      	bne.n	801480a <_isatty_r+0x1a>
 8014804:	682b      	ldr	r3, [r5, #0]
 8014806:	b103      	cbz	r3, 801480a <_isatty_r+0x1a>
 8014808:	6023      	str	r3, [r4, #0]
 801480a:	bd38      	pop	{r3, r4, r5, pc}
 801480c:	20008fac 	.word	0x20008fac

08014810 <_malloc_usable_size_r>:
 8014810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014814:	1f18      	subs	r0, r3, #4
 8014816:	2b00      	cmp	r3, #0
 8014818:	bfbc      	itt	lt
 801481a:	580b      	ldrlt	r3, [r1, r0]
 801481c:	18c0      	addlt	r0, r0, r3
 801481e:	4770      	bx	lr

08014820 <_init>:
 8014820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014822:	bf00      	nop
 8014824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014826:	bc08      	pop	{r3}
 8014828:	469e      	mov	lr, r3
 801482a:	4770      	bx	lr

0801482c <_fini>:
 801482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801482e:	bf00      	nop
 8014830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014832:	bc08      	pop	{r3}
 8014834:	469e      	mov	lr, r3
 8014836:	4770      	bx	lr
