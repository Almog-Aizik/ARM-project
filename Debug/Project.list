
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014540  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c50  080146f0  080146f0  000246f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017340  08017340  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08017340  08017340  00027340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017348  08017348  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017348  08017348  00027348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801734c  0801734c  0002734c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08017350  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
 10 .bss          00008fa4  2000007c  2000007c  0003007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009020  20009020  0003007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021c83  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000564b  00000000  00000000  00051d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  00057380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001780  00000000  00000000  00058b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fdb9  00000000  00000000  0005a308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000295f3  00000000  00000000  0008a0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef075  00000000  00000000  000b36b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a2729  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006cac  00000000  00000000  001a277c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080146d8 	.word	0x080146d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	080146d8 	.word	0x080146d8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_SPI_RxCpltCallback>:
static void MX_SPI4_Init(void);
static void MX_UART4_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	flag = 1;
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_SPI_RxCpltCallback+0x1c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000501 	.word	0x20000501

080005b4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	flag = 1;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000501 	.word	0x20000501

080005d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	flag = 1;
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <HAL_UART_RxCpltCallback+0x1c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000501 	.word	0x20000501

080005f4 <udp_transmit>:
void udp_transmit(struct udp_pcb *upcb, int len, char mem[100])
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
//  prepare variables
	ip_addr_t addr = upcb->remote_ip;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	617b      	str	r3, [r7, #20]
	u16_t port = upcb->remote_port;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	8a9b      	ldrh	r3, [r3, #20]
 800060a:	83fb      	strh	r3, [r7, #30]
//	prepare buffer
	struct pbuf *txBuf;
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	b29b      	uxth	r3, r3
 8000610:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000614:	4619      	mov	r1, r3
 8000616:	2036      	movs	r0, #54	; 0x36
 8000618:	f009 fd02 	bl	800a020 <pbuf_alloc>
 800061c:	61b8      	str	r0, [r7, #24]
	pbuf_take(txBuf, mem, len);
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	b29b      	uxth	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	69b8      	ldr	r0, [r7, #24]
 8000628:	f00a fa4a 	bl	800aac0 <pbuf_take>
//	send data
	udp_connect(upcb, &addr, port);
 800062c:	8bfa      	ldrh	r2, [r7, #30]
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	f010 f9e1 	bl	80109fc <udp_connect>
	udp_send(upcb, txBuf);
 800063a:	69b9      	ldr	r1, [r7, #24]
 800063c:	68f8      	ldr	r0, [r7, #12]
 800063e:	f00f ff6b 	bl	8010518 <udp_send>
	udp_disconnect(upcb);
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f010 fa48 	bl	8010ad8 <udp_disconnect>
//	release buffer
	pbuf_free(txBuf);
 8000648:	69b8      	ldr	r0, [r7, #24]
 800064a:	f009 ffcd 	bl	800a5e8 <pbuf_free>
}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 f956 	bl	800190c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f8ce 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 faf2 	bl	8000c4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000668:	f000 fa9a 	bl	8000ba0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800066c:	f000 fa44 	bl	8000af8 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000670:	f008 f82c 	bl	80086cc <MX_LWIP_Init>
  MX_I2C1_Init();
 8000674:	f000 f92e 	bl	80008d4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000678:	f000 f96c 	bl	8000954 <MX_I2C2_Init>
  MX_SPI2_Init();
 800067c:	f000 f9aa 	bl	80009d4 <MX_SPI2_Init>
  MX_SPI4_Init();
 8000680:	f000 f9da 	bl	8000a38 <MX_SPI4_Init>
  MX_UART4_Init();
 8000684:	f000 fa0e 	bl	8000aa4 <MX_UART4_Init>
  MX_USART6_UART_Init();
 8000688:	f000 fa60 	bl	8000b4c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  udpServer_init();
 800068c:	f001 f8bc 	bl	8001808 <udpServer_init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 8000690:	4847      	ldr	r0, [pc, #284]	; (80007b0 <main+0x158>)
 8000692:	f008 fc19 	bl	8008ec8 <ethernetif_input>
	  sys_check_timeouts();
 8000696:	f00f fd3b 	bl	8010110 <sys_check_timeouts>
	  if(received)
 800069a:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <main+0x15c>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d06b      	beq.n	800077a <main+0x122>
	  {
		  protocol = mem[0];
 80006a2:	4b45      	ldr	r3, [pc, #276]	; (80007b8 <main+0x160>)
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	4b45      	ldr	r3, [pc, #276]	; (80007bc <main+0x164>)
 80006a8:	701a      	strb	r2, [r3, #0]
//		  SPI send and receive
		  if(protocol == '1')
 80006aa:	4b44      	ldr	r3, [pc, #272]	; (80007bc <main+0x164>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b31      	cmp	r3, #49	; 0x31
 80006b0:	d11d      	bne.n	80006ee <main+0x96>
		  {
			  HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)send, len);
 80006b2:	4b43      	ldr	r3, [pc, #268]	; (80007c0 <main+0x168>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	4942      	ldr	r1, [pc, #264]	; (80007c4 <main+0x16c>)
 80006bc:	4842      	ldr	r0, [pc, #264]	; (80007c8 <main+0x170>)
 80006be:	f006 f89f 	bl	8006800 <HAL_SPI_Receive_DMA>
			  HAL_SPI_Transmit_DMA(&hspi4, (uint8_t *)&mem[1], len);
 80006c2:	4b3f      	ldr	r3, [pc, #252]	; (80007c0 <main+0x168>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	4940      	ldr	r1, [pc, #256]	; (80007cc <main+0x174>)
 80006cc:	4840      	ldr	r0, [pc, #256]	; (80007d0 <main+0x178>)
 80006ce:	f005 ffe1 	bl	8006694 <HAL_SPI_Transmit_DMA>
			  while(flag == 0);
 80006d2:	bf00      	nop
 80006d4:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <main+0x17c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0fb      	beq.n	80006d4 <main+0x7c>
			  UDPlen = sprintf(header, "SPI- %s\n\r", send);
 80006dc:	4a39      	ldr	r2, [pc, #228]	; (80007c4 <main+0x16c>)
 80006de:	493e      	ldr	r1, [pc, #248]	; (80007d8 <main+0x180>)
 80006e0:	483e      	ldr	r0, [pc, #248]	; (80007dc <main+0x184>)
 80006e2:	f012 fe4b 	bl	801337c <siprintf>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a3d      	ldr	r2, [pc, #244]	; (80007e0 <main+0x188>)
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	e042      	b.n	8000774 <main+0x11c>
		  }
//		  I2C send and receive
		  else if(protocol == '2')
 80006ee:	4b33      	ldr	r3, [pc, #204]	; (80007bc <main+0x164>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b32      	cmp	r3, #50	; 0x32
 80006f4:	d11d      	bne.n	8000732 <main+0xda>
		  {
			  HAL_I2C_Master_Transmit_DMA(&hi2c1, 20, (uint8_t *)&mem[1], len);
 80006f6:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <main+0x168>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4a33      	ldr	r2, [pc, #204]	; (80007cc <main+0x174>)
 80006fe:	2114      	movs	r1, #20
 8000700:	4838      	ldr	r0, [pc, #224]	; (80007e4 <main+0x18c>)
 8000702:	f003 fb65 	bl	8003dd0 <HAL_I2C_Master_Transmit_DMA>
			  HAL_I2C_Slave_Receive_DMA(&hi2c2, (uint8_t *)send, len);
 8000706:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <main+0x168>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	b29b      	uxth	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	492d      	ldr	r1, [pc, #180]	; (80007c4 <main+0x16c>)
 8000710:	4835      	ldr	r0, [pc, #212]	; (80007e8 <main+0x190>)
 8000712:	f003 fc8d 	bl	8004030 <HAL_I2C_Slave_Receive_DMA>
			  while(flag == 0);
 8000716:	bf00      	nop
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <main+0x17c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0fb      	beq.n	8000718 <main+0xc0>
			  UDPlen = sprintf(header, "I2C- %s\n\r", send);
 8000720:	4a28      	ldr	r2, [pc, #160]	; (80007c4 <main+0x16c>)
 8000722:	4932      	ldr	r1, [pc, #200]	; (80007ec <main+0x194>)
 8000724:	482d      	ldr	r0, [pc, #180]	; (80007dc <main+0x184>)
 8000726:	f012 fe29 	bl	801337c <siprintf>
 800072a:	4603      	mov	r3, r0
 800072c:	4a2c      	ldr	r2, [pc, #176]	; (80007e0 <main+0x188>)
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	e020      	b.n	8000774 <main+0x11c>
		  }
//		  UART send and receive
		  else if(protocol == '3')
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <main+0x164>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b33      	cmp	r3, #51	; 0x33
 8000738:	d11c      	bne.n	8000774 <main+0x11c>
		  {
			  HAL_UART_Receive_DMA(&huart6, (uint8_t *)send, len);
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <main+0x168>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	b29b      	uxth	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	4920      	ldr	r1, [pc, #128]	; (80007c4 <main+0x16c>)
 8000744:	482a      	ldr	r0, [pc, #168]	; (80007f0 <main+0x198>)
 8000746:	f006 feab 	bl	80074a0 <HAL_UART_Receive_DMA>
			  HAL_UART_Transmit_DMA(&huart4, (uint8_t *)&mem[1], len);
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <main+0x168>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	b29b      	uxth	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	491e      	ldr	r1, [pc, #120]	; (80007cc <main+0x174>)
 8000754:	4827      	ldr	r0, [pc, #156]	; (80007f4 <main+0x19c>)
 8000756:	f006 fe25 	bl	80073a4 <HAL_UART_Transmit_DMA>
			  while(flag == 0);
 800075a:	bf00      	nop
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <main+0x17c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d0fb      	beq.n	800075c <main+0x104>
			  UDPlen = sprintf(header, "UART - %s\n\r", send);
 8000764:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <main+0x16c>)
 8000766:	4924      	ldr	r1, [pc, #144]	; (80007f8 <main+0x1a0>)
 8000768:	481c      	ldr	r0, [pc, #112]	; (80007dc <main+0x184>)
 800076a:	f012 fe07 	bl	801337c <siprintf>
 800076e:	4603      	mov	r3, r0
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <main+0x188>)
 8000772:	6013      	str	r3, [r2, #0]
		  }
		  received = 0;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <main+0x15c>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
	  }
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  if(flag)
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <main+0x17c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d086      	beq.n	8000690 <main+0x38>
	  {
//		  HAL_UART_Transmit(&huart3, send, 15, 20);
		  header[UDPlen + 1] = 3;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <main+0x188>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <main+0x184>)
 800078a:	2103      	movs	r1, #3
 800078c:	54d1      	strb	r1, [r2, r3]
		  udp_transmit(udp_info, UDPlen, header);
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <main+0x1a4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <main+0x188>)
 8000794:	6811      	ldr	r1, [r2, #0]
 8000796:	4a11      	ldr	r2, [pc, #68]	; (80007dc <main+0x184>)
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff2b 	bl	80005f4 <udp_transmit>
		  flag = 0;
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <main+0x17c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
//		  reset memory back to 0
		  memset(send, 0, 100);
 80007a4:	2264      	movs	r2, #100	; 0x64
 80007a6:	2100      	movs	r1, #0
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <main+0x16c>)
 80007aa:	f012 fd89 	bl	80132c0 <memset>
	  ethernetif_input(&gnetif);
 80007ae:	e76f      	b.n	8000690 <main+0x38>
 80007b0:	20000650 	.word	0x20000650
 80007b4:	20000500 	.word	0x20000500
 80007b8:	20000568 	.word	0x20000568
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000640 	.word	0x20000640
 80007c4:	20000504 	.word	0x20000504
 80007c8:	20000200 	.word	0x20000200
 80007cc:	20000569 	.word	0x20000569
 80007d0:	20000258 	.word	0x20000258
 80007d4:	20000501 	.word	0x20000501
 80007d8:	080146f0 	.word	0x080146f0
 80007dc:	200005d0 	.word	0x200005d0
 80007e0:	20000644 	.word	0x20000644
 80007e4:	20000098 	.word	0x20000098
 80007e8:	200000ec 	.word	0x200000ec
 80007ec:	080146fc 	.word	0x080146fc
 80007f0:	200003f8 	.word	0x200003f8
 80007f4:	20000370 	.word	0x20000370
 80007f8:	08014708 	.word	0x08014708
 80007fc:	200004fc 	.word	0x200004fc

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f012 fd56 	bl	80132c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <SystemClock_Config+0xcc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a27      	ldr	r2, [pc, #156]	; (80008cc <SystemClock_Config+0xcc>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <SystemClock_Config+0xd0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <SystemClock_Config+0xd0>)
 800084a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000860:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000874:	23a8      	movs	r3, #168	; 0xa8
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800087c:	2307      	movs	r3, #7
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f005 f9e3 	bl	8005c50 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000890:	f000 fab8 	bl	8000e04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2105      	movs	r1, #5
 80008b2:	4618      	mov	r0, r3
 80008b4:	f005 fc44 	bl	8006140 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008be:	f000 faa1 	bl	8000e04 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	; 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_I2C1_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <MX_I2C1_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_I2C1_Init+0x74>)
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <MX_I2C1_Init+0x7c>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_I2C1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_I2C1_Init+0x74>)
 80008f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_I2C1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_I2C1_Init+0x74>)
 8000912:	f003 f919 	bl	8003b48 <HAL_I2C_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800091c:	f000 fa72 	bl	8000e04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	4809      	ldr	r0, [pc, #36]	; (8000948 <MX_I2C1_Init+0x74>)
 8000924:	f005 f919 	bl	8005b5a <HAL_I2CEx_ConfigAnalogFilter>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800092e:	f000 fa69 	bl	8000e04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_I2C1_Init+0x74>)
 8000936:	f005 f94c 	bl	8005bd2 <HAL_I2CEx_ConfigDigitalFilter>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000940:	f000 fa60 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000098 	.word	0x20000098
 800094c:	40005400 	.word	0x40005400
 8000950:	000186a0 	.word	0x000186a0

08000954 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_I2C2_Init+0x74>)
 800095a:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <MX_I2C2_Init+0x78>)
 800095c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_I2C2_Init+0x74>)
 8000960:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <MX_I2C2_Init+0x7c>)
 8000962:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_I2C2_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 20;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_I2C2_Init+0x74>)
 800096c:	2214      	movs	r2, #20
 800096e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_I2C2_Init+0x74>)
 8000972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000976:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_I2C2_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_I2C2_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_I2C2_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_I2C2_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_I2C2_Init+0x74>)
 8000992:	f003 f8d9 	bl	8003b48 <HAL_I2C_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800099c:	f000 fa32 	bl	8000e04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_I2C2_Init+0x74>)
 80009a4:	f005 f8d9 	bl	8005b5a <HAL_I2CEx_ConfigAnalogFilter>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80009ae:	f000 fa29 	bl	8000e04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_I2C2_Init+0x74>)
 80009b6:	f005 f90c 	bl	8005bd2 <HAL_I2CEx_ConfigDigitalFilter>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80009c0:	f000 fa20 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200000ec 	.word	0x200000ec
 80009cc:	40005800 	.word	0x40005800
 80009d0:	000186a0 	.word	0x000186a0

080009d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_SPI2_Init+0x5c>)
 80009da:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <MX_SPI2_Init+0x60>)
 80009dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI2_Init+0x5c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_SPI2_Init+0x5c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI2_Init+0x5c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI2_Init+0x5c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_SPI2_Init+0x5c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI2_Init+0x5c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_SPI2_Init+0x5c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI2_Init+0x5c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_SPI2_Init+0x5c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI2_Init+0x5c>)
 8000a16:	220a      	movs	r2, #10
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_SPI2_Init+0x5c>)
 8000a1c:	f005 fdb0 	bl	8006580 <HAL_SPI_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8000a26:	f000 f9ed 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000200 	.word	0x20000200
 8000a34:	40003800 	.word	0x40003800

08000a38 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_SPI4_Init+0x64>)
 8000a3e:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <MX_SPI4_Init+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_SPI4_Init+0x64>)
 8000a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a48:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_SPI4_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_SPI4_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_SPI4_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_SPI4_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_SPI4_Init+0x64>)
 8000a64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a68:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_SPI4_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_SPI4_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_SPI4_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_SPI4_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_SPI4_Init+0x64>)
 8000a84:	220a      	movs	r2, #10
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_SPI4_Init+0x64>)
 8000a8a:	f005 fd79 	bl	8006580 <HAL_SPI_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000a94:	f000 f9b6 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000258 	.word	0x20000258
 8000aa0:	40013400 	.word	0x40013400

08000aa4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_UART4_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_UART4_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_UART4_Init+0x4c>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_UART4_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_UART4_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_UART4_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_UART4_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_UART4_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_UART4_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_UART4_Init+0x4c>)
 8000adc:	f006 fc14 	bl	8007308 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f000 f98d 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000370 	.word	0x20000370
 8000af4:	40004c00 	.word	0x40004c00

08000af8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <MX_USART3_UART_Init+0x50>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b30:	f006 fbea 	bl	8007308 <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b3a:	f000 f963 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200003b4 	.word	0x200003b4
 8000b48:	40004800 	.word	0x40004800

08000b4c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_USART6_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b84:	f006 fbc0 	bl	8007308 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f000 f939 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200003f8 	.word	0x200003f8
 8000b9c:	40011400 	.word	0x40011400

08000ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <MX_DMA_Init+0xa8>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <MX_DMA_Init+0xa8>)
 8000bb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <MX_DMA_Init+0xa8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_DMA_Init+0xa8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <MX_DMA_Init+0xa8>)
 8000bcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_DMA_Init+0xa8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	200d      	movs	r0, #13
 8000be4:	f001 f803 	bl	8001bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000be8:	200d      	movs	r0, #13
 8000bea:	f001 f81c 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	200e      	movs	r0, #14
 8000bf4:	f000 fffb 	bl	8001bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bf8:	200e      	movs	r0, #14
 8000bfa:	f001 f814 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	200f      	movs	r0, #15
 8000c04:	f000 fff3 	bl	8001bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000c08:	200f      	movs	r0, #15
 8000c0a:	f001 f80c 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2011      	movs	r0, #17
 8000c14:	f000 ffeb 	bl	8001bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c18:	2011      	movs	r0, #17
 8000c1a:	f001 f804 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2039      	movs	r0, #57	; 0x39
 8000c24:	f000 ffe3 	bl	8001bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c28:	2039      	movs	r0, #57	; 0x39
 8000c2a:	f000 fffc 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	203a      	movs	r0, #58	; 0x3a
 8000c34:	f000 ffdb 	bl	8001bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c38:	203a      	movs	r0, #58	; 0x3a
 8000c3a:	f000 fff4 	bl	8001c26 <HAL_NVIC_EnableIRQ>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	4b62      	ldr	r3, [pc, #392]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a61      	ldr	r2, [pc, #388]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b5f      	ldr	r3, [pc, #380]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	4b5b      	ldr	r3, [pc, #364]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a5a      	ldr	r2, [pc, #360]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b58      	ldr	r3, [pc, #352]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b54      	ldr	r3, [pc, #336]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a53      	ldr	r2, [pc, #332]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b51      	ldr	r3, [pc, #324]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b4d      	ldr	r3, [pc, #308]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a4c      	ldr	r2, [pc, #304]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b4a      	ldr	r3, [pc, #296]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b46      	ldr	r3, [pc, #280]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a45      	ldr	r2, [pc, #276]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b3f      	ldr	r3, [pc, #252]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a3e      	ldr	r2, [pc, #248]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a37      	ldr	r2, [pc, #220]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <MX_GPIO_Init+0x1a4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000d2c:	4831      	ldr	r0, [pc, #196]	; (8000df4 <MX_GPIO_Init+0x1a8>)
 8000d2e:	f002 fef1 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2140      	movs	r1, #64	; 0x40
 8000d36:	4830      	ldr	r0, [pc, #192]	; (8000df8 <MX_GPIO_Init+0x1ac>)
 8000d38:	f002 feec 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	482a      	ldr	r0, [pc, #168]	; (8000dfc <MX_GPIO_Init+0x1b0>)
 8000d54:	f002 fd32 	bl	80037bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d58:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4820      	ldr	r0, [pc, #128]	; (8000df4 <MX_GPIO_Init+0x1a8>)
 8000d72:	f002 fd23 	bl	80037bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d76:	2340      	movs	r3, #64	; 0x40
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	481a      	ldr	r0, [pc, #104]	; (8000df8 <MX_GPIO_Init+0x1ac>)
 8000d8e:	f002 fd15 	bl	80037bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	4814      	ldr	r0, [pc, #80]	; (8000df8 <MX_GPIO_Init+0x1ac>)
 8000da6:	f002 fd09 	bl	80037bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000daa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480e      	ldr	r0, [pc, #56]	; (8000e00 <MX_GPIO_Init+0x1b4>)
 8000dc8:	f002 fcf8 	bl	80037bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <MX_GPIO_Init+0x1b4>)
 8000de2:	f002 fceb 	bl	80037bc <HAL_GPIO_Init>

}
 8000de6:	bf00      	nop
 8000de8:	3730      	adds	r7, #48	; 0x30
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020400 	.word	0x40020400
 8000df8:	40021800 	.word	0x40021800
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020000 	.word	0x40020000

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <Error_Handler+0x8>
	...

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a69      	ldr	r2, [pc, #420]	; (8001024 <HAL_I2C_MspInit+0x1c4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d163      	bne.n	8000f4a <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	4b68      	ldr	r3, [pc, #416]	; (8001028 <HAL_I2C_MspInit+0x1c8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a67      	ldr	r2, [pc, #412]	; (8001028 <HAL_I2C_MspInit+0x1c8>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b65      	ldr	r3, [pc, #404]	; (8001028 <HAL_I2C_MspInit+0x1c8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea4:	2312      	movs	r3, #18
 8000ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	485c      	ldr	r0, [pc, #368]	; (800102c <HAL_I2C_MspInit+0x1cc>)
 8000ebc:	f002 fc7e 	bl	80037bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	4b58      	ldr	r3, [pc, #352]	; (8001028 <HAL_I2C_MspInit+0x1c8>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	4a57      	ldr	r2, [pc, #348]	; (8001028 <HAL_I2C_MspInit+0x1c8>)
 8000eca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ece:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed0:	4b55      	ldr	r3, [pc, #340]	; (8001028 <HAL_I2C_MspInit+0x1c8>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000edc:	4b54      	ldr	r3, [pc, #336]	; (8001030 <HAL_I2C_MspInit+0x1d0>)
 8000ede:	4a55      	ldr	r2, [pc, #340]	; (8001034 <HAL_I2C_MspInit+0x1d4>)
 8000ee0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000ee2:	4b53      	ldr	r3, [pc, #332]	; (8001030 <HAL_I2C_MspInit+0x1d0>)
 8000ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ee8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eea:	4b51      	ldr	r3, [pc, #324]	; (8001030 <HAL_I2C_MspInit+0x1d0>)
 8000eec:	2240      	movs	r2, #64	; 0x40
 8000eee:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef0:	4b4f      	ldr	r3, [pc, #316]	; (8001030 <HAL_I2C_MspInit+0x1d0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef6:	4b4e      	ldr	r3, [pc, #312]	; (8001030 <HAL_I2C_MspInit+0x1d0>)
 8000ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000efc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000efe:	4b4c      	ldr	r3, [pc, #304]	; (8001030 <HAL_I2C_MspInit+0x1d0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f04:	4b4a      	ldr	r3, [pc, #296]	; (8001030 <HAL_I2C_MspInit+0x1d0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f0a:	4b49      	ldr	r3, [pc, #292]	; (8001030 <HAL_I2C_MspInit+0x1d0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f10:	4b47      	ldr	r3, [pc, #284]	; (8001030 <HAL_I2C_MspInit+0x1d0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f16:	4b46      	ldr	r3, [pc, #280]	; (8001030 <HAL_I2C_MspInit+0x1d0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f1c:	4844      	ldr	r0, [pc, #272]	; (8001030 <HAL_I2C_MspInit+0x1d0>)
 8000f1e:	f000 fe9d 	bl	8001c5c <HAL_DMA_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000f28:	f7ff ff6c 	bl	8000e04 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a40      	ldr	r2, [pc, #256]	; (8001030 <HAL_I2C_MspInit+0x1d0>)
 8000f30:	635a      	str	r2, [r3, #52]	; 0x34
 8000f32:	4a3f      	ldr	r2, [pc, #252]	; (8001030 <HAL_I2C_MspInit+0x1d0>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	201f      	movs	r0, #31
 8000f3e:	f000 fe56 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f42:	201f      	movs	r0, #31
 8000f44:	f000 fe6f 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f48:	e067      	b.n	800101a <HAL_I2C_MspInit+0x1ba>
  else if(hi2c->Instance==I2C2)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a3a      	ldr	r2, [pc, #232]	; (8001038 <HAL_I2C_MspInit+0x1d8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d162      	bne.n	800101a <HAL_I2C_MspInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	4b33      	ldr	r3, [pc, #204]	; (8001028 <HAL_I2C_MspInit+0x1c8>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4a32      	ldr	r2, [pc, #200]	; (8001028 <HAL_I2C_MspInit+0x1c8>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
 8000f64:	4b30      	ldr	r3, [pc, #192]	; (8001028 <HAL_I2C_MspInit+0x1c8>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f76:	2312      	movs	r3, #18
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f82:	2304      	movs	r3, #4
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4827      	ldr	r0, [pc, #156]	; (800102c <HAL_I2C_MspInit+0x1cc>)
 8000f8e:	f002 fc15 	bl	80037bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b24      	ldr	r3, [pc, #144]	; (8001028 <HAL_I2C_MspInit+0x1c8>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <HAL_I2C_MspInit+0x1c8>)
 8000f9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <HAL_I2C_MspInit+0x1c8>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_I2C_MspInit+0x1dc>)
 8000fb0:	4a23      	ldr	r2, [pc, #140]	; (8001040 <HAL_I2C_MspInit+0x1e0>)
 8000fb2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <HAL_I2C_MspInit+0x1dc>)
 8000fb6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000fba:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <HAL_I2C_MspInit+0x1dc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <HAL_I2C_MspInit+0x1dc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_I2C_MspInit+0x1dc>)
 8000fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fce:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_I2C_MspInit+0x1dc>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_I2C_MspInit+0x1dc>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_I2C_MspInit+0x1dc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_I2C_MspInit+0x1dc>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_I2C_MspInit+0x1dc>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000fee:	4813      	ldr	r0, [pc, #76]	; (800103c <HAL_I2C_MspInit+0x1dc>)
 8000ff0:	f000 fe34 	bl	8001c5c <HAL_DMA_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_I2C_MspInit+0x19e>
      Error_Handler();
 8000ffa:	f7ff ff03 	bl	8000e04 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a0e      	ldr	r2, [pc, #56]	; (800103c <HAL_I2C_MspInit+0x1dc>)
 8001002:	639a      	str	r2, [r3, #56]	; 0x38
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_I2C_MspInit+0x1dc>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	2021      	movs	r0, #33	; 0x21
 8001010:	f000 fded 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001014:	2021      	movs	r0, #33	; 0x21
 8001016:	f000 fe06 	bl	8001c26 <HAL_NVIC_EnableIRQ>
}
 800101a:	bf00      	nop
 800101c:	3730      	adds	r7, #48	; 0x30
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40005400 	.word	0x40005400
 8001028:	40023800 	.word	0x40023800
 800102c:	40020400 	.word	0x40020400
 8001030:	20000140 	.word	0x20000140
 8001034:	400260a0 	.word	0x400260a0
 8001038:	40005800 	.word	0x40005800
 800103c:	200001a0 	.word	0x200001a0
 8001040:	40026040 	.word	0x40026040

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a86      	ldr	r2, [pc, #536]	; (800127c <HAL_SPI_MspInit+0x238>)
 8001062:	4293      	cmp	r3, r2
 8001064:	f040 809f 	bne.w	80011a6 <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
 800106c:	4b84      	ldr	r3, [pc, #528]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	4a83      	ldr	r2, [pc, #524]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 8001072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001076:	6413      	str	r3, [r2, #64]	; 0x40
 8001078:	4b81      	ldr	r3, [pc, #516]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001080:	623b      	str	r3, [r7, #32]
 8001082:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	4b7d      	ldr	r3, [pc, #500]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	4a7c      	ldr	r2, [pc, #496]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6313      	str	r3, [r2, #48]	; 0x30
 8001094:	4b7a      	ldr	r3, [pc, #488]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	4b76      	ldr	r3, [pc, #472]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	4a75      	ldr	r2, [pc, #468]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	6313      	str	r3, [r2, #48]	; 0x30
 80010b0:	4b73      	ldr	r3, [pc, #460]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	4b6f      	ldr	r3, [pc, #444]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	4a6e      	ldr	r2, [pc, #440]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6313      	str	r3, [r2, #48]	; 0x30
 80010cc:	4b6c      	ldr	r3, [pc, #432]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697b      	ldr	r3, [r7, #20]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010d8:	230c      	movs	r3, #12
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010e8:	2305      	movs	r3, #5
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f0:	4619      	mov	r1, r3
 80010f2:	4864      	ldr	r0, [pc, #400]	; (8001284 <HAL_SPI_MspInit+0x240>)
 80010f4:	f002 fb62 	bl	80037bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800110a:	2305      	movs	r3, #5
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	4619      	mov	r1, r3
 8001114:	485c      	ldr	r0, [pc, #368]	; (8001288 <HAL_SPI_MspInit+0x244>)
 8001116:	f002 fb51 	bl	80037bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800111a:	2308      	movs	r3, #8
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800112a:	2305      	movs	r3, #5
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	4855      	ldr	r0, [pc, #340]	; (800128c <HAL_SPI_MspInit+0x248>)
 8001136:	f002 fb41 	bl	80037bc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800113a:	4b55      	ldr	r3, [pc, #340]	; (8001290 <HAL_SPI_MspInit+0x24c>)
 800113c:	4a55      	ldr	r2, [pc, #340]	; (8001294 <HAL_SPI_MspInit+0x250>)
 800113e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001140:	4b53      	ldr	r3, [pc, #332]	; (8001290 <HAL_SPI_MspInit+0x24c>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001146:	4b52      	ldr	r3, [pc, #328]	; (8001290 <HAL_SPI_MspInit+0x24c>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <HAL_SPI_MspInit+0x24c>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001152:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <HAL_SPI_MspInit+0x24c>)
 8001154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001158:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800115a:	4b4d      	ldr	r3, [pc, #308]	; (8001290 <HAL_SPI_MspInit+0x24c>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001160:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <HAL_SPI_MspInit+0x24c>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001166:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <HAL_SPI_MspInit+0x24c>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800116c:	4b48      	ldr	r3, [pc, #288]	; (8001290 <HAL_SPI_MspInit+0x24c>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001172:	4b47      	ldr	r3, [pc, #284]	; (8001290 <HAL_SPI_MspInit+0x24c>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001178:	4845      	ldr	r0, [pc, #276]	; (8001290 <HAL_SPI_MspInit+0x24c>)
 800117a:	f000 fd6f 	bl	8001c5c <HAL_DMA_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_SPI_MspInit+0x144>
    {
      Error_Handler();
 8001184:	f7ff fe3e 	bl	8000e04 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a41      	ldr	r2, [pc, #260]	; (8001290 <HAL_SPI_MspInit+0x24c>)
 800118c:	64da      	str	r2, [r3, #76]	; 0x4c
 800118e:	4a40      	ldr	r2, [pc, #256]	; (8001290 <HAL_SPI_MspInit+0x24c>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	2024      	movs	r0, #36	; 0x24
 800119a:	f000 fd28 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800119e:	2024      	movs	r0, #36	; 0x24
 80011a0:	f000 fd41 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80011a4:	e066      	b.n	8001274 <HAL_SPI_MspInit+0x230>
  else if(hspi->Instance==SPI4)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a3b      	ldr	r2, [pc, #236]	; (8001298 <HAL_SPI_MspInit+0x254>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d161      	bne.n	8001274 <HAL_SPI_MspInit+0x230>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	4a31      	ldr	r2, [pc, #196]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 80011ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011be:	6453      	str	r3, [r2, #68]	; 0x44
 80011c0:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 80011c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	4a2a      	ldr	r2, [pc, #168]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6313      	str	r3, [r2, #48]	; 0x30
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <HAL_SPI_MspInit+0x23c>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80011e8:	2374      	movs	r3, #116	; 0x74
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80011f8:	2305      	movs	r3, #5
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	4619      	mov	r1, r3
 8001202:	4826      	ldr	r0, [pc, #152]	; (800129c <HAL_SPI_MspInit+0x258>)
 8001204:	f002 fada 	bl	80037bc <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_SPI_MspInit+0x25c>)
 800120a:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <HAL_SPI_MspInit+0x260>)
 800120c:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_SPI_MspInit+0x25c>)
 8001210:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001214:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_SPI_MspInit+0x25c>)
 8001218:	2240      	movs	r2, #64	; 0x40
 800121a:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <HAL_SPI_MspInit+0x25c>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HAL_SPI_MspInit+0x25c>)
 8001224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001228:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_SPI_MspInit+0x25c>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_SPI_MspInit+0x25c>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_SPI_MspInit+0x25c>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_SPI_MspInit+0x25c>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_SPI_MspInit+0x25c>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001248:	4815      	ldr	r0, [pc, #84]	; (80012a0 <HAL_SPI_MspInit+0x25c>)
 800124a:	f000 fd07 	bl	8001c5c <HAL_DMA_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_SPI_MspInit+0x214>
      Error_Handler();
 8001254:	f7ff fdd6 	bl	8000e04 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_SPI_MspInit+0x25c>)
 800125c:	649a      	str	r2, [r3, #72]	; 0x48
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_SPI_MspInit+0x25c>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2054      	movs	r0, #84	; 0x54
 800126a:	f000 fcc0 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800126e:	2054      	movs	r0, #84	; 0x54
 8001270:	f000 fcd9 	bl	8001c26 <HAL_NVIC_EnableIRQ>
}
 8001274:	bf00      	nop
 8001276:	3738      	adds	r7, #56	; 0x38
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40003800 	.word	0x40003800
 8001280:	40023800 	.word	0x40023800
 8001284:	40020800 	.word	0x40020800
 8001288:	40020400 	.word	0x40020400
 800128c:	40020c00 	.word	0x40020c00
 8001290:	200002b0 	.word	0x200002b0
 8001294:	40026058 	.word	0x40026058
 8001298:	40013400 	.word	0x40013400
 800129c:	40021000 	.word	0x40021000
 80012a0:	20000310 	.word	0x20000310
 80012a4:	40026428 	.word	0x40026428

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08e      	sub	sp, #56	; 0x38
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a82      	ldr	r2, [pc, #520]	; (80014d0 <HAL_UART_MspInit+0x228>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d163      	bne.n	8001392 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
 80012ce:	4b81      	ldr	r3, [pc, #516]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a80      	ldr	r2, [pc, #512]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 80012d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b7e      	ldr	r3, [pc, #504]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012e2:	623b      	str	r3, [r7, #32]
 80012e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	4b7a      	ldr	r3, [pc, #488]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a79      	ldr	r2, [pc, #484]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b77      	ldr	r3, [pc, #476]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001302:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001314:	2308      	movs	r3, #8
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131c:	4619      	mov	r1, r3
 800131e:	486e      	ldr	r0, [pc, #440]	; (80014d8 <HAL_UART_MspInit+0x230>)
 8001320:	f002 fa4c 	bl	80037bc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001324:	4b6d      	ldr	r3, [pc, #436]	; (80014dc <HAL_UART_MspInit+0x234>)
 8001326:	4a6e      	ldr	r2, [pc, #440]	; (80014e0 <HAL_UART_MspInit+0x238>)
 8001328:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800132a:	4b6c      	ldr	r3, [pc, #432]	; (80014dc <HAL_UART_MspInit+0x234>)
 800132c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001330:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001332:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <HAL_UART_MspInit+0x234>)
 8001334:	2240      	movs	r2, #64	; 0x40
 8001336:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	4b68      	ldr	r3, [pc, #416]	; (80014dc <HAL_UART_MspInit+0x234>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800133e:	4b67      	ldr	r3, [pc, #412]	; (80014dc <HAL_UART_MspInit+0x234>)
 8001340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001344:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001346:	4b65      	ldr	r3, [pc, #404]	; (80014dc <HAL_UART_MspInit+0x234>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800134c:	4b63      	ldr	r3, [pc, #396]	; (80014dc <HAL_UART_MspInit+0x234>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001352:	4b62      	ldr	r3, [pc, #392]	; (80014dc <HAL_UART_MspInit+0x234>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001358:	4b60      	ldr	r3, [pc, #384]	; (80014dc <HAL_UART_MspInit+0x234>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800135e:	4b5f      	ldr	r3, [pc, #380]	; (80014dc <HAL_UART_MspInit+0x234>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001364:	485d      	ldr	r0, [pc, #372]	; (80014dc <HAL_UART_MspInit+0x234>)
 8001366:	f000 fc79 	bl	8001c5c <HAL_DMA_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001370:	f7ff fd48 	bl	8000e04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a59      	ldr	r2, [pc, #356]	; (80014dc <HAL_UART_MspInit+0x234>)
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
 800137a:	4a58      	ldr	r2, [pc, #352]	; (80014dc <HAL_UART_MspInit+0x234>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2034      	movs	r0, #52	; 0x34
 8001386:	f000 fc32 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800138a:	2034      	movs	r0, #52	; 0x34
 800138c:	f000 fc4b 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001390:	e099      	b.n	80014c6 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a53      	ldr	r2, [pc, #332]	; (80014e4 <HAL_UART_MspInit+0x23c>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d12d      	bne.n	80013f8 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	4a4b      	ldr	r2, [pc, #300]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 80013a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
 80013ac:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	4b45      	ldr	r3, [pc, #276]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a44      	ldr	r2, [pc, #272]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
 80013c8:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e6:	2307      	movs	r3, #7
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	483d      	ldr	r0, [pc, #244]	; (80014e8 <HAL_UART_MspInit+0x240>)
 80013f2:	f002 f9e3 	bl	80037bc <HAL_GPIO_Init>
}
 80013f6:	e066      	b.n	80014c6 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART6)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a3b      	ldr	r2, [pc, #236]	; (80014ec <HAL_UART_MspInit+0x244>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d161      	bne.n	80014c6 <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f003 0320 	and.w	r3, r3, #32
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a2b      	ldr	r2, [pc, #172]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <HAL_UART_MspInit+0x22c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800143a:	23c0      	movs	r3, #192	; 0xc0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800144a:	2308      	movs	r3, #8
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	4619      	mov	r1, r3
 8001454:	4820      	ldr	r0, [pc, #128]	; (80014d8 <HAL_UART_MspInit+0x230>)
 8001456:	f002 f9b1 	bl	80037bc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <HAL_UART_MspInit+0x248>)
 800145c:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <HAL_UART_MspInit+0x24c>)
 800145e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <HAL_UART_MspInit+0x248>)
 8001462:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001466:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <HAL_UART_MspInit+0x248>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_UART_MspInit+0x248>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_UART_MspInit+0x248>)
 8001476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <HAL_UART_MspInit+0x248>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_UART_MspInit+0x248>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_UART_MspInit+0x248>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_UART_MspInit+0x248>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_UART_MspInit+0x248>)
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800149a:	4815      	ldr	r0, [pc, #84]	; (80014f0 <HAL_UART_MspInit+0x248>)
 800149c:	f000 fbde 	bl	8001c5c <HAL_DMA_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_UART_MspInit+0x202>
      Error_Handler();
 80014a6:	f7ff fcad 	bl	8000e04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a10      	ldr	r2, [pc, #64]	; (80014f0 <HAL_UART_MspInit+0x248>)
 80014ae:	639a      	str	r2, [r3, #56]	; 0x38
 80014b0:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_UART_MspInit+0x248>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2047      	movs	r0, #71	; 0x47
 80014bc:	f000 fb97 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80014c0:	2047      	movs	r0, #71	; 0x47
 80014c2:	f000 fbb0 	bl	8001c26 <HAL_NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3738      	adds	r7, #56	; 0x38
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40004c00 	.word	0x40004c00
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020800 	.word	0x40020800
 80014dc:	2000043c 	.word	0x2000043c
 80014e0:	40026070 	.word	0x40026070
 80014e4:	40004800 	.word	0x40004800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40011400 	.word	0x40011400
 80014f0:	2000049c 	.word	0x2000049c
 80014f4:	40026440 	.word	0x40026440

080014f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <NMI_Handler+0x4>

080014fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler+0x4>

0800150a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler+0x4>

08001516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001544:	f000 fa34 	bl	80019b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <DMA1_Stream2_IRQHandler+0x10>)
 8001552:	f000 fd1b 	bl	8001f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200001a0 	.word	0x200001a0

08001560 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <DMA1_Stream3_IRQHandler+0x10>)
 8001566:	f000 fd11 	bl	8001f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200002b0 	.word	0x200002b0

08001574 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <DMA1_Stream4_IRQHandler+0x10>)
 800157a:	f000 fd07 	bl	8001f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000043c 	.word	0x2000043c

08001588 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <DMA1_Stream6_IRQHandler+0x10>)
 800158e:	f000 fcfd 	bl	8001f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000140 	.word	0x20000140

0800159c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <I2C1_EV_IRQHandler+0x10>)
 80015a2:	f002 fe17 	bl	80041d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000098 	.word	0x20000098

080015b0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <I2C2_EV_IRQHandler+0x10>)
 80015b6:	f002 fe0d 	bl	80041d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200000ec 	.word	0x200000ec

080015c4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <SPI2_IRQHandler+0x10>)
 80015ca:	f005 fae3 	bl	8006b94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000200 	.word	0x20000200

080015d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <UART4_IRQHandler+0x10>)
 80015de:	f005 ff8f 	bl	8007500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000370 	.word	0x20000370

080015ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <DMA2_Stream1_IRQHandler+0x10>)
 80015f2:	f000 fccb 	bl	8001f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000310 	.word	0x20000310

08001600 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <DMA2_Stream2_IRQHandler+0x10>)
 8001606:	f000 fcc1 	bl	8001f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000049c 	.word	0x2000049c

08001614 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <ETH_IRQHandler+0x10>)
 800161a:	f001 fb17 	bl	8002c4c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000373c 	.word	0x2000373c

08001628 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <USART6_IRQHandler+0x10>)
 800162e:	f005 ff67 	bl	8007500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200003f8 	.word	0x200003f8

0800163c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <SPI4_IRQHandler+0x10>)
 8001642:	f005 faa7 	bl	8006b94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000258 	.word	0x20000258

08001650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
	return 1;
 8001654:	2301      	movs	r3, #1
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_kill>:

int _kill(int pid, int sig)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <_kill+0x20>)
 800166c:	2216      	movs	r2, #22
 800166e:	601a      	str	r2, [r3, #0]
	return -1;
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	20009010 	.word	0x20009010

08001684 <_exit>:

void _exit (int status)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ffe5 	bl	8001660 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001696:	e7fe      	b.n	8001696 <_exit+0x12>

08001698 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e00a      	b.n	80016c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016aa:	f3af 8000 	nop.w
 80016ae:	4601      	mov	r1, r0
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	60ba      	str	r2, [r7, #8]
 80016b6:	b2ca      	uxtb	r2, r1
 80016b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf0      	blt.n	80016aa <_read+0x12>
	}

return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e009      	b.n	80016f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	60ba      	str	r2, [r7, #8]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3301      	adds	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dbf1      	blt.n	80016e4 <_write+0x12>
	}
	return len;
 8001700:	687b      	ldr	r3, [r7, #4]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_close>:

int _close(int file)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
	return -1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001732:	605a      	str	r2, [r3, #4]
	return 0;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <_isatty>:

int _isatty(int file)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	return 1;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <_sbrk+0x5c>)
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <_sbrk+0x60>)
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <_sbrk+0x64>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <_sbrk+0x68>)
 8001794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d205      	bcs.n	80017b0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <_sbrk+0x6c>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	20030000 	.word	0x20030000
 80017d4:	00000400 	.word	0x00000400
 80017d8:	20000648 	.word	0x20000648
 80017dc:	20009020 	.word	0x20009020
 80017e0:	20009010 	.word	0x20009010

080017e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 800180e:	f00f f9ed 	bl	8010bec <udp_new>
 8001812:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 0, 132);
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <udpServer_init+0x44>)
 8001816:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 50014);  // 7 is the server UDP port
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	f24c 325e 	movw	r2, #50014	; 0xc35e
 800181e:	4619      	mov	r1, r3
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f00f f863 	bl	80108ec <udp_bind>
 8001826:	4603      	mov	r3, r0
 8001828:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 800182a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d105      	bne.n	800183e <udpServer_init+0x36>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 8001832:	2200      	movs	r2, #0
 8001834:	4906      	ldr	r1, [pc, #24]	; (8001850 <udpServer_init+0x48>)
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f00f f976 	bl	8010b28 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 800183c:	e002      	b.n	8001844 <udpServer_init+0x3c>
	   udp_remove(upcb);
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f00f f992 	bl	8010b68 <udp_remove>
}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	8400a8c0 	.word	0x8400a8c0
 8001850:	08001855 	.word	0x08001855

08001854 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
	extern struct udp_pcb *udp_info;
	extern char mem[100];
	extern char received;
	extern int len;
	/* save data for later use */
	received = 1;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <udp_receive_callback+0x54>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
	len = p->len - 1;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	895b      	ldrh	r3, [r3, #10]
 800186c:	3b01      	subs	r3, #1
 800186e:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <udp_receive_callback+0x58>)
 8001870:	6013      	str	r3, [r2, #0]
	udp_info = upcb;
 8001872:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <udp_receive_callback+0x5c>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	6013      	str	r3, [r2, #0]
	udp_info->remote_ip = *addr;
 8001878:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <udp_receive_callback+0x5c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	605a      	str	r2, [r3, #4]
	udp_info->remote_port = port;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <udp_receive_callback+0x5c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	8b3a      	ldrh	r2, [r7, #24]
 8001888:	829a      	strh	r2, [r3, #20]

	/* save the data for later use */
	memcpy(mem,(char*)p->payload,p->len);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6859      	ldr	r1, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	895b      	ldrh	r3, [r3, #10]
 8001892:	461a      	mov	r2, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <udp_receive_callback+0x60>)
 8001896:	f011 fceb 	bl	8013270 <memcpy>
	/* free p buffer */
	pbuf_free(p);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f008 fea4 	bl	800a5e8 <pbuf_free>
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000500 	.word	0x20000500
 80018ac:	20000640 	.word	0x20000640
 80018b0:	200004fc 	.word	0x200004fc
 80018b4:	20000568 	.word	0x20000568

080018b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018be:	490e      	ldr	r1, [pc, #56]	; (80018f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018c0:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c4:	e002      	b.n	80018cc <LoopCopyDataInit>

080018c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ca:	3304      	adds	r3, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d0:	d3f9      	bcc.n	80018c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018d4:	4c0b      	ldr	r4, [pc, #44]	; (8001904 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d8:	e001      	b.n	80018de <LoopFillZerobss>

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018dc:	3204      	adds	r2, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018e2:	f7ff ff7f 	bl	80017e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e6:	f011 fc8f 	bl	8013208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ea:	f7fe feb5 	bl	8000658 <main>
  bx  lr    
 80018ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80018fc:	08017350 	.word	0x08017350
  ldr r2, =_sbss
 8001900:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001904:	20009020 	.word	0x20009020

08001908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC_IRQHandler>
	...

0800190c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001910:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <HAL_Init+0x40>)
 8001916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800191a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0a      	ldr	r2, [pc, #40]	; (800194c <HAL_Init+0x40>)
 8001922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001926:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a07      	ldr	r2, [pc, #28]	; (800194c <HAL_Init+0x40>)
 800192e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001934:	2003      	movs	r0, #3
 8001936:	f000 f94f 	bl	8001bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193a:	2000      	movs	r0, #0
 800193c:	f000 f808 	bl	8001950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001940:	f7ff fa66 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023c00 	.word	0x40023c00

08001950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_InitTick+0x54>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_InitTick+0x58>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001966:	fbb3 f3f1 	udiv	r3, r3, r1
 800196a:	fbb2 f3f3 	udiv	r3, r2, r3
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f967 	bl	8001c42 <HAL_SYSTICK_Config>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e00e      	b.n	800199c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b0f      	cmp	r3, #15
 8001982:	d80a      	bhi.n	800199a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001984:	2200      	movs	r2, #0
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	f000 f92f 	bl	8001bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001990:	4a06      	ldr	r2, [pc, #24]	; (80019ac <HAL_InitTick+0x5c>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	e000      	b.n	800199c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000004 	.word	0x20000004
 80019a8:	2000000c 	.word	0x2000000c
 80019ac:	20000008 	.word	0x20000008

080019b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_IncTick+0x20>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_IncTick+0x24>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <HAL_IncTick+0x24>)
 80019c2:	6013      	str	r3, [r2, #0]
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	2000000c 	.word	0x2000000c
 80019d4:	2000064c 	.word	0x2000064c

080019d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return uwTick;
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <HAL_GetTick+0x14>)
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	2000064c 	.word	0x2000064c

080019f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f8:	f7ff ffee 	bl	80019d8 <HAL_GetTick>
 80019fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a08:	d005      	beq.n	8001a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_Delay+0x44>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a16:	bf00      	nop
 8001a18:	f7ff ffde 	bl	80019d8 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d8f7      	bhi.n	8001a18 <HAL_Delay+0x28>
  {
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000000c 	.word	0x2000000c

08001a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a54:	4013      	ands	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <__NVIC_GetPriorityGrouping+0x18>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 0307 	and.w	r3, r3, #7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	db0b      	blt.n	8001ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	f003 021f 	and.w	r2, r3, #31
 8001ab4:	4907      	ldr	r1, [pc, #28]	; (8001ad4 <__NVIC_EnableIRQ+0x38>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	2001      	movs	r0, #1
 8001abe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000e100 	.word	0xe000e100

08001ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	db0a      	blt.n	8001b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	490c      	ldr	r1, [pc, #48]	; (8001b24 <__NVIC_SetPriority+0x4c>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	440b      	add	r3, r1
 8001afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b00:	e00a      	b.n	8001b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4908      	ldr	r1, [pc, #32]	; (8001b28 <__NVIC_SetPriority+0x50>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	440b      	add	r3, r1
 8001b16:	761a      	strb	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000e100 	.word	0xe000e100
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f1c3 0307 	rsb	r3, r3, #7
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	bf28      	it	cs
 8001b4a:	2304      	movcs	r3, #4
 8001b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3304      	adds	r3, #4
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d902      	bls.n	8001b5c <NVIC_EncodePriority+0x30>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3b03      	subs	r3, #3
 8001b5a:	e000      	b.n	8001b5e <NVIC_EncodePriority+0x32>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	f04f 32ff 	mov.w	r2, #4294967295
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	401a      	ands	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43d9      	mvns	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	4313      	orrs	r3, r2
         );
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba4:	d301      	bcc.n	8001baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00f      	b.n	8001bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <SysTick_Config+0x40>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb2:	210f      	movs	r1, #15
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f7ff ff8e 	bl	8001ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <SysTick_Config+0x40>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <SysTick_Config+0x40>)
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	e000e010 	.word	0xe000e010

08001bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff29 	bl	8001a38 <__NVIC_SetPriorityGrouping>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c00:	f7ff ff3e 	bl	8001a80 <__NVIC_GetPriorityGrouping>
 8001c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f7ff ff8e 	bl	8001b2c <NVIC_EncodePriority>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff5d 	bl	8001ad8 <__NVIC_SetPriority>
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff31 	bl	8001a9c <__NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffa2 	bl	8001b94 <SysTick_Config>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff feb6 	bl	80019d8 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e099      	b.n	8001dac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c98:	e00f      	b.n	8001cba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c9a:	f7ff fe9d 	bl	80019d8 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	d908      	bls.n	8001cba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2220      	movs	r2, #32
 8001cac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e078      	b.n	8001dac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e8      	bne.n	8001c9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_DMA_Init+0x158>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d107      	bne.n	8001d24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f023 0307 	bic.w	r3, r3, #7
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d117      	bne.n	8001d7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00e      	beq.n	8001d7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fb1b 	bl	800239c <DMA_CheckFifoParam>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2240      	movs	r2, #64	; 0x40
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e016      	b.n	8001dac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fad2 	bl	8002330 <DMA_CalcBaseAndBitshift>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	223f      	movs	r2, #63	; 0x3f
 8001d96:	409a      	lsls	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	f010803f 	.word	0xf010803f

08001db8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_DMA_Start_IT+0x26>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e040      	b.n	8001e60 <HAL_DMA_Start_IT+0xa8>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d12f      	bne.n	8001e52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2202      	movs	r2, #2
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 fa64 	bl	80022d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	223f      	movs	r2, #63	; 0x3f
 8001e12:	409a      	lsls	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0216 	orr.w	r2, r2, #22
 8001e26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0208 	orr.w	r2, r2, #8
 8001e3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	e005      	b.n	8001e5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e76:	f7ff fdaf 	bl	80019d8 <HAL_GetTick>
 8001e7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d008      	beq.n	8001e9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2280      	movs	r2, #128	; 0x80
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e052      	b.n	8001f40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0216 	bic.w	r2, r2, #22
 8001ea8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <HAL_DMA_Abort+0x62>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0208 	bic.w	r2, r2, #8
 8001ed8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eea:	e013      	b.n	8001f14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eec:	f7ff fd74 	bl	80019d8 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d90c      	bls.n	8001f14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2220      	movs	r2, #32
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2203      	movs	r2, #3
 8001f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e015      	b.n	8001f40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1e4      	bne.n	8001eec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f26:	223f      	movs	r2, #63	; 0x3f
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d004      	beq.n	8001f66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00c      	b.n	8001f80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2205      	movs	r2, #5
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f98:	4b8e      	ldr	r3, [pc, #568]	; (80021d4 <HAL_DMA_IRQHandler+0x248>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a8e      	ldr	r2, [pc, #568]	; (80021d8 <HAL_DMA_IRQHandler+0x24c>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0a9b      	lsrs	r3, r3, #10
 8001fa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d01a      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0204 	bic.w	r2, r2, #4
 8001fde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	409a      	lsls	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d012      	beq.n	800202e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00b      	beq.n	800202e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	2201      	movs	r2, #1
 800201c:	409a      	lsls	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f043 0202 	orr.w	r2, r3, #2
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002032:	2204      	movs	r2, #4
 8002034:	409a      	lsls	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d012      	beq.n	8002064 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	2204      	movs	r2, #4
 8002052:	409a      	lsls	r2, r3
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205c:	f043 0204 	orr.w	r2, r3, #4
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	2210      	movs	r2, #16
 800206a:	409a      	lsls	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d043      	beq.n	80020fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d03c      	beq.n	80020fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002086:	2210      	movs	r2, #16
 8002088:	409a      	lsls	r2, r3
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d018      	beq.n	80020ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d108      	bne.n	80020bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d024      	beq.n	80020fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
 80020ba:	e01f      	b.n	80020fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01b      	beq.n	80020fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
 80020cc:	e016      	b.n	80020fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d107      	bne.n	80020ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0208 	bic.w	r2, r2, #8
 80020ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002100:	2220      	movs	r2, #32
 8002102:	409a      	lsls	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 808f 	beq.w	800222c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8087 	beq.w	800222c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002122:	2220      	movs	r2, #32
 8002124:	409a      	lsls	r2, r3
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b05      	cmp	r3, #5
 8002134:	d136      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0216 	bic.w	r2, r2, #22
 8002144:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002154:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	d103      	bne.n	8002166 <HAL_DMA_IRQHandler+0x1da>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0208 	bic.w	r2, r2, #8
 8002174:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	223f      	movs	r2, #63	; 0x3f
 800217c:	409a      	lsls	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002196:	2b00      	cmp	r3, #0
 8002198:	d07e      	beq.n	8002298 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	4798      	blx	r3
        }
        return;
 80021a2:	e079      	b.n	8002298 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d01d      	beq.n	80021ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10d      	bne.n	80021dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d031      	beq.n	800222c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
 80021d0:	e02c      	b.n	800222c <HAL_DMA_IRQHandler+0x2a0>
 80021d2:	bf00      	nop
 80021d4:	20000004 	.word	0x20000004
 80021d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d023      	beq.n	800222c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
 80021ec:	e01e      	b.n	800222c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10f      	bne.n	800221c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0210 	bic.w	r2, r2, #16
 800220a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002230:	2b00      	cmp	r3, #0
 8002232:	d032      	beq.n	800229a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d022      	beq.n	8002286 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2205      	movs	r2, #5
 8002244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	3301      	adds	r3, #1
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	d307      	bcc.n	8002274 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f2      	bne.n	8002258 <HAL_DMA_IRQHandler+0x2cc>
 8002272:	e000      	b.n	8002276 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002274:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
 8002296:	e000      	b.n	800229a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002298:	bf00      	nop
    }
  }
}
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ae:	b2db      	uxtb	r3, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b40      	cmp	r3, #64	; 0x40
 8002300:	d108      	bne.n	8002314 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002312:	e007      	b.n	8002324 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	60da      	str	r2, [r3, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	3b10      	subs	r3, #16
 8002340:	4a14      	ldr	r2, [pc, #80]	; (8002394 <DMA_CalcBaseAndBitshift+0x64>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800234a:	4a13      	ldr	r2, [pc, #76]	; (8002398 <DMA_CalcBaseAndBitshift+0x68>)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b03      	cmp	r3, #3
 800235c:	d909      	bls.n	8002372 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	1d1a      	adds	r2, r3, #4
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	659a      	str	r2, [r3, #88]	; 0x58
 8002370:	e007      	b.n	8002382 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800237a:	f023 0303 	bic.w	r3, r3, #3
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	aaaaaaab 	.word	0xaaaaaaab
 8002398:	0801710c 	.word	0x0801710c

0800239c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d11f      	bne.n	80023f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d856      	bhi.n	800246a <DMA_CheckFifoParam+0xce>
 80023bc:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <DMA_CheckFifoParam+0x28>)
 80023be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c2:	bf00      	nop
 80023c4:	080023d5 	.word	0x080023d5
 80023c8:	080023e7 	.word	0x080023e7
 80023cc:	080023d5 	.word	0x080023d5
 80023d0:	0800246b 	.word	0x0800246b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d046      	beq.n	800246e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e4:	e043      	b.n	800246e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023ee:	d140      	bne.n	8002472 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f4:	e03d      	b.n	8002472 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fe:	d121      	bne.n	8002444 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b03      	cmp	r3, #3
 8002404:	d837      	bhi.n	8002476 <DMA_CheckFifoParam+0xda>
 8002406:	a201      	add	r2, pc, #4	; (adr r2, 800240c <DMA_CheckFifoParam+0x70>)
 8002408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240c:	0800241d 	.word	0x0800241d
 8002410:	08002423 	.word	0x08002423
 8002414:	0800241d 	.word	0x0800241d
 8002418:	08002435 	.word	0x08002435
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
      break;
 8002420:	e030      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d025      	beq.n	800247a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002432:	e022      	b.n	800247a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800243c:	d11f      	bne.n	800247e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002442:	e01c      	b.n	800247e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d903      	bls.n	8002452 <DMA_CheckFifoParam+0xb6>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d003      	beq.n	8002458 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002450:	e018      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
      break;
 8002456:	e015      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00e      	beq.n	8002482 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      break;
 8002468:	e00b      	b.n	8002482 <DMA_CheckFifoParam+0xe6>
      break;
 800246a:	bf00      	nop
 800246c:	e00a      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      break;
 800246e:	bf00      	nop
 8002470:	e008      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      break;
 8002472:	bf00      	nop
 8002474:	e006      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      break;
 8002476:	bf00      	nop
 8002478:	e004      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      break;
 800247a:	bf00      	nop
 800247c:	e002      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      break;   
 800247e:	bf00      	nop
 8002480:	e000      	b.n	8002484 <DMA_CheckFifoParam+0xe8>
      break;
 8002482:	bf00      	nop
    }
  } 
  
  return status; 
 8002484:	7bfb      	ldrb	r3, [r7, #15]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop

08002494 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80024a4:	4ba1      	ldr	r3, [pc, #644]	; (800272c <HAL_ETH_Init+0x298>)
 80024a6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e182      	b.n	80027c0 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f006 fa2e 	bl	8008930 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	4b95      	ldr	r3, [pc, #596]	; (8002730 <HAL_ETH_Init+0x29c>)
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	4a94      	ldr	r2, [pc, #592]	; (8002730 <HAL_ETH_Init+0x29c>)
 80024de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e2:	6453      	str	r3, [r2, #68]	; 0x44
 80024e4:	4b92      	ldr	r3, [pc, #584]	; (8002730 <HAL_ETH_Init+0x29c>)
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024f0:	4b90      	ldr	r3, [pc, #576]	; (8002734 <HAL_ETH_Init+0x2a0>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a8f      	ldr	r2, [pc, #572]	; (8002734 <HAL_ETH_Init+0x2a0>)
 80024f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024fa:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024fc:	4b8d      	ldr	r3, [pc, #564]	; (8002734 <HAL_ETH_Init+0x2a0>)
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	498b      	ldr	r1, [pc, #556]	; (8002734 <HAL_ETH_Init+0x2a0>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002520:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002522:	f7ff fa59 	bl	80019d8 <HAL_GetTick>
 8002526:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002528:	e011      	b.n	800254e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800252a:	f7ff fa55 	bl	80019d8 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002538:	d909      	bls.n	800254e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2203      	movs	r2, #3
 800253e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e138      	b.n	80027c0 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e4      	bne.n	800252a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f023 031c 	bic.w	r3, r3, #28
 800256e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002570:	f003 ffd2 	bl	8006518 <HAL_RCC_GetHCLKFreq>
 8002574:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4a6f      	ldr	r2, [pc, #444]	; (8002738 <HAL_ETH_Init+0x2a4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d908      	bls.n	8002590 <HAL_ETH_Init+0xfc>
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4a6e      	ldr	r2, [pc, #440]	; (800273c <HAL_ETH_Init+0x2a8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d804      	bhi.n	8002590 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f043 0308 	orr.w	r3, r3, #8
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	e027      	b.n	80025e0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4a6a      	ldr	r2, [pc, #424]	; (800273c <HAL_ETH_Init+0x2a8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d908      	bls.n	80025aa <HAL_ETH_Init+0x116>
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	4a64      	ldr	r2, [pc, #400]	; (800272c <HAL_ETH_Init+0x298>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d204      	bcs.n	80025aa <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f043 030c 	orr.w	r3, r3, #12
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	e01a      	b.n	80025e0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4a5f      	ldr	r2, [pc, #380]	; (800272c <HAL_ETH_Init+0x298>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d303      	bcc.n	80025ba <HAL_ETH_Init+0x126>
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4a62      	ldr	r2, [pc, #392]	; (8002740 <HAL_ETH_Init+0x2ac>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d911      	bls.n	80025de <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4a60      	ldr	r2, [pc, #384]	; (8002740 <HAL_ETH_Init+0x2ac>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d908      	bls.n	80025d4 <HAL_ETH_Init+0x140>
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4a5f      	ldr	r2, [pc, #380]	; (8002744 <HAL_ETH_Init+0x2b0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d804      	bhi.n	80025d4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	e005      	b.n	80025e0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f043 0310 	orr.w	r3, r3, #16
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	e000      	b.n	80025e0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80025de:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80025e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025ec:	2100      	movs	r1, #0
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fc16 	bl	8002e20 <HAL_ETH_WritePHYRegister>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00b      	beq.n	8002612 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80025fe:	6939      	ldr	r1, [r7, #16]
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fdcb 	bl	800319c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e0d6      	b.n	80027c0 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002612:	20ff      	movs	r0, #255	; 0xff
 8002614:	f7ff f9ec 	bl	80019f0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80a4 	beq.w	800276a <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002622:	f7ff f9d9 	bl	80019d8 <HAL_GetTick>
 8002626:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	461a      	mov	r2, r3
 800262e:	2101      	movs	r1, #1
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fb8d 	bl	8002d50 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002636:	f7ff f9cf 	bl	80019d8 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	; 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d90f      	bls.n	8002668 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800264c:	6939      	ldr	r1, [r7, #16]
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fda4 	bl	800319c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0ab      	b.n	80027c0 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0da      	beq.n	8002628 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002672:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002676:	2100      	movs	r1, #0
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fbd1 	bl	8002e20 <HAL_ETH_WritePHYRegister>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002688:	6939      	ldr	r1, [r7, #16]
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fd86 	bl	800319c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002698:	2301      	movs	r3, #1
 800269a:	e091      	b.n	80027c0 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800269c:	f7ff f99c 	bl	80019d8 <HAL_GetTick>
 80026a0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	461a      	mov	r2, r3
 80026a8:	2101      	movs	r1, #1
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fb50 	bl	8002d50 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80026b0:	f7ff f992 	bl	80019d8 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d90f      	bls.n	80026e2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80026c6:	6939      	ldr	r1, [r7, #16]
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fd67 	bl	800319c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e06e      	b.n	80027c0 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0da      	beq.n	80026a2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	461a      	mov	r2, r3
 80026f2:	2110      	movs	r1, #16
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fb2b 	bl	8002d50 <HAL_ETH_ReadPHYRegister>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00b      	beq.n	8002718 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002704:	6939      	ldr	r1, [r7, #16]
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fd48 	bl	800319c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002714:	2301      	movs	r3, #1
 8002716:	e053      	b.n	80027c0 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b00      	cmp	r3, #0
 8002720:	d012      	beq.n	8002748 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	e010      	b.n	800274e <HAL_ETH_Init+0x2ba>
 800272c:	03938700 	.word	0x03938700
 8002730:	40023800 	.word	0x40023800
 8002734:	40013800 	.word	0x40013800
 8002738:	01312cff 	.word	0x01312cff
 800273c:	02160ebf 	.word	0x02160ebf
 8002740:	05f5e0ff 	.word	0x05f5e0ff
 8002744:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	e026      	b.n	80027ae <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	e021      	b.n	80027ae <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	08db      	lsrs	r3, r3, #3
 8002770:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800277a:	4313      	orrs	r3, r2
 800277c:	b29b      	uxth	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	2100      	movs	r1, #0
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fb4c 	bl	8002e20 <HAL_ETH_WritePHYRegister>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002792:	6939      	ldr	r1, [r7, #16]
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 fd01 	bl	800319c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00c      	b.n	80027c0 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80027a6:	f640 70ff 	movw	r0, #4095	; 0xfff
 80027aa:	f7ff f921 	bl	80019f0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80027ae:	6939      	ldr	r1, [r7, #16]
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fcf3 	bl	800319c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_ETH_DMATxDescListInit+0x20>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e051      	b.n	800288c <HAL_ETH_DMATxDescListInit+0xc4>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	e030      	b.n	8002866 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015b      	lsls	r3, r3, #5
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	4413      	add	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002814:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	461a      	mov	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	3b01      	subs	r3, #1
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	d208      	bcs.n	800285a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3301      	adds	r3, #1
 800284c:	015b      	lsls	r3, r3, #5
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	4413      	add	r3, r2
 8002852:	461a      	mov	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	e002      	b.n	8002860 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3301      	adds	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d3ca      	bcc.n	8002804 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002878:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_ETH_DMARxDescListInit+0x20>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e055      	b.n	8002964 <HAL_ETH_DMARxDescListInit+0xcc>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e034      	b.n	800293e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	015b      	lsls	r3, r3, #5
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	4413      	add	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80028e4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80028ec:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80028f4:	fb02 f303 	mul.w	r3, r2, r3
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	4413      	add	r3, r2
 80028fc:	461a      	mov	r2, r3
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d105      	bne.n	8002916 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	3b01      	subs	r3, #1
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	429a      	cmp	r2, r3
 800291e:	d208      	bcs.n	8002932 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3301      	adds	r3, #1
 8002924:	015b      	lsls	r3, r3, #5
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	4413      	add	r3, r2
 800292a:	461a      	mov	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	60da      	str	r2, [r3, #12]
 8002930:	e002      	b.n	8002938 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3301      	adds	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d3c6      	bcc.n	80028d4 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002950:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_ETH_TransmitFrame+0x24>
 8002990:	2302      	movs	r3, #2
 8002992:	e0cc      	b.n	8002b2e <HAL_ETH_TransmitFrame+0x1be>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0b7      	b.n	8002b2e <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	da09      	bge.n	80029dc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2212      	movs	r2, #18
 80029cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0a8      	b.n	8002b2e <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d915      	bls.n	8002a12 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	4a54      	ldr	r2, [pc, #336]	; (8002b3c <HAL_ETH_TransmitFrame+0x1cc>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	0a9b      	lsrs	r3, r3, #10
 80029f0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	4b51      	ldr	r3, [pc, #324]	; (8002b3c <HAL_ETH_TransmitFrame+0x1cc>)
 80029f6:	fba3 1302 	umull	r1, r3, r3, r2
 80029fa:	0a9b      	lsrs	r3, r3, #10
 80029fc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e001      	b.n	8002a16 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002a12:	2301      	movs	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d11c      	bne.n	8002a56 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002a2a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002a36:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a46:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a54:	e04b      	b.n	8002aee <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	e044      	b.n	8002ae6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a6a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d107      	bne.n	8002a82 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a80:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a8a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d116      	bne.n	8002ac4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002aa4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	4a25      	ldr	r2, [pc, #148]	; (8002b40 <HAL_ETH_TransmitFrame+0x1d0>)
 8002aaa:	fb03 f202 	mul.w	r2, r3, r2
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002ab6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002ac2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ad2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d3b6      	bcc.n	8002a5c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00d      	beq.n	8002b1c <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b16:	461a      	mov	r2, r3
 8002b18:	2300      	movs	r3, #0
 8002b1a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	ac02b00b 	.word	0xac02b00b
 8002b40:	fffffa0c 	.word	0xfffffa0c

08002b44 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_ETH_GetReceivedFrame+0x1a>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e070      	b.n	8002c40 <HAL_ETH_GetReceivedFrame+0xfc>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	db5a      	blt.n	8002c2e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d030      	beq.n	8002be8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d103      	bne.n	8002ba0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	0c1b      	lsrs	r3, r3, #16
 8002bb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002bb4:	3b04      	subs	r3, #4
 8002bb6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e02b      	b.n	8002c40 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d010      	beq.n	8002c18 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	461a      	mov	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
 8002c16:	e00a      	b.n	8002c2e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d112      	bne.n	8002c8c <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f85e 	bl	8002d28 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c74:	461a      	mov	r2, r3
 8002c76:	2340      	movs	r3, #64	; 0x40
 8002c78:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c8a:	e01a      	b.n	8002cc2 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d111      	bne.n	8002cc2 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f838 	bl	8002d14 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cac:	461a      	mov	r2, r3
 8002cae:	2301      	movs	r3, #1
 8002cb0:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cd0:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce4:	d112      	bne.n	8002d0c <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f828 	bl	8002d3c <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cfa:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b82      	cmp	r3, #130	; 0x82
 8002d70:	d101      	bne.n	8002d76 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
 8002d74:	e050      	b.n	8002e18 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2282      	movs	r2, #130	; 0x82
 8002d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f003 031c 	and.w	r3, r3, #28
 8002d8c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8a1b      	ldrh	r3, [r3, #16]
 8002d92:	02db      	lsls	r3, r3, #11
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002d9c:	897b      	ldrh	r3, [r7, #10]
 8002d9e:	019b      	lsls	r3, r3, #6
 8002da0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f023 0302 	bic.w	r3, r3, #2
 8002db0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002dc2:	f7fe fe09 	bl	80019d8 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002dc8:	e015      	b.n	8002df6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002dca:	f7fe fe05 	bl	80019d8 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd8:	d309      	bcc.n	8002dee <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e014      	b.n	8002e18 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1e4      	bne.n	8002dca <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b42      	cmp	r3, #66	; 0x42
 8002e40:	d101      	bne.n	8002e46 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
 8002e44:	e04e      	b.n	8002ee4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2242      	movs	r2, #66	; 0x42
 8002e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f003 031c 	and.w	r3, r3, #28
 8002e5c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8a1b      	ldrh	r3, [r3, #16]
 8002e62:	02db      	lsls	r3, r3, #11
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002e6c:	897b      	ldrh	r3, [r7, #10]
 8002e6e:	019b      	lsls	r3, r3, #6
 8002e70:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002e9c:	f7fe fd9c 	bl	80019d8 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ea2:	e015      	b.n	8002ed0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002ea4:	f7fe fd98 	bl	80019d8 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb2:	d309      	bcc.n	8002ec8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e00d      	b.n	8002ee4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1e4      	bne.n	8002ea4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_ETH_Start+0x16>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e01f      	b.n	8002f42 <HAL_ETH_Start+0x56>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fb40 	bl	8003598 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fb77 	bl	800360c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fc06 	bl	8003730 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fbab 	bl	8003680 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fbd4 	bl	80036d8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_ETH_Stop+0x16>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e01f      	b.n	8002fa0 <HAL_ETH_Stop+0x56>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fb9b 	bl	80036ac <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fbc4 	bl	8003704 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fb62 	bl	8003646 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fbd4 	bl	8003730 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fb22 	bl	80035d2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_ETH_ConfigMAC+0x1c>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e0e4      	b.n	800318e <HAL_ETH_ConfigMAC+0x1e6>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 80b1 	beq.w	800313e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4b6c      	ldr	r3, [pc, #432]	; (8003198 <HAL_ETH_ConfigMAC+0x1f0>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002ff4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002ffa:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003000:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003006:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800300c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003012:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003018:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800301e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003024:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800302a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003030:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003036:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800304e:	2001      	movs	r0, #1
 8003050:	f7fe fcce 	bl	80019f0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003064:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800306a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003070:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003076:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800307c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003082:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800308e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003090:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800309a:	2001      	movs	r0, #1
 800309c:	f7fe fca8 	bl	80019f0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030b0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030ba:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80030ca:	4013      	ands	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80030d8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80030de:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80030e4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80030ea:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80030f0:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003108:	2001      	movs	r0, #1
 800310a:	f7fe fc71 	bl	80019f0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800312e:	2001      	movs	r0, #1
 8003130:	f7fe fc5e 	bl	80019f0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	61da      	str	r2, [r3, #28]
 800313c:	e01e      	b.n	800317c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800314c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800316e:	2001      	movs	r0, #1
 8003170:	f7fe fc3e 	bl	80019f0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	ff20810f 	.word	0xff20810f

0800319c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b0b0      	sub	sp, #192	; 0xc0
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031b8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80031ca:	2300      	movs	r3, #0
 80031cc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d103      	bne.n	80031ea <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80031e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e6:	663b      	str	r3, [r7, #96]	; 0x60
 80031e8:	e001      	b.n	80031ee <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80031ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031f2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031f8:	2300      	movs	r3, #0
 80031fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003200:	2300      	movs	r3, #0
 8003202:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003204:	2300      	movs	r3, #0
 8003206:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003208:	2340      	movs	r3, #64	; 0x40
 800320a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003212:	2300      	movs	r3, #0
 8003214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003218:	2300      	movs	r3, #0
 800321a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800321e:	2300      	movs	r3, #0
 8003220:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800322a:	2300      	movs	r3, #0
 800322c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003230:	2300      	movs	r3, #0
 8003232:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003236:	2300      	movs	r3, #0
 8003238:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003242:	2300      	movs	r3, #0
 8003244:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003248:	2300      	movs	r3, #0
 800324a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800324e:	2300      	movs	r3, #0
 8003250:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003254:	2300      	movs	r3, #0
 8003256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003270:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003274:	4baa      	ldr	r3, [pc, #680]	; (8003520 <ETH_MACDMAConfig+0x384>)
 8003276:	4013      	ands	r3, r2
 8003278:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800327c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800327e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003280:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003284:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003288:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800328e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003292:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003296:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800329c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800329e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80032a0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80032a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80032a4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80032a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80032a8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80032aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80032ac:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80032ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80032b0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80032b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032c4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032d0:	2001      	movs	r0, #1
 80032d2:	f7fe fb8d 	bl	80019f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032de:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80032e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80032e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80032e4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80032e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80032e8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80032ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80032ee:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80032f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80032f4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80032f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80032fa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80032fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003300:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003304:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800330c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800330e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800331a:	2001      	movs	r0, #1
 800331c:	f7fe fb68 	bl	80019f0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003328:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003332:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800333c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003348:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800334c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003350:	4013      	ands	r3, r2
 8003352:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003356:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800335a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800335c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003360:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003366:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800336c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800336e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003372:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003374:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003378:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800337a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800338c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003398:	2001      	movs	r0, #1
 800339a:	f7fe fb29 	bl	80019f0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033a6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80033a8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80033ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033c2:	2001      	movs	r0, #1
 80033c4:	f7fe fb14 	bl	80019f0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033d0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80033d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033da:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80033e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033e4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80033f6:	2304      	movs	r3, #4
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80033fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003400:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003406:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800340a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800340c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003410:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003416:	2300      	movs	r3, #0
 8003418:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800341a:	2300      	movs	r3, #0
 800341c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800342c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003430:	4b3c      	ldr	r3, [pc, #240]	; (8003524 <ETH_MACDMAConfig+0x388>)
 8003432:	4013      	ands	r3, r2
 8003434:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003438:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800343a:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800343c:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800343e:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003440:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003442:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003444:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003446:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003448:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800344a:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800344c:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800344e:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003450:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003454:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003458:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800345a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800346c:	461a      	mov	r2, r3
 800346e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003472:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003482:	2001      	movs	r0, #1
 8003484:	f7fe fab4 	bl	80019f0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003490:	461a      	mov	r2, r3
 8003492:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003496:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800349c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800349e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80034a0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80034a4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80034a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80034a8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80034aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ac:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80034ae:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80034b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80034b2:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034c0:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80034d0:	2001      	movs	r0, #1
 80034d2:	f7fe fa8d 	bl	80019f0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034de:	461a      	mov	r2, r3
 80034e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034e4:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d10d      	bne.n	800350a <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003504:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003508:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	461a      	mov	r2, r3
 8003510:	2100      	movs	r1, #0
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f808 	bl	8003528 <ETH_MACAddressConfig>
}
 8003518:	bf00      	nop
 800351a:	37c0      	adds	r7, #192	; 0xc0
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	ff20810f 	.word	0xff20810f
 8003524:	f8de3f23 	.word	0xf8de3f23

08003528 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3305      	adds	r3, #5
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	3204      	adds	r2, #4
 8003540:	7812      	ldrb	r2, [r2, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <ETH_MACAddressConfig+0x68>)
 800354a:	4413      	add	r3, r2
 800354c:	461a      	mov	r2, r3
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3303      	adds	r3, #3
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	061a      	lsls	r2, r3, #24
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3302      	adds	r3, #2
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3301      	adds	r3, #1
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	4313      	orrs	r3, r2
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	7812      	ldrb	r2, [r2, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <ETH_MACAddressConfig+0x6c>)
 800357a:	4413      	add	r3, r2
 800357c:	461a      	mov	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	6013      	str	r3, [r2, #0]
}
 8003582:	bf00      	nop
 8003584:	371c      	adds	r7, #28
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40028040 	.word	0x40028040
 8003594:	40028044 	.word	0x40028044

08003598 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0208 	orr.w	r2, r2, #8
 80035b2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80035bc:	2001      	movs	r0, #1
 80035be:	f000 f8dd 	bl	800377c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0208 	bic.w	r2, r2, #8
 80035ec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80035f6:	2001      	movs	r0, #1
 80035f8:	f000 f8c0 	bl	800377c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	601a      	str	r2, [r3, #0]
}
 8003604:	bf00      	nop
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0204 	orr.w	r2, r2, #4
 8003626:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003630:	2001      	movs	r0, #1
 8003632:	f000 f8a3 	bl	800377c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	601a      	str	r2, [r3, #0]
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0204 	bic.w	r2, r2, #4
 8003660:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800366a:	2001      	movs	r0, #1
 800366c:	f000 f886 	bl	800377c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	601a      	str	r2, [r3, #0]
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800369a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800369e:	6193      	str	r3, [r2, #24]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036ca:	6193      	str	r3, [r2, #24]
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	f043 0302 	orr.w	r3, r3, #2
 80036f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036f6:	6193      	str	r3, [r2, #24]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	f023 0302 	bic.w	r3, r3, #2
 800371e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003722:	6193      	str	r3, [r2, #24]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800374e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003752:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003760:	2001      	movs	r0, #1
 8003762:	f000 f80b 	bl	800377c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003770:	6193      	str	r3, [r2, #24]
}
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <ETH_Delay+0x38>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <ETH_Delay+0x3c>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	0a5b      	lsrs	r3, r3, #9
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003798:	bf00      	nop
  } 
  while (Delay --);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1e5a      	subs	r2, r3, #1
 800379e:	60fa      	str	r2, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f9      	bne.n	8003798 <ETH_Delay+0x1c>
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000004 	.word	0x20000004
 80037b8:	10624dd3 	.word	0x10624dd3

080037bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	; 0x24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	e177      	b.n	8003ac8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037d8:	2201      	movs	r2, #1
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	f040 8166 	bne.w	8003ac2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d005      	beq.n	800380e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800380a:	2b02      	cmp	r3, #2
 800380c:	d130      	bne.n	8003870 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	2203      	movs	r2, #3
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003844:	2201      	movs	r2, #1
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 0201 	and.w	r2, r3, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	2b03      	cmp	r3, #3
 800387a:	d017      	beq.n	80038ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2203      	movs	r2, #3
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d123      	bne.n	8003900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	08da      	lsrs	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3208      	adds	r2, #8
 80038c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	220f      	movs	r2, #15
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	08da      	lsrs	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3208      	adds	r2, #8
 80038fa:	69b9      	ldr	r1, [r7, #24]
 80038fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 0203 	and.w	r2, r3, #3
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4313      	orrs	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80c0 	beq.w	8003ac2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	4b66      	ldr	r3, [pc, #408]	; (8003ae0 <HAL_GPIO_Init+0x324>)
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	4a65      	ldr	r2, [pc, #404]	; (8003ae0 <HAL_GPIO_Init+0x324>)
 800394c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003950:	6453      	str	r3, [r2, #68]	; 0x44
 8003952:	4b63      	ldr	r3, [pc, #396]	; (8003ae0 <HAL_GPIO_Init+0x324>)
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800395e:	4a61      	ldr	r2, [pc, #388]	; (8003ae4 <HAL_GPIO_Init+0x328>)
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	089b      	lsrs	r3, r3, #2
 8003964:	3302      	adds	r3, #2
 8003966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	220f      	movs	r2, #15
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a58      	ldr	r2, [pc, #352]	; (8003ae8 <HAL_GPIO_Init+0x32c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d037      	beq.n	80039fa <HAL_GPIO_Init+0x23e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a57      	ldr	r2, [pc, #348]	; (8003aec <HAL_GPIO_Init+0x330>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d031      	beq.n	80039f6 <HAL_GPIO_Init+0x23a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a56      	ldr	r2, [pc, #344]	; (8003af0 <HAL_GPIO_Init+0x334>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d02b      	beq.n	80039f2 <HAL_GPIO_Init+0x236>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a55      	ldr	r2, [pc, #340]	; (8003af4 <HAL_GPIO_Init+0x338>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d025      	beq.n	80039ee <HAL_GPIO_Init+0x232>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a54      	ldr	r2, [pc, #336]	; (8003af8 <HAL_GPIO_Init+0x33c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01f      	beq.n	80039ea <HAL_GPIO_Init+0x22e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a53      	ldr	r2, [pc, #332]	; (8003afc <HAL_GPIO_Init+0x340>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d019      	beq.n	80039e6 <HAL_GPIO_Init+0x22a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a52      	ldr	r2, [pc, #328]	; (8003b00 <HAL_GPIO_Init+0x344>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <HAL_GPIO_Init+0x226>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a51      	ldr	r2, [pc, #324]	; (8003b04 <HAL_GPIO_Init+0x348>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00d      	beq.n	80039de <HAL_GPIO_Init+0x222>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a50      	ldr	r2, [pc, #320]	; (8003b08 <HAL_GPIO_Init+0x34c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d007      	beq.n	80039da <HAL_GPIO_Init+0x21e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a4f      	ldr	r2, [pc, #316]	; (8003b0c <HAL_GPIO_Init+0x350>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d101      	bne.n	80039d6 <HAL_GPIO_Init+0x21a>
 80039d2:	2309      	movs	r3, #9
 80039d4:	e012      	b.n	80039fc <HAL_GPIO_Init+0x240>
 80039d6:	230a      	movs	r3, #10
 80039d8:	e010      	b.n	80039fc <HAL_GPIO_Init+0x240>
 80039da:	2308      	movs	r3, #8
 80039dc:	e00e      	b.n	80039fc <HAL_GPIO_Init+0x240>
 80039de:	2307      	movs	r3, #7
 80039e0:	e00c      	b.n	80039fc <HAL_GPIO_Init+0x240>
 80039e2:	2306      	movs	r3, #6
 80039e4:	e00a      	b.n	80039fc <HAL_GPIO_Init+0x240>
 80039e6:	2305      	movs	r3, #5
 80039e8:	e008      	b.n	80039fc <HAL_GPIO_Init+0x240>
 80039ea:	2304      	movs	r3, #4
 80039ec:	e006      	b.n	80039fc <HAL_GPIO_Init+0x240>
 80039ee:	2303      	movs	r3, #3
 80039f0:	e004      	b.n	80039fc <HAL_GPIO_Init+0x240>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e002      	b.n	80039fc <HAL_GPIO_Init+0x240>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <HAL_GPIO_Init+0x240>
 80039fa:	2300      	movs	r3, #0
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	f002 0203 	and.w	r2, r2, #3
 8003a02:	0092      	lsls	r2, r2, #2
 8003a04:	4093      	lsls	r3, r2
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a0c:	4935      	ldr	r1, [pc, #212]	; (8003ae4 <HAL_GPIO_Init+0x328>)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	3302      	adds	r3, #2
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a1a:	4b3d      	ldr	r3, [pc, #244]	; (8003b10 <HAL_GPIO_Init+0x354>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4013      	ands	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a3e:	4a34      	ldr	r2, [pc, #208]	; (8003b10 <HAL_GPIO_Init+0x354>)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a44:	4b32      	ldr	r3, [pc, #200]	; (8003b10 <HAL_GPIO_Init+0x354>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a68:	4a29      	ldr	r2, [pc, #164]	; (8003b10 <HAL_GPIO_Init+0x354>)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a6e:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <HAL_GPIO_Init+0x354>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a92:	4a1f      	ldr	r2, [pc, #124]	; (8003b10 <HAL_GPIO_Init+0x354>)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a98:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <HAL_GPIO_Init+0x354>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <HAL_GPIO_Init+0x354>)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	2b0f      	cmp	r3, #15
 8003acc:	f67f ae84 	bls.w	80037d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	3724      	adds	r7, #36	; 0x24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40013800 	.word	0x40013800
 8003ae8:	40020000 	.word	0x40020000
 8003aec:	40020400 	.word	0x40020400
 8003af0:	40020800 	.word	0x40020800
 8003af4:	40020c00 	.word	0x40020c00
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40021400 	.word	0x40021400
 8003b00:	40021800 	.word	0x40021800
 8003b04:	40021c00 	.word	0x40021c00
 8003b08:	40022000 	.word	0x40022000
 8003b0c:	40022400 	.word	0x40022400
 8003b10:	40013c00 	.word	0x40013c00

08003b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	807b      	strh	r3, [r7, #2]
 8003b20:	4613      	mov	r3, r2
 8003b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b24:	787b      	ldrb	r3, [r7, #1]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b2a:	887a      	ldrh	r2, [r7, #2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b30:	e003      	b.n	8003b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b32:	887b      	ldrh	r3, [r7, #2]
 8003b34:	041a      	lsls	r2, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	619a      	str	r2, [r3, #24]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e12b      	b.n	8003db2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd f976 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	; 0x24
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003baa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bac:	f002 fcc0 	bl	8006530 <HAL_RCC_GetPCLK1Freq>
 8003bb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4a81      	ldr	r2, [pc, #516]	; (8003dbc <HAL_I2C_Init+0x274>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d807      	bhi.n	8003bcc <HAL_I2C_Init+0x84>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4a80      	ldr	r2, [pc, #512]	; (8003dc0 <HAL_I2C_Init+0x278>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	bf94      	ite	ls
 8003bc4:	2301      	movls	r3, #1
 8003bc6:	2300      	movhi	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	e006      	b.n	8003bda <HAL_I2C_Init+0x92>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a7d      	ldr	r2, [pc, #500]	; (8003dc4 <HAL_I2C_Init+0x27c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	bf94      	ite	ls
 8003bd4:	2301      	movls	r3, #1
 8003bd6:	2300      	movhi	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e0e7      	b.n	8003db2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4a78      	ldr	r2, [pc, #480]	; (8003dc8 <HAL_I2C_Init+0x280>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	0c9b      	lsrs	r3, r3, #18
 8003bec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4a6a      	ldr	r2, [pc, #424]	; (8003dbc <HAL_I2C_Init+0x274>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d802      	bhi.n	8003c1c <HAL_I2C_Init+0xd4>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	e009      	b.n	8003c30 <HAL_I2C_Init+0xe8>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	4a69      	ldr	r2, [pc, #420]	; (8003dcc <HAL_I2C_Init+0x284>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	099b      	lsrs	r3, r3, #6
 8003c2e:	3301      	adds	r3, #1
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	495c      	ldr	r1, [pc, #368]	; (8003dbc <HAL_I2C_Init+0x274>)
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	d819      	bhi.n	8003c84 <HAL_I2C_Init+0x13c>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	1e59      	subs	r1, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c5e:	1c59      	adds	r1, r3, #1
 8003c60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c64:	400b      	ands	r3, r1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_I2C_Init+0x138>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1e59      	subs	r1, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7e:	e051      	b.n	8003d24 <HAL_I2C_Init+0x1dc>
 8003c80:	2304      	movs	r3, #4
 8003c82:	e04f      	b.n	8003d24 <HAL_I2C_Init+0x1dc>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d111      	bne.n	8003cb0 <HAL_I2C_Init+0x168>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1e58      	subs	r0, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	440b      	add	r3, r1
 8003c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	e012      	b.n	8003cd6 <HAL_I2C_Init+0x18e>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e58      	subs	r0, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	0099      	lsls	r1, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf0c      	ite	eq
 8003cd0:	2301      	moveq	r3, #1
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Init+0x196>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e022      	b.n	8003d24 <HAL_I2C_Init+0x1dc>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10e      	bne.n	8003d04 <HAL_I2C_Init+0x1bc>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1e58      	subs	r0, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6859      	ldr	r1, [r3, #4]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	440b      	add	r3, r1
 8003cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d02:	e00f      	b.n	8003d24 <HAL_I2C_Init+0x1dc>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1e58      	subs	r0, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6859      	ldr	r1, [r3, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	0099      	lsls	r1, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	6809      	ldr	r1, [r1, #0]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69da      	ldr	r2, [r3, #28]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6911      	ldr	r1, [r2, #16]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68d2      	ldr	r2, [r2, #12]
 8003d5e:	4311      	orrs	r1, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	000186a0 	.word	0x000186a0
 8003dc0:	001e847f 	.word	0x001e847f
 8003dc4:	003d08ff 	.word	0x003d08ff
 8003dc8:	431bde83 	.word	0x431bde83
 8003dcc:	10624dd3 	.word	0x10624dd3

08003dd0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	460b      	mov	r3, r1
 8003dde:	817b      	strh	r3, [r7, #10]
 8003de0:	4613      	mov	r3, r2
 8003de2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	f040 810d 	bne.w	8004010 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003df6:	4b89      	ldr	r3, [pc, #548]	; (800401c <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	08db      	lsrs	r3, r3, #3
 8003dfc:	4a88      	ldr	r2, [pc, #544]	; (8004020 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	0a1a      	lsrs	r2, r3, #8
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	009a      	lsls	r2, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d116      	bne.n	8003e4a <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f043 0220 	orr.w	r2, r3, #32
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0e3      	b.n	8004012 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d0db      	beq.n	8003e10 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_I2C_Master_Transmit_DMA+0x96>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e0d5      	b.n	8004012 <HAL_I2C_Master_Transmit_DMA+0x242>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d007      	beq.n	8003e8c <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2221      	movs	r2, #33	; 0x21
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2210      	movs	r2, #16
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	893a      	ldrh	r2, [r7, #8]
 8003ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a56      	ldr	r2, [pc, #344]	; (8004024 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8003ecc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003ece:	897a      	ldrh	r2, [r7, #10]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d07b      	beq.n	8003fd4 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d02a      	beq.n	8003f3a <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee8:	4a4f      	ldr	r2, [pc, #316]	; (8004028 <HAL_I2C_Master_Transmit_DMA+0x258>)
 8003eea:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef0:	4a4e      	ldr	r2, [pc, #312]	; (800402c <HAL_I2C_Master_Transmit_DMA+0x25c>)
 8003ef2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef8:	2200      	movs	r2, #0
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	2200      	movs	r2, #0
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	2200      	movs	r2, #0
 8003f0a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	2200      	movs	r2, #0
 8003f12:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3310      	adds	r3, #16
 8003f24:	461a      	mov	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2a:	f7fd ff45 	bl	8001db8 <HAL_DMA_Start_IT>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d139      	bne.n	8003fac <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8003f38:	e013      	b.n	8003f62 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e057      	b.n	8004012 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003f78:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f88:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f98:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e02f      	b.n	800400c <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	f043 0210 	orr.w	r2, r3, #16
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e01e      	b.n	8004012 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fe2:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff2:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800400a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000004 	.word	0x20000004
 8004020:	14f8b589 	.word	0x14f8b589
 8004024:	ffff0000 	.word	0xffff0000
 8004028:	0800574d 	.word	0x0800574d
 800402c:	080058f7 	.word	0x080058f7

08004030 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b20      	cmp	r3, #32
 8004048:	f040 80b8 	bne.w	80041bc <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_I2C_Slave_Receive_DMA+0x28>
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0b0      	b.n	80041be <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_I2C_Slave_Receive_DMA+0x3a>
 8004066:	2302      	movs	r3, #2
 8004068:	e0a9      	b.n	80041be <HAL_I2C_Slave_Receive_DMA+0x18e>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b01      	cmp	r3, #1
 800407e:	d007      	beq.n	8004090 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800409e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2222      	movs	r2, #34	; 0x22
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4a3e      	ldr	r2, [pc, #248]	; (80041c8 <HAL_I2C_Slave_Receive_DMA+0x198>)
 80040d0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d02a      	beq.n	8004130 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	4a3b      	ldr	r2, [pc, #236]	; (80041cc <HAL_I2C_Slave_Receive_DMA+0x19c>)
 80040e0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	4a3a      	ldr	r2, [pc, #232]	; (80041d0 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 80040e8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	2200      	movs	r2, #0
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	2200      	movs	r2, #0
 80040f8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	2200      	movs	r2, #0
 8004100:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	2200      	movs	r2, #0
 8004108:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3310      	adds	r3, #16
 8004114:	4619      	mov	r1, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004120:	f7fd fe4a 	bl	8001db8 <HAL_DMA_Start_IT>
 8004124:	4603      	mov	r3, r0
 8004126:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004128:	7dfb      	ldrb	r3, [r7, #23]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d132      	bne.n	8004194 <HAL_I2C_Slave_Receive_DMA+0x164>
 800412e:	e013      	b.n	8004158 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2228      	movs	r2, #40	; 0x28
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e032      	b.n	80041be <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004166:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800417e:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418e:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	e014      	b.n	80041be <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	f043 0210 	orr.w	r2, r3, #16
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 80041bc:	2302      	movs	r3, #2
  }
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	ffff0000 	.word	0xffff0000
 80041cc:	0800574d 	.word	0x0800574d
 80041d0:	080058f7 	.word	0x080058f7

080041d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b10      	cmp	r3, #16
 8004202:	d003      	beq.n	800420c <HAL_I2C_EV_IRQHandler+0x38>
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b40      	cmp	r3, #64	; 0x40
 8004208:	f040 80c1 	bne.w	800438e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10d      	bne.n	8004242 <HAL_I2C_EV_IRQHandler+0x6e>
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800422c:	d003      	beq.n	8004236 <HAL_I2C_EV_IRQHandler+0x62>
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004234:	d101      	bne.n	800423a <HAL_I2C_EV_IRQHandler+0x66>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <HAL_I2C_EV_IRQHandler+0x68>
 800423a:	2300      	movs	r3, #0
 800423c:	2b01      	cmp	r3, #1
 800423e:	f000 8132 	beq.w	80044a6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00c      	beq.n	8004266 <HAL_I2C_EV_IRQHandler+0x92>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	0a5b      	lsrs	r3, r3, #9
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d006      	beq.n	8004266 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f001 fc63 	bl	8005b24 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fcc8 	bl	8004bf4 <I2C_Master_SB>
 8004264:	e092      	b.n	800438c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	08db      	lsrs	r3, r3, #3
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_I2C_EV_IRQHandler+0xb2>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	0a5b      	lsrs	r3, r3, #9
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fd3e 	bl	8004d00 <I2C_Master_ADD10>
 8004284:	e082      	b.n	800438c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	085b      	lsrs	r3, r3, #1
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_I2C_EV_IRQHandler+0xd2>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	0a5b      	lsrs	r3, r3, #9
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fd58 	bl	8004d54 <I2C_Master_ADDR>
 80042a4:	e072      	b.n	800438c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	089b      	lsrs	r3, r3, #2
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d03b      	beq.n	800432a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c0:	f000 80f3 	beq.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	09db      	lsrs	r3, r3, #7
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00f      	beq.n	80042f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	0a9b      	lsrs	r3, r3, #10
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d009      	beq.n	80042f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	089b      	lsrs	r3, r3, #2
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d103      	bne.n	80042f0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f942 	bl	8004572 <I2C_MasterTransmit_TXE>
 80042ee:	e04d      	b.n	800438c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80d6 	beq.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	0a5b      	lsrs	r3, r3, #9
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80cf 	beq.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800430c:	7bbb      	ldrb	r3, [r7, #14]
 800430e:	2b21      	cmp	r3, #33	; 0x21
 8004310:	d103      	bne.n	800431a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f9c9 	bl	80046aa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004318:	e0c7      	b.n	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	f040 80c4 	bne.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fa37 	bl	8004796 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004328:	e0bf      	b.n	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004338:	f000 80b7 	beq.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	099b      	lsrs	r3, r3, #6
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00f      	beq.n	8004368 <HAL_I2C_EV_IRQHandler+0x194>
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	0a9b      	lsrs	r3, r3, #10
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d009      	beq.n	8004368 <HAL_I2C_EV_IRQHandler+0x194>
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	089b      	lsrs	r3, r3, #2
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d103      	bne.n	8004368 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 faac 	bl	80048be <I2C_MasterReceive_RXNE>
 8004366:	e011      	b.n	800438c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	089b      	lsrs	r3, r3, #2
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 809a 	beq.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	0a5b      	lsrs	r3, r3, #9
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8093 	beq.w	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fb4b 	bl	8004a20 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800438a:	e08e      	b.n	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
 800438c:	e08d      	b.n	80044aa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	d004      	beq.n	80043a0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	e007      	b.n	80043b0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d012      	beq.n	80043e2 <HAL_I2C_EV_IRQHandler+0x20e>
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	0a5b      	lsrs	r3, r3, #9
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00c      	beq.n	80043e2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80043d8:	69b9      	ldr	r1, [r7, #24]
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 ff09 	bl	80051f2 <I2C_Slave_ADDR>
 80043e0:	e066      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_I2C_EV_IRQHandler+0x22e>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	0a5b      	lsrs	r3, r3, #9
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 ff44 	bl	8005288 <I2C_Slave_STOPF>
 8004400:	e056      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004402:	7bbb      	ldrb	r3, [r7, #14]
 8004404:	2b21      	cmp	r3, #33	; 0x21
 8004406:	d002      	beq.n	800440e <HAL_I2C_EV_IRQHandler+0x23a>
 8004408:	7bbb      	ldrb	r3, [r7, #14]
 800440a:	2b29      	cmp	r3, #41	; 0x29
 800440c:	d125      	bne.n	800445a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	09db      	lsrs	r3, r3, #7
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00f      	beq.n	800443a <HAL_I2C_EV_IRQHandler+0x266>
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	0a9b      	lsrs	r3, r3, #10
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <HAL_I2C_EV_IRQHandler+0x266>
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	089b      	lsrs	r3, r3, #2
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d103      	bne.n	800443a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fe1f 	bl	8005076 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004438:	e039      	b.n	80044ae <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d033      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0x2da>
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	0a5b      	lsrs	r3, r3, #9
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d02d      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fe4c 	bl	80050f0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004458:	e029      	b.n	80044ae <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	099b      	lsrs	r3, r3, #6
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00f      	beq.n	8004486 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	0a9b      	lsrs	r3, r3, #10
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fe57 	bl	8005132 <I2C_SlaveReceive_RXNE>
 8004484:	e014      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	089b      	lsrs	r3, r3, #2
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00e      	beq.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	0a5b      	lsrs	r3, r3, #9
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d008      	beq.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fe85 	bl	80051ae <I2C_SlaveReceive_BTF>
 80044a4:	e004      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80044a6:	bf00      	nop
 80044a8:	e002      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044aa:	bf00      	nop
 80044ac:	e000      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	460b      	mov	r3, r1
 80044fc:	70fb      	strb	r3, [r7, #3]
 80044fe:	4613      	mov	r3, r2
 8004500:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004588:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	d150      	bne.n	800463a <I2C_MasterTransmit_TXE+0xc8>
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	2b21      	cmp	r3, #33	; 0x21
 800459c:	d14d      	bne.n	800463a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d01d      	beq.n	80045e0 <I2C_MasterTransmit_TXE+0x6e>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d01a      	beq.n	80045e0 <I2C_MasterTransmit_TXE+0x6e>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b0:	d016      	beq.n	80045e0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045c0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2211      	movs	r2, #17
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff6c 	bl	80044b6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045de:	e060      	b.n	80046a2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045ee:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045fe:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	d107      	bne.n	800462a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ff7d 	bl	8004522 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004628:	e03b      	b.n	80046a2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff ff3f 	bl	80044b6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004638:	e033      	b.n	80046a2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	2b21      	cmp	r3, #33	; 0x21
 800463e:	d005      	beq.n	800464c <I2C_MasterTransmit_TXE+0xda>
 8004640:	7bbb      	ldrb	r3, [r7, #14]
 8004642:	2b40      	cmp	r3, #64	; 0x40
 8004644:	d12d      	bne.n	80046a2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	2b22      	cmp	r3, #34	; 0x22
 800464a:	d12a      	bne.n	80046a2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d108      	bne.n	8004668 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004664:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004666:	e01c      	b.n	80046a2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d103      	bne.n	800467c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f88e 	bl	8004796 <I2C_MemoryTransmit_TXE_BTF>
}
 800467a:	e012      	b.n	80046a2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	781a      	ldrb	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046a0:	e7ff      	b.n	80046a2 <I2C_MasterTransmit_TXE+0x130>
 80046a2:	bf00      	nop
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b21      	cmp	r3, #33	; 0x21
 80046c2:	d164      	bne.n	800478e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d012      	beq.n	80046f4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	781a      	ldrb	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80046f2:	e04c      	b.n	800478e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d01d      	beq.n	8004736 <I2C_MasterTransmit_BTF+0x8c>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d01a      	beq.n	8004736 <I2C_MasterTransmit_BTF+0x8c>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004706:	d016      	beq.n	8004736 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004716:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2211      	movs	r2, #17
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff fec1 	bl	80044b6 <HAL_I2C_MasterTxCpltCallback>
}
 8004734:	e02b      	b.n	800478e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004744:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004754:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d107      	bne.n	8004780 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff fed2 	bl	8004522 <HAL_I2C_MemTxCpltCallback>
}
 800477e:	e006      	b.n	800478e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff fe94 	bl	80044b6 <HAL_I2C_MasterTxCpltCallback>
}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d11d      	bne.n	80047ea <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d10b      	bne.n	80047ce <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c6:	1c9a      	adds	r2, r3, #2
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80047cc:	e073      	b.n	80048b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	121b      	asrs	r3, r3, #8
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047e8:	e065      	b.n	80048b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d10b      	bne.n	800480a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004808:	e055      	b.n	80048b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480e:	2b02      	cmp	r3, #2
 8004810:	d151      	bne.n	80048b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	2b22      	cmp	r3, #34	; 0x22
 8004816:	d10d      	bne.n	8004834 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004826:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004832:	e040      	b.n	80048b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d015      	beq.n	800486a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b21      	cmp	r3, #33	; 0x21
 8004842:	d112      	bne.n	800486a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004868:	e025      	b.n	80048b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d120      	bne.n	80048b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	2b21      	cmp	r3, #33	; 0x21
 8004878:	d11d      	bne.n	80048b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004888:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004898:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff fe36 	bl	8004522 <HAL_I2C_MemTxCpltCallback>
}
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b22      	cmp	r3, #34	; 0x22
 80048d0:	f040 80a2 	bne.w	8004a18 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d921      	bls.n	8004926 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b03      	cmp	r3, #3
 8004910:	f040 8082 	bne.w	8004a18 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004922:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004924:	e078      	b.n	8004a18 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	2b02      	cmp	r3, #2
 800492c:	d074      	beq.n	8004a18 <I2C_MasterReceive_RXNE+0x15a>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d002      	beq.n	800493a <I2C_MasterReceive_RXNE+0x7c>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d16e      	bne.n	8004a18 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f001 f8c0 	bl	8005ac0 <I2C_WaitOnSTOPRequestThroughIT>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d142      	bne.n	80049cc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004954:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004964:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b40      	cmp	r3, #64	; 0x40
 800499e:	d10a      	bne.n	80049b6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff fdc1 	bl	8004536 <HAL_I2C_MemRxCpltCallback>
}
 80049b4:	e030      	b.n	8004a18 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2212      	movs	r2, #18
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff fd80 	bl	80044ca <HAL_I2C_MasterRxCpltCallback>
}
 80049ca:	e025      	b.n	8004a18 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fd99 	bl	800454a <HAL_I2C_ErrorCallback>
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d11b      	bne.n	8004a70 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a46:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004a6e:	e0bd      	b.n	8004bec <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d129      	bne.n	8004ace <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a88:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d00a      	beq.n	8004aa6 <I2C_MasterReceive_BTF+0x86>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d007      	beq.n	8004aa6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004acc:	e08e      	b.n	8004bec <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d176      	bne.n	8004bc6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d002      	beq.n	8004ae4 <I2C_MasterReceive_BTF+0xc4>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d108      	bne.n	8004af6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	e019      	b.n	8004b2a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d002      	beq.n	8004b02 <I2C_MasterReceive_BTF+0xe2>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d108      	bne.n	8004b14 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e00a      	b.n	8004b2a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d007      	beq.n	8004b2a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b28:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b84:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d10a      	bne.n	8004bb0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff fcc4 	bl	8004536 <HAL_I2C_MemRxCpltCallback>
}
 8004bae:	e01d      	b.n	8004bec <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2212      	movs	r2, #18
 8004bbc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff fc83 	bl	80044ca <HAL_I2C_MasterRxCpltCallback>
}
 8004bc4:	e012      	b.n	8004bec <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d117      	bne.n	8004c38 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d109      	bne.n	8004c24 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c20:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004c22:	e067      	b.n	8004cf4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	611a      	str	r2, [r3, #16]
}
 8004c36:	e05d      	b.n	8004cf4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c40:	d133      	bne.n	8004caa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b21      	cmp	r3, #33	; 0x21
 8004c4c:	d109      	bne.n	8004c62 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c5e:	611a      	str	r2, [r3, #16]
 8004c60:	e008      	b.n	8004c74 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <I2C_Master_SB+0x92>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d108      	bne.n	8004c98 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d032      	beq.n	8004cf4 <I2C_Master_SB+0x100>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d02d      	beq.n	8004cf4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca6:	605a      	str	r2, [r3, #4]
}
 8004ca8:	e024      	b.n	8004cf4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10e      	bne.n	8004cd0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	11db      	asrs	r3, r3, #7
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	f003 0306 	and.w	r3, r3, #6
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f063 030f 	orn	r3, r3, #15
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	611a      	str	r2, [r3, #16]
}
 8004cce:	e011      	b.n	8004cf4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d10d      	bne.n	8004cf4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	11db      	asrs	r3, r3, #7
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f003 0306 	and.w	r3, r3, #6
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f063 030e 	orn	r3, r3, #14
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	611a      	str	r2, [r3, #16]
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d004      	beq.n	8004d26 <I2C_Master_ADD10+0x26>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d108      	bne.n	8004d38 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00c      	beq.n	8004d48 <I2C_Master_ADD10+0x48>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d46:	605a      	str	r2, [r3, #4]
  }
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b091      	sub	sp, #68	; 0x44
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b22      	cmp	r3, #34	; 0x22
 8004d7c:	f040 8169 	bne.w	8005052 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10f      	bne.n	8004da8 <I2C_Master_ADDR+0x54>
 8004d88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	d10b      	bne.n	8004da8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d90:	2300      	movs	r3, #0
 8004d92:	633b      	str	r3, [r7, #48]	; 0x30
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	633b      	str	r3, [r7, #48]	; 0x30
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	e160      	b.n	800506a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d11d      	bne.n	8004dec <I2C_Master_ADDR+0x98>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004db8:	d118      	bne.n	8004dec <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dde:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	651a      	str	r2, [r3, #80]	; 0x50
 8004dea:	e13e      	b.n	800506a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d113      	bne.n	8004e1e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df6:	2300      	movs	r3, #0
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	e115      	b.n	800504a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	f040 808a 	bne.w	8004f3e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e30:	d137      	bne.n	8004ea2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e40:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e50:	d113      	bne.n	8004e7a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e60:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e62:	2300      	movs	r3, #0
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	e0e7      	b.n	800504a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	623b      	str	r3, [r7, #32]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	623b      	str	r3, [r7, #32]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	623b      	str	r3, [r7, #32]
 8004e8e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e0d3      	b.n	800504a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d02e      	beq.n	8004f06 <I2C_Master_ADDR+0x1b2>
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	d02b      	beq.n	8004f06 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	2b12      	cmp	r3, #18
 8004eb2:	d102      	bne.n	8004eba <I2C_Master_ADDR+0x166>
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d125      	bne.n	8004f06 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d00e      	beq.n	8004ede <I2C_Master_ADDR+0x18a>
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d00b      	beq.n	8004ede <I2C_Master_ADDR+0x18a>
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	2b10      	cmp	r3, #16
 8004eca:	d008      	beq.n	8004ede <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	e007      	b.n	8004eee <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eec:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	e0a1      	b.n	800504a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f14:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f16:	2300      	movs	r3, #0
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	e085      	b.n	800504a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d14d      	bne.n	8004fe4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d016      	beq.n	8004f7c <I2C_Master_ADDR+0x228>
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d013      	beq.n	8004f7c <I2C_Master_ADDR+0x228>
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d010      	beq.n	8004f7c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f68:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	e007      	b.n	8004f8c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f8a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f9a:	d117      	bne.n	8004fcc <I2C_Master_ADDR+0x278>
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fa2:	d00b      	beq.n	8004fbc <I2C_Master_ADDR+0x268>
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d008      	beq.n	8004fbc <I2C_Master_ADDR+0x268>
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d005      	beq.n	8004fbc <I2C_Master_ADDR+0x268>
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d002      	beq.n	8004fbc <I2C_Master_ADDR+0x268>
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d107      	bne.n	8004fcc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	e032      	b.n	800504a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ff2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005002:	d117      	bne.n	8005034 <I2C_Master_ADDR+0x2e0>
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800500a:	d00b      	beq.n	8005024 <I2C_Master_ADDR+0x2d0>
 800500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500e:	2b01      	cmp	r3, #1
 8005010:	d008      	beq.n	8005024 <I2C_Master_ADDR+0x2d0>
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	2b08      	cmp	r3, #8
 8005016:	d005      	beq.n	8005024 <I2C_Master_ADDR+0x2d0>
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	2b10      	cmp	r3, #16
 800501c:	d002      	beq.n	8005024 <I2C_Master_ADDR+0x2d0>
 800501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005020:	2b20      	cmp	r3, #32
 8005022:	d107      	bne.n	8005034 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005032:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005034:	2300      	movs	r3, #0
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	613b      	str	r3, [r7, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005050:	e00b      	b.n	800506a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	68fb      	ldr	r3, [r7, #12]
}
 8005068:	e7ff      	b.n	800506a <I2C_Master_ADDR+0x316>
 800506a:	bf00      	nop
 800506c:	3744      	adds	r7, #68	; 0x44
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005084:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d02b      	beq.n	80050e8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	781a      	ldrb	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d114      	bne.n	80050e8 <I2C_SlaveTransmit_TXE+0x72>
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	2b29      	cmp	r3, #41	; 0x29
 80050c2:	d111      	bne.n	80050e8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2221      	movs	r2, #33	; 0x21
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2228      	movs	r2, #40	; 0x28
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff f9fb 	bl	80044de <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80050e8:	bf00      	nop
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d011      	beq.n	8005126 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	781a      	ldrb	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005140:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d02c      	beq.n	80051a6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d114      	bne.n	80051a6 <I2C_SlaveReceive_RXNE+0x74>
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	2b2a      	cmp	r3, #42	; 0x2a
 8005180:	d111      	bne.n	80051a6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005190:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2222      	movs	r2, #34	; 0x22
 8005196:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2228      	movs	r2, #40	; 0x28
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7fb fa07 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d012      	beq.n	80051e6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80051fc:	2300      	movs	r3, #0
 80051fe:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800520c:	2b28      	cmp	r3, #40	; 0x28
 800520e:	d127      	bne.n	8005260 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	089b      	lsrs	r3, r3, #2
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	09db      	lsrs	r3, r3, #7
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	81bb      	strh	r3, [r7, #12]
 8005242:	e002      	b.n	800524a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005252:	89ba      	ldrh	r2, [r7, #12]
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	4619      	mov	r1, r3
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff f94a 	bl	80044f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800525e:	e00e      	b.n	800527e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005260:	2300      	movs	r3, #0
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	60bb      	str	r3, [r7, #8]
 8005274:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800527e:	bf00      	nop
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005296:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052a6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80052a8:	2300      	movs	r3, #0
 80052aa:	60bb      	str	r3, [r7, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e4:	d172      	bne.n	80053cc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	2b22      	cmp	r3, #34	; 0x22
 80052ea:	d002      	beq.n	80052f2 <I2C_Slave_STOPF+0x6a>
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
 80052ee:	2b2a      	cmp	r3, #42	; 0x2a
 80052f0:	d135      	bne.n	800535e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f043 0204 	orr.w	r2, r3, #4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005324:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	4618      	mov	r0, r3
 800532c:	f7fc ffb8 	bl	80022a0 <HAL_DMA_GetState>
 8005330:	4603      	mov	r3, r0
 8005332:	2b01      	cmp	r3, #1
 8005334:	d049      	beq.n	80053ca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	4a69      	ldr	r2, [pc, #420]	; (80054e0 <I2C_Slave_STOPF+0x258>)
 800533c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	4618      	mov	r0, r3
 8005344:	f7fc fe00 	bl	8001f48 <HAL_DMA_Abort_IT>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d03d      	beq.n	80053ca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005358:	4610      	mov	r0, r2
 800535a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800535c:	e035      	b.n	80053ca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	b29a      	uxth	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f043 0204 	orr.w	r2, r3, #4
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005390:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005396:	4618      	mov	r0, r3
 8005398:	f7fc ff82 	bl	80022a0 <HAL_DMA_GetState>
 800539c:	4603      	mov	r3, r0
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d014      	beq.n	80053cc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a6:	4a4e      	ldr	r2, [pc, #312]	; (80054e0 <I2C_Slave_STOPF+0x258>)
 80053a8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fc fdca 	bl	8001f48 <HAL_DMA_Abort_IT>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053c4:	4610      	mov	r0, r2
 80053c6:	4798      	blx	r3
 80053c8:	e000      	b.n	80053cc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053ca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d03e      	beq.n	8005454 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d112      	bne.n	800540a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005400:	b29b      	uxth	r3, r3
 8005402:	3b01      	subs	r3, #1
 8005404:	b29a      	uxth	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	d112      	bne.n	800543e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	f043 0204 	orr.w	r2, r3, #4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f843 	bl	80054e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005462:	e039      	b.n	80054d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	2b2a      	cmp	r3, #42	; 0x2a
 8005468:	d109      	bne.n	800547e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2228      	movs	r2, #40	; 0x28
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fb f89b 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b28      	cmp	r3, #40	; 0x28
 8005488:	d111      	bne.n	80054ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a15      	ldr	r2, [pc, #84]	; (80054e4 <I2C_Slave_STOPF+0x25c>)
 800548e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff f831 	bl	800450e <HAL_I2C_ListenCpltCallback>
}
 80054ac:	e014      	b.n	80054d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	2b22      	cmp	r3, #34	; 0x22
 80054b4:	d002      	beq.n	80054bc <I2C_Slave_STOPF+0x234>
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
 80054b8:	2b22      	cmp	r3, #34	; 0x22
 80054ba:	d10d      	bne.n	80054d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fb f86e 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80054d8:	bf00      	nop
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	08005971 	.word	0x08005971
 80054e4:	ffff0000 	.word	0xffff0000

080054e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005500:	7bbb      	ldrb	r3, [r7, #14]
 8005502:	2b10      	cmp	r3, #16
 8005504:	d002      	beq.n	800550c <I2C_ITError+0x24>
 8005506:	7bbb      	ldrb	r3, [r7, #14]
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d10a      	bne.n	8005522 <I2C_ITError+0x3a>
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b22      	cmp	r3, #34	; 0x22
 8005510:	d107      	bne.n	8005522 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005520:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005528:	2b28      	cmp	r3, #40	; 0x28
 800552a:	d107      	bne.n	800553c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2228      	movs	r2, #40	; 0x28
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800553a:	e015      	b.n	8005568 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800554a:	d00a      	beq.n	8005562 <I2C_ITError+0x7a>
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	2b60      	cmp	r3, #96	; 0x60
 8005550:	d007      	beq.n	8005562 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005576:	d162      	bne.n	800563e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005586:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b01      	cmp	r3, #1
 8005594:	d020      	beq.n	80055d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	4a6a      	ldr	r2, [pc, #424]	; (8005744 <I2C_ITError+0x25c>)
 800559c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fc fcd0 	bl	8001f48 <HAL_DMA_Abort_IT>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8089 	beq.w	80056c2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055d2:	4610      	mov	r0, r2
 80055d4:	4798      	blx	r3
 80055d6:	e074      	b.n	80056c2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055dc:	4a59      	ldr	r2, [pc, #356]	; (8005744 <I2C_ITError+0x25c>)
 80055de:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fc fcaf 	bl	8001f48 <HAL_DMA_Abort_IT>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d068      	beq.n	80056c2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d10b      	bne.n	8005616 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0201 	bic.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005638:	4610      	mov	r0, r2
 800563a:	4798      	blx	r3
 800563c:	e041      	b.n	80056c2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b60      	cmp	r3, #96	; 0x60
 8005648:	d125      	bne.n	8005696 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005662:	2b40      	cmp	r3, #64	; 0x40
 8005664:	d10b      	bne.n	800567e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0201 	bic.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fe ff65 	bl	800455e <HAL_I2C_AbortCpltCallback>
 8005694:	e015      	b.n	80056c2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a0:	2b40      	cmp	r3, #64	; 0x40
 80056a2:	d10b      	bne.n	80056bc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7fe ff44 	bl	800454a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10e      	bne.n	80056f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d109      	bne.n	80056f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d104      	bne.n	80056f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d007      	beq.n	8005700 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056fe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005706:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b04      	cmp	r3, #4
 8005712:	d113      	bne.n	800573c <I2C_ITError+0x254>
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	2b28      	cmp	r3, #40	; 0x28
 8005718:	d110      	bne.n	800573c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a0a      	ldr	r2, [pc, #40]	; (8005748 <I2C_ITError+0x260>)
 800571e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fe fee9 	bl	800450e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	08005971 	.word	0x08005971
 8005748:	ffff0000 	.word	0xffff0000

0800574c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005760:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005768:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800577e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578c:	2200      	movs	r2, #0
 800578e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	2200      	movs	r2, #0
 800579e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80057a0:	7cfb      	ldrb	r3, [r7, #19]
 80057a2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80057a6:	2b21      	cmp	r3, #33	; 0x21
 80057a8:	d007      	beq.n	80057ba <I2C_DMAXferCplt+0x6e>
 80057aa:	7cfb      	ldrb	r3, [r7, #19]
 80057ac:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80057b0:	2b22      	cmp	r3, #34	; 0x22
 80057b2:	d131      	bne.n	8005818 <I2C_DMAXferCplt+0xcc>
 80057b4:	7cbb      	ldrb	r3, [r7, #18]
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d12e      	bne.n	8005818 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057c8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2200      	movs	r2, #0
 80057ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80057d0:	7cfb      	ldrb	r3, [r7, #19]
 80057d2:	2b29      	cmp	r3, #41	; 0x29
 80057d4:	d10a      	bne.n	80057ec <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2221      	movs	r2, #33	; 0x21
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2228      	movs	r2, #40	; 0x28
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057e4:	6978      	ldr	r0, [r7, #20]
 80057e6:	f7fe fe7a 	bl	80044de <HAL_I2C_SlaveTxCpltCallback>
 80057ea:	e00c      	b.n	8005806 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80057ec:	7cfb      	ldrb	r3, [r7, #19]
 80057ee:	2b2a      	cmp	r3, #42	; 0x2a
 80057f0:	d109      	bne.n	8005806 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2222      	movs	r2, #34	; 0x22
 80057f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2228      	movs	r2, #40	; 0x28
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005800:	6978      	ldr	r0, [r7, #20]
 8005802:	f7fa fed7 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005814:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005816:	e06a      	b.n	80058ee <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d064      	beq.n	80058ee <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b01      	cmp	r3, #1
 800582c:	d107      	bne.n	800583e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800583c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800584c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005854:	d009      	beq.n	800586a <I2C_DMAXferCplt+0x11e>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d006      	beq.n	800586a <I2C_DMAXferCplt+0x11e>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005862:	d002      	beq.n	800586a <I2C_DMAXferCplt+0x11e>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b20      	cmp	r3, #32
 8005868:	d107      	bne.n	800587a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005878:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005888:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005898:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2200      	movs	r2, #0
 800589e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80058a8:	6978      	ldr	r0, [r7, #20]
 80058aa:	f7fe fe4e 	bl	800454a <HAL_I2C_ErrorCallback>
}
 80058ae:	e01e      	b.n	80058ee <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d10a      	bne.n	80058da <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2200      	movs	r2, #0
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80058d2:	6978      	ldr	r0, [r7, #20]
 80058d4:	f7fe fe2f 	bl	8004536 <HAL_I2C_MemRxCpltCallback>
}
 80058d8:	e009      	b.n	80058ee <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2212      	movs	r2, #18
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80058e8:	6978      	ldr	r0, [r7, #20]
 80058ea:	f7fe fdee 	bl	80044ca <HAL_I2C_MasterRxCpltCallback>
}
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005910:	2200      	movs	r2, #0
 8005912:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	2200      	movs	r2, #0
 8005922:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fc fcc9 	bl	80022bc <HAL_DMA_GetError>
 800592a:	4603      	mov	r3, r0
 800592c:	2b02      	cmp	r3, #2
 800592e:	d01b      	beq.n	8005968 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f043 0210 	orr.w	r2, r3, #16
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f7fe fdf1 	bl	800454a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005968:	bf00      	nop
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800598a:	4b4b      	ldr	r3, [pc, #300]	; (8005ab8 <I2C_DMAAbort+0x148>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	08db      	lsrs	r3, r3, #3
 8005990:	4a4a      	ldr	r2, [pc, #296]	; (8005abc <I2C_DMAAbort+0x14c>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	0a1a      	lsrs	r2, r3, #8
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	00da      	lsls	r2, r3, #3
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f043 0220 	orr.w	r2, r3, #32
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80059b6:	e00a      	b.n	80059ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059cc:	d0ea      	beq.n	80059a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059da:	2200      	movs	r2, #0
 80059dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	2200      	movs	r2, #0
 80059ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2200      	movs	r2, #0
 8005a02:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a10:	2200      	movs	r2, #0
 8005a12:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	2200      	movs	r2, #0
 8005a22:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0201 	bic.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b60      	cmp	r3, #96	; 0x60
 8005a3e:	d10e      	bne.n	8005a5e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2200      	movs	r2, #0
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a56:	6978      	ldr	r0, [r7, #20]
 8005a58:	f7fe fd81 	bl	800455e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a5c:	e027      	b.n	8005aae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a5e:	7cfb      	ldrb	r3, [r7, #19]
 8005a60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a64:	2b28      	cmp	r3, #40	; 0x28
 8005a66:	d117      	bne.n	8005a98 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2228      	movs	r2, #40	; 0x28
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a96:	e007      	b.n	8005aa8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005aa8:	6978      	ldr	r0, [r7, #20]
 8005aaa:	f7fe fd4e 	bl	800454a <HAL_I2C_ErrorCallback>
}
 8005aae:	bf00      	nop
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20000004 	.word	0x20000004
 8005abc:	14f8b589 	.word	0x14f8b589

08005ac0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005acc:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	08db      	lsrs	r3, r3, #3
 8005ad2:	4a13      	ldr	r2, [pc, #76]	; (8005b20 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad8:	0a1a      	lsrs	r2, r3, #8
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d107      	bne.n	8005afe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e008      	b.n	8005b10 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b0c:	d0e9      	beq.n	8005ae2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	20000004 	.word	0x20000004
 8005b20:	14f8b589 	.word	0x14f8b589

08005b24 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b34:	d103      	bne.n	8005b3e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b3c:	e007      	b.n	8005b4e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b46:	d102      	bne.n	8005b4e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2208      	movs	r2, #8
 8005b4c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d129      	bne.n	8005bc4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2224      	movs	r2, #36	; 0x24
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0201 	bic.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0210 	bic.w	r2, r2, #16
 8005b96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0201 	orr.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e000      	b.n	8005bc6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005bc4:	2302      	movs	r3, #2
  }
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d12a      	bne.n	8005c42 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2224      	movs	r2, #36	; 0x24
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0201 	bic.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005c0c:	89fb      	ldrh	r3, [r7, #14]
 8005c0e:	f023 030f 	bic.w	r3, r3, #15
 8005c12:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	89fb      	ldrh	r3, [r7, #14]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	89fa      	ldrh	r2, [r7, #14]
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0201 	orr.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e000      	b.n	8005c44 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
  }
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e267      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d075      	beq.n	8005d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c6e:	4b88      	ldr	r3, [pc, #544]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 030c 	and.w	r3, r3, #12
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d00c      	beq.n	8005c94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c7a:	4b85      	ldr	r3, [pc, #532]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d112      	bne.n	8005cac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c86:	4b82      	ldr	r3, [pc, #520]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c92:	d10b      	bne.n	8005cac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c94:	4b7e      	ldr	r3, [pc, #504]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d05b      	beq.n	8005d58 <HAL_RCC_OscConfig+0x108>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d157      	bne.n	8005d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e242      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb4:	d106      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x74>
 8005cb6:	4b76      	ldr	r3, [pc, #472]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a75      	ldr	r2, [pc, #468]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	e01d      	b.n	8005d00 <HAL_RCC_OscConfig+0xb0>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ccc:	d10c      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x98>
 8005cce:	4b70      	ldr	r3, [pc, #448]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a6f      	ldr	r2, [pc, #444]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	4b6d      	ldr	r3, [pc, #436]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a6c      	ldr	r2, [pc, #432]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e00b      	b.n	8005d00 <HAL_RCC_OscConfig+0xb0>
 8005ce8:	4b69      	ldr	r3, [pc, #420]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a68      	ldr	r2, [pc, #416]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	4b66      	ldr	r3, [pc, #408]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a65      	ldr	r2, [pc, #404]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d013      	beq.n	8005d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d08:	f7fb fe66 	bl	80019d8 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d10:	f7fb fe62 	bl	80019d8 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b64      	cmp	r3, #100	; 0x64
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e207      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d22:	4b5b      	ldr	r3, [pc, #364]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0f0      	beq.n	8005d10 <HAL_RCC_OscConfig+0xc0>
 8005d2e:	e014      	b.n	8005d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d30:	f7fb fe52 	bl	80019d8 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d38:	f7fb fe4e 	bl	80019d8 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	; 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e1f3      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d4a:	4b51      	ldr	r3, [pc, #324]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCC_OscConfig+0xe8>
 8005d56:	e000      	b.n	8005d5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d063      	beq.n	8005e2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d66:	4b4a      	ldr	r3, [pc, #296]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 030c 	and.w	r3, r3, #12
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d72:	4b47      	ldr	r3, [pc, #284]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d11c      	bne.n	8005db8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d7e:	4b44      	ldr	r3, [pc, #272]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d116      	bne.n	8005db8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d8a:	4b41      	ldr	r3, [pc, #260]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_RCC_OscConfig+0x152>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d001      	beq.n	8005da2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e1c7      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da2:	4b3b      	ldr	r3, [pc, #236]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4937      	ldr	r1, [pc, #220]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005db6:	e03a      	b.n	8005e2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d020      	beq.n	8005e02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dc0:	4b34      	ldr	r3, [pc, #208]	; (8005e94 <HAL_RCC_OscConfig+0x244>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc6:	f7fb fe07 	bl	80019d8 <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dce:	f7fb fe03 	bl	80019d8 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e1a8      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de0:	4b2b      	ldr	r3, [pc, #172]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0f0      	beq.n	8005dce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dec:	4b28      	ldr	r3, [pc, #160]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4925      	ldr	r1, [pc, #148]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	600b      	str	r3, [r1, #0]
 8005e00:	e015      	b.n	8005e2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e02:	4b24      	ldr	r3, [pc, #144]	; (8005e94 <HAL_RCC_OscConfig+0x244>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e08:	f7fb fde6 	bl	80019d8 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e10:	f7fb fde2 	bl	80019d8 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e187      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e22:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d036      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d016      	beq.n	8005e70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e42:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <HAL_RCC_OscConfig+0x248>)
 8005e44:	2201      	movs	r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e48:	f7fb fdc6 	bl	80019d8 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e50:	f7fb fdc2 	bl	80019d8 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e167      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e62:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <HAL_RCC_OscConfig+0x240>)
 8005e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCC_OscConfig+0x200>
 8005e6e:	e01b      	b.n	8005ea8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e70:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <HAL_RCC_OscConfig+0x248>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e76:	f7fb fdaf 	bl	80019d8 <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e7c:	e00e      	b.n	8005e9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e7e:	f7fb fdab 	bl	80019d8 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d907      	bls.n	8005e9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e150      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
 8005e90:	40023800 	.word	0x40023800
 8005e94:	42470000 	.word	0x42470000
 8005e98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e9c:	4b88      	ldr	r3, [pc, #544]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1ea      	bne.n	8005e7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8097 	beq.w	8005fe4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eba:	4b81      	ldr	r3, [pc, #516]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10f      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	4b7d      	ldr	r3, [pc, #500]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	4a7c      	ldr	r2, [pc, #496]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ed6:	4b7a      	ldr	r3, [pc, #488]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ede:	60bb      	str	r3, [r7, #8]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee6:	4b77      	ldr	r3, [pc, #476]	; (80060c4 <HAL_RCC_OscConfig+0x474>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d118      	bne.n	8005f24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ef2:	4b74      	ldr	r3, [pc, #464]	; (80060c4 <HAL_RCC_OscConfig+0x474>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a73      	ldr	r2, [pc, #460]	; (80060c4 <HAL_RCC_OscConfig+0x474>)
 8005ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005efe:	f7fb fd6b 	bl	80019d8 <HAL_GetTick>
 8005f02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f04:	e008      	b.n	8005f18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f06:	f7fb fd67 	bl	80019d8 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e10c      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f18:	4b6a      	ldr	r3, [pc, #424]	; (80060c4 <HAL_RCC_OscConfig+0x474>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f0      	beq.n	8005f06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d106      	bne.n	8005f3a <HAL_RCC_OscConfig+0x2ea>
 8005f2c:	4b64      	ldr	r3, [pc, #400]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f30:	4a63      	ldr	r2, [pc, #396]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005f32:	f043 0301 	orr.w	r3, r3, #1
 8005f36:	6713      	str	r3, [r2, #112]	; 0x70
 8005f38:	e01c      	b.n	8005f74 <HAL_RCC_OscConfig+0x324>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	2b05      	cmp	r3, #5
 8005f40:	d10c      	bne.n	8005f5c <HAL_RCC_OscConfig+0x30c>
 8005f42:	4b5f      	ldr	r3, [pc, #380]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f46:	4a5e      	ldr	r2, [pc, #376]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005f48:	f043 0304 	orr.w	r3, r3, #4
 8005f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4e:	4b5c      	ldr	r3, [pc, #368]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f52:	4a5b      	ldr	r2, [pc, #364]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	6713      	str	r3, [r2, #112]	; 0x70
 8005f5a:	e00b      	b.n	8005f74 <HAL_RCC_OscConfig+0x324>
 8005f5c:	4b58      	ldr	r3, [pc, #352]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f60:	4a57      	ldr	r2, [pc, #348]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005f62:	f023 0301 	bic.w	r3, r3, #1
 8005f66:	6713      	str	r3, [r2, #112]	; 0x70
 8005f68:	4b55      	ldr	r3, [pc, #340]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6c:	4a54      	ldr	r2, [pc, #336]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005f6e:	f023 0304 	bic.w	r3, r3, #4
 8005f72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d015      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7c:	f7fb fd2c 	bl	80019d8 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f82:	e00a      	b.n	8005f9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f84:	f7fb fd28 	bl	80019d8 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e0cb      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f9a:	4b49      	ldr	r3, [pc, #292]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0ee      	beq.n	8005f84 <HAL_RCC_OscConfig+0x334>
 8005fa6:	e014      	b.n	8005fd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fa8:	f7fb fd16 	bl	80019d8 <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fae:	e00a      	b.n	8005fc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fb0:	f7fb fd12 	bl	80019d8 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e0b5      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc6:	4b3e      	ldr	r3, [pc, #248]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1ee      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d105      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd8:	4b39      	ldr	r3, [pc, #228]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	4a38      	ldr	r2, [pc, #224]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 80a1 	beq.w	8006130 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fee:	4b34      	ldr	r3, [pc, #208]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f003 030c 	and.w	r3, r3, #12
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d05c      	beq.n	80060b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d141      	bne.n	8006086 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006002:	4b31      	ldr	r3, [pc, #196]	; (80060c8 <HAL_RCC_OscConfig+0x478>)
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006008:	f7fb fce6 	bl	80019d8 <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600e:	e008      	b.n	8006022 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006010:	f7fb fce2 	bl	80019d8 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e087      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006022:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1f0      	bne.n	8006010 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69da      	ldr	r2, [r3, #28]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	019b      	lsls	r3, r3, #6
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006044:	085b      	lsrs	r3, r3, #1
 8006046:	3b01      	subs	r3, #1
 8006048:	041b      	lsls	r3, r3, #16
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006050:	061b      	lsls	r3, r3, #24
 8006052:	491b      	ldr	r1, [pc, #108]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 8006054:	4313      	orrs	r3, r2
 8006056:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006058:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <HAL_RCC_OscConfig+0x478>)
 800605a:	2201      	movs	r2, #1
 800605c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605e:	f7fb fcbb 	bl	80019d8 <HAL_GetTick>
 8006062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006064:	e008      	b.n	8006078 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006066:	f7fb fcb7 	bl	80019d8 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e05c      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006078:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0f0      	beq.n	8006066 <HAL_RCC_OscConfig+0x416>
 8006084:	e054      	b.n	8006130 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006086:	4b10      	ldr	r3, [pc, #64]	; (80060c8 <HAL_RCC_OscConfig+0x478>)
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608c:	f7fb fca4 	bl	80019d8 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006094:	f7fb fca0 	bl	80019d8 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e045      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a6:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <HAL_RCC_OscConfig+0x470>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1f0      	bne.n	8006094 <HAL_RCC_OscConfig+0x444>
 80060b2:	e03d      	b.n	8006130 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d107      	bne.n	80060cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e038      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
 80060c0:	40023800 	.word	0x40023800
 80060c4:	40007000 	.word	0x40007000
 80060c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060cc:	4b1b      	ldr	r3, [pc, #108]	; (800613c <HAL_RCC_OscConfig+0x4ec>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d028      	beq.n	800612c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d121      	bne.n	800612c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d11a      	bne.n	800612c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060fc:	4013      	ands	r3, r2
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006102:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006104:	4293      	cmp	r3, r2
 8006106:	d111      	bne.n	800612c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006112:	085b      	lsrs	r3, r3, #1
 8006114:	3b01      	subs	r3, #1
 8006116:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006118:	429a      	cmp	r2, r3
 800611a:	d107      	bne.n	800612c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006128:	429a      	cmp	r2, r3
 800612a:	d001      	beq.n	8006130 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e000      	b.n	8006132 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40023800 	.word	0x40023800

08006140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e0cc      	b.n	80062ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006154:	4b68      	ldr	r3, [pc, #416]	; (80062f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 030f 	and.w	r3, r3, #15
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d90c      	bls.n	800617c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006162:	4b65      	ldr	r3, [pc, #404]	; (80062f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800616a:	4b63      	ldr	r3, [pc, #396]	; (80062f8 <HAL_RCC_ClockConfig+0x1b8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e0b8      	b.n	80062ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d020      	beq.n	80061ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006194:	4b59      	ldr	r3, [pc, #356]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	4a58      	ldr	r2, [pc, #352]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 800619a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800619e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061ac:	4b53      	ldr	r3, [pc, #332]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	4a52      	ldr	r2, [pc, #328]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 80061b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b8:	4b50      	ldr	r3, [pc, #320]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	494d      	ldr	r1, [pc, #308]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d044      	beq.n	8006260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d107      	bne.n	80061ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061de:	4b47      	ldr	r3, [pc, #284]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d119      	bne.n	800621e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e07f      	b.n	80062ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d003      	beq.n	80061fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d107      	bne.n	800620e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061fe:	4b3f      	ldr	r3, [pc, #252]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d109      	bne.n	800621e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e06f      	b.n	80062ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800620e:	4b3b      	ldr	r3, [pc, #236]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e067      	b.n	80062ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800621e:	4b37      	ldr	r3, [pc, #220]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f023 0203 	bic.w	r2, r3, #3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	4934      	ldr	r1, [pc, #208]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 800622c:	4313      	orrs	r3, r2
 800622e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006230:	f7fb fbd2 	bl	80019d8 <HAL_GetTick>
 8006234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006236:	e00a      	b.n	800624e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006238:	f7fb fbce 	bl	80019d8 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	f241 3288 	movw	r2, #5000	; 0x1388
 8006246:	4293      	cmp	r3, r2
 8006248:	d901      	bls.n	800624e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e04f      	b.n	80062ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624e:	4b2b      	ldr	r3, [pc, #172]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 020c 	and.w	r2, r3, #12
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	429a      	cmp	r2, r3
 800625e:	d1eb      	bne.n	8006238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006260:	4b25      	ldr	r3, [pc, #148]	; (80062f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d20c      	bcs.n	8006288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800626e:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006276:	4b20      	ldr	r3, [pc, #128]	; (80062f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d001      	beq.n	8006288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e032      	b.n	80062ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006294:	4b19      	ldr	r3, [pc, #100]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	4916      	ldr	r1, [pc, #88]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062b2:	4b12      	ldr	r3, [pc, #72]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	490e      	ldr	r1, [pc, #56]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062c6:	f000 f821 	bl	800630c <HAL_RCC_GetSysClockFreq>
 80062ca:	4602      	mov	r2, r0
 80062cc:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	091b      	lsrs	r3, r3, #4
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	490a      	ldr	r1, [pc, #40]	; (8006300 <HAL_RCC_ClockConfig+0x1c0>)
 80062d8:	5ccb      	ldrb	r3, [r1, r3]
 80062da:	fa22 f303 	lsr.w	r3, r2, r3
 80062de:	4a09      	ldr	r2, [pc, #36]	; (8006304 <HAL_RCC_ClockConfig+0x1c4>)
 80062e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062e2:	4b09      	ldr	r3, [pc, #36]	; (8006308 <HAL_RCC_ClockConfig+0x1c8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fb fb32 	bl	8001950 <HAL_InitTick>

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40023c00 	.word	0x40023c00
 80062fc:	40023800 	.word	0x40023800
 8006300:	080170f4 	.word	0x080170f4
 8006304:	20000004 	.word	0x20000004
 8006308:	20000008 	.word	0x20000008

0800630c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800630c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006310:	b094      	sub	sp, #80	; 0x50
 8006312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	647b      	str	r3, [r7, #68]	; 0x44
 8006318:	2300      	movs	r3, #0
 800631a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800631c:	2300      	movs	r3, #0
 800631e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006324:	4b79      	ldr	r3, [pc, #484]	; (800650c <HAL_RCC_GetSysClockFreq+0x200>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f003 030c 	and.w	r3, r3, #12
 800632c:	2b08      	cmp	r3, #8
 800632e:	d00d      	beq.n	800634c <HAL_RCC_GetSysClockFreq+0x40>
 8006330:	2b08      	cmp	r3, #8
 8006332:	f200 80e1 	bhi.w	80064f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <HAL_RCC_GetSysClockFreq+0x34>
 800633a:	2b04      	cmp	r3, #4
 800633c:	d003      	beq.n	8006346 <HAL_RCC_GetSysClockFreq+0x3a>
 800633e:	e0db      	b.n	80064f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006340:	4b73      	ldr	r3, [pc, #460]	; (8006510 <HAL_RCC_GetSysClockFreq+0x204>)
 8006342:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006344:	e0db      	b.n	80064fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006346:	4b73      	ldr	r3, [pc, #460]	; (8006514 <HAL_RCC_GetSysClockFreq+0x208>)
 8006348:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800634a:	e0d8      	b.n	80064fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800634c:	4b6f      	ldr	r3, [pc, #444]	; (800650c <HAL_RCC_GetSysClockFreq+0x200>)
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006354:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006356:	4b6d      	ldr	r3, [pc, #436]	; (800650c <HAL_RCC_GetSysClockFreq+0x200>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d063      	beq.n	800642a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006362:	4b6a      	ldr	r3, [pc, #424]	; (800650c <HAL_RCC_GetSysClockFreq+0x200>)
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	099b      	lsrs	r3, r3, #6
 8006368:	2200      	movs	r2, #0
 800636a:	63bb      	str	r3, [r7, #56]	; 0x38
 800636c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006374:	633b      	str	r3, [r7, #48]	; 0x30
 8006376:	2300      	movs	r3, #0
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
 800637a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800637e:	4622      	mov	r2, r4
 8006380:	462b      	mov	r3, r5
 8006382:	f04f 0000 	mov.w	r0, #0
 8006386:	f04f 0100 	mov.w	r1, #0
 800638a:	0159      	lsls	r1, r3, #5
 800638c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006390:	0150      	lsls	r0, r2, #5
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4621      	mov	r1, r4
 8006398:	1a51      	subs	r1, r2, r1
 800639a:	6139      	str	r1, [r7, #16]
 800639c:	4629      	mov	r1, r5
 800639e:	eb63 0301 	sbc.w	r3, r3, r1
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063b0:	4659      	mov	r1, fp
 80063b2:	018b      	lsls	r3, r1, #6
 80063b4:	4651      	mov	r1, sl
 80063b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063ba:	4651      	mov	r1, sl
 80063bc:	018a      	lsls	r2, r1, #6
 80063be:	4651      	mov	r1, sl
 80063c0:	ebb2 0801 	subs.w	r8, r2, r1
 80063c4:	4659      	mov	r1, fp
 80063c6:	eb63 0901 	sbc.w	r9, r3, r1
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063de:	4690      	mov	r8, r2
 80063e0:	4699      	mov	r9, r3
 80063e2:	4623      	mov	r3, r4
 80063e4:	eb18 0303 	adds.w	r3, r8, r3
 80063e8:	60bb      	str	r3, [r7, #8]
 80063ea:	462b      	mov	r3, r5
 80063ec:	eb49 0303 	adc.w	r3, r9, r3
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063fe:	4629      	mov	r1, r5
 8006400:	024b      	lsls	r3, r1, #9
 8006402:	4621      	mov	r1, r4
 8006404:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006408:	4621      	mov	r1, r4
 800640a:	024a      	lsls	r2, r1, #9
 800640c:	4610      	mov	r0, r2
 800640e:	4619      	mov	r1, r3
 8006410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006412:	2200      	movs	r2, #0
 8006414:	62bb      	str	r3, [r7, #40]	; 0x28
 8006416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006418:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800641c:	f7f9 ff38 	bl	8000290 <__aeabi_uldivmod>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4613      	mov	r3, r2
 8006426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006428:	e058      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800642a:	4b38      	ldr	r3, [pc, #224]	; (800650c <HAL_RCC_GetSysClockFreq+0x200>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	099b      	lsrs	r3, r3, #6
 8006430:	2200      	movs	r2, #0
 8006432:	4618      	mov	r0, r3
 8006434:	4611      	mov	r1, r2
 8006436:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800643a:	623b      	str	r3, [r7, #32]
 800643c:	2300      	movs	r3, #0
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
 8006440:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006444:	4642      	mov	r2, r8
 8006446:	464b      	mov	r3, r9
 8006448:	f04f 0000 	mov.w	r0, #0
 800644c:	f04f 0100 	mov.w	r1, #0
 8006450:	0159      	lsls	r1, r3, #5
 8006452:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006456:	0150      	lsls	r0, r2, #5
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4641      	mov	r1, r8
 800645e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006462:	4649      	mov	r1, r9
 8006464:	eb63 0b01 	sbc.w	fp, r3, r1
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	f04f 0300 	mov.w	r3, #0
 8006470:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006474:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006478:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800647c:	ebb2 040a 	subs.w	r4, r2, sl
 8006480:	eb63 050b 	sbc.w	r5, r3, fp
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	00eb      	lsls	r3, r5, #3
 800648e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006492:	00e2      	lsls	r2, r4, #3
 8006494:	4614      	mov	r4, r2
 8006496:	461d      	mov	r5, r3
 8006498:	4643      	mov	r3, r8
 800649a:	18e3      	adds	r3, r4, r3
 800649c:	603b      	str	r3, [r7, #0]
 800649e:	464b      	mov	r3, r9
 80064a0:	eb45 0303 	adc.w	r3, r5, r3
 80064a4:	607b      	str	r3, [r7, #4]
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064b2:	4629      	mov	r1, r5
 80064b4:	028b      	lsls	r3, r1, #10
 80064b6:	4621      	mov	r1, r4
 80064b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064bc:	4621      	mov	r1, r4
 80064be:	028a      	lsls	r2, r1, #10
 80064c0:	4610      	mov	r0, r2
 80064c2:	4619      	mov	r1, r3
 80064c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064c6:	2200      	movs	r2, #0
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	61fa      	str	r2, [r7, #28]
 80064cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064d0:	f7f9 fede 	bl	8000290 <__aeabi_uldivmod>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4613      	mov	r3, r2
 80064da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064dc:	4b0b      	ldr	r3, [pc, #44]	; (800650c <HAL_RCC_GetSysClockFreq+0x200>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	0c1b      	lsrs	r3, r3, #16
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	3301      	adds	r3, #1
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80064ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064f6:	e002      	b.n	80064fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064f8:	4b05      	ldr	r3, [pc, #20]	; (8006510 <HAL_RCC_GetSysClockFreq+0x204>)
 80064fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006500:	4618      	mov	r0, r3
 8006502:	3750      	adds	r7, #80	; 0x50
 8006504:	46bd      	mov	sp, r7
 8006506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800650a:	bf00      	nop
 800650c:	40023800 	.word	0x40023800
 8006510:	00f42400 	.word	0x00f42400
 8006514:	007a1200 	.word	0x007a1200

08006518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800651c:	4b03      	ldr	r3, [pc, #12]	; (800652c <HAL_RCC_GetHCLKFreq+0x14>)
 800651e:	681b      	ldr	r3, [r3, #0]
}
 8006520:	4618      	mov	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20000004 	.word	0x20000004

08006530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006534:	f7ff fff0 	bl	8006518 <HAL_RCC_GetHCLKFreq>
 8006538:	4602      	mov	r2, r0
 800653a:	4b05      	ldr	r3, [pc, #20]	; (8006550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	0a9b      	lsrs	r3, r3, #10
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	4903      	ldr	r1, [pc, #12]	; (8006554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006546:	5ccb      	ldrb	r3, [r1, r3]
 8006548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800654c:	4618      	mov	r0, r3
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40023800 	.word	0x40023800
 8006554:	08017104 	.word	0x08017104

08006558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800655c:	f7ff ffdc 	bl	8006518 <HAL_RCC_GetHCLKFreq>
 8006560:	4602      	mov	r2, r0
 8006562:	4b05      	ldr	r3, [pc, #20]	; (8006578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	0b5b      	lsrs	r3, r3, #13
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	4903      	ldr	r1, [pc, #12]	; (800657c <HAL_RCC_GetPCLK2Freq+0x24>)
 800656e:	5ccb      	ldrb	r3, [r1, r3]
 8006570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006574:	4618      	mov	r0, r3
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40023800 	.word	0x40023800
 800657c:	08017104 	.word	0x08017104

08006580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e07b      	b.n	800668a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	d108      	bne.n	80065ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065a2:	d009      	beq.n	80065b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	61da      	str	r2, [r3, #28]
 80065aa:	e005      	b.n	80065b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fa fd36 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006600:	431a      	orrs	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006628:	431a      	orrs	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663c:	ea42 0103 	orr.w	r1, r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	0c1b      	lsrs	r3, r3, #16
 8006656:	f003 0104 	and.w	r1, r3, #4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	f003 0210 	and.w	r2, r3, #16
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006678:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	4613      	mov	r3, r2
 80066a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_SPI_Transmit_DMA+0x20>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e09b      	b.n	80067ec <HAL_SPI_Transmit_DMA+0x158>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d002      	beq.n	80066ce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80066c8:	2302      	movs	r3, #2
 80066ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066cc:	e089      	b.n	80067e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_SPI_Transmit_DMA+0x46>
 80066d4:	88fb      	ldrh	r3, [r7, #6]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d102      	bne.n	80066e0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066de:	e080      	b.n	80067e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2203      	movs	r2, #3
 80066e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	88fa      	ldrh	r2, [r7, #6]
 80066f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	88fa      	ldrh	r2, [r7, #6]
 80066fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006726:	d10f      	bne.n	8006748 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006736:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006746:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800674c:	4a29      	ldr	r2, [pc, #164]	; (80067f4 <HAL_SPI_Transmit_DMA+0x160>)
 800674e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006754:	4a28      	ldr	r2, [pc, #160]	; (80067f8 <HAL_SPI_Transmit_DMA+0x164>)
 8006756:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675c:	4a27      	ldr	r2, [pc, #156]	; (80067fc <HAL_SPI_Transmit_DMA+0x168>)
 800675e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006764:	2200      	movs	r2, #0
 8006766:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	4619      	mov	r1, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	330c      	adds	r3, #12
 8006778:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800677e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006780:	f7fb fb1a 	bl	8001db8 <HAL_DMA_Start_IT>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00c      	beq.n	80067a4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678e:	f043 0210 	orr.w	r2, r3, #16
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80067a2:	e01e      	b.n	80067e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d007      	beq.n	80067c2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067c0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f042 0220 	orr.w	r2, r2, #32
 80067d0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0202 	orr.w	r2, r2, #2
 80067e0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	08006fed 	.word	0x08006fed
 80067f8:	08006e0d 	.word	0x08006e0d
 80067fc:	08007041 	.word	0x08007041

08006800 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d110      	bne.n	800683c <HAL_SPI_Receive_DMA+0x3c>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006822:	d10b      	bne.n	800683c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2204      	movs	r2, #4
 8006828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f8ac 	bl	8006990 <HAL_SPI_TransmitReceive_DMA>
 8006838:	4603      	mov	r3, r0
 800683a:	e09f      	b.n	800697c <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_SPI_Receive_DMA+0x4a>
 8006846:	2302      	movs	r3, #2
 8006848:	e098      	b.n	800697c <HAL_SPI_Receive_DMA+0x17c>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b01      	cmp	r3, #1
 800685c:	d002      	beq.n	8006864 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800685e:	2302      	movs	r3, #2
 8006860:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006862:	e086      	b.n	8006972 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <HAL_SPI_Receive_DMA+0x70>
 800686a:	88fb      	ldrh	r3, [r7, #6]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006874:	e07d      	b.n	8006972 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2204      	movs	r2, #4
 800687a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	88fa      	ldrh	r2, [r7, #6]
 800688e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	88fa      	ldrh	r2, [r7, #6]
 8006894:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b6:	d10f      	bne.n	80068d8 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068dc:	4a29      	ldr	r2, [pc, #164]	; (8006984 <HAL_SPI_Receive_DMA+0x184>)
 80068de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e4:	4a28      	ldr	r2, [pc, #160]	; (8006988 <HAL_SPI_Receive_DMA+0x188>)
 80068e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ec:	4a27      	ldr	r2, [pc, #156]	; (800698c <HAL_SPI_Receive_DMA+0x18c>)
 80068ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f4:	2200      	movs	r2, #0
 80068f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	330c      	adds	r3, #12
 8006902:	4619      	mov	r1, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800690e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006910:	f7fb fa52 	bl	8001db8 <HAL_DMA_Start_IT>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00c      	beq.n	8006934 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691e:	f043 0210 	orr.w	r2, r3, #16
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006932:	e01e      	b.n	8006972 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	d007      	beq.n	8006952 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006950:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0220 	orr.w	r2, r2, #32
 8006960:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0201 	orr.w	r2, r2, #1
 8006970:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800697a:	7dfb      	ldrb	r3, [r7, #23]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	08007009 	.word	0x08007009
 8006988:	08006eb5 	.word	0x08006eb5
 800698c:	08007041 	.word	0x08007041

08006990 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e0e3      	b.n	8006b78 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069be:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80069c6:	7dbb      	ldrb	r3, [r7, #22]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d00d      	beq.n	80069e8 <HAL_SPI_TransmitReceive_DMA+0x58>
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069d2:	d106      	bne.n	80069e2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d102      	bne.n	80069e2 <HAL_SPI_TransmitReceive_DMA+0x52>
 80069dc:	7dbb      	ldrb	r3, [r7, #22]
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d002      	beq.n	80069e8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80069e2:	2302      	movs	r3, #2
 80069e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069e6:	e0c2      	b.n	8006b6e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <HAL_SPI_TransmitReceive_DMA+0x6a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <HAL_SPI_TransmitReceive_DMA+0x6a>
 80069f4:	887b      	ldrh	r3, [r7, #2]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d102      	bne.n	8006a00 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069fe:	e0b6      	b.n	8006b6e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d003      	beq.n	8006a14 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2205      	movs	r2, #5
 8006a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	887a      	ldrh	r2, [r7, #2]
 8006a24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	887a      	ldrh	r2, [r7, #2]
 8006a2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	887a      	ldrh	r2, [r7, #2]
 8006a36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	887a      	ldrh	r2, [r7, #2]
 8006a3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d108      	bne.n	8006a68 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5a:	4a49      	ldr	r2, [pc, #292]	; (8006b80 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006a5c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a62:	4a48      	ldr	r2, [pc, #288]	; (8006b84 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006a64:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a66:	e007      	b.n	8006a78 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6c:	4a46      	ldr	r2, [pc, #280]	; (8006b88 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a74:	4a45      	ldr	r2, [pc, #276]	; (8006b8c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8006a76:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7c:	4a44      	ldr	r2, [pc, #272]	; (8006b90 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8006a7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a84:	2200      	movs	r2, #0
 8006a86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	4619      	mov	r1, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a98:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a9e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006aa0:	f7fb f98a 	bl	8001db8 <HAL_DMA_Start_IT>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00c      	beq.n	8006ac4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aae:	f043 0210 	orr.w	r2, r3, #16
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006ac2:	e054      	b.n	8006b6e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad8:	2200      	movs	r2, #0
 8006ada:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae8:	2200      	movs	r2, #0
 8006aea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af0:	2200      	movs	r2, #0
 8006af2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afc:	4619      	mov	r1, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	330c      	adds	r3, #12
 8006b04:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006b0c:	f7fb f954 	bl	8001db8 <HAL_DMA_Start_IT>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00c      	beq.n	8006b30 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1a:	f043 0210 	orr.w	r2, r3, #16
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006b2e:	e01e      	b.n	8006b6e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3a:	2b40      	cmp	r3, #64	; 0x40
 8006b3c:	d007      	beq.n	8006b4e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b4c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0220 	orr.w	r2, r2, #32
 8006b5c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f042 0202 	orr.w	r2, r2, #2
 8006b6c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3718      	adds	r7, #24
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	08007009 	.word	0x08007009
 8006b84:	08006eb5 	.word	0x08006eb5
 8006b88:	08007025 	.word	0x08007025
 8006b8c:	08006f5d 	.word	0x08006f5d
 8006b90:	08007041 	.word	0x08007041

08006b94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	099b      	lsrs	r3, r3, #6
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10f      	bne.n	8006bd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	099b      	lsrs	r3, r3, #6
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
    return;
 8006bd6:	e0d7      	b.n	8006d88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <HAL_SPI_IRQHandler+0x66>
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	09db      	lsrs	r3, r3, #7
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3
    return;
 8006bf8:	e0c6      	b.n	8006d88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10c      	bne.n	8006c20 <HAL_SPI_IRQHandler+0x8c>
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	099b      	lsrs	r3, r3, #6
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d106      	bne.n	8006c20 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	0a1b      	lsrs	r3, r3, #8
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 80b4 	beq.w	8006d88 <HAL_SPI_IRQHandler+0x1f4>
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80ad 	beq.w	8006d88 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	099b      	lsrs	r3, r3, #6
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d023      	beq.n	8006c82 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d011      	beq.n	8006c6a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4a:	f043 0204 	orr.w	r2, r3, #4
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c52:	2300      	movs	r3, #0
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	e00b      	b.n	8006c82 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	693b      	ldr	r3, [r7, #16]
        return;
 8006c80:	e082      	b.n	8006d88 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d014      	beq.n	8006cb8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c92:	f043 0201 	orr.w	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	0a1b      	lsrs	r3, r3, #8
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00c      	beq.n	8006cde <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc8:	f043 0208 	orr.w	r2, r3, #8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60bb      	str	r3, [r7, #8]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	60bb      	str	r3, [r7, #8]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d04f      	beq.n	8006d86 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cf4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <HAL_SPI_IRQHandler+0x17e>
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d034      	beq.n	8006d7c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0203 	bic.w	r2, r2, #3
 8006d20:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d011      	beq.n	8006d4e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2e:	4a18      	ldr	r2, [pc, #96]	; (8006d90 <HAL_SPI_IRQHandler+0x1fc>)
 8006d30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fb f906 	bl	8001f48 <HAL_DMA_Abort_IT>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d016      	beq.n	8006d84 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d5a:	4a0d      	ldr	r2, [pc, #52]	; (8006d90 <HAL_SPI_IRQHandler+0x1fc>)
 8006d5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fb f8f0 	bl	8001f48 <HAL_DMA_Abort_IT>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006d7a:	e003      	b.n	8006d84 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f83b 	bl	8006df8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d82:	e000      	b.n	8006d86 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006d84:	bf00      	nop
    return;
 8006d86:	bf00      	nop
  }
}
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	08007081 	.word	0x08007081

08006d94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e1a:	f7fa fddd 	bl	80019d8 <HAL_GetTick>
 8006e1e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e2e:	d03b      	beq.n	8006ea8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0220 	bic.w	r2, r2, #32
 8006e3e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0202 	bic.w	r2, r2, #2
 8006e4e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	2164      	movs	r1, #100	; 0x64
 8006e54:	6978      	ldr	r0, [r7, #20]
 8006e56:	f000 fa15 	bl	8007284 <SPI_EndRxTxTransaction>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e64:	f043 0220 	orr.w	r2, r3, #32
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006ea0:	6978      	ldr	r0, [r7, #20]
 8006ea2:	f7ff ffa9 	bl	8006df8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006ea6:	e002      	b.n	8006eae <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006ea8:	6978      	ldr	r0, [r7, #20]
 8006eaa:	f7ff ff73 	bl	8006d94 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ec2:	f7fa fd89 	bl	80019d8 <HAL_GetTick>
 8006ec6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed6:	d03b      	beq.n	8006f50 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0220 	bic.w	r2, r2, #32
 8006ee6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10d      	bne.n	8006f0c <SPI_DMAReceiveCplt+0x58>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ef8:	d108      	bne.n	8006f0c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0203 	bic.w	r2, r2, #3
 8006f08:	605a      	str	r2, [r3, #4]
 8006f0a:	e007      	b.n	8006f1c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0201 	bic.w	r2, r2, #1
 8006f1a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	2164      	movs	r1, #100	; 0x64
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f949 	bl	80071b8 <SPI_EndRxTransaction>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7ff ff55 	bl	8006df8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006f4e:	e002      	b.n	8006f56 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7f9 fb1f 	bl	8000594 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f6a:	f7fa fd35 	bl	80019d8 <HAL_GetTick>
 8006f6e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f7e:	d02f      	beq.n	8006fe0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0220 	bic.w	r2, r2, #32
 8006f8e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	2164      	movs	r1, #100	; 0x64
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 f975 	bl	8007284 <SPI_EndRxTxTransaction>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa4:	f043 0220 	orr.w	r2, r3, #32
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0203 	bic.w	r2, r2, #3
 8006fba:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f7ff ff0d 	bl	8006df8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006fde:	e002      	b.n	8006fe6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f7ff fee1 	bl	8006da8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff fede 	bl	8006dbc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007000:	bf00      	nop
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007014:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f7ff feda 	bl	8006dd0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800701c:	bf00      	nop
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007030:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f7ff fed6 	bl	8006de4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0203 	bic.w	r2, r2, #3
 800705c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	f043 0210 	orr.w	r2, r3, #16
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff fec0 	bl	8006df8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007078:	bf00      	nop
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff feac 	bl	8006df8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	603b      	str	r3, [r7, #0]
 80070b4:	4613      	mov	r3, r2
 80070b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070b8:	f7fa fc8e 	bl	80019d8 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	1a9b      	subs	r3, r3, r2
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	4413      	add	r3, r2
 80070c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070c8:	f7fa fc86 	bl	80019d8 <HAL_GetTick>
 80070cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070ce:	4b39      	ldr	r3, [pc, #228]	; (80071b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	015b      	lsls	r3, r3, #5
 80070d4:	0d1b      	lsrs	r3, r3, #20
 80070d6:	69fa      	ldr	r2, [r7, #28]
 80070d8:	fb02 f303 	mul.w	r3, r2, r3
 80070dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070de:	e054      	b.n	800718a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e6:	d050      	beq.n	800718a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070e8:	f7fa fc76 	bl	80019d8 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d902      	bls.n	80070fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d13d      	bne.n	800717a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800710c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007116:	d111      	bne.n	800713c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007120:	d004      	beq.n	800712c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800712a:	d107      	bne.n	800713c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800713a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007144:	d10f      	bne.n	8007166 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007164:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e017      	b.n	80071aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	3b01      	subs	r3, #1
 8007188:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4013      	ands	r3, r2
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	429a      	cmp	r2, r3
 8007198:	bf0c      	ite	eq
 800719a:	2301      	moveq	r3, #1
 800719c:	2300      	movne	r3, #0
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	461a      	mov	r2, r3
 80071a2:	79fb      	ldrb	r3, [r7, #7]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d19b      	bne.n	80070e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3720      	adds	r7, #32
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20000004 	.word	0x20000004

080071b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af02      	add	r7, sp, #8
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071cc:	d111      	bne.n	80071f2 <SPI_EndRxTransaction+0x3a>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071d6:	d004      	beq.n	80071e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e0:	d107      	bne.n	80071f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071fa:	d12a      	bne.n	8007252 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007204:	d012      	beq.n	800722c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2200      	movs	r2, #0
 800720e:	2180      	movs	r1, #128	; 0x80
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f7ff ff49 	bl	80070a8 <SPI_WaitFlagStateUntilTimeout>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d02d      	beq.n	8007278 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007220:	f043 0220 	orr.w	r2, r3, #32
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e026      	b.n	800727a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2200      	movs	r2, #0
 8007234:	2101      	movs	r1, #1
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f7ff ff36 	bl	80070a8 <SPI_WaitFlagStateUntilTimeout>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d01a      	beq.n	8007278 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007246:	f043 0220 	orr.w	r2, r3, #32
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e013      	b.n	800727a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2200      	movs	r2, #0
 800725a:	2101      	movs	r1, #1
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7ff ff23 	bl	80070a8 <SPI_WaitFlagStateUntilTimeout>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d007      	beq.n	8007278 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726c:	f043 0220 	orr.w	r2, r3, #32
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e000      	b.n	800727a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af02      	add	r7, sp, #8
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007290:	4b1b      	ldr	r3, [pc, #108]	; (8007300 <SPI_EndRxTxTransaction+0x7c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1b      	ldr	r2, [pc, #108]	; (8007304 <SPI_EndRxTxTransaction+0x80>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	0d5b      	lsrs	r3, r3, #21
 800729c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072a0:	fb02 f303 	mul.w	r3, r2, r3
 80072a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072ae:	d112      	bne.n	80072d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2200      	movs	r2, #0
 80072b8:	2180      	movs	r1, #128	; 0x80
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f7ff fef4 	bl	80070a8 <SPI_WaitFlagStateUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d016      	beq.n	80072f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	f043 0220 	orr.w	r2, r3, #32
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e00f      	b.n	80072f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00a      	beq.n	80072f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	3b01      	subs	r3, #1
 80072e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ec:	2b80      	cmp	r3, #128	; 0x80
 80072ee:	d0f2      	beq.n	80072d6 <SPI_EndRxTxTransaction+0x52>
 80072f0:	e000      	b.n	80072f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80072f2:	bf00      	nop
  }

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	20000004 	.word	0x20000004
 8007304:	165e9f81 	.word	0x165e9f81

08007308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e03f      	b.n	800739a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d106      	bne.n	8007334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7f9 ffba 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2224      	movs	r2, #36	; 0x24
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800734a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 ff49 	bl	80081e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	691a      	ldr	r2, [r3, #16]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695a      	ldr	r2, [r3, #20]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2220      	movs	r2, #32
 8007394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
	...

080073a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b08c      	sub	sp, #48	; 0x30
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b20      	cmp	r3, #32
 80073bc:	d165      	bne.n	800748a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <HAL_UART_Transmit_DMA+0x26>
 80073c4:	88fb      	ldrh	r3, [r7, #6]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e05e      	b.n	800748c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_UART_Transmit_DMA+0x38>
 80073d8:	2302      	movs	r3, #2
 80073da:	e057      	b.n	800748c <HAL_UART_Transmit_DMA+0xe8>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	88fa      	ldrh	r2, [r7, #6]
 80073ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	88fa      	ldrh	r2, [r7, #6]
 80073f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2221      	movs	r2, #33	; 0x21
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007408:	4a22      	ldr	r2, [pc, #136]	; (8007494 <HAL_UART_Transmit_DMA+0xf0>)
 800740a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007410:	4a21      	ldr	r2, [pc, #132]	; (8007498 <HAL_UART_Transmit_DMA+0xf4>)
 8007412:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007418:	4a20      	ldr	r2, [pc, #128]	; (800749c <HAL_UART_Transmit_DMA+0xf8>)
 800741a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007420:	2200      	movs	r2, #0
 8007422:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007424:	f107 0308 	add.w	r3, r7, #8
 8007428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800742e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007430:	6819      	ldr	r1, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3304      	adds	r3, #4
 8007438:	461a      	mov	r2, r3
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	f7fa fcbc 	bl	8001db8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007448:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3314      	adds	r3, #20
 8007458:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	617b      	str	r3, [r7, #20]
   return(result);
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007468:	62bb      	str	r3, [r7, #40]	; 0x28
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3314      	adds	r3, #20
 8007470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007472:	627a      	str	r2, [r7, #36]	; 0x24
 8007474:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6a39      	ldr	r1, [r7, #32]
 8007478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e5      	bne.n	8007452 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	e000      	b.n	800748c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800748a:	2302      	movs	r3, #2
  }
}
 800748c:	4618      	mov	r0, r3
 800748e:	3730      	adds	r7, #48	; 0x30
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	08007a85 	.word	0x08007a85
 8007498:	08007b1f 	.word	0x08007b1f
 800749c:	08007c97 	.word	0x08007c97

080074a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	4613      	mov	r3, r2
 80074ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	d11d      	bne.n	80074f6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <HAL_UART_Receive_DMA+0x26>
 80074c0:	88fb      	ldrh	r3, [r7, #6]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e016      	b.n	80074f8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_UART_Receive_DMA+0x38>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e00f      	b.n	80074f8 <HAL_UART_Receive_DMA+0x58>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80074e6:	88fb      	ldrh	r3, [r7, #6]
 80074e8:	461a      	mov	r2, r3
 80074ea:	68b9      	ldr	r1, [r7, #8]
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fc1d 	bl	8007d2c <UART_Start_Receive_DMA>
 80074f2:	4603      	mov	r3, r0
 80074f4:	e000      	b.n	80074f8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80074f6:	2302      	movs	r3, #2
  }
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b0ba      	sub	sp, #232	; 0xe8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007526:	2300      	movs	r3, #0
 8007528:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800752c:	2300      	movs	r3, #0
 800752e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800753e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10f      	bne.n	8007566 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d009      	beq.n	8007566 <HAL_UART_IRQHandler+0x66>
 8007552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fd85 	bl	800806e <UART_Receive_IT>
      return;
 8007564:	e256      	b.n	8007a14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 80de 	beq.w	800772c <HAL_UART_IRQHandler+0x22c>
 8007570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d106      	bne.n	800758a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800757c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007580:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80d1 	beq.w	800772c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800758a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <HAL_UART_IRQHandler+0xae>
 8007596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	f043 0201 	orr.w	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00b      	beq.n	80075d2 <HAL_UART_IRQHandler+0xd2>
 80075ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	f043 0202 	orr.w	r2, r3, #2
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00b      	beq.n	80075f6 <HAL_UART_IRQHandler+0xf6>
 80075de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	f043 0204 	orr.w	r2, r3, #4
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d011      	beq.n	8007626 <HAL_UART_IRQHandler+0x126>
 8007602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d105      	bne.n	800761a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800760e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d005      	beq.n	8007626 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	f043 0208 	orr.w	r2, r3, #8
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 81ed 	beq.w	8007a0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d008      	beq.n	800764e <HAL_UART_IRQHandler+0x14e>
 800763c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007640:	f003 0320 	and.w	r3, r3, #32
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fd10 	bl	800806e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007658:	2b40      	cmp	r3, #64	; 0x40
 800765a:	bf0c      	ite	eq
 800765c:	2301      	moveq	r3, #1
 800765e:	2300      	movne	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d103      	bne.n	800767a <HAL_UART_IRQHandler+0x17a>
 8007672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007676:	2b00      	cmp	r3, #0
 8007678:	d04f      	beq.n	800771a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fc18 	bl	8007eb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768a:	2b40      	cmp	r3, #64	; 0x40
 800768c:	d141      	bne.n	8007712 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3314      	adds	r3, #20
 8007694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3314      	adds	r3, #20
 80076b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1d9      	bne.n	800768e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d013      	beq.n	800770a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	4a7d      	ldr	r2, [pc, #500]	; (80078dc <HAL_UART_IRQHandler+0x3dc>)
 80076e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fa fc2a 	bl	8001f48 <HAL_DMA_Abort_IT>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d016      	beq.n	8007728 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007704:	4610      	mov	r0, r2
 8007706:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007708:	e00e      	b.n	8007728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f9a4 	bl	8007a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007710:	e00a      	b.n	8007728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f9a0 	bl	8007a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007718:	e006      	b.n	8007728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f99c 	bl	8007a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007726:	e170      	b.n	8007a0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007728:	bf00      	nop
    return;
 800772a:	e16e      	b.n	8007a0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007730:	2b01      	cmp	r3, #1
 8007732:	f040 814a 	bne.w	80079ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800773a:	f003 0310 	and.w	r3, r3, #16
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 8143 	beq.w	80079ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007748:	f003 0310 	and.w	r3, r3, #16
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 813c 	beq.w	80079ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007752:	2300      	movs	r3, #0
 8007754:	60bb      	str	r3, [r7, #8]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60bb      	str	r3, [r7, #8]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	60bb      	str	r3, [r7, #8]
 8007766:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	f040 80b4 	bne.w	80078e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007784:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 8140 	beq.w	8007a0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007796:	429a      	cmp	r2, r3
 8007798:	f080 8139 	bcs.w	8007a0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ae:	f000 8088 	beq.w	80078c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	330c      	adds	r3, #12
 80077b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	330c      	adds	r3, #12
 80077da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80077de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1d9      	bne.n	80077b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3314      	adds	r3, #20
 8007804:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800780e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007810:	f023 0301 	bic.w	r3, r3, #1
 8007814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3314      	adds	r3, #20
 800781e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007822:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007826:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800782a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e1      	bne.n	80077fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3314      	adds	r3, #20
 8007840:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800784a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800784c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3314      	adds	r3, #20
 800785a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800785e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007860:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007864:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800786c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e3      	bne.n	800783a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2220      	movs	r2, #32
 8007876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	330c      	adds	r3, #12
 8007886:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007892:	f023 0310 	bic.w	r3, r3, #16
 8007896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	330c      	adds	r3, #12
 80078a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80078a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e3      	bne.n	8007880 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fa fad3 	bl	8001e68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f8ca 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078d8:	e099      	b.n	8007a0e <HAL_UART_IRQHandler+0x50e>
 80078da:	bf00      	nop
 80078dc:	08007f77 	.word	0x08007f77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 808b 	beq.w	8007a12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80078fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 8086 	beq.w	8007a12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	330c      	adds	r3, #12
 800790c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800791c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	330c      	adds	r3, #12
 8007926:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800792a:	647a      	str	r2, [r7, #68]	; 0x44
 800792c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e3      	bne.n	8007906 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3314      	adds	r3, #20
 8007944:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	623b      	str	r3, [r7, #32]
   return(result);
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	f023 0301 	bic.w	r3, r3, #1
 8007954:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3314      	adds	r3, #20
 800795e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007962:	633a      	str	r2, [r7, #48]	; 0x30
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e3      	bne.n	800793e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	330c      	adds	r3, #12
 800798a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	60fb      	str	r3, [r7, #12]
   return(result);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 0310 	bic.w	r3, r3, #16
 800799a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	330c      	adds	r3, #12
 80079a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079a8:	61fa      	str	r2, [r7, #28]
 80079aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	69b9      	ldr	r1, [r7, #24]
 80079ae:	69fa      	ldr	r2, [r7, #28]
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	617b      	str	r3, [r7, #20]
   return(result);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e3      	bne.n	8007984 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f852 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079c8:	e023      	b.n	8007a12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <HAL_UART_IRQHandler+0x4ea>
 80079d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fadb 	bl	8007f9e <UART_Transmit_IT>
    return;
 80079e8:	e014      	b.n	8007a14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00e      	beq.n	8007a14 <HAL_UART_IRQHandler+0x514>
 80079f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d008      	beq.n	8007a14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fb1b 	bl	800803e <UART_EndTransmit_IT>
    return;
 8007a08:	e004      	b.n	8007a14 <HAL_UART_IRQHandler+0x514>
    return;
 8007a0a:	bf00      	nop
 8007a0c:	e002      	b.n	8007a14 <HAL_UART_IRQHandler+0x514>
      return;
 8007a0e:	bf00      	nop
 8007a10:	e000      	b.n	8007a14 <HAL_UART_IRQHandler+0x514>
      return;
 8007a12:	bf00      	nop
  }
}
 8007a14:	37e8      	adds	r7, #232	; 0xe8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop

08007a1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b090      	sub	sp, #64	; 0x40
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d137      	bne.n	8007b10 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3314      	adds	r3, #20
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007abc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3314      	adds	r3, #20
 8007ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ac6:	633a      	str	r2, [r7, #48]	; 0x30
 8007ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e5      	bne.n	8007aa6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	330c      	adds	r3, #12
 8007ae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af0:	637b      	str	r3, [r7, #52]	; 0x34
 8007af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	330c      	adds	r3, #12
 8007af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007afa:	61fa      	str	r2, [r7, #28]
 8007afc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	69b9      	ldr	r1, [r7, #24]
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	617b      	str	r3, [r7, #20]
   return(result);
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e5      	bne.n	8007ada <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b0e:	e002      	b.n	8007b16 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007b10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007b12:	f7ff ff83 	bl	8007a1c <HAL_UART_TxCpltCallback>
}
 8007b16:	bf00      	nop
 8007b18:	3740      	adds	r7, #64	; 0x40
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f7ff ff7f 	bl	8007a30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b32:	bf00      	nop
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b09c      	sub	sp, #112	; 0x70
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d172      	bne.n	8007c3c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b58:	2200      	movs	r2, #0
 8007b5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	330c      	adds	r3, #12
 8007b62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b72:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	330c      	adds	r3, #12
 8007b7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e5      	bne.n	8007b5c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3314      	adds	r3, #20
 8007b96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba2:	f023 0301 	bic.w	r3, r3, #1
 8007ba6:	667b      	str	r3, [r7, #100]	; 0x64
 8007ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3314      	adds	r3, #20
 8007bae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bb0:	647a      	str	r2, [r7, #68]	; 0x44
 8007bb2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e5      	bne.n	8007b90 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3314      	adds	r3, #20
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	e853 3f00 	ldrex	r3, [r3]
 8007bd2:	623b      	str	r3, [r7, #32]
   return(result);
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bda:	663b      	str	r3, [r7, #96]	; 0x60
 8007bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3314      	adds	r3, #20
 8007be2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007be4:	633a      	str	r2, [r7, #48]	; 0x30
 8007be6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e5      	bne.n	8007bc4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d119      	bne.n	8007c3c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	330c      	adds	r3, #12
 8007c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 0310 	bic.w	r3, r3, #16
 8007c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	330c      	adds	r3, #12
 8007c26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c28:	61fa      	str	r2, [r7, #28]
 8007c2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2c:	69b9      	ldr	r1, [r7, #24]
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	e841 2300 	strex	r3, r2, [r1]
 8007c34:	617b      	str	r3, [r7, #20]
   return(result);
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e5      	bne.n	8007c08 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d106      	bne.n	8007c52 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c4c:	f7ff ff0e 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c50:	e002      	b.n	8007c58 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007c52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c54:	f7f8 fcbe 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 8007c58:	bf00      	nop
 8007c5a:	3770      	adds	r7, #112	; 0x70
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d108      	bne.n	8007c88 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c7a:	085b      	lsrs	r3, r3, #1
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	4619      	mov	r1, r3
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f7ff fef3 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c86:	e002      	b.n	8007c8e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f7ff fedb 	bl	8007a44 <HAL_UART_RxHalfCpltCallback>
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb2:	2b80      	cmp	r3, #128	; 0x80
 8007cb4:	bf0c      	ite	eq
 8007cb6:	2301      	moveq	r3, #1
 8007cb8:	2300      	movne	r3, #0
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b21      	cmp	r3, #33	; 0x21
 8007cc8:	d108      	bne.n	8007cdc <UART_DMAError+0x46>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d005      	beq.n	8007cdc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007cd6:	68b8      	ldr	r0, [r7, #8]
 8007cd8:	f000 f8c2 	bl	8007e60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce6:	2b40      	cmp	r3, #64	; 0x40
 8007ce8:	bf0c      	ite	eq
 8007cea:	2301      	moveq	r3, #1
 8007cec:	2300      	movne	r3, #0
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b22      	cmp	r3, #34	; 0x22
 8007cfc:	d108      	bne.n	8007d10 <UART_DMAError+0x7a>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2200      	movs	r2, #0
 8007d08:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007d0a:	68b8      	ldr	r0, [r7, #8]
 8007d0c:	f000 f8d0 	bl	8007eb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d14:	f043 0210 	orr.w	r2, r3, #16
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d1c:	68b8      	ldr	r0, [r7, #8]
 8007d1e:	f7ff fe9b 	bl	8007a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
	...

08007d2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b098      	sub	sp, #96	; 0x60
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	88fa      	ldrh	r2, [r7, #6]
 8007d44:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2222      	movs	r2, #34	; 0x22
 8007d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	4a3e      	ldr	r2, [pc, #248]	; (8007e54 <UART_Start_Receive_DMA+0x128>)
 8007d5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d60:	4a3d      	ldr	r2, [pc, #244]	; (8007e58 <UART_Start_Receive_DMA+0x12c>)
 8007d62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d68:	4a3c      	ldr	r2, [pc, #240]	; (8007e5c <UART_Start_Receive_DMA+0x130>)
 8007d6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d70:	2200      	movs	r2, #0
 8007d72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007d74:	f107 0308 	add.w	r3, r7, #8
 8007d78:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4619      	mov	r1, r3
 8007d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	88fb      	ldrh	r3, [r7, #6]
 8007d8c:	f7fa f814 	bl	8001db8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007d90:	2300      	movs	r3, #0
 8007d92:	613b      	str	r3, [r7, #16]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	613b      	str	r3, [r7, #16]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	613b      	str	r3, [r7, #16]
 8007da4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	330c      	adds	r3, #12
 8007db4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	330c      	adds	r3, #12
 8007dcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dce:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007dd0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e5      	bne.n	8007dae <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3314      	adds	r3, #20
 8007de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df4:	f043 0301 	orr.w	r3, r3, #1
 8007df8:	657b      	str	r3, [r7, #84]	; 0x54
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3314      	adds	r3, #20
 8007e00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e02:	63ba      	str	r2, [r7, #56]	; 0x38
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e5      	bne.n	8007de2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3314      	adds	r3, #20
 8007e1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	617b      	str	r3, [r7, #20]
   return(result);
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e2c:	653b      	str	r3, [r7, #80]	; 0x50
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3314      	adds	r3, #20
 8007e34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e36:	627a      	str	r2, [r7, #36]	; 0x24
 8007e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	6a39      	ldr	r1, [r7, #32]
 8007e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e5      	bne.n	8007e16 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3760      	adds	r7, #96	; 0x60
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	08007b3b 	.word	0x08007b3b
 8007e58:	08007c61 	.word	0x08007c61
 8007e5c:	08007c97 	.word	0x08007c97

08007e60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b089      	sub	sp, #36	; 0x24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	330c      	adds	r3, #12
 8007e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	e853 3f00 	ldrex	r3, [r3]
 8007e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007e7e:	61fb      	str	r3, [r7, #28]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	330c      	adds	r3, #12
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	61ba      	str	r2, [r7, #24]
 8007e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6979      	ldr	r1, [r7, #20]
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	613b      	str	r3, [r7, #16]
   return(result);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e5      	bne.n	8007e68 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007ea4:	bf00      	nop
 8007ea6:	3724      	adds	r7, #36	; 0x24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b095      	sub	sp, #84	; 0x54
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	330c      	adds	r3, #12
 8007ebe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ed8:	643a      	str	r2, [r7, #64]	; 0x40
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e5      	bne.n	8007eb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3314      	adds	r3, #20
 8007ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	f023 0301 	bic.w	r3, r3, #1
 8007f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3314      	adds	r3, #20
 8007f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e5      	bne.n	8007eec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d119      	bne.n	8007f5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	330c      	adds	r3, #12
 8007f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	e853 3f00 	ldrex	r3, [r3]
 8007f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f023 0310 	bic.w	r3, r3, #16
 8007f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	330c      	adds	r3, #12
 8007f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f48:	61ba      	str	r2, [r7, #24]
 8007f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	6979      	ldr	r1, [r7, #20]
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	613b      	str	r3, [r7, #16]
   return(result);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e5      	bne.n	8007f28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f6a:	bf00      	nop
 8007f6c:	3754      	adds	r7, #84	; 0x54
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f7ff fd61 	bl	8007a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f96:	bf00      	nop
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b21      	cmp	r3, #33	; 0x21
 8007fb0:	d13e      	bne.n	8008030 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fba:	d114      	bne.n	8007fe6 <UART_Transmit_IT+0x48>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d110      	bne.n	8007fe6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	1c9a      	adds	r2, r3, #2
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	621a      	str	r2, [r3, #32]
 8007fe4:	e008      	b.n	8007ff8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	1c59      	adds	r1, r3, #1
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	6211      	str	r1, [r2, #32]
 8007ff0:	781a      	ldrb	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	3b01      	subs	r3, #1
 8008000:	b29b      	uxth	r3, r3
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	4619      	mov	r1, r3
 8008006:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10f      	bne.n	800802c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800801a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800802a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	e000      	b.n	8008032 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008030:	2302      	movs	r3, #2
  }
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68da      	ldr	r2, [r3, #12]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008054:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2220      	movs	r2, #32
 800805a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7ff fcdc 	bl	8007a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b08c      	sub	sp, #48	; 0x30
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b22      	cmp	r3, #34	; 0x22
 8008080:	f040 80ab 	bne.w	80081da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800808c:	d117      	bne.n	80080be <UART_Receive_IT+0x50>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d113      	bne.n	80080be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008096:	2300      	movs	r3, #0
 8008098:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b6:	1c9a      	adds	r2, r3, #2
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	629a      	str	r2, [r3, #40]	; 0x28
 80080bc:	e026      	b.n	800810c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d0:	d007      	beq.n	80080e2 <UART_Receive_IT+0x74>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10a      	bne.n	80080f0 <UART_Receive_IT+0x82>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ec:	701a      	strb	r2, [r3, #0]
 80080ee:	e008      	b.n	8008102 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008100:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008110:	b29b      	uxth	r3, r3
 8008112:	3b01      	subs	r3, #1
 8008114:	b29b      	uxth	r3, r3
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	4619      	mov	r1, r3
 800811a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800811c:	2b00      	cmp	r3, #0
 800811e:	d15a      	bne.n	80081d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 0220 	bic.w	r2, r2, #32
 800812e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800813e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	695a      	ldr	r2, [r3, #20]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 0201 	bic.w	r2, r2, #1
 800814e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2220      	movs	r2, #32
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815c:	2b01      	cmp	r3, #1
 800815e:	d135      	bne.n	80081cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	330c      	adds	r3, #12
 800816c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	613b      	str	r3, [r7, #16]
   return(result);
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f023 0310 	bic.w	r3, r3, #16
 800817c:	627b      	str	r3, [r7, #36]	; 0x24
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	330c      	adds	r3, #12
 8008184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008186:	623a      	str	r2, [r7, #32]
 8008188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	69f9      	ldr	r1, [r7, #28]
 800818c:	6a3a      	ldr	r2, [r7, #32]
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	61bb      	str	r3, [r7, #24]
   return(result);
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e5      	bne.n	8008166 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0310 	and.w	r3, r3, #16
 80081a4:	2b10      	cmp	r3, #16
 80081a6:	d10a      	bne.n	80081be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff fc51 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
 80081ca:	e002      	b.n	80081d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7f8 fa01 	bl	80005d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	e002      	b.n	80081dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e000      	b.n	80081dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80081da:	2302      	movs	r3, #2
  }
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3730      	adds	r7, #48	; 0x30
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081e8:	b0c0      	sub	sp, #256	; 0x100
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008200:	68d9      	ldr	r1, [r3, #12]
 8008202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	ea40 0301 	orr.w	r3, r0, r1
 800820c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800820e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	431a      	orrs	r2, r3
 800821c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	431a      	orrs	r2, r3
 8008224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	4313      	orrs	r3, r2
 800822c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800823c:	f021 010c 	bic.w	r1, r1, #12
 8008240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800824a:	430b      	orrs	r3, r1
 800824c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800824e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800825a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825e:	6999      	ldr	r1, [r3, #24]
 8008260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	ea40 0301 	orr.w	r3, r0, r1
 800826a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	4b8f      	ldr	r3, [pc, #572]	; (80084b0 <UART_SetConfig+0x2cc>)
 8008274:	429a      	cmp	r2, r3
 8008276:	d005      	beq.n	8008284 <UART_SetConfig+0xa0>
 8008278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	4b8d      	ldr	r3, [pc, #564]	; (80084b4 <UART_SetConfig+0x2d0>)
 8008280:	429a      	cmp	r2, r3
 8008282:	d104      	bne.n	800828e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008284:	f7fe f968 	bl	8006558 <HAL_RCC_GetPCLK2Freq>
 8008288:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800828c:	e003      	b.n	8008296 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800828e:	f7fe f94f 	bl	8006530 <HAL_RCC_GetPCLK1Freq>
 8008292:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082a0:	f040 810c 	bne.w	80084bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082a8:	2200      	movs	r2, #0
 80082aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80082b6:	4622      	mov	r2, r4
 80082b8:	462b      	mov	r3, r5
 80082ba:	1891      	adds	r1, r2, r2
 80082bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80082be:	415b      	adcs	r3, r3
 80082c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082c6:	4621      	mov	r1, r4
 80082c8:	eb12 0801 	adds.w	r8, r2, r1
 80082cc:	4629      	mov	r1, r5
 80082ce:	eb43 0901 	adc.w	r9, r3, r1
 80082d2:	f04f 0200 	mov.w	r2, #0
 80082d6:	f04f 0300 	mov.w	r3, #0
 80082da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082e6:	4690      	mov	r8, r2
 80082e8:	4699      	mov	r9, r3
 80082ea:	4623      	mov	r3, r4
 80082ec:	eb18 0303 	adds.w	r3, r8, r3
 80082f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082f4:	462b      	mov	r3, r5
 80082f6:	eb49 0303 	adc.w	r3, r9, r3
 80082fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800830a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800830e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008312:	460b      	mov	r3, r1
 8008314:	18db      	adds	r3, r3, r3
 8008316:	653b      	str	r3, [r7, #80]	; 0x50
 8008318:	4613      	mov	r3, r2
 800831a:	eb42 0303 	adc.w	r3, r2, r3
 800831e:	657b      	str	r3, [r7, #84]	; 0x54
 8008320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008324:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008328:	f7f7 ffb2 	bl	8000290 <__aeabi_uldivmod>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4b61      	ldr	r3, [pc, #388]	; (80084b8 <UART_SetConfig+0x2d4>)
 8008332:	fba3 2302 	umull	r2, r3, r3, r2
 8008336:	095b      	lsrs	r3, r3, #5
 8008338:	011c      	lsls	r4, r3, #4
 800833a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800833e:	2200      	movs	r2, #0
 8008340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008344:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008348:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800834c:	4642      	mov	r2, r8
 800834e:	464b      	mov	r3, r9
 8008350:	1891      	adds	r1, r2, r2
 8008352:	64b9      	str	r1, [r7, #72]	; 0x48
 8008354:	415b      	adcs	r3, r3
 8008356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008358:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800835c:	4641      	mov	r1, r8
 800835e:	eb12 0a01 	adds.w	sl, r2, r1
 8008362:	4649      	mov	r1, r9
 8008364:	eb43 0b01 	adc.w	fp, r3, r1
 8008368:	f04f 0200 	mov.w	r2, #0
 800836c:	f04f 0300 	mov.w	r3, #0
 8008370:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008374:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800837c:	4692      	mov	sl, r2
 800837e:	469b      	mov	fp, r3
 8008380:	4643      	mov	r3, r8
 8008382:	eb1a 0303 	adds.w	r3, sl, r3
 8008386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800838a:	464b      	mov	r3, r9
 800838c:	eb4b 0303 	adc.w	r3, fp, r3
 8008390:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80083a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083a8:	460b      	mov	r3, r1
 80083aa:	18db      	adds	r3, r3, r3
 80083ac:	643b      	str	r3, [r7, #64]	; 0x40
 80083ae:	4613      	mov	r3, r2
 80083b0:	eb42 0303 	adc.w	r3, r2, r3
 80083b4:	647b      	str	r3, [r7, #68]	; 0x44
 80083b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083be:	f7f7 ff67 	bl	8000290 <__aeabi_uldivmod>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4611      	mov	r1, r2
 80083c8:	4b3b      	ldr	r3, [pc, #236]	; (80084b8 <UART_SetConfig+0x2d4>)
 80083ca:	fba3 2301 	umull	r2, r3, r3, r1
 80083ce:	095b      	lsrs	r3, r3, #5
 80083d0:	2264      	movs	r2, #100	; 0x64
 80083d2:	fb02 f303 	mul.w	r3, r2, r3
 80083d6:	1acb      	subs	r3, r1, r3
 80083d8:	00db      	lsls	r3, r3, #3
 80083da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083de:	4b36      	ldr	r3, [pc, #216]	; (80084b8 <UART_SetConfig+0x2d4>)
 80083e0:	fba3 2302 	umull	r2, r3, r3, r2
 80083e4:	095b      	lsrs	r3, r3, #5
 80083e6:	005b      	lsls	r3, r3, #1
 80083e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083ec:	441c      	add	r4, r3
 80083ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008400:	4642      	mov	r2, r8
 8008402:	464b      	mov	r3, r9
 8008404:	1891      	adds	r1, r2, r2
 8008406:	63b9      	str	r1, [r7, #56]	; 0x38
 8008408:	415b      	adcs	r3, r3
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800840c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008410:	4641      	mov	r1, r8
 8008412:	1851      	adds	r1, r2, r1
 8008414:	6339      	str	r1, [r7, #48]	; 0x30
 8008416:	4649      	mov	r1, r9
 8008418:	414b      	adcs	r3, r1
 800841a:	637b      	str	r3, [r7, #52]	; 0x34
 800841c:	f04f 0200 	mov.w	r2, #0
 8008420:	f04f 0300 	mov.w	r3, #0
 8008424:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008428:	4659      	mov	r1, fp
 800842a:	00cb      	lsls	r3, r1, #3
 800842c:	4651      	mov	r1, sl
 800842e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008432:	4651      	mov	r1, sl
 8008434:	00ca      	lsls	r2, r1, #3
 8008436:	4610      	mov	r0, r2
 8008438:	4619      	mov	r1, r3
 800843a:	4603      	mov	r3, r0
 800843c:	4642      	mov	r2, r8
 800843e:	189b      	adds	r3, r3, r2
 8008440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008444:	464b      	mov	r3, r9
 8008446:	460a      	mov	r2, r1
 8008448:	eb42 0303 	adc.w	r3, r2, r3
 800844c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800845c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008464:	460b      	mov	r3, r1
 8008466:	18db      	adds	r3, r3, r3
 8008468:	62bb      	str	r3, [r7, #40]	; 0x28
 800846a:	4613      	mov	r3, r2
 800846c:	eb42 0303 	adc.w	r3, r2, r3
 8008470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008476:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800847a:	f7f7 ff09 	bl	8000290 <__aeabi_uldivmod>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	4b0d      	ldr	r3, [pc, #52]	; (80084b8 <UART_SetConfig+0x2d4>)
 8008484:	fba3 1302 	umull	r1, r3, r3, r2
 8008488:	095b      	lsrs	r3, r3, #5
 800848a:	2164      	movs	r1, #100	; 0x64
 800848c:	fb01 f303 	mul.w	r3, r1, r3
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	00db      	lsls	r3, r3, #3
 8008494:	3332      	adds	r3, #50	; 0x32
 8008496:	4a08      	ldr	r2, [pc, #32]	; (80084b8 <UART_SetConfig+0x2d4>)
 8008498:	fba2 2303 	umull	r2, r3, r2, r3
 800849c:	095b      	lsrs	r3, r3, #5
 800849e:	f003 0207 	and.w	r2, r3, #7
 80084a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4422      	add	r2, r4
 80084aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084ac:	e105      	b.n	80086ba <UART_SetConfig+0x4d6>
 80084ae:	bf00      	nop
 80084b0:	40011000 	.word	0x40011000
 80084b4:	40011400 	.word	0x40011400
 80084b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084c0:	2200      	movs	r2, #0
 80084c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084ce:	4642      	mov	r2, r8
 80084d0:	464b      	mov	r3, r9
 80084d2:	1891      	adds	r1, r2, r2
 80084d4:	6239      	str	r1, [r7, #32]
 80084d6:	415b      	adcs	r3, r3
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
 80084da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084de:	4641      	mov	r1, r8
 80084e0:	1854      	adds	r4, r2, r1
 80084e2:	4649      	mov	r1, r9
 80084e4:	eb43 0501 	adc.w	r5, r3, r1
 80084e8:	f04f 0200 	mov.w	r2, #0
 80084ec:	f04f 0300 	mov.w	r3, #0
 80084f0:	00eb      	lsls	r3, r5, #3
 80084f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084f6:	00e2      	lsls	r2, r4, #3
 80084f8:	4614      	mov	r4, r2
 80084fa:	461d      	mov	r5, r3
 80084fc:	4643      	mov	r3, r8
 80084fe:	18e3      	adds	r3, r4, r3
 8008500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008504:	464b      	mov	r3, r9
 8008506:	eb45 0303 	adc.w	r3, r5, r3
 800850a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800850e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800851a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800851e:	f04f 0200 	mov.w	r2, #0
 8008522:	f04f 0300 	mov.w	r3, #0
 8008526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800852a:	4629      	mov	r1, r5
 800852c:	008b      	lsls	r3, r1, #2
 800852e:	4621      	mov	r1, r4
 8008530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008534:	4621      	mov	r1, r4
 8008536:	008a      	lsls	r2, r1, #2
 8008538:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800853c:	f7f7 fea8 	bl	8000290 <__aeabi_uldivmod>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4b60      	ldr	r3, [pc, #384]	; (80086c8 <UART_SetConfig+0x4e4>)
 8008546:	fba3 2302 	umull	r2, r3, r3, r2
 800854a:	095b      	lsrs	r3, r3, #5
 800854c:	011c      	lsls	r4, r3, #4
 800854e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008552:	2200      	movs	r2, #0
 8008554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008558:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800855c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008560:	4642      	mov	r2, r8
 8008562:	464b      	mov	r3, r9
 8008564:	1891      	adds	r1, r2, r2
 8008566:	61b9      	str	r1, [r7, #24]
 8008568:	415b      	adcs	r3, r3
 800856a:	61fb      	str	r3, [r7, #28]
 800856c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008570:	4641      	mov	r1, r8
 8008572:	1851      	adds	r1, r2, r1
 8008574:	6139      	str	r1, [r7, #16]
 8008576:	4649      	mov	r1, r9
 8008578:	414b      	adcs	r3, r1
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	f04f 0200 	mov.w	r2, #0
 8008580:	f04f 0300 	mov.w	r3, #0
 8008584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008588:	4659      	mov	r1, fp
 800858a:	00cb      	lsls	r3, r1, #3
 800858c:	4651      	mov	r1, sl
 800858e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008592:	4651      	mov	r1, sl
 8008594:	00ca      	lsls	r2, r1, #3
 8008596:	4610      	mov	r0, r2
 8008598:	4619      	mov	r1, r3
 800859a:	4603      	mov	r3, r0
 800859c:	4642      	mov	r2, r8
 800859e:	189b      	adds	r3, r3, r2
 80085a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085a4:	464b      	mov	r3, r9
 80085a6:	460a      	mov	r2, r1
 80085a8:	eb42 0303 	adc.w	r3, r2, r3
 80085ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80085ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085bc:	f04f 0200 	mov.w	r2, #0
 80085c0:	f04f 0300 	mov.w	r3, #0
 80085c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085c8:	4649      	mov	r1, r9
 80085ca:	008b      	lsls	r3, r1, #2
 80085cc:	4641      	mov	r1, r8
 80085ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085d2:	4641      	mov	r1, r8
 80085d4:	008a      	lsls	r2, r1, #2
 80085d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085da:	f7f7 fe59 	bl	8000290 <__aeabi_uldivmod>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	4b39      	ldr	r3, [pc, #228]	; (80086c8 <UART_SetConfig+0x4e4>)
 80085e4:	fba3 1302 	umull	r1, r3, r3, r2
 80085e8:	095b      	lsrs	r3, r3, #5
 80085ea:	2164      	movs	r1, #100	; 0x64
 80085ec:	fb01 f303 	mul.w	r3, r1, r3
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	011b      	lsls	r3, r3, #4
 80085f4:	3332      	adds	r3, #50	; 0x32
 80085f6:	4a34      	ldr	r2, [pc, #208]	; (80086c8 <UART_SetConfig+0x4e4>)
 80085f8:	fba2 2303 	umull	r2, r3, r2, r3
 80085fc:	095b      	lsrs	r3, r3, #5
 80085fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008602:	441c      	add	r4, r3
 8008604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008608:	2200      	movs	r2, #0
 800860a:	673b      	str	r3, [r7, #112]	; 0x70
 800860c:	677a      	str	r2, [r7, #116]	; 0x74
 800860e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008612:	4642      	mov	r2, r8
 8008614:	464b      	mov	r3, r9
 8008616:	1891      	adds	r1, r2, r2
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	415b      	adcs	r3, r3
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008622:	4641      	mov	r1, r8
 8008624:	1851      	adds	r1, r2, r1
 8008626:	6039      	str	r1, [r7, #0]
 8008628:	4649      	mov	r1, r9
 800862a:	414b      	adcs	r3, r1
 800862c:	607b      	str	r3, [r7, #4]
 800862e:	f04f 0200 	mov.w	r2, #0
 8008632:	f04f 0300 	mov.w	r3, #0
 8008636:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800863a:	4659      	mov	r1, fp
 800863c:	00cb      	lsls	r3, r1, #3
 800863e:	4651      	mov	r1, sl
 8008640:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008644:	4651      	mov	r1, sl
 8008646:	00ca      	lsls	r2, r1, #3
 8008648:	4610      	mov	r0, r2
 800864a:	4619      	mov	r1, r3
 800864c:	4603      	mov	r3, r0
 800864e:	4642      	mov	r2, r8
 8008650:	189b      	adds	r3, r3, r2
 8008652:	66bb      	str	r3, [r7, #104]	; 0x68
 8008654:	464b      	mov	r3, r9
 8008656:	460a      	mov	r2, r1
 8008658:	eb42 0303 	adc.w	r3, r2, r3
 800865c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800865e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	663b      	str	r3, [r7, #96]	; 0x60
 8008668:	667a      	str	r2, [r7, #100]	; 0x64
 800866a:	f04f 0200 	mov.w	r2, #0
 800866e:	f04f 0300 	mov.w	r3, #0
 8008672:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008676:	4649      	mov	r1, r9
 8008678:	008b      	lsls	r3, r1, #2
 800867a:	4641      	mov	r1, r8
 800867c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008680:	4641      	mov	r1, r8
 8008682:	008a      	lsls	r2, r1, #2
 8008684:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008688:	f7f7 fe02 	bl	8000290 <__aeabi_uldivmod>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4b0d      	ldr	r3, [pc, #52]	; (80086c8 <UART_SetConfig+0x4e4>)
 8008692:	fba3 1302 	umull	r1, r3, r3, r2
 8008696:	095b      	lsrs	r3, r3, #5
 8008698:	2164      	movs	r1, #100	; 0x64
 800869a:	fb01 f303 	mul.w	r3, r1, r3
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	3332      	adds	r3, #50	; 0x32
 80086a4:	4a08      	ldr	r2, [pc, #32]	; (80086c8 <UART_SetConfig+0x4e4>)
 80086a6:	fba2 2303 	umull	r2, r3, r2, r3
 80086aa:	095b      	lsrs	r3, r3, #5
 80086ac:	f003 020f 	and.w	r2, r3, #15
 80086b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4422      	add	r2, r4
 80086b8:	609a      	str	r2, [r3, #8]
}
 80086ba:	bf00      	nop
 80086bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80086c0:	46bd      	mov	sp, r7
 80086c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086c6:	bf00      	nop
 80086c8:	51eb851f 	.word	0x51eb851f

080086cc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80086d2:	4b8d      	ldr	r3, [pc, #564]	; (8008908 <MX_LWIP_Init+0x23c>)
 80086d4:	22c0      	movs	r2, #192	; 0xc0
 80086d6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80086d8:	4b8b      	ldr	r3, [pc, #556]	; (8008908 <MX_LWIP_Init+0x23c>)
 80086da:	22a8      	movs	r2, #168	; 0xa8
 80086dc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80086de:	4b8a      	ldr	r3, [pc, #552]	; (8008908 <MX_LWIP_Init+0x23c>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 132;
 80086e4:	4b88      	ldr	r3, [pc, #544]	; (8008908 <MX_LWIP_Init+0x23c>)
 80086e6:	2284      	movs	r2, #132	; 0x84
 80086e8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80086ea:	4b88      	ldr	r3, [pc, #544]	; (800890c <MX_LWIP_Init+0x240>)
 80086ec:	22ff      	movs	r2, #255	; 0xff
 80086ee:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80086f0:	4b86      	ldr	r3, [pc, #536]	; (800890c <MX_LWIP_Init+0x240>)
 80086f2:	22ff      	movs	r2, #255	; 0xff
 80086f4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80086f6:	4b85      	ldr	r3, [pc, #532]	; (800890c <MX_LWIP_Init+0x240>)
 80086f8:	22ff      	movs	r2, #255	; 0xff
 80086fa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80086fc:	4b83      	ldr	r3, [pc, #524]	; (800890c <MX_LWIP_Init+0x240>)
 80086fe:	2200      	movs	r2, #0
 8008700:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8008702:	4b83      	ldr	r3, [pc, #524]	; (8008910 <MX_LWIP_Init+0x244>)
 8008704:	22c0      	movs	r2, #192	; 0xc0
 8008706:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008708:	4b81      	ldr	r3, [pc, #516]	; (8008910 <MX_LWIP_Init+0x244>)
 800870a:	22a8      	movs	r2, #168	; 0xa8
 800870c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800870e:	4b80      	ldr	r3, [pc, #512]	; (8008910 <MX_LWIP_Init+0x244>)
 8008710:	2200      	movs	r2, #0
 8008712:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008714:	4b7e      	ldr	r3, [pc, #504]	; (8008910 <MX_LWIP_Init+0x244>)
 8008716:	2201      	movs	r2, #1
 8008718:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800871a:	f000 fcdf 	bl	80090dc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800871e:	4b7a      	ldr	r3, [pc, #488]	; (8008908 <MX_LWIP_Init+0x23c>)
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	061a      	lsls	r2, r3, #24
 8008724:	4b78      	ldr	r3, [pc, #480]	; (8008908 <MX_LWIP_Init+0x23c>)
 8008726:	785b      	ldrb	r3, [r3, #1]
 8008728:	041b      	lsls	r3, r3, #16
 800872a:	431a      	orrs	r2, r3
 800872c:	4b76      	ldr	r3, [pc, #472]	; (8008908 <MX_LWIP_Init+0x23c>)
 800872e:	789b      	ldrb	r3, [r3, #2]
 8008730:	021b      	lsls	r3, r3, #8
 8008732:	4313      	orrs	r3, r2
 8008734:	4a74      	ldr	r2, [pc, #464]	; (8008908 <MX_LWIP_Init+0x23c>)
 8008736:	78d2      	ldrb	r2, [r2, #3]
 8008738:	4313      	orrs	r3, r2
 800873a:	061a      	lsls	r2, r3, #24
 800873c:	4b72      	ldr	r3, [pc, #456]	; (8008908 <MX_LWIP_Init+0x23c>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	0619      	lsls	r1, r3, #24
 8008742:	4b71      	ldr	r3, [pc, #452]	; (8008908 <MX_LWIP_Init+0x23c>)
 8008744:	785b      	ldrb	r3, [r3, #1]
 8008746:	041b      	lsls	r3, r3, #16
 8008748:	4319      	orrs	r1, r3
 800874a:	4b6f      	ldr	r3, [pc, #444]	; (8008908 <MX_LWIP_Init+0x23c>)
 800874c:	789b      	ldrb	r3, [r3, #2]
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	430b      	orrs	r3, r1
 8008752:	496d      	ldr	r1, [pc, #436]	; (8008908 <MX_LWIP_Init+0x23c>)
 8008754:	78c9      	ldrb	r1, [r1, #3]
 8008756:	430b      	orrs	r3, r1
 8008758:	021b      	lsls	r3, r3, #8
 800875a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800875e:	431a      	orrs	r2, r3
 8008760:	4b69      	ldr	r3, [pc, #420]	; (8008908 <MX_LWIP_Init+0x23c>)
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	0619      	lsls	r1, r3, #24
 8008766:	4b68      	ldr	r3, [pc, #416]	; (8008908 <MX_LWIP_Init+0x23c>)
 8008768:	785b      	ldrb	r3, [r3, #1]
 800876a:	041b      	lsls	r3, r3, #16
 800876c:	4319      	orrs	r1, r3
 800876e:	4b66      	ldr	r3, [pc, #408]	; (8008908 <MX_LWIP_Init+0x23c>)
 8008770:	789b      	ldrb	r3, [r3, #2]
 8008772:	021b      	lsls	r3, r3, #8
 8008774:	430b      	orrs	r3, r1
 8008776:	4964      	ldr	r1, [pc, #400]	; (8008908 <MX_LWIP_Init+0x23c>)
 8008778:	78c9      	ldrb	r1, [r1, #3]
 800877a:	430b      	orrs	r3, r1
 800877c:	0a1b      	lsrs	r3, r3, #8
 800877e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008782:	431a      	orrs	r2, r3
 8008784:	4b60      	ldr	r3, [pc, #384]	; (8008908 <MX_LWIP_Init+0x23c>)
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	0619      	lsls	r1, r3, #24
 800878a:	4b5f      	ldr	r3, [pc, #380]	; (8008908 <MX_LWIP_Init+0x23c>)
 800878c:	785b      	ldrb	r3, [r3, #1]
 800878e:	041b      	lsls	r3, r3, #16
 8008790:	4319      	orrs	r1, r3
 8008792:	4b5d      	ldr	r3, [pc, #372]	; (8008908 <MX_LWIP_Init+0x23c>)
 8008794:	789b      	ldrb	r3, [r3, #2]
 8008796:	021b      	lsls	r3, r3, #8
 8008798:	430b      	orrs	r3, r1
 800879a:	495b      	ldr	r1, [pc, #364]	; (8008908 <MX_LWIP_Init+0x23c>)
 800879c:	78c9      	ldrb	r1, [r1, #3]
 800879e:	430b      	orrs	r3, r1
 80087a0:	0e1b      	lsrs	r3, r3, #24
 80087a2:	4313      	orrs	r3, r2
 80087a4:	4a5b      	ldr	r2, [pc, #364]	; (8008914 <MX_LWIP_Init+0x248>)
 80087a6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80087a8:	4b58      	ldr	r3, [pc, #352]	; (800890c <MX_LWIP_Init+0x240>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	061a      	lsls	r2, r3, #24
 80087ae:	4b57      	ldr	r3, [pc, #348]	; (800890c <MX_LWIP_Init+0x240>)
 80087b0:	785b      	ldrb	r3, [r3, #1]
 80087b2:	041b      	lsls	r3, r3, #16
 80087b4:	431a      	orrs	r2, r3
 80087b6:	4b55      	ldr	r3, [pc, #340]	; (800890c <MX_LWIP_Init+0x240>)
 80087b8:	789b      	ldrb	r3, [r3, #2]
 80087ba:	021b      	lsls	r3, r3, #8
 80087bc:	4313      	orrs	r3, r2
 80087be:	4a53      	ldr	r2, [pc, #332]	; (800890c <MX_LWIP_Init+0x240>)
 80087c0:	78d2      	ldrb	r2, [r2, #3]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	061a      	lsls	r2, r3, #24
 80087c6:	4b51      	ldr	r3, [pc, #324]	; (800890c <MX_LWIP_Init+0x240>)
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	0619      	lsls	r1, r3, #24
 80087cc:	4b4f      	ldr	r3, [pc, #316]	; (800890c <MX_LWIP_Init+0x240>)
 80087ce:	785b      	ldrb	r3, [r3, #1]
 80087d0:	041b      	lsls	r3, r3, #16
 80087d2:	4319      	orrs	r1, r3
 80087d4:	4b4d      	ldr	r3, [pc, #308]	; (800890c <MX_LWIP_Init+0x240>)
 80087d6:	789b      	ldrb	r3, [r3, #2]
 80087d8:	021b      	lsls	r3, r3, #8
 80087da:	430b      	orrs	r3, r1
 80087dc:	494b      	ldr	r1, [pc, #300]	; (800890c <MX_LWIP_Init+0x240>)
 80087de:	78c9      	ldrb	r1, [r1, #3]
 80087e0:	430b      	orrs	r3, r1
 80087e2:	021b      	lsls	r3, r3, #8
 80087e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087e8:	431a      	orrs	r2, r3
 80087ea:	4b48      	ldr	r3, [pc, #288]	; (800890c <MX_LWIP_Init+0x240>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	0619      	lsls	r1, r3, #24
 80087f0:	4b46      	ldr	r3, [pc, #280]	; (800890c <MX_LWIP_Init+0x240>)
 80087f2:	785b      	ldrb	r3, [r3, #1]
 80087f4:	041b      	lsls	r3, r3, #16
 80087f6:	4319      	orrs	r1, r3
 80087f8:	4b44      	ldr	r3, [pc, #272]	; (800890c <MX_LWIP_Init+0x240>)
 80087fa:	789b      	ldrb	r3, [r3, #2]
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	430b      	orrs	r3, r1
 8008800:	4942      	ldr	r1, [pc, #264]	; (800890c <MX_LWIP_Init+0x240>)
 8008802:	78c9      	ldrb	r1, [r1, #3]
 8008804:	430b      	orrs	r3, r1
 8008806:	0a1b      	lsrs	r3, r3, #8
 8008808:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800880c:	431a      	orrs	r2, r3
 800880e:	4b3f      	ldr	r3, [pc, #252]	; (800890c <MX_LWIP_Init+0x240>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	0619      	lsls	r1, r3, #24
 8008814:	4b3d      	ldr	r3, [pc, #244]	; (800890c <MX_LWIP_Init+0x240>)
 8008816:	785b      	ldrb	r3, [r3, #1]
 8008818:	041b      	lsls	r3, r3, #16
 800881a:	4319      	orrs	r1, r3
 800881c:	4b3b      	ldr	r3, [pc, #236]	; (800890c <MX_LWIP_Init+0x240>)
 800881e:	789b      	ldrb	r3, [r3, #2]
 8008820:	021b      	lsls	r3, r3, #8
 8008822:	430b      	orrs	r3, r1
 8008824:	4939      	ldr	r1, [pc, #228]	; (800890c <MX_LWIP_Init+0x240>)
 8008826:	78c9      	ldrb	r1, [r1, #3]
 8008828:	430b      	orrs	r3, r1
 800882a:	0e1b      	lsrs	r3, r3, #24
 800882c:	4313      	orrs	r3, r2
 800882e:	4a3a      	ldr	r2, [pc, #232]	; (8008918 <MX_LWIP_Init+0x24c>)
 8008830:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008832:	4b37      	ldr	r3, [pc, #220]	; (8008910 <MX_LWIP_Init+0x244>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	061a      	lsls	r2, r3, #24
 8008838:	4b35      	ldr	r3, [pc, #212]	; (8008910 <MX_LWIP_Init+0x244>)
 800883a:	785b      	ldrb	r3, [r3, #1]
 800883c:	041b      	lsls	r3, r3, #16
 800883e:	431a      	orrs	r2, r3
 8008840:	4b33      	ldr	r3, [pc, #204]	; (8008910 <MX_LWIP_Init+0x244>)
 8008842:	789b      	ldrb	r3, [r3, #2]
 8008844:	021b      	lsls	r3, r3, #8
 8008846:	4313      	orrs	r3, r2
 8008848:	4a31      	ldr	r2, [pc, #196]	; (8008910 <MX_LWIP_Init+0x244>)
 800884a:	78d2      	ldrb	r2, [r2, #3]
 800884c:	4313      	orrs	r3, r2
 800884e:	061a      	lsls	r2, r3, #24
 8008850:	4b2f      	ldr	r3, [pc, #188]	; (8008910 <MX_LWIP_Init+0x244>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	0619      	lsls	r1, r3, #24
 8008856:	4b2e      	ldr	r3, [pc, #184]	; (8008910 <MX_LWIP_Init+0x244>)
 8008858:	785b      	ldrb	r3, [r3, #1]
 800885a:	041b      	lsls	r3, r3, #16
 800885c:	4319      	orrs	r1, r3
 800885e:	4b2c      	ldr	r3, [pc, #176]	; (8008910 <MX_LWIP_Init+0x244>)
 8008860:	789b      	ldrb	r3, [r3, #2]
 8008862:	021b      	lsls	r3, r3, #8
 8008864:	430b      	orrs	r3, r1
 8008866:	492a      	ldr	r1, [pc, #168]	; (8008910 <MX_LWIP_Init+0x244>)
 8008868:	78c9      	ldrb	r1, [r1, #3]
 800886a:	430b      	orrs	r3, r1
 800886c:	021b      	lsls	r3, r3, #8
 800886e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008872:	431a      	orrs	r2, r3
 8008874:	4b26      	ldr	r3, [pc, #152]	; (8008910 <MX_LWIP_Init+0x244>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	0619      	lsls	r1, r3, #24
 800887a:	4b25      	ldr	r3, [pc, #148]	; (8008910 <MX_LWIP_Init+0x244>)
 800887c:	785b      	ldrb	r3, [r3, #1]
 800887e:	041b      	lsls	r3, r3, #16
 8008880:	4319      	orrs	r1, r3
 8008882:	4b23      	ldr	r3, [pc, #140]	; (8008910 <MX_LWIP_Init+0x244>)
 8008884:	789b      	ldrb	r3, [r3, #2]
 8008886:	021b      	lsls	r3, r3, #8
 8008888:	430b      	orrs	r3, r1
 800888a:	4921      	ldr	r1, [pc, #132]	; (8008910 <MX_LWIP_Init+0x244>)
 800888c:	78c9      	ldrb	r1, [r1, #3]
 800888e:	430b      	orrs	r3, r1
 8008890:	0a1b      	lsrs	r3, r3, #8
 8008892:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008896:	431a      	orrs	r2, r3
 8008898:	4b1d      	ldr	r3, [pc, #116]	; (8008910 <MX_LWIP_Init+0x244>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	0619      	lsls	r1, r3, #24
 800889e:	4b1c      	ldr	r3, [pc, #112]	; (8008910 <MX_LWIP_Init+0x244>)
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	041b      	lsls	r3, r3, #16
 80088a4:	4319      	orrs	r1, r3
 80088a6:	4b1a      	ldr	r3, [pc, #104]	; (8008910 <MX_LWIP_Init+0x244>)
 80088a8:	789b      	ldrb	r3, [r3, #2]
 80088aa:	021b      	lsls	r3, r3, #8
 80088ac:	430b      	orrs	r3, r1
 80088ae:	4918      	ldr	r1, [pc, #96]	; (8008910 <MX_LWIP_Init+0x244>)
 80088b0:	78c9      	ldrb	r1, [r1, #3]
 80088b2:	430b      	orrs	r3, r1
 80088b4:	0e1b      	lsrs	r3, r3, #24
 80088b6:	4313      	orrs	r3, r2
 80088b8:	4a18      	ldr	r2, [pc, #96]	; (800891c <MX_LWIP_Init+0x250>)
 80088ba:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80088bc:	4b18      	ldr	r3, [pc, #96]	; (8008920 <MX_LWIP_Init+0x254>)
 80088be:	9302      	str	r3, [sp, #8]
 80088c0:	4b18      	ldr	r3, [pc, #96]	; (8008924 <MX_LWIP_Init+0x258>)
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	2300      	movs	r3, #0
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	4b14      	ldr	r3, [pc, #80]	; (800891c <MX_LWIP_Init+0x250>)
 80088ca:	4a13      	ldr	r2, [pc, #76]	; (8008918 <MX_LWIP_Init+0x24c>)
 80088cc:	4911      	ldr	r1, [pc, #68]	; (8008914 <MX_LWIP_Init+0x248>)
 80088ce:	4816      	ldr	r0, [pc, #88]	; (8008928 <MX_LWIP_Init+0x25c>)
 80088d0:	f001 f8aa 	bl	8009a28 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80088d4:	4814      	ldr	r0, [pc, #80]	; (8008928 <MX_LWIP_Init+0x25c>)
 80088d6:	f001 fa59 	bl	8009d8c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80088da:	4b13      	ldr	r3, [pc, #76]	; (8008928 <MX_LWIP_Init+0x25c>)
 80088dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088e0:	089b      	lsrs	r3, r3, #2
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80088ec:	480e      	ldr	r0, [pc, #56]	; (8008928 <MX_LWIP_Init+0x25c>)
 80088ee:	f001 fa5d 	bl	8009dac <netif_set_up>
 80088f2:	e002      	b.n	80088fa <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80088f4:	480c      	ldr	r0, [pc, #48]	; (8008928 <MX_LWIP_Init+0x25c>)
 80088f6:	f001 fac5 	bl	8009e84 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80088fa:	490c      	ldr	r1, [pc, #48]	; (800892c <MX_LWIP_Init+0x260>)
 80088fc:	480a      	ldr	r0, [pc, #40]	; (8008928 <MX_LWIP_Init+0x25c>)
 80088fe:	f001 faf3 	bl	8009ee8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008902:	bf00      	nop
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	20000690 	.word	0x20000690
 800890c:	20000694 	.word	0x20000694
 8008910:	20000698 	.word	0x20000698
 8008914:	20000684 	.word	0x20000684
 8008918:	20000688 	.word	0x20000688
 800891c:	2000068c 	.word	0x2000068c
 8008920:	0801305d 	.word	0x0801305d
 8008924:	08008f09 	.word	0x08008f09
 8008928:	20000650 	.word	0x20000650
 800892c:	08008f75 	.word	0x08008f75

08008930 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b08e      	sub	sp, #56	; 0x38
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	605a      	str	r2, [r3, #4]
 8008942:	609a      	str	r2, [r3, #8]
 8008944:	60da      	str	r2, [r3, #12]
 8008946:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a59      	ldr	r2, [pc, #356]	; (8008ab4 <HAL_ETH_MspInit+0x184>)
 800894e:	4293      	cmp	r3, r2
 8008950:	f040 80ac 	bne.w	8008aac <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008954:	2300      	movs	r3, #0
 8008956:	623b      	str	r3, [r7, #32]
 8008958:	4b57      	ldr	r3, [pc, #348]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 800895a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895c:	4a56      	ldr	r2, [pc, #344]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 800895e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008962:	6313      	str	r3, [r2, #48]	; 0x30
 8008964:	4b54      	ldr	r3, [pc, #336]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 8008966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800896c:	623b      	str	r3, [r7, #32]
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	2300      	movs	r3, #0
 8008972:	61fb      	str	r3, [r7, #28]
 8008974:	4b50      	ldr	r3, [pc, #320]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 8008976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008978:	4a4f      	ldr	r2, [pc, #316]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 800897a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800897e:	6313      	str	r3, [r2, #48]	; 0x30
 8008980:	4b4d      	ldr	r3, [pc, #308]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 8008982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008988:	61fb      	str	r3, [r7, #28]
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	2300      	movs	r3, #0
 800898e:	61bb      	str	r3, [r7, #24]
 8008990:	4b49      	ldr	r3, [pc, #292]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 8008992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008994:	4a48      	ldr	r2, [pc, #288]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 8008996:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800899a:	6313      	str	r3, [r2, #48]	; 0x30
 800899c:	4b46      	ldr	r3, [pc, #280]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 800899e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089a4:	61bb      	str	r3, [r7, #24]
 80089a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80089a8:	2300      	movs	r3, #0
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	4b42      	ldr	r3, [pc, #264]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 80089ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b0:	4a41      	ldr	r2, [pc, #260]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 80089b2:	f043 0304 	orr.w	r3, r3, #4
 80089b6:	6313      	str	r3, [r2, #48]	; 0x30
 80089b8:	4b3f      	ldr	r3, [pc, #252]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 80089ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089c4:	2300      	movs	r3, #0
 80089c6:	613b      	str	r3, [r7, #16]
 80089c8:	4b3b      	ldr	r3, [pc, #236]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 80089ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089cc:	4a3a      	ldr	r2, [pc, #232]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 80089ce:	f043 0301 	orr.w	r3, r3, #1
 80089d2:	6313      	str	r3, [r2, #48]	; 0x30
 80089d4:	4b38      	ldr	r3, [pc, #224]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 80089d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	613b      	str	r3, [r7, #16]
 80089de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089e0:	2300      	movs	r3, #0
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	4b34      	ldr	r3, [pc, #208]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 80089e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e8:	4a33      	ldr	r2, [pc, #204]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 80089ea:	f043 0302 	orr.w	r3, r3, #2
 80089ee:	6313      	str	r3, [r2, #48]	; 0x30
 80089f0:	4b31      	ldr	r3, [pc, #196]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 80089f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80089fc:	2300      	movs	r3, #0
 80089fe:	60bb      	str	r3, [r7, #8]
 8008a00:	4b2d      	ldr	r3, [pc, #180]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 8008a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a04:	4a2c      	ldr	r2, [pc, #176]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 8008a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8008a0c:	4b2a      	ldr	r3, [pc, #168]	; (8008ab8 <HAL_ETH_MspInit+0x188>)
 8008a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a14:	60bb      	str	r3, [r7, #8]
 8008a16:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008a18:	2332      	movs	r3, #50	; 0x32
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a20:	2300      	movs	r3, #0
 8008a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a24:	2303      	movs	r3, #3
 8008a26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008a28:	230b      	movs	r3, #11
 8008a2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a30:	4619      	mov	r1, r3
 8008a32:	4822      	ldr	r0, [pc, #136]	; (8008abc <HAL_ETH_MspInit+0x18c>)
 8008a34:	f7fa fec2 	bl	80037bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008a38:	2386      	movs	r3, #134	; 0x86
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a44:	2303      	movs	r3, #3
 8008a46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008a48:	230b      	movs	r3, #11
 8008a4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a50:	4619      	mov	r1, r3
 8008a52:	481b      	ldr	r0, [pc, #108]	; (8008ac0 <HAL_ETH_MspInit+0x190>)
 8008a54:	f7fa feb2 	bl	80037bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 8008a58:	f242 0301 	movw	r3, #8193	; 0x2001
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a66:	2303      	movs	r3, #3
 8008a68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008a6a:	230b      	movs	r3, #11
 8008a6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a72:	4619      	mov	r1, r3
 8008a74:	4813      	ldr	r0, [pc, #76]	; (8008ac4 <HAL_ETH_MspInit+0x194>)
 8008a76:	f7fa fea1 	bl	80037bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008a7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a80:	2302      	movs	r3, #2
 8008a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a84:	2300      	movs	r3, #0
 8008a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008a8c:	230b      	movs	r3, #11
 8008a8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a94:	4619      	mov	r1, r3
 8008a96:	480c      	ldr	r0, [pc, #48]	; (8008ac8 <HAL_ETH_MspInit+0x198>)
 8008a98:	f7fa fe90 	bl	80037bc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	203d      	movs	r0, #61	; 0x3d
 8008aa2:	f7f9 f8a4 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008aa6:	203d      	movs	r0, #61	; 0x3d
 8008aa8:	f7f9 f8bd 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008aac:	bf00      	nop
 8008aae:	3738      	adds	r7, #56	; 0x38
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	40028000 	.word	0x40028000
 8008ab8:	40023800 	.word	0x40023800
 8008abc:	40020800 	.word	0x40020800
 8008ac0:	40020000 	.word	0x40020000
 8008ac4:	40020400 	.word	0x40020400
 8008ac8:	40021800 	.word	0x40021800

08008acc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008ad8:	4b4d      	ldr	r3, [pc, #308]	; (8008c10 <low_level_init+0x144>)
 8008ada:	4a4e      	ldr	r2, [pc, #312]	; (8008c14 <low_level_init+0x148>)
 8008adc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008ade:	4b4c      	ldr	r3, [pc, #304]	; (8008c10 <low_level_init+0x144>)
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008ae4:	4b4a      	ldr	r3, [pc, #296]	; (8008c10 <low_level_init+0x144>)
 8008ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008aea:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008aec:	4b48      	ldr	r3, [pc, #288]	; (8008c10 <low_level_init+0x144>)
 8008aee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008af2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008af4:	4b46      	ldr	r3, [pc, #280]	; (8008c10 <low_level_init+0x144>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8008afa:	2300      	movs	r3, #0
 8008afc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008afe:	2380      	movs	r3, #128	; 0x80
 8008b00:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008b02:	23e1      	movs	r3, #225	; 0xe1
 8008b04:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008b06:	2300      	movs	r3, #0
 8008b08:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008b12:	4a3f      	ldr	r2, [pc, #252]	; (8008c10 <low_level_init+0x144>)
 8008b14:	f107 0308 	add.w	r3, r7, #8
 8008b18:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8008b1a:	4b3d      	ldr	r3, [pc, #244]	; (8008c10 <low_level_init+0x144>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008b20:	4b3b      	ldr	r3, [pc, #236]	; (8008c10 <low_level_init+0x144>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008b26:	4b3a      	ldr	r3, [pc, #232]	; (8008c10 <low_level_init+0x144>)
 8008b28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008b2c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008b2e:	4838      	ldr	r0, [pc, #224]	; (8008c10 <low_level_init+0x144>)
 8008b30:	f7f9 fcb0 	bl	8002494 <HAL_ETH_Init>
 8008b34:	4603      	mov	r3, r0
 8008b36:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d108      	bne.n	8008b50 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b44:	f043 0304 	orr.w	r3, r3, #4
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008b50:	2304      	movs	r3, #4
 8008b52:	4a31      	ldr	r2, [pc, #196]	; (8008c18 <low_level_init+0x14c>)
 8008b54:	4931      	ldr	r1, [pc, #196]	; (8008c1c <low_level_init+0x150>)
 8008b56:	482e      	ldr	r0, [pc, #184]	; (8008c10 <low_level_init+0x144>)
 8008b58:	f7f9 fe36 	bl	80027c8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008b5c:	2304      	movs	r3, #4
 8008b5e:	4a30      	ldr	r2, [pc, #192]	; (8008c20 <low_level_init+0x154>)
 8008b60:	4930      	ldr	r1, [pc, #192]	; (8008c24 <low_level_init+0x158>)
 8008b62:	482b      	ldr	r0, [pc, #172]	; (8008c10 <low_level_init+0x144>)
 8008b64:	f7f9 fe98 	bl	8002898 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2206      	movs	r2, #6
 8008b6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008b70:	4b27      	ldr	r3, [pc, #156]	; (8008c10 <low_level_init+0x144>)
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	781a      	ldrb	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008b7c:	4b24      	ldr	r3, [pc, #144]	; (8008c10 <low_level_init+0x144>)
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	785a      	ldrb	r2, [r3, #1]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008b88:	4b21      	ldr	r3, [pc, #132]	; (8008c10 <low_level_init+0x144>)
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	789a      	ldrb	r2, [r3, #2]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008b94:	4b1e      	ldr	r3, [pc, #120]	; (8008c10 <low_level_init+0x144>)
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	78da      	ldrb	r2, [r3, #3]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008ba0:	4b1b      	ldr	r3, [pc, #108]	; (8008c10 <low_level_init+0x144>)
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	791a      	ldrb	r2, [r3, #4]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008bac:	4b18      	ldr	r3, [pc, #96]	; (8008c10 <low_level_init+0x144>)
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	795a      	ldrb	r2, [r3, #5]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008bbe:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008bc6:	f043 030a 	orr.w	r3, r3, #10
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008bd2:	480f      	ldr	r0, [pc, #60]	; (8008c10 <low_level_init+0x144>)
 8008bd4:	f7fa f98a 	bl	8002eec <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008bd8:	f107 0310 	add.w	r3, r7, #16
 8008bdc:	461a      	mov	r2, r3
 8008bde:	211d      	movs	r1, #29
 8008be0:	480b      	ldr	r0, [pc, #44]	; (8008c10 <low_level_init+0x144>)
 8008be2:	f7fa f8b5 	bl	8002d50 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	f043 030b 	orr.w	r3, r3, #11
 8008bec:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	211d      	movs	r1, #29
 8008bf4:	4806      	ldr	r0, [pc, #24]	; (8008c10 <low_level_init+0x144>)
 8008bf6:	f7fa f913 	bl	8002e20 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008bfa:	f107 0310 	add.w	r3, r7, #16
 8008bfe:	461a      	mov	r2, r3
 8008c00:	211d      	movs	r1, #29
 8008c02:	4803      	ldr	r0, [pc, #12]	; (8008c10 <low_level_init+0x144>)
 8008c04:	f7fa f8a4 	bl	8002d50 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008c08:	bf00      	nop
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	2000373c 	.word	0x2000373c
 8008c14:	40028000 	.word	0x40028000
 8008c18:	20001f6c 	.word	0x20001f6c
 8008c1c:	2000071c 	.word	0x2000071c
 8008c20:	2000079c 	.word	0x2000079c
 8008c24:	2000069c 	.word	0x2000069c

08008c28 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08a      	sub	sp, #40	; 0x28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008c32:	4b4b      	ldr	r3, [pc, #300]	; (8008d60 <low_level_output+0x138>)
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008c4a:	4b45      	ldr	r3, [pc, #276]	; (8008d60 <low_level_output+0x138>)
 8008c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008c50:	2300      	movs	r3, #0
 8008c52:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	623b      	str	r3, [r7, #32]
 8008c58:	e05a      	b.n	8008d10 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	da03      	bge.n	8008c6a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008c62:	23f8      	movs	r3, #248	; 0xf8
 8008c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008c68:	e05c      	b.n	8008d24 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	895b      	ldrh	r3, [r3, #10]
 8008c6e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008c70:	2300      	movs	r3, #0
 8008c72:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008c74:	e02f      	b.n	8008cd6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008c76:	69fa      	ldr	r2, [r7, #28]
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	18d0      	adds	r0, r2, r3
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	18d1      	adds	r1, r2, r3
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	f00a faef 	bl	8013270 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	da03      	bge.n	8008ca8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008ca0:	23f8      	movs	r3, #248	; 0xf8
 8008ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008ca6:	e03d      	b.n	8008d24 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008cb8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008cc4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008cd0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d8c8      	bhi.n	8008c76 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008ce4:	69fa      	ldr	r2, [r7, #28]
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	18d0      	adds	r0, r2, r3
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	f00a fabb 	bl	8013270 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4413      	add	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	623b      	str	r3, [r7, #32]
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1a1      	bne.n	8008c5a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008d16:	6979      	ldr	r1, [r7, #20]
 8008d18:	4811      	ldr	r0, [pc, #68]	; (8008d60 <low_level_output+0x138>)
 8008d1a:	f7f9 fe29 	bl	8002970 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008d24:	4b0e      	ldr	r3, [pc, #56]	; (8008d60 <low_level_output+0x138>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00d      	beq.n	8008d52 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008d36:	4b0a      	ldr	r3, [pc, #40]	; (8008d60 <low_level_output+0x138>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d3e:	461a      	mov	r2, r3
 8008d40:	2320      	movs	r3, #32
 8008d42:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008d44:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <low_level_output+0x138>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	2300      	movs	r3, #0
 8008d50:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8008d52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3728      	adds	r7, #40	; 0x28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	2000373c 	.word	0x2000373c

08008d64 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08c      	sub	sp, #48	; 0x30
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008d70:	2300      	movs	r3, #0
 8008d72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8008d88:	484e      	ldr	r0, [pc, #312]	; (8008ec4 <low_level_input+0x160>)
 8008d8a:	f7f9 fedb 	bl	8002b44 <HAL_ETH_GetReceivedFrame>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <low_level_input+0x34>

    return NULL;
 8008d94:	2300      	movs	r3, #0
 8008d96:	e091      	b.n	8008ebc <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008d98:	4b4a      	ldr	r3, [pc, #296]	; (8008ec4 <low_level_input+0x160>)
 8008d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d9c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008d9e:	4b49      	ldr	r3, [pc, #292]	; (8008ec4 <low_level_input+0x160>)
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008da4:	89fb      	ldrh	r3, [r7, #14]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d007      	beq.n	8008dba <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008daa:	89fb      	ldrh	r3, [r7, #14]
 8008dac:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008db0:	4619      	mov	r1, r3
 8008db2:	2000      	movs	r0, #0
 8008db4:	f001 f934 	bl	800a020 <pbuf_alloc>
 8008db8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d04b      	beq.n	8008e58 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008dc0:	4b40      	ldr	r3, [pc, #256]	; (8008ec4 <low_level_input+0x160>)
 8008dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dce:	e040      	b.n	8008e52 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd2:	895b      	ldrh	r3, [r3, #10]
 8008dd4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008dda:	e021      	b.n	8008e20 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	18d0      	adds	r0, r2, r3
 8008de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	18d1      	adds	r1, r2, r3
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008df0:	3304      	adds	r3, #4
 8008df2:	461a      	mov	r2, r3
 8008df4:	f00a fa3c 	bl	8013270 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008df8:	6a3b      	ldr	r3, [r7, #32]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008e04:	69fa      	ldr	r2, [r7, #28]
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008e0e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008e1a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	4413      	add	r3, r2
 8008e26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d8d6      	bhi.n	8008ddc <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	18d0      	adds	r0, r2, r3
 8008e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	f00a fa16 	bl	8013270 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008e44:	69fa      	ldr	r2, [r7, #28]
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	4413      	add	r3, r2
 8008e4a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1bb      	bne.n	8008dd0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008e58:	4b1a      	ldr	r3, [pc, #104]	; (8008ec4 <low_level_input+0x160>)
 8008e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008e5e:	2300      	movs	r3, #0
 8008e60:	613b      	str	r3, [r7, #16]
 8008e62:	e00b      	b.n	8008e7c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	613b      	str	r3, [r7, #16]
 8008e7c:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <low_level_input+0x160>)
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d3ee      	bcc.n	8008e64 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008e86:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <low_level_input+0x160>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008e8c:	4b0d      	ldr	r3, [pc, #52]	; (8008ec4 <low_level_input+0x160>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00d      	beq.n	8008eba <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008e9e:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <low_level_input+0x160>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	2380      	movs	r3, #128	; 0x80
 8008eaa:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008eac:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <low_level_input+0x160>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	6093      	str	r3, [r2, #8]
  }
  return p;
 8008eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3730      	adds	r7, #48	; 0x30
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	2000373c 	.word	0x2000373c

08008ec8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7ff ff47 	bl	8008d64 <low_level_input>
 8008ed6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d010      	beq.n	8008f00 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	4798      	blx	r3
 8008ee8:	4603      	mov	r3, r0
 8008eea:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8008eec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d006      	beq.n	8008f02 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f001 fb77 	bl	800a5e8 <pbuf_free>
    p = NULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]
 8008efe:	e000      	b.n	8008f02 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8008f00:	bf00      	nop
  }
}
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <ethernetif_init+0x1c>
 8008f16:	4b0e      	ldr	r3, [pc, #56]	; (8008f50 <ethernetif_init+0x48>)
 8008f18:	f240 2219 	movw	r2, #537	; 0x219
 8008f1c:	490d      	ldr	r1, [pc, #52]	; (8008f54 <ethernetif_init+0x4c>)
 8008f1e:	480e      	ldr	r0, [pc, #56]	; (8008f58 <ethernetif_init+0x50>)
 8008f20:	f00a f9d6 	bl	80132d0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2273      	movs	r2, #115	; 0x73
 8008f28:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2274      	movs	r2, #116	; 0x74
 8008f30:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a09      	ldr	r2, [pc, #36]	; (8008f5c <ethernetif_init+0x54>)
 8008f38:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a08      	ldr	r2, [pc, #32]	; (8008f60 <ethernetif_init+0x58>)
 8008f3e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff fdc3 	bl	8008acc <low_level_init>

  return ERR_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	08014714 	.word	0x08014714
 8008f54:	08014730 	.word	0x08014730
 8008f58:	08014740 	.word	0x08014740
 8008f5c:	08011515 	.word	0x08011515
 8008f60:	08008c29 	.word	0x08008c29

08008f64 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008f68:	f7f8 fd36 	bl	80019d8 <HAL_GetTick>
 8008f6c:	4603      	mov	r3, r0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f8a:	089b      	lsrs	r3, r3, #2
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d05d      	beq.n	8009052 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008f96:	4b34      	ldr	r3, [pc, #208]	; (8009068 <ethernetif_update_config+0xf4>)
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d03f      	beq.n	800901e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008f9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	4830      	ldr	r0, [pc, #192]	; (8009068 <ethernetif_update_config+0xf4>)
 8008fa6:	f7f9 ff3b 	bl	8002e20 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008faa:	f7f8 fd15 	bl	80019d8 <HAL_GetTick>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008fb2:	f107 0308 	add.w	r3, r7, #8
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	2101      	movs	r1, #1
 8008fba:	482b      	ldr	r0, [pc, #172]	; (8009068 <ethernetif_update_config+0xf4>)
 8008fbc:	f7f9 fec8 	bl	8002d50 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008fc0:	f7f8 fd0a 	bl	80019d8 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fce:	d828      	bhi.n	8009022 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f003 0320 	and.w	r3, r3, #32
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0eb      	beq.n	8008fb2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8008fda:	f107 0308 	add.w	r3, r7, #8
 8008fde:	461a      	mov	r2, r3
 8008fe0:	2110      	movs	r1, #16
 8008fe2:	4821      	ldr	r0, [pc, #132]	; (8009068 <ethernetif_update_config+0xf4>)
 8008fe4:	f7f9 feb4 	bl	8002d50 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d004      	beq.n	8008ffc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008ff2:	4b1d      	ldr	r3, [pc, #116]	; (8009068 <ethernetif_update_config+0xf4>)
 8008ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ff8:	60da      	str	r2, [r3, #12]
 8008ffa:	e002      	b.n	8009002 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008ffc:	4b1a      	ldr	r3, [pc, #104]	; (8009068 <ethernetif_update_config+0xf4>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f003 0302 	and.w	r3, r3, #2
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800900c:	4b16      	ldr	r3, [pc, #88]	; (8009068 <ethernetif_update_config+0xf4>)
 800900e:	2200      	movs	r2, #0
 8009010:	609a      	str	r2, [r3, #8]
 8009012:	e016      	b.n	8009042 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8009014:	4b14      	ldr	r3, [pc, #80]	; (8009068 <ethernetif_update_config+0xf4>)
 8009016:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800901a:	609a      	str	r2, [r3, #8]
 800901c:	e011      	b.n	8009042 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800901e:	bf00      	nop
 8009020:	e000      	b.n	8009024 <ethernetif_update_config+0xb0>
          goto error;
 8009022:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009024:	4b10      	ldr	r3, [pc, #64]	; (8009068 <ethernetif_update_config+0xf4>)
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	08db      	lsrs	r3, r3, #3
 800902a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800902c:	4b0e      	ldr	r3, [pc, #56]	; (8009068 <ethernetif_update_config+0xf4>)
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	085b      	lsrs	r3, r3, #1
 8009032:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009034:	4313      	orrs	r3, r2
 8009036:	b29b      	uxth	r3, r3
 8009038:	461a      	mov	r2, r3
 800903a:	2100      	movs	r1, #0
 800903c:	480a      	ldr	r0, [pc, #40]	; (8009068 <ethernetif_update_config+0xf4>)
 800903e:	f7f9 feef 	bl	8002e20 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8009042:	2100      	movs	r1, #0
 8009044:	4808      	ldr	r0, [pc, #32]	; (8009068 <ethernetif_update_config+0xf4>)
 8009046:	f7f9 ffaf 	bl	8002fa8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800904a:	4807      	ldr	r0, [pc, #28]	; (8009068 <ethernetif_update_config+0xf4>)
 800904c:	f7f9 ff4e 	bl	8002eec <HAL_ETH_Start>
 8009050:	e002      	b.n	8009058 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8009052:	4805      	ldr	r0, [pc, #20]	; (8009068 <ethernetif_update_config+0xf4>)
 8009054:	f7f9 ff79 	bl	8002f4a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f807 	bl	800906c <ethernetif_notify_conn_changed>
}
 800905e:	bf00      	nop
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	2000373c 	.word	0x2000373c

0800906c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	4603      	mov	r3, r0
 8009088:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800908a:	88fb      	ldrh	r3, [r7, #6]
 800908c:	021b      	lsls	r3, r3, #8
 800908e:	b21a      	sxth	r2, r3
 8009090:	88fb      	ldrh	r3, [r7, #6]
 8009092:	0a1b      	lsrs	r3, r3, #8
 8009094:	b29b      	uxth	r3, r3
 8009096:	b21b      	sxth	r3, r3
 8009098:	4313      	orrs	r3, r2
 800909a:	b21b      	sxth	r3, r3
 800909c:	b29b      	uxth	r3, r3
}
 800909e:	4618      	mov	r0, r3
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	061a      	lsls	r2, r3, #24
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	021b      	lsls	r3, r3, #8
 80090ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090be:	431a      	orrs	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	0a1b      	lsrs	r3, r3, #8
 80090c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80090c8:	431a      	orrs	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	0e1b      	lsrs	r3, r3, #24
 80090ce:	4313      	orrs	r3, r2
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80090e6:	f000 f8d5 	bl	8009294 <mem_init>
  memp_init();
 80090ea:	f000 fbdb 	bl	80098a4 <memp_init>
  pbuf_init();
  netif_init();
 80090ee:	f000 fc93 	bl	8009a18 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80090f2:	f007 f84f 	bl	8010194 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80090f6:	f001 fda7 	bl	800ac48 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80090fa:	f006 ffc1 	bl	8010080 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80090fe:	bf00      	nop
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
	...

08009108 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009112:	4b05      	ldr	r3, [pc, #20]	; (8009128 <ptr_to_mem+0x20>)
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	88fb      	ldrh	r3, [r7, #6]
 8009118:	4413      	add	r3, r2
}
 800911a:	4618      	mov	r0, r3
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	20005fb0 	.word	0x20005fb0

0800912c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009134:	4b05      	ldr	r3, [pc, #20]	; (800914c <mem_to_ptr+0x20>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	1ad3      	subs	r3, r2, r3
 800913c:	b29b      	uxth	r3, r3
}
 800913e:	4618      	mov	r0, r3
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	20005fb0 	.word	0x20005fb0

08009150 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009150:	b590      	push	{r4, r7, lr}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009158:	4b45      	ldr	r3, [pc, #276]	; (8009270 <plug_holes+0x120>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	429a      	cmp	r2, r3
 8009160:	d206      	bcs.n	8009170 <plug_holes+0x20>
 8009162:	4b44      	ldr	r3, [pc, #272]	; (8009274 <plug_holes+0x124>)
 8009164:	f240 12df 	movw	r2, #479	; 0x1df
 8009168:	4943      	ldr	r1, [pc, #268]	; (8009278 <plug_holes+0x128>)
 800916a:	4844      	ldr	r0, [pc, #272]	; (800927c <plug_holes+0x12c>)
 800916c:	f00a f8b0 	bl	80132d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009170:	4b43      	ldr	r3, [pc, #268]	; (8009280 <plug_holes+0x130>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	429a      	cmp	r2, r3
 8009178:	d306      	bcc.n	8009188 <plug_holes+0x38>
 800917a:	4b3e      	ldr	r3, [pc, #248]	; (8009274 <plug_holes+0x124>)
 800917c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009180:	4940      	ldr	r1, [pc, #256]	; (8009284 <plug_holes+0x134>)
 8009182:	483e      	ldr	r0, [pc, #248]	; (800927c <plug_holes+0x12c>)
 8009184:	f00a f8a4 	bl	80132d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	791b      	ldrb	r3, [r3, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d006      	beq.n	800919e <plug_holes+0x4e>
 8009190:	4b38      	ldr	r3, [pc, #224]	; (8009274 <plug_holes+0x124>)
 8009192:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009196:	493c      	ldr	r1, [pc, #240]	; (8009288 <plug_holes+0x138>)
 8009198:	4838      	ldr	r0, [pc, #224]	; (800927c <plug_holes+0x12c>)
 800919a:	f00a f899 	bl	80132d0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80091a6:	d906      	bls.n	80091b6 <plug_holes+0x66>
 80091a8:	4b32      	ldr	r3, [pc, #200]	; (8009274 <plug_holes+0x124>)
 80091aa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80091ae:	4937      	ldr	r1, [pc, #220]	; (800928c <plug_holes+0x13c>)
 80091b0:	4832      	ldr	r0, [pc, #200]	; (800927c <plug_holes+0x12c>)
 80091b2:	f00a f88d 	bl	80132d0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7ff ffa4 	bl	8009108 <ptr_to_mem>
 80091c0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d024      	beq.n	8009214 <plug_holes+0xc4>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	791b      	ldrb	r3, [r3, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d120      	bne.n	8009214 <plug_holes+0xc4>
 80091d2:	4b2b      	ldr	r3, [pc, #172]	; (8009280 <plug_holes+0x130>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d01b      	beq.n	8009214 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80091dc:	4b2c      	ldr	r3, [pc, #176]	; (8009290 <plug_holes+0x140>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d102      	bne.n	80091ec <plug_holes+0x9c>
      lfree = mem;
 80091e6:	4a2a      	ldr	r2, [pc, #168]	; (8009290 <plug_holes+0x140>)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	881a      	ldrh	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80091fc:	d00a      	beq.n	8009214 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff ff80 	bl	8009108 <ptr_to_mem>
 8009208:	4604      	mov	r4, r0
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff ff8e 	bl	800912c <mem_to_ptr>
 8009210:	4603      	mov	r3, r0
 8009212:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	885b      	ldrh	r3, [r3, #2]
 8009218:	4618      	mov	r0, r3
 800921a:	f7ff ff75 	bl	8009108 <ptr_to_mem>
 800921e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	429a      	cmp	r2, r3
 8009226:	d01f      	beq.n	8009268 <plug_holes+0x118>
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	791b      	ldrb	r3, [r3, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d11b      	bne.n	8009268 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009230:	4b17      	ldr	r3, [pc, #92]	; (8009290 <plug_holes+0x140>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	429a      	cmp	r2, r3
 8009238:	d102      	bne.n	8009240 <plug_holes+0xf0>
      lfree = pmem;
 800923a:	4a15      	ldr	r2, [pc, #84]	; (8009290 <plug_holes+0x140>)
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	881a      	ldrh	r2, [r3, #0]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009250:	d00a      	beq.n	8009268 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff ff56 	bl	8009108 <ptr_to_mem>
 800925c:	4604      	mov	r4, r0
 800925e:	68b8      	ldr	r0, [r7, #8]
 8009260:	f7ff ff64 	bl	800912c <mem_to_ptr>
 8009264:	4603      	mov	r3, r0
 8009266:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009268:	bf00      	nop
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	bd90      	pop	{r4, r7, pc}
 8009270:	20005fb0 	.word	0x20005fb0
 8009274:	08014768 	.word	0x08014768
 8009278:	08014798 	.word	0x08014798
 800927c:	080147b0 	.word	0x080147b0
 8009280:	20005fb4 	.word	0x20005fb4
 8009284:	080147d8 	.word	0x080147d8
 8009288:	080147f4 	.word	0x080147f4
 800928c:	08014810 	.word	0x08014810
 8009290:	20005fb8 	.word	0x20005fb8

08009294 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800929a:	4b18      	ldr	r3, [pc, #96]	; (80092fc <mem_init+0x68>)
 800929c:	3303      	adds	r3, #3
 800929e:	f023 0303 	bic.w	r3, r3, #3
 80092a2:	461a      	mov	r2, r3
 80092a4:	4b16      	ldr	r3, [pc, #88]	; (8009300 <mem_init+0x6c>)
 80092a6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80092a8:	4b15      	ldr	r3, [pc, #84]	; (8009300 <mem_init+0x6c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80092b4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80092c2:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80092c6:	f7ff ff1f 	bl	8009108 <ptr_to_mem>
 80092ca:	4603      	mov	r3, r0
 80092cc:	4a0d      	ldr	r2, [pc, #52]	; (8009304 <mem_init+0x70>)
 80092ce:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80092d0:	4b0c      	ldr	r3, [pc, #48]	; (8009304 <mem_init+0x70>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2201      	movs	r2, #1
 80092d6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80092d8:	4b0a      	ldr	r3, [pc, #40]	; (8009304 <mem_init+0x70>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80092e0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80092e2:	4b08      	ldr	r3, [pc, #32]	; (8009304 <mem_init+0x70>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80092ea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80092ec:	4b04      	ldr	r3, [pc, #16]	; (8009300 <mem_init+0x6c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a05      	ldr	r2, [pc, #20]	; (8009308 <mem_init+0x74>)
 80092f2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	2000379c 	.word	0x2000379c
 8009300:	20005fb0 	.word	0x20005fb0
 8009304:	20005fb4 	.word	0x20005fb4
 8009308:	20005fb8 	.word	0x20005fb8

0800930c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff ff09 	bl	800912c <mem_to_ptr>
 800931a:	4603      	mov	r3, r0
 800931c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	4618      	mov	r0, r3
 8009324:	f7ff fef0 	bl	8009108 <ptr_to_mem>
 8009328:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	885b      	ldrh	r3, [r3, #2]
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff feea 	bl	8009108 <ptr_to_mem>
 8009334:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800933e:	d818      	bhi.n	8009372 <mem_link_valid+0x66>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	885b      	ldrh	r3, [r3, #2]
 8009344:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009348:	d813      	bhi.n	8009372 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800934e:	8afa      	ldrh	r2, [r7, #22]
 8009350:	429a      	cmp	r2, r3
 8009352:	d004      	beq.n	800935e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	8afa      	ldrh	r2, [r7, #22]
 800935a:	429a      	cmp	r2, r3
 800935c:	d109      	bne.n	8009372 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800935e:	4b08      	ldr	r3, [pc, #32]	; (8009380 <mem_link_valid+0x74>)
 8009360:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	429a      	cmp	r2, r3
 8009366:	d006      	beq.n	8009376 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	885b      	ldrh	r3, [r3, #2]
 800936c:	8afa      	ldrh	r2, [r7, #22]
 800936e:	429a      	cmp	r2, r3
 8009370:	d001      	beq.n	8009376 <mem_link_valid+0x6a>
    return 0;
 8009372:	2300      	movs	r3, #0
 8009374:	e000      	b.n	8009378 <mem_link_valid+0x6c>
  }
  return 1;
 8009376:	2301      	movs	r3, #1
}
 8009378:	4618      	mov	r0, r3
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	20005fb4 	.word	0x20005fb4

08009384 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d04c      	beq.n	800942c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f003 0303 	and.w	r3, r3, #3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d007      	beq.n	80093ac <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800939c:	4b25      	ldr	r3, [pc, #148]	; (8009434 <mem_free+0xb0>)
 800939e:	f240 2273 	movw	r2, #627	; 0x273
 80093a2:	4925      	ldr	r1, [pc, #148]	; (8009438 <mem_free+0xb4>)
 80093a4:	4825      	ldr	r0, [pc, #148]	; (800943c <mem_free+0xb8>)
 80093a6:	f009 ff93 	bl	80132d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80093aa:	e040      	b.n	800942e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3b08      	subs	r3, #8
 80093b0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80093b2:	4b23      	ldr	r3, [pc, #140]	; (8009440 <mem_free+0xbc>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d306      	bcc.n	80093ca <mem_free+0x46>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f103 020c 	add.w	r2, r3, #12
 80093c2:	4b20      	ldr	r3, [pc, #128]	; (8009444 <mem_free+0xc0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d907      	bls.n	80093da <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80093ca:	4b1a      	ldr	r3, [pc, #104]	; (8009434 <mem_free+0xb0>)
 80093cc:	f240 227f 	movw	r2, #639	; 0x27f
 80093d0:	491d      	ldr	r1, [pc, #116]	; (8009448 <mem_free+0xc4>)
 80093d2:	481a      	ldr	r0, [pc, #104]	; (800943c <mem_free+0xb8>)
 80093d4:	f009 ff7c 	bl	80132d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80093d8:	e029      	b.n	800942e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	791b      	ldrb	r3, [r3, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d107      	bne.n	80093f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80093e2:	4b14      	ldr	r3, [pc, #80]	; (8009434 <mem_free+0xb0>)
 80093e4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80093e8:	4918      	ldr	r1, [pc, #96]	; (800944c <mem_free+0xc8>)
 80093ea:	4814      	ldr	r0, [pc, #80]	; (800943c <mem_free+0xb8>)
 80093ec:	f009 ff70 	bl	80132d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80093f0:	e01d      	b.n	800942e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f7ff ff8a 	bl	800930c <mem_link_valid>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d107      	bne.n	800940e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80093fe:	4b0d      	ldr	r3, [pc, #52]	; (8009434 <mem_free+0xb0>)
 8009400:	f240 2295 	movw	r2, #661	; 0x295
 8009404:	4912      	ldr	r1, [pc, #72]	; (8009450 <mem_free+0xcc>)
 8009406:	480d      	ldr	r0, [pc, #52]	; (800943c <mem_free+0xb8>)
 8009408:	f009 ff62 	bl	80132d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800940c:	e00f      	b.n	800942e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009414:	4b0f      	ldr	r3, [pc, #60]	; (8009454 <mem_free+0xd0>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	429a      	cmp	r2, r3
 800941c:	d202      	bcs.n	8009424 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800941e:	4a0d      	ldr	r2, [pc, #52]	; (8009454 <mem_free+0xd0>)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f7ff fe93 	bl	8009150 <plug_holes>
 800942a:	e000      	b.n	800942e <mem_free+0xaa>
    return;
 800942c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	08014768 	.word	0x08014768
 8009438:	0801483c 	.word	0x0801483c
 800943c:	080147b0 	.word	0x080147b0
 8009440:	20005fb0 	.word	0x20005fb0
 8009444:	20005fb4 	.word	0x20005fb4
 8009448:	08014860 	.word	0x08014860
 800944c:	0801487c 	.word	0x0801487c
 8009450:	080148a4 	.word	0x080148a4
 8009454:	20005fb8 	.word	0x20005fb8

08009458 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b088      	sub	sp, #32
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009464:	887b      	ldrh	r3, [r7, #2]
 8009466:	3303      	adds	r3, #3
 8009468:	b29b      	uxth	r3, r3
 800946a:	f023 0303 	bic.w	r3, r3, #3
 800946e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009470:	8bfb      	ldrh	r3, [r7, #30]
 8009472:	2b0b      	cmp	r3, #11
 8009474:	d801      	bhi.n	800947a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009476:	230c      	movs	r3, #12
 8009478:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800947a:	8bfb      	ldrh	r3, [r7, #30]
 800947c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009480:	d803      	bhi.n	800948a <mem_trim+0x32>
 8009482:	8bfa      	ldrh	r2, [r7, #30]
 8009484:	887b      	ldrh	r3, [r7, #2]
 8009486:	429a      	cmp	r2, r3
 8009488:	d201      	bcs.n	800948e <mem_trim+0x36>
    return NULL;
 800948a:	2300      	movs	r3, #0
 800948c:	e0cc      	b.n	8009628 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800948e:	4b68      	ldr	r3, [pc, #416]	; (8009630 <mem_trim+0x1d8>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	429a      	cmp	r2, r3
 8009496:	d304      	bcc.n	80094a2 <mem_trim+0x4a>
 8009498:	4b66      	ldr	r3, [pc, #408]	; (8009634 <mem_trim+0x1dc>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d306      	bcc.n	80094b0 <mem_trim+0x58>
 80094a2:	4b65      	ldr	r3, [pc, #404]	; (8009638 <mem_trim+0x1e0>)
 80094a4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80094a8:	4964      	ldr	r1, [pc, #400]	; (800963c <mem_trim+0x1e4>)
 80094aa:	4865      	ldr	r0, [pc, #404]	; (8009640 <mem_trim+0x1e8>)
 80094ac:	f009 ff10 	bl	80132d0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80094b0:	4b5f      	ldr	r3, [pc, #380]	; (8009630 <mem_trim+0x1d8>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d304      	bcc.n	80094c4 <mem_trim+0x6c>
 80094ba:	4b5e      	ldr	r3, [pc, #376]	; (8009634 <mem_trim+0x1dc>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d301      	bcc.n	80094c8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	e0af      	b.n	8009628 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	3b08      	subs	r3, #8
 80094cc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80094ce:	69b8      	ldr	r0, [r7, #24]
 80094d0:	f7ff fe2c 	bl	800912c <mem_to_ptr>
 80094d4:	4603      	mov	r3, r0
 80094d6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	881a      	ldrh	r2, [r3, #0]
 80094dc:	8afb      	ldrh	r3, [r7, #22]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	3b08      	subs	r3, #8
 80094e4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80094e6:	8bfa      	ldrh	r2, [r7, #30]
 80094e8:	8abb      	ldrh	r3, [r7, #20]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d906      	bls.n	80094fc <mem_trim+0xa4>
 80094ee:	4b52      	ldr	r3, [pc, #328]	; (8009638 <mem_trim+0x1e0>)
 80094f0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80094f4:	4953      	ldr	r1, [pc, #332]	; (8009644 <mem_trim+0x1ec>)
 80094f6:	4852      	ldr	r0, [pc, #328]	; (8009640 <mem_trim+0x1e8>)
 80094f8:	f009 feea 	bl	80132d0 <iprintf>
  if (newsize > size) {
 80094fc:	8bfa      	ldrh	r2, [r7, #30]
 80094fe:	8abb      	ldrh	r3, [r7, #20]
 8009500:	429a      	cmp	r2, r3
 8009502:	d901      	bls.n	8009508 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8009504:	2300      	movs	r3, #0
 8009506:	e08f      	b.n	8009628 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009508:	8bfa      	ldrh	r2, [r7, #30]
 800950a:	8abb      	ldrh	r3, [r7, #20]
 800950c:	429a      	cmp	r2, r3
 800950e:	d101      	bne.n	8009514 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	e089      	b.n	8009628 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	881b      	ldrh	r3, [r3, #0]
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff fdf5 	bl	8009108 <ptr_to_mem>
 800951e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	791b      	ldrb	r3, [r3, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d13f      	bne.n	80095a8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009530:	d106      	bne.n	8009540 <mem_trim+0xe8>
 8009532:	4b41      	ldr	r3, [pc, #260]	; (8009638 <mem_trim+0x1e0>)
 8009534:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009538:	4943      	ldr	r1, [pc, #268]	; (8009648 <mem_trim+0x1f0>)
 800953a:	4841      	ldr	r0, [pc, #260]	; (8009640 <mem_trim+0x1e8>)
 800953c:	f009 fec8 	bl	80132d0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009546:	8afa      	ldrh	r2, [r7, #22]
 8009548:	8bfb      	ldrh	r3, [r7, #30]
 800954a:	4413      	add	r3, r2
 800954c:	b29b      	uxth	r3, r3
 800954e:	3308      	adds	r3, #8
 8009550:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009552:	4b3e      	ldr	r3, [pc, #248]	; (800964c <mem_trim+0x1f4>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	693a      	ldr	r2, [r7, #16]
 8009558:	429a      	cmp	r2, r3
 800955a:	d106      	bne.n	800956a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800955c:	89fb      	ldrh	r3, [r7, #14]
 800955e:	4618      	mov	r0, r3
 8009560:	f7ff fdd2 	bl	8009108 <ptr_to_mem>
 8009564:	4603      	mov	r3, r0
 8009566:	4a39      	ldr	r2, [pc, #228]	; (800964c <mem_trim+0x1f4>)
 8009568:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800956a:	89fb      	ldrh	r3, [r7, #14]
 800956c:	4618      	mov	r0, r3
 800956e:	f7ff fdcb 	bl	8009108 <ptr_to_mem>
 8009572:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	2200      	movs	r2, #0
 8009578:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	89ba      	ldrh	r2, [r7, #12]
 800957e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	8afa      	ldrh	r2, [r7, #22]
 8009584:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	89fa      	ldrh	r2, [r7, #14]
 800958a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009594:	d047      	beq.n	8009626 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	881b      	ldrh	r3, [r3, #0]
 800959a:	4618      	mov	r0, r3
 800959c:	f7ff fdb4 	bl	8009108 <ptr_to_mem>
 80095a0:	4602      	mov	r2, r0
 80095a2:	89fb      	ldrh	r3, [r7, #14]
 80095a4:	8053      	strh	r3, [r2, #2]
 80095a6:	e03e      	b.n	8009626 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80095a8:	8bfb      	ldrh	r3, [r7, #30]
 80095aa:	f103 0214 	add.w	r2, r3, #20
 80095ae:	8abb      	ldrh	r3, [r7, #20]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d838      	bhi.n	8009626 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80095b4:	8afa      	ldrh	r2, [r7, #22]
 80095b6:	8bfb      	ldrh	r3, [r7, #30]
 80095b8:	4413      	add	r3, r2
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	3308      	adds	r3, #8
 80095be:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80095c8:	d106      	bne.n	80095d8 <mem_trim+0x180>
 80095ca:	4b1b      	ldr	r3, [pc, #108]	; (8009638 <mem_trim+0x1e0>)
 80095cc:	f240 3216 	movw	r2, #790	; 0x316
 80095d0:	491d      	ldr	r1, [pc, #116]	; (8009648 <mem_trim+0x1f0>)
 80095d2:	481b      	ldr	r0, [pc, #108]	; (8009640 <mem_trim+0x1e8>)
 80095d4:	f009 fe7c 	bl	80132d0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80095d8:	89fb      	ldrh	r3, [r7, #14]
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff fd94 	bl	8009108 <ptr_to_mem>
 80095e0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80095e2:	4b1a      	ldr	r3, [pc, #104]	; (800964c <mem_trim+0x1f4>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d202      	bcs.n	80095f2 <mem_trim+0x19a>
      lfree = mem2;
 80095ec:	4a17      	ldr	r2, [pc, #92]	; (800964c <mem_trim+0x1f4>)
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2200      	movs	r2, #0
 80095f6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	881a      	ldrh	r2, [r3, #0]
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	8afa      	ldrh	r2, [r7, #22]
 8009604:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	89fa      	ldrh	r2, [r7, #14]
 800960a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009614:	d007      	beq.n	8009626 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff fd74 	bl	8009108 <ptr_to_mem>
 8009620:	4602      	mov	r2, r0
 8009622:	89fb      	ldrh	r3, [r7, #14]
 8009624:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009626:	687b      	ldr	r3, [r7, #4]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3720      	adds	r7, #32
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	20005fb0 	.word	0x20005fb0
 8009634:	20005fb4 	.word	0x20005fb4
 8009638:	08014768 	.word	0x08014768
 800963c:	080148d8 	.word	0x080148d8
 8009640:	080147b0 	.word	0x080147b0
 8009644:	080148f0 	.word	0x080148f0
 8009648:	08014910 	.word	0x08014910
 800964c:	20005fb8 	.word	0x20005fb8

08009650 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b088      	sub	sp, #32
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800965a:	88fb      	ldrh	r3, [r7, #6]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d101      	bne.n	8009664 <mem_malloc+0x14>
    return NULL;
 8009660:	2300      	movs	r3, #0
 8009662:	e0d9      	b.n	8009818 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009664:	88fb      	ldrh	r3, [r7, #6]
 8009666:	3303      	adds	r3, #3
 8009668:	b29b      	uxth	r3, r3
 800966a:	f023 0303 	bic.w	r3, r3, #3
 800966e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009670:	8bbb      	ldrh	r3, [r7, #28]
 8009672:	2b0b      	cmp	r3, #11
 8009674:	d801      	bhi.n	800967a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009676:	230c      	movs	r3, #12
 8009678:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800967a:	8bbb      	ldrh	r3, [r7, #28]
 800967c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009680:	d803      	bhi.n	800968a <mem_malloc+0x3a>
 8009682:	8bba      	ldrh	r2, [r7, #28]
 8009684:	88fb      	ldrh	r3, [r7, #6]
 8009686:	429a      	cmp	r2, r3
 8009688:	d201      	bcs.n	800968e <mem_malloc+0x3e>
    return NULL;
 800968a:	2300      	movs	r3, #0
 800968c:	e0c4      	b.n	8009818 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800968e:	4b64      	ldr	r3, [pc, #400]	; (8009820 <mem_malloc+0x1d0>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff fd4a 	bl	800912c <mem_to_ptr>
 8009698:	4603      	mov	r3, r0
 800969a:	83fb      	strh	r3, [r7, #30]
 800969c:	e0b4      	b.n	8009808 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800969e:	8bfb      	ldrh	r3, [r7, #30]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7ff fd31 	bl	8009108 <ptr_to_mem>
 80096a6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	791b      	ldrb	r3, [r3, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f040 80a4 	bne.w	80097fa <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	8bfb      	ldrh	r3, [r7, #30]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	f1a3 0208 	sub.w	r2, r3, #8
 80096c0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80096c2:	429a      	cmp	r2, r3
 80096c4:	f0c0 8099 	bcc.w	80097fa <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	461a      	mov	r2, r3
 80096ce:	8bfb      	ldrh	r3, [r7, #30]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	f1a3 0208 	sub.w	r2, r3, #8
 80096d6:	8bbb      	ldrh	r3, [r7, #28]
 80096d8:	3314      	adds	r3, #20
 80096da:	429a      	cmp	r2, r3
 80096dc:	d333      	bcc.n	8009746 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80096de:	8bfa      	ldrh	r2, [r7, #30]
 80096e0:	8bbb      	ldrh	r3, [r7, #28]
 80096e2:	4413      	add	r3, r2
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	3308      	adds	r3, #8
 80096e8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80096ea:	8a7b      	ldrh	r3, [r7, #18]
 80096ec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80096f0:	d106      	bne.n	8009700 <mem_malloc+0xb0>
 80096f2:	4b4c      	ldr	r3, [pc, #304]	; (8009824 <mem_malloc+0x1d4>)
 80096f4:	f240 3287 	movw	r2, #903	; 0x387
 80096f8:	494b      	ldr	r1, [pc, #300]	; (8009828 <mem_malloc+0x1d8>)
 80096fa:	484c      	ldr	r0, [pc, #304]	; (800982c <mem_malloc+0x1dc>)
 80096fc:	f009 fde8 	bl	80132d0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009700:	8a7b      	ldrh	r3, [r7, #18]
 8009702:	4618      	mov	r0, r3
 8009704:	f7ff fd00 	bl	8009108 <ptr_to_mem>
 8009708:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	881a      	ldrh	r2, [r3, #0]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	8bfa      	ldrh	r2, [r7, #30]
 800971c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	8a7a      	ldrh	r2, [r7, #18]
 8009722:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2201      	movs	r2, #1
 8009728:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009732:	d00b      	beq.n	800974c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff fce5 	bl	8009108 <ptr_to_mem>
 800973e:	4602      	mov	r2, r0
 8009740:	8a7b      	ldrh	r3, [r7, #18]
 8009742:	8053      	strh	r3, [r2, #2]
 8009744:	e002      	b.n	800974c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2201      	movs	r2, #1
 800974a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800974c:	4b34      	ldr	r3, [pc, #208]	; (8009820 <mem_malloc+0x1d0>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	429a      	cmp	r2, r3
 8009754:	d127      	bne.n	80097a6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8009756:	4b32      	ldr	r3, [pc, #200]	; (8009820 <mem_malloc+0x1d0>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800975c:	e005      	b.n	800976a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff fcd0 	bl	8009108 <ptr_to_mem>
 8009768:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	791b      	ldrb	r3, [r3, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d004      	beq.n	800977c <mem_malloc+0x12c>
 8009772:	4b2f      	ldr	r3, [pc, #188]	; (8009830 <mem_malloc+0x1e0>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	69ba      	ldr	r2, [r7, #24]
 8009778:	429a      	cmp	r2, r3
 800977a:	d1f0      	bne.n	800975e <mem_malloc+0x10e>
          }
          lfree = cur;
 800977c:	4a28      	ldr	r2, [pc, #160]	; (8009820 <mem_malloc+0x1d0>)
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009782:	4b27      	ldr	r3, [pc, #156]	; (8009820 <mem_malloc+0x1d0>)
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	4b2a      	ldr	r3, [pc, #168]	; (8009830 <mem_malloc+0x1e0>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	429a      	cmp	r2, r3
 800978c:	d00b      	beq.n	80097a6 <mem_malloc+0x156>
 800978e:	4b24      	ldr	r3, [pc, #144]	; (8009820 <mem_malloc+0x1d0>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	791b      	ldrb	r3, [r3, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d006      	beq.n	80097a6 <mem_malloc+0x156>
 8009798:	4b22      	ldr	r3, [pc, #136]	; (8009824 <mem_malloc+0x1d4>)
 800979a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800979e:	4925      	ldr	r1, [pc, #148]	; (8009834 <mem_malloc+0x1e4>)
 80097a0:	4822      	ldr	r0, [pc, #136]	; (800982c <mem_malloc+0x1dc>)
 80097a2:	f009 fd95 	bl	80132d0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80097a6:	8bba      	ldrh	r2, [r7, #28]
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	4413      	add	r3, r2
 80097ac:	3308      	adds	r3, #8
 80097ae:	4a20      	ldr	r2, [pc, #128]	; (8009830 <mem_malloc+0x1e0>)
 80097b0:	6812      	ldr	r2, [r2, #0]
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d906      	bls.n	80097c4 <mem_malloc+0x174>
 80097b6:	4b1b      	ldr	r3, [pc, #108]	; (8009824 <mem_malloc+0x1d4>)
 80097b8:	f240 32b9 	movw	r2, #953	; 0x3b9
 80097bc:	491e      	ldr	r1, [pc, #120]	; (8009838 <mem_malloc+0x1e8>)
 80097be:	481b      	ldr	r0, [pc, #108]	; (800982c <mem_malloc+0x1dc>)
 80097c0:	f009 fd86 	bl	80132d0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	f003 0303 	and.w	r3, r3, #3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d006      	beq.n	80097dc <mem_malloc+0x18c>
 80097ce:	4b15      	ldr	r3, [pc, #84]	; (8009824 <mem_malloc+0x1d4>)
 80097d0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80097d4:	4919      	ldr	r1, [pc, #100]	; (800983c <mem_malloc+0x1ec>)
 80097d6:	4815      	ldr	r0, [pc, #84]	; (800982c <mem_malloc+0x1dc>)
 80097d8:	f009 fd7a 	bl	80132d0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f003 0303 	and.w	r3, r3, #3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d006      	beq.n	80097f4 <mem_malloc+0x1a4>
 80097e6:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <mem_malloc+0x1d4>)
 80097e8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80097ec:	4914      	ldr	r1, [pc, #80]	; (8009840 <mem_malloc+0x1f0>)
 80097ee:	480f      	ldr	r0, [pc, #60]	; (800982c <mem_malloc+0x1dc>)
 80097f0:	f009 fd6e 	bl	80132d0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	3308      	adds	r3, #8
 80097f8:	e00e      	b.n	8009818 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80097fa:	8bfb      	ldrh	r3, [r7, #30]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7ff fc83 	bl	8009108 <ptr_to_mem>
 8009802:	4603      	mov	r3, r0
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009808:	8bfa      	ldrh	r2, [r7, #30]
 800980a:	8bbb      	ldrh	r3, [r7, #28]
 800980c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8009810:	429a      	cmp	r2, r3
 8009812:	f4ff af44 	bcc.w	800969e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3720      	adds	r7, #32
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	20005fb8 	.word	0x20005fb8
 8009824:	08014768 	.word	0x08014768
 8009828:	08014910 	.word	0x08014910
 800982c:	080147b0 	.word	0x080147b0
 8009830:	20005fb4 	.word	0x20005fb4
 8009834:	08014924 	.word	0x08014924
 8009838:	08014940 	.word	0x08014940
 800983c:	08014970 	.word	0x08014970
 8009840:	080149a0 	.word	0x080149a0

08009844 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	2200      	movs	r2, #0
 8009852:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	3303      	adds	r3, #3
 800985a:	f023 0303 	bic.w	r3, r3, #3
 800985e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]
 8009864:	e011      	b.n	800988a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	461a      	mov	r2, r3
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	4413      	add	r3, r2
 8009882:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	3301      	adds	r3, #1
 8009888:	60fb      	str	r3, [r7, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	885b      	ldrh	r3, [r3, #2]
 800988e:	461a      	mov	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4293      	cmp	r3, r2
 8009894:	dbe7      	blt.n	8009866 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009896:	bf00      	nop
 8009898:	bf00      	nop
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80098aa:	2300      	movs	r3, #0
 80098ac:	80fb      	strh	r3, [r7, #6]
 80098ae:	e009      	b.n	80098c4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80098b0:	88fb      	ldrh	r3, [r7, #6]
 80098b2:	4a08      	ldr	r2, [pc, #32]	; (80098d4 <memp_init+0x30>)
 80098b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7ff ffc3 	bl	8009844 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80098be:	88fb      	ldrh	r3, [r7, #6]
 80098c0:	3301      	adds	r3, #1
 80098c2:	80fb      	strh	r3, [r7, #6]
 80098c4:	88fb      	ldrh	r3, [r7, #6]
 80098c6:	2b08      	cmp	r3, #8
 80098c8:	d9f2      	bls.n	80098b0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80098ca:	bf00      	nop
 80098cc:	bf00      	nop
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	08017180 	.word	0x08017180

080098d8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d012      	beq.n	8009914 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	6812      	ldr	r2, [r2, #0]
 80098f6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d006      	beq.n	8009910 <do_memp_malloc_pool+0x38>
 8009902:	4b07      	ldr	r3, [pc, #28]	; (8009920 <do_memp_malloc_pool+0x48>)
 8009904:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009908:	4906      	ldr	r1, [pc, #24]	; (8009924 <do_memp_malloc_pool+0x4c>)
 800990a:	4807      	ldr	r0, [pc, #28]	; (8009928 <do_memp_malloc_pool+0x50>)
 800990c:	f009 fce0 	bl	80132d0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	e000      	b.n	8009916 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	080149c4 	.word	0x080149c4
 8009924:	080149f4 	.word	0x080149f4
 8009928:	08014a18 	.word	0x08014a18

0800992c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009936:	79fb      	ldrb	r3, [r7, #7]
 8009938:	2b08      	cmp	r3, #8
 800993a:	d908      	bls.n	800994e <memp_malloc+0x22>
 800993c:	4b0a      	ldr	r3, [pc, #40]	; (8009968 <memp_malloc+0x3c>)
 800993e:	f240 1257 	movw	r2, #343	; 0x157
 8009942:	490a      	ldr	r1, [pc, #40]	; (800996c <memp_malloc+0x40>)
 8009944:	480a      	ldr	r0, [pc, #40]	; (8009970 <memp_malloc+0x44>)
 8009946:	f009 fcc3 	bl	80132d0 <iprintf>
 800994a:	2300      	movs	r3, #0
 800994c:	e008      	b.n	8009960 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800994e:	79fb      	ldrb	r3, [r7, #7]
 8009950:	4a08      	ldr	r2, [pc, #32]	; (8009974 <memp_malloc+0x48>)
 8009952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009956:	4618      	mov	r0, r3
 8009958:	f7ff ffbe 	bl	80098d8 <do_memp_malloc_pool>
 800995c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800995e:	68fb      	ldr	r3, [r7, #12]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	080149c4 	.word	0x080149c4
 800996c:	08014a54 	.word	0x08014a54
 8009970:	08014a18 	.word	0x08014a18
 8009974:	08017180 	.word	0x08017180

08009978 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	f003 0303 	and.w	r3, r3, #3
 8009988:	2b00      	cmp	r3, #0
 800998a:	d006      	beq.n	800999a <do_memp_free_pool+0x22>
 800998c:	4b0a      	ldr	r3, [pc, #40]	; (80099b8 <do_memp_free_pool+0x40>)
 800998e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009992:	490a      	ldr	r1, [pc, #40]	; (80099bc <do_memp_free_pool+0x44>)
 8009994:	480a      	ldr	r0, [pc, #40]	; (80099c0 <do_memp_free_pool+0x48>)
 8009996:	f009 fc9b 	bl	80132d0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80099b0:	bf00      	nop
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	080149c4 	.word	0x080149c4
 80099bc:	08014a74 	.word	0x08014a74
 80099c0:	08014a18 	.word	0x08014a18

080099c4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	6039      	str	r1, [r7, #0]
 80099ce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80099d0:	79fb      	ldrb	r3, [r7, #7]
 80099d2:	2b08      	cmp	r3, #8
 80099d4:	d907      	bls.n	80099e6 <memp_free+0x22>
 80099d6:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <memp_free+0x44>)
 80099d8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80099dc:	490b      	ldr	r1, [pc, #44]	; (8009a0c <memp_free+0x48>)
 80099de:	480c      	ldr	r0, [pc, #48]	; (8009a10 <memp_free+0x4c>)
 80099e0:	f009 fc76 	bl	80132d0 <iprintf>
 80099e4:	e00c      	b.n	8009a00 <memp_free+0x3c>

  if (mem == NULL) {
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d008      	beq.n	80099fe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	4a09      	ldr	r2, [pc, #36]	; (8009a14 <memp_free+0x50>)
 80099f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7ff ffbe 	bl	8009978 <do_memp_free_pool>
 80099fc:	e000      	b.n	8009a00 <memp_free+0x3c>
    return;
 80099fe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	080149c4 	.word	0x080149c4
 8009a0c:	08014a94 	.word	0x08014a94
 8009a10:	08014a18 	.word	0x08014a18
 8009a14:	08017180 	.word	0x08017180

08009a18 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009a1c:	bf00      	nop
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
	...

08009a28 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
 8009a34:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d108      	bne.n	8009a4e <netif_add+0x26>
 8009a3c:	4b57      	ldr	r3, [pc, #348]	; (8009b9c <netif_add+0x174>)
 8009a3e:	f240 1227 	movw	r2, #295	; 0x127
 8009a42:	4957      	ldr	r1, [pc, #348]	; (8009ba0 <netif_add+0x178>)
 8009a44:	4857      	ldr	r0, [pc, #348]	; (8009ba4 <netif_add+0x17c>)
 8009a46:	f009 fc43 	bl	80132d0 <iprintf>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	e0a2      	b.n	8009b94 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d108      	bne.n	8009a66 <netif_add+0x3e>
 8009a54:	4b51      	ldr	r3, [pc, #324]	; (8009b9c <netif_add+0x174>)
 8009a56:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009a5a:	4953      	ldr	r1, [pc, #332]	; (8009ba8 <netif_add+0x180>)
 8009a5c:	4851      	ldr	r0, [pc, #324]	; (8009ba4 <netif_add+0x17c>)
 8009a5e:	f009 fc37 	bl	80132d0 <iprintf>
 8009a62:	2300      	movs	r3, #0
 8009a64:	e096      	b.n	8009b94 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d101      	bne.n	8009a70 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009a6c:	4b4f      	ldr	r3, [pc, #316]	; (8009bac <netif_add+0x184>)
 8009a6e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009a76:	4b4d      	ldr	r3, [pc, #308]	; (8009bac <netif_add+0x184>)
 8009a78:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009a80:	4b4a      	ldr	r3, [pc, #296]	; (8009bac <netif_add+0x184>)
 8009a82:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	4a45      	ldr	r2, [pc, #276]	; (8009bb0 <netif_add+0x188>)
 8009a9a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6a3a      	ldr	r2, [r7, #32]
 8009ab4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009ab6:	4b3f      	ldr	r3, [pc, #252]	; (8009bb4 <netif_add+0x18c>)
 8009ab8:	781a      	ldrb	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ac4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	68b9      	ldr	r1, [r7, #8]
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f000 f913 	bl	8009cf8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	4798      	blx	r3
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <netif_add+0xba>
    return NULL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e058      	b.n	8009b94 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ae8:	2bff      	cmp	r3, #255	; 0xff
 8009aea:	d103      	bne.n	8009af4 <netif_add+0xcc>
        netif->num = 0;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009af8:	4b2f      	ldr	r3, [pc, #188]	; (8009bb8 <netif_add+0x190>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	617b      	str	r3, [r7, #20]
 8009afe:	e02b      	b.n	8009b58 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d106      	bne.n	8009b16 <netif_add+0xee>
 8009b08:	4b24      	ldr	r3, [pc, #144]	; (8009b9c <netif_add+0x174>)
 8009b0a:	f240 128b 	movw	r2, #395	; 0x18b
 8009b0e:	492b      	ldr	r1, [pc, #172]	; (8009bbc <netif_add+0x194>)
 8009b10:	4824      	ldr	r0, [pc, #144]	; (8009ba4 <netif_add+0x17c>)
 8009b12:	f009 fbdd 	bl	80132d0 <iprintf>
        num_netifs++;
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	2bff      	cmp	r3, #255	; 0xff
 8009b20:	dd06      	ble.n	8009b30 <netif_add+0x108>
 8009b22:	4b1e      	ldr	r3, [pc, #120]	; (8009b9c <netif_add+0x174>)
 8009b24:	f240 128d 	movw	r2, #397	; 0x18d
 8009b28:	4925      	ldr	r1, [pc, #148]	; (8009bc0 <netif_add+0x198>)
 8009b2a:	481e      	ldr	r0, [pc, #120]	; (8009ba4 <netif_add+0x17c>)
 8009b2c:	f009 fbd0 	bl	80132d0 <iprintf>
        if (netif2->num == netif->num) {
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d108      	bne.n	8009b52 <netif_add+0x12a>
          netif->num++;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b46:	3301      	adds	r3, #1
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009b50:	e005      	b.n	8009b5e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	617b      	str	r3, [r7, #20]
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1d0      	bne.n	8009b00 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1be      	bne.n	8009ae2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b6a:	2bfe      	cmp	r3, #254	; 0xfe
 8009b6c:	d103      	bne.n	8009b76 <netif_add+0x14e>
    netif_num = 0;
 8009b6e:	4b11      	ldr	r3, [pc, #68]	; (8009bb4 <netif_add+0x18c>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	701a      	strb	r2, [r3, #0]
 8009b74:	e006      	b.n	8009b84 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	4b0c      	ldr	r3, [pc, #48]	; (8009bb4 <netif_add+0x18c>)
 8009b82:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009b84:	4b0c      	ldr	r3, [pc, #48]	; (8009bb8 <netif_add+0x190>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009b8c:	4a0a      	ldr	r2, [pc, #40]	; (8009bb8 <netif_add+0x190>)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009b92:	68fb      	ldr	r3, [r7, #12]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	08014ab0 	.word	0x08014ab0
 8009ba0:	08014b44 	.word	0x08014b44
 8009ba4:	08014b00 	.word	0x08014b00
 8009ba8:	08014b60 	.word	0x08014b60
 8009bac:	080171e4 	.word	0x080171e4
 8009bb0:	08009f0b 	.word	0x08009f0b
 8009bb4:	20008eb0 	.word	0x20008eb0
 8009bb8:	20008ea8 	.word	0x20008ea8
 8009bbc:	08014b84 	.word	0x08014b84
 8009bc0:	08014b98 	.word	0x08014b98

08009bc4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f002 fb81 	bl	800c2d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f007 f81f 	bl	8010c1c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009bde:	bf00      	nop
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
	...

08009be8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d106      	bne.n	8009c08 <netif_do_set_ipaddr+0x20>
 8009bfa:	4b1d      	ldr	r3, [pc, #116]	; (8009c70 <netif_do_set_ipaddr+0x88>)
 8009bfc:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009c00:	491c      	ldr	r1, [pc, #112]	; (8009c74 <netif_do_set_ipaddr+0x8c>)
 8009c02:	481d      	ldr	r0, [pc, #116]	; (8009c78 <netif_do_set_ipaddr+0x90>)
 8009c04:	f009 fb64 	bl	80132d0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d106      	bne.n	8009c1c <netif_do_set_ipaddr+0x34>
 8009c0e:	4b18      	ldr	r3, [pc, #96]	; (8009c70 <netif_do_set_ipaddr+0x88>)
 8009c10:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009c14:	4917      	ldr	r1, [pc, #92]	; (8009c74 <netif_do_set_ipaddr+0x8c>)
 8009c16:	4818      	ldr	r0, [pc, #96]	; (8009c78 <netif_do_set_ipaddr+0x90>)
 8009c18:	f009 fb5a 	bl	80132d0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	3304      	adds	r3, #4
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d01c      	beq.n	8009c64 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3304      	adds	r3, #4
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009c3a:	f107 0314 	add.w	r3, r7, #20
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff ffbf 	bl	8009bc4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <netif_do_set_ipaddr+0x6a>
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	e000      	b.n	8009c54 <netif_do_set_ipaddr+0x6c>
 8009c52:	2300      	movs	r3, #0
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009c58:	2101      	movs	r1, #1
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f8d2 	bl	8009e04 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009c60:	2301      	movs	r3, #1
 8009c62:	e000      	b.n	8009c66 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	08014ab0 	.word	0x08014ab0
 8009c74:	08014bc8 	.word	0x08014bc8
 8009c78:	08014b00 	.word	0x08014b00

08009c7c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3308      	adds	r3, #8
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d00a      	beq.n	8009cac <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <netif_do_set_netmask+0x26>
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	e000      	b.n	8009ca4 <netif_do_set_netmask+0x28>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e000      	b.n	8009cae <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b085      	sub	sp, #20
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	60f8      	str	r0, [r7, #12]
 8009cc2:	60b9      	str	r1, [r7, #8]
 8009cc4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	330c      	adds	r3, #12
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d00a      	beq.n	8009cea <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d002      	beq.n	8009ce0 <netif_do_set_gw+0x26>
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	e000      	b.n	8009ce2 <netif_do_set_gw+0x28>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e000      	b.n	8009cec <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009d06:	2300      	movs	r3, #0
 8009d08:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009d14:	4b1c      	ldr	r3, [pc, #112]	; (8009d88 <netif_set_addr+0x90>)
 8009d16:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009d1e:	4b1a      	ldr	r3, [pc, #104]	; (8009d88 <netif_set_addr+0x90>)
 8009d20:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009d28:	4b17      	ldr	r3, [pc, #92]	; (8009d88 <netif_set_addr+0x90>)
 8009d2a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <netif_set_addr+0x42>
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <netif_set_addr+0x46>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e000      	b.n	8009d40 <netif_set_addr+0x48>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d006      	beq.n	8009d56 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009d48:	f107 0310 	add.w	r3, r7, #16
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	68b9      	ldr	r1, [r7, #8]
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f7ff ff49 	bl	8009be8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	6879      	ldr	r1, [r7, #4]
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f7ff ff8e 	bl	8009c7c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009d60:	69ba      	ldr	r2, [r7, #24]
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f7ff ffa8 	bl	8009cba <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d106      	bne.n	8009d7e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009d70:	f107 0310 	add.w	r3, r7, #16
 8009d74:	461a      	mov	r2, r3
 8009d76:	68b9      	ldr	r1, [r7, #8]
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f7ff ff35 	bl	8009be8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009d7e:	bf00      	nop
 8009d80:	3720      	adds	r7, #32
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	080171e4 	.word	0x080171e4

08009d8c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009d94:	4a04      	ldr	r2, [pc, #16]	; (8009da8 <netif_set_default+0x1c>)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009d9a:	bf00      	nop
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	20008eac 	.word	0x20008eac

08009dac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d107      	bne.n	8009dca <netif_set_up+0x1e>
 8009dba:	4b0f      	ldr	r3, [pc, #60]	; (8009df8 <netif_set_up+0x4c>)
 8009dbc:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009dc0:	490e      	ldr	r1, [pc, #56]	; (8009dfc <netif_set_up+0x50>)
 8009dc2:	480f      	ldr	r0, [pc, #60]	; (8009e00 <netif_set_up+0x54>)
 8009dc4:	f009 fa84 	bl	80132d0 <iprintf>
 8009dc8:	e013      	b.n	8009df2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10c      	bne.n	8009df2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009dde:	f043 0301 	orr.w	r3, r3, #1
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009dea:	2103      	movs	r1, #3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f809 	bl	8009e04 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	08014ab0 	.word	0x08014ab0
 8009dfc:	08014c38 	.word	0x08014c38
 8009e00:	08014b00 	.word	0x08014b00

08009e04 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d106      	bne.n	8009e24 <netif_issue_reports+0x20>
 8009e16:	4b18      	ldr	r3, [pc, #96]	; (8009e78 <netif_issue_reports+0x74>)
 8009e18:	f240 326d 	movw	r2, #877	; 0x36d
 8009e1c:	4917      	ldr	r1, [pc, #92]	; (8009e7c <netif_issue_reports+0x78>)
 8009e1e:	4818      	ldr	r0, [pc, #96]	; (8009e80 <netif_issue_reports+0x7c>)
 8009e20:	f009 fa56 	bl	80132d0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009e2a:	f003 0304 	and.w	r3, r3, #4
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d01e      	beq.n	8009e70 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009e38:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d017      	beq.n	8009e70 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d013      	beq.n	8009e72 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00e      	beq.n	8009e72 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009e5a:	f003 0308 	and.w	r3, r3, #8
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d007      	beq.n	8009e72 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	3304      	adds	r3, #4
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f007 fe41 	bl	8011af0 <etharp_request>
 8009e6e:	e000      	b.n	8009e72 <netif_issue_reports+0x6e>
    return;
 8009e70:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	08014ab0 	.word	0x08014ab0
 8009e7c:	08014c54 	.word	0x08014c54
 8009e80:	08014b00 	.word	0x08014b00

08009e84 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d107      	bne.n	8009ea2 <netif_set_down+0x1e>
 8009e92:	4b12      	ldr	r3, [pc, #72]	; (8009edc <netif_set_down+0x58>)
 8009e94:	f240 329b 	movw	r2, #923	; 0x39b
 8009e98:	4911      	ldr	r1, [pc, #68]	; (8009ee0 <netif_set_down+0x5c>)
 8009e9a:	4812      	ldr	r0, [pc, #72]	; (8009ee4 <netif_set_down+0x60>)
 8009e9c:	f009 fa18 	bl	80132d0 <iprintf>
 8009ea0:	e019      	b.n	8009ed6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d012      	beq.n	8009ed6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009eb6:	f023 0301 	bic.w	r3, r3, #1
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ec8:	f003 0308 	and.w	r3, r3, #8
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f007 f9cb 	bl	801126c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	08014ab0 	.word	0x08014ab0
 8009ee0:	08014c78 	.word	0x08014c78
 8009ee4:	08014b00 	.word	0x08014b00

08009ee8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	61da      	str	r2, [r3, #28]
  }
}
 8009efe:	bf00      	nop
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b085      	sub	sp, #20
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	60b9      	str	r1, [r7, #8]
 8009f14:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009f16:	f06f 030b 	mvn.w	r3, #11
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
	...

08009f28 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	4603      	mov	r3, r0
 8009f30:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009f32:	79fb      	ldrb	r3, [r7, #7]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d013      	beq.n	8009f60 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009f38:	4b0d      	ldr	r3, [pc, #52]	; (8009f70 <netif_get_by_index+0x48>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	60fb      	str	r3, [r7, #12]
 8009f3e:	e00c      	b.n	8009f5a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f46:	3301      	adds	r3, #1
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	79fa      	ldrb	r2, [r7, #7]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d101      	bne.n	8009f54 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	e006      	b.n	8009f62 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	60fb      	str	r3, [r7, #12]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1ef      	bne.n	8009f40 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	20008ea8 	.word	0x20008ea8

08009f74 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009f7a:	4b0c      	ldr	r3, [pc, #48]	; (8009fac <pbuf_free_ooseq+0x38>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009f80:	4b0b      	ldr	r3, [pc, #44]	; (8009fb0 <pbuf_free_ooseq+0x3c>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	607b      	str	r3, [r7, #4]
 8009f86:	e00a      	b.n	8009f9e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f002 f9df 	bl	800c354 <tcp_free_ooseq>
      return;
 8009f96:	e005      	b.n	8009fa4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	607b      	str	r3, [r7, #4]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1f1      	bne.n	8009f88 <pbuf_free_ooseq+0x14>
    }
  }
}
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20008eb1 	.word	0x20008eb1
 8009fb0:	20008ec0 	.word	0x20008ec0

08009fb4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009fb8:	4b03      	ldr	r3, [pc, #12]	; (8009fc8 <pbuf_pool_is_empty+0x14>)
 8009fba:	2201      	movs	r2, #1
 8009fbc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009fbe:	bf00      	nop
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	20008eb1 	.word	0x20008eb1

08009fcc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	461a      	mov	r2, r3
 8009fda:	460b      	mov	r3, r1
 8009fdc:	80fb      	strh	r3, [r7, #6]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	88fa      	ldrh	r2, [r7, #6]
 8009ff2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	88ba      	ldrh	r2, [r7, #4]
 8009ff8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009ffa:	8b3b      	ldrh	r3, [r7, #24]
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	7f3a      	ldrb	r2, [r7, #28]
 800a006:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2201      	movs	r2, #1
 800a00c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	73da      	strb	r2, [r3, #15]
}
 800a014:	bf00      	nop
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b08c      	sub	sp, #48	; 0x30
 800a024:	af02      	add	r7, sp, #8
 800a026:	4603      	mov	r3, r0
 800a028:	71fb      	strb	r3, [r7, #7]
 800a02a:	460b      	mov	r3, r1
 800a02c:	80bb      	strh	r3, [r7, #4]
 800a02e:	4613      	mov	r3, r2
 800a030:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a032:	79fb      	ldrb	r3, [r7, #7]
 800a034:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a036:	887b      	ldrh	r3, [r7, #2]
 800a038:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a03c:	d07f      	beq.n	800a13e <pbuf_alloc+0x11e>
 800a03e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a042:	f300 80c8 	bgt.w	800a1d6 <pbuf_alloc+0x1b6>
 800a046:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a04a:	d010      	beq.n	800a06e <pbuf_alloc+0x4e>
 800a04c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a050:	f300 80c1 	bgt.w	800a1d6 <pbuf_alloc+0x1b6>
 800a054:	2b01      	cmp	r3, #1
 800a056:	d002      	beq.n	800a05e <pbuf_alloc+0x3e>
 800a058:	2b41      	cmp	r3, #65	; 0x41
 800a05a:	f040 80bc 	bne.w	800a1d6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a05e:	887a      	ldrh	r2, [r7, #2]
 800a060:	88bb      	ldrh	r3, [r7, #4]
 800a062:	4619      	mov	r1, r3
 800a064:	2000      	movs	r0, #0
 800a066:	f000 f8d1 	bl	800a20c <pbuf_alloc_reference>
 800a06a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a06c:	e0bd      	b.n	800a1ea <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a06e:	2300      	movs	r3, #0
 800a070:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a072:	2300      	movs	r3, #0
 800a074:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a076:	88bb      	ldrh	r3, [r7, #4]
 800a078:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a07a:	2008      	movs	r0, #8
 800a07c:	f7ff fc56 	bl	800992c <memp_malloc>
 800a080:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d109      	bne.n	800a09c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a088:	f7ff ff94 	bl	8009fb4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a094:	f000 faa8 	bl	800a5e8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a098:	2300      	movs	r3, #0
 800a09a:	e0a7      	b.n	800a1ec <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a09c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a09e:	3303      	adds	r3, #3
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	f023 0303 	bic.w	r3, r3, #3
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	8b7a      	ldrh	r2, [r7, #26]
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	bf28      	it	cs
 800a0b4:	4613      	movcs	r3, r2
 800a0b6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a0b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0ba:	3310      	adds	r3, #16
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	4413      	add	r3, r2
 800a0c0:	3303      	adds	r3, #3
 800a0c2:	f023 0303 	bic.w	r3, r3, #3
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	89f9      	ldrh	r1, [r7, #14]
 800a0ca:	8b7a      	ldrh	r2, [r7, #26]
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	9301      	str	r3, [sp, #4]
 800a0d0:	887b      	ldrh	r3, [r7, #2]
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4601      	mov	r1, r0
 800a0d8:	6938      	ldr	r0, [r7, #16]
 800a0da:	f7ff ff77 	bl	8009fcc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	f003 0303 	and.w	r3, r3, #3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d006      	beq.n	800a0f8 <pbuf_alloc+0xd8>
 800a0ea:	4b42      	ldr	r3, [pc, #264]	; (800a1f4 <pbuf_alloc+0x1d4>)
 800a0ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0f0:	4941      	ldr	r1, [pc, #260]	; (800a1f8 <pbuf_alloc+0x1d8>)
 800a0f2:	4842      	ldr	r0, [pc, #264]	; (800a1fc <pbuf_alloc+0x1dc>)
 800a0f4:	f009 f8ec 	bl	80132d0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a0f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0fa:	3303      	adds	r3, #3
 800a0fc:	f023 0303 	bic.w	r3, r3, #3
 800a100:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a104:	d106      	bne.n	800a114 <pbuf_alloc+0xf4>
 800a106:	4b3b      	ldr	r3, [pc, #236]	; (800a1f4 <pbuf_alloc+0x1d4>)
 800a108:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a10c:	493c      	ldr	r1, [pc, #240]	; (800a200 <pbuf_alloc+0x1e0>)
 800a10e:	483b      	ldr	r0, [pc, #236]	; (800a1fc <pbuf_alloc+0x1dc>)
 800a110:	f009 f8de 	bl	80132d0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	2b00      	cmp	r3, #0
 800a118:	d102      	bne.n	800a120 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
 800a11e:	e002      	b.n	800a126 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a12a:	8b7a      	ldrh	r2, [r7, #26]
 800a12c:	89fb      	ldrh	r3, [r7, #14]
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a132:	2300      	movs	r3, #0
 800a134:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a136:	8b7b      	ldrh	r3, [r7, #26]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d19e      	bne.n	800a07a <pbuf_alloc+0x5a>
      break;
 800a13c:	e055      	b.n	800a1ea <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a13e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a140:	3303      	adds	r3, #3
 800a142:	b29b      	uxth	r3, r3
 800a144:	f023 0303 	bic.w	r3, r3, #3
 800a148:	b29a      	uxth	r2, r3
 800a14a:	88bb      	ldrh	r3, [r7, #4]
 800a14c:	3303      	adds	r3, #3
 800a14e:	b29b      	uxth	r3, r3
 800a150:	f023 0303 	bic.w	r3, r3, #3
 800a154:	b29b      	uxth	r3, r3
 800a156:	4413      	add	r3, r2
 800a158:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a15a:	8b3b      	ldrh	r3, [r7, #24]
 800a15c:	3310      	adds	r3, #16
 800a15e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a160:	8b3a      	ldrh	r2, [r7, #24]
 800a162:	88bb      	ldrh	r3, [r7, #4]
 800a164:	3303      	adds	r3, #3
 800a166:	f023 0303 	bic.w	r3, r3, #3
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d306      	bcc.n	800a17c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a16e:	8afa      	ldrh	r2, [r7, #22]
 800a170:	88bb      	ldrh	r3, [r7, #4]
 800a172:	3303      	adds	r3, #3
 800a174:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a178:	429a      	cmp	r2, r3
 800a17a:	d201      	bcs.n	800a180 <pbuf_alloc+0x160>
        return NULL;
 800a17c:	2300      	movs	r3, #0
 800a17e:	e035      	b.n	800a1ec <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a180:	8afb      	ldrh	r3, [r7, #22]
 800a182:	4618      	mov	r0, r3
 800a184:	f7ff fa64 	bl	8009650 <mem_malloc>
 800a188:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d101      	bne.n	800a194 <pbuf_alloc+0x174>
        return NULL;
 800a190:	2300      	movs	r3, #0
 800a192:	e02b      	b.n	800a1ec <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a194:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a196:	3310      	adds	r3, #16
 800a198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a19a:	4413      	add	r3, r2
 800a19c:	3303      	adds	r3, #3
 800a19e:	f023 0303 	bic.w	r3, r3, #3
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	88b9      	ldrh	r1, [r7, #4]
 800a1a6:	88ba      	ldrh	r2, [r7, #4]
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	9301      	str	r3, [sp, #4]
 800a1ac:	887b      	ldrh	r3, [r7, #2]
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4601      	mov	r1, r0
 800a1b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1b6:	f7ff ff09 	bl	8009fcc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f003 0303 	and.w	r3, r3, #3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d010      	beq.n	800a1e8 <pbuf_alloc+0x1c8>
 800a1c6:	4b0b      	ldr	r3, [pc, #44]	; (800a1f4 <pbuf_alloc+0x1d4>)
 800a1c8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a1cc:	490d      	ldr	r1, [pc, #52]	; (800a204 <pbuf_alloc+0x1e4>)
 800a1ce:	480b      	ldr	r0, [pc, #44]	; (800a1fc <pbuf_alloc+0x1dc>)
 800a1d0:	f009 f87e 	bl	80132d0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a1d4:	e008      	b.n	800a1e8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a1d6:	4b07      	ldr	r3, [pc, #28]	; (800a1f4 <pbuf_alloc+0x1d4>)
 800a1d8:	f240 1227 	movw	r2, #295	; 0x127
 800a1dc:	490a      	ldr	r1, [pc, #40]	; (800a208 <pbuf_alloc+0x1e8>)
 800a1de:	4807      	ldr	r0, [pc, #28]	; (800a1fc <pbuf_alloc+0x1dc>)
 800a1e0:	f009 f876 	bl	80132d0 <iprintf>
      return NULL;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	e001      	b.n	800a1ec <pbuf_alloc+0x1cc>
      break;
 800a1e8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3728      	adds	r7, #40	; 0x28
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	08014ce0 	.word	0x08014ce0
 800a1f8:	08014d10 	.word	0x08014d10
 800a1fc:	08014d40 	.word	0x08014d40
 800a200:	08014d68 	.word	0x08014d68
 800a204:	08014d9c 	.word	0x08014d9c
 800a208:	08014dc8 	.word	0x08014dc8

0800a20c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af02      	add	r7, sp, #8
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	807b      	strh	r3, [r7, #2]
 800a218:	4613      	mov	r3, r2
 800a21a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a21c:	883b      	ldrh	r3, [r7, #0]
 800a21e:	2b41      	cmp	r3, #65	; 0x41
 800a220:	d009      	beq.n	800a236 <pbuf_alloc_reference+0x2a>
 800a222:	883b      	ldrh	r3, [r7, #0]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d006      	beq.n	800a236 <pbuf_alloc_reference+0x2a>
 800a228:	4b0f      	ldr	r3, [pc, #60]	; (800a268 <pbuf_alloc_reference+0x5c>)
 800a22a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a22e:	490f      	ldr	r1, [pc, #60]	; (800a26c <pbuf_alloc_reference+0x60>)
 800a230:	480f      	ldr	r0, [pc, #60]	; (800a270 <pbuf_alloc_reference+0x64>)
 800a232:	f009 f84d 	bl	80132d0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a236:	2007      	movs	r0, #7
 800a238:	f7ff fb78 	bl	800992c <memp_malloc>
 800a23c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a244:	2300      	movs	r3, #0
 800a246:	e00b      	b.n	800a260 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a248:	8879      	ldrh	r1, [r7, #2]
 800a24a:	887a      	ldrh	r2, [r7, #2]
 800a24c:	2300      	movs	r3, #0
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	883b      	ldrh	r3, [r7, #0]
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	460b      	mov	r3, r1
 800a256:	6879      	ldr	r1, [r7, #4]
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f7ff feb7 	bl	8009fcc <pbuf_init_alloced_pbuf>
  return p;
 800a25e:	68fb      	ldr	r3, [r7, #12]
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	08014ce0 	.word	0x08014ce0
 800a26c:	08014de4 	.word	0x08014de4
 800a270:	08014d40 	.word	0x08014d40

0800a274 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af02      	add	r7, sp, #8
 800a27a:	607b      	str	r3, [r7, #4]
 800a27c:	4603      	mov	r3, r0
 800a27e:	73fb      	strb	r3, [r7, #15]
 800a280:	460b      	mov	r3, r1
 800a282:	81bb      	strh	r3, [r7, #12]
 800a284:	4613      	mov	r3, r2
 800a286:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a288:	7bfb      	ldrb	r3, [r7, #15]
 800a28a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a28c:	8a7b      	ldrh	r3, [r7, #18]
 800a28e:	3303      	adds	r3, #3
 800a290:	f023 0203 	bic.w	r2, r3, #3
 800a294:	89bb      	ldrh	r3, [r7, #12]
 800a296:	441a      	add	r2, r3
 800a298:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d901      	bls.n	800a2a2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	e018      	b.n	800a2d4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a2a2:	6a3b      	ldr	r3, [r7, #32]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d007      	beq.n	800a2b8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a2a8:	8a7b      	ldrh	r3, [r7, #18]
 800a2aa:	3303      	adds	r3, #3
 800a2ac:	f023 0303 	bic.w	r3, r3, #3
 800a2b0:	6a3a      	ldr	r2, [r7, #32]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	617b      	str	r3, [r7, #20]
 800a2b6:	e001      	b.n	800a2bc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	89b9      	ldrh	r1, [r7, #12]
 800a2c0:	89ba      	ldrh	r2, [r7, #12]
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	9301      	str	r3, [sp, #4]
 800a2c6:	897b      	ldrh	r3, [r7, #10]
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	6979      	ldr	r1, [r7, #20]
 800a2ce:	f7ff fe7d 	bl	8009fcc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a2d2:	687b      	ldr	r3, [r7, #4]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d106      	bne.n	800a2fc <pbuf_realloc+0x20>
 800a2ee:	4b3a      	ldr	r3, [pc, #232]	; (800a3d8 <pbuf_realloc+0xfc>)
 800a2f0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a2f4:	4939      	ldr	r1, [pc, #228]	; (800a3dc <pbuf_realloc+0x100>)
 800a2f6:	483a      	ldr	r0, [pc, #232]	; (800a3e0 <pbuf_realloc+0x104>)
 800a2f8:	f008 ffea 	bl	80132d0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	891b      	ldrh	r3, [r3, #8]
 800a300:	887a      	ldrh	r2, [r7, #2]
 800a302:	429a      	cmp	r2, r3
 800a304:	d263      	bcs.n	800a3ce <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	891a      	ldrh	r2, [r3, #8]
 800a30a:	887b      	ldrh	r3, [r7, #2]
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a310:	887b      	ldrh	r3, [r7, #2]
 800a312:	817b      	strh	r3, [r7, #10]
  q = p;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a318:	e018      	b.n	800a34c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	895b      	ldrh	r3, [r3, #10]
 800a31e:	897a      	ldrh	r2, [r7, #10]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	891a      	ldrh	r2, [r3, #8]
 800a328:	893b      	ldrh	r3, [r7, #8]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d106      	bne.n	800a34c <pbuf_realloc+0x70>
 800a33e:	4b26      	ldr	r3, [pc, #152]	; (800a3d8 <pbuf_realloc+0xfc>)
 800a340:	f240 12af 	movw	r2, #431	; 0x1af
 800a344:	4927      	ldr	r1, [pc, #156]	; (800a3e4 <pbuf_realloc+0x108>)
 800a346:	4826      	ldr	r0, [pc, #152]	; (800a3e0 <pbuf_realloc+0x104>)
 800a348:	f008 ffc2 	bl	80132d0 <iprintf>
  while (rem_len > q->len) {
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	895b      	ldrh	r3, [r3, #10]
 800a350:	897a      	ldrh	r2, [r7, #10]
 800a352:	429a      	cmp	r2, r3
 800a354:	d8e1      	bhi.n	800a31a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	7b1b      	ldrb	r3, [r3, #12]
 800a35a:	f003 030f 	and.w	r3, r3, #15
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d121      	bne.n	800a3a6 <pbuf_realloc+0xca>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	895b      	ldrh	r3, [r3, #10]
 800a366:	897a      	ldrh	r2, [r7, #10]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d01c      	beq.n	800a3a6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	7b5b      	ldrb	r3, [r3, #13]
 800a370:	f003 0302 	and.w	r3, r3, #2
 800a374:	2b00      	cmp	r3, #0
 800a376:	d116      	bne.n	800a3a6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	b29a      	uxth	r2, r3
 800a382:	897b      	ldrh	r3, [r7, #10]
 800a384:	4413      	add	r3, r2
 800a386:	b29b      	uxth	r3, r3
 800a388:	4619      	mov	r1, r3
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f7ff f864 	bl	8009458 <mem_trim>
 800a390:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d106      	bne.n	800a3a6 <pbuf_realloc+0xca>
 800a398:	4b0f      	ldr	r3, [pc, #60]	; (800a3d8 <pbuf_realloc+0xfc>)
 800a39a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a39e:	4912      	ldr	r1, [pc, #72]	; (800a3e8 <pbuf_realloc+0x10c>)
 800a3a0:	480f      	ldr	r0, [pc, #60]	; (800a3e0 <pbuf_realloc+0x104>)
 800a3a2:	f008 ff95 	bl	80132d0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	897a      	ldrh	r2, [r7, #10]
 800a3aa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	895a      	ldrh	r2, [r3, #10]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d004      	beq.n	800a3c6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 f911 	bl	800a5e8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	601a      	str	r2, [r3, #0]
 800a3cc:	e000      	b.n	800a3d0 <pbuf_realloc+0xf4>
    return;
 800a3ce:	bf00      	nop

}
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	08014ce0 	.word	0x08014ce0
 800a3dc:	08014df8 	.word	0x08014df8
 800a3e0:	08014d40 	.word	0x08014d40
 800a3e4:	08014e10 	.word	0x08014e10
 800a3e8:	08014e28 	.word	0x08014e28

0800a3ec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d106      	bne.n	800a40e <pbuf_add_header_impl+0x22>
 800a400:	4b2b      	ldr	r3, [pc, #172]	; (800a4b0 <pbuf_add_header_impl+0xc4>)
 800a402:	f240 12df 	movw	r2, #479	; 0x1df
 800a406:	492b      	ldr	r1, [pc, #172]	; (800a4b4 <pbuf_add_header_impl+0xc8>)
 800a408:	482b      	ldr	r0, [pc, #172]	; (800a4b8 <pbuf_add_header_impl+0xcc>)
 800a40a:	f008 ff61 	bl	80132d0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <pbuf_add_header_impl+0x30>
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a41a:	d301      	bcc.n	800a420 <pbuf_add_header_impl+0x34>
    return 1;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e043      	b.n	800a4a8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d101      	bne.n	800a42a <pbuf_add_header_impl+0x3e>
    return 0;
 800a426:	2300      	movs	r3, #0
 800a428:	e03e      	b.n	800a4a8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	891a      	ldrh	r2, [r3, #8]
 800a432:	8a7b      	ldrh	r3, [r7, #18]
 800a434:	4413      	add	r3, r2
 800a436:	b29b      	uxth	r3, r3
 800a438:	8a7a      	ldrh	r2, [r7, #18]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d901      	bls.n	800a442 <pbuf_add_header_impl+0x56>
    return 1;
 800a43e:	2301      	movs	r3, #1
 800a440:	e032      	b.n	800a4a8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	7b1b      	ldrb	r3, [r3, #12]
 800a446:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a448:	8a3b      	ldrh	r3, [r7, #16]
 800a44a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00c      	beq.n	800a46c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	685a      	ldr	r2, [r3, #4]
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	425b      	negs	r3, r3
 800a45a:	4413      	add	r3, r2
 800a45c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	3310      	adds	r3, #16
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	429a      	cmp	r2, r3
 800a466:	d20d      	bcs.n	800a484 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a468:	2301      	movs	r3, #1
 800a46a:	e01d      	b.n	800a4a8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a46c:	79fb      	ldrb	r3, [r7, #7]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d006      	beq.n	800a480 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	425b      	negs	r3, r3
 800a47a:	4413      	add	r3, r2
 800a47c:	617b      	str	r3, [r7, #20]
 800a47e:	e001      	b.n	800a484 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a480:	2301      	movs	r3, #1
 800a482:	e011      	b.n	800a4a8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	895a      	ldrh	r2, [r3, #10]
 800a48e:	8a7b      	ldrh	r3, [r7, #18]
 800a490:	4413      	add	r3, r2
 800a492:	b29a      	uxth	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	891a      	ldrh	r2, [r3, #8]
 800a49c:	8a7b      	ldrh	r3, [r7, #18]
 800a49e:	4413      	add	r3, r2
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	811a      	strh	r2, [r3, #8]


  return 0;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3718      	adds	r7, #24
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	08014ce0 	.word	0x08014ce0
 800a4b4:	08014e44 	.word	0x08014e44
 800a4b8:	08014d40 	.word	0x08014d40

0800a4bc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	6839      	ldr	r1, [r7, #0]
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f7ff ff8e 	bl	800a3ec <pbuf_add_header_impl>
 800a4d0:	4603      	mov	r3, r0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
	...

0800a4dc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d106      	bne.n	800a4fa <pbuf_remove_header+0x1e>
 800a4ec:	4b20      	ldr	r3, [pc, #128]	; (800a570 <pbuf_remove_header+0x94>)
 800a4ee:	f240 224b 	movw	r2, #587	; 0x24b
 800a4f2:	4920      	ldr	r1, [pc, #128]	; (800a574 <pbuf_remove_header+0x98>)
 800a4f4:	4820      	ldr	r0, [pc, #128]	; (800a578 <pbuf_remove_header+0x9c>)
 800a4f6:	f008 feeb 	bl	80132d0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d003      	beq.n	800a508 <pbuf_remove_header+0x2c>
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a506:	d301      	bcc.n	800a50c <pbuf_remove_header+0x30>
    return 1;
 800a508:	2301      	movs	r3, #1
 800a50a:	e02c      	b.n	800a566 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d101      	bne.n	800a516 <pbuf_remove_header+0x3a>
    return 0;
 800a512:	2300      	movs	r3, #0
 800a514:	e027      	b.n	800a566 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	895b      	ldrh	r3, [r3, #10]
 800a51e:	89fa      	ldrh	r2, [r7, #14]
 800a520:	429a      	cmp	r2, r3
 800a522:	d908      	bls.n	800a536 <pbuf_remove_header+0x5a>
 800a524:	4b12      	ldr	r3, [pc, #72]	; (800a570 <pbuf_remove_header+0x94>)
 800a526:	f240 2255 	movw	r2, #597	; 0x255
 800a52a:	4914      	ldr	r1, [pc, #80]	; (800a57c <pbuf_remove_header+0xa0>)
 800a52c:	4812      	ldr	r0, [pc, #72]	; (800a578 <pbuf_remove_header+0x9c>)
 800a52e:	f008 fecf 	bl	80132d0 <iprintf>
 800a532:	2301      	movs	r3, #1
 800a534:	e017      	b.n	800a566 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685a      	ldr	r2, [r3, #4]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	441a      	add	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	895a      	ldrh	r2, [r3, #10]
 800a54c:	89fb      	ldrh	r3, [r7, #14]
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	b29a      	uxth	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	891a      	ldrh	r2, [r3, #8]
 800a55a:	89fb      	ldrh	r3, [r7, #14]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	b29a      	uxth	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	08014ce0 	.word	0x08014ce0
 800a574:	08014e44 	.word	0x08014e44
 800a578:	08014d40 	.word	0x08014d40
 800a57c:	08014e50 	.word	0x08014e50

0800a580 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	460b      	mov	r3, r1
 800a58a:	807b      	strh	r3, [r7, #2]
 800a58c:	4613      	mov	r3, r2
 800a58e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a590:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a594:	2b00      	cmp	r3, #0
 800a596:	da08      	bge.n	800a5aa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a598:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a59c:	425b      	negs	r3, r3
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7ff ff9b 	bl	800a4dc <pbuf_remove_header>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	e007      	b.n	800a5ba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a5aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5ae:	787a      	ldrb	r2, [r7, #1]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7ff ff1a 	bl	800a3ec <pbuf_add_header_impl>
 800a5b8:	4603      	mov	r3, r0
  }
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a5ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7ff ffd2 	bl	800a580 <pbuf_header_impl>
 800a5dc:	4603      	mov	r3, r0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
	...

0800a5e8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10b      	bne.n	800a60e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d106      	bne.n	800a60a <pbuf_free+0x22>
 800a5fc:	4b38      	ldr	r3, [pc, #224]	; (800a6e0 <pbuf_free+0xf8>)
 800a5fe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a602:	4938      	ldr	r1, [pc, #224]	; (800a6e4 <pbuf_free+0xfc>)
 800a604:	4838      	ldr	r0, [pc, #224]	; (800a6e8 <pbuf_free+0x100>)
 800a606:	f008 fe63 	bl	80132d0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	e063      	b.n	800a6d6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a612:	e05c      	b.n	800a6ce <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	7b9b      	ldrb	r3, [r3, #14]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d106      	bne.n	800a62a <pbuf_free+0x42>
 800a61c:	4b30      	ldr	r3, [pc, #192]	; (800a6e0 <pbuf_free+0xf8>)
 800a61e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a622:	4932      	ldr	r1, [pc, #200]	; (800a6ec <pbuf_free+0x104>)
 800a624:	4830      	ldr	r0, [pc, #192]	; (800a6e8 <pbuf_free+0x100>)
 800a626:	f008 fe53 	bl	80132d0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	7b9b      	ldrb	r3, [r3, #14]
 800a62e:	3b01      	subs	r3, #1
 800a630:	b2da      	uxtb	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	739a      	strb	r2, [r3, #14]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	7b9b      	ldrb	r3, [r3, #14]
 800a63a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a63c:	7dbb      	ldrb	r3, [r7, #22]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d143      	bne.n	800a6ca <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	7b1b      	ldrb	r3, [r3, #12]
 800a64c:	f003 030f 	and.w	r3, r3, #15
 800a650:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	7b5b      	ldrb	r3, [r3, #13]
 800a656:	f003 0302 	and.w	r3, r3, #2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d011      	beq.n	800a682 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d106      	bne.n	800a678 <pbuf_free+0x90>
 800a66a:	4b1d      	ldr	r3, [pc, #116]	; (800a6e0 <pbuf_free+0xf8>)
 800a66c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a670:	491f      	ldr	r1, [pc, #124]	; (800a6f0 <pbuf_free+0x108>)
 800a672:	481d      	ldr	r0, [pc, #116]	; (800a6e8 <pbuf_free+0x100>)
 800a674:	f008 fe2c 	bl	80132d0 <iprintf>
        pc->custom_free_function(p);
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	4798      	blx	r3
 800a680:	e01d      	b.n	800a6be <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a682:	7bfb      	ldrb	r3, [r7, #15]
 800a684:	2b02      	cmp	r3, #2
 800a686:	d104      	bne.n	800a692 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a688:	6879      	ldr	r1, [r7, #4]
 800a68a:	2008      	movs	r0, #8
 800a68c:	f7ff f99a 	bl	80099c4 <memp_free>
 800a690:	e015      	b.n	800a6be <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a692:	7bfb      	ldrb	r3, [r7, #15]
 800a694:	2b01      	cmp	r3, #1
 800a696:	d104      	bne.n	800a6a2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a698:	6879      	ldr	r1, [r7, #4]
 800a69a:	2007      	movs	r0, #7
 800a69c:	f7ff f992 	bl	80099c4 <memp_free>
 800a6a0:	e00d      	b.n	800a6be <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d103      	bne.n	800a6b0 <pbuf_free+0xc8>
          mem_free(p);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7fe fe6b 	bl	8009384 <mem_free>
 800a6ae:	e006      	b.n	800a6be <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a6b0:	4b0b      	ldr	r3, [pc, #44]	; (800a6e0 <pbuf_free+0xf8>)
 800a6b2:	f240 320f 	movw	r2, #783	; 0x30f
 800a6b6:	490f      	ldr	r1, [pc, #60]	; (800a6f4 <pbuf_free+0x10c>)
 800a6b8:	480b      	ldr	r0, [pc, #44]	; (800a6e8 <pbuf_free+0x100>)
 800a6ba:	f008 fe09 	bl	80132d0 <iprintf>
        }
      }
      count++;
 800a6be:	7dfb      	ldrb	r3, [r7, #23]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	607b      	str	r3, [r7, #4]
 800a6c8:	e001      	b.n	800a6ce <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d19f      	bne.n	800a614 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	08014ce0 	.word	0x08014ce0
 800a6e4:	08014e44 	.word	0x08014e44
 800a6e8:	08014d40 	.word	0x08014d40
 800a6ec:	08014e70 	.word	0x08014e70
 800a6f0:	08014e88 	.word	0x08014e88
 800a6f4:	08014eac 	.word	0x08014eac

0800a6f8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a704:	e005      	b.n	800a712 <pbuf_clen+0x1a>
    ++len;
 800a706:	89fb      	ldrh	r3, [r7, #14]
 800a708:	3301      	adds	r3, #1
 800a70a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1f6      	bne.n	800a706 <pbuf_clen+0xe>
  }
  return len;
 800a718:	89fb      	ldrh	r3, [r7, #14]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
	...

0800a728 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d010      	beq.n	800a758 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	7b9b      	ldrb	r3, [r3, #14]
 800a73a:	3301      	adds	r3, #1
 800a73c:	b2da      	uxtb	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	7b9b      	ldrb	r3, [r3, #14]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d106      	bne.n	800a758 <pbuf_ref+0x30>
 800a74a:	4b05      	ldr	r3, [pc, #20]	; (800a760 <pbuf_ref+0x38>)
 800a74c:	f240 3242 	movw	r2, #834	; 0x342
 800a750:	4904      	ldr	r1, [pc, #16]	; (800a764 <pbuf_ref+0x3c>)
 800a752:	4805      	ldr	r0, [pc, #20]	; (800a768 <pbuf_ref+0x40>)
 800a754:	f008 fdbc 	bl	80132d0 <iprintf>
  }
}
 800a758:	bf00      	nop
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	08014ce0 	.word	0x08014ce0
 800a764:	08014ec0 	.word	0x08014ec0
 800a768:	08014d40 	.word	0x08014d40

0800a76c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d002      	beq.n	800a782 <pbuf_cat+0x16>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d107      	bne.n	800a792 <pbuf_cat+0x26>
 800a782:	4b20      	ldr	r3, [pc, #128]	; (800a804 <pbuf_cat+0x98>)
 800a784:	f240 3259 	movw	r2, #857	; 0x359
 800a788:	491f      	ldr	r1, [pc, #124]	; (800a808 <pbuf_cat+0x9c>)
 800a78a:	4820      	ldr	r0, [pc, #128]	; (800a80c <pbuf_cat+0xa0>)
 800a78c:	f008 fda0 	bl	80132d0 <iprintf>
 800a790:	e034      	b.n	800a7fc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	60fb      	str	r3, [r7, #12]
 800a796:	e00a      	b.n	800a7ae <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	891a      	ldrh	r2, [r3, #8]
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	891b      	ldrh	r3, [r3, #8]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	60fb      	str	r3, [r7, #12]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1f0      	bne.n	800a798 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	891a      	ldrh	r2, [r3, #8]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	895b      	ldrh	r3, [r3, #10]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d006      	beq.n	800a7d0 <pbuf_cat+0x64>
 800a7c2:	4b10      	ldr	r3, [pc, #64]	; (800a804 <pbuf_cat+0x98>)
 800a7c4:	f240 3262 	movw	r2, #866	; 0x362
 800a7c8:	4911      	ldr	r1, [pc, #68]	; (800a810 <pbuf_cat+0xa4>)
 800a7ca:	4810      	ldr	r0, [pc, #64]	; (800a80c <pbuf_cat+0xa0>)
 800a7cc:	f008 fd80 	bl	80132d0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d006      	beq.n	800a7e6 <pbuf_cat+0x7a>
 800a7d8:	4b0a      	ldr	r3, [pc, #40]	; (800a804 <pbuf_cat+0x98>)
 800a7da:	f240 3263 	movw	r2, #867	; 0x363
 800a7de:	490d      	ldr	r1, [pc, #52]	; (800a814 <pbuf_cat+0xa8>)
 800a7e0:	480a      	ldr	r0, [pc, #40]	; (800a80c <pbuf_cat+0xa0>)
 800a7e2:	f008 fd75 	bl	80132d0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	891a      	ldrh	r2, [r3, #8]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	891b      	ldrh	r3, [r3, #8]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	683a      	ldr	r2, [r7, #0]
 800a7fa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	08014ce0 	.word	0x08014ce0
 800a808:	08014ed4 	.word	0x08014ed4
 800a80c:	08014d40 	.word	0x08014d40
 800a810:	08014f0c 	.word	0x08014f0c
 800a814:	08014f3c 	.word	0x08014f3c

0800a818 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7ff ffa1 	bl	800a76c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a82a:	6838      	ldr	r0, [r7, #0]
 800a82c:	f7ff ff7c 	bl	800a728 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a842:	2300      	movs	r3, #0
 800a844:	617b      	str	r3, [r7, #20]
 800a846:	2300      	movs	r3, #0
 800a848:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d008      	beq.n	800a862 <pbuf_copy+0x2a>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <pbuf_copy+0x2a>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	891a      	ldrh	r2, [r3, #8]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	891b      	ldrh	r3, [r3, #8]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d209      	bcs.n	800a876 <pbuf_copy+0x3e>
 800a862:	4b57      	ldr	r3, [pc, #348]	; (800a9c0 <pbuf_copy+0x188>)
 800a864:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a868:	4956      	ldr	r1, [pc, #344]	; (800a9c4 <pbuf_copy+0x18c>)
 800a86a:	4857      	ldr	r0, [pc, #348]	; (800a9c8 <pbuf_copy+0x190>)
 800a86c:	f008 fd30 	bl	80132d0 <iprintf>
 800a870:	f06f 030f 	mvn.w	r3, #15
 800a874:	e09f      	b.n	800a9b6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	895b      	ldrh	r3, [r3, #10]
 800a87a:	461a      	mov	r2, r3
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	1ad2      	subs	r2, r2, r3
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	895b      	ldrh	r3, [r3, #10]
 800a884:	4619      	mov	r1, r3
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	1acb      	subs	r3, r1, r3
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d306      	bcc.n	800a89c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	895b      	ldrh	r3, [r3, #10]
 800a892:	461a      	mov	r2, r3
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	60fb      	str	r3, [r7, #12]
 800a89a:	e005      	b.n	800a8a8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	895b      	ldrh	r3, [r3, #10]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685a      	ldr	r2, [r3, #4]
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	18d0      	adds	r0, r2, r3
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	685a      	ldr	r2, [r3, #4]
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	f008 fcd8 	bl	8013270 <memcpy>
    offset_to += len;
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	895b      	ldrh	r3, [r3, #10]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d906      	bls.n	800a8ea <pbuf_copy+0xb2>
 800a8dc:	4b38      	ldr	r3, [pc, #224]	; (800a9c0 <pbuf_copy+0x188>)
 800a8de:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a8e2:	493a      	ldr	r1, [pc, #232]	; (800a9cc <pbuf_copy+0x194>)
 800a8e4:	4838      	ldr	r0, [pc, #224]	; (800a9c8 <pbuf_copy+0x190>)
 800a8e6:	f008 fcf3 	bl	80132d0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	895b      	ldrh	r3, [r3, #10]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d906      	bls.n	800a904 <pbuf_copy+0xcc>
 800a8f6:	4b32      	ldr	r3, [pc, #200]	; (800a9c0 <pbuf_copy+0x188>)
 800a8f8:	f240 32da 	movw	r2, #986	; 0x3da
 800a8fc:	4934      	ldr	r1, [pc, #208]	; (800a9d0 <pbuf_copy+0x198>)
 800a8fe:	4832      	ldr	r0, [pc, #200]	; (800a9c8 <pbuf_copy+0x190>)
 800a900:	f008 fce6 	bl	80132d0 <iprintf>
    if (offset_from >= p_from->len) {
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	895b      	ldrh	r3, [r3, #10]
 800a908:	461a      	mov	r2, r3
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d304      	bcc.n	800a91a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	895b      	ldrh	r3, [r3, #10]
 800a91e:	461a      	mov	r2, r3
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	4293      	cmp	r3, r2
 800a924:	d114      	bne.n	800a950 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a926:	2300      	movs	r3, #0
 800a928:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10c      	bne.n	800a950 <pbuf_copy+0x118>
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d009      	beq.n	800a950 <pbuf_copy+0x118>
 800a93c:	4b20      	ldr	r3, [pc, #128]	; (800a9c0 <pbuf_copy+0x188>)
 800a93e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a942:	4924      	ldr	r1, [pc, #144]	; (800a9d4 <pbuf_copy+0x19c>)
 800a944:	4820      	ldr	r0, [pc, #128]	; (800a9c8 <pbuf_copy+0x190>)
 800a946:	f008 fcc3 	bl	80132d0 <iprintf>
 800a94a:	f06f 030f 	mvn.w	r3, #15
 800a94e:	e032      	b.n	800a9b6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d013      	beq.n	800a97e <pbuf_copy+0x146>
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	895a      	ldrh	r2, [r3, #10]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	891b      	ldrh	r3, [r3, #8]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d10d      	bne.n	800a97e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d009      	beq.n	800a97e <pbuf_copy+0x146>
 800a96a:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <pbuf_copy+0x188>)
 800a96c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a970:	4919      	ldr	r1, [pc, #100]	; (800a9d8 <pbuf_copy+0x1a0>)
 800a972:	4815      	ldr	r0, [pc, #84]	; (800a9c8 <pbuf_copy+0x190>)
 800a974:	f008 fcac 	bl	80132d0 <iprintf>
 800a978:	f06f 0305 	mvn.w	r3, #5
 800a97c:	e01b      	b.n	800a9b6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d013      	beq.n	800a9ac <pbuf_copy+0x174>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	895a      	ldrh	r2, [r3, #10]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	891b      	ldrh	r3, [r3, #8]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d10d      	bne.n	800a9ac <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d009      	beq.n	800a9ac <pbuf_copy+0x174>
 800a998:	4b09      	ldr	r3, [pc, #36]	; (800a9c0 <pbuf_copy+0x188>)
 800a99a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a99e:	490e      	ldr	r1, [pc, #56]	; (800a9d8 <pbuf_copy+0x1a0>)
 800a9a0:	4809      	ldr	r0, [pc, #36]	; (800a9c8 <pbuf_copy+0x190>)
 800a9a2:	f008 fc95 	bl	80132d0 <iprintf>
 800a9a6:	f06f 0305 	mvn.w	r3, #5
 800a9aa:	e004      	b.n	800a9b6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f47f af61 	bne.w	800a876 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	08014ce0 	.word	0x08014ce0
 800a9c4:	08014f88 	.word	0x08014f88
 800a9c8:	08014d40 	.word	0x08014d40
 800a9cc:	08014fb8 	.word	0x08014fb8
 800a9d0:	08014fd0 	.word	0x08014fd0
 800a9d4:	08014fec 	.word	0x08014fec
 800a9d8:	08014ffc 	.word	0x08014ffc

0800a9dc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b088      	sub	sp, #32
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	80fb      	strh	r3, [r7, #6]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d108      	bne.n	800aa12 <pbuf_copy_partial+0x36>
 800aa00:	4b2b      	ldr	r3, [pc, #172]	; (800aab0 <pbuf_copy_partial+0xd4>)
 800aa02:	f240 420a 	movw	r2, #1034	; 0x40a
 800aa06:	492b      	ldr	r1, [pc, #172]	; (800aab4 <pbuf_copy_partial+0xd8>)
 800aa08:	482b      	ldr	r0, [pc, #172]	; (800aab8 <pbuf_copy_partial+0xdc>)
 800aa0a:	f008 fc61 	bl	80132d0 <iprintf>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e04a      	b.n	800aaa8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d108      	bne.n	800aa2a <pbuf_copy_partial+0x4e>
 800aa18:	4b25      	ldr	r3, [pc, #148]	; (800aab0 <pbuf_copy_partial+0xd4>)
 800aa1a:	f240 420b 	movw	r2, #1035	; 0x40b
 800aa1e:	4927      	ldr	r1, [pc, #156]	; (800aabc <pbuf_copy_partial+0xe0>)
 800aa20:	4825      	ldr	r0, [pc, #148]	; (800aab8 <pbuf_copy_partial+0xdc>)
 800aa22:	f008 fc55 	bl	80132d0 <iprintf>
 800aa26:	2300      	movs	r3, #0
 800aa28:	e03e      	b.n	800aaa8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	61fb      	str	r3, [r7, #28]
 800aa2e:	e034      	b.n	800aa9a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800aa30:	88bb      	ldrh	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00a      	beq.n	800aa4c <pbuf_copy_partial+0x70>
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	895b      	ldrh	r3, [r3, #10]
 800aa3a:	88ba      	ldrh	r2, [r7, #4]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d305      	bcc.n	800aa4c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	895b      	ldrh	r3, [r3, #10]
 800aa44:	88ba      	ldrh	r2, [r7, #4]
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	80bb      	strh	r3, [r7, #4]
 800aa4a:	e023      	b.n	800aa94 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	895a      	ldrh	r2, [r3, #10]
 800aa50:	88bb      	ldrh	r3, [r7, #4]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800aa56:	8b3a      	ldrh	r2, [r7, #24]
 800aa58:	88fb      	ldrh	r3, [r7, #6]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d901      	bls.n	800aa62 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800aa5e:	88fb      	ldrh	r3, [r7, #6]
 800aa60:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800aa62:	8b7b      	ldrh	r3, [r7, #26]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	18d0      	adds	r0, r2, r3
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	88bb      	ldrh	r3, [r7, #4]
 800aa6e:	4413      	add	r3, r2
 800aa70:	8b3a      	ldrh	r2, [r7, #24]
 800aa72:	4619      	mov	r1, r3
 800aa74:	f008 fbfc 	bl	8013270 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800aa78:	8afa      	ldrh	r2, [r7, #22]
 800aa7a:	8b3b      	ldrh	r3, [r7, #24]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800aa80:	8b7a      	ldrh	r2, [r7, #26]
 800aa82:	8b3b      	ldrh	r3, [r7, #24]
 800aa84:	4413      	add	r3, r2
 800aa86:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800aa88:	88fa      	ldrh	r2, [r7, #6]
 800aa8a:	8b3b      	ldrh	r3, [r7, #24]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	61fb      	str	r3, [r7, #28]
 800aa9a:	88fb      	ldrh	r3, [r7, #6]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d002      	beq.n	800aaa6 <pbuf_copy_partial+0xca>
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1c4      	bne.n	800aa30 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800aaa6:	8afb      	ldrh	r3, [r7, #22]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3720      	adds	r7, #32
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	08014ce0 	.word	0x08014ce0
 800aab4:	08015028 	.word	0x08015028
 800aab8:	08014d40 	.word	0x08014d40
 800aabc:	08015048 	.word	0x08015048

0800aac0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	4613      	mov	r3, r2
 800aacc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800aace:	88fb      	ldrh	r3, [r7, #6]
 800aad0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d109      	bne.n	800aaf0 <pbuf_take+0x30>
 800aadc:	4b3a      	ldr	r3, [pc, #232]	; (800abc8 <pbuf_take+0x108>)
 800aade:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800aae2:	493a      	ldr	r1, [pc, #232]	; (800abcc <pbuf_take+0x10c>)
 800aae4:	483a      	ldr	r0, [pc, #232]	; (800abd0 <pbuf_take+0x110>)
 800aae6:	f008 fbf3 	bl	80132d0 <iprintf>
 800aaea:	f06f 030f 	mvn.w	r3, #15
 800aaee:	e067      	b.n	800abc0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d109      	bne.n	800ab0a <pbuf_take+0x4a>
 800aaf6:	4b34      	ldr	r3, [pc, #208]	; (800abc8 <pbuf_take+0x108>)
 800aaf8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800aafc:	4935      	ldr	r1, [pc, #212]	; (800abd4 <pbuf_take+0x114>)
 800aafe:	4834      	ldr	r0, [pc, #208]	; (800abd0 <pbuf_take+0x110>)
 800ab00:	f008 fbe6 	bl	80132d0 <iprintf>
 800ab04:	f06f 030f 	mvn.w	r3, #15
 800ab08:	e05a      	b.n	800abc0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	891b      	ldrh	r3, [r3, #8]
 800ab0e:	88fa      	ldrh	r2, [r7, #6]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d909      	bls.n	800ab28 <pbuf_take+0x68>
 800ab14:	4b2c      	ldr	r3, [pc, #176]	; (800abc8 <pbuf_take+0x108>)
 800ab16:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800ab1a:	492f      	ldr	r1, [pc, #188]	; (800abd8 <pbuf_take+0x118>)
 800ab1c:	482c      	ldr	r0, [pc, #176]	; (800abd0 <pbuf_take+0x110>)
 800ab1e:	f008 fbd7 	bl	80132d0 <iprintf>
 800ab22:	f04f 33ff 	mov.w	r3, #4294967295
 800ab26:	e04b      	b.n	800abc0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d007      	beq.n	800ab3e <pbuf_take+0x7e>
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d004      	beq.n	800ab3e <pbuf_take+0x7e>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	891b      	ldrh	r3, [r3, #8]
 800ab38:	88fa      	ldrh	r2, [r7, #6]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d902      	bls.n	800ab44 <pbuf_take+0x84>
    return ERR_ARG;
 800ab3e:	f06f 030f 	mvn.w	r3, #15
 800ab42:	e03d      	b.n	800abc0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	61fb      	str	r3, [r7, #28]
 800ab48:	e028      	b.n	800ab9c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d106      	bne.n	800ab5e <pbuf_take+0x9e>
 800ab50:	4b1d      	ldr	r3, [pc, #116]	; (800abc8 <pbuf_take+0x108>)
 800ab52:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ab56:	4921      	ldr	r1, [pc, #132]	; (800abdc <pbuf_take+0x11c>)
 800ab58:	481d      	ldr	r0, [pc, #116]	; (800abd0 <pbuf_take+0x110>)
 800ab5a:	f008 fbb9 	bl	80132d0 <iprintf>
    buf_copy_len = total_copy_len;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	895b      	ldrh	r3, [r3, #10]
 800ab66:	461a      	mov	r2, r3
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d902      	bls.n	800ab74 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	895b      	ldrh	r3, [r3, #10]
 800ab72:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	6858      	ldr	r0, [r3, #4]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	69ba      	ldr	r2, [r7, #24]
 800ab80:	4619      	mov	r1, r3
 800ab82:	f008 fb75 	bl	8013270 <memcpy>
    total_copy_len -= buf_copy_len;
 800ab86:	697a      	ldr	r2, [r7, #20]
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	4413      	add	r3, r2
 800ab94:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	61fb      	str	r3, [r7, #28]
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1d3      	bne.n	800ab4a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d103      	bne.n	800abb0 <pbuf_take+0xf0>
 800aba8:	88fb      	ldrh	r3, [r7, #6]
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	429a      	cmp	r2, r3
 800abae:	d006      	beq.n	800abbe <pbuf_take+0xfe>
 800abb0:	4b05      	ldr	r3, [pc, #20]	; (800abc8 <pbuf_take+0x108>)
 800abb2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800abb6:	490a      	ldr	r1, [pc, #40]	; (800abe0 <pbuf_take+0x120>)
 800abb8:	4805      	ldr	r0, [pc, #20]	; (800abd0 <pbuf_take+0x110>)
 800abba:	f008 fb89 	bl	80132d0 <iprintf>
  return ERR_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3720      	adds	r7, #32
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	08014ce0 	.word	0x08014ce0
 800abcc:	080150b8 	.word	0x080150b8
 800abd0:	08014d40 	.word	0x08014d40
 800abd4:	080150d0 	.word	0x080150d0
 800abd8:	080150ec 	.word	0x080150ec
 800abdc:	0801510c 	.word	0x0801510c
 800abe0:	08015124 	.word	0x08015124

0800abe4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	4603      	mov	r3, r0
 800abec:	603a      	str	r2, [r7, #0]
 800abee:	71fb      	strb	r3, [r7, #7]
 800abf0:	460b      	mov	r3, r1
 800abf2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	8919      	ldrh	r1, [r3, #8]
 800abf8:	88ba      	ldrh	r2, [r7, #4]
 800abfa:	79fb      	ldrb	r3, [r7, #7]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7ff fa0f 	bl	800a020 <pbuf_alloc>
 800ac02:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d101      	bne.n	800ac0e <pbuf_clone+0x2a>
    return NULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e011      	b.n	800ac32 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f7ff fe11 	bl	800a838 <pbuf_copy>
 800ac16:	4603      	mov	r3, r0
 800ac18:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ac1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d006      	beq.n	800ac30 <pbuf_clone+0x4c>
 800ac22:	4b06      	ldr	r3, [pc, #24]	; (800ac3c <pbuf_clone+0x58>)
 800ac24:	f240 5224 	movw	r2, #1316	; 0x524
 800ac28:	4905      	ldr	r1, [pc, #20]	; (800ac40 <pbuf_clone+0x5c>)
 800ac2a:	4806      	ldr	r0, [pc, #24]	; (800ac44 <pbuf_clone+0x60>)
 800ac2c:	f008 fb50 	bl	80132d0 <iprintf>
  return q;
 800ac30:	68fb      	ldr	r3, [r7, #12]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	08014ce0 	.word	0x08014ce0
 800ac40:	08015154 	.word	0x08015154
 800ac44:	08014d40 	.word	0x08014d40

0800ac48 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ac4c:	f008 fb58 	bl	8013300 <rand>
 800ac50:	4603      	mov	r3, r0
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	4b01      	ldr	r3, [pc, #4]	; (800ac68 <tcp_init+0x20>)
 800ac62:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ac64:	bf00      	nop
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	2000000e 	.word	0x2000000e

0800ac6c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	7d1b      	ldrb	r3, [r3, #20]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d105      	bne.n	800ac88 <tcp_free+0x1c>
 800ac7c:	4b06      	ldr	r3, [pc, #24]	; (800ac98 <tcp_free+0x2c>)
 800ac7e:	22d4      	movs	r2, #212	; 0xd4
 800ac80:	4906      	ldr	r1, [pc, #24]	; (800ac9c <tcp_free+0x30>)
 800ac82:	4807      	ldr	r0, [pc, #28]	; (800aca0 <tcp_free+0x34>)
 800ac84:	f008 fb24 	bl	80132d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	2001      	movs	r0, #1
 800ac8c:	f7fe fe9a 	bl	80099c4 <memp_free>
}
 800ac90:	bf00      	nop
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	080151e0 	.word	0x080151e0
 800ac9c:	08015210 	.word	0x08015210
 800aca0:	08015224 	.word	0x08015224

0800aca4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	7d1b      	ldrb	r3, [r3, #20]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d105      	bne.n	800acc0 <tcp_free_listen+0x1c>
 800acb4:	4b06      	ldr	r3, [pc, #24]	; (800acd0 <tcp_free_listen+0x2c>)
 800acb6:	22df      	movs	r2, #223	; 0xdf
 800acb8:	4906      	ldr	r1, [pc, #24]	; (800acd4 <tcp_free_listen+0x30>)
 800acba:	4807      	ldr	r0, [pc, #28]	; (800acd8 <tcp_free_listen+0x34>)
 800acbc:	f008 fb08 	bl	80132d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800acc0:	6879      	ldr	r1, [r7, #4]
 800acc2:	2002      	movs	r0, #2
 800acc4:	f7fe fe7e 	bl	80099c4 <memp_free>
}
 800acc8:	bf00      	nop
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	080151e0 	.word	0x080151e0
 800acd4:	0801524c 	.word	0x0801524c
 800acd8:	08015224 	.word	0x08015224

0800acdc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ace0:	f000 fea2 	bl	800ba28 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ace4:	4b07      	ldr	r3, [pc, #28]	; (800ad04 <tcp_tmr+0x28>)
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	3301      	adds	r3, #1
 800acea:	b2da      	uxtb	r2, r3
 800acec:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <tcp_tmr+0x28>)
 800acee:	701a      	strb	r2, [r3, #0]
 800acf0:	4b04      	ldr	r3, [pc, #16]	; (800ad04 <tcp_tmr+0x28>)
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800acfc:	f000 fb54 	bl	800b3a8 <tcp_slowtmr>
  }
}
 800ad00:	bf00      	nop
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	20008ec9 	.word	0x20008ec9

0800ad08 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d105      	bne.n	800ad24 <tcp_remove_listener+0x1c>
 800ad18:	4b0d      	ldr	r3, [pc, #52]	; (800ad50 <tcp_remove_listener+0x48>)
 800ad1a:	22ff      	movs	r2, #255	; 0xff
 800ad1c:	490d      	ldr	r1, [pc, #52]	; (800ad54 <tcp_remove_listener+0x4c>)
 800ad1e:	480e      	ldr	r0, [pc, #56]	; (800ad58 <tcp_remove_listener+0x50>)
 800ad20:	f008 fad6 	bl	80132d0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	60fb      	str	r3, [r7, #12]
 800ad28:	e00a      	b.n	800ad40 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d102      	bne.n	800ad3a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	60fb      	str	r3, [r7, #12]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1f1      	bne.n	800ad2a <tcp_remove_listener+0x22>
    }
  }
}
 800ad46:	bf00      	nop
 800ad48:	bf00      	nop
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	080151e0 	.word	0x080151e0
 800ad54:	08015268 	.word	0x08015268
 800ad58:	08015224 	.word	0x08015224

0800ad5c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d106      	bne.n	800ad78 <tcp_listen_closed+0x1c>
 800ad6a:	4b14      	ldr	r3, [pc, #80]	; (800adbc <tcp_listen_closed+0x60>)
 800ad6c:	f240 1211 	movw	r2, #273	; 0x111
 800ad70:	4913      	ldr	r1, [pc, #76]	; (800adc0 <tcp_listen_closed+0x64>)
 800ad72:	4814      	ldr	r0, [pc, #80]	; (800adc4 <tcp_listen_closed+0x68>)
 800ad74:	f008 faac 	bl	80132d0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	7d1b      	ldrb	r3, [r3, #20]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d006      	beq.n	800ad8e <tcp_listen_closed+0x32>
 800ad80:	4b0e      	ldr	r3, [pc, #56]	; (800adbc <tcp_listen_closed+0x60>)
 800ad82:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ad86:	4910      	ldr	r1, [pc, #64]	; (800adc8 <tcp_listen_closed+0x6c>)
 800ad88:	480e      	ldr	r0, [pc, #56]	; (800adc4 <tcp_listen_closed+0x68>)
 800ad8a:	f008 faa1 	bl	80132d0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ad8e:	2301      	movs	r3, #1
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	e00b      	b.n	800adac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ad94:	4a0d      	ldr	r2, [pc, #52]	; (800adcc <tcp_listen_closed+0x70>)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6879      	ldr	r1, [r7, #4]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7ff ffb1 	bl	800ad08 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	3301      	adds	r3, #1
 800adaa:	60fb      	str	r3, [r7, #12]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d9f0      	bls.n	800ad94 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800adb2:	bf00      	nop
 800adb4:	bf00      	nop
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	080151e0 	.word	0x080151e0
 800adc0:	08015290 	.word	0x08015290
 800adc4:	08015224 	.word	0x08015224
 800adc8:	0801529c 	.word	0x0801529c
 800adcc:	080171bc 	.word	0x080171bc

0800add0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800add0:	b5b0      	push	{r4, r5, r7, lr}
 800add2:	b088      	sub	sp, #32
 800add4:	af04      	add	r7, sp, #16
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	460b      	mov	r3, r1
 800adda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d106      	bne.n	800adf0 <tcp_close_shutdown+0x20>
 800ade2:	4b63      	ldr	r3, [pc, #396]	; (800af70 <tcp_close_shutdown+0x1a0>)
 800ade4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ade8:	4962      	ldr	r1, [pc, #392]	; (800af74 <tcp_close_shutdown+0x1a4>)
 800adea:	4863      	ldr	r0, [pc, #396]	; (800af78 <tcp_close_shutdown+0x1a8>)
 800adec:	f008 fa70 	bl	80132d0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800adf0:	78fb      	ldrb	r3, [r7, #3]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d066      	beq.n	800aec4 <tcp_close_shutdown+0xf4>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	7d1b      	ldrb	r3, [r3, #20]
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	d003      	beq.n	800ae06 <tcp_close_shutdown+0x36>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	7d1b      	ldrb	r3, [r3, #20]
 800ae02:	2b07      	cmp	r3, #7
 800ae04:	d15e      	bne.n	800aec4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d104      	bne.n	800ae18 <tcp_close_shutdown+0x48>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae12:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ae16:	d055      	beq.n	800aec4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	8b5b      	ldrh	r3, [r3, #26]
 800ae1c:	f003 0310 	and.w	r3, r3, #16
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d106      	bne.n	800ae32 <tcp_close_shutdown+0x62>
 800ae24:	4b52      	ldr	r3, [pc, #328]	; (800af70 <tcp_close_shutdown+0x1a0>)
 800ae26:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ae2a:	4954      	ldr	r1, [pc, #336]	; (800af7c <tcp_close_shutdown+0x1ac>)
 800ae2c:	4852      	ldr	r0, [pc, #328]	; (800af78 <tcp_close_shutdown+0x1a8>)
 800ae2e:	f008 fa4f 	bl	80132d0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ae3a:	687d      	ldr	r5, [r7, #4]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3304      	adds	r3, #4
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	8ad2      	ldrh	r2, [r2, #22]
 800ae44:	6879      	ldr	r1, [r7, #4]
 800ae46:	8b09      	ldrh	r1, [r1, #24]
 800ae48:	9102      	str	r1, [sp, #8]
 800ae4a:	9201      	str	r2, [sp, #4]
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	462b      	mov	r3, r5
 800ae50:	4622      	mov	r2, r4
 800ae52:	4601      	mov	r1, r0
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f004 fe91 	bl	800fb7c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f001 f8c6 	bl	800bfec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ae60:	4b47      	ldr	r3, [pc, #284]	; (800af80 <tcp_close_shutdown+0x1b0>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d105      	bne.n	800ae76 <tcp_close_shutdown+0xa6>
 800ae6a:	4b45      	ldr	r3, [pc, #276]	; (800af80 <tcp_close_shutdown+0x1b0>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	4a43      	ldr	r2, [pc, #268]	; (800af80 <tcp_close_shutdown+0x1b0>)
 800ae72:	6013      	str	r3, [r2, #0]
 800ae74:	e013      	b.n	800ae9e <tcp_close_shutdown+0xce>
 800ae76:	4b42      	ldr	r3, [pc, #264]	; (800af80 <tcp_close_shutdown+0x1b0>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	e00c      	b.n	800ae98 <tcp_close_shutdown+0xc8>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d104      	bne.n	800ae92 <tcp_close_shutdown+0xc2>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	60da      	str	r2, [r3, #12]
 800ae90:	e005      	b.n	800ae9e <tcp_close_shutdown+0xce>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	60fb      	str	r3, [r7, #12]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1ef      	bne.n	800ae7e <tcp_close_shutdown+0xae>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	60da      	str	r2, [r3, #12]
 800aea4:	4b37      	ldr	r3, [pc, #220]	; (800af84 <tcp_close_shutdown+0x1b4>)
 800aea6:	2201      	movs	r2, #1
 800aea8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800aeaa:	4b37      	ldr	r3, [pc, #220]	; (800af88 <tcp_close_shutdown+0x1b8>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d102      	bne.n	800aeba <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800aeb4:	f003 fd5e 	bl	800e974 <tcp_trigger_input_pcb_close>
 800aeb8:	e002      	b.n	800aec0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7ff fed6 	bl	800ac6c <tcp_free>
      }
      return ERR_OK;
 800aec0:	2300      	movs	r3, #0
 800aec2:	e050      	b.n	800af66 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	7d1b      	ldrb	r3, [r3, #20]
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d03b      	beq.n	800af44 <tcp_close_shutdown+0x174>
 800aecc:	2b02      	cmp	r3, #2
 800aece:	dc44      	bgt.n	800af5a <tcp_close_shutdown+0x18a>
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d002      	beq.n	800aeda <tcp_close_shutdown+0x10a>
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d02a      	beq.n	800af2e <tcp_close_shutdown+0x15e>
 800aed8:	e03f      	b.n	800af5a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	8adb      	ldrh	r3, [r3, #22]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d021      	beq.n	800af26 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800aee2:	4b2a      	ldr	r3, [pc, #168]	; (800af8c <tcp_close_shutdown+0x1bc>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d105      	bne.n	800aef8 <tcp_close_shutdown+0x128>
 800aeec:	4b27      	ldr	r3, [pc, #156]	; (800af8c <tcp_close_shutdown+0x1bc>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	4a26      	ldr	r2, [pc, #152]	; (800af8c <tcp_close_shutdown+0x1bc>)
 800aef4:	6013      	str	r3, [r2, #0]
 800aef6:	e013      	b.n	800af20 <tcp_close_shutdown+0x150>
 800aef8:	4b24      	ldr	r3, [pc, #144]	; (800af8c <tcp_close_shutdown+0x1bc>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	60bb      	str	r3, [r7, #8]
 800aefe:	e00c      	b.n	800af1a <tcp_close_shutdown+0x14a>
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	429a      	cmp	r2, r3
 800af08:	d104      	bne.n	800af14 <tcp_close_shutdown+0x144>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68da      	ldr	r2, [r3, #12]
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	60da      	str	r2, [r3, #12]
 800af12:	e005      	b.n	800af20 <tcp_close_shutdown+0x150>
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	60bb      	str	r3, [r7, #8]
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1ef      	bne.n	800af00 <tcp_close_shutdown+0x130>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7ff fea0 	bl	800ac6c <tcp_free>
      break;
 800af2c:	e01a      	b.n	800af64 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7ff ff14 	bl	800ad5c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800af34:	6879      	ldr	r1, [r7, #4]
 800af36:	4816      	ldr	r0, [pc, #88]	; (800af90 <tcp_close_shutdown+0x1c0>)
 800af38:	f001 f8a8 	bl	800c08c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff feb1 	bl	800aca4 <tcp_free_listen>
      break;
 800af42:	e00f      	b.n	800af64 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800af44:	6879      	ldr	r1, [r7, #4]
 800af46:	480e      	ldr	r0, [pc, #56]	; (800af80 <tcp_close_shutdown+0x1b0>)
 800af48:	f001 f8a0 	bl	800c08c <tcp_pcb_remove>
 800af4c:	4b0d      	ldr	r3, [pc, #52]	; (800af84 <tcp_close_shutdown+0x1b4>)
 800af4e:	2201      	movs	r2, #1
 800af50:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7ff fe8a 	bl	800ac6c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800af58:	e004      	b.n	800af64 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f81a 	bl	800af94 <tcp_close_shutdown_fin>
 800af60:	4603      	mov	r3, r0
 800af62:	e000      	b.n	800af66 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bdb0      	pop	{r4, r5, r7, pc}
 800af6e:	bf00      	nop
 800af70:	080151e0 	.word	0x080151e0
 800af74:	080152b4 	.word	0x080152b4
 800af78:	08015224 	.word	0x08015224
 800af7c:	080152d4 	.word	0x080152d4
 800af80:	20008ec0 	.word	0x20008ec0
 800af84:	20008ec8 	.word	0x20008ec8
 800af88:	20008f00 	.word	0x20008f00
 800af8c:	20008eb8 	.word	0x20008eb8
 800af90:	20008ebc 	.word	0x20008ebc

0800af94 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d106      	bne.n	800afb0 <tcp_close_shutdown_fin+0x1c>
 800afa2:	4b2e      	ldr	r3, [pc, #184]	; (800b05c <tcp_close_shutdown_fin+0xc8>)
 800afa4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800afa8:	492d      	ldr	r1, [pc, #180]	; (800b060 <tcp_close_shutdown_fin+0xcc>)
 800afaa:	482e      	ldr	r0, [pc, #184]	; (800b064 <tcp_close_shutdown_fin+0xd0>)
 800afac:	f008 f990 	bl	80132d0 <iprintf>

  switch (pcb->state) {
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	7d1b      	ldrb	r3, [r3, #20]
 800afb4:	2b07      	cmp	r3, #7
 800afb6:	d020      	beq.n	800affa <tcp_close_shutdown_fin+0x66>
 800afb8:	2b07      	cmp	r3, #7
 800afba:	dc2b      	bgt.n	800b014 <tcp_close_shutdown_fin+0x80>
 800afbc:	2b03      	cmp	r3, #3
 800afbe:	d002      	beq.n	800afc6 <tcp_close_shutdown_fin+0x32>
 800afc0:	2b04      	cmp	r3, #4
 800afc2:	d00d      	beq.n	800afe0 <tcp_close_shutdown_fin+0x4c>
 800afc4:	e026      	b.n	800b014 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f003 fee6 	bl	800ed98 <tcp_send_fin>
 800afcc:	4603      	mov	r3, r0
 800afce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800afd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d11f      	bne.n	800b018 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2205      	movs	r2, #5
 800afdc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800afde:	e01b      	b.n	800b018 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f003 fed9 	bl	800ed98 <tcp_send_fin>
 800afe6:	4603      	mov	r3, r0
 800afe8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800afea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d114      	bne.n	800b01c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2205      	movs	r2, #5
 800aff6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800aff8:	e010      	b.n	800b01c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f003 fecc 	bl	800ed98 <tcp_send_fin>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d109      	bne.n	800b020 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2209      	movs	r2, #9
 800b010:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b012:	e005      	b.n	800b020 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	e01c      	b.n	800b052 <tcp_close_shutdown_fin+0xbe>
      break;
 800b018:	bf00      	nop
 800b01a:	e002      	b.n	800b022 <tcp_close_shutdown_fin+0x8e>
      break;
 800b01c:	bf00      	nop
 800b01e:	e000      	b.n	800b022 <tcp_close_shutdown_fin+0x8e>
      break;
 800b020:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d103      	bne.n	800b032 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f003 fff2 	bl	800f014 <tcp_output>
 800b030:	e00d      	b.n	800b04e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03a:	d108      	bne.n	800b04e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	8b5b      	ldrh	r3, [r3, #26]
 800b040:	f043 0308 	orr.w	r3, r3, #8
 800b044:	b29a      	uxth	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	e001      	b.n	800b052 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b04e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	080151e0 	.word	0x080151e0
 800b060:	08015290 	.word	0x08015290
 800b064:	08015224 	.word	0x08015224

0800b068 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d109      	bne.n	800b08a <tcp_close+0x22>
 800b076:	4b0f      	ldr	r3, [pc, #60]	; (800b0b4 <tcp_close+0x4c>)
 800b078:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b07c:	490e      	ldr	r1, [pc, #56]	; (800b0b8 <tcp_close+0x50>)
 800b07e:	480f      	ldr	r0, [pc, #60]	; (800b0bc <tcp_close+0x54>)
 800b080:	f008 f926 	bl	80132d0 <iprintf>
 800b084:	f06f 030f 	mvn.w	r3, #15
 800b088:	e00f      	b.n	800b0aa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	7d1b      	ldrb	r3, [r3, #20]
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d006      	beq.n	800b0a0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	8b5b      	ldrh	r3, [r3, #26]
 800b096:	f043 0310 	orr.w	r3, r3, #16
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f7ff fe94 	bl	800add0 <tcp_close_shutdown>
 800b0a8:	4603      	mov	r3, r0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	080151e0 	.word	0x080151e0
 800b0b8:	080152f0 	.word	0x080152f0
 800b0bc:	08015224 	.word	0x08015224

0800b0c0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b08e      	sub	sp, #56	; 0x38
 800b0c4:	af04      	add	r7, sp, #16
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d107      	bne.n	800b0e0 <tcp_abandon+0x20>
 800b0d0:	4b52      	ldr	r3, [pc, #328]	; (800b21c <tcp_abandon+0x15c>)
 800b0d2:	f240 223d 	movw	r2, #573	; 0x23d
 800b0d6:	4952      	ldr	r1, [pc, #328]	; (800b220 <tcp_abandon+0x160>)
 800b0d8:	4852      	ldr	r0, [pc, #328]	; (800b224 <tcp_abandon+0x164>)
 800b0da:	f008 f8f9 	bl	80132d0 <iprintf>
 800b0de:	e099      	b.n	800b214 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	7d1b      	ldrb	r3, [r3, #20]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d106      	bne.n	800b0f6 <tcp_abandon+0x36>
 800b0e8:	4b4c      	ldr	r3, [pc, #304]	; (800b21c <tcp_abandon+0x15c>)
 800b0ea:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b0ee:	494e      	ldr	r1, [pc, #312]	; (800b228 <tcp_abandon+0x168>)
 800b0f0:	484c      	ldr	r0, [pc, #304]	; (800b224 <tcp_abandon+0x164>)
 800b0f2:	f008 f8ed 	bl	80132d0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	7d1b      	ldrb	r3, [r3, #20]
 800b0fa:	2b0a      	cmp	r3, #10
 800b0fc:	d107      	bne.n	800b10e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b0fe:	6879      	ldr	r1, [r7, #4]
 800b100:	484a      	ldr	r0, [pc, #296]	; (800b22c <tcp_abandon+0x16c>)
 800b102:	f000 ffc3 	bl	800c08c <tcp_pcb_remove>
    tcp_free(pcb);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7ff fdb0 	bl	800ac6c <tcp_free>
 800b10c:	e082      	b.n	800b214 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b112:	2300      	movs	r3, #0
 800b114:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b11a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b120:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b128:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	7d1b      	ldrb	r3, [r3, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d126      	bne.n	800b186 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	8adb      	ldrh	r3, [r3, #22]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d02e      	beq.n	800b19e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b140:	4b3b      	ldr	r3, [pc, #236]	; (800b230 <tcp_abandon+0x170>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	429a      	cmp	r2, r3
 800b148:	d105      	bne.n	800b156 <tcp_abandon+0x96>
 800b14a:	4b39      	ldr	r3, [pc, #228]	; (800b230 <tcp_abandon+0x170>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	4a37      	ldr	r2, [pc, #220]	; (800b230 <tcp_abandon+0x170>)
 800b152:	6013      	str	r3, [r2, #0]
 800b154:	e013      	b.n	800b17e <tcp_abandon+0xbe>
 800b156:	4b36      	ldr	r3, [pc, #216]	; (800b230 <tcp_abandon+0x170>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	61fb      	str	r3, [r7, #28]
 800b15c:	e00c      	b.n	800b178 <tcp_abandon+0xb8>
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	429a      	cmp	r2, r3
 800b166:	d104      	bne.n	800b172 <tcp_abandon+0xb2>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68da      	ldr	r2, [r3, #12]
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	60da      	str	r2, [r3, #12]
 800b170:	e005      	b.n	800b17e <tcp_abandon+0xbe>
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	61fb      	str	r3, [r7, #28]
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1ef      	bne.n	800b15e <tcp_abandon+0x9e>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	60da      	str	r2, [r3, #12]
 800b184:	e00b      	b.n	800b19e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	8adb      	ldrh	r3, [r3, #22]
 800b18e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b190:	6879      	ldr	r1, [r7, #4]
 800b192:	4828      	ldr	r0, [pc, #160]	; (800b234 <tcp_abandon+0x174>)
 800b194:	f000 ff7a 	bl	800c08c <tcp_pcb_remove>
 800b198:	4b27      	ldr	r3, [pc, #156]	; (800b238 <tcp_abandon+0x178>)
 800b19a:	2201      	movs	r2, #1
 800b19c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d004      	beq.n	800b1b0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fd1c 	bl	800bbe8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d004      	beq.n	800b1c2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f000 fd13 	bl	800bbe8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d004      	beq.n	800b1d4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 fd0a 	bl	800bbe8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00e      	beq.n	800b1f8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b1da:	6879      	ldr	r1, [r7, #4]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	3304      	adds	r3, #4
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	8b12      	ldrh	r2, [r2, #24]
 800b1e4:	9202      	str	r2, [sp, #8]
 800b1e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b1e8:	9201      	str	r2, [sp, #4]
 800b1ea:	9300      	str	r3, [sp, #0]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	697a      	ldr	r2, [r7, #20]
 800b1f0:	69b9      	ldr	r1, [r7, #24]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f004 fcc2 	bl	800fb7c <tcp_rst>
    }
    last_state = pcb->state;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	7d1b      	ldrb	r3, [r3, #20]
 800b1fc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7ff fd34 	bl	800ac6c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d004      	beq.n	800b214 <tcp_abandon+0x154>
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	f06f 010c 	mvn.w	r1, #12
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	4798      	blx	r3
  }
}
 800b214:	3728      	adds	r7, #40	; 0x28
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	080151e0 	.word	0x080151e0
 800b220:	08015324 	.word	0x08015324
 800b224:	08015224 	.word	0x08015224
 800b228:	08015340 	.word	0x08015340
 800b22c:	20008ec4 	.word	0x20008ec4
 800b230:	20008eb8 	.word	0x20008eb8
 800b234:	20008ec0 	.word	0x20008ec0
 800b238:	20008ec8 	.word	0x20008ec8

0800b23c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b244:	2101      	movs	r1, #1
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7ff ff3a 	bl	800b0c0 <tcp_abandon>
}
 800b24c:	bf00      	nop
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d106      	bne.n	800b270 <tcp_update_rcv_ann_wnd+0x1c>
 800b262:	4b25      	ldr	r3, [pc, #148]	; (800b2f8 <tcp_update_rcv_ann_wnd+0xa4>)
 800b264:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b268:	4924      	ldr	r1, [pc, #144]	; (800b2fc <tcp_update_rcv_ann_wnd+0xa8>)
 800b26a:	4825      	ldr	r0, [pc, #148]	; (800b300 <tcp_update_rcv_ann_wnd+0xac>)
 800b26c:	f008 f830 	bl	80132d0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b278:	4413      	add	r3, r2
 800b27a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b284:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b288:	bf28      	it	cs
 800b28a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b28e:	b292      	uxth	r2, r2
 800b290:	4413      	add	r3, r2
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	1ad3      	subs	r3, r2, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	db08      	blt.n	800b2ac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	e020      	b.n	800b2ee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b4:	1ad3      	subs	r3, r2, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	dd03      	ble.n	800b2c2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b2c0:	e014      	b.n	800b2ec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d4:	d306      	bcc.n	800b2e4 <tcp_update_rcv_ann_wnd+0x90>
 800b2d6:	4b08      	ldr	r3, [pc, #32]	; (800b2f8 <tcp_update_rcv_ann_wnd+0xa4>)
 800b2d8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b2dc:	4909      	ldr	r1, [pc, #36]	; (800b304 <tcp_update_rcv_ann_wnd+0xb0>)
 800b2de:	4808      	ldr	r0, [pc, #32]	; (800b300 <tcp_update_rcv_ann_wnd+0xac>)
 800b2e0:	f007 fff6 	bl	80132d0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b2ec:	2300      	movs	r3, #0
  }
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	080151e0 	.word	0x080151e0
 800b2fc:	0801543c 	.word	0x0801543c
 800b300:	08015224 	.word	0x08015224
 800b304:	08015460 	.word	0x08015460

0800b308 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	460b      	mov	r3, r1
 800b312:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d107      	bne.n	800b32a <tcp_recved+0x22>
 800b31a:	4b1f      	ldr	r3, [pc, #124]	; (800b398 <tcp_recved+0x90>)
 800b31c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b320:	491e      	ldr	r1, [pc, #120]	; (800b39c <tcp_recved+0x94>)
 800b322:	481f      	ldr	r0, [pc, #124]	; (800b3a0 <tcp_recved+0x98>)
 800b324:	f007 ffd4 	bl	80132d0 <iprintf>
 800b328:	e032      	b.n	800b390 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	7d1b      	ldrb	r3, [r3, #20]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d106      	bne.n	800b340 <tcp_recved+0x38>
 800b332:	4b19      	ldr	r3, [pc, #100]	; (800b398 <tcp_recved+0x90>)
 800b334:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b338:	491a      	ldr	r1, [pc, #104]	; (800b3a4 <tcp_recved+0x9c>)
 800b33a:	4819      	ldr	r0, [pc, #100]	; (800b3a0 <tcp_recved+0x98>)
 800b33c:	f007 ffc8 	bl	80132d0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b344:	887b      	ldrh	r3, [r7, #2]
 800b346:	4413      	add	r3, r2
 800b348:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b34a:	89fb      	ldrh	r3, [r7, #14]
 800b34c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b350:	d804      	bhi.n	800b35c <tcp_recved+0x54>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b356:	89fa      	ldrh	r2, [r7, #14]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d204      	bcs.n	800b366 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b362:	851a      	strh	r2, [r3, #40]	; 0x28
 800b364:	e002      	b.n	800b36c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	89fa      	ldrh	r2, [r7, #14]
 800b36a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7ff ff71 	bl	800b254 <tcp_update_rcv_ann_wnd>
 800b372:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b37a:	d309      	bcc.n	800b390 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	8b5b      	ldrh	r3, [r3, #26]
 800b380:	f043 0302 	orr.w	r3, r3, #2
 800b384:	b29a      	uxth	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f003 fe42 	bl	800f014 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	080151e0 	.word	0x080151e0
 800b39c:	0801547c 	.word	0x0801547c
 800b3a0:	08015224 	.word	0x08015224
 800b3a4:	08015494 	.word	0x08015494

0800b3a8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b3a8:	b5b0      	push	{r4, r5, r7, lr}
 800b3aa:	b090      	sub	sp, #64	; 0x40
 800b3ac:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b3b4:	4b94      	ldr	r3, [pc, #592]	; (800b608 <tcp_slowtmr+0x260>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	4a93      	ldr	r2, [pc, #588]	; (800b608 <tcp_slowtmr+0x260>)
 800b3bc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b3be:	4b93      	ldr	r3, [pc, #588]	; (800b60c <tcp_slowtmr+0x264>)
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	b2da      	uxtb	r2, r3
 800b3c6:	4b91      	ldr	r3, [pc, #580]	; (800b60c <tcp_slowtmr+0x264>)
 800b3c8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b3ce:	4b90      	ldr	r3, [pc, #576]	; (800b610 <tcp_slowtmr+0x268>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b3d4:	e29f      	b.n	800b916 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d8:	7d1b      	ldrb	r3, [r3, #20]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d106      	bne.n	800b3ec <tcp_slowtmr+0x44>
 800b3de:	4b8d      	ldr	r3, [pc, #564]	; (800b614 <tcp_slowtmr+0x26c>)
 800b3e0:	f240 42be 	movw	r2, #1214	; 0x4be
 800b3e4:	498c      	ldr	r1, [pc, #560]	; (800b618 <tcp_slowtmr+0x270>)
 800b3e6:	488d      	ldr	r0, [pc, #564]	; (800b61c <tcp_slowtmr+0x274>)
 800b3e8:	f007 ff72 	bl	80132d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ee:	7d1b      	ldrb	r3, [r3, #20]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d106      	bne.n	800b402 <tcp_slowtmr+0x5a>
 800b3f4:	4b87      	ldr	r3, [pc, #540]	; (800b614 <tcp_slowtmr+0x26c>)
 800b3f6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b3fa:	4989      	ldr	r1, [pc, #548]	; (800b620 <tcp_slowtmr+0x278>)
 800b3fc:	4887      	ldr	r0, [pc, #540]	; (800b61c <tcp_slowtmr+0x274>)
 800b3fe:	f007 ff67 	bl	80132d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b404:	7d1b      	ldrb	r3, [r3, #20]
 800b406:	2b0a      	cmp	r3, #10
 800b408:	d106      	bne.n	800b418 <tcp_slowtmr+0x70>
 800b40a:	4b82      	ldr	r3, [pc, #520]	; (800b614 <tcp_slowtmr+0x26c>)
 800b40c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b410:	4984      	ldr	r1, [pc, #528]	; (800b624 <tcp_slowtmr+0x27c>)
 800b412:	4882      	ldr	r0, [pc, #520]	; (800b61c <tcp_slowtmr+0x274>)
 800b414:	f007 ff5c 	bl	80132d0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41a:	7f9a      	ldrb	r2, [r3, #30]
 800b41c:	4b7b      	ldr	r3, [pc, #492]	; (800b60c <tcp_slowtmr+0x264>)
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	429a      	cmp	r2, r3
 800b422:	d105      	bne.n	800b430 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b426:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b42e:	e272      	b.n	800b916 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b430:	4b76      	ldr	r3, [pc, #472]	; (800b60c <tcp_slowtmr+0x264>)
 800b432:	781a      	ldrb	r2, [r3, #0]
 800b434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b436:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b446:	7d1b      	ldrb	r3, [r3, #20]
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d10a      	bne.n	800b462 <tcp_slowtmr+0xba>
 800b44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b452:	2b05      	cmp	r3, #5
 800b454:	d905      	bls.n	800b462 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b45a:	3301      	adds	r3, #1
 800b45c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b460:	e11e      	b.n	800b6a0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b464:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b468:	2b0b      	cmp	r3, #11
 800b46a:	d905      	bls.n	800b478 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b470:	3301      	adds	r3, #1
 800b472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b476:	e113      	b.n	800b6a0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d075      	beq.n	800b56e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b486:	2b00      	cmp	r3, #0
 800b488:	d006      	beq.n	800b498 <tcp_slowtmr+0xf0>
 800b48a:	4b62      	ldr	r3, [pc, #392]	; (800b614 <tcp_slowtmr+0x26c>)
 800b48c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b490:	4965      	ldr	r1, [pc, #404]	; (800b628 <tcp_slowtmr+0x280>)
 800b492:	4862      	ldr	r0, [pc, #392]	; (800b61c <tcp_slowtmr+0x274>)
 800b494:	f007 ff1c 	bl	80132d0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d106      	bne.n	800b4ae <tcp_slowtmr+0x106>
 800b4a0:	4b5c      	ldr	r3, [pc, #368]	; (800b614 <tcp_slowtmr+0x26c>)
 800b4a2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b4a6:	4961      	ldr	r1, [pc, #388]	; (800b62c <tcp_slowtmr+0x284>)
 800b4a8:	485c      	ldr	r0, [pc, #368]	; (800b61c <tcp_slowtmr+0x274>)
 800b4aa:	f007 ff11 	bl	80132d0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b4b4:	2b0b      	cmp	r3, #11
 800b4b6:	d905      	bls.n	800b4c4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4bc:	3301      	adds	r3, #1
 800b4be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4c2:	e0ed      	b.n	800b6a0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	4a58      	ldr	r2, [pc, #352]	; (800b630 <tcp_slowtmr+0x288>)
 800b4ce:	5cd3      	ldrb	r3, [r2, r3]
 800b4d0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b4d8:	7c7a      	ldrb	r2, [r7, #17]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d907      	bls.n	800b4ee <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	b2da      	uxtb	r2, r3
 800b4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b4f4:	7c7a      	ldrb	r2, [r7, #17]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	f200 80d2 	bhi.w	800b6a0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b506:	2b00      	cmp	r3, #0
 800b508:	d108      	bne.n	800b51c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b50a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b50c:	f004 fc2a 	bl	800fd64 <tcp_zero_window_probe>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d014      	beq.n	800b540 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b516:	2300      	movs	r3, #0
 800b518:	623b      	str	r3, [r7, #32]
 800b51a:	e011      	b.n	800b540 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b522:	4619      	mov	r1, r3
 800b524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b526:	f003 faef 	bl	800eb08 <tcp_split_unsent_seg>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d107      	bne.n	800b540 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b532:	f003 fd6f 	bl	800f014 <tcp_output>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d101      	bne.n	800b540 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 80ac 	beq.w	800b6a0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b552:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b556:	2b06      	cmp	r3, #6
 800b558:	f200 80a2 	bhi.w	800b6a0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b562:	3301      	adds	r3, #1
 800b564:	b2da      	uxtb	r2, r3
 800b566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b568:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b56c:	e098      	b.n	800b6a0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b570:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b574:	2b00      	cmp	r3, #0
 800b576:	db0f      	blt.n	800b598 <tcp_slowtmr+0x1f0>
 800b578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b57e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b582:	4293      	cmp	r3, r2
 800b584:	d008      	beq.n	800b598 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b588:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	3301      	adds	r3, #1
 800b590:	b29b      	uxth	r3, r3
 800b592:	b21a      	sxth	r2, r3
 800b594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b596:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	db7b      	blt.n	800b6a0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b5a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5aa:	f004 f825 	bl	800f5f8 <tcp_rexmit_rto_prepare>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d007      	beq.n	800b5c4 <tcp_slowtmr+0x21c>
 800b5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d171      	bne.n	800b6a0 <tcp_slowtmr+0x2f8>
 800b5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d06d      	beq.n	800b6a0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c6:	7d1b      	ldrb	r3, [r3, #20]
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d03a      	beq.n	800b642 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b5d2:	2b0c      	cmp	r3, #12
 800b5d4:	bf28      	it	cs
 800b5d6:	230c      	movcs	r3, #12
 800b5d8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b5e0:	10db      	asrs	r3, r3, #3
 800b5e2:	b21b      	sxth	r3, r3
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b5ec:	4413      	add	r3, r2
 800b5ee:	7efa      	ldrb	r2, [r7, #27]
 800b5f0:	4910      	ldr	r1, [pc, #64]	; (800b634 <tcp_slowtmr+0x28c>)
 800b5f2:	5c8a      	ldrb	r2, [r1, r2]
 800b5f4:	4093      	lsls	r3, r2
 800b5f6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b5fe:	4293      	cmp	r3, r2
 800b600:	dc1a      	bgt.n	800b638 <tcp_slowtmr+0x290>
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	b21a      	sxth	r2, r3
 800b606:	e019      	b.n	800b63c <tcp_slowtmr+0x294>
 800b608:	20008eb4 	.word	0x20008eb4
 800b60c:	20008eca 	.word	0x20008eca
 800b610:	20008ec0 	.word	0x20008ec0
 800b614:	080151e0 	.word	0x080151e0
 800b618:	08015524 	.word	0x08015524
 800b61c:	08015224 	.word	0x08015224
 800b620:	08015550 	.word	0x08015550
 800b624:	0801557c 	.word	0x0801557c
 800b628:	080155ac 	.word	0x080155ac
 800b62c:	080155e0 	.word	0x080155e0
 800b630:	080171b4 	.word	0x080171b4
 800b634:	080171a4 	.word	0x080171a4
 800b638:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b644:	2200      	movs	r2, #0
 800b646:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b650:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b654:	4293      	cmp	r3, r2
 800b656:	bf28      	it	cs
 800b658:	4613      	movcs	r3, r2
 800b65a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b65c:	8a7b      	ldrh	r3, [r7, #18]
 800b65e:	085b      	lsrs	r3, r3, #1
 800b660:	b29a      	uxth	r2, r3
 800b662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b664:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	b29b      	uxth	r3, r3
 800b676:	429a      	cmp	r2, r3
 800b678:	d206      	bcs.n	800b688 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b67e:	005b      	lsls	r3, r3, #1
 800b680:	b29a      	uxth	r2, r3
 800b682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b684:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b694:	2200      	movs	r2, #0
 800b696:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b69a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b69c:	f004 f81c 	bl	800f6d8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a2:	7d1b      	ldrb	r3, [r3, #20]
 800b6a4:	2b06      	cmp	r3, #6
 800b6a6:	d111      	bne.n	800b6cc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6aa:	8b5b      	ldrh	r3, [r3, #26]
 800b6ac:	f003 0310 	and.w	r3, r3, #16
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00b      	beq.n	800b6cc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b6b4:	4b9d      	ldr	r3, [pc, #628]	; (800b92c <tcp_slowtmr+0x584>)
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ba:	6a1b      	ldr	r3, [r3, #32]
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	2b28      	cmp	r3, #40	; 0x28
 800b6c0:	d904      	bls.n	800b6cc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b6c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ce:	7a5b      	ldrb	r3, [r3, #9]
 800b6d0:	f003 0308 	and.w	r3, r3, #8
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d04c      	beq.n	800b772 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6da:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b6dc:	2b04      	cmp	r3, #4
 800b6de:	d003      	beq.n	800b6e8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b6e4:	2b07      	cmp	r3, #7
 800b6e6:	d144      	bne.n	800b772 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b6e8:	4b90      	ldr	r3, [pc, #576]	; (800b92c <tcp_slowtmr+0x584>)
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ee:	6a1b      	ldr	r3, [r3, #32]
 800b6f0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6f8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b6fc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b700:	498b      	ldr	r1, [pc, #556]	; (800b930 <tcp_slowtmr+0x588>)
 800b702:	fba1 1303 	umull	r1, r3, r1, r3
 800b706:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b708:	429a      	cmp	r2, r3
 800b70a:	d90a      	bls.n	800b722 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b710:	3301      	adds	r3, #1
 800b712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b716:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b71a:	3301      	adds	r3, #1
 800b71c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b720:	e027      	b.n	800b772 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b722:	4b82      	ldr	r3, [pc, #520]	; (800b92c <tcp_slowtmr+0x584>)
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b734:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b738:	4618      	mov	r0, r3
 800b73a:	4b7e      	ldr	r3, [pc, #504]	; (800b934 <tcp_slowtmr+0x58c>)
 800b73c:	fb00 f303 	mul.w	r3, r0, r3
 800b740:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b742:	497b      	ldr	r1, [pc, #492]	; (800b930 <tcp_slowtmr+0x588>)
 800b744:	fba1 1303 	umull	r1, r3, r1, r3
 800b748:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d911      	bls.n	800b772 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b74e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b750:	f004 fac8 	bl	800fce4 <tcp_keepalive>
 800b754:	4603      	mov	r3, r0
 800b756:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b75a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d107      	bne.n	800b772 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b764:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b768:	3301      	adds	r3, #1
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b776:	2b00      	cmp	r3, #0
 800b778:	d011      	beq.n	800b79e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b77a:	4b6c      	ldr	r3, [pc, #432]	; (800b92c <tcp_slowtmr+0x584>)
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	1ad2      	subs	r2, r2, r3
 800b784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b786:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b78a:	4619      	mov	r1, r3
 800b78c:	460b      	mov	r3, r1
 800b78e:	005b      	lsls	r3, r3, #1
 800b790:	440b      	add	r3, r1
 800b792:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b794:	429a      	cmp	r2, r3
 800b796:	d302      	bcc.n	800b79e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b798:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b79a:	f000 fddb 	bl	800c354 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a0:	7d1b      	ldrb	r3, [r3, #20]
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d10b      	bne.n	800b7be <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7a6:	4b61      	ldr	r3, [pc, #388]	; (800b92c <tcp_slowtmr+0x584>)
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ac:	6a1b      	ldr	r3, [r3, #32]
 800b7ae:	1ad3      	subs	r3, r2, r3
 800b7b0:	2b28      	cmp	r3, #40	; 0x28
 800b7b2:	d904      	bls.n	800b7be <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c0:	7d1b      	ldrb	r3, [r3, #20]
 800b7c2:	2b09      	cmp	r3, #9
 800b7c4:	d10b      	bne.n	800b7de <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b7c6:	4b59      	ldr	r3, [pc, #356]	; (800b92c <tcp_slowtmr+0x584>)
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7cc:	6a1b      	ldr	r3, [r3, #32]
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	2bf0      	cmp	r3, #240	; 0xf0
 800b7d2:	d904      	bls.n	800b7de <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b7d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7d8:	3301      	adds	r3, #1
 800b7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b7de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d060      	beq.n	800b8a8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7ec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b7ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7f0:	f000 fbfc 	bl	800bfec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d010      	beq.n	800b81c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b7fa:	4b4f      	ldr	r3, [pc, #316]	; (800b938 <tcp_slowtmr+0x590>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b800:	429a      	cmp	r2, r3
 800b802:	d106      	bne.n	800b812 <tcp_slowtmr+0x46a>
 800b804:	4b4d      	ldr	r3, [pc, #308]	; (800b93c <tcp_slowtmr+0x594>)
 800b806:	f240 526d 	movw	r2, #1389	; 0x56d
 800b80a:	494d      	ldr	r1, [pc, #308]	; (800b940 <tcp_slowtmr+0x598>)
 800b80c:	484d      	ldr	r0, [pc, #308]	; (800b944 <tcp_slowtmr+0x59c>)
 800b80e:	f007 fd5f 	bl	80132d0 <iprintf>
        prev->next = pcb->next;
 800b812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b814:	68da      	ldr	r2, [r3, #12]
 800b816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b818:	60da      	str	r2, [r3, #12]
 800b81a:	e00f      	b.n	800b83c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b81c:	4b46      	ldr	r3, [pc, #280]	; (800b938 <tcp_slowtmr+0x590>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b822:	429a      	cmp	r2, r3
 800b824:	d006      	beq.n	800b834 <tcp_slowtmr+0x48c>
 800b826:	4b45      	ldr	r3, [pc, #276]	; (800b93c <tcp_slowtmr+0x594>)
 800b828:	f240 5271 	movw	r2, #1393	; 0x571
 800b82c:	4946      	ldr	r1, [pc, #280]	; (800b948 <tcp_slowtmr+0x5a0>)
 800b82e:	4845      	ldr	r0, [pc, #276]	; (800b944 <tcp_slowtmr+0x59c>)
 800b830:	f007 fd4e 	bl	80132d0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	4a3f      	ldr	r2, [pc, #252]	; (800b938 <tcp_slowtmr+0x590>)
 800b83a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b83c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b840:	2b00      	cmp	r3, #0
 800b842:	d013      	beq.n	800b86c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b846:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b84c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b850:	3304      	adds	r3, #4
 800b852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b854:	8ad2      	ldrh	r2, [r2, #22]
 800b856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b858:	8b09      	ldrh	r1, [r1, #24]
 800b85a:	9102      	str	r1, [sp, #8]
 800b85c:	9201      	str	r2, [sp, #4]
 800b85e:	9300      	str	r3, [sp, #0]
 800b860:	462b      	mov	r3, r5
 800b862:	4622      	mov	r2, r4
 800b864:	4601      	mov	r1, r0
 800b866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b868:	f004 f988 	bl	800fb7c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b874:	7d1b      	ldrb	r3, [r3, #20]
 800b876:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b882:	6838      	ldr	r0, [r7, #0]
 800b884:	f7ff f9f2 	bl	800ac6c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b888:	4b30      	ldr	r3, [pc, #192]	; (800b94c <tcp_slowtmr+0x5a4>)
 800b88a:	2200      	movs	r2, #0
 800b88c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d004      	beq.n	800b89e <tcp_slowtmr+0x4f6>
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f06f 010c 	mvn.w	r1, #12
 800b89a:	68b8      	ldr	r0, [r7, #8]
 800b89c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b89e:	4b2b      	ldr	r3, [pc, #172]	; (800b94c <tcp_slowtmr+0x5a4>)
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d037      	beq.n	800b916 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b8a6:	e590      	b.n	800b3ca <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b4:	7f1b      	ldrb	r3, [r3, #28]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c0:	7f1a      	ldrb	r2, [r3, #28]
 800b8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c4:	7f5b      	ldrb	r3, [r3, #29]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d325      	bcc.n	800b916 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b8d0:	4b1e      	ldr	r3, [pc, #120]	; (800b94c <tcp_slowtmr+0x5a4>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00b      	beq.n	800b8f8 <tcp_slowtmr+0x550>
 800b8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8e8:	6912      	ldr	r2, [r2, #16]
 800b8ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	4798      	blx	r3
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b8f6:	e002      	b.n	800b8fe <tcp_slowtmr+0x556>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b8fe:	4b13      	ldr	r3, [pc, #76]	; (800b94c <tcp_slowtmr+0x5a4>)
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d000      	beq.n	800b908 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b906:	e560      	b.n	800b3ca <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b908:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d102      	bne.n	800b916 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b912:	f003 fb7f 	bl	800f014 <tcp_output>
  while (pcb != NULL) {
 800b916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f47f ad5c 	bne.w	800b3d6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b91e:	2300      	movs	r3, #0
 800b920:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b922:	4b0b      	ldr	r3, [pc, #44]	; (800b950 <tcp_slowtmr+0x5a8>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b928:	e067      	b.n	800b9fa <tcp_slowtmr+0x652>
 800b92a:	bf00      	nop
 800b92c:	20008eb4 	.word	0x20008eb4
 800b930:	10624dd3 	.word	0x10624dd3
 800b934:	000124f8 	.word	0x000124f8
 800b938:	20008ec0 	.word	0x20008ec0
 800b93c:	080151e0 	.word	0x080151e0
 800b940:	08015618 	.word	0x08015618
 800b944:	08015224 	.word	0x08015224
 800b948:	08015644 	.word	0x08015644
 800b94c:	20008ec8 	.word	0x20008ec8
 800b950:	20008ec4 	.word	0x20008ec4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b956:	7d1b      	ldrb	r3, [r3, #20]
 800b958:	2b0a      	cmp	r3, #10
 800b95a:	d006      	beq.n	800b96a <tcp_slowtmr+0x5c2>
 800b95c:	4b2b      	ldr	r3, [pc, #172]	; (800ba0c <tcp_slowtmr+0x664>)
 800b95e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b962:	492b      	ldr	r1, [pc, #172]	; (800ba10 <tcp_slowtmr+0x668>)
 800b964:	482b      	ldr	r0, [pc, #172]	; (800ba14 <tcp_slowtmr+0x66c>)
 800b966:	f007 fcb3 	bl	80132d0 <iprintf>
    pcb_remove = 0;
 800b96a:	2300      	movs	r3, #0
 800b96c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b970:	4b29      	ldr	r3, [pc, #164]	; (800ba18 <tcp_slowtmr+0x670>)
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b976:	6a1b      	ldr	r3, [r3, #32]
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	2bf0      	cmp	r3, #240	; 0xf0
 800b97c:	d904      	bls.n	800b988 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b97e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b982:	3301      	adds	r3, #1
 800b984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d02f      	beq.n	800b9f0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b992:	f000 fb2b 	bl	800bfec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d010      	beq.n	800b9be <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b99c:	4b1f      	ldr	r3, [pc, #124]	; (800ba1c <tcp_slowtmr+0x674>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d106      	bne.n	800b9b4 <tcp_slowtmr+0x60c>
 800b9a6:	4b19      	ldr	r3, [pc, #100]	; (800ba0c <tcp_slowtmr+0x664>)
 800b9a8:	f240 52af 	movw	r2, #1455	; 0x5af
 800b9ac:	491c      	ldr	r1, [pc, #112]	; (800ba20 <tcp_slowtmr+0x678>)
 800b9ae:	4819      	ldr	r0, [pc, #100]	; (800ba14 <tcp_slowtmr+0x66c>)
 800b9b0:	f007 fc8e 	bl	80132d0 <iprintf>
        prev->next = pcb->next;
 800b9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b6:	68da      	ldr	r2, [r3, #12]
 800b9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ba:	60da      	str	r2, [r3, #12]
 800b9bc:	e00f      	b.n	800b9de <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b9be:	4b17      	ldr	r3, [pc, #92]	; (800ba1c <tcp_slowtmr+0x674>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d006      	beq.n	800b9d6 <tcp_slowtmr+0x62e>
 800b9c8:	4b10      	ldr	r3, [pc, #64]	; (800ba0c <tcp_slowtmr+0x664>)
 800b9ca:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b9ce:	4915      	ldr	r1, [pc, #84]	; (800ba24 <tcp_slowtmr+0x67c>)
 800b9d0:	4810      	ldr	r0, [pc, #64]	; (800ba14 <tcp_slowtmr+0x66c>)
 800b9d2:	f007 fc7d 	bl	80132d0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	4a10      	ldr	r2, [pc, #64]	; (800ba1c <tcp_slowtmr+0x674>)
 800b9dc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b9e8:	69f8      	ldr	r0, [r7, #28]
 800b9ea:	f7ff f93f 	bl	800ac6c <tcp_free>
 800b9ee:	e004      	b.n	800b9fa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d1a9      	bne.n	800b954 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ba00:	bf00      	nop
 800ba02:	bf00      	nop
 800ba04:	3730      	adds	r7, #48	; 0x30
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bdb0      	pop	{r4, r5, r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	080151e0 	.word	0x080151e0
 800ba10:	08015670 	.word	0x08015670
 800ba14:	08015224 	.word	0x08015224
 800ba18:	20008eb4 	.word	0x20008eb4
 800ba1c:	20008ec4 	.word	0x20008ec4
 800ba20:	080156a0 	.word	0x080156a0
 800ba24:	080156c8 	.word	0x080156c8

0800ba28 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ba2e:	4b2d      	ldr	r3, [pc, #180]	; (800bae4 <tcp_fasttmr+0xbc>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	3301      	adds	r3, #1
 800ba34:	b2da      	uxtb	r2, r3
 800ba36:	4b2b      	ldr	r3, [pc, #172]	; (800bae4 <tcp_fasttmr+0xbc>)
 800ba38:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ba3a:	4b2b      	ldr	r3, [pc, #172]	; (800bae8 <tcp_fasttmr+0xc0>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ba40:	e048      	b.n	800bad4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	7f9a      	ldrb	r2, [r3, #30]
 800ba46:	4b27      	ldr	r3, [pc, #156]	; (800bae4 <tcp_fasttmr+0xbc>)
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d03f      	beq.n	800bace <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ba4e:	4b25      	ldr	r3, [pc, #148]	; (800bae4 <tcp_fasttmr+0xbc>)
 800ba50:	781a      	ldrb	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	8b5b      	ldrh	r3, [r3, #26]
 800ba5a:	f003 0301 	and.w	r3, r3, #1
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d010      	beq.n	800ba84 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	8b5b      	ldrh	r3, [r3, #26]
 800ba66:	f043 0302 	orr.w	r3, r3, #2
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f003 facf 	bl	800f014 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	8b5b      	ldrh	r3, [r3, #26]
 800ba7a:	f023 0303 	bic.w	r3, r3, #3
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	8b5b      	ldrh	r3, [r3, #26]
 800ba88:	f003 0308 	and.w	r3, r3, #8
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d009      	beq.n	800baa4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	8b5b      	ldrh	r3, [r3, #26]
 800ba94:	f023 0308 	bic.w	r3, r3, #8
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7ff fa78 	bl	800af94 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00a      	beq.n	800bac8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bab2:	4b0e      	ldr	r3, [pc, #56]	; (800baec <tcp_fasttmr+0xc4>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 f819 	bl	800baf0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800babe:	4b0b      	ldr	r3, [pc, #44]	; (800baec <tcp_fasttmr+0xc4>)
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d000      	beq.n	800bac8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bac6:	e7b8      	b.n	800ba3a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	607b      	str	r3, [r7, #4]
 800bacc:	e002      	b.n	800bad4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1b3      	bne.n	800ba42 <tcp_fasttmr+0x1a>
    }
  }
}
 800bada:	bf00      	nop
 800badc:	bf00      	nop
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20008eca 	.word	0x20008eca
 800bae8:	20008ec0 	.word	0x20008ec0
 800baec:	20008ec8 	.word	0x20008ec8

0800baf0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800baf0:	b590      	push	{r4, r7, lr}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d109      	bne.n	800bb12 <tcp_process_refused_data+0x22>
 800bafe:	4b37      	ldr	r3, [pc, #220]	; (800bbdc <tcp_process_refused_data+0xec>)
 800bb00:	f240 6209 	movw	r2, #1545	; 0x609
 800bb04:	4936      	ldr	r1, [pc, #216]	; (800bbe0 <tcp_process_refused_data+0xf0>)
 800bb06:	4837      	ldr	r0, [pc, #220]	; (800bbe4 <tcp_process_refused_data+0xf4>)
 800bb08:	f007 fbe2 	bl	80132d0 <iprintf>
 800bb0c:	f06f 030f 	mvn.w	r3, #15
 800bb10:	e060      	b.n	800bbd4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb16:	7b5b      	ldrb	r3, [r3, #13]
 800bb18:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb1e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d00b      	beq.n	800bb48 <tcp_process_refused_data+0x58>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6918      	ldr	r0, [r3, #16]
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	6879      	ldr	r1, [r7, #4]
 800bb40:	47a0      	blx	r4
 800bb42:	4603      	mov	r3, r0
 800bb44:	73fb      	strb	r3, [r7, #15]
 800bb46:	e007      	b.n	800bb58 <tcp_process_refused_data+0x68>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	6879      	ldr	r1, [r7, #4]
 800bb4e:	2000      	movs	r0, #0
 800bb50:	f000 f8a4 	bl	800bc9c <tcp_recv_null>
 800bb54:	4603      	mov	r3, r0
 800bb56:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bb58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d12a      	bne.n	800bbb6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bb60:	7bbb      	ldrb	r3, [r7, #14]
 800bb62:	f003 0320 	and.w	r3, r3, #32
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d033      	beq.n	800bbd2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb6e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bb72:	d005      	beq.n	800bb80 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb78:	3301      	adds	r3, #1
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00b      	beq.n	800bba2 <tcp_process_refused_data+0xb2>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6918      	ldr	r0, [r3, #16]
 800bb94:	2300      	movs	r3, #0
 800bb96:	2200      	movs	r2, #0
 800bb98:	6879      	ldr	r1, [r7, #4]
 800bb9a:	47a0      	blx	r4
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	73fb      	strb	r3, [r7, #15]
 800bba0:	e001      	b.n	800bba6 <tcp_process_refused_data+0xb6>
 800bba2:	2300      	movs	r3, #0
 800bba4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbaa:	f113 0f0d 	cmn.w	r3, #13
 800bbae:	d110      	bne.n	800bbd2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bbb0:	f06f 030c 	mvn.w	r3, #12
 800bbb4:	e00e      	b.n	800bbd4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bbb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbba:	f113 0f0d 	cmn.w	r3, #13
 800bbbe:	d102      	bne.n	800bbc6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800bbc0:	f06f 030c 	mvn.w	r3, #12
 800bbc4:	e006      	b.n	800bbd4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bbcc:	f06f 0304 	mvn.w	r3, #4
 800bbd0:	e000      	b.n	800bbd4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd90      	pop	{r4, r7, pc}
 800bbdc:	080151e0 	.word	0x080151e0
 800bbe0:	080156f0 	.word	0x080156f0
 800bbe4:	08015224 	.word	0x08015224

0800bbe8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800bbf0:	e007      	b.n	800bc02 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f80a 	bl	800bc12 <tcp_seg_free>
    seg = next;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1f4      	bne.n	800bbf2 <tcp_segs_free+0xa>
  }
}
 800bc08:	bf00      	nop
 800bc0a:	bf00      	nop
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b082      	sub	sp, #8
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00c      	beq.n	800bc3a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d004      	beq.n	800bc32 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7fe fcdb 	bl	800a5e8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	2003      	movs	r0, #3
 800bc36:	f7fd fec5 	bl	80099c4 <memp_free>
  }
}
 800bc3a:	bf00      	nop
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
	...

0800bc44 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d106      	bne.n	800bc60 <tcp_seg_copy+0x1c>
 800bc52:	4b0f      	ldr	r3, [pc, #60]	; (800bc90 <tcp_seg_copy+0x4c>)
 800bc54:	f240 6282 	movw	r2, #1666	; 0x682
 800bc58:	490e      	ldr	r1, [pc, #56]	; (800bc94 <tcp_seg_copy+0x50>)
 800bc5a:	480f      	ldr	r0, [pc, #60]	; (800bc98 <tcp_seg_copy+0x54>)
 800bc5c:	f007 fb38 	bl	80132d0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bc60:	2003      	movs	r0, #3
 800bc62:	f7fd fe63 	bl	800992c <memp_malloc>
 800bc66:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <tcp_seg_copy+0x2e>
    return NULL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e00a      	b.n	800bc88 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800bc72:	2210      	movs	r2, #16
 800bc74:	6879      	ldr	r1, [r7, #4]
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f007 fafa 	bl	8013270 <memcpy>
  pbuf_ref(cseg->p);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7fe fd51 	bl	800a728 <pbuf_ref>
  return cseg;
 800bc86:	68fb      	ldr	r3, [r7, #12]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	080151e0 	.word	0x080151e0
 800bc94:	08015734 	.word	0x08015734
 800bc98:	08015224 	.word	0x08015224

0800bc9c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
 800bca8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d109      	bne.n	800bcc4 <tcp_recv_null+0x28>
 800bcb0:	4b12      	ldr	r3, [pc, #72]	; (800bcfc <tcp_recv_null+0x60>)
 800bcb2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bcb6:	4912      	ldr	r1, [pc, #72]	; (800bd00 <tcp_recv_null+0x64>)
 800bcb8:	4812      	ldr	r0, [pc, #72]	; (800bd04 <tcp_recv_null+0x68>)
 800bcba:	f007 fb09 	bl	80132d0 <iprintf>
 800bcbe:	f06f 030f 	mvn.w	r3, #15
 800bcc2:	e016      	b.n	800bcf2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d009      	beq.n	800bcde <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	891b      	ldrh	r3, [r3, #8]
 800bcce:	4619      	mov	r1, r3
 800bcd0:	68b8      	ldr	r0, [r7, #8]
 800bcd2:	f7ff fb19 	bl	800b308 <tcp_recved>
    pbuf_free(p);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f7fe fc86 	bl	800a5e8 <pbuf_free>
 800bcdc:	e008      	b.n	800bcf0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800bcde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d104      	bne.n	800bcf0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800bce6:	68b8      	ldr	r0, [r7, #8]
 800bce8:	f7ff f9be 	bl	800b068 <tcp_close>
 800bcec:	4603      	mov	r3, r0
 800bcee:	e000      	b.n	800bcf2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	080151e0 	.word	0x080151e0
 800bd00:	08015750 	.word	0x08015750
 800bd04:	08015224 	.word	0x08015224

0800bd08 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	4603      	mov	r3, r0
 800bd10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bd12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	db01      	blt.n	800bd1e <tcp_kill_prio+0x16>
 800bd1a:	79fb      	ldrb	r3, [r7, #7]
 800bd1c:	e000      	b.n	800bd20 <tcp_kill_prio+0x18>
 800bd1e:	237f      	movs	r3, #127	; 0x7f
 800bd20:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800bd22:	7afb      	ldrb	r3, [r7, #11]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d034      	beq.n	800bd92 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800bd28:	7afb      	ldrb	r3, [r7, #11]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bd32:	2300      	movs	r3, #0
 800bd34:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd36:	4b19      	ldr	r3, [pc, #100]	; (800bd9c <tcp_kill_prio+0x94>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	617b      	str	r3, [r7, #20]
 800bd3c:	e01f      	b.n	800bd7e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	7d5b      	ldrb	r3, [r3, #21]
 800bd42:	7afa      	ldrb	r2, [r7, #11]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d80c      	bhi.n	800bd62 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800bd4c:	7afa      	ldrb	r2, [r7, #11]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d112      	bne.n	800bd78 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bd52:	4b13      	ldr	r3, [pc, #76]	; (800bda0 <tcp_kill_prio+0x98>)
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	6a1b      	ldr	r3, [r3, #32]
 800bd5a:	1ad3      	subs	r3, r2, r3
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d80a      	bhi.n	800bd78 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800bd62:	4b0f      	ldr	r3, [pc, #60]	; (800bda0 <tcp_kill_prio+0x98>)
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	6a1b      	ldr	r3, [r3, #32]
 800bd6a:	1ad3      	subs	r3, r2, r3
 800bd6c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	7d5b      	ldrb	r3, [r3, #21]
 800bd76:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	617b      	str	r3, [r7, #20]
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1dc      	bne.n	800bd3e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d004      	beq.n	800bd94 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bd8a:	6938      	ldr	r0, [r7, #16]
 800bd8c:	f7ff fa56 	bl	800b23c <tcp_abort>
 800bd90:	e000      	b.n	800bd94 <tcp_kill_prio+0x8c>
    return;
 800bd92:	bf00      	nop
  }
}
 800bd94:	3718      	adds	r7, #24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	20008ec0 	.word	0x20008ec0
 800bda0:	20008eb4 	.word	0x20008eb4

0800bda4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	4603      	mov	r3, r0
 800bdac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bdae:	79fb      	ldrb	r3, [r7, #7]
 800bdb0:	2b08      	cmp	r3, #8
 800bdb2:	d009      	beq.n	800bdc8 <tcp_kill_state+0x24>
 800bdb4:	79fb      	ldrb	r3, [r7, #7]
 800bdb6:	2b09      	cmp	r3, #9
 800bdb8:	d006      	beq.n	800bdc8 <tcp_kill_state+0x24>
 800bdba:	4b1a      	ldr	r3, [pc, #104]	; (800be24 <tcp_kill_state+0x80>)
 800bdbc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800bdc0:	4919      	ldr	r1, [pc, #100]	; (800be28 <tcp_kill_state+0x84>)
 800bdc2:	481a      	ldr	r0, [pc, #104]	; (800be2c <tcp_kill_state+0x88>)
 800bdc4:	f007 fa84 	bl	80132d0 <iprintf>

  inactivity = 0;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bdd0:	4b17      	ldr	r3, [pc, #92]	; (800be30 <tcp_kill_state+0x8c>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	617b      	str	r3, [r7, #20]
 800bdd6:	e017      	b.n	800be08 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	7d1b      	ldrb	r3, [r3, #20]
 800bddc:	79fa      	ldrb	r2, [r7, #7]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d10f      	bne.n	800be02 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bde2:	4b14      	ldr	r3, [pc, #80]	; (800be34 <tcp_kill_state+0x90>)
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	6a1b      	ldr	r3, [r3, #32]
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d807      	bhi.n	800be02 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bdf2:	4b10      	ldr	r3, [pc, #64]	; (800be34 <tcp_kill_state+0x90>)
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	617b      	str	r3, [r7, #20]
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1e4      	bne.n	800bdd8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d003      	beq.n	800be1c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800be14:	2100      	movs	r1, #0
 800be16:	6938      	ldr	r0, [r7, #16]
 800be18:	f7ff f952 	bl	800b0c0 <tcp_abandon>
  }
}
 800be1c:	bf00      	nop
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	080151e0 	.word	0x080151e0
 800be28:	0801576c 	.word	0x0801576c
 800be2c:	08015224 	.word	0x08015224
 800be30:	20008ec0 	.word	0x20008ec0
 800be34:	20008eb4 	.word	0x20008eb4

0800be38 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800be3e:	2300      	movs	r3, #0
 800be40:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800be42:	2300      	movs	r3, #0
 800be44:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be46:	4b12      	ldr	r3, [pc, #72]	; (800be90 <tcp_kill_timewait+0x58>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	60fb      	str	r3, [r7, #12]
 800be4c:	e012      	b.n	800be74 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800be4e:	4b11      	ldr	r3, [pc, #68]	; (800be94 <tcp_kill_timewait+0x5c>)
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	1ad3      	subs	r3, r2, r3
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d807      	bhi.n	800be6e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800be5e:	4b0d      	ldr	r3, [pc, #52]	; (800be94 <tcp_kill_timewait+0x5c>)
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	60fb      	str	r3, [r7, #12]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1e9      	bne.n	800be4e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800be80:	68b8      	ldr	r0, [r7, #8]
 800be82:	f7ff f9db 	bl	800b23c <tcp_abort>
  }
}
 800be86:	bf00      	nop
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	20008ec4 	.word	0x20008ec4
 800be94:	20008eb4 	.word	0x20008eb4

0800be98 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800be9e:	4b10      	ldr	r3, [pc, #64]	; (800bee0 <tcp_handle_closepend+0x48>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bea4:	e014      	b.n	800bed0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	8b5b      	ldrh	r3, [r3, #26]
 800beb0:	f003 0308 	and.w	r3, r3, #8
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d009      	beq.n	800becc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	8b5b      	ldrh	r3, [r3, #26]
 800bebc:	f023 0308 	bic.w	r3, r3, #8
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff f864 	bl	800af94 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1e7      	bne.n	800bea6 <tcp_handle_closepend+0xe>
  }
}
 800bed6:	bf00      	nop
 800bed8:	bf00      	nop
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	20008ec0 	.word	0x20008ec0

0800bee4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	4603      	mov	r3, r0
 800beec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800beee:	2001      	movs	r0, #1
 800bef0:	f7fd fd1c 	bl	800992c <memp_malloc>
 800bef4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d126      	bne.n	800bf4a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800befc:	f7ff ffcc 	bl	800be98 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bf00:	f7ff ff9a 	bl	800be38 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bf04:	2001      	movs	r0, #1
 800bf06:	f7fd fd11 	bl	800992c <memp_malloc>
 800bf0a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d11b      	bne.n	800bf4a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bf12:	2009      	movs	r0, #9
 800bf14:	f7ff ff46 	bl	800bda4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bf18:	2001      	movs	r0, #1
 800bf1a:	f7fd fd07 	bl	800992c <memp_malloc>
 800bf1e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d111      	bne.n	800bf4a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bf26:	2008      	movs	r0, #8
 800bf28:	f7ff ff3c 	bl	800bda4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bf2c:	2001      	movs	r0, #1
 800bf2e:	f7fd fcfd 	bl	800992c <memp_malloc>
 800bf32:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d107      	bne.n	800bf4a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bf3a:	79fb      	ldrb	r3, [r7, #7]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7ff fee3 	bl	800bd08 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bf42:	2001      	movs	r0, #1
 800bf44:	f7fd fcf2 	bl	800992c <memp_malloc>
 800bf48:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d03f      	beq.n	800bfd0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bf50:	229c      	movs	r2, #156	; 0x9c
 800bf52:	2100      	movs	r1, #0
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f007 f9b3 	bl	80132c0 <memset>
    pcb->prio = prio;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	79fa      	ldrb	r2, [r7, #7]
 800bf5e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bf66:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bf70:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	22ff      	movs	r2, #255	; 0xff
 800bf7e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bf86:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2206      	movs	r2, #6
 800bf8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2206      	movs	r2, #6
 800bf94:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf9c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800bfa6:	4b0d      	ldr	r3, [pc, #52]	; (800bfdc <tcp_alloc+0xf8>)
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bfae:	4b0c      	ldr	r3, [pc, #48]	; (800bfe0 <tcp_alloc+0xfc>)
 800bfb0:	781a      	ldrb	r2, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bfbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	4a08      	ldr	r2, [pc, #32]	; (800bfe4 <tcp_alloc+0x100>)
 800bfc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	4a07      	ldr	r2, [pc, #28]	; (800bfe8 <tcp_alloc+0x104>)
 800bfcc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	20008eb4 	.word	0x20008eb4
 800bfe0:	20008eca 	.word	0x20008eca
 800bfe4:	0800bc9d 	.word	0x0800bc9d
 800bfe8:	006ddd00 	.word	0x006ddd00

0800bfec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d107      	bne.n	800c00a <tcp_pcb_purge+0x1e>
 800bffa:	4b21      	ldr	r3, [pc, #132]	; (800c080 <tcp_pcb_purge+0x94>)
 800bffc:	f640 0251 	movw	r2, #2129	; 0x851
 800c000:	4920      	ldr	r1, [pc, #128]	; (800c084 <tcp_pcb_purge+0x98>)
 800c002:	4821      	ldr	r0, [pc, #132]	; (800c088 <tcp_pcb_purge+0x9c>)
 800c004:	f007 f964 	bl	80132d0 <iprintf>
 800c008:	e037      	b.n	800c07a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	7d1b      	ldrb	r3, [r3, #20]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d033      	beq.n	800c07a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c016:	2b0a      	cmp	r3, #10
 800c018:	d02f      	beq.n	800c07a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d02b      	beq.n	800c07a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c026:	2b00      	cmp	r3, #0
 800c028:	d007      	beq.n	800c03a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fe fada 	bl	800a5e8 <pbuf_free>
      pcb->refused_data = NULL;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d002      	beq.n	800c048 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f986 	bl	800c354 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c04e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c054:	4618      	mov	r0, r3
 800c056:	f7ff fdc7 	bl	800bbe8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c05e:	4618      	mov	r0, r3
 800c060:	f7ff fdc2 	bl	800bbe8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	66da      	str	r2, [r3, #108]	; 0x6c
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	080151e0 	.word	0x080151e0
 800c084:	0801582c 	.word	0x0801582c
 800c088:	08015224 	.word	0x08015224

0800c08c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d106      	bne.n	800c0aa <tcp_pcb_remove+0x1e>
 800c09c:	4b3e      	ldr	r3, [pc, #248]	; (800c198 <tcp_pcb_remove+0x10c>)
 800c09e:	f640 0283 	movw	r2, #2179	; 0x883
 800c0a2:	493e      	ldr	r1, [pc, #248]	; (800c19c <tcp_pcb_remove+0x110>)
 800c0a4:	483e      	ldr	r0, [pc, #248]	; (800c1a0 <tcp_pcb_remove+0x114>)
 800c0a6:	f007 f913 	bl	80132d0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d106      	bne.n	800c0be <tcp_pcb_remove+0x32>
 800c0b0:	4b39      	ldr	r3, [pc, #228]	; (800c198 <tcp_pcb_remove+0x10c>)
 800c0b2:	f640 0284 	movw	r2, #2180	; 0x884
 800c0b6:	493b      	ldr	r1, [pc, #236]	; (800c1a4 <tcp_pcb_remove+0x118>)
 800c0b8:	4839      	ldr	r0, [pc, #228]	; (800c1a0 <tcp_pcb_remove+0x114>)
 800c0ba:	f007 f909 	bl	80132d0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d105      	bne.n	800c0d4 <tcp_pcb_remove+0x48>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68da      	ldr	r2, [r3, #12]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	601a      	str	r2, [r3, #0]
 800c0d2:	e013      	b.n	800c0fc <tcp_pcb_remove+0x70>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	60fb      	str	r3, [r7, #12]
 800c0da:	e00c      	b.n	800c0f6 <tcp_pcb_remove+0x6a>
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d104      	bne.n	800c0f0 <tcp_pcb_remove+0x64>
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	68da      	ldr	r2, [r3, #12]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	60da      	str	r2, [r3, #12]
 800c0ee:	e005      	b.n	800c0fc <tcp_pcb_remove+0x70>
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	60fb      	str	r3, [r7, #12]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1ef      	bne.n	800c0dc <tcp_pcb_remove+0x50>
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	2200      	movs	r2, #0
 800c100:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c102:	6838      	ldr	r0, [r7, #0]
 800c104:	f7ff ff72 	bl	800bfec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	7d1b      	ldrb	r3, [r3, #20]
 800c10c:	2b0a      	cmp	r3, #10
 800c10e:	d013      	beq.n	800c138 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c114:	2b01      	cmp	r3, #1
 800c116:	d00f      	beq.n	800c138 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	8b5b      	ldrh	r3, [r3, #26]
 800c11c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c120:	2b00      	cmp	r3, #0
 800c122:	d009      	beq.n	800c138 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	8b5b      	ldrh	r3, [r3, #26]
 800c128:	f043 0302 	orr.w	r3, r3, #2
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c132:	6838      	ldr	r0, [r7, #0]
 800c134:	f002 ff6e 	bl	800f014 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	7d1b      	ldrb	r3, [r3, #20]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d020      	beq.n	800c182 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c144:	2b00      	cmp	r3, #0
 800c146:	d006      	beq.n	800c156 <tcp_pcb_remove+0xca>
 800c148:	4b13      	ldr	r3, [pc, #76]	; (800c198 <tcp_pcb_remove+0x10c>)
 800c14a:	f640 0293 	movw	r2, #2195	; 0x893
 800c14e:	4916      	ldr	r1, [pc, #88]	; (800c1a8 <tcp_pcb_remove+0x11c>)
 800c150:	4813      	ldr	r0, [pc, #76]	; (800c1a0 <tcp_pcb_remove+0x114>)
 800c152:	f007 f8bd 	bl	80132d0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d006      	beq.n	800c16c <tcp_pcb_remove+0xe0>
 800c15e:	4b0e      	ldr	r3, [pc, #56]	; (800c198 <tcp_pcb_remove+0x10c>)
 800c160:	f640 0294 	movw	r2, #2196	; 0x894
 800c164:	4911      	ldr	r1, [pc, #68]	; (800c1ac <tcp_pcb_remove+0x120>)
 800c166:	480e      	ldr	r0, [pc, #56]	; (800c1a0 <tcp_pcb_remove+0x114>)
 800c168:	f007 f8b2 	bl	80132d0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c170:	2b00      	cmp	r3, #0
 800c172:	d006      	beq.n	800c182 <tcp_pcb_remove+0xf6>
 800c174:	4b08      	ldr	r3, [pc, #32]	; (800c198 <tcp_pcb_remove+0x10c>)
 800c176:	f640 0296 	movw	r2, #2198	; 0x896
 800c17a:	490d      	ldr	r1, [pc, #52]	; (800c1b0 <tcp_pcb_remove+0x124>)
 800c17c:	4808      	ldr	r0, [pc, #32]	; (800c1a0 <tcp_pcb_remove+0x114>)
 800c17e:	f007 f8a7 	bl	80132d0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	2200      	movs	r2, #0
 800c186:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	2200      	movs	r2, #0
 800c18c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c18e:	bf00      	nop
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	080151e0 	.word	0x080151e0
 800c19c:	08015848 	.word	0x08015848
 800c1a0:	08015224 	.word	0x08015224
 800c1a4:	08015864 	.word	0x08015864
 800c1a8:	08015884 	.word	0x08015884
 800c1ac:	0801589c 	.word	0x0801589c
 800c1b0:	080158b8 	.word	0x080158b8

0800c1b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d106      	bne.n	800c1d0 <tcp_next_iss+0x1c>
 800c1c2:	4b0a      	ldr	r3, [pc, #40]	; (800c1ec <tcp_next_iss+0x38>)
 800c1c4:	f640 02af 	movw	r2, #2223	; 0x8af
 800c1c8:	4909      	ldr	r1, [pc, #36]	; (800c1f0 <tcp_next_iss+0x3c>)
 800c1ca:	480a      	ldr	r0, [pc, #40]	; (800c1f4 <tcp_next_iss+0x40>)
 800c1cc:	f007 f880 	bl	80132d0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c1d0:	4b09      	ldr	r3, [pc, #36]	; (800c1f8 <tcp_next_iss+0x44>)
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	4b09      	ldr	r3, [pc, #36]	; (800c1fc <tcp_next_iss+0x48>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4413      	add	r3, r2
 800c1da:	4a07      	ldr	r2, [pc, #28]	; (800c1f8 <tcp_next_iss+0x44>)
 800c1dc:	6013      	str	r3, [r2, #0]
  return iss;
 800c1de:	4b06      	ldr	r3, [pc, #24]	; (800c1f8 <tcp_next_iss+0x44>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	080151e0 	.word	0x080151e0
 800c1f0:	080158d0 	.word	0x080158d0
 800c1f4:	08015224 	.word	0x08015224
 800c1f8:	20000010 	.word	0x20000010
 800c1fc:	20008eb4 	.word	0x20008eb4

0800c200 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	4603      	mov	r3, r0
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
 800c20c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d106      	bne.n	800c222 <tcp_eff_send_mss_netif+0x22>
 800c214:	4b14      	ldr	r3, [pc, #80]	; (800c268 <tcp_eff_send_mss_netif+0x68>)
 800c216:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c21a:	4914      	ldr	r1, [pc, #80]	; (800c26c <tcp_eff_send_mss_netif+0x6c>)
 800c21c:	4814      	ldr	r0, [pc, #80]	; (800c270 <tcp_eff_send_mss_netif+0x70>)
 800c21e:	f007 f857 	bl	80132d0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d101      	bne.n	800c22c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c228:	89fb      	ldrh	r3, [r7, #14]
 800c22a:	e019      	b.n	800c260 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c230:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c232:	8afb      	ldrh	r3, [r7, #22]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d012      	beq.n	800c25e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c238:	2328      	movs	r3, #40	; 0x28
 800c23a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c23c:	8afa      	ldrh	r2, [r7, #22]
 800c23e:	8abb      	ldrh	r3, [r7, #20]
 800c240:	429a      	cmp	r2, r3
 800c242:	d904      	bls.n	800c24e <tcp_eff_send_mss_netif+0x4e>
 800c244:	8afa      	ldrh	r2, [r7, #22]
 800c246:	8abb      	ldrh	r3, [r7, #20]
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	e000      	b.n	800c250 <tcp_eff_send_mss_netif+0x50>
 800c24e:	2300      	movs	r3, #0
 800c250:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c252:	8a7a      	ldrh	r2, [r7, #18]
 800c254:	89fb      	ldrh	r3, [r7, #14]
 800c256:	4293      	cmp	r3, r2
 800c258:	bf28      	it	cs
 800c25a:	4613      	movcs	r3, r2
 800c25c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c25e:	89fb      	ldrh	r3, [r7, #14]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3718      	adds	r7, #24
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	080151e0 	.word	0x080151e0
 800c26c:	080158ec 	.word	0x080158ec
 800c270:	08015224 	.word	0x08015224

0800c274 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d119      	bne.n	800c2bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c288:	4b10      	ldr	r3, [pc, #64]	; (800c2cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c28a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c28e:	4910      	ldr	r1, [pc, #64]	; (800c2d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c290:	4810      	ldr	r0, [pc, #64]	; (800c2d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c292:	f007 f81d 	bl	80132d0 <iprintf>

  while (pcb != NULL) {
 800c296:	e011      	b.n	800c2bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d108      	bne.n	800c2b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f7fe ffc6 	bl	800b23c <tcp_abort>
      pcb = next;
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	60fb      	str	r3, [r7, #12]
 800c2b4:	e002      	b.n	800c2bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1ea      	bne.n	800c298 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c2c2:	bf00      	nop
 800c2c4:	bf00      	nop
 800c2c6:	3710      	adds	r7, #16
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	080151e0 	.word	0x080151e0
 800c2d0:	08015914 	.word	0x08015914
 800c2d4:	08015224 	.word	0x08015224

0800c2d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d02a      	beq.n	800c33e <tcp_netif_ip_addr_changed+0x66>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d026      	beq.n	800c33e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c2f0:	4b15      	ldr	r3, [pc, #84]	; (800c348 <tcp_netif_ip_addr_changed+0x70>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7ff ffbc 	bl	800c274 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c2fc:	4b13      	ldr	r3, [pc, #76]	; (800c34c <tcp_netif_ip_addr_changed+0x74>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4619      	mov	r1, r3
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f7ff ffb6 	bl	800c274 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d017      	beq.n	800c33e <tcp_netif_ip_addr_changed+0x66>
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d013      	beq.n	800c33e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c316:	4b0e      	ldr	r3, [pc, #56]	; (800c350 <tcp_netif_ip_addr_changed+0x78>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	60fb      	str	r3, [r7, #12]
 800c31c:	e00c      	b.n	800c338 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	429a      	cmp	r2, r3
 800c328:	d103      	bne.n	800c332 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	60fb      	str	r3, [r7, #12]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1ef      	bne.n	800c31e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c33e:	bf00      	nop
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	20008ec0 	.word	0x20008ec0
 800c34c:	20008eb8 	.word	0x20008eb8
 800c350:	20008ebc 	.word	0x20008ebc

0800c354 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c360:	2b00      	cmp	r3, #0
 800c362:	d007      	beq.n	800c374 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c368:	4618      	mov	r0, r3
 800c36a:	f7ff fc3d 	bl	800bbe8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c374:	bf00      	nop
 800c376:	3708      	adds	r7, #8
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c37c:	b590      	push	{r4, r7, lr}
 800c37e:	b08d      	sub	sp, #52	; 0x34
 800c380:	af04      	add	r7, sp, #16
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d105      	bne.n	800c398 <tcp_input+0x1c>
 800c38c:	4b9b      	ldr	r3, [pc, #620]	; (800c5fc <tcp_input+0x280>)
 800c38e:	2283      	movs	r2, #131	; 0x83
 800c390:	499b      	ldr	r1, [pc, #620]	; (800c600 <tcp_input+0x284>)
 800c392:	489c      	ldr	r0, [pc, #624]	; (800c604 <tcp_input+0x288>)
 800c394:	f006 ff9c 	bl	80132d0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	4a9a      	ldr	r2, [pc, #616]	; (800c608 <tcp_input+0x28c>)
 800c39e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	895b      	ldrh	r3, [r3, #10]
 800c3a4:	2b13      	cmp	r3, #19
 800c3a6:	f240 83d1 	bls.w	800cb4c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c3aa:	4b98      	ldr	r3, [pc, #608]	; (800c60c <tcp_input+0x290>)
 800c3ac:	695b      	ldr	r3, [r3, #20]
 800c3ae:	4a97      	ldr	r2, [pc, #604]	; (800c60c <tcp_input+0x290>)
 800c3b0:	6812      	ldr	r2, [r2, #0]
 800c3b2:	4611      	mov	r1, r2
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f005 ffd1 	bl	801235c <ip4_addr_isbroadcast_u32>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f040 83c7 	bne.w	800cb50 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c3c2:	4b92      	ldr	r3, [pc, #584]	; (800c60c <tcp_input+0x290>)
 800c3c4:	695b      	ldr	r3, [r3, #20]
 800c3c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c3ca:	2be0      	cmp	r3, #224	; 0xe0
 800c3cc:	f000 83c0 	beq.w	800cb50 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c3d0:	4b8d      	ldr	r3, [pc, #564]	; (800c608 <tcp_input+0x28c>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	899b      	ldrh	r3, [r3, #12]
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fc fe51 	bl	8009080 <lwip_htons>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	0b1b      	lsrs	r3, r3, #12
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c3ea:	7cbb      	ldrb	r3, [r7, #18]
 800c3ec:	2b13      	cmp	r3, #19
 800c3ee:	f240 83b1 	bls.w	800cb54 <tcp_input+0x7d8>
 800c3f2:	7cbb      	ldrb	r3, [r7, #18]
 800c3f4:	b29a      	uxth	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	891b      	ldrh	r3, [r3, #8]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	f200 83aa 	bhi.w	800cb54 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c400:	7cbb      	ldrb	r3, [r7, #18]
 800c402:	b29b      	uxth	r3, r3
 800c404:	3b14      	subs	r3, #20
 800c406:	b29a      	uxth	r2, r3
 800c408:	4b81      	ldr	r3, [pc, #516]	; (800c610 <tcp_input+0x294>)
 800c40a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c40c:	4b81      	ldr	r3, [pc, #516]	; (800c614 <tcp_input+0x298>)
 800c40e:	2200      	movs	r2, #0
 800c410:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	895a      	ldrh	r2, [r3, #10]
 800c416:	7cbb      	ldrb	r3, [r7, #18]
 800c418:	b29b      	uxth	r3, r3
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d309      	bcc.n	800c432 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c41e:	4b7c      	ldr	r3, [pc, #496]	; (800c610 <tcp_input+0x294>)
 800c420:	881a      	ldrh	r2, [r3, #0]
 800c422:	4b7d      	ldr	r3, [pc, #500]	; (800c618 <tcp_input+0x29c>)
 800c424:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c426:	7cbb      	ldrb	r3, [r7, #18]
 800c428:	4619      	mov	r1, r3
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f7fe f856 	bl	800a4dc <pbuf_remove_header>
 800c430:	e04e      	b.n	800c4d0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d105      	bne.n	800c446 <tcp_input+0xca>
 800c43a:	4b70      	ldr	r3, [pc, #448]	; (800c5fc <tcp_input+0x280>)
 800c43c:	22c2      	movs	r2, #194	; 0xc2
 800c43e:	4977      	ldr	r1, [pc, #476]	; (800c61c <tcp_input+0x2a0>)
 800c440:	4870      	ldr	r0, [pc, #448]	; (800c604 <tcp_input+0x288>)
 800c442:	f006 ff45 	bl	80132d0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c446:	2114      	movs	r1, #20
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7fe f847 	bl	800a4dc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	895a      	ldrh	r2, [r3, #10]
 800c452:	4b71      	ldr	r3, [pc, #452]	; (800c618 <tcp_input+0x29c>)
 800c454:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c456:	4b6e      	ldr	r3, [pc, #440]	; (800c610 <tcp_input+0x294>)
 800c458:	881a      	ldrh	r2, [r3, #0]
 800c45a:	4b6f      	ldr	r3, [pc, #444]	; (800c618 <tcp_input+0x29c>)
 800c45c:	881b      	ldrh	r3, [r3, #0]
 800c45e:	1ad3      	subs	r3, r2, r3
 800c460:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c462:	4b6d      	ldr	r3, [pc, #436]	; (800c618 <tcp_input+0x29c>)
 800c464:	881b      	ldrh	r3, [r3, #0]
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7fe f837 	bl	800a4dc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	895b      	ldrh	r3, [r3, #10]
 800c474:	8a3a      	ldrh	r2, [r7, #16]
 800c476:	429a      	cmp	r2, r3
 800c478:	f200 836e 	bhi.w	800cb58 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	4a64      	ldr	r2, [pc, #400]	; (800c614 <tcp_input+0x298>)
 800c484:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	8a3a      	ldrh	r2, [r7, #16]
 800c48c:	4611      	mov	r1, r2
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe f824 	bl	800a4dc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	891a      	ldrh	r2, [r3, #8]
 800c498:	8a3b      	ldrh	r3, [r7, #16]
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	895b      	ldrh	r3, [r3, #10]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d005      	beq.n	800c4b6 <tcp_input+0x13a>
 800c4aa:	4b54      	ldr	r3, [pc, #336]	; (800c5fc <tcp_input+0x280>)
 800c4ac:	22df      	movs	r2, #223	; 0xdf
 800c4ae:	495c      	ldr	r1, [pc, #368]	; (800c620 <tcp_input+0x2a4>)
 800c4b0:	4854      	ldr	r0, [pc, #336]	; (800c604 <tcp_input+0x288>)
 800c4b2:	f006 ff0d 	bl	80132d0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	891a      	ldrh	r2, [r3, #8]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	891b      	ldrh	r3, [r3, #8]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d005      	beq.n	800c4d0 <tcp_input+0x154>
 800c4c4:	4b4d      	ldr	r3, [pc, #308]	; (800c5fc <tcp_input+0x280>)
 800c4c6:	22e0      	movs	r2, #224	; 0xe0
 800c4c8:	4956      	ldr	r1, [pc, #344]	; (800c624 <tcp_input+0x2a8>)
 800c4ca:	484e      	ldr	r0, [pc, #312]	; (800c604 <tcp_input+0x288>)
 800c4cc:	f006 ff00 	bl	80132d0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c4d0:	4b4d      	ldr	r3, [pc, #308]	; (800c608 <tcp_input+0x28c>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	881b      	ldrh	r3, [r3, #0]
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	4a4b      	ldr	r2, [pc, #300]	; (800c608 <tcp_input+0x28c>)
 800c4da:	6814      	ldr	r4, [r2, #0]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fc fdcf 	bl	8009080 <lwip_htons>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c4e6:	4b48      	ldr	r3, [pc, #288]	; (800c608 <tcp_input+0x28c>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	885b      	ldrh	r3, [r3, #2]
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	4a46      	ldr	r2, [pc, #280]	; (800c608 <tcp_input+0x28c>)
 800c4f0:	6814      	ldr	r4, [r2, #0]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fc fdc4 	bl	8009080 <lwip_htons>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c4fc:	4b42      	ldr	r3, [pc, #264]	; (800c608 <tcp_input+0x28c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	4a41      	ldr	r2, [pc, #260]	; (800c608 <tcp_input+0x28c>)
 800c504:	6814      	ldr	r4, [r2, #0]
 800c506:	4618      	mov	r0, r3
 800c508:	f7fc fdcf 	bl	80090aa <lwip_htonl>
 800c50c:	4603      	mov	r3, r0
 800c50e:	6063      	str	r3, [r4, #4]
 800c510:	6863      	ldr	r3, [r4, #4]
 800c512:	4a45      	ldr	r2, [pc, #276]	; (800c628 <tcp_input+0x2ac>)
 800c514:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c516:	4b3c      	ldr	r3, [pc, #240]	; (800c608 <tcp_input+0x28c>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	4a3a      	ldr	r2, [pc, #232]	; (800c608 <tcp_input+0x28c>)
 800c51e:	6814      	ldr	r4, [r2, #0]
 800c520:	4618      	mov	r0, r3
 800c522:	f7fc fdc2 	bl	80090aa <lwip_htonl>
 800c526:	4603      	mov	r3, r0
 800c528:	60a3      	str	r3, [r4, #8]
 800c52a:	68a3      	ldr	r3, [r4, #8]
 800c52c:	4a3f      	ldr	r2, [pc, #252]	; (800c62c <tcp_input+0x2b0>)
 800c52e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c530:	4b35      	ldr	r3, [pc, #212]	; (800c608 <tcp_input+0x28c>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	89db      	ldrh	r3, [r3, #14]
 800c536:	b29b      	uxth	r3, r3
 800c538:	4a33      	ldr	r2, [pc, #204]	; (800c608 <tcp_input+0x28c>)
 800c53a:	6814      	ldr	r4, [r2, #0]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fc fd9f 	bl	8009080 <lwip_htons>
 800c542:	4603      	mov	r3, r0
 800c544:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c546:	4b30      	ldr	r3, [pc, #192]	; (800c608 <tcp_input+0x28c>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	899b      	ldrh	r3, [r3, #12]
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fc fd96 	bl	8009080 <lwip_htons>
 800c554:	4603      	mov	r3, r0
 800c556:	b2db      	uxtb	r3, r3
 800c558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c55c:	b2da      	uxtb	r2, r3
 800c55e:	4b34      	ldr	r3, [pc, #208]	; (800c630 <tcp_input+0x2b4>)
 800c560:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	891a      	ldrh	r2, [r3, #8]
 800c566:	4b33      	ldr	r3, [pc, #204]	; (800c634 <tcp_input+0x2b8>)
 800c568:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c56a:	4b31      	ldr	r3, [pc, #196]	; (800c630 <tcp_input+0x2b4>)
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	f003 0303 	and.w	r3, r3, #3
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00c      	beq.n	800c590 <tcp_input+0x214>
    tcplen++;
 800c576:	4b2f      	ldr	r3, [pc, #188]	; (800c634 <tcp_input+0x2b8>)
 800c578:	881b      	ldrh	r3, [r3, #0]
 800c57a:	3301      	adds	r3, #1
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	4b2d      	ldr	r3, [pc, #180]	; (800c634 <tcp_input+0x2b8>)
 800c580:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	891a      	ldrh	r2, [r3, #8]
 800c586:	4b2b      	ldr	r3, [pc, #172]	; (800c634 <tcp_input+0x2b8>)
 800c588:	881b      	ldrh	r3, [r3, #0]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	f200 82e6 	bhi.w	800cb5c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c590:	2300      	movs	r3, #0
 800c592:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c594:	4b28      	ldr	r3, [pc, #160]	; (800c638 <tcp_input+0x2bc>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	61fb      	str	r3, [r7, #28]
 800c59a:	e09d      	b.n	800c6d8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	7d1b      	ldrb	r3, [r3, #20]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d105      	bne.n	800c5b0 <tcp_input+0x234>
 800c5a4:	4b15      	ldr	r3, [pc, #84]	; (800c5fc <tcp_input+0x280>)
 800c5a6:	22fb      	movs	r2, #251	; 0xfb
 800c5a8:	4924      	ldr	r1, [pc, #144]	; (800c63c <tcp_input+0x2c0>)
 800c5aa:	4816      	ldr	r0, [pc, #88]	; (800c604 <tcp_input+0x288>)
 800c5ac:	f006 fe90 	bl	80132d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	7d1b      	ldrb	r3, [r3, #20]
 800c5b4:	2b0a      	cmp	r3, #10
 800c5b6:	d105      	bne.n	800c5c4 <tcp_input+0x248>
 800c5b8:	4b10      	ldr	r3, [pc, #64]	; (800c5fc <tcp_input+0x280>)
 800c5ba:	22fc      	movs	r2, #252	; 0xfc
 800c5bc:	4920      	ldr	r1, [pc, #128]	; (800c640 <tcp_input+0x2c4>)
 800c5be:	4811      	ldr	r0, [pc, #68]	; (800c604 <tcp_input+0x288>)
 800c5c0:	f006 fe86 	bl	80132d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	7d1b      	ldrb	r3, [r3, #20]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d105      	bne.n	800c5d8 <tcp_input+0x25c>
 800c5cc:	4b0b      	ldr	r3, [pc, #44]	; (800c5fc <tcp_input+0x280>)
 800c5ce:	22fd      	movs	r2, #253	; 0xfd
 800c5d0:	491c      	ldr	r1, [pc, #112]	; (800c644 <tcp_input+0x2c8>)
 800c5d2:	480c      	ldr	r0, [pc, #48]	; (800c604 <tcp_input+0x288>)
 800c5d4:	f006 fe7c 	bl	80132d0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	7a1b      	ldrb	r3, [r3, #8]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d033      	beq.n	800c648 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	7a1a      	ldrb	r2, [r3, #8]
 800c5e4:	4b09      	ldr	r3, [pc, #36]	; (800c60c <tcp_input+0x290>)
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d029      	beq.n	800c648 <tcp_input+0x2cc>
      prev = pcb;
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	61bb      	str	r3, [r7, #24]
      continue;
 800c5f8:	e06b      	b.n	800c6d2 <tcp_input+0x356>
 800c5fa:	bf00      	nop
 800c5fc:	08015948 	.word	0x08015948
 800c600:	0801597c 	.word	0x0801597c
 800c604:	08015994 	.word	0x08015994
 800c608:	20008edc 	.word	0x20008edc
 800c60c:	20003784 	.word	0x20003784
 800c610:	20008ee0 	.word	0x20008ee0
 800c614:	20008ee4 	.word	0x20008ee4
 800c618:	20008ee2 	.word	0x20008ee2
 800c61c:	080159bc 	.word	0x080159bc
 800c620:	080159cc 	.word	0x080159cc
 800c624:	080159d8 	.word	0x080159d8
 800c628:	20008eec 	.word	0x20008eec
 800c62c:	20008ef0 	.word	0x20008ef0
 800c630:	20008ef8 	.word	0x20008ef8
 800c634:	20008ef6 	.word	0x20008ef6
 800c638:	20008ec0 	.word	0x20008ec0
 800c63c:	080159f8 	.word	0x080159f8
 800c640:	08015a20 	.word	0x08015a20
 800c644:	08015a4c 	.word	0x08015a4c
    }

    if (pcb->remote_port == tcphdr->src &&
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	8b1a      	ldrh	r2, [r3, #24]
 800c64c:	4b72      	ldr	r3, [pc, #456]	; (800c818 <tcp_input+0x49c>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	881b      	ldrh	r3, [r3, #0]
 800c652:	b29b      	uxth	r3, r3
 800c654:	429a      	cmp	r2, r3
 800c656:	d13a      	bne.n	800c6ce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	8ada      	ldrh	r2, [r3, #22]
 800c65c:	4b6e      	ldr	r3, [pc, #440]	; (800c818 <tcp_input+0x49c>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	885b      	ldrh	r3, [r3, #2]
 800c662:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c664:	429a      	cmp	r2, r3
 800c666:	d132      	bne.n	800c6ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	4b6b      	ldr	r3, [pc, #428]	; (800c81c <tcp_input+0x4a0>)
 800c66e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c670:	429a      	cmp	r2, r3
 800c672:	d12c      	bne.n	800c6ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	4b68      	ldr	r3, [pc, #416]	; (800c81c <tcp_input+0x4a0>)
 800c67a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d126      	bne.n	800c6ce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	69fa      	ldr	r2, [r7, #28]
 800c686:	429a      	cmp	r2, r3
 800c688:	d106      	bne.n	800c698 <tcp_input+0x31c>
 800c68a:	4b65      	ldr	r3, [pc, #404]	; (800c820 <tcp_input+0x4a4>)
 800c68c:	f240 120d 	movw	r2, #269	; 0x10d
 800c690:	4964      	ldr	r1, [pc, #400]	; (800c824 <tcp_input+0x4a8>)
 800c692:	4865      	ldr	r0, [pc, #404]	; (800c828 <tcp_input+0x4ac>)
 800c694:	f006 fe1c 	bl	80132d0 <iprintf>
      if (prev != NULL) {
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00a      	beq.n	800c6b4 <tcp_input+0x338>
        prev->next = pcb->next;
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	68da      	ldr	r2, [r3, #12]
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c6a6:	4b61      	ldr	r3, [pc, #388]	; (800c82c <tcp_input+0x4b0>)
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c6ae:	4a5f      	ldr	r2, [pc, #380]	; (800c82c <tcp_input+0x4b0>)
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	69fa      	ldr	r2, [r7, #28]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d111      	bne.n	800c6e2 <tcp_input+0x366>
 800c6be:	4b58      	ldr	r3, [pc, #352]	; (800c820 <tcp_input+0x4a4>)
 800c6c0:	f240 1215 	movw	r2, #277	; 0x115
 800c6c4:	495a      	ldr	r1, [pc, #360]	; (800c830 <tcp_input+0x4b4>)
 800c6c6:	4858      	ldr	r0, [pc, #352]	; (800c828 <tcp_input+0x4ac>)
 800c6c8:	f006 fe02 	bl	80132d0 <iprintf>
      break;
 800c6cc:	e009      	b.n	800c6e2 <tcp_input+0x366>
    }
    prev = pcb;
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	61fb      	str	r3, [r7, #28]
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f47f af5e 	bne.w	800c59c <tcp_input+0x220>
 800c6e0:	e000      	b.n	800c6e4 <tcp_input+0x368>
      break;
 800c6e2:	bf00      	nop
  }

  if (pcb == NULL) {
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f040 80aa 	bne.w	800c840 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6ec:	4b51      	ldr	r3, [pc, #324]	; (800c834 <tcp_input+0x4b8>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	61fb      	str	r3, [r7, #28]
 800c6f2:	e03f      	b.n	800c774 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	7d1b      	ldrb	r3, [r3, #20]
 800c6f8:	2b0a      	cmp	r3, #10
 800c6fa:	d006      	beq.n	800c70a <tcp_input+0x38e>
 800c6fc:	4b48      	ldr	r3, [pc, #288]	; (800c820 <tcp_input+0x4a4>)
 800c6fe:	f240 121f 	movw	r2, #287	; 0x11f
 800c702:	494d      	ldr	r1, [pc, #308]	; (800c838 <tcp_input+0x4bc>)
 800c704:	4848      	ldr	r0, [pc, #288]	; (800c828 <tcp_input+0x4ac>)
 800c706:	f006 fde3 	bl	80132d0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	7a1b      	ldrb	r3, [r3, #8]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d009      	beq.n	800c726 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	7a1a      	ldrb	r2, [r3, #8]
 800c716:	4b41      	ldr	r3, [pc, #260]	; (800c81c <tcp_input+0x4a0>)
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c71e:	3301      	adds	r3, #1
 800c720:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c722:	429a      	cmp	r2, r3
 800c724:	d122      	bne.n	800c76c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	8b1a      	ldrh	r2, [r3, #24]
 800c72a:	4b3b      	ldr	r3, [pc, #236]	; (800c818 <tcp_input+0x49c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	881b      	ldrh	r3, [r3, #0]
 800c730:	b29b      	uxth	r3, r3
 800c732:	429a      	cmp	r2, r3
 800c734:	d11b      	bne.n	800c76e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	8ada      	ldrh	r2, [r3, #22]
 800c73a:	4b37      	ldr	r3, [pc, #220]	; (800c818 <tcp_input+0x49c>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	885b      	ldrh	r3, [r3, #2]
 800c740:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c742:	429a      	cmp	r2, r3
 800c744:	d113      	bne.n	800c76e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	685a      	ldr	r2, [r3, #4]
 800c74a:	4b34      	ldr	r3, [pc, #208]	; (800c81c <tcp_input+0x4a0>)
 800c74c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c74e:	429a      	cmp	r2, r3
 800c750:	d10d      	bne.n	800c76e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	4b31      	ldr	r3, [pc, #196]	; (800c81c <tcp_input+0x4a0>)
 800c758:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d107      	bne.n	800c76e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c75e:	69f8      	ldr	r0, [r7, #28]
 800c760:	f000 fb56 	bl	800ce10 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f7fd ff3f 	bl	800a5e8 <pbuf_free>
        return;
 800c76a:	e1fd      	b.n	800cb68 <tcp_input+0x7ec>
        continue;
 800c76c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	61fb      	str	r3, [r7, #28]
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1bc      	bne.n	800c6f4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c77a:	2300      	movs	r3, #0
 800c77c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c77e:	4b2f      	ldr	r3, [pc, #188]	; (800c83c <tcp_input+0x4c0>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	617b      	str	r3, [r7, #20]
 800c784:	e02a      	b.n	800c7dc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	7a1b      	ldrb	r3, [r3, #8]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00c      	beq.n	800c7a8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	7a1a      	ldrb	r2, [r3, #8]
 800c792:	4b22      	ldr	r3, [pc, #136]	; (800c81c <tcp_input+0x4a0>)
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c79a:	3301      	adds	r3, #1
 800c79c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d002      	beq.n	800c7a8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	61bb      	str	r3, [r7, #24]
        continue;
 800c7a6:	e016      	b.n	800c7d6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	8ada      	ldrh	r2, [r3, #22]
 800c7ac:	4b1a      	ldr	r3, [pc, #104]	; (800c818 <tcp_input+0x49c>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	885b      	ldrh	r3, [r3, #2]
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d10c      	bne.n	800c7d2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	4b17      	ldr	r3, [pc, #92]	; (800c81c <tcp_input+0x4a0>)
 800c7be:	695b      	ldr	r3, [r3, #20]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d00f      	beq.n	800c7e4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00d      	beq.n	800c7e6 <tcp_input+0x46a>
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d009      	beq.n	800c7e6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	617b      	str	r3, [r7, #20]
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1d1      	bne.n	800c786 <tcp_input+0x40a>
 800c7e2:	e000      	b.n	800c7e6 <tcp_input+0x46a>
            break;
 800c7e4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d029      	beq.n	800c840 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00a      	beq.n	800c808 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	68da      	ldr	r2, [r3, #12]
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c7fa:	4b10      	ldr	r3, [pc, #64]	; (800c83c <tcp_input+0x4c0>)
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c802:	4a0e      	ldr	r2, [pc, #56]	; (800c83c <tcp_input+0x4c0>)
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c808:	6978      	ldr	r0, [r7, #20]
 800c80a:	f000 fa03 	bl	800cc14 <tcp_listen_input>
      }
      pbuf_free(p);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7fd feea 	bl	800a5e8 <pbuf_free>
      return;
 800c814:	e1a8      	b.n	800cb68 <tcp_input+0x7ec>
 800c816:	bf00      	nop
 800c818:	20008edc 	.word	0x20008edc
 800c81c:	20003784 	.word	0x20003784
 800c820:	08015948 	.word	0x08015948
 800c824:	08015a74 	.word	0x08015a74
 800c828:	08015994 	.word	0x08015994
 800c82c:	20008ec0 	.word	0x20008ec0
 800c830:	08015aa0 	.word	0x08015aa0
 800c834:	20008ec4 	.word	0x20008ec4
 800c838:	08015acc 	.word	0x08015acc
 800c83c:	20008ebc 	.word	0x20008ebc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	2b00      	cmp	r3, #0
 800c844:	f000 8158 	beq.w	800caf8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c848:	4b95      	ldr	r3, [pc, #596]	; (800caa0 <tcp_input+0x724>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	891a      	ldrh	r2, [r3, #8]
 800c852:	4b93      	ldr	r3, [pc, #588]	; (800caa0 <tcp_input+0x724>)
 800c854:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c856:	4a92      	ldr	r2, [pc, #584]	; (800caa0 <tcp_input+0x724>)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c85c:	4b91      	ldr	r3, [pc, #580]	; (800caa4 <tcp_input+0x728>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a8f      	ldr	r2, [pc, #572]	; (800caa0 <tcp_input+0x724>)
 800c862:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c864:	4b90      	ldr	r3, [pc, #576]	; (800caa8 <tcp_input+0x72c>)
 800c866:	2200      	movs	r2, #0
 800c868:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c86a:	4b90      	ldr	r3, [pc, #576]	; (800caac <tcp_input+0x730>)
 800c86c:	2200      	movs	r2, #0
 800c86e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c870:	4b8f      	ldr	r3, [pc, #572]	; (800cab0 <tcp_input+0x734>)
 800c872:	2200      	movs	r2, #0
 800c874:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c876:	4b8f      	ldr	r3, [pc, #572]	; (800cab4 <tcp_input+0x738>)
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	f003 0308 	and.w	r3, r3, #8
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d006      	beq.n	800c890 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	7b5b      	ldrb	r3, [r3, #13]
 800c886:	f043 0301 	orr.w	r3, r3, #1
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c894:	2b00      	cmp	r3, #0
 800c896:	d017      	beq.n	800c8c8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c898:	69f8      	ldr	r0, [r7, #28]
 800c89a:	f7ff f929 	bl	800baf0 <tcp_process_refused_data>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	f113 0f0d 	cmn.w	r3, #13
 800c8a4:	d007      	beq.n	800c8b6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00c      	beq.n	800c8c8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c8ae:	4b82      	ldr	r3, [pc, #520]	; (800cab8 <tcp_input+0x73c>)
 800c8b0:	881b      	ldrh	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d008      	beq.n	800c8c8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	f040 80e3 	bne.w	800ca86 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c8c0:	69f8      	ldr	r0, [r7, #28]
 800c8c2:	f003 f9ad 	bl	800fc20 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c8c6:	e0de      	b.n	800ca86 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c8c8:	4a7c      	ldr	r2, [pc, #496]	; (800cabc <tcp_input+0x740>)
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c8ce:	69f8      	ldr	r0, [r7, #28]
 800c8d0:	f000 fb18 	bl	800cf04 <tcp_process>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c8d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c8dc:	f113 0f0d 	cmn.w	r3, #13
 800c8e0:	f000 80d3 	beq.w	800ca8a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c8e4:	4b71      	ldr	r3, [pc, #452]	; (800caac <tcp_input+0x730>)
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	f003 0308 	and.w	r3, r3, #8
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d015      	beq.n	800c91c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d008      	beq.n	800c90c <tcp_input+0x590>
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c900:	69fa      	ldr	r2, [r7, #28]
 800c902:	6912      	ldr	r2, [r2, #16]
 800c904:	f06f 010d 	mvn.w	r1, #13
 800c908:	4610      	mov	r0, r2
 800c90a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c90c:	69f9      	ldr	r1, [r7, #28]
 800c90e:	486c      	ldr	r0, [pc, #432]	; (800cac0 <tcp_input+0x744>)
 800c910:	f7ff fbbc 	bl	800c08c <tcp_pcb_remove>
        tcp_free(pcb);
 800c914:	69f8      	ldr	r0, [r7, #28]
 800c916:	f7fe f9a9 	bl	800ac6c <tcp_free>
 800c91a:	e0da      	b.n	800cad2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800c91c:	2300      	movs	r3, #0
 800c91e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c920:	4b63      	ldr	r3, [pc, #396]	; (800cab0 <tcp_input+0x734>)
 800c922:	881b      	ldrh	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d01d      	beq.n	800c964 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c928:	4b61      	ldr	r3, [pc, #388]	; (800cab0 <tcp_input+0x734>)
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00a      	beq.n	800c94e <tcp_input+0x5d2>
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c93e:	69fa      	ldr	r2, [r7, #28]
 800c940:	6910      	ldr	r0, [r2, #16]
 800c942:	89fa      	ldrh	r2, [r7, #14]
 800c944:	69f9      	ldr	r1, [r7, #28]
 800c946:	4798      	blx	r3
 800c948:	4603      	mov	r3, r0
 800c94a:	74fb      	strb	r3, [r7, #19]
 800c94c:	e001      	b.n	800c952 <tcp_input+0x5d6>
 800c94e:	2300      	movs	r3, #0
 800c950:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c952:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c956:	f113 0f0d 	cmn.w	r3, #13
 800c95a:	f000 8098 	beq.w	800ca8e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c95e:	4b54      	ldr	r3, [pc, #336]	; (800cab0 <tcp_input+0x734>)
 800c960:	2200      	movs	r2, #0
 800c962:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c964:	69f8      	ldr	r0, [r7, #28]
 800c966:	f000 f915 	bl	800cb94 <tcp_input_delayed_close>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f040 8090 	bne.w	800ca92 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c972:	4b4d      	ldr	r3, [pc, #308]	; (800caa8 <tcp_input+0x72c>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d041      	beq.n	800c9fe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d006      	beq.n	800c990 <tcp_input+0x614>
 800c982:	4b50      	ldr	r3, [pc, #320]	; (800cac4 <tcp_input+0x748>)
 800c984:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c988:	494f      	ldr	r1, [pc, #316]	; (800cac8 <tcp_input+0x74c>)
 800c98a:	4850      	ldr	r0, [pc, #320]	; (800cacc <tcp_input+0x750>)
 800c98c:	f006 fca0 	bl	80132d0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	8b5b      	ldrh	r3, [r3, #26]
 800c994:	f003 0310 	and.w	r3, r3, #16
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d008      	beq.n	800c9ae <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c99c:	4b42      	ldr	r3, [pc, #264]	; (800caa8 <tcp_input+0x72c>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7fd fe21 	bl	800a5e8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c9a6:	69f8      	ldr	r0, [r7, #28]
 800c9a8:	f7fe fc48 	bl	800b23c <tcp_abort>
            goto aborted;
 800c9ac:	e091      	b.n	800cad2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00c      	beq.n	800c9d2 <tcp_input+0x656>
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	6918      	ldr	r0, [r3, #16]
 800c9c2:	4b39      	ldr	r3, [pc, #228]	; (800caa8 <tcp_input+0x72c>)
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	69f9      	ldr	r1, [r7, #28]
 800c9ca:	47a0      	blx	r4
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	74fb      	strb	r3, [r7, #19]
 800c9d0:	e008      	b.n	800c9e4 <tcp_input+0x668>
 800c9d2:	4b35      	ldr	r3, [pc, #212]	; (800caa8 <tcp_input+0x72c>)
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	69f9      	ldr	r1, [r7, #28]
 800c9da:	2000      	movs	r0, #0
 800c9dc:	f7ff f95e 	bl	800bc9c <tcp_recv_null>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c9e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c9e8:	f113 0f0d 	cmn.w	r3, #13
 800c9ec:	d053      	beq.n	800ca96 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c9ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d003      	beq.n	800c9fe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c9f6:	4b2c      	ldr	r3, [pc, #176]	; (800caa8 <tcp_input+0x72c>)
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c9fe:	4b2b      	ldr	r3, [pc, #172]	; (800caac <tcp_input+0x730>)
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	f003 0320 	and.w	r3, r3, #32
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d030      	beq.n	800ca6c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d009      	beq.n	800ca26 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ca12:	69fb      	ldr	r3, [r7, #28]
 800ca14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca16:	7b5a      	ldrb	r2, [r3, #13]
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca1c:	f042 0220 	orr.w	r2, r2, #32
 800ca20:	b2d2      	uxtb	r2, r2
 800ca22:	735a      	strb	r2, [r3, #13]
 800ca24:	e022      	b.n	800ca6c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca2a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca2e:	d005      	beq.n	800ca3c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca34:	3301      	adds	r3, #1
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00b      	beq.n	800ca5e <tcp_input+0x6e2>
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	6918      	ldr	r0, [r3, #16]
 800ca50:	2300      	movs	r3, #0
 800ca52:	2200      	movs	r2, #0
 800ca54:	69f9      	ldr	r1, [r7, #28]
 800ca56:	47a0      	blx	r4
 800ca58:	4603      	mov	r3, r0
 800ca5a:	74fb      	strb	r3, [r7, #19]
 800ca5c:	e001      	b.n	800ca62 <tcp_input+0x6e6>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ca62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca66:	f113 0f0d 	cmn.w	r3, #13
 800ca6a:	d016      	beq.n	800ca9a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ca6c:	4b13      	ldr	r3, [pc, #76]	; (800cabc <tcp_input+0x740>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ca72:	69f8      	ldr	r0, [r7, #28]
 800ca74:	f000 f88e 	bl	800cb94 <tcp_input_delayed_close>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d128      	bne.n	800cad0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ca7e:	69f8      	ldr	r0, [r7, #28]
 800ca80:	f002 fac8 	bl	800f014 <tcp_output>
 800ca84:	e025      	b.n	800cad2 <tcp_input+0x756>
        goto aborted;
 800ca86:	bf00      	nop
 800ca88:	e023      	b.n	800cad2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ca8a:	bf00      	nop
 800ca8c:	e021      	b.n	800cad2 <tcp_input+0x756>
              goto aborted;
 800ca8e:	bf00      	nop
 800ca90:	e01f      	b.n	800cad2 <tcp_input+0x756>
          goto aborted;
 800ca92:	bf00      	nop
 800ca94:	e01d      	b.n	800cad2 <tcp_input+0x756>
            goto aborted;
 800ca96:	bf00      	nop
 800ca98:	e01b      	b.n	800cad2 <tcp_input+0x756>
              goto aborted;
 800ca9a:	bf00      	nop
 800ca9c:	e019      	b.n	800cad2 <tcp_input+0x756>
 800ca9e:	bf00      	nop
 800caa0:	20008ecc 	.word	0x20008ecc
 800caa4:	20008edc 	.word	0x20008edc
 800caa8:	20008efc 	.word	0x20008efc
 800caac:	20008ef9 	.word	0x20008ef9
 800cab0:	20008ef4 	.word	0x20008ef4
 800cab4:	20008ef8 	.word	0x20008ef8
 800cab8:	20008ef6 	.word	0x20008ef6
 800cabc:	20008f00 	.word	0x20008f00
 800cac0:	20008ec0 	.word	0x20008ec0
 800cac4:	08015948 	.word	0x08015948
 800cac8:	08015afc 	.word	0x08015afc
 800cacc:	08015994 	.word	0x08015994
          goto aborted;
 800cad0:	bf00      	nop
    tcp_input_pcb = NULL;
 800cad2:	4b27      	ldr	r3, [pc, #156]	; (800cb70 <tcp_input+0x7f4>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cad8:	4b26      	ldr	r3, [pc, #152]	; (800cb74 <tcp_input+0x7f8>)
 800cada:	2200      	movs	r2, #0
 800cadc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800cade:	4b26      	ldr	r3, [pc, #152]	; (800cb78 <tcp_input+0x7fc>)
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d03f      	beq.n	800cb66 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800cae6:	4b24      	ldr	r3, [pc, #144]	; (800cb78 <tcp_input+0x7fc>)
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	4618      	mov	r0, r3
 800caec:	f7fd fd7c 	bl	800a5e8 <pbuf_free>
      inseg.p = NULL;
 800caf0:	4b21      	ldr	r3, [pc, #132]	; (800cb78 <tcp_input+0x7fc>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800caf6:	e036      	b.n	800cb66 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800caf8:	4b20      	ldr	r3, [pc, #128]	; (800cb7c <tcp_input+0x800>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	899b      	ldrh	r3, [r3, #12]
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7fc fabd 	bl	8009080 <lwip_htons>
 800cb06:	4603      	mov	r3, r0
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	f003 0304 	and.w	r3, r3, #4
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d118      	bne.n	800cb44 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb12:	4b1b      	ldr	r3, [pc, #108]	; (800cb80 <tcp_input+0x804>)
 800cb14:	6819      	ldr	r1, [r3, #0]
 800cb16:	4b1b      	ldr	r3, [pc, #108]	; (800cb84 <tcp_input+0x808>)
 800cb18:	881b      	ldrh	r3, [r3, #0]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	4b1a      	ldr	r3, [pc, #104]	; (800cb88 <tcp_input+0x80c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb22:	4b16      	ldr	r3, [pc, #88]	; (800cb7c <tcp_input+0x800>)
 800cb24:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb26:	885b      	ldrh	r3, [r3, #2]
 800cb28:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb2a:	4a14      	ldr	r2, [pc, #80]	; (800cb7c <tcp_input+0x800>)
 800cb2c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb2e:	8812      	ldrh	r2, [r2, #0]
 800cb30:	b292      	uxth	r2, r2
 800cb32:	9202      	str	r2, [sp, #8]
 800cb34:	9301      	str	r3, [sp, #4]
 800cb36:	4b15      	ldr	r3, [pc, #84]	; (800cb8c <tcp_input+0x810>)
 800cb38:	9300      	str	r3, [sp, #0]
 800cb3a:	4b15      	ldr	r3, [pc, #84]	; (800cb90 <tcp_input+0x814>)
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	2000      	movs	r0, #0
 800cb40:	f003 f81c 	bl	800fb7c <tcp_rst>
    pbuf_free(p);
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7fd fd4f 	bl	800a5e8 <pbuf_free>
  return;
 800cb4a:	e00c      	b.n	800cb66 <tcp_input+0x7ea>
    goto dropped;
 800cb4c:	bf00      	nop
 800cb4e:	e006      	b.n	800cb5e <tcp_input+0x7e2>
    goto dropped;
 800cb50:	bf00      	nop
 800cb52:	e004      	b.n	800cb5e <tcp_input+0x7e2>
    goto dropped;
 800cb54:	bf00      	nop
 800cb56:	e002      	b.n	800cb5e <tcp_input+0x7e2>
      goto dropped;
 800cb58:	bf00      	nop
 800cb5a:	e000      	b.n	800cb5e <tcp_input+0x7e2>
      goto dropped;
 800cb5c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7fd fd42 	bl	800a5e8 <pbuf_free>
 800cb64:	e000      	b.n	800cb68 <tcp_input+0x7ec>
  return;
 800cb66:	bf00      	nop
}
 800cb68:	3724      	adds	r7, #36	; 0x24
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd90      	pop	{r4, r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	20008f00 	.word	0x20008f00
 800cb74:	20008efc 	.word	0x20008efc
 800cb78:	20008ecc 	.word	0x20008ecc
 800cb7c:	20008edc 	.word	0x20008edc
 800cb80:	20008ef0 	.word	0x20008ef0
 800cb84:	20008ef6 	.word	0x20008ef6
 800cb88:	20008eec 	.word	0x20008eec
 800cb8c:	20003794 	.word	0x20003794
 800cb90:	20003798 	.word	0x20003798

0800cb94 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d106      	bne.n	800cbb0 <tcp_input_delayed_close+0x1c>
 800cba2:	4b17      	ldr	r3, [pc, #92]	; (800cc00 <tcp_input_delayed_close+0x6c>)
 800cba4:	f240 225a 	movw	r2, #602	; 0x25a
 800cba8:	4916      	ldr	r1, [pc, #88]	; (800cc04 <tcp_input_delayed_close+0x70>)
 800cbaa:	4817      	ldr	r0, [pc, #92]	; (800cc08 <tcp_input_delayed_close+0x74>)
 800cbac:	f006 fb90 	bl	80132d0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800cbb0:	4b16      	ldr	r3, [pc, #88]	; (800cc0c <tcp_input_delayed_close+0x78>)
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	f003 0310 	and.w	r3, r3, #16
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d01c      	beq.n	800cbf6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	8b5b      	ldrh	r3, [r3, #26]
 800cbc0:	f003 0310 	and.w	r3, r3, #16
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10d      	bne.n	800cbe4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d008      	beq.n	800cbe4 <tcp_input_delayed_close+0x50>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	6912      	ldr	r2, [r2, #16]
 800cbdc:	f06f 010e 	mvn.w	r1, #14
 800cbe0:	4610      	mov	r0, r2
 800cbe2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cbe4:	6879      	ldr	r1, [r7, #4]
 800cbe6:	480a      	ldr	r0, [pc, #40]	; (800cc10 <tcp_input_delayed_close+0x7c>)
 800cbe8:	f7ff fa50 	bl	800c08c <tcp_pcb_remove>
    tcp_free(pcb);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7fe f83d 	bl	800ac6c <tcp_free>
    return 1;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e000      	b.n	800cbf8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800cbf6:	2300      	movs	r3, #0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	08015948 	.word	0x08015948
 800cc04:	08015b18 	.word	0x08015b18
 800cc08:	08015994 	.word	0x08015994
 800cc0c:	20008ef9 	.word	0x20008ef9
 800cc10:	20008ec0 	.word	0x20008ec0

0800cc14 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800cc14:	b590      	push	{r4, r7, lr}
 800cc16:	b08b      	sub	sp, #44	; 0x2c
 800cc18:	af04      	add	r7, sp, #16
 800cc1a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800cc1c:	4b6f      	ldr	r3, [pc, #444]	; (800cddc <tcp_listen_input+0x1c8>)
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	f003 0304 	and.w	r3, r3, #4
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	f040 80d2 	bne.w	800cdce <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d106      	bne.n	800cc3e <tcp_listen_input+0x2a>
 800cc30:	4b6b      	ldr	r3, [pc, #428]	; (800cde0 <tcp_listen_input+0x1cc>)
 800cc32:	f240 2281 	movw	r2, #641	; 0x281
 800cc36:	496b      	ldr	r1, [pc, #428]	; (800cde4 <tcp_listen_input+0x1d0>)
 800cc38:	486b      	ldr	r0, [pc, #428]	; (800cde8 <tcp_listen_input+0x1d4>)
 800cc3a:	f006 fb49 	bl	80132d0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800cc3e:	4b67      	ldr	r3, [pc, #412]	; (800cddc <tcp_listen_input+0x1c8>)
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	f003 0310 	and.w	r3, r3, #16
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d019      	beq.n	800cc7e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc4a:	4b68      	ldr	r3, [pc, #416]	; (800cdec <tcp_listen_input+0x1d8>)
 800cc4c:	6819      	ldr	r1, [r3, #0]
 800cc4e:	4b68      	ldr	r3, [pc, #416]	; (800cdf0 <tcp_listen_input+0x1dc>)
 800cc50:	881b      	ldrh	r3, [r3, #0]
 800cc52:	461a      	mov	r2, r3
 800cc54:	4b67      	ldr	r3, [pc, #412]	; (800cdf4 <tcp_listen_input+0x1e0>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc5a:	4b67      	ldr	r3, [pc, #412]	; (800cdf8 <tcp_listen_input+0x1e4>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc5e:	885b      	ldrh	r3, [r3, #2]
 800cc60:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc62:	4a65      	ldr	r2, [pc, #404]	; (800cdf8 <tcp_listen_input+0x1e4>)
 800cc64:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc66:	8812      	ldrh	r2, [r2, #0]
 800cc68:	b292      	uxth	r2, r2
 800cc6a:	9202      	str	r2, [sp, #8]
 800cc6c:	9301      	str	r3, [sp, #4]
 800cc6e:	4b63      	ldr	r3, [pc, #396]	; (800cdfc <tcp_listen_input+0x1e8>)
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	4b63      	ldr	r3, [pc, #396]	; (800ce00 <tcp_listen_input+0x1ec>)
 800cc74:	4602      	mov	r2, r0
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f002 ff80 	bl	800fb7c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800cc7c:	e0a9      	b.n	800cdd2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800cc7e:	4b57      	ldr	r3, [pc, #348]	; (800cddc <tcp_listen_input+0x1c8>)
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	f003 0302 	and.w	r3, r3, #2
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f000 80a3 	beq.w	800cdd2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	7d5b      	ldrb	r3, [r3, #21]
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7ff f927 	bl	800bee4 <tcp_alloc>
 800cc96:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d111      	bne.n	800ccc2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	699b      	ldr	r3, [r3, #24]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00a      	beq.n	800ccbc <tcp_listen_input+0xa8>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	6910      	ldr	r0, [r2, #16]
 800ccae:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	4798      	blx	r3
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	73bb      	strb	r3, [r7, #14]
      return;
 800ccba:	e08b      	b.n	800cdd4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ccbc:	23f0      	movs	r3, #240	; 0xf0
 800ccbe:	73bb      	strb	r3, [r7, #14]
      return;
 800ccc0:	e088      	b.n	800cdd4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ccc2:	4b50      	ldr	r3, [pc, #320]	; (800ce04 <tcp_listen_input+0x1f0>)
 800ccc4:	695a      	ldr	r2, [r3, #20]
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ccca:	4b4e      	ldr	r3, [pc, #312]	; (800ce04 <tcp_listen_input+0x1f0>)
 800cccc:	691a      	ldr	r2, [r3, #16]
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	8ada      	ldrh	r2, [r3, #22]
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ccda:	4b47      	ldr	r3, [pc, #284]	; (800cdf8 <tcp_listen_input+0x1e4>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	881b      	ldrh	r3, [r3, #0]
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	2203      	movs	r2, #3
 800ccea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ccec:	4b41      	ldr	r3, [pc, #260]	; (800cdf4 <tcp_listen_input+0x1e0>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	1c5a      	adds	r2, r3, #1
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ccfe:	6978      	ldr	r0, [r7, #20]
 800cd00:	f7ff fa58 	bl	800c1b4 <tcp_next_iss>
 800cd04:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	693a      	ldr	r2, [r7, #16]
 800cd0a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	693a      	ldr	r2, [r7, #16]
 800cd10:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	693a      	ldr	r2, [r7, #16]
 800cd16:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	693a      	ldr	r2, [r7, #16]
 800cd1c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cd1e:	4b35      	ldr	r3, [pc, #212]	; (800cdf4 <tcp_listen_input+0x1e0>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	1e5a      	subs	r2, r3, #1
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	691a      	ldr	r2, [r3, #16]
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	7a5b      	ldrb	r3, [r3, #9]
 800cd3a:	f003 030c 	and.w	r3, r3, #12
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	7a1a      	ldrb	r2, [r3, #8]
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cd4c:	4b2e      	ldr	r3, [pc, #184]	; (800ce08 <tcp_listen_input+0x1f4>)
 800cd4e:	681a      	ldr	r2, [r3, #0]
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	60da      	str	r2, [r3, #12]
 800cd54:	4a2c      	ldr	r2, [pc, #176]	; (800ce08 <tcp_listen_input+0x1f4>)
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	6013      	str	r3, [r2, #0]
 800cd5a:	f003 f8d1 	bl	800ff00 <tcp_timer_needed>
 800cd5e:	4b2b      	ldr	r3, [pc, #172]	; (800ce0c <tcp_listen_input+0x1f8>)
 800cd60:	2201      	movs	r2, #1
 800cd62:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cd64:	6978      	ldr	r0, [r7, #20]
 800cd66:	f001 fd8f 	bl	800e888 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cd6a:	4b23      	ldr	r3, [pc, #140]	; (800cdf8 <tcp_listen_input+0x1e4>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	89db      	ldrh	r3, [r3, #14]
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	3304      	adds	r3, #4
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f005 f84f 	bl	8011e30 <ip4_route>
 800cd92:	4601      	mov	r1, r0
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	3304      	adds	r3, #4
 800cd98:	461a      	mov	r2, r3
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f7ff fa30 	bl	800c200 <tcp_eff_send_mss_netif>
 800cda0:	4603      	mov	r3, r0
 800cda2:	461a      	mov	r2, r3
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cda8:	2112      	movs	r1, #18
 800cdaa:	6978      	ldr	r0, [r7, #20]
 800cdac:	f002 f844 	bl	800ee38 <tcp_enqueue_flags>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cdb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d004      	beq.n	800cdc6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	6978      	ldr	r0, [r7, #20]
 800cdc0:	f7fe f97e 	bl	800b0c0 <tcp_abandon>
      return;
 800cdc4:	e006      	b.n	800cdd4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800cdc6:	6978      	ldr	r0, [r7, #20]
 800cdc8:	f002 f924 	bl	800f014 <tcp_output>
  return;
 800cdcc:	e001      	b.n	800cdd2 <tcp_listen_input+0x1be>
    return;
 800cdce:	bf00      	nop
 800cdd0:	e000      	b.n	800cdd4 <tcp_listen_input+0x1c0>
  return;
 800cdd2:	bf00      	nop
}
 800cdd4:	371c      	adds	r7, #28
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd90      	pop	{r4, r7, pc}
 800cdda:	bf00      	nop
 800cddc:	20008ef8 	.word	0x20008ef8
 800cde0:	08015948 	.word	0x08015948
 800cde4:	08015b40 	.word	0x08015b40
 800cde8:	08015994 	.word	0x08015994
 800cdec:	20008ef0 	.word	0x20008ef0
 800cdf0:	20008ef6 	.word	0x20008ef6
 800cdf4:	20008eec 	.word	0x20008eec
 800cdf8:	20008edc 	.word	0x20008edc
 800cdfc:	20003794 	.word	0x20003794
 800ce00:	20003798 	.word	0x20003798
 800ce04:	20003784 	.word	0x20003784
 800ce08:	20008ec0 	.word	0x20008ec0
 800ce0c:	20008ec8 	.word	0x20008ec8

0800ce10 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af04      	add	r7, sp, #16
 800ce16:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ce18:	4b2f      	ldr	r3, [pc, #188]	; (800ced8 <tcp_timewait_input+0xc8>)
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	f003 0304 	and.w	r3, r3, #4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d153      	bne.n	800cecc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d106      	bne.n	800ce38 <tcp_timewait_input+0x28>
 800ce2a:	4b2c      	ldr	r3, [pc, #176]	; (800cedc <tcp_timewait_input+0xcc>)
 800ce2c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ce30:	492b      	ldr	r1, [pc, #172]	; (800cee0 <tcp_timewait_input+0xd0>)
 800ce32:	482c      	ldr	r0, [pc, #176]	; (800cee4 <tcp_timewait_input+0xd4>)
 800ce34:	f006 fa4c 	bl	80132d0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ce38:	4b27      	ldr	r3, [pc, #156]	; (800ced8 <tcp_timewait_input+0xc8>)
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	f003 0302 	and.w	r3, r3, #2
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d02a      	beq.n	800ce9a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ce44:	4b28      	ldr	r3, [pc, #160]	; (800cee8 <tcp_timewait_input+0xd8>)
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4c:	1ad3      	subs	r3, r2, r3
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	db2d      	blt.n	800ceae <tcp_timewait_input+0x9e>
 800ce52:	4b25      	ldr	r3, [pc, #148]	; (800cee8 <tcp_timewait_input+0xd8>)
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5a:	6879      	ldr	r1, [r7, #4]
 800ce5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ce5e:	440b      	add	r3, r1
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	dc23      	bgt.n	800ceae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce66:	4b21      	ldr	r3, [pc, #132]	; (800ceec <tcp_timewait_input+0xdc>)
 800ce68:	6819      	ldr	r1, [r3, #0]
 800ce6a:	4b21      	ldr	r3, [pc, #132]	; (800cef0 <tcp_timewait_input+0xe0>)
 800ce6c:	881b      	ldrh	r3, [r3, #0]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	4b1d      	ldr	r3, [pc, #116]	; (800cee8 <tcp_timewait_input+0xd8>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce76:	4b1f      	ldr	r3, [pc, #124]	; (800cef4 <tcp_timewait_input+0xe4>)
 800ce78:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce7a:	885b      	ldrh	r3, [r3, #2]
 800ce7c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce7e:	4a1d      	ldr	r2, [pc, #116]	; (800cef4 <tcp_timewait_input+0xe4>)
 800ce80:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce82:	8812      	ldrh	r2, [r2, #0]
 800ce84:	b292      	uxth	r2, r2
 800ce86:	9202      	str	r2, [sp, #8]
 800ce88:	9301      	str	r3, [sp, #4]
 800ce8a:	4b1b      	ldr	r3, [pc, #108]	; (800cef8 <tcp_timewait_input+0xe8>)
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	4b1b      	ldr	r3, [pc, #108]	; (800cefc <tcp_timewait_input+0xec>)
 800ce90:	4602      	mov	r2, r0
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f002 fe72 	bl	800fb7c <tcp_rst>
      return;
 800ce98:	e01b      	b.n	800ced2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ce9a:	4b0f      	ldr	r3, [pc, #60]	; (800ced8 <tcp_timewait_input+0xc8>)
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	f003 0301 	and.w	r3, r3, #1
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d003      	beq.n	800ceae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cea6:	4b16      	ldr	r3, [pc, #88]	; (800cf00 <tcp_timewait_input+0xf0>)
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ceae:	4b10      	ldr	r3, [pc, #64]	; (800cef0 <tcp_timewait_input+0xe0>)
 800ceb0:	881b      	ldrh	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00c      	beq.n	800ced0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	8b5b      	ldrh	r3, [r3, #26]
 800ceba:	f043 0302 	orr.w	r3, r3, #2
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f002 f8a5 	bl	800f014 <tcp_output>
  }
  return;
 800ceca:	e001      	b.n	800ced0 <tcp_timewait_input+0xc0>
    return;
 800cecc:	bf00      	nop
 800cece:	e000      	b.n	800ced2 <tcp_timewait_input+0xc2>
  return;
 800ced0:	bf00      	nop
}
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	20008ef8 	.word	0x20008ef8
 800cedc:	08015948 	.word	0x08015948
 800cee0:	08015b60 	.word	0x08015b60
 800cee4:	08015994 	.word	0x08015994
 800cee8:	20008eec 	.word	0x20008eec
 800ceec:	20008ef0 	.word	0x20008ef0
 800cef0:	20008ef6 	.word	0x20008ef6
 800cef4:	20008edc 	.word	0x20008edc
 800cef8:	20003794 	.word	0x20003794
 800cefc:	20003798 	.word	0x20003798
 800cf00:	20008eb4 	.word	0x20008eb4

0800cf04 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cf04:	b590      	push	{r4, r7, lr}
 800cf06:	b08d      	sub	sp, #52	; 0x34
 800cf08:	af04      	add	r7, sp, #16
 800cf0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cf10:	2300      	movs	r3, #0
 800cf12:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d106      	bne.n	800cf28 <tcp_process+0x24>
 800cf1a:	4b9d      	ldr	r3, [pc, #628]	; (800d190 <tcp_process+0x28c>)
 800cf1c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800cf20:	499c      	ldr	r1, [pc, #624]	; (800d194 <tcp_process+0x290>)
 800cf22:	489d      	ldr	r0, [pc, #628]	; (800d198 <tcp_process+0x294>)
 800cf24:	f006 f9d4 	bl	80132d0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cf28:	4b9c      	ldr	r3, [pc, #624]	; (800d19c <tcp_process+0x298>)
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	f003 0304 	and.w	r3, r3, #4
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d04e      	beq.n	800cfd2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	7d1b      	ldrb	r3, [r3, #20]
 800cf38:	2b02      	cmp	r3, #2
 800cf3a:	d108      	bne.n	800cf4e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cf40:	4b97      	ldr	r3, [pc, #604]	; (800d1a0 <tcp_process+0x29c>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d123      	bne.n	800cf90 <tcp_process+0x8c>
        acceptable = 1;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	76fb      	strb	r3, [r7, #27]
 800cf4c:	e020      	b.n	800cf90 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf52:	4b94      	ldr	r3, [pc, #592]	; (800d1a4 <tcp_process+0x2a0>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d102      	bne.n	800cf60 <tcp_process+0x5c>
        acceptable = 1;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	76fb      	strb	r3, [r7, #27]
 800cf5e:	e017      	b.n	800cf90 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cf60:	4b90      	ldr	r3, [pc, #576]	; (800d1a4 <tcp_process+0x2a0>)
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	db10      	blt.n	800cf90 <tcp_process+0x8c>
 800cf6e:	4b8d      	ldr	r3, [pc, #564]	; (800d1a4 <tcp_process+0x2a0>)
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf76:	6879      	ldr	r1, [r7, #4]
 800cf78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cf7a:	440b      	add	r3, r1
 800cf7c:	1ad3      	subs	r3, r2, r3
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	dc06      	bgt.n	800cf90 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	8b5b      	ldrh	r3, [r3, #26]
 800cf86:	f043 0302 	orr.w	r3, r3, #2
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800cf90:	7efb      	ldrb	r3, [r7, #27]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d01b      	beq.n	800cfce <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	7d1b      	ldrb	r3, [r3, #20]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d106      	bne.n	800cfac <tcp_process+0xa8>
 800cf9e:	4b7c      	ldr	r3, [pc, #496]	; (800d190 <tcp_process+0x28c>)
 800cfa0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800cfa4:	4980      	ldr	r1, [pc, #512]	; (800d1a8 <tcp_process+0x2a4>)
 800cfa6:	487c      	ldr	r0, [pc, #496]	; (800d198 <tcp_process+0x294>)
 800cfa8:	f006 f992 	bl	80132d0 <iprintf>
      recv_flags |= TF_RESET;
 800cfac:	4b7f      	ldr	r3, [pc, #508]	; (800d1ac <tcp_process+0x2a8>)
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	f043 0308 	orr.w	r3, r3, #8
 800cfb4:	b2da      	uxtb	r2, r3
 800cfb6:	4b7d      	ldr	r3, [pc, #500]	; (800d1ac <tcp_process+0x2a8>)
 800cfb8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	8b5b      	ldrh	r3, [r3, #26]
 800cfbe:	f023 0301 	bic.w	r3, r3, #1
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800cfc8:	f06f 030d 	mvn.w	r3, #13
 800cfcc:	e37a      	b.n	800d6c4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	e378      	b.n	800d6c4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cfd2:	4b72      	ldr	r3, [pc, #456]	; (800d19c <tcp_process+0x298>)
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	f003 0302 	and.w	r3, r3, #2
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d010      	beq.n	800d000 <tcp_process+0xfc>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	7d1b      	ldrb	r3, [r3, #20]
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	d00c      	beq.n	800d000 <tcp_process+0xfc>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	7d1b      	ldrb	r3, [r3, #20]
 800cfea:	2b03      	cmp	r3, #3
 800cfec:	d008      	beq.n	800d000 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	8b5b      	ldrh	r3, [r3, #26]
 800cff2:	f043 0302 	orr.w	r3, r3, #2
 800cff6:	b29a      	uxth	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800cffc:	2300      	movs	r3, #0
 800cffe:	e361      	b.n	800d6c4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	8b5b      	ldrh	r3, [r3, #26]
 800d004:	f003 0310 	and.w	r3, r3, #16
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d103      	bne.n	800d014 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d00c:	4b68      	ldr	r3, [pc, #416]	; (800d1b0 <tcp_process+0x2ac>)
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f001 fc2f 	bl	800e888 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	7d1b      	ldrb	r3, [r3, #20]
 800d02e:	3b02      	subs	r3, #2
 800d030:	2b07      	cmp	r3, #7
 800d032:	f200 8337 	bhi.w	800d6a4 <tcp_process+0x7a0>
 800d036:	a201      	add	r2, pc, #4	; (adr r2, 800d03c <tcp_process+0x138>)
 800d038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d03c:	0800d05d 	.word	0x0800d05d
 800d040:	0800d28d 	.word	0x0800d28d
 800d044:	0800d405 	.word	0x0800d405
 800d048:	0800d42f 	.word	0x0800d42f
 800d04c:	0800d553 	.word	0x0800d553
 800d050:	0800d405 	.word	0x0800d405
 800d054:	0800d5df 	.word	0x0800d5df
 800d058:	0800d66f 	.word	0x0800d66f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d05c:	4b4f      	ldr	r3, [pc, #316]	; (800d19c <tcp_process+0x298>)
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	f003 0310 	and.w	r3, r3, #16
 800d064:	2b00      	cmp	r3, #0
 800d066:	f000 80e4 	beq.w	800d232 <tcp_process+0x32e>
 800d06a:	4b4c      	ldr	r3, [pc, #304]	; (800d19c <tcp_process+0x298>)
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	f003 0302 	and.w	r3, r3, #2
 800d072:	2b00      	cmp	r3, #0
 800d074:	f000 80dd 	beq.w	800d232 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d07c:	1c5a      	adds	r2, r3, #1
 800d07e:	4b48      	ldr	r3, [pc, #288]	; (800d1a0 <tcp_process+0x29c>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	429a      	cmp	r2, r3
 800d084:	f040 80d5 	bne.w	800d232 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d088:	4b46      	ldr	r3, [pc, #280]	; (800d1a4 <tcp_process+0x2a0>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	1c5a      	adds	r2, r3, #1
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d09a:	4b41      	ldr	r3, [pc, #260]	; (800d1a0 <tcp_process+0x29c>)
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d0a2:	4b44      	ldr	r3, [pc, #272]	; (800d1b4 <tcp_process+0x2b0>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	89db      	ldrh	r3, [r3, #14]
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d0bc:	4b39      	ldr	r3, [pc, #228]	; (800d1a4 <tcp_process+0x2a0>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	1e5a      	subs	r2, r3, #1
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2204      	movs	r2, #4
 800d0ca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f004 feab 	bl	8011e30 <ip4_route>
 800d0da:	4601      	mov	r1, r0
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	3304      	adds	r3, #4
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	f7ff f88c 	bl	800c200 <tcp_eff_send_mss_netif>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0f4:	009a      	lsls	r2, r3, #2
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0fa:	005b      	lsls	r3, r3, #1
 800d0fc:	f241 111c 	movw	r1, #4380	; 0x111c
 800d100:	428b      	cmp	r3, r1
 800d102:	bf38      	it	cc
 800d104:	460b      	movcc	r3, r1
 800d106:	429a      	cmp	r2, r3
 800d108:	d204      	bcs.n	800d114 <tcp_process+0x210>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	b29b      	uxth	r3, r3
 800d112:	e00d      	b.n	800d130 <tcp_process+0x22c>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d118:	005b      	lsls	r3, r3, #1
 800d11a:	f241 121c 	movw	r2, #4380	; 0x111c
 800d11e:	4293      	cmp	r3, r2
 800d120:	d904      	bls.n	800d12c <tcp_process+0x228>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	b29b      	uxth	r3, r3
 800d12a:	e001      	b.n	800d130 <tcp_process+0x22c>
 800d12c:	f241 131c 	movw	r3, #4380	; 0x111c
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d106      	bne.n	800d14e <tcp_process+0x24a>
 800d140:	4b13      	ldr	r3, [pc, #76]	; (800d190 <tcp_process+0x28c>)
 800d142:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d146:	491c      	ldr	r1, [pc, #112]	; (800d1b8 <tcp_process+0x2b4>)
 800d148:	4813      	ldr	r0, [pc, #76]	; (800d198 <tcp_process+0x294>)
 800d14a:	f006 f8c1 	bl	80132d0 <iprintf>
        --pcb->snd_queuelen;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d154:	3b01      	subs	r3, #1
 800d156:	b29a      	uxth	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d162:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d12a      	bne.n	800d1c0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d16e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d170:	69fb      	ldr	r3, [r7, #28]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d106      	bne.n	800d184 <tcp_process+0x280>
 800d176:	4b06      	ldr	r3, [pc, #24]	; (800d190 <tcp_process+0x28c>)
 800d178:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d17c:	490f      	ldr	r1, [pc, #60]	; (800d1bc <tcp_process+0x2b8>)
 800d17e:	4806      	ldr	r0, [pc, #24]	; (800d198 <tcp_process+0x294>)
 800d180:	f006 f8a6 	bl	80132d0 <iprintf>
          pcb->unsent = rseg->next;
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	66da      	str	r2, [r3, #108]	; 0x6c
 800d18c:	e01c      	b.n	800d1c8 <tcp_process+0x2c4>
 800d18e:	bf00      	nop
 800d190:	08015948 	.word	0x08015948
 800d194:	08015b80 	.word	0x08015b80
 800d198:	08015994 	.word	0x08015994
 800d19c:	20008ef8 	.word	0x20008ef8
 800d1a0:	20008ef0 	.word	0x20008ef0
 800d1a4:	20008eec 	.word	0x20008eec
 800d1a8:	08015b9c 	.word	0x08015b9c
 800d1ac:	20008ef9 	.word	0x20008ef9
 800d1b0:	20008eb4 	.word	0x20008eb4
 800d1b4:	20008edc 	.word	0x20008edc
 800d1b8:	08015bbc 	.word	0x08015bbc
 800d1bc:	08015bd4 	.word	0x08015bd4
        } else {
          pcb->unacked = rseg->next;
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d1c8:	69f8      	ldr	r0, [r7, #28]
 800d1ca:	f7fe fd22 	bl	800bc12 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d104      	bne.n	800d1e0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1dc:	861a      	strh	r2, [r3, #48]	; 0x30
 800d1de:	e006      	b.n	800d1ee <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d00a      	beq.n	800d20e <tcp_process+0x30a>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	6910      	ldr	r0, [r2, #16]
 800d202:	2200      	movs	r2, #0
 800d204:	6879      	ldr	r1, [r7, #4]
 800d206:	4798      	blx	r3
 800d208:	4603      	mov	r3, r0
 800d20a:	76bb      	strb	r3, [r7, #26]
 800d20c:	e001      	b.n	800d212 <tcp_process+0x30e>
 800d20e:	2300      	movs	r3, #0
 800d210:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d212:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d216:	f113 0f0d 	cmn.w	r3, #13
 800d21a:	d102      	bne.n	800d222 <tcp_process+0x31e>
          return ERR_ABRT;
 800d21c:	f06f 030c 	mvn.w	r3, #12
 800d220:	e250      	b.n	800d6c4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	8b5b      	ldrh	r3, [r3, #26]
 800d226:	f043 0302 	orr.w	r3, r3, #2
 800d22a:	b29a      	uxth	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d230:	e23a      	b.n	800d6a8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d232:	4b98      	ldr	r3, [pc, #608]	; (800d494 <tcp_process+0x590>)
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	f003 0310 	and.w	r3, r3, #16
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	f000 8234 	beq.w	800d6a8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d240:	4b95      	ldr	r3, [pc, #596]	; (800d498 <tcp_process+0x594>)
 800d242:	6819      	ldr	r1, [r3, #0]
 800d244:	4b95      	ldr	r3, [pc, #596]	; (800d49c <tcp_process+0x598>)
 800d246:	881b      	ldrh	r3, [r3, #0]
 800d248:	461a      	mov	r2, r3
 800d24a:	4b95      	ldr	r3, [pc, #596]	; (800d4a0 <tcp_process+0x59c>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d250:	4b94      	ldr	r3, [pc, #592]	; (800d4a4 <tcp_process+0x5a0>)
 800d252:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d254:	885b      	ldrh	r3, [r3, #2]
 800d256:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d258:	4a92      	ldr	r2, [pc, #584]	; (800d4a4 <tcp_process+0x5a0>)
 800d25a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d25c:	8812      	ldrh	r2, [r2, #0]
 800d25e:	b292      	uxth	r2, r2
 800d260:	9202      	str	r2, [sp, #8]
 800d262:	9301      	str	r3, [sp, #4]
 800d264:	4b90      	ldr	r3, [pc, #576]	; (800d4a8 <tcp_process+0x5a4>)
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	4b90      	ldr	r3, [pc, #576]	; (800d4ac <tcp_process+0x5a8>)
 800d26a:	4602      	mov	r2, r0
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f002 fc85 	bl	800fb7c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d278:	2b05      	cmp	r3, #5
 800d27a:	f200 8215 	bhi.w	800d6a8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f002 fa4f 	bl	800f728 <tcp_rexmit_rto>
      break;
 800d28a:	e20d      	b.n	800d6a8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d28c:	4b81      	ldr	r3, [pc, #516]	; (800d494 <tcp_process+0x590>)
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	f003 0310 	and.w	r3, r3, #16
 800d294:	2b00      	cmp	r3, #0
 800d296:	f000 80a1 	beq.w	800d3dc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d29a:	4b7f      	ldr	r3, [pc, #508]	; (800d498 <tcp_process+0x594>)
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2a2:	1ad3      	subs	r3, r2, r3
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	db7e      	blt.n	800d3a8 <tcp_process+0x4a4>
 800d2aa:	4b7b      	ldr	r3, [pc, #492]	; (800d498 <tcp_process+0x594>)
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2b2:	1ad3      	subs	r3, r2, r3
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	dc77      	bgt.n	800d3a8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2204      	movs	r2, #4
 800d2bc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d102      	bne.n	800d2cc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d2c6:	23fa      	movs	r3, #250	; 0xfa
 800d2c8:	76bb      	strb	r3, [r7, #26]
 800d2ca:	e01d      	b.n	800d308 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2d0:	699b      	ldr	r3, [r3, #24]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d106      	bne.n	800d2e4 <tcp_process+0x3e0>
 800d2d6:	4b76      	ldr	r3, [pc, #472]	; (800d4b0 <tcp_process+0x5ac>)
 800d2d8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d2dc:	4975      	ldr	r1, [pc, #468]	; (800d4b4 <tcp_process+0x5b0>)
 800d2de:	4876      	ldr	r0, [pc, #472]	; (800d4b8 <tcp_process+0x5b4>)
 800d2e0:	f005 fff6 	bl	80132d0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2e8:	699b      	ldr	r3, [r3, #24]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00a      	beq.n	800d304 <tcp_process+0x400>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2f2:	699b      	ldr	r3, [r3, #24]
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	6910      	ldr	r0, [r2, #16]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	6879      	ldr	r1, [r7, #4]
 800d2fc:	4798      	blx	r3
 800d2fe:	4603      	mov	r3, r0
 800d300:	76bb      	strb	r3, [r7, #26]
 800d302:	e001      	b.n	800d308 <tcp_process+0x404>
 800d304:	23f0      	movs	r3, #240	; 0xf0
 800d306:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d308:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d00a      	beq.n	800d326 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d310:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d314:	f113 0f0d 	cmn.w	r3, #13
 800d318:	d002      	beq.n	800d320 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f7fd ff8e 	bl	800b23c <tcp_abort>
            }
            return ERR_ABRT;
 800d320:	f06f 030c 	mvn.w	r3, #12
 800d324:	e1ce      	b.n	800d6c4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 fae0 	bl	800d8ec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d32c:	4b63      	ldr	r3, [pc, #396]	; (800d4bc <tcp_process+0x5b8>)
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d005      	beq.n	800d340 <tcp_process+0x43c>
            recv_acked--;
 800d334:	4b61      	ldr	r3, [pc, #388]	; (800d4bc <tcp_process+0x5b8>)
 800d336:	881b      	ldrh	r3, [r3, #0]
 800d338:	3b01      	subs	r3, #1
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	4b5f      	ldr	r3, [pc, #380]	; (800d4bc <tcp_process+0x5b8>)
 800d33e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d344:	009a      	lsls	r2, r3, #2
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d34a:	005b      	lsls	r3, r3, #1
 800d34c:	f241 111c 	movw	r1, #4380	; 0x111c
 800d350:	428b      	cmp	r3, r1
 800d352:	bf38      	it	cc
 800d354:	460b      	movcc	r3, r1
 800d356:	429a      	cmp	r2, r3
 800d358:	d204      	bcs.n	800d364 <tcp_process+0x460>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	b29b      	uxth	r3, r3
 800d362:	e00d      	b.n	800d380 <tcp_process+0x47c>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d368:	005b      	lsls	r3, r3, #1
 800d36a:	f241 121c 	movw	r2, #4380	; 0x111c
 800d36e:	4293      	cmp	r3, r2
 800d370:	d904      	bls.n	800d37c <tcp_process+0x478>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d376:	005b      	lsls	r3, r3, #1
 800d378:	b29b      	uxth	r3, r3
 800d37a:	e001      	b.n	800d380 <tcp_process+0x47c>
 800d37c:	f241 131c 	movw	r3, #4380	; 0x111c
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d386:	4b4e      	ldr	r3, [pc, #312]	; (800d4c0 <tcp_process+0x5bc>)
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	f003 0320 	and.w	r3, r3, #32
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d037      	beq.n	800d402 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	8b5b      	ldrh	r3, [r3, #26]
 800d396:	f043 0302 	orr.w	r3, r3, #2
 800d39a:	b29a      	uxth	r2, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2207      	movs	r2, #7
 800d3a4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d3a6:	e02c      	b.n	800d402 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3a8:	4b3b      	ldr	r3, [pc, #236]	; (800d498 <tcp_process+0x594>)
 800d3aa:	6819      	ldr	r1, [r3, #0]
 800d3ac:	4b3b      	ldr	r3, [pc, #236]	; (800d49c <tcp_process+0x598>)
 800d3ae:	881b      	ldrh	r3, [r3, #0]
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	4b3b      	ldr	r3, [pc, #236]	; (800d4a0 <tcp_process+0x59c>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3b8:	4b3a      	ldr	r3, [pc, #232]	; (800d4a4 <tcp_process+0x5a0>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3bc:	885b      	ldrh	r3, [r3, #2]
 800d3be:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3c0:	4a38      	ldr	r2, [pc, #224]	; (800d4a4 <tcp_process+0x5a0>)
 800d3c2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3c4:	8812      	ldrh	r2, [r2, #0]
 800d3c6:	b292      	uxth	r2, r2
 800d3c8:	9202      	str	r2, [sp, #8]
 800d3ca:	9301      	str	r3, [sp, #4]
 800d3cc:	4b36      	ldr	r3, [pc, #216]	; (800d4a8 <tcp_process+0x5a4>)
 800d3ce:	9300      	str	r3, [sp, #0]
 800d3d0:	4b36      	ldr	r3, [pc, #216]	; (800d4ac <tcp_process+0x5a8>)
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f002 fbd1 	bl	800fb7c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d3da:	e167      	b.n	800d6ac <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d3dc:	4b2d      	ldr	r3, [pc, #180]	; (800d494 <tcp_process+0x590>)
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	f003 0302 	and.w	r3, r3, #2
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f000 8161 	beq.w	800d6ac <tcp_process+0x7a8>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ee:	1e5a      	subs	r2, r3, #1
 800d3f0:	4b2b      	ldr	r3, [pc, #172]	; (800d4a0 <tcp_process+0x59c>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	f040 8159 	bne.w	800d6ac <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f002 f9b6 	bl	800f76c <tcp_rexmit>
      break;
 800d400:	e154      	b.n	800d6ac <tcp_process+0x7a8>
 800d402:	e153      	b.n	800d6ac <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 fa71 	bl	800d8ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d40a:	4b2d      	ldr	r3, [pc, #180]	; (800d4c0 <tcp_process+0x5bc>)
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	f003 0320 	and.w	r3, r3, #32
 800d412:	2b00      	cmp	r3, #0
 800d414:	f000 814c 	beq.w	800d6b0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	8b5b      	ldrh	r3, [r3, #26]
 800d41c:	f043 0302 	orr.w	r3, r3, #2
 800d420:	b29a      	uxth	r2, r3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2207      	movs	r2, #7
 800d42a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d42c:	e140      	b.n	800d6b0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 fa5c 	bl	800d8ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d434:	4b22      	ldr	r3, [pc, #136]	; (800d4c0 <tcp_process+0x5bc>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	f003 0320 	and.w	r3, r3, #32
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d071      	beq.n	800d524 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d440:	4b14      	ldr	r3, [pc, #80]	; (800d494 <tcp_process+0x590>)
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	f003 0310 	and.w	r3, r3, #16
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d060      	beq.n	800d50e <tcp_process+0x60a>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d450:	4b11      	ldr	r3, [pc, #68]	; (800d498 <tcp_process+0x594>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	429a      	cmp	r2, r3
 800d456:	d15a      	bne.n	800d50e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d156      	bne.n	800d50e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	8b5b      	ldrh	r3, [r3, #26]
 800d464:	f043 0302 	orr.w	r3, r3, #2
 800d468:	b29a      	uxth	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f7fe fdbc 	bl	800bfec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d474:	4b13      	ldr	r3, [pc, #76]	; (800d4c4 <tcp_process+0x5c0>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d105      	bne.n	800d48a <tcp_process+0x586>
 800d47e:	4b11      	ldr	r3, [pc, #68]	; (800d4c4 <tcp_process+0x5c0>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	4a0f      	ldr	r2, [pc, #60]	; (800d4c4 <tcp_process+0x5c0>)
 800d486:	6013      	str	r3, [r2, #0]
 800d488:	e02e      	b.n	800d4e8 <tcp_process+0x5e4>
 800d48a:	4b0e      	ldr	r3, [pc, #56]	; (800d4c4 <tcp_process+0x5c0>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	617b      	str	r3, [r7, #20]
 800d490:	e027      	b.n	800d4e2 <tcp_process+0x5de>
 800d492:	bf00      	nop
 800d494:	20008ef8 	.word	0x20008ef8
 800d498:	20008ef0 	.word	0x20008ef0
 800d49c:	20008ef6 	.word	0x20008ef6
 800d4a0:	20008eec 	.word	0x20008eec
 800d4a4:	20008edc 	.word	0x20008edc
 800d4a8:	20003794 	.word	0x20003794
 800d4ac:	20003798 	.word	0x20003798
 800d4b0:	08015948 	.word	0x08015948
 800d4b4:	08015be8 	.word	0x08015be8
 800d4b8:	08015994 	.word	0x08015994
 800d4bc:	20008ef4 	.word	0x20008ef4
 800d4c0:	20008ef9 	.word	0x20008ef9
 800d4c4:	20008ec0 	.word	0x20008ec0
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d104      	bne.n	800d4dc <tcp_process+0x5d8>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	68da      	ldr	r2, [r3, #12]
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	60da      	str	r2, [r3, #12]
 800d4da:	e005      	b.n	800d4e8 <tcp_process+0x5e4>
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	617b      	str	r3, [r7, #20]
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1ef      	bne.n	800d4c8 <tcp_process+0x5c4>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	60da      	str	r2, [r3, #12]
 800d4ee:	4b77      	ldr	r3, [pc, #476]	; (800d6cc <tcp_process+0x7c8>)
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	220a      	movs	r2, #10
 800d4f8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d4fa:	4b75      	ldr	r3, [pc, #468]	; (800d6d0 <tcp_process+0x7cc>)
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	60da      	str	r2, [r3, #12]
 800d502:	4a73      	ldr	r2, [pc, #460]	; (800d6d0 <tcp_process+0x7cc>)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6013      	str	r3, [r2, #0]
 800d508:	f002 fcfa 	bl	800ff00 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d50c:	e0d2      	b.n	800d6b4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	8b5b      	ldrh	r3, [r3, #26]
 800d512:	f043 0302 	orr.w	r3, r3, #2
 800d516:	b29a      	uxth	r2, r3
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2208      	movs	r2, #8
 800d520:	751a      	strb	r2, [r3, #20]
      break;
 800d522:	e0c7      	b.n	800d6b4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d524:	4b6b      	ldr	r3, [pc, #428]	; (800d6d4 <tcp_process+0x7d0>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	f003 0310 	and.w	r3, r3, #16
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 80c1 	beq.w	800d6b4 <tcp_process+0x7b0>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d536:	4b68      	ldr	r3, [pc, #416]	; (800d6d8 <tcp_process+0x7d4>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	f040 80ba 	bne.w	800d6b4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d544:	2b00      	cmp	r3, #0
 800d546:	f040 80b5 	bne.w	800d6b4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2206      	movs	r2, #6
 800d54e:	751a      	strb	r2, [r3, #20]
      break;
 800d550:	e0b0      	b.n	800d6b4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f9ca 	bl	800d8ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d558:	4b60      	ldr	r3, [pc, #384]	; (800d6dc <tcp_process+0x7d8>)
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	f003 0320 	and.w	r3, r3, #32
 800d560:	2b00      	cmp	r3, #0
 800d562:	f000 80a9 	beq.w	800d6b8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	8b5b      	ldrh	r3, [r3, #26]
 800d56a:	f043 0302 	orr.w	r3, r3, #2
 800d56e:	b29a      	uxth	r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7fe fd39 	bl	800bfec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d57a:	4b59      	ldr	r3, [pc, #356]	; (800d6e0 <tcp_process+0x7dc>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	429a      	cmp	r2, r3
 800d582:	d105      	bne.n	800d590 <tcp_process+0x68c>
 800d584:	4b56      	ldr	r3, [pc, #344]	; (800d6e0 <tcp_process+0x7dc>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	68db      	ldr	r3, [r3, #12]
 800d58a:	4a55      	ldr	r2, [pc, #340]	; (800d6e0 <tcp_process+0x7dc>)
 800d58c:	6013      	str	r3, [r2, #0]
 800d58e:	e013      	b.n	800d5b8 <tcp_process+0x6b4>
 800d590:	4b53      	ldr	r3, [pc, #332]	; (800d6e0 <tcp_process+0x7dc>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	613b      	str	r3, [r7, #16]
 800d596:	e00c      	b.n	800d5b2 <tcp_process+0x6ae>
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	68db      	ldr	r3, [r3, #12]
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d104      	bne.n	800d5ac <tcp_process+0x6a8>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	68da      	ldr	r2, [r3, #12]
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	60da      	str	r2, [r3, #12]
 800d5aa:	e005      	b.n	800d5b8 <tcp_process+0x6b4>
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	613b      	str	r3, [r7, #16]
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d1ef      	bne.n	800d598 <tcp_process+0x694>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	60da      	str	r2, [r3, #12]
 800d5be:	4b43      	ldr	r3, [pc, #268]	; (800d6cc <tcp_process+0x7c8>)
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	220a      	movs	r2, #10
 800d5c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d5ca:	4b41      	ldr	r3, [pc, #260]	; (800d6d0 <tcp_process+0x7cc>)
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	60da      	str	r2, [r3, #12]
 800d5d2:	4a3f      	ldr	r2, [pc, #252]	; (800d6d0 <tcp_process+0x7cc>)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6013      	str	r3, [r2, #0]
 800d5d8:	f002 fc92 	bl	800ff00 <tcp_timer_needed>
      }
      break;
 800d5dc:	e06c      	b.n	800d6b8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 f984 	bl	800d8ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d5e4:	4b3b      	ldr	r3, [pc, #236]	; (800d6d4 <tcp_process+0x7d0>)
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	f003 0310 	and.w	r3, r3, #16
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d065      	beq.n	800d6bc <tcp_process+0x7b8>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5f4:	4b38      	ldr	r3, [pc, #224]	; (800d6d8 <tcp_process+0x7d4>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d15f      	bne.n	800d6bc <tcp_process+0x7b8>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d600:	2b00      	cmp	r3, #0
 800d602:	d15b      	bne.n	800d6bc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7fe fcf1 	bl	800bfec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d60a:	4b35      	ldr	r3, [pc, #212]	; (800d6e0 <tcp_process+0x7dc>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	429a      	cmp	r2, r3
 800d612:	d105      	bne.n	800d620 <tcp_process+0x71c>
 800d614:	4b32      	ldr	r3, [pc, #200]	; (800d6e0 <tcp_process+0x7dc>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	4a31      	ldr	r2, [pc, #196]	; (800d6e0 <tcp_process+0x7dc>)
 800d61c:	6013      	str	r3, [r2, #0]
 800d61e:	e013      	b.n	800d648 <tcp_process+0x744>
 800d620:	4b2f      	ldr	r3, [pc, #188]	; (800d6e0 <tcp_process+0x7dc>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	60fb      	str	r3, [r7, #12]
 800d626:	e00c      	b.n	800d642 <tcp_process+0x73e>
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d104      	bne.n	800d63c <tcp_process+0x738>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68da      	ldr	r2, [r3, #12]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	60da      	str	r2, [r3, #12]
 800d63a:	e005      	b.n	800d648 <tcp_process+0x744>
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	60fb      	str	r3, [r7, #12]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d1ef      	bne.n	800d628 <tcp_process+0x724>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	60da      	str	r2, [r3, #12]
 800d64e:	4b1f      	ldr	r3, [pc, #124]	; (800d6cc <tcp_process+0x7c8>)
 800d650:	2201      	movs	r2, #1
 800d652:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	220a      	movs	r2, #10
 800d658:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d65a:	4b1d      	ldr	r3, [pc, #116]	; (800d6d0 <tcp_process+0x7cc>)
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	60da      	str	r2, [r3, #12]
 800d662:	4a1b      	ldr	r2, [pc, #108]	; (800d6d0 <tcp_process+0x7cc>)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	f002 fc4a 	bl	800ff00 <tcp_timer_needed>
      }
      break;
 800d66c:	e026      	b.n	800d6bc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 f93c 	bl	800d8ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d674:	4b17      	ldr	r3, [pc, #92]	; (800d6d4 <tcp_process+0x7d0>)
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	f003 0310 	and.w	r3, r3, #16
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d01f      	beq.n	800d6c0 <tcp_process+0x7bc>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d684:	4b14      	ldr	r3, [pc, #80]	; (800d6d8 <tcp_process+0x7d4>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d119      	bne.n	800d6c0 <tcp_process+0x7bc>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d690:	2b00      	cmp	r3, #0
 800d692:	d115      	bne.n	800d6c0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d694:	4b11      	ldr	r3, [pc, #68]	; (800d6dc <tcp_process+0x7d8>)
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	f043 0310 	orr.w	r3, r3, #16
 800d69c:	b2da      	uxtb	r2, r3
 800d69e:	4b0f      	ldr	r3, [pc, #60]	; (800d6dc <tcp_process+0x7d8>)
 800d6a0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d6a2:	e00d      	b.n	800d6c0 <tcp_process+0x7bc>
    default:
      break;
 800d6a4:	bf00      	nop
 800d6a6:	e00c      	b.n	800d6c2 <tcp_process+0x7be>
      break;
 800d6a8:	bf00      	nop
 800d6aa:	e00a      	b.n	800d6c2 <tcp_process+0x7be>
      break;
 800d6ac:	bf00      	nop
 800d6ae:	e008      	b.n	800d6c2 <tcp_process+0x7be>
      break;
 800d6b0:	bf00      	nop
 800d6b2:	e006      	b.n	800d6c2 <tcp_process+0x7be>
      break;
 800d6b4:	bf00      	nop
 800d6b6:	e004      	b.n	800d6c2 <tcp_process+0x7be>
      break;
 800d6b8:	bf00      	nop
 800d6ba:	e002      	b.n	800d6c2 <tcp_process+0x7be>
      break;
 800d6bc:	bf00      	nop
 800d6be:	e000      	b.n	800d6c2 <tcp_process+0x7be>
      break;
 800d6c0:	bf00      	nop
  }
  return ERR_OK;
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3724      	adds	r7, #36	; 0x24
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd90      	pop	{r4, r7, pc}
 800d6cc:	20008ec8 	.word	0x20008ec8
 800d6d0:	20008ec4 	.word	0x20008ec4
 800d6d4:	20008ef8 	.word	0x20008ef8
 800d6d8:	20008ef0 	.word	0x20008ef0
 800d6dc:	20008ef9 	.word	0x20008ef9
 800d6e0:	20008ec0 	.word	0x20008ec0

0800d6e4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d6e4:	b590      	push	{r4, r7, lr}
 800d6e6:	b085      	sub	sp, #20
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d106      	bne.n	800d702 <tcp_oos_insert_segment+0x1e>
 800d6f4:	4b3b      	ldr	r3, [pc, #236]	; (800d7e4 <tcp_oos_insert_segment+0x100>)
 800d6f6:	f240 421f 	movw	r2, #1055	; 0x41f
 800d6fa:	493b      	ldr	r1, [pc, #236]	; (800d7e8 <tcp_oos_insert_segment+0x104>)
 800d6fc:	483b      	ldr	r0, [pc, #236]	; (800d7ec <tcp_oos_insert_segment+0x108>)
 800d6fe:	f005 fde7 	bl	80132d0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	899b      	ldrh	r3, [r3, #12]
 800d708:	b29b      	uxth	r3, r3
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fb fcb8 	bl	8009080 <lwip_htons>
 800d710:	4603      	mov	r3, r0
 800d712:	b2db      	uxtb	r3, r3
 800d714:	f003 0301 	and.w	r3, r3, #1
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d028      	beq.n	800d76e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d71c:	6838      	ldr	r0, [r7, #0]
 800d71e:	f7fe fa63 	bl	800bbe8 <tcp_segs_free>
    next = NULL;
 800d722:	2300      	movs	r3, #0
 800d724:	603b      	str	r3, [r7, #0]
 800d726:	e056      	b.n	800d7d6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	899b      	ldrh	r3, [r3, #12]
 800d72e:	b29b      	uxth	r3, r3
 800d730:	4618      	mov	r0, r3
 800d732:	f7fb fca5 	bl	8009080 <lwip_htons>
 800d736:	4603      	mov	r3, r0
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	f003 0301 	and.w	r3, r3, #1
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00d      	beq.n	800d75e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	899b      	ldrh	r3, [r3, #12]
 800d748:	b29c      	uxth	r4, r3
 800d74a:	2001      	movs	r0, #1
 800d74c:	f7fb fc98 	bl	8009080 <lwip_htons>
 800d750:	4603      	mov	r3, r0
 800d752:	461a      	mov	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	68db      	ldr	r3, [r3, #12]
 800d758:	4322      	orrs	r2, r4
 800d75a:	b292      	uxth	r2, r2
 800d75c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f7fe fa52 	bl	800bc12 <tcp_seg_free>
    while (next &&
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00e      	beq.n	800d792 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	891b      	ldrh	r3, [r3, #8]
 800d778:	461a      	mov	r2, r3
 800d77a:	4b1d      	ldr	r3, [pc, #116]	; (800d7f0 <tcp_oos_insert_segment+0x10c>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	441a      	add	r2, r3
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	6839      	ldr	r1, [r7, #0]
 800d788:	8909      	ldrh	r1, [r1, #8]
 800d78a:	440b      	add	r3, r1
 800d78c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d78e:	2b00      	cmp	r3, #0
 800d790:	daca      	bge.n	800d728 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d01e      	beq.n	800d7d6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	891b      	ldrh	r3, [r3, #8]
 800d79c:	461a      	mov	r2, r3
 800d79e:	4b14      	ldr	r3, [pc, #80]	; (800d7f0 <tcp_oos_insert_segment+0x10c>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	441a      	add	r2, r3
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	dd12      	ble.n	800d7d6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	b29a      	uxth	r2, r3
 800d7b8:	4b0d      	ldr	r3, [pc, #52]	; (800d7f0 <tcp_oos_insert_segment+0x10c>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	1ad3      	subs	r3, r2, r3
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	685a      	ldr	r2, [r3, #4]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	891b      	ldrh	r3, [r3, #8]
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	4610      	mov	r0, r2
 800d7d2:	f7fc fd83 	bl	800a2dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	683a      	ldr	r2, [r7, #0]
 800d7da:	601a      	str	r2, [r3, #0]
}
 800d7dc:	bf00      	nop
 800d7de:	3714      	adds	r7, #20
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd90      	pop	{r4, r7, pc}
 800d7e4:	08015948 	.word	0x08015948
 800d7e8:	08015c08 	.word	0x08015c08
 800d7ec:	08015994 	.word	0x08015994
 800d7f0:	20008eec 	.word	0x20008eec

0800d7f4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d7f4:	b5b0      	push	{r4, r5, r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	607a      	str	r2, [r7, #4]
 800d800:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d802:	e03e      	b.n	800d882 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	4618      	mov	r0, r3
 800d814:	f7fc ff70 	bl	800a6f8 <pbuf_clen>
 800d818:	4603      	mov	r3, r0
 800d81a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d822:	8a7a      	ldrh	r2, [r7, #18]
 800d824:	429a      	cmp	r2, r3
 800d826:	d906      	bls.n	800d836 <tcp_free_acked_segments+0x42>
 800d828:	4b2a      	ldr	r3, [pc, #168]	; (800d8d4 <tcp_free_acked_segments+0xe0>)
 800d82a:	f240 4257 	movw	r2, #1111	; 0x457
 800d82e:	492a      	ldr	r1, [pc, #168]	; (800d8d8 <tcp_free_acked_segments+0xe4>)
 800d830:	482a      	ldr	r0, [pc, #168]	; (800d8dc <tcp_free_acked_segments+0xe8>)
 800d832:	f005 fd4d 	bl	80132d0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d83c:	8a7b      	ldrh	r3, [r7, #18]
 800d83e:	1ad3      	subs	r3, r2, r3
 800d840:	b29a      	uxth	r2, r3
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	891a      	ldrh	r2, [r3, #8]
 800d84c:	4b24      	ldr	r3, [pc, #144]	; (800d8e0 <tcp_free_acked_segments+0xec>)
 800d84e:	881b      	ldrh	r3, [r3, #0]
 800d850:	4413      	add	r3, r2
 800d852:	b29a      	uxth	r2, r3
 800d854:	4b22      	ldr	r3, [pc, #136]	; (800d8e0 <tcp_free_acked_segments+0xec>)
 800d856:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d858:	6978      	ldr	r0, [r7, #20]
 800d85a:	f7fe f9da 	bl	800bc12 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00c      	beq.n	800d882 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d109      	bne.n	800d882 <tcp_free_acked_segments+0x8e>
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d106      	bne.n	800d882 <tcp_free_acked_segments+0x8e>
 800d874:	4b17      	ldr	r3, [pc, #92]	; (800d8d4 <tcp_free_acked_segments+0xe0>)
 800d876:	f240 4261 	movw	r2, #1121	; 0x461
 800d87a:	491a      	ldr	r1, [pc, #104]	; (800d8e4 <tcp_free_acked_segments+0xf0>)
 800d87c:	4817      	ldr	r0, [pc, #92]	; (800d8dc <tcp_free_acked_segments+0xe8>)
 800d87e:	f005 fd27 	bl	80132d0 <iprintf>
  while (seg_list != NULL &&
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d020      	beq.n	800d8ca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fb fc0b 	bl	80090aa <lwip_htonl>
 800d894:	4604      	mov	r4, r0
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	891b      	ldrh	r3, [r3, #8]
 800d89a:	461d      	mov	r5, r3
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	899b      	ldrh	r3, [r3, #12]
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7fb fbeb 	bl	8009080 <lwip_htons>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	f003 0303 	and.w	r3, r3, #3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d001      	beq.n	800d8ba <tcp_free_acked_segments+0xc6>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e000      	b.n	800d8bc <tcp_free_acked_segments+0xc8>
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	442b      	add	r3, r5
 800d8be:	18e2      	adds	r2, r4, r3
 800d8c0:	4b09      	ldr	r3, [pc, #36]	; (800d8e8 <tcp_free_acked_segments+0xf4>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	dd9c      	ble.n	800d804 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d8ca:	68bb      	ldr	r3, [r7, #8]
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3718      	adds	r7, #24
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bdb0      	pop	{r4, r5, r7, pc}
 800d8d4:	08015948 	.word	0x08015948
 800d8d8:	08015c30 	.word	0x08015c30
 800d8dc:	08015994 	.word	0x08015994
 800d8e0:	20008ef4 	.word	0x20008ef4
 800d8e4:	08015c58 	.word	0x08015c58
 800d8e8:	20008ef0 	.word	0x20008ef0

0800d8ec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d8ec:	b5b0      	push	{r4, r5, r7, lr}
 800d8ee:	b094      	sub	sp, #80	; 0x50
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d106      	bne.n	800d90c <tcp_receive+0x20>
 800d8fe:	4b91      	ldr	r3, [pc, #580]	; (800db44 <tcp_receive+0x258>)
 800d900:	f240 427b 	movw	r2, #1147	; 0x47b
 800d904:	4990      	ldr	r1, [pc, #576]	; (800db48 <tcp_receive+0x25c>)
 800d906:	4891      	ldr	r0, [pc, #580]	; (800db4c <tcp_receive+0x260>)
 800d908:	f005 fce2 	bl	80132d0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	7d1b      	ldrb	r3, [r3, #20]
 800d910:	2b03      	cmp	r3, #3
 800d912:	d806      	bhi.n	800d922 <tcp_receive+0x36>
 800d914:	4b8b      	ldr	r3, [pc, #556]	; (800db44 <tcp_receive+0x258>)
 800d916:	f240 427c 	movw	r2, #1148	; 0x47c
 800d91a:	498d      	ldr	r1, [pc, #564]	; (800db50 <tcp_receive+0x264>)
 800d91c:	488b      	ldr	r0, [pc, #556]	; (800db4c <tcp_receive+0x260>)
 800d91e:	f005 fcd7 	bl	80132d0 <iprintf>

  if (flags & TCP_ACK) {
 800d922:	4b8c      	ldr	r3, [pc, #560]	; (800db54 <tcp_receive+0x268>)
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	f003 0310 	and.w	r3, r3, #16
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	f000 8264 	beq.w	800ddf8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d936:	461a      	mov	r2, r3
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d93c:	4413      	add	r3, r2
 800d93e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d944:	4b84      	ldr	r3, [pc, #528]	; (800db58 <tcp_receive+0x26c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	db1b      	blt.n	800d986 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d952:	4b81      	ldr	r3, [pc, #516]	; (800db58 <tcp_receive+0x26c>)
 800d954:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d956:	429a      	cmp	r2, r3
 800d958:	d106      	bne.n	800d968 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d95e:	4b7f      	ldr	r3, [pc, #508]	; (800db5c <tcp_receive+0x270>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	1ad3      	subs	r3, r2, r3
 800d964:	2b00      	cmp	r3, #0
 800d966:	db0e      	blt.n	800d986 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d96c:	4b7b      	ldr	r3, [pc, #492]	; (800db5c <tcp_receive+0x270>)
 800d96e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d970:	429a      	cmp	r2, r3
 800d972:	d125      	bne.n	800d9c0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d974:	4b7a      	ldr	r3, [pc, #488]	; (800db60 <tcp_receive+0x274>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	89db      	ldrh	r3, [r3, #14]
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d982:	429a      	cmp	r2, r3
 800d984:	d91c      	bls.n	800d9c0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d986:	4b76      	ldr	r3, [pc, #472]	; (800db60 <tcp_receive+0x274>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	89db      	ldrh	r3, [r3, #14]
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d205      	bcs.n	800d9b0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d9b0:	4b69      	ldr	r3, [pc, #420]	; (800db58 <tcp_receive+0x26c>)
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d9b8:	4b68      	ldr	r3, [pc, #416]	; (800db5c <tcp_receive+0x270>)
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d9c0:	4b66      	ldr	r3, [pc, #408]	; (800db5c <tcp_receive+0x270>)
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9c8:	1ad3      	subs	r3, r2, r3
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	dc58      	bgt.n	800da80 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d9ce:	4b65      	ldr	r3, [pc, #404]	; (800db64 <tcp_receive+0x278>)
 800d9d0:	881b      	ldrh	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d14b      	bne.n	800da6e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d9e0:	4413      	add	r3, r2
 800d9e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d142      	bne.n	800da6e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	db3d      	blt.n	800da6e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9f6:	4b59      	ldr	r3, [pc, #356]	; (800db5c <tcp_receive+0x270>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d137      	bne.n	800da6e <tcp_receive+0x182>
              found_dupack = 1;
 800d9fe:	2301      	movs	r3, #1
 800da00:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da08:	2bff      	cmp	r3, #255	; 0xff
 800da0a:	d007      	beq.n	800da1c <tcp_receive+0x130>
                ++pcb->dupacks;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da12:	3301      	adds	r3, #1
 800da14:	b2da      	uxtb	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da22:	2b03      	cmp	r3, #3
 800da24:	d91b      	bls.n	800da5e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da30:	4413      	add	r3, r2
 800da32:	b29a      	uxth	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d30a      	bcc.n	800da54 <tcp_receive+0x168>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da48:	4413      	add	r3, r2
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800da52:	e004      	b.n	800da5e <tcp_receive+0x172>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da64:	2b02      	cmp	r3, #2
 800da66:	d902      	bls.n	800da6e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f001 feeb 	bl	800f844 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800da6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da70:	2b00      	cmp	r3, #0
 800da72:	f040 8161 	bne.w	800dd38 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2200      	movs	r2, #0
 800da7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800da7e:	e15b      	b.n	800dd38 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800da80:	4b36      	ldr	r3, [pc, #216]	; (800db5c <tcp_receive+0x270>)
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da88:	1ad3      	subs	r3, r2, r3
 800da8a:	3b01      	subs	r3, #1
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f2c0 814e 	blt.w	800dd2e <tcp_receive+0x442>
 800da92:	4b32      	ldr	r3, [pc, #200]	; (800db5c <tcp_receive+0x270>)
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da9a:	1ad3      	subs	r3, r2, r3
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	f300 8146 	bgt.w	800dd2e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	8b5b      	ldrh	r3, [r3, #26]
 800daa6:	f003 0304 	and.w	r3, r3, #4
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d010      	beq.n	800dad0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	8b5b      	ldrh	r3, [r3, #26]
 800dab2:	f023 0304 	bic.w	r3, r3, #4
 800dab6:	b29a      	uxth	r2, r3
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dade:	10db      	asrs	r3, r3, #3
 800dae0:	b21b      	sxth	r3, r3
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800daea:	b29b      	uxth	r3, r3
 800daec:	4413      	add	r3, r2
 800daee:	b29b      	uxth	r3, r3
 800daf0:	b21a      	sxth	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800daf8:	4b18      	ldr	r3, [pc, #96]	; (800db5c <tcp_receive+0x270>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db02:	b29b      	uxth	r3, r3
 800db04:	1ad3      	subs	r3, r2, r3
 800db06:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800db10:	4b12      	ldr	r3, [pc, #72]	; (800db5c <tcp_receive+0x270>)
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	7d1b      	ldrb	r3, [r3, #20]
 800db1c:	2b03      	cmp	r3, #3
 800db1e:	f240 8097 	bls.w	800dc50 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800db2e:	429a      	cmp	r2, r3
 800db30:	d245      	bcs.n	800dbbe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	8b5b      	ldrh	r3, [r3, #26]
 800db36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d014      	beq.n	800db68 <tcp_receive+0x27c>
 800db3e:	2301      	movs	r3, #1
 800db40:	e013      	b.n	800db6a <tcp_receive+0x27e>
 800db42:	bf00      	nop
 800db44:	08015948 	.word	0x08015948
 800db48:	08015c78 	.word	0x08015c78
 800db4c:	08015994 	.word	0x08015994
 800db50:	08015c94 	.word	0x08015c94
 800db54:	20008ef8 	.word	0x20008ef8
 800db58:	20008eec 	.word	0x20008eec
 800db5c:	20008ef0 	.word	0x20008ef0
 800db60:	20008edc 	.word	0x20008edc
 800db64:	20008ef6 	.word	0x20008ef6
 800db68:	2302      	movs	r3, #2
 800db6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800db6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800db72:	b29a      	uxth	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db78:	fb12 f303 	smulbb	r3, r2, r3
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800db80:	4293      	cmp	r3, r2
 800db82:	bf28      	it	cs
 800db84:	4613      	movcs	r3, r2
 800db86:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800db90:	4413      	add	r3, r2
 800db92:	b29a      	uxth	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d309      	bcc.n	800dbb2 <tcp_receive+0x2c6>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dba4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dba6:	4413      	add	r3, r2
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dbb0:	e04e      	b.n	800dc50 <tcp_receive+0x364>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dbbc:	e048      	b.n	800dc50 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dbc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dbc6:	4413      	add	r3, r2
 800dbc8:	b29a      	uxth	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d309      	bcc.n	800dbe8 <tcp_receive+0x2fc>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dbda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dbdc:	4413      	add	r3, r2
 800dbde:	b29a      	uxth	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dbe6:	e004      	b.n	800dbf2 <tcp_receive+0x306>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d326      	bcc.n	800dc50 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	b29a      	uxth	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc22:	4413      	add	r3, r2
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d30a      	bcc.n	800dc46 <tcp_receive+0x35a>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc3a:	4413      	add	r3, r2
 800dc3c:	b29a      	uxth	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dc44:	e004      	b.n	800dc50 <tcp_receive+0x364>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc58:	4a98      	ldr	r2, [pc, #608]	; (800debc <tcp_receive+0x5d0>)
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f7ff fdca 	bl	800d7f4 <tcp_free_acked_segments>
 800dc60:	4602      	mov	r2, r0
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc6e:	4a94      	ldr	r2, [pc, #592]	; (800dec0 <tcp_receive+0x5d4>)
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7ff fdbf 	bl	800d7f4 <tcp_free_acked_segments>
 800dc76:	4602      	mov	r2, r0
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d104      	bne.n	800dc8e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc8a:	861a      	strh	r2, [r3, #48]	; 0x30
 800dc8c:	e002      	b.n	800dc94 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d103      	bne.n	800dcaa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2200      	movs	r2, #0
 800dca6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800dcb0:	4b84      	ldr	r3, [pc, #528]	; (800dec4 <tcp_receive+0x5d8>)
 800dcb2:	881b      	ldrh	r3, [r3, #0]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	8b5b      	ldrh	r3, [r3, #26]
 800dcc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d035      	beq.n	800dd36 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d118      	bne.n	800dd04 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00c      	beq.n	800dcf4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fb f9df 	bl	80090aa <lwip_htonl>
 800dcec:	4603      	mov	r3, r0
 800dcee:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	dc20      	bgt.n	800dd36 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	8b5b      	ldrh	r3, [r3, #26]
 800dcf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dd02:	e018      	b.n	800dd36 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fb f9ca 	bl	80090aa <lwip_htonl>
 800dd16:	4603      	mov	r3, r0
 800dd18:	1ae3      	subs	r3, r4, r3
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	dc0b      	bgt.n	800dd36 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	8b5b      	ldrh	r3, [r3, #26]
 800dd22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dd2c:	e003      	b.n	800dd36 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f001 ff76 	bl	800fc20 <tcp_send_empty_ack>
 800dd34:	e000      	b.n	800dd38 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dd36:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d05b      	beq.n	800ddf8 <tcp_receive+0x50c>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd44:	4b60      	ldr	r3, [pc, #384]	; (800dec8 <tcp_receive+0x5dc>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	da54      	bge.n	800ddf8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800dd4e:	4b5f      	ldr	r3, [pc, #380]	; (800decc <tcp_receive+0x5e0>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	1ad3      	subs	r3, r2, r3
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800dd62:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dd6c:	10db      	asrs	r3, r3, #3
 800dd6e:	b21b      	sxth	r3, r3
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	1ad3      	subs	r3, r2, r3
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dd86:	4413      	add	r3, r2
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	b21a      	sxth	r2, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800dd90:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	da05      	bge.n	800dda4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800dd98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dd9c:	425b      	negs	r3, r3
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800dda4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ddae:	109b      	asrs	r3, r3, #2
 800ddb0:	b21b      	sxth	r3, r3
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	1ad3      	subs	r3, r2, r3
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ddc8:	4413      	add	r3, r2
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	b21a      	sxth	r2, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ddd8:	10db      	asrs	r3, r3, #3
 800ddda:	b21b      	sxth	r3, r3
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	4413      	add	r3, r2
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	b21a      	sxth	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ddf8:	4b35      	ldr	r3, [pc, #212]	; (800ded0 <tcp_receive+0x5e4>)
 800ddfa:	881b      	ldrh	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f000 84e2 	beq.w	800e7c6 <tcp_receive+0xeda>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	7d1b      	ldrb	r3, [r3, #20]
 800de06:	2b06      	cmp	r3, #6
 800de08:	f200 84dd 	bhi.w	800e7c6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de10:	4b30      	ldr	r3, [pc, #192]	; (800ded4 <tcp_receive+0x5e8>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	1ad3      	subs	r3, r2, r3
 800de16:	3b01      	subs	r3, #1
 800de18:	2b00      	cmp	r3, #0
 800de1a:	f2c0 808f 	blt.w	800df3c <tcp_receive+0x650>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de22:	4b2b      	ldr	r3, [pc, #172]	; (800ded0 <tcp_receive+0x5e4>)
 800de24:	881b      	ldrh	r3, [r3, #0]
 800de26:	4619      	mov	r1, r3
 800de28:	4b2a      	ldr	r3, [pc, #168]	; (800ded4 <tcp_receive+0x5e8>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	440b      	add	r3, r1
 800de2e:	1ad3      	subs	r3, r2, r3
 800de30:	3301      	adds	r3, #1
 800de32:	2b00      	cmp	r3, #0
 800de34:	f300 8082 	bgt.w	800df3c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800de38:	4b27      	ldr	r3, [pc, #156]	; (800ded8 <tcp_receive+0x5ec>)
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de42:	4b24      	ldr	r3, [pc, #144]	; (800ded4 <tcp_receive+0x5e8>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	1ad3      	subs	r3, r2, r3
 800de48:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800de4a:	4b23      	ldr	r3, [pc, #140]	; (800ded8 <tcp_receive+0x5ec>)
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d106      	bne.n	800de60 <tcp_receive+0x574>
 800de52:	4b22      	ldr	r3, [pc, #136]	; (800dedc <tcp_receive+0x5f0>)
 800de54:	f240 5294 	movw	r2, #1428	; 0x594
 800de58:	4921      	ldr	r1, [pc, #132]	; (800dee0 <tcp_receive+0x5f4>)
 800de5a:	4822      	ldr	r0, [pc, #136]	; (800dee4 <tcp_receive+0x5f8>)
 800de5c:	f005 fa38 	bl	80132d0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800de66:	4293      	cmp	r3, r2
 800de68:	d906      	bls.n	800de78 <tcp_receive+0x58c>
 800de6a:	4b1c      	ldr	r3, [pc, #112]	; (800dedc <tcp_receive+0x5f0>)
 800de6c:	f240 5295 	movw	r2, #1429	; 0x595
 800de70:	491d      	ldr	r1, [pc, #116]	; (800dee8 <tcp_receive+0x5fc>)
 800de72:	481c      	ldr	r0, [pc, #112]	; (800dee4 <tcp_receive+0x5f8>)
 800de74:	f005 fa2c 	bl	80132d0 <iprintf>
      off = (u16_t)off32;
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800de7e:	4b16      	ldr	r3, [pc, #88]	; (800ded8 <tcp_receive+0x5ec>)
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	891b      	ldrh	r3, [r3, #8]
 800de84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800de88:	429a      	cmp	r2, r3
 800de8a:	d906      	bls.n	800de9a <tcp_receive+0x5ae>
 800de8c:	4b13      	ldr	r3, [pc, #76]	; (800dedc <tcp_receive+0x5f0>)
 800de8e:	f240 5297 	movw	r2, #1431	; 0x597
 800de92:	4916      	ldr	r1, [pc, #88]	; (800deec <tcp_receive+0x600>)
 800de94:	4813      	ldr	r0, [pc, #76]	; (800dee4 <tcp_receive+0x5f8>)
 800de96:	f005 fa1b 	bl	80132d0 <iprintf>
      inseg.len -= off;
 800de9a:	4b0f      	ldr	r3, [pc, #60]	; (800ded8 <tcp_receive+0x5ec>)
 800de9c:	891a      	ldrh	r2, [r3, #8]
 800de9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dea2:	1ad3      	subs	r3, r2, r3
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	4b0c      	ldr	r3, [pc, #48]	; (800ded8 <tcp_receive+0x5ec>)
 800dea8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800deaa:	4b0b      	ldr	r3, [pc, #44]	; (800ded8 <tcp_receive+0x5ec>)
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	891a      	ldrh	r2, [r3, #8]
 800deb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800deb8:	e02a      	b.n	800df10 <tcp_receive+0x624>
 800deba:	bf00      	nop
 800debc:	08015cb0 	.word	0x08015cb0
 800dec0:	08015cb8 	.word	0x08015cb8
 800dec4:	20008ef4 	.word	0x20008ef4
 800dec8:	20008ef0 	.word	0x20008ef0
 800decc:	20008eb4 	.word	0x20008eb4
 800ded0:	20008ef6 	.word	0x20008ef6
 800ded4:	20008eec 	.word	0x20008eec
 800ded8:	20008ecc 	.word	0x20008ecc
 800dedc:	08015948 	.word	0x08015948
 800dee0:	08015cc0 	.word	0x08015cc0
 800dee4:	08015994 	.word	0x08015994
 800dee8:	08015cd0 	.word	0x08015cd0
 800deec:	08015ce0 	.word	0x08015ce0
        off -= p->len;
 800def0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800def2:	895b      	ldrh	r3, [r3, #10]
 800def4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800def8:	1ad3      	subs	r3, r2, r3
 800defa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800defe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df00:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800df02:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800df04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df06:	2200      	movs	r2, #0
 800df08:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800df0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800df10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df12:	895b      	ldrh	r3, [r3, #10]
 800df14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df18:	429a      	cmp	r2, r3
 800df1a:	d8e9      	bhi.n	800def0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800df1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df20:	4619      	mov	r1, r3
 800df22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800df24:	f7fc fada 	bl	800a4dc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df2c:	4a91      	ldr	r2, [pc, #580]	; (800e174 <tcp_receive+0x888>)
 800df2e:	6013      	str	r3, [r2, #0]
 800df30:	4b91      	ldr	r3, [pc, #580]	; (800e178 <tcp_receive+0x88c>)
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	4a8f      	ldr	r2, [pc, #572]	; (800e174 <tcp_receive+0x888>)
 800df36:	6812      	ldr	r2, [r2, #0]
 800df38:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800df3a:	e00d      	b.n	800df58 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800df3c:	4b8d      	ldr	r3, [pc, #564]	; (800e174 <tcp_receive+0x888>)
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df44:	1ad3      	subs	r3, r2, r3
 800df46:	2b00      	cmp	r3, #0
 800df48:	da06      	bge.n	800df58 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	8b5b      	ldrh	r3, [r3, #26]
 800df4e:	f043 0302 	orr.w	r3, r3, #2
 800df52:	b29a      	uxth	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800df58:	4b86      	ldr	r3, [pc, #536]	; (800e174 <tcp_receive+0x888>)
 800df5a:	681a      	ldr	r2, [r3, #0]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	2b00      	cmp	r3, #0
 800df64:	f2c0 842a 	blt.w	800e7bc <tcp_receive+0xed0>
 800df68:	4b82      	ldr	r3, [pc, #520]	; (800e174 <tcp_receive+0x888>)
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df70:	6879      	ldr	r1, [r7, #4]
 800df72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800df74:	440b      	add	r3, r1
 800df76:	1ad3      	subs	r3, r2, r3
 800df78:	3301      	adds	r3, #1
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f300 841e 	bgt.w	800e7bc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df84:	4b7b      	ldr	r3, [pc, #492]	; (800e174 <tcp_receive+0x888>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	429a      	cmp	r2, r3
 800df8a:	f040 829a 	bne.w	800e4c2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800df8e:	4b7a      	ldr	r3, [pc, #488]	; (800e178 <tcp_receive+0x88c>)
 800df90:	891c      	ldrh	r4, [r3, #8]
 800df92:	4b79      	ldr	r3, [pc, #484]	; (800e178 <tcp_receive+0x88c>)
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	899b      	ldrh	r3, [r3, #12]
 800df98:	b29b      	uxth	r3, r3
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7fb f870 	bl	8009080 <lwip_htons>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	f003 0303 	and.w	r3, r3, #3
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d001      	beq.n	800dfb0 <tcp_receive+0x6c4>
 800dfac:	2301      	movs	r3, #1
 800dfae:	e000      	b.n	800dfb2 <tcp_receive+0x6c6>
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	4423      	add	r3, r4
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	4b71      	ldr	r3, [pc, #452]	; (800e17c <tcp_receive+0x890>)
 800dfb8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dfbe:	4b6f      	ldr	r3, [pc, #444]	; (800e17c <tcp_receive+0x890>)
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d275      	bcs.n	800e0b2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dfc6:	4b6c      	ldr	r3, [pc, #432]	; (800e178 <tcp_receive+0x88c>)
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	899b      	ldrh	r3, [r3, #12]
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fb f856 	bl	8009080 <lwip_htons>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	f003 0301 	and.w	r3, r3, #1
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d01f      	beq.n	800e020 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800dfe0:	4b65      	ldr	r3, [pc, #404]	; (800e178 <tcp_receive+0x88c>)
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	899b      	ldrh	r3, [r3, #12]
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	b21b      	sxth	r3, r3
 800dfea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dfee:	b21c      	sxth	r4, r3
 800dff0:	4b61      	ldr	r3, [pc, #388]	; (800e178 <tcp_receive+0x88c>)
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	899b      	ldrh	r3, [r3, #12]
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fb f841 	bl	8009080 <lwip_htons>
 800dffe:	4603      	mov	r3, r0
 800e000:	b2db      	uxtb	r3, r3
 800e002:	b29b      	uxth	r3, r3
 800e004:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e008:	b29b      	uxth	r3, r3
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fb f838 	bl	8009080 <lwip_htons>
 800e010:	4603      	mov	r3, r0
 800e012:	b21b      	sxth	r3, r3
 800e014:	4323      	orrs	r3, r4
 800e016:	b21a      	sxth	r2, r3
 800e018:	4b57      	ldr	r3, [pc, #348]	; (800e178 <tcp_receive+0x88c>)
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	b292      	uxth	r2, r2
 800e01e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e024:	4b54      	ldr	r3, [pc, #336]	; (800e178 <tcp_receive+0x88c>)
 800e026:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e028:	4b53      	ldr	r3, [pc, #332]	; (800e178 <tcp_receive+0x88c>)
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	899b      	ldrh	r3, [r3, #12]
 800e02e:	b29b      	uxth	r3, r3
 800e030:	4618      	mov	r0, r3
 800e032:	f7fb f825 	bl	8009080 <lwip_htons>
 800e036:	4603      	mov	r3, r0
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	f003 0302 	and.w	r3, r3, #2
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d005      	beq.n	800e04e <tcp_receive+0x762>
            inseg.len -= 1;
 800e042:	4b4d      	ldr	r3, [pc, #308]	; (800e178 <tcp_receive+0x88c>)
 800e044:	891b      	ldrh	r3, [r3, #8]
 800e046:	3b01      	subs	r3, #1
 800e048:	b29a      	uxth	r2, r3
 800e04a:	4b4b      	ldr	r3, [pc, #300]	; (800e178 <tcp_receive+0x88c>)
 800e04c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e04e:	4b4a      	ldr	r3, [pc, #296]	; (800e178 <tcp_receive+0x88c>)
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	4a49      	ldr	r2, [pc, #292]	; (800e178 <tcp_receive+0x88c>)
 800e054:	8912      	ldrh	r2, [r2, #8]
 800e056:	4611      	mov	r1, r2
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fc f93f 	bl	800a2dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e05e:	4b46      	ldr	r3, [pc, #280]	; (800e178 <tcp_receive+0x88c>)
 800e060:	891c      	ldrh	r4, [r3, #8]
 800e062:	4b45      	ldr	r3, [pc, #276]	; (800e178 <tcp_receive+0x88c>)
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	899b      	ldrh	r3, [r3, #12]
 800e068:	b29b      	uxth	r3, r3
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fb f808 	bl	8009080 <lwip_htons>
 800e070:	4603      	mov	r3, r0
 800e072:	b2db      	uxtb	r3, r3
 800e074:	f003 0303 	and.w	r3, r3, #3
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d001      	beq.n	800e080 <tcp_receive+0x794>
 800e07c:	2301      	movs	r3, #1
 800e07e:	e000      	b.n	800e082 <tcp_receive+0x796>
 800e080:	2300      	movs	r3, #0
 800e082:	4423      	add	r3, r4
 800e084:	b29a      	uxth	r2, r3
 800e086:	4b3d      	ldr	r3, [pc, #244]	; (800e17c <tcp_receive+0x890>)
 800e088:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e08a:	4b3c      	ldr	r3, [pc, #240]	; (800e17c <tcp_receive+0x890>)
 800e08c:	881b      	ldrh	r3, [r3, #0]
 800e08e:	461a      	mov	r2, r3
 800e090:	4b38      	ldr	r3, [pc, #224]	; (800e174 <tcp_receive+0x888>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	441a      	add	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e09a:	6879      	ldr	r1, [r7, #4]
 800e09c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e09e:	440b      	add	r3, r1
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d006      	beq.n	800e0b2 <tcp_receive+0x7c6>
 800e0a4:	4b36      	ldr	r3, [pc, #216]	; (800e180 <tcp_receive+0x894>)
 800e0a6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e0aa:	4936      	ldr	r1, [pc, #216]	; (800e184 <tcp_receive+0x898>)
 800e0ac:	4836      	ldr	r0, [pc, #216]	; (800e188 <tcp_receive+0x89c>)
 800e0ae:	f005 f90f 	bl	80132d0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	f000 80e7 	beq.w	800e28a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e0bc:	4b2e      	ldr	r3, [pc, #184]	; (800e178 <tcp_receive+0x88c>)
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	899b      	ldrh	r3, [r3, #12]
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7fa ffdb 	bl	8009080 <lwip_htons>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d010      	beq.n	800e0f8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e0d6:	e00a      	b.n	800e0ee <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0dc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f7fd fd92 	bl	800bc12 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d1f0      	bne.n	800e0d8 <tcp_receive+0x7ec>
 800e0f6:	e0c8      	b.n	800e28a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e0fe:	e052      	b.n	800e1a6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	899b      	ldrh	r3, [r3, #12]
 800e106:	b29b      	uxth	r3, r3
 800e108:	4618      	mov	r0, r3
 800e10a:	f7fa ffb9 	bl	8009080 <lwip_htons>
 800e10e:	4603      	mov	r3, r0
 800e110:	b2db      	uxtb	r3, r3
 800e112:	f003 0301 	and.w	r3, r3, #1
 800e116:	2b00      	cmp	r3, #0
 800e118:	d03d      	beq.n	800e196 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e11a:	4b17      	ldr	r3, [pc, #92]	; (800e178 <tcp_receive+0x88c>)
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	899b      	ldrh	r3, [r3, #12]
 800e120:	b29b      	uxth	r3, r3
 800e122:	4618      	mov	r0, r3
 800e124:	f7fa ffac 	bl	8009080 <lwip_htons>
 800e128:	4603      	mov	r3, r0
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e130:	2b00      	cmp	r3, #0
 800e132:	d130      	bne.n	800e196 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e134:	4b10      	ldr	r3, [pc, #64]	; (800e178 <tcp_receive+0x88c>)
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	899b      	ldrh	r3, [r3, #12]
 800e13a:	b29c      	uxth	r4, r3
 800e13c:	2001      	movs	r0, #1
 800e13e:	f7fa ff9f 	bl	8009080 <lwip_htons>
 800e142:	4603      	mov	r3, r0
 800e144:	461a      	mov	r2, r3
 800e146:	4b0c      	ldr	r3, [pc, #48]	; (800e178 <tcp_receive+0x88c>)
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	4322      	orrs	r2, r4
 800e14c:	b292      	uxth	r2, r2
 800e14e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e150:	4b09      	ldr	r3, [pc, #36]	; (800e178 <tcp_receive+0x88c>)
 800e152:	891c      	ldrh	r4, [r3, #8]
 800e154:	4b08      	ldr	r3, [pc, #32]	; (800e178 <tcp_receive+0x88c>)
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	899b      	ldrh	r3, [r3, #12]
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fa ff8f 	bl	8009080 <lwip_htons>
 800e162:	4603      	mov	r3, r0
 800e164:	b2db      	uxtb	r3, r3
 800e166:	f003 0303 	and.w	r3, r3, #3
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00e      	beq.n	800e18c <tcp_receive+0x8a0>
 800e16e:	2301      	movs	r3, #1
 800e170:	e00d      	b.n	800e18e <tcp_receive+0x8a2>
 800e172:	bf00      	nop
 800e174:	20008eec 	.word	0x20008eec
 800e178:	20008ecc 	.word	0x20008ecc
 800e17c:	20008ef6 	.word	0x20008ef6
 800e180:	08015948 	.word	0x08015948
 800e184:	08015cf0 	.word	0x08015cf0
 800e188:	08015994 	.word	0x08015994
 800e18c:	2300      	movs	r3, #0
 800e18e:	4423      	add	r3, r4
 800e190:	b29a      	uxth	r2, r3
 800e192:	4b98      	ldr	r3, [pc, #608]	; (800e3f4 <tcp_receive+0xb08>)
 800e194:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e198:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e1a0:	6938      	ldr	r0, [r7, #16]
 800e1a2:	f7fd fd36 	bl	800bc12 <tcp_seg_free>
            while (next &&
 800e1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00e      	beq.n	800e1ca <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e1ac:	4b91      	ldr	r3, [pc, #580]	; (800e3f4 <tcp_receive+0xb08>)
 800e1ae:	881b      	ldrh	r3, [r3, #0]
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	4b91      	ldr	r3, [pc, #580]	; (800e3f8 <tcp_receive+0xb0c>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	441a      	add	r2, r3
 800e1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e1c0:	8909      	ldrh	r1, [r1, #8]
 800e1c2:	440b      	add	r3, r1
 800e1c4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	da9a      	bge.n	800e100 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d059      	beq.n	800e284 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e1d0:	4b88      	ldr	r3, [pc, #544]	; (800e3f4 <tcp_receive+0xb08>)
 800e1d2:	881b      	ldrh	r3, [r3, #0]
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	4b88      	ldr	r3, [pc, #544]	; (800e3f8 <tcp_receive+0xb0c>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	441a      	add	r2, r3
 800e1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	dd4d      	ble.n	800e284 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	4b81      	ldr	r3, [pc, #516]	; (800e3f8 <tcp_receive+0xb0c>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	4b80      	ldr	r3, [pc, #512]	; (800e3fc <tcp_receive+0xb10>)
 800e1fc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e1fe:	4b7f      	ldr	r3, [pc, #508]	; (800e3fc <tcp_receive+0xb10>)
 800e200:	68db      	ldr	r3, [r3, #12]
 800e202:	899b      	ldrh	r3, [r3, #12]
 800e204:	b29b      	uxth	r3, r3
 800e206:	4618      	mov	r0, r3
 800e208:	f7fa ff3a 	bl	8009080 <lwip_htons>
 800e20c:	4603      	mov	r3, r0
 800e20e:	b2db      	uxtb	r3, r3
 800e210:	f003 0302 	and.w	r3, r3, #2
 800e214:	2b00      	cmp	r3, #0
 800e216:	d005      	beq.n	800e224 <tcp_receive+0x938>
                inseg.len -= 1;
 800e218:	4b78      	ldr	r3, [pc, #480]	; (800e3fc <tcp_receive+0xb10>)
 800e21a:	891b      	ldrh	r3, [r3, #8]
 800e21c:	3b01      	subs	r3, #1
 800e21e:	b29a      	uxth	r2, r3
 800e220:	4b76      	ldr	r3, [pc, #472]	; (800e3fc <tcp_receive+0xb10>)
 800e222:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e224:	4b75      	ldr	r3, [pc, #468]	; (800e3fc <tcp_receive+0xb10>)
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	4a74      	ldr	r2, [pc, #464]	; (800e3fc <tcp_receive+0xb10>)
 800e22a:	8912      	ldrh	r2, [r2, #8]
 800e22c:	4611      	mov	r1, r2
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fc f854 	bl	800a2dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e234:	4b71      	ldr	r3, [pc, #452]	; (800e3fc <tcp_receive+0xb10>)
 800e236:	891c      	ldrh	r4, [r3, #8]
 800e238:	4b70      	ldr	r3, [pc, #448]	; (800e3fc <tcp_receive+0xb10>)
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	899b      	ldrh	r3, [r3, #12]
 800e23e:	b29b      	uxth	r3, r3
 800e240:	4618      	mov	r0, r3
 800e242:	f7fa ff1d 	bl	8009080 <lwip_htons>
 800e246:	4603      	mov	r3, r0
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	f003 0303 	and.w	r3, r3, #3
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d001      	beq.n	800e256 <tcp_receive+0x96a>
 800e252:	2301      	movs	r3, #1
 800e254:	e000      	b.n	800e258 <tcp_receive+0x96c>
 800e256:	2300      	movs	r3, #0
 800e258:	4423      	add	r3, r4
 800e25a:	b29a      	uxth	r2, r3
 800e25c:	4b65      	ldr	r3, [pc, #404]	; (800e3f4 <tcp_receive+0xb08>)
 800e25e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e260:	4b64      	ldr	r3, [pc, #400]	; (800e3f4 <tcp_receive+0xb08>)
 800e262:	881b      	ldrh	r3, [r3, #0]
 800e264:	461a      	mov	r2, r3
 800e266:	4b64      	ldr	r3, [pc, #400]	; (800e3f8 <tcp_receive+0xb0c>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	441a      	add	r2, r3
 800e26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	429a      	cmp	r2, r3
 800e274:	d006      	beq.n	800e284 <tcp_receive+0x998>
 800e276:	4b62      	ldr	r3, [pc, #392]	; (800e400 <tcp_receive+0xb14>)
 800e278:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e27c:	4961      	ldr	r1, [pc, #388]	; (800e404 <tcp_receive+0xb18>)
 800e27e:	4862      	ldr	r0, [pc, #392]	; (800e408 <tcp_receive+0xb1c>)
 800e280:	f005 f826 	bl	80132d0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e288:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e28a:	4b5a      	ldr	r3, [pc, #360]	; (800e3f4 <tcp_receive+0xb08>)
 800e28c:	881b      	ldrh	r3, [r3, #0]
 800e28e:	461a      	mov	r2, r3
 800e290:	4b59      	ldr	r3, [pc, #356]	; (800e3f8 <tcp_receive+0xb0c>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	441a      	add	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e29e:	4b55      	ldr	r3, [pc, #340]	; (800e3f4 <tcp_receive+0xb08>)
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d206      	bcs.n	800e2b4 <tcp_receive+0x9c8>
 800e2a6:	4b56      	ldr	r3, [pc, #344]	; (800e400 <tcp_receive+0xb14>)
 800e2a8:	f240 6207 	movw	r2, #1543	; 0x607
 800e2ac:	4957      	ldr	r1, [pc, #348]	; (800e40c <tcp_receive+0xb20>)
 800e2ae:	4856      	ldr	r0, [pc, #344]	; (800e408 <tcp_receive+0xb1c>)
 800e2b0:	f005 f80e 	bl	80132d0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e2b8:	4b4e      	ldr	r3, [pc, #312]	; (800e3f4 <tcp_receive+0xb08>)
 800e2ba:	881b      	ldrh	r3, [r3, #0]
 800e2bc:	1ad3      	subs	r3, r2, r3
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7fc ffc5 	bl	800b254 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e2ca:	4b4c      	ldr	r3, [pc, #304]	; (800e3fc <tcp_receive+0xb10>)
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	891b      	ldrh	r3, [r3, #8]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d006      	beq.n	800e2e2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e2d4:	4b49      	ldr	r3, [pc, #292]	; (800e3fc <tcp_receive+0xb10>)
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	4a4d      	ldr	r2, [pc, #308]	; (800e410 <tcp_receive+0xb24>)
 800e2da:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e2dc:	4b47      	ldr	r3, [pc, #284]	; (800e3fc <tcp_receive+0xb10>)
 800e2de:	2200      	movs	r2, #0
 800e2e0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e2e2:	4b46      	ldr	r3, [pc, #280]	; (800e3fc <tcp_receive+0xb10>)
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	899b      	ldrh	r3, [r3, #12]
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fa fec8 	bl	8009080 <lwip_htons>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	f003 0301 	and.w	r3, r3, #1
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	f000 80b8 	beq.w	800e46e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e2fe:	4b45      	ldr	r3, [pc, #276]	; (800e414 <tcp_receive+0xb28>)
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	f043 0320 	orr.w	r3, r3, #32
 800e306:	b2da      	uxtb	r2, r3
 800e308:	4b42      	ldr	r3, [pc, #264]	; (800e414 <tcp_receive+0xb28>)
 800e30a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e30c:	e0af      	b.n	800e46e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e312:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	4a36      	ldr	r2, [pc, #216]	; (800e3f8 <tcp_receive+0xb0c>)
 800e31e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	891b      	ldrh	r3, [r3, #8]
 800e324:	461c      	mov	r4, r3
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	899b      	ldrh	r3, [r3, #12]
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fa fea6 	bl	8009080 <lwip_htons>
 800e334:	4603      	mov	r3, r0
 800e336:	b2db      	uxtb	r3, r3
 800e338:	f003 0303 	and.w	r3, r3, #3
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d001      	beq.n	800e344 <tcp_receive+0xa58>
 800e340:	2301      	movs	r3, #1
 800e342:	e000      	b.n	800e346 <tcp_receive+0xa5a>
 800e344:	2300      	movs	r3, #0
 800e346:	191a      	adds	r2, r3, r4
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e34c:	441a      	add	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e356:	461c      	mov	r4, r3
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	891b      	ldrh	r3, [r3, #8]
 800e35c:	461d      	mov	r5, r3
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	899b      	ldrh	r3, [r3, #12]
 800e364:	b29b      	uxth	r3, r3
 800e366:	4618      	mov	r0, r3
 800e368:	f7fa fe8a 	bl	8009080 <lwip_htons>
 800e36c:	4603      	mov	r3, r0
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	f003 0303 	and.w	r3, r3, #3
 800e374:	2b00      	cmp	r3, #0
 800e376:	d001      	beq.n	800e37c <tcp_receive+0xa90>
 800e378:	2301      	movs	r3, #1
 800e37a:	e000      	b.n	800e37e <tcp_receive+0xa92>
 800e37c:	2300      	movs	r3, #0
 800e37e:	442b      	add	r3, r5
 800e380:	429c      	cmp	r4, r3
 800e382:	d206      	bcs.n	800e392 <tcp_receive+0xaa6>
 800e384:	4b1e      	ldr	r3, [pc, #120]	; (800e400 <tcp_receive+0xb14>)
 800e386:	f240 622b 	movw	r2, #1579	; 0x62b
 800e38a:	4923      	ldr	r1, [pc, #140]	; (800e418 <tcp_receive+0xb2c>)
 800e38c:	481e      	ldr	r0, [pc, #120]	; (800e408 <tcp_receive+0xb1c>)
 800e38e:	f004 ff9f 	bl	80132d0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	891b      	ldrh	r3, [r3, #8]
 800e396:	461c      	mov	r4, r3
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	68db      	ldr	r3, [r3, #12]
 800e39c:	899b      	ldrh	r3, [r3, #12]
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7fa fe6d 	bl	8009080 <lwip_htons>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	f003 0303 	and.w	r3, r3, #3
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <tcp_receive+0xaca>
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e000      	b.n	800e3b8 <tcp_receive+0xacc>
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	1919      	adds	r1, r3, r4
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e3be:	b28b      	uxth	r3, r1
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f7fc ff43 	bl	800b254 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	891b      	ldrh	r3, [r3, #8]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d028      	beq.n	800e42a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e3d8:	4b0d      	ldr	r3, [pc, #52]	; (800e410 <tcp_receive+0xb24>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d01d      	beq.n	800e41c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e3e0:	4b0b      	ldr	r3, [pc, #44]	; (800e410 <tcp_receive+0xb24>)
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4610      	mov	r0, r2
 800e3ec:	f7fc f9be 	bl	800a76c <pbuf_cat>
 800e3f0:	e018      	b.n	800e424 <tcp_receive+0xb38>
 800e3f2:	bf00      	nop
 800e3f4:	20008ef6 	.word	0x20008ef6
 800e3f8:	20008eec 	.word	0x20008eec
 800e3fc:	20008ecc 	.word	0x20008ecc
 800e400:	08015948 	.word	0x08015948
 800e404:	08015d28 	.word	0x08015d28
 800e408:	08015994 	.word	0x08015994
 800e40c:	08015d64 	.word	0x08015d64
 800e410:	20008efc 	.word	0x20008efc
 800e414:	20008ef9 	.word	0x20008ef9
 800e418:	08015d84 	.word	0x08015d84
            } else {
              recv_data = cseg->p;
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	4a70      	ldr	r2, [pc, #448]	; (800e5e4 <tcp_receive+0xcf8>)
 800e422:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	2200      	movs	r2, #0
 800e428:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	899b      	ldrh	r3, [r3, #12]
 800e430:	b29b      	uxth	r3, r3
 800e432:	4618      	mov	r0, r3
 800e434:	f7fa fe24 	bl	8009080 <lwip_htons>
 800e438:	4603      	mov	r3, r0
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	f003 0301 	and.w	r3, r3, #1
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00d      	beq.n	800e460 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e444:	4b68      	ldr	r3, [pc, #416]	; (800e5e8 <tcp_receive+0xcfc>)
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	f043 0320 	orr.w	r3, r3, #32
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	4b66      	ldr	r3, [pc, #408]	; (800e5e8 <tcp_receive+0xcfc>)
 800e450:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	7d1b      	ldrb	r3, [r3, #20]
 800e456:	2b04      	cmp	r3, #4
 800e458:	d102      	bne.n	800e460 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2207      	movs	r2, #7
 800e45e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e468:	68b8      	ldr	r0, [r7, #8]
 800e46a:	f7fd fbd2 	bl	800bc12 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e472:	2b00      	cmp	r3, #0
 800e474:	d008      	beq.n	800e488 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	685a      	ldr	r2, [r3, #4]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e482:	429a      	cmp	r2, r3
 800e484:	f43f af43 	beq.w	800e30e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	8b5b      	ldrh	r3, [r3, #26]
 800e48c:	f003 0301 	and.w	r3, r3, #1
 800e490:	2b00      	cmp	r3, #0
 800e492:	d00e      	beq.n	800e4b2 <tcp_receive+0xbc6>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	8b5b      	ldrh	r3, [r3, #26]
 800e498:	f023 0301 	bic.w	r3, r3, #1
 800e49c:	b29a      	uxth	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	835a      	strh	r2, [r3, #26]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	8b5b      	ldrh	r3, [r3, #26]
 800e4a6:	f043 0302 	orr.w	r3, r3, #2
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e4b0:	e188      	b.n	800e7c4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	8b5b      	ldrh	r3, [r3, #26]
 800e4b6:	f043 0301 	orr.w	r3, r3, #1
 800e4ba:	b29a      	uxth	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e4c0:	e180      	b.n	800e7c4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d106      	bne.n	800e4d8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e4ca:	4848      	ldr	r0, [pc, #288]	; (800e5ec <tcp_receive+0xd00>)
 800e4cc:	f7fd fbba 	bl	800bc44 <tcp_seg_copy>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	675a      	str	r2, [r3, #116]	; 0x74
 800e4d6:	e16d      	b.n	800e7b4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4e2:	e157      	b.n	800e794 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e6:	68db      	ldr	r3, [r3, #12]
 800e4e8:	685a      	ldr	r2, [r3, #4]
 800e4ea:	4b41      	ldr	r3, [pc, #260]	; (800e5f0 <tcp_receive+0xd04>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d11d      	bne.n	800e52e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e4f2:	4b3e      	ldr	r3, [pc, #248]	; (800e5ec <tcp_receive+0xd00>)
 800e4f4:	891a      	ldrh	r2, [r3, #8]
 800e4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f8:	891b      	ldrh	r3, [r3, #8]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	f240 814f 	bls.w	800e79e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e500:	483a      	ldr	r0, [pc, #232]	; (800e5ec <tcp_receive+0xd00>)
 800e502:	f7fd fb9f 	bl	800bc44 <tcp_seg_copy>
 800e506:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f000 8149 	beq.w	800e7a2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e512:	2b00      	cmp	r3, #0
 800e514:	d003      	beq.n	800e51e <tcp_receive+0xc32>
                    prev->next = cseg;
 800e516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e518:	697a      	ldr	r2, [r7, #20]
 800e51a:	601a      	str	r2, [r3, #0]
 800e51c:	e002      	b.n	800e524 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	697a      	ldr	r2, [r7, #20]
 800e522:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e524:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e526:	6978      	ldr	r0, [r7, #20]
 800e528:	f7ff f8dc 	bl	800d6e4 <tcp_oos_insert_segment>
                }
                break;
 800e52c:	e139      	b.n	800e7a2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e530:	2b00      	cmp	r3, #0
 800e532:	d117      	bne.n	800e564 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e534:	4b2e      	ldr	r3, [pc, #184]	; (800e5f0 <tcp_receive+0xd04>)
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	1ad3      	subs	r3, r2, r3
 800e540:	2b00      	cmp	r3, #0
 800e542:	da57      	bge.n	800e5f4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e544:	4829      	ldr	r0, [pc, #164]	; (800e5ec <tcp_receive+0xd00>)
 800e546:	f7fd fb7d 	bl	800bc44 <tcp_seg_copy>
 800e54a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e54c:	69bb      	ldr	r3, [r7, #24]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 8129 	beq.w	800e7a6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	69ba      	ldr	r2, [r7, #24]
 800e558:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e55a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e55c:	69b8      	ldr	r0, [r7, #24]
 800e55e:	f7ff f8c1 	bl	800d6e4 <tcp_oos_insert_segment>
                  }
                  break;
 800e562:	e120      	b.n	800e7a6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e564:	4b22      	ldr	r3, [pc, #136]	; (800e5f0 <tcp_receive+0xd04>)
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	1ad3      	subs	r3, r2, r3
 800e570:	3b01      	subs	r3, #1
 800e572:	2b00      	cmp	r3, #0
 800e574:	db3e      	blt.n	800e5f4 <tcp_receive+0xd08>
 800e576:	4b1e      	ldr	r3, [pc, #120]	; (800e5f0 <tcp_receive+0xd04>)
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	1ad3      	subs	r3, r2, r3
 800e582:	3301      	adds	r3, #1
 800e584:	2b00      	cmp	r3, #0
 800e586:	dc35      	bgt.n	800e5f4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e588:	4818      	ldr	r0, [pc, #96]	; (800e5ec <tcp_receive+0xd00>)
 800e58a:	f7fd fb5b 	bl	800bc44 <tcp_seg_copy>
 800e58e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	2b00      	cmp	r3, #0
 800e594:	f000 8109 	beq.w	800e7aa <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5a0:	8912      	ldrh	r2, [r2, #8]
 800e5a2:	441a      	add	r2, r3
 800e5a4:	4b12      	ldr	r3, [pc, #72]	; (800e5f0 <tcp_receive+0xd04>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	1ad3      	subs	r3, r2, r3
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	dd12      	ble.n	800e5d4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e5ae:	4b10      	ldr	r3, [pc, #64]	; (800e5f0 <tcp_receive+0xd04>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	1ad3      	subs	r3, r2, r3
 800e5be:	b29a      	uxth	r2, r3
 800e5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5c2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5c6:	685a      	ldr	r2, [r3, #4]
 800e5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ca:	891b      	ldrh	r3, [r3, #8]
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	4610      	mov	r0, r2
 800e5d0:	f7fb fe84 	bl	800a2dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5d6:	69fa      	ldr	r2, [r7, #28]
 800e5d8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e5da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5dc:	69f8      	ldr	r0, [r7, #28]
 800e5de:	f7ff f881 	bl	800d6e4 <tcp_oos_insert_segment>
                  }
                  break;
 800e5e2:	e0e2      	b.n	800e7aa <tcp_receive+0xebe>
 800e5e4:	20008efc 	.word	0x20008efc
 800e5e8:	20008ef9 	.word	0x20008ef9
 800e5ec:	20008ecc 	.word	0x20008ecc
 800e5f0:	20008eec 	.word	0x20008eec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	f040 80c6 	bne.w	800e78e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e602:	4b80      	ldr	r3, [pc, #512]	; (800e804 <tcp_receive+0xf18>)
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f340 80bd 	ble.w	800e78e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	899b      	ldrh	r3, [r3, #12]
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fa fd2f 	bl	8009080 <lwip_htons>
 800e622:	4603      	mov	r3, r0
 800e624:	b2db      	uxtb	r3, r3
 800e626:	f003 0301 	and.w	r3, r3, #1
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	f040 80bf 	bne.w	800e7ae <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e630:	4875      	ldr	r0, [pc, #468]	; (800e808 <tcp_receive+0xf1c>)
 800e632:	f7fd fb07 	bl	800bc44 <tcp_seg_copy>
 800e636:	4602      	mov	r2, r0
 800e638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	f000 80b6 	beq.w	800e7b2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e64e:	8912      	ldrh	r2, [r2, #8]
 800e650:	441a      	add	r2, r3
 800e652:	4b6c      	ldr	r3, [pc, #432]	; (800e804 <tcp_receive+0xf18>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	1ad3      	subs	r3, r2, r3
 800e658:	2b00      	cmp	r3, #0
 800e65a:	dd12      	ble.n	800e682 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e65c:	4b69      	ldr	r3, [pc, #420]	; (800e804 <tcp_receive+0xf18>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	b29a      	uxth	r2, r3
 800e662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	b29b      	uxth	r3, r3
 800e66a:	1ad3      	subs	r3, r2, r3
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e670:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e674:	685a      	ldr	r2, [r3, #4]
 800e676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e678:	891b      	ldrh	r3, [r3, #8]
 800e67a:	4619      	mov	r1, r3
 800e67c:	4610      	mov	r0, r2
 800e67e:	f7fb fe2d 	bl	800a2dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e682:	4b62      	ldr	r3, [pc, #392]	; (800e80c <tcp_receive+0xf20>)
 800e684:	881b      	ldrh	r3, [r3, #0]
 800e686:	461a      	mov	r2, r3
 800e688:	4b5e      	ldr	r3, [pc, #376]	; (800e804 <tcp_receive+0xf18>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	441a      	add	r2, r3
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e692:	6879      	ldr	r1, [r7, #4]
 800e694:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e696:	440b      	add	r3, r1
 800e698:	1ad3      	subs	r3, r2, r3
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f340 8089 	ble.w	800e7b2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	68db      	ldr	r3, [r3, #12]
 800e6a6:	899b      	ldrh	r3, [r3, #12]
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fa fce8 	bl	8009080 <lwip_htons>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	f003 0301 	and.w	r3, r3, #1
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d022      	beq.n	800e702 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	899b      	ldrh	r3, [r3, #12]
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	b21b      	sxth	r3, r3
 800e6c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e6cc:	b21c      	sxth	r4, r3
 800e6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	899b      	ldrh	r3, [r3, #12]
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7fa fcd1 	bl	8009080 <lwip_htons>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	b2db      	uxtb	r3, r3
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fa fcc8 	bl	8009080 <lwip_htons>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	b21b      	sxth	r3, r3
 800e6f4:	4323      	orrs	r3, r4
 800e6f6:	b21a      	sxth	r2, r3
 800e6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	b292      	uxth	r2, r2
 800e700:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e706:	b29a      	uxth	r2, r3
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e70c:	4413      	add	r3, r2
 800e70e:	b299      	uxth	r1, r3
 800e710:	4b3c      	ldr	r3, [pc, #240]	; (800e804 <tcp_receive+0xf18>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	b29a      	uxth	r2, r3
 800e716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	1a8a      	subs	r2, r1, r2
 800e71c:	b292      	uxth	r2, r2
 800e71e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	685a      	ldr	r2, [r3, #4]
 800e726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	891b      	ldrh	r3, [r3, #8]
 800e72c:	4619      	mov	r1, r3
 800e72e:	4610      	mov	r0, r2
 800e730:	f7fb fdd4 	bl	800a2dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	891c      	ldrh	r4, [r3, #8]
 800e73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	899b      	ldrh	r3, [r3, #12]
 800e742:	b29b      	uxth	r3, r3
 800e744:	4618      	mov	r0, r3
 800e746:	f7fa fc9b 	bl	8009080 <lwip_htons>
 800e74a:	4603      	mov	r3, r0
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	f003 0303 	and.w	r3, r3, #3
 800e752:	2b00      	cmp	r3, #0
 800e754:	d001      	beq.n	800e75a <tcp_receive+0xe6e>
 800e756:	2301      	movs	r3, #1
 800e758:	e000      	b.n	800e75c <tcp_receive+0xe70>
 800e75a:	2300      	movs	r3, #0
 800e75c:	4423      	add	r3, r4
 800e75e:	b29a      	uxth	r2, r3
 800e760:	4b2a      	ldr	r3, [pc, #168]	; (800e80c <tcp_receive+0xf20>)
 800e762:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e764:	4b29      	ldr	r3, [pc, #164]	; (800e80c <tcp_receive+0xf20>)
 800e766:	881b      	ldrh	r3, [r3, #0]
 800e768:	461a      	mov	r2, r3
 800e76a:	4b26      	ldr	r3, [pc, #152]	; (800e804 <tcp_receive+0xf18>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	441a      	add	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e774:	6879      	ldr	r1, [r7, #4]
 800e776:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e778:	440b      	add	r3, r1
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d019      	beq.n	800e7b2 <tcp_receive+0xec6>
 800e77e:	4b24      	ldr	r3, [pc, #144]	; (800e810 <tcp_receive+0xf24>)
 800e780:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e784:	4923      	ldr	r1, [pc, #140]	; (800e814 <tcp_receive+0xf28>)
 800e786:	4824      	ldr	r0, [pc, #144]	; (800e818 <tcp_receive+0xf2c>)
 800e788:	f004 fda2 	bl	80132d0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e78c:	e011      	b.n	800e7b2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	63bb      	str	r3, [r7, #56]	; 0x38
 800e794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e796:	2b00      	cmp	r3, #0
 800e798:	f47f aea4 	bne.w	800e4e4 <tcp_receive+0xbf8>
 800e79c:	e00a      	b.n	800e7b4 <tcp_receive+0xec8>
                break;
 800e79e:	bf00      	nop
 800e7a0:	e008      	b.n	800e7b4 <tcp_receive+0xec8>
                break;
 800e7a2:	bf00      	nop
 800e7a4:	e006      	b.n	800e7b4 <tcp_receive+0xec8>
                  break;
 800e7a6:	bf00      	nop
 800e7a8:	e004      	b.n	800e7b4 <tcp_receive+0xec8>
                  break;
 800e7aa:	bf00      	nop
 800e7ac:	e002      	b.n	800e7b4 <tcp_receive+0xec8>
                  break;
 800e7ae:	bf00      	nop
 800e7b0:	e000      	b.n	800e7b4 <tcp_receive+0xec8>
                break;
 800e7b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f001 fa33 	bl	800fc20 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e7ba:	e003      	b.n	800e7c4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f001 fa2f 	bl	800fc20 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e7c2:	e01a      	b.n	800e7fa <tcp_receive+0xf0e>
 800e7c4:	e019      	b.n	800e7fa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e7c6:	4b0f      	ldr	r3, [pc, #60]	; (800e804 <tcp_receive+0xf18>)
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ce:	1ad3      	subs	r3, r2, r3
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	db0a      	blt.n	800e7ea <tcp_receive+0xefe>
 800e7d4:	4b0b      	ldr	r3, [pc, #44]	; (800e804 <tcp_receive+0xf18>)
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7dc:	6879      	ldr	r1, [r7, #4]
 800e7de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e7e0:	440b      	add	r3, r1
 800e7e2:	1ad3      	subs	r3, r2, r3
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	dd07      	ble.n	800e7fa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	8b5b      	ldrh	r3, [r3, #26]
 800e7ee:	f043 0302 	orr.w	r3, r3, #2
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e7f8:	e7ff      	b.n	800e7fa <tcp_receive+0xf0e>
 800e7fa:	bf00      	nop
 800e7fc:	3750      	adds	r7, #80	; 0x50
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bdb0      	pop	{r4, r5, r7, pc}
 800e802:	bf00      	nop
 800e804:	20008eec 	.word	0x20008eec
 800e808:	20008ecc 	.word	0x20008ecc
 800e80c:	20008ef6 	.word	0x20008ef6
 800e810:	08015948 	.word	0x08015948
 800e814:	08015cf0 	.word	0x08015cf0
 800e818:	08015994 	.word	0x08015994

0800e81c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e822:	4b15      	ldr	r3, [pc, #84]	; (800e878 <tcp_get_next_optbyte+0x5c>)
 800e824:	881b      	ldrh	r3, [r3, #0]
 800e826:	1c5a      	adds	r2, r3, #1
 800e828:	b291      	uxth	r1, r2
 800e82a:	4a13      	ldr	r2, [pc, #76]	; (800e878 <tcp_get_next_optbyte+0x5c>)
 800e82c:	8011      	strh	r1, [r2, #0]
 800e82e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e830:	4b12      	ldr	r3, [pc, #72]	; (800e87c <tcp_get_next_optbyte+0x60>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d004      	beq.n	800e842 <tcp_get_next_optbyte+0x26>
 800e838:	4b11      	ldr	r3, [pc, #68]	; (800e880 <tcp_get_next_optbyte+0x64>)
 800e83a:	881b      	ldrh	r3, [r3, #0]
 800e83c:	88fa      	ldrh	r2, [r7, #6]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d208      	bcs.n	800e854 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e842:	4b10      	ldr	r3, [pc, #64]	; (800e884 <tcp_get_next_optbyte+0x68>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	3314      	adds	r3, #20
 800e848:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e84a:	88fb      	ldrh	r3, [r7, #6]
 800e84c:	683a      	ldr	r2, [r7, #0]
 800e84e:	4413      	add	r3, r2
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	e00b      	b.n	800e86c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e854:	88fb      	ldrh	r3, [r7, #6]
 800e856:	b2da      	uxtb	r2, r3
 800e858:	4b09      	ldr	r3, [pc, #36]	; (800e880 <tcp_get_next_optbyte+0x64>)
 800e85a:	881b      	ldrh	r3, [r3, #0]
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	1ad3      	subs	r3, r2, r3
 800e860:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e862:	4b06      	ldr	r3, [pc, #24]	; (800e87c <tcp_get_next_optbyte+0x60>)
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	797b      	ldrb	r3, [r7, #5]
 800e868:	4413      	add	r3, r2
 800e86a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	370c      	adds	r7, #12
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr
 800e878:	20008ee8 	.word	0x20008ee8
 800e87c:	20008ee4 	.word	0x20008ee4
 800e880:	20008ee2 	.word	0x20008ee2
 800e884:	20008edc 	.word	0x20008edc

0800e888 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d106      	bne.n	800e8a4 <tcp_parseopt+0x1c>
 800e896:	4b32      	ldr	r3, [pc, #200]	; (800e960 <tcp_parseopt+0xd8>)
 800e898:	f240 727d 	movw	r2, #1917	; 0x77d
 800e89c:	4931      	ldr	r1, [pc, #196]	; (800e964 <tcp_parseopt+0xdc>)
 800e89e:	4832      	ldr	r0, [pc, #200]	; (800e968 <tcp_parseopt+0xe0>)
 800e8a0:	f004 fd16 	bl	80132d0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e8a4:	4b31      	ldr	r3, [pc, #196]	; (800e96c <tcp_parseopt+0xe4>)
 800e8a6:	881b      	ldrh	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d055      	beq.n	800e958 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e8ac:	4b30      	ldr	r3, [pc, #192]	; (800e970 <tcp_parseopt+0xe8>)
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	801a      	strh	r2, [r3, #0]
 800e8b2:	e045      	b.n	800e940 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e8b4:	f7ff ffb2 	bl	800e81c <tcp_get_next_optbyte>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e8bc:	7bfb      	ldrb	r3, [r7, #15]
 800e8be:	2b02      	cmp	r3, #2
 800e8c0:	d006      	beq.n	800e8d0 <tcp_parseopt+0x48>
 800e8c2:	2b02      	cmp	r3, #2
 800e8c4:	dc2b      	bgt.n	800e91e <tcp_parseopt+0x96>
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d041      	beq.n	800e94e <tcp_parseopt+0xc6>
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d127      	bne.n	800e91e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e8ce:	e037      	b.n	800e940 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e8d0:	f7ff ffa4 	bl	800e81c <tcp_get_next_optbyte>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b04      	cmp	r3, #4
 800e8d8:	d13b      	bne.n	800e952 <tcp_parseopt+0xca>
 800e8da:	4b25      	ldr	r3, [pc, #148]	; (800e970 <tcp_parseopt+0xe8>)
 800e8dc:	881b      	ldrh	r3, [r3, #0]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	4a22      	ldr	r2, [pc, #136]	; (800e96c <tcp_parseopt+0xe4>)
 800e8e2:	8812      	ldrh	r2, [r2, #0]
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	da34      	bge.n	800e952 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e8e8:	f7ff ff98 	bl	800e81c <tcp_get_next_optbyte>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	b29b      	uxth	r3, r3
 800e8f0:	021b      	lsls	r3, r3, #8
 800e8f2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e8f4:	f7ff ff92 	bl	800e81c <tcp_get_next_optbyte>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	89bb      	ldrh	r3, [r7, #12]
 800e8fe:	4313      	orrs	r3, r2
 800e900:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e902:	89bb      	ldrh	r3, [r7, #12]
 800e904:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e908:	d804      	bhi.n	800e914 <tcp_parseopt+0x8c>
 800e90a:	89bb      	ldrh	r3, [r7, #12]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d001      	beq.n	800e914 <tcp_parseopt+0x8c>
 800e910:	89ba      	ldrh	r2, [r7, #12]
 800e912:	e001      	b.n	800e918 <tcp_parseopt+0x90>
 800e914:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e91c:	e010      	b.n	800e940 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e91e:	f7ff ff7d 	bl	800e81c <tcp_get_next_optbyte>
 800e922:	4603      	mov	r3, r0
 800e924:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e926:	7afb      	ldrb	r3, [r7, #11]
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d914      	bls.n	800e956 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e92c:	7afb      	ldrb	r3, [r7, #11]
 800e92e:	b29a      	uxth	r2, r3
 800e930:	4b0f      	ldr	r3, [pc, #60]	; (800e970 <tcp_parseopt+0xe8>)
 800e932:	881b      	ldrh	r3, [r3, #0]
 800e934:	4413      	add	r3, r2
 800e936:	b29b      	uxth	r3, r3
 800e938:	3b02      	subs	r3, #2
 800e93a:	b29a      	uxth	r2, r3
 800e93c:	4b0c      	ldr	r3, [pc, #48]	; (800e970 <tcp_parseopt+0xe8>)
 800e93e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e940:	4b0b      	ldr	r3, [pc, #44]	; (800e970 <tcp_parseopt+0xe8>)
 800e942:	881a      	ldrh	r2, [r3, #0]
 800e944:	4b09      	ldr	r3, [pc, #36]	; (800e96c <tcp_parseopt+0xe4>)
 800e946:	881b      	ldrh	r3, [r3, #0]
 800e948:	429a      	cmp	r2, r3
 800e94a:	d3b3      	bcc.n	800e8b4 <tcp_parseopt+0x2c>
 800e94c:	e004      	b.n	800e958 <tcp_parseopt+0xd0>
          return;
 800e94e:	bf00      	nop
 800e950:	e002      	b.n	800e958 <tcp_parseopt+0xd0>
            return;
 800e952:	bf00      	nop
 800e954:	e000      	b.n	800e958 <tcp_parseopt+0xd0>
            return;
 800e956:	bf00      	nop
      }
    }
  }
}
 800e958:	3710      	adds	r7, #16
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	08015948 	.word	0x08015948
 800e964:	08015dac 	.word	0x08015dac
 800e968:	08015994 	.word	0x08015994
 800e96c:	20008ee0 	.word	0x20008ee0
 800e970:	20008ee8 	.word	0x20008ee8

0800e974 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e974:	b480      	push	{r7}
 800e976:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e978:	4b05      	ldr	r3, [pc, #20]	; (800e990 <tcp_trigger_input_pcb_close+0x1c>)
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	f043 0310 	orr.w	r3, r3, #16
 800e980:	b2da      	uxtb	r2, r3
 800e982:	4b03      	ldr	r3, [pc, #12]	; (800e990 <tcp_trigger_input_pcb_close+0x1c>)
 800e984:	701a      	strb	r2, [r3, #0]
}
 800e986:	bf00      	nop
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr
 800e990:	20008ef9 	.word	0x20008ef9

0800e994 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b084      	sub	sp, #16
 800e998:	af00      	add	r7, sp, #0
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	60b9      	str	r1, [r7, #8]
 800e99e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d00a      	beq.n	800e9bc <tcp_route+0x28>
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	7a1b      	ldrb	r3, [r3, #8]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d006      	beq.n	800e9bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	7a1b      	ldrb	r3, [r3, #8]
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fb fab8 	bl	8009f28 <netif_get_by_index>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	e003      	b.n	800e9c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f003 fa37 	bl	8011e30 <ip4_route>
 800e9c2:	4603      	mov	r3, r0
  }
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e9cc:	b590      	push	{r4, r7, lr}
 800e9ce:	b087      	sub	sp, #28
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	603b      	str	r3, [r7, #0]
 800e9d8:	4613      	mov	r3, r2
 800e9da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d105      	bne.n	800e9ee <tcp_create_segment+0x22>
 800e9e2:	4b44      	ldr	r3, [pc, #272]	; (800eaf4 <tcp_create_segment+0x128>)
 800e9e4:	22a3      	movs	r2, #163	; 0xa3
 800e9e6:	4944      	ldr	r1, [pc, #272]	; (800eaf8 <tcp_create_segment+0x12c>)
 800e9e8:	4844      	ldr	r0, [pc, #272]	; (800eafc <tcp_create_segment+0x130>)
 800e9ea:	f004 fc71 	bl	80132d0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d105      	bne.n	800ea00 <tcp_create_segment+0x34>
 800e9f4:	4b3f      	ldr	r3, [pc, #252]	; (800eaf4 <tcp_create_segment+0x128>)
 800e9f6:	22a4      	movs	r2, #164	; 0xa4
 800e9f8:	4941      	ldr	r1, [pc, #260]	; (800eb00 <tcp_create_segment+0x134>)
 800e9fa:	4840      	ldr	r0, [pc, #256]	; (800eafc <tcp_create_segment+0x130>)
 800e9fc:	f004 fc68 	bl	80132d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ea00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	f003 0304 	and.w	r3, r3, #4
 800ea0c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ea0e:	2003      	movs	r0, #3
 800ea10:	f7fa ff8c 	bl	800992c <memp_malloc>
 800ea14:	6138      	str	r0, [r7, #16]
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d104      	bne.n	800ea26 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ea1c:	68b8      	ldr	r0, [r7, #8]
 800ea1e:	f7fb fde3 	bl	800a5e8 <pbuf_free>
    return NULL;
 800ea22:	2300      	movs	r3, #0
 800ea24:	e061      	b.n	800eaea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ea2c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	2200      	movs	r2, #0
 800ea32:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	68ba      	ldr	r2, [r7, #8]
 800ea38:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	891a      	ldrh	r2, [r3, #8]
 800ea3e:	7dfb      	ldrb	r3, [r7, #23]
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d205      	bcs.n	800ea52 <tcp_create_segment+0x86>
 800ea46:	4b2b      	ldr	r3, [pc, #172]	; (800eaf4 <tcp_create_segment+0x128>)
 800ea48:	22b0      	movs	r2, #176	; 0xb0
 800ea4a:	492e      	ldr	r1, [pc, #184]	; (800eb04 <tcp_create_segment+0x138>)
 800ea4c:	482b      	ldr	r0, [pc, #172]	; (800eafc <tcp_create_segment+0x130>)
 800ea4e:	f004 fc3f 	bl	80132d0 <iprintf>
  seg->len = p->tot_len - optlen;
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	891a      	ldrh	r2, [r3, #8]
 800ea56:	7dfb      	ldrb	r3, [r7, #23]
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	b29a      	uxth	r2, r3
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ea62:	2114      	movs	r1, #20
 800ea64:	68b8      	ldr	r0, [r7, #8]
 800ea66:	f7fb fd29 	bl	800a4bc <pbuf_add_header>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d004      	beq.n	800ea7a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ea70:	6938      	ldr	r0, [r7, #16]
 800ea72:	f7fd f8ce 	bl	800bc12 <tcp_seg_free>
    return NULL;
 800ea76:	2300      	movs	r3, #0
 800ea78:	e037      	b.n	800eaea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	685a      	ldr	r2, [r3, #4]
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	8ada      	ldrh	r2, [r3, #22]
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	68dc      	ldr	r4, [r3, #12]
 800ea8c:	4610      	mov	r0, r2
 800ea8e:	f7fa faf7 	bl	8009080 <lwip_htons>
 800ea92:	4603      	mov	r3, r0
 800ea94:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	8b1a      	ldrh	r2, [r3, #24]
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	68dc      	ldr	r4, [r3, #12]
 800ea9e:	4610      	mov	r0, r2
 800eaa0:	f7fa faee 	bl	8009080 <lwip_htons>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	68dc      	ldr	r4, [r3, #12]
 800eaac:	6838      	ldr	r0, [r7, #0]
 800eaae:	f7fa fafc 	bl	80090aa <lwip_htonl>
 800eab2:	4603      	mov	r3, r0
 800eab4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800eab6:	7dfb      	ldrb	r3, [r7, #23]
 800eab8:	089b      	lsrs	r3, r3, #2
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	3305      	adds	r3, #5
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	031b      	lsls	r3, r3, #12
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	79fb      	ldrb	r3, [r7, #7]
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	4313      	orrs	r3, r2
 800eacc:	b29a      	uxth	r2, r3
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	68dc      	ldr	r4, [r3, #12]
 800ead2:	4610      	mov	r0, r2
 800ead4:	f7fa fad4 	bl	8009080 <lwip_htons>
 800ead8:	4603      	mov	r3, r0
 800eada:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	68db      	ldr	r3, [r3, #12]
 800eae0:	2200      	movs	r2, #0
 800eae2:	749a      	strb	r2, [r3, #18]
 800eae4:	2200      	movs	r2, #0
 800eae6:	74da      	strb	r2, [r3, #19]
  return seg;
 800eae8:	693b      	ldr	r3, [r7, #16]
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	371c      	adds	r7, #28
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd90      	pop	{r4, r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	08015dc8 	.word	0x08015dc8
 800eaf8:	08015dfc 	.word	0x08015dfc
 800eafc:	08015e1c 	.word	0x08015e1c
 800eb00:	08015e44 	.word	0x08015e44
 800eb04:	08015e68 	.word	0x08015e68

0800eb08 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800eb08:	b590      	push	{r4, r7, lr}
 800eb0a:	b08b      	sub	sp, #44	; 0x2c
 800eb0c:	af02      	add	r7, sp, #8
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	460b      	mov	r3, r1
 800eb12:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800eb14:	2300      	movs	r3, #0
 800eb16:	61fb      	str	r3, [r7, #28]
 800eb18:	2300      	movs	r3, #0
 800eb1a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d106      	bne.n	800eb34 <tcp_split_unsent_seg+0x2c>
 800eb26:	4b95      	ldr	r3, [pc, #596]	; (800ed7c <tcp_split_unsent_seg+0x274>)
 800eb28:	f240 324b 	movw	r2, #843	; 0x34b
 800eb2c:	4994      	ldr	r1, [pc, #592]	; (800ed80 <tcp_split_unsent_seg+0x278>)
 800eb2e:	4895      	ldr	r0, [pc, #596]	; (800ed84 <tcp_split_unsent_seg+0x27c>)
 800eb30:	f004 fbce 	bl	80132d0 <iprintf>

  useg = pcb->unsent;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb38:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d102      	bne.n	800eb46 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800eb40:	f04f 33ff 	mov.w	r3, #4294967295
 800eb44:	e116      	b.n	800ed74 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800eb46:	887b      	ldrh	r3, [r7, #2]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d109      	bne.n	800eb60 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800eb4c:	4b8b      	ldr	r3, [pc, #556]	; (800ed7c <tcp_split_unsent_seg+0x274>)
 800eb4e:	f240 3253 	movw	r2, #851	; 0x353
 800eb52:	498d      	ldr	r1, [pc, #564]	; (800ed88 <tcp_split_unsent_seg+0x280>)
 800eb54:	488b      	ldr	r0, [pc, #556]	; (800ed84 <tcp_split_unsent_seg+0x27c>)
 800eb56:	f004 fbbb 	bl	80132d0 <iprintf>
    return ERR_VAL;
 800eb5a:	f06f 0305 	mvn.w	r3, #5
 800eb5e:	e109      	b.n	800ed74 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	891b      	ldrh	r3, [r3, #8]
 800eb64:	887a      	ldrh	r2, [r7, #2]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d301      	bcc.n	800eb6e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	e102      	b.n	800ed74 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb72:	887a      	ldrh	r2, [r7, #2]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d906      	bls.n	800eb86 <tcp_split_unsent_seg+0x7e>
 800eb78:	4b80      	ldr	r3, [pc, #512]	; (800ed7c <tcp_split_unsent_seg+0x274>)
 800eb7a:	f240 325b 	movw	r2, #859	; 0x35b
 800eb7e:	4983      	ldr	r1, [pc, #524]	; (800ed8c <tcp_split_unsent_seg+0x284>)
 800eb80:	4880      	ldr	r0, [pc, #512]	; (800ed84 <tcp_split_unsent_seg+0x27c>)
 800eb82:	f004 fba5 	bl	80132d0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	891b      	ldrh	r3, [r3, #8]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d106      	bne.n	800eb9c <tcp_split_unsent_seg+0x94>
 800eb8e:	4b7b      	ldr	r3, [pc, #492]	; (800ed7c <tcp_split_unsent_seg+0x274>)
 800eb90:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800eb94:	497e      	ldr	r1, [pc, #504]	; (800ed90 <tcp_split_unsent_seg+0x288>)
 800eb96:	487b      	ldr	r0, [pc, #492]	; (800ed84 <tcp_split_unsent_seg+0x27c>)
 800eb98:	f004 fb9a 	bl	80132d0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	7a9b      	ldrb	r3, [r3, #10]
 800eba0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800eba2:	7bfb      	ldrb	r3, [r7, #15]
 800eba4:	009b      	lsls	r3, r3, #2
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	f003 0304 	and.w	r3, r3, #4
 800ebac:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	891a      	ldrh	r2, [r3, #8]
 800ebb2:	887b      	ldrh	r3, [r7, #2]
 800ebb4:	1ad3      	subs	r3, r2, r3
 800ebb6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ebb8:	7bbb      	ldrb	r3, [r7, #14]
 800ebba:	b29a      	uxth	r2, r3
 800ebbc:	89bb      	ldrh	r3, [r7, #12]
 800ebbe:	4413      	add	r3, r2
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	2036      	movs	r0, #54	; 0x36
 800ebca:	f7fb fa29 	bl	800a020 <pbuf_alloc>
 800ebce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	f000 80b7 	beq.w	800ed46 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	891a      	ldrh	r2, [r3, #8]
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	891b      	ldrh	r3, [r3, #8]
 800ebe2:	1ad3      	subs	r3, r2, r3
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	887b      	ldrh	r3, [r7, #2]
 800ebe8:	4413      	add	r3, r2
 800ebea:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	6858      	ldr	r0, [r3, #4]
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	685a      	ldr	r2, [r3, #4]
 800ebf4:	7bbb      	ldrb	r3, [r7, #14]
 800ebf6:	18d1      	adds	r1, r2, r3
 800ebf8:	897b      	ldrh	r3, [r7, #10]
 800ebfa:	89ba      	ldrh	r2, [r7, #12]
 800ebfc:	f7fb feee 	bl	800a9dc <pbuf_copy_partial>
 800ec00:	4603      	mov	r3, r0
 800ec02:	461a      	mov	r2, r3
 800ec04:	89bb      	ldrh	r3, [r7, #12]
 800ec06:	4293      	cmp	r3, r2
 800ec08:	f040 809f 	bne.w	800ed4a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	899b      	ldrh	r3, [r3, #12]
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7fa fa33 	bl	8009080 <lwip_htons>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec22:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ec24:	2300      	movs	r3, #0
 800ec26:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ec28:	7efb      	ldrb	r3, [r7, #27]
 800ec2a:	f003 0308 	and.w	r3, r3, #8
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d007      	beq.n	800ec42 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ec32:	7efb      	ldrb	r3, [r7, #27]
 800ec34:	f023 0308 	bic.w	r3, r3, #8
 800ec38:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ec3a:	7ebb      	ldrb	r3, [r7, #26]
 800ec3c:	f043 0308 	orr.w	r3, r3, #8
 800ec40:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ec42:	7efb      	ldrb	r3, [r7, #27]
 800ec44:	f003 0301 	and.w	r3, r3, #1
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d007      	beq.n	800ec5c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ec4c:	7efb      	ldrb	r3, [r7, #27]
 800ec4e:	f023 0301 	bic.w	r3, r3, #1
 800ec52:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ec54:	7ebb      	ldrb	r3, [r7, #26]
 800ec56:	f043 0301 	orr.w	r3, r3, #1
 800ec5a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7fa fa21 	bl	80090aa <lwip_htonl>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	887b      	ldrh	r3, [r7, #2]
 800ec6c:	18d1      	adds	r1, r2, r3
 800ec6e:	7eba      	ldrb	r2, [r7, #26]
 800ec70:	7bfb      	ldrb	r3, [r7, #15]
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	460b      	mov	r3, r1
 800ec76:	6939      	ldr	r1, [r7, #16]
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f7ff fea7 	bl	800e9cc <tcp_create_segment>
 800ec7e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d063      	beq.n	800ed4e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fb fd34 	bl	800a6f8 <pbuf_clen>
 800ec90:	4603      	mov	r3, r0
 800ec92:	461a      	mov	r2, r3
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec9a:	1a9b      	subs	r3, r3, r2
 800ec9c:	b29a      	uxth	r2, r3
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	6858      	ldr	r0, [r3, #4]
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	891a      	ldrh	r2, [r3, #8]
 800ecae:	89bb      	ldrh	r3, [r7, #12]
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	f7fb fb11 	bl	800a2dc <pbuf_realloc>
  useg->len -= remainder;
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	891a      	ldrh	r2, [r3, #8]
 800ecbe:	89bb      	ldrh	r3, [r7, #12]
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	68db      	ldr	r3, [r3, #12]
 800eccc:	899b      	ldrh	r3, [r3, #12]
 800ecce:	b29c      	uxth	r4, r3
 800ecd0:	7efb      	ldrb	r3, [r7, #27]
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7fa f9d3 	bl	8009080 <lwip_htons>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	461a      	mov	r2, r3
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	4322      	orrs	r2, r4
 800ece4:	b292      	uxth	r2, r2
 800ece6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	4618      	mov	r0, r3
 800ecee:	f7fb fd03 	bl	800a6f8 <pbuf_clen>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ecfc:	4413      	add	r3, r2
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ed06:	69fb      	ldr	r3, [r7, #28]
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7fb fcf4 	bl	800a6f8 <pbuf_clen>
 800ed10:	4603      	mov	r3, r0
 800ed12:	461a      	mov	r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed1a:	4413      	add	r3, r2
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	69fa      	ldr	r2, [r7, #28]
 800ed30:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d103      	bne.n	800ed42 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ed42:	2300      	movs	r3, #0
 800ed44:	e016      	b.n	800ed74 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ed46:	bf00      	nop
 800ed48:	e002      	b.n	800ed50 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ed4a:	bf00      	nop
 800ed4c:	e000      	b.n	800ed50 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ed4e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d006      	beq.n	800ed64 <tcp_split_unsent_seg+0x25c>
 800ed56:	4b09      	ldr	r3, [pc, #36]	; (800ed7c <tcp_split_unsent_seg+0x274>)
 800ed58:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ed5c:	490d      	ldr	r1, [pc, #52]	; (800ed94 <tcp_split_unsent_seg+0x28c>)
 800ed5e:	4809      	ldr	r0, [pc, #36]	; (800ed84 <tcp_split_unsent_seg+0x27c>)
 800ed60:	f004 fab6 	bl	80132d0 <iprintf>
  if (p != NULL) {
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d002      	beq.n	800ed70 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ed6a:	6938      	ldr	r0, [r7, #16]
 800ed6c:	f7fb fc3c 	bl	800a5e8 <pbuf_free>
  }

  return ERR_MEM;
 800ed70:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3724      	adds	r7, #36	; 0x24
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd90      	pop	{r4, r7, pc}
 800ed7c:	08015dc8 	.word	0x08015dc8
 800ed80:	0801615c 	.word	0x0801615c
 800ed84:	08015e1c 	.word	0x08015e1c
 800ed88:	08016180 	.word	0x08016180
 800ed8c:	080161a4 	.word	0x080161a4
 800ed90:	080161b4 	.word	0x080161b4
 800ed94:	080161c4 	.word	0x080161c4

0800ed98 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ed98:	b590      	push	{r4, r7, lr}
 800ed9a:	b085      	sub	sp, #20
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d106      	bne.n	800edb4 <tcp_send_fin+0x1c>
 800eda6:	4b21      	ldr	r3, [pc, #132]	; (800ee2c <tcp_send_fin+0x94>)
 800eda8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800edac:	4920      	ldr	r1, [pc, #128]	; (800ee30 <tcp_send_fin+0x98>)
 800edae:	4821      	ldr	r0, [pc, #132]	; (800ee34 <tcp_send_fin+0x9c>)
 800edb0:	f004 fa8e 	bl	80132d0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d02e      	beq.n	800ee1a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edc0:	60fb      	str	r3, [r7, #12]
 800edc2:	e002      	b.n	800edca <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d1f8      	bne.n	800edc4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	899b      	ldrh	r3, [r3, #12]
 800edd8:	b29b      	uxth	r3, r3
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fa f950 	bl	8009080 <lwip_htons>
 800ede0:	4603      	mov	r3, r0
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	f003 0307 	and.w	r3, r3, #7
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d116      	bne.n	800ee1a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	899b      	ldrh	r3, [r3, #12]
 800edf2:	b29c      	uxth	r4, r3
 800edf4:	2001      	movs	r0, #1
 800edf6:	f7fa f943 	bl	8009080 <lwip_htons>
 800edfa:	4603      	mov	r3, r0
 800edfc:	461a      	mov	r2, r3
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	4322      	orrs	r2, r4
 800ee04:	b292      	uxth	r2, r2
 800ee06:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	8b5b      	ldrh	r3, [r3, #26]
 800ee0c:	f043 0320 	orr.w	r3, r3, #32
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ee16:	2300      	movs	r3, #0
 800ee18:	e004      	b.n	800ee24 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ee1a:	2101      	movs	r1, #1
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f000 f80b 	bl	800ee38 <tcp_enqueue_flags>
 800ee22:	4603      	mov	r3, r0
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3714      	adds	r7, #20
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd90      	pop	{r4, r7, pc}
 800ee2c:	08015dc8 	.word	0x08015dc8
 800ee30:	080161d0 	.word	0x080161d0
 800ee34:	08015e1c 	.word	0x08015e1c

0800ee38 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b08a      	sub	sp, #40	; 0x28
 800ee3c:	af02      	add	r7, sp, #8
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	460b      	mov	r3, r1
 800ee42:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ee44:	2300      	movs	r3, #0
 800ee46:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ee4c:	78fb      	ldrb	r3, [r7, #3]
 800ee4e:	f003 0303 	and.w	r3, r3, #3
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d106      	bne.n	800ee64 <tcp_enqueue_flags+0x2c>
 800ee56:	4b67      	ldr	r3, [pc, #412]	; (800eff4 <tcp_enqueue_flags+0x1bc>)
 800ee58:	f240 4211 	movw	r2, #1041	; 0x411
 800ee5c:	4966      	ldr	r1, [pc, #408]	; (800eff8 <tcp_enqueue_flags+0x1c0>)
 800ee5e:	4867      	ldr	r0, [pc, #412]	; (800effc <tcp_enqueue_flags+0x1c4>)
 800ee60:	f004 fa36 	bl	80132d0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d106      	bne.n	800ee78 <tcp_enqueue_flags+0x40>
 800ee6a:	4b62      	ldr	r3, [pc, #392]	; (800eff4 <tcp_enqueue_flags+0x1bc>)
 800ee6c:	f240 4213 	movw	r2, #1043	; 0x413
 800ee70:	4963      	ldr	r1, [pc, #396]	; (800f000 <tcp_enqueue_flags+0x1c8>)
 800ee72:	4862      	ldr	r0, [pc, #392]	; (800effc <tcp_enqueue_flags+0x1c4>)
 800ee74:	f004 fa2c 	bl	80132d0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ee78:	78fb      	ldrb	r3, [r7, #3]
 800ee7a:	f003 0302 	and.w	r3, r3, #2
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d001      	beq.n	800ee86 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ee82:	2301      	movs	r3, #1
 800ee84:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ee86:	7ffb      	ldrb	r3, [r7, #31]
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	f003 0304 	and.w	r3, r3, #4
 800ee90:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ee92:	7dfb      	ldrb	r3, [r7, #23]
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	2036      	movs	r0, #54	; 0x36
 800ee9e:	f7fb f8bf 	bl	800a020 <pbuf_alloc>
 800eea2:	6138      	str	r0, [r7, #16]
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d109      	bne.n	800eebe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	8b5b      	ldrh	r3, [r3, #26]
 800eeae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eeb2:	b29a      	uxth	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800eeb8:	f04f 33ff 	mov.w	r3, #4294967295
 800eebc:	e095      	b.n	800efea <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	895a      	ldrh	r2, [r3, #10]
 800eec2:	7dfb      	ldrb	r3, [r7, #23]
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d206      	bcs.n	800eed8 <tcp_enqueue_flags+0xa0>
 800eeca:	4b4a      	ldr	r3, [pc, #296]	; (800eff4 <tcp_enqueue_flags+0x1bc>)
 800eecc:	f240 4239 	movw	r2, #1081	; 0x439
 800eed0:	494c      	ldr	r1, [pc, #304]	; (800f004 <tcp_enqueue_flags+0x1cc>)
 800eed2:	484a      	ldr	r0, [pc, #296]	; (800effc <tcp_enqueue_flags+0x1c4>)
 800eed4:	f004 f9fc 	bl	80132d0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800eedc:	78fa      	ldrb	r2, [r7, #3]
 800eede:	7ffb      	ldrb	r3, [r7, #31]
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	460b      	mov	r3, r1
 800eee4:	6939      	ldr	r1, [r7, #16]
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f7ff fd70 	bl	800e9cc <tcp_create_segment>
 800eeec:	60f8      	str	r0, [r7, #12]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d109      	bne.n	800ef08 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	8b5b      	ldrh	r3, [r3, #26]
 800eef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eefc:	b29a      	uxth	r2, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ef02:	f04f 33ff 	mov.w	r3, #4294967295
 800ef06:	e070      	b.n	800efea <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	f003 0303 	and.w	r3, r3, #3
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d006      	beq.n	800ef22 <tcp_enqueue_flags+0xea>
 800ef14:	4b37      	ldr	r3, [pc, #220]	; (800eff4 <tcp_enqueue_flags+0x1bc>)
 800ef16:	f240 4242 	movw	r2, #1090	; 0x442
 800ef1a:	493b      	ldr	r1, [pc, #236]	; (800f008 <tcp_enqueue_flags+0x1d0>)
 800ef1c:	4837      	ldr	r0, [pc, #220]	; (800effc <tcp_enqueue_flags+0x1c4>)
 800ef1e:	f004 f9d7 	bl	80132d0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	891b      	ldrh	r3, [r3, #8]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d006      	beq.n	800ef38 <tcp_enqueue_flags+0x100>
 800ef2a:	4b32      	ldr	r3, [pc, #200]	; (800eff4 <tcp_enqueue_flags+0x1bc>)
 800ef2c:	f240 4243 	movw	r2, #1091	; 0x443
 800ef30:	4936      	ldr	r1, [pc, #216]	; (800f00c <tcp_enqueue_flags+0x1d4>)
 800ef32:	4832      	ldr	r0, [pc, #200]	; (800effc <tcp_enqueue_flags+0x1c4>)
 800ef34:	f004 f9cc 	bl	80132d0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d103      	bne.n	800ef48 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	66da      	str	r2, [r3, #108]	; 0x6c
 800ef46:	e00d      	b.n	800ef64 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef4c:	61bb      	str	r3, [r7, #24]
 800ef4e:	e002      	b.n	800ef56 <tcp_enqueue_flags+0x11e>
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	61bb      	str	r3, [r7, #24]
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1f8      	bne.n	800ef50 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ef5e:	69bb      	ldr	r3, [r7, #24]
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2200      	movs	r2, #0
 800ef68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ef6c:	78fb      	ldrb	r3, [r7, #3]
 800ef6e:	f003 0302 	and.w	r3, r3, #2
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d104      	bne.n	800ef80 <tcp_enqueue_flags+0x148>
 800ef76:	78fb      	ldrb	r3, [r7, #3]
 800ef78:	f003 0301 	and.w	r3, r3, #1
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d004      	beq.n	800ef8a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef84:	1c5a      	adds	r2, r3, #1
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ef8a:	78fb      	ldrb	r3, [r7, #3]
 800ef8c:	f003 0301 	and.w	r3, r3, #1
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d006      	beq.n	800efa2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	8b5b      	ldrh	r3, [r3, #26]
 800ef98:	f043 0320 	orr.w	r3, r3, #32
 800ef9c:	b29a      	uxth	r2, r3
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fb fba6 	bl	800a6f8 <pbuf_clen>
 800efac:	4603      	mov	r3, r0
 800efae:	461a      	mov	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800efb6:	4413      	add	r3, r2
 800efb8:	b29a      	uxth	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d00e      	beq.n	800efe8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d10a      	bne.n	800efe8 <tcp_enqueue_flags+0x1b0>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d106      	bne.n	800efe8 <tcp_enqueue_flags+0x1b0>
 800efda:	4b06      	ldr	r3, [pc, #24]	; (800eff4 <tcp_enqueue_flags+0x1bc>)
 800efdc:	f240 4265 	movw	r2, #1125	; 0x465
 800efe0:	490b      	ldr	r1, [pc, #44]	; (800f010 <tcp_enqueue_flags+0x1d8>)
 800efe2:	4806      	ldr	r0, [pc, #24]	; (800effc <tcp_enqueue_flags+0x1c4>)
 800efe4:	f004 f974 	bl	80132d0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800efe8:	2300      	movs	r3, #0
}
 800efea:	4618      	mov	r0, r3
 800efec:	3720      	adds	r7, #32
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	08015dc8 	.word	0x08015dc8
 800eff8:	080161ec 	.word	0x080161ec
 800effc:	08015e1c 	.word	0x08015e1c
 800f000:	08016244 	.word	0x08016244
 800f004:	08016264 	.word	0x08016264
 800f008:	080162a0 	.word	0x080162a0
 800f00c:	080162b8 	.word	0x080162b8
 800f010:	080162e4 	.word	0x080162e4

0800f014 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f014:	b5b0      	push	{r4, r5, r7, lr}
 800f016:	b08a      	sub	sp, #40	; 0x28
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d106      	bne.n	800f030 <tcp_output+0x1c>
 800f022:	4b8a      	ldr	r3, [pc, #552]	; (800f24c <tcp_output+0x238>)
 800f024:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f028:	4989      	ldr	r1, [pc, #548]	; (800f250 <tcp_output+0x23c>)
 800f02a:	488a      	ldr	r0, [pc, #552]	; (800f254 <tcp_output+0x240>)
 800f02c:	f004 f950 	bl	80132d0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	7d1b      	ldrb	r3, [r3, #20]
 800f034:	2b01      	cmp	r3, #1
 800f036:	d106      	bne.n	800f046 <tcp_output+0x32>
 800f038:	4b84      	ldr	r3, [pc, #528]	; (800f24c <tcp_output+0x238>)
 800f03a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f03e:	4986      	ldr	r1, [pc, #536]	; (800f258 <tcp_output+0x244>)
 800f040:	4884      	ldr	r0, [pc, #528]	; (800f254 <tcp_output+0x240>)
 800f042:	f004 f945 	bl	80132d0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f046:	4b85      	ldr	r3, [pc, #532]	; (800f25c <tcp_output+0x248>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d101      	bne.n	800f054 <tcp_output+0x40>
    return ERR_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	e1ce      	b.n	800f3f2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f060:	4293      	cmp	r3, r2
 800f062:	bf28      	it	cs
 800f064:	4613      	movcs	r3, r2
 800f066:	b29b      	uxth	r3, r3
 800f068:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f06e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f072:	2b00      	cmp	r3, #0
 800f074:	d10b      	bne.n	800f08e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	8b5b      	ldrh	r3, [r3, #26]
 800f07a:	f003 0302 	and.w	r3, r3, #2
 800f07e:	2b00      	cmp	r3, #0
 800f080:	f000 81aa 	beq.w	800f3d8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 fdcb 	bl	800fc20 <tcp_send_empty_ack>
 800f08a:	4603      	mov	r3, r0
 800f08c:	e1b1      	b.n	800f3f2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f08e:	6879      	ldr	r1, [r7, #4]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	3304      	adds	r3, #4
 800f094:	461a      	mov	r2, r3
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7ff fc7c 	bl	800e994 <tcp_route>
 800f09c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d102      	bne.n	800f0aa <tcp_output+0x96>
    return ERR_RTE;
 800f0a4:	f06f 0303 	mvn.w	r3, #3
 800f0a8:	e1a3      	b.n	800f3f2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d003      	beq.n	800f0b8 <tcp_output+0xa4>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d111      	bne.n	800f0dc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d002      	beq.n	800f0c4 <tcp_output+0xb0>
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	3304      	adds	r3, #4
 800f0c2:	e000      	b.n	800f0c6 <tcp_output+0xb2>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d102      	bne.n	800f0d4 <tcp_output+0xc0>
      return ERR_RTE;
 800f0ce:	f06f 0303 	mvn.w	r3, #3
 800f0d2:	e18e      	b.n	800f3f2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7f9 ffe1 	bl	80090aa <lwip_htonl>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0f2:	8912      	ldrh	r2, [r2, #8]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	69ba      	ldr	r2, [r7, #24]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d227      	bcs.n	800f14c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f102:	461a      	mov	r2, r3
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	4293      	cmp	r3, r2
 800f108:	d114      	bne.n	800f134 <tcp_output+0x120>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d110      	bne.n	800f134 <tcp_output+0x120>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d10b      	bne.n	800f134 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2200      	movs	r2, #0
 800f120:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2201      	movs	r2, #1
 800f128:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	8b5b      	ldrh	r3, [r3, #26]
 800f138:	f003 0302 	and.w	r3, r3, #2
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	f000 814d 	beq.w	800f3dc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 fd6c 	bl	800fc20 <tcp_send_empty_ack>
 800f148:	4603      	mov	r3, r0
 800f14a:	e152      	b.n	800f3f2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2200      	movs	r2, #0
 800f150:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f158:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f15a:	6a3b      	ldr	r3, [r7, #32]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	f000 811c 	beq.w	800f39a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f162:	e002      	b.n	800f16a <tcp_output+0x156>
 800f164:	6a3b      	ldr	r3, [r7, #32]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	623b      	str	r3, [r7, #32]
 800f16a:	6a3b      	ldr	r3, [r7, #32]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1f8      	bne.n	800f164 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f172:	e112      	b.n	800f39a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	899b      	ldrh	r3, [r3, #12]
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7f9 ff7f 	bl	8009080 <lwip_htons>
 800f182:	4603      	mov	r3, r0
 800f184:	b2db      	uxtb	r3, r3
 800f186:	f003 0304 	and.w	r3, r3, #4
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d006      	beq.n	800f19c <tcp_output+0x188>
 800f18e:	4b2f      	ldr	r3, [pc, #188]	; (800f24c <tcp_output+0x238>)
 800f190:	f240 5236 	movw	r2, #1334	; 0x536
 800f194:	4932      	ldr	r1, [pc, #200]	; (800f260 <tcp_output+0x24c>)
 800f196:	482f      	ldr	r0, [pc, #188]	; (800f254 <tcp_output+0x240>)
 800f198:	f004 f89a 	bl	80132d0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d01f      	beq.n	800f1e4 <tcp_output+0x1d0>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	8b5b      	ldrh	r3, [r3, #26]
 800f1a8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d119      	bne.n	800f1e4 <tcp_output+0x1d0>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d00b      	beq.n	800f1d0 <tcp_output+0x1bc>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d110      	bne.n	800f1e4 <tcp_output+0x1d0>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1c6:	891a      	ldrh	r2, [r3, #8]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d209      	bcs.n	800f1e4 <tcp_output+0x1d0>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d004      	beq.n	800f1e4 <tcp_output+0x1d0>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1e0:	2b08      	cmp	r3, #8
 800f1e2:	d901      	bls.n	800f1e8 <tcp_output+0x1d4>
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	e000      	b.n	800f1ea <tcp_output+0x1d6>
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d106      	bne.n	800f1fc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	8b5b      	ldrh	r3, [r3, #26]
 800f1f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	f000 80e4 	beq.w	800f3c4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	7d1b      	ldrb	r3, [r3, #20]
 800f200:	2b02      	cmp	r3, #2
 800f202:	d00d      	beq.n	800f220 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f206:	68db      	ldr	r3, [r3, #12]
 800f208:	899b      	ldrh	r3, [r3, #12]
 800f20a:	b29c      	uxth	r4, r3
 800f20c:	2010      	movs	r0, #16
 800f20e:	f7f9 ff37 	bl	8009080 <lwip_htons>
 800f212:	4603      	mov	r3, r0
 800f214:	461a      	mov	r2, r3
 800f216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f218:	68db      	ldr	r3, [r3, #12]
 800f21a:	4322      	orrs	r2, r4
 800f21c:	b292      	uxth	r2, r2
 800f21e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f220:	697a      	ldr	r2, [r7, #20]
 800f222:	6879      	ldr	r1, [r7, #4]
 800f224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f226:	f000 f909 	bl	800f43c <tcp_output_segment>
 800f22a:	4603      	mov	r3, r0
 800f22c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f22e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d016      	beq.n	800f264 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	8b5b      	ldrh	r3, [r3, #26]
 800f23a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f23e:	b29a      	uxth	r2, r3
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	835a      	strh	r2, [r3, #26]
      return err;
 800f244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f248:	e0d3      	b.n	800f3f2 <tcp_output+0x3de>
 800f24a:	bf00      	nop
 800f24c:	08015dc8 	.word	0x08015dc8
 800f250:	0801630c 	.word	0x0801630c
 800f254:	08015e1c 	.word	0x08015e1c
 800f258:	08016324 	.word	0x08016324
 800f25c:	20008f00 	.word	0x20008f00
 800f260:	0801634c 	.word	0x0801634c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	7d1b      	ldrb	r3, [r3, #20]
 800f270:	2b02      	cmp	r3, #2
 800f272:	d006      	beq.n	800f282 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	8b5b      	ldrh	r3, [r3, #26]
 800f278:	f023 0303 	bic.w	r3, r3, #3
 800f27c:	b29a      	uxth	r2, r3
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	4618      	mov	r0, r3
 800f28a:	f7f9 ff0e 	bl	80090aa <lwip_htonl>
 800f28e:	4604      	mov	r4, r0
 800f290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f292:	891b      	ldrh	r3, [r3, #8]
 800f294:	461d      	mov	r5, r3
 800f296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f298:	68db      	ldr	r3, [r3, #12]
 800f29a:	899b      	ldrh	r3, [r3, #12]
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7f9 feee 	bl	8009080 <lwip_htons>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	f003 0303 	and.w	r3, r3, #3
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d001      	beq.n	800f2b4 <tcp_output+0x2a0>
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	e000      	b.n	800f2b6 <tcp_output+0x2a2>
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	442b      	add	r3, r5
 800f2b8:	4423      	add	r3, r4
 800f2ba:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	da02      	bge.n	800f2ce <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	68ba      	ldr	r2, [r7, #8]
 800f2cc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d0:	891b      	ldrh	r3, [r3, #8]
 800f2d2:	461c      	mov	r4, r3
 800f2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	899b      	ldrh	r3, [r3, #12]
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7f9 fecf 	bl	8009080 <lwip_htons>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	f003 0303 	and.w	r3, r3, #3
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d001      	beq.n	800f2f2 <tcp_output+0x2de>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	e000      	b.n	800f2f4 <tcp_output+0x2e0>
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	4423      	add	r3, r4
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d049      	beq.n	800f38e <tcp_output+0x37a>
      seg->next = NULL;
 800f2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f304:	2b00      	cmp	r3, #0
 800f306:	d105      	bne.n	800f314 <tcp_output+0x300>
        pcb->unacked = seg;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f30c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f310:	623b      	str	r3, [r7, #32]
 800f312:	e03f      	b.n	800f394 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7f9 fec5 	bl	80090aa <lwip_htonl>
 800f320:	4604      	mov	r4, r0
 800f322:	6a3b      	ldr	r3, [r7, #32]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	4618      	mov	r0, r3
 800f32a:	f7f9 febe 	bl	80090aa <lwip_htonl>
 800f32e:	4603      	mov	r3, r0
 800f330:	1ae3      	subs	r3, r4, r3
 800f332:	2b00      	cmp	r3, #0
 800f334:	da24      	bge.n	800f380 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	3370      	adds	r3, #112	; 0x70
 800f33a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f33c:	e002      	b.n	800f344 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d011      	beq.n	800f370 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	4618      	mov	r0, r3
 800f356:	f7f9 fea8 	bl	80090aa <lwip_htonl>
 800f35a:	4604      	mov	r4, r0
 800f35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	4618      	mov	r0, r3
 800f364:	f7f9 fea1 	bl	80090aa <lwip_htonl>
 800f368:	4603      	mov	r3, r0
 800f36a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	dbe6      	blt.n	800f33e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f376:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f378:	69fb      	ldr	r3, [r7, #28]
 800f37a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f37c:	601a      	str	r2, [r3, #0]
 800f37e:	e009      	b.n	800f394 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f380:	6a3b      	ldr	r3, [r7, #32]
 800f382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f384:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f386:	6a3b      	ldr	r3, [r7, #32]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	623b      	str	r3, [r7, #32]
 800f38c:	e002      	b.n	800f394 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f38e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f390:	f7fc fc3f 	bl	800bc12 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f398:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d012      	beq.n	800f3c6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a2:	68db      	ldr	r3, [r3, #12]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7f9 fe7f 	bl	80090aa <lwip_htonl>
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3b6:	8912      	ldrh	r2, [r2, #8]
 800f3b8:	4413      	add	r3, r2
  while (seg != NULL &&
 800f3ba:	69ba      	ldr	r2, [r7, #24]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	f4bf aed9 	bcs.w	800f174 <tcp_output+0x160>
 800f3c2:	e000      	b.n	800f3c6 <tcp_output+0x3b2>
      break;
 800f3c4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d108      	bne.n	800f3e0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f3d6:	e004      	b.n	800f3e2 <tcp_output+0x3ce>
    goto output_done;
 800f3d8:	bf00      	nop
 800f3da:	e002      	b.n	800f3e2 <tcp_output+0x3ce>
    goto output_done;
 800f3dc:	bf00      	nop
 800f3de:	e000      	b.n	800f3e2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f3e0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	8b5b      	ldrh	r3, [r3, #26]
 800f3e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f3f0:	2300      	movs	r3, #0
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3728      	adds	r7, #40	; 0x28
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bdb0      	pop	{r4, r5, r7, pc}
 800f3fa:	bf00      	nop

0800f3fc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d106      	bne.n	800f418 <tcp_output_segment_busy+0x1c>
 800f40a:	4b09      	ldr	r3, [pc, #36]	; (800f430 <tcp_output_segment_busy+0x34>)
 800f40c:	f240 529a 	movw	r2, #1434	; 0x59a
 800f410:	4908      	ldr	r1, [pc, #32]	; (800f434 <tcp_output_segment_busy+0x38>)
 800f412:	4809      	ldr	r0, [pc, #36]	; (800f438 <tcp_output_segment_busy+0x3c>)
 800f414:	f003 ff5c 	bl	80132d0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	7b9b      	ldrb	r3, [r3, #14]
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d001      	beq.n	800f426 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f422:	2301      	movs	r3, #1
 800f424:	e000      	b.n	800f428 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f426:	2300      	movs	r3, #0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3708      	adds	r7, #8
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	08015dc8 	.word	0x08015dc8
 800f434:	08016364 	.word	0x08016364
 800f438:	08015e1c 	.word	0x08015e1c

0800f43c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f43c:	b5b0      	push	{r4, r5, r7, lr}
 800f43e:	b08c      	sub	sp, #48	; 0x30
 800f440:	af04      	add	r7, sp, #16
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d106      	bne.n	800f45c <tcp_output_segment+0x20>
 800f44e:	4b63      	ldr	r3, [pc, #396]	; (800f5dc <tcp_output_segment+0x1a0>)
 800f450:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f454:	4962      	ldr	r1, [pc, #392]	; (800f5e0 <tcp_output_segment+0x1a4>)
 800f456:	4863      	ldr	r0, [pc, #396]	; (800f5e4 <tcp_output_segment+0x1a8>)
 800f458:	f003 ff3a 	bl	80132d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d106      	bne.n	800f470 <tcp_output_segment+0x34>
 800f462:	4b5e      	ldr	r3, [pc, #376]	; (800f5dc <tcp_output_segment+0x1a0>)
 800f464:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f468:	495f      	ldr	r1, [pc, #380]	; (800f5e8 <tcp_output_segment+0x1ac>)
 800f46a:	485e      	ldr	r0, [pc, #376]	; (800f5e4 <tcp_output_segment+0x1a8>)
 800f46c:	f003 ff30 	bl	80132d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d106      	bne.n	800f484 <tcp_output_segment+0x48>
 800f476:	4b59      	ldr	r3, [pc, #356]	; (800f5dc <tcp_output_segment+0x1a0>)
 800f478:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f47c:	495b      	ldr	r1, [pc, #364]	; (800f5ec <tcp_output_segment+0x1b0>)
 800f47e:	4859      	ldr	r0, [pc, #356]	; (800f5e4 <tcp_output_segment+0x1a8>)
 800f480:	f003 ff26 	bl	80132d0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f484:	68f8      	ldr	r0, [r7, #12]
 800f486:	f7ff ffb9 	bl	800f3fc <tcp_output_segment_busy>
 800f48a:	4603      	mov	r3, r0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d001      	beq.n	800f494 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f490:	2300      	movs	r3, #0
 800f492:	e09f      	b.n	800f5d4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	68dc      	ldr	r4, [r3, #12]
 800f49c:	4610      	mov	r0, r2
 800f49e:	f7f9 fe04 	bl	80090aa <lwip_htonl>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	68dc      	ldr	r4, [r3, #12]
 800f4ae:	4610      	mov	r0, r2
 800f4b0:	f7f9 fde6 	bl	8009080 <lwip_htons>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4bc:	68ba      	ldr	r2, [r7, #8]
 800f4be:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f4c0:	441a      	add	r2, r3
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	3314      	adds	r3, #20
 800f4cc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	7a9b      	ldrb	r3, [r3, #10]
 800f4d2:	f003 0301 	and.w	r3, r3, #1
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d015      	beq.n	800f506 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	3304      	adds	r3, #4
 800f4de:	461a      	mov	r2, r3
 800f4e0:	6879      	ldr	r1, [r7, #4]
 800f4e2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f4e6:	f7fc fe8b 	bl	800c200 <tcp_eff_send_mss_netif>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f4ee:	8b7b      	ldrh	r3, [r7, #26]
 800f4f0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7f9 fdd8 	bl	80090aa <lwip_htonl>
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	3304      	adds	r3, #4
 800f504:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	da02      	bge.n	800f516 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	2200      	movs	r2, #0
 800f514:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d10c      	bne.n	800f538 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f51e:	4b34      	ldr	r3, [pc, #208]	; (800f5f0 <tcp_output_segment+0x1b4>)
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	68db      	ldr	r3, [r3, #12]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7f9 fdbc 	bl	80090aa <lwip_htonl>
 800f532:	4602      	mov	r2, r0
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	68da      	ldr	r2, [r3, #12]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	1ad3      	subs	r3, r2, r3
 800f544:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	8959      	ldrh	r1, [r3, #10]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	8b3a      	ldrh	r2, [r7, #24]
 800f552:	1a8a      	subs	r2, r1, r2
 800f554:	b292      	uxth	r2, r2
 800f556:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	8919      	ldrh	r1, [r3, #8]
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	8b3a      	ldrh	r2, [r7, #24]
 800f564:	1a8a      	subs	r2, r1, r2
 800f566:	b292      	uxth	r2, r2
 800f568:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	68d2      	ldr	r2, [r2, #12]
 800f572:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	68db      	ldr	r3, [r3, #12]
 800f578:	2200      	movs	r2, #0
 800f57a:	741a      	strb	r2, [r3, #16]
 800f57c:	2200      	movs	r2, #0
 800f57e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	68db      	ldr	r3, [r3, #12]
 800f584:	f103 0214 	add.w	r2, r3, #20
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	7a9b      	ldrb	r3, [r3, #10]
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	f003 0304 	and.w	r3, r3, #4
 800f592:	4413      	add	r3, r2
 800f594:	69fa      	ldr	r2, [r7, #28]
 800f596:	429a      	cmp	r2, r3
 800f598:	d006      	beq.n	800f5a8 <tcp_output_segment+0x16c>
 800f59a:	4b10      	ldr	r3, [pc, #64]	; (800f5dc <tcp_output_segment+0x1a0>)
 800f59c:	f240 621c 	movw	r2, #1564	; 0x61c
 800f5a0:	4914      	ldr	r1, [pc, #80]	; (800f5f4 <tcp_output_segment+0x1b8>)
 800f5a2:	4810      	ldr	r0, [pc, #64]	; (800f5e4 <tcp_output_segment+0x1a8>)
 800f5a4:	f003 fe94 	bl	80132d0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	6858      	ldr	r0, [r3, #4]
 800f5ac:	68b9      	ldr	r1, [r7, #8]
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	1d1c      	adds	r4, r3, #4
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	7add      	ldrb	r5, [r3, #11]
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	7a9b      	ldrb	r3, [r3, #10]
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	9202      	str	r2, [sp, #8]
 800f5be:	2206      	movs	r2, #6
 800f5c0:	9201      	str	r2, [sp, #4]
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	462b      	mov	r3, r5
 800f5c6:	4622      	mov	r2, r4
 800f5c8:	f002 fdf0 	bl	80121ac <ip4_output_if>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f5d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3720      	adds	r7, #32
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bdb0      	pop	{r4, r5, r7, pc}
 800f5dc:	08015dc8 	.word	0x08015dc8
 800f5e0:	0801638c 	.word	0x0801638c
 800f5e4:	08015e1c 	.word	0x08015e1c
 800f5e8:	080163ac 	.word	0x080163ac
 800f5ec:	080163cc 	.word	0x080163cc
 800f5f0:	20008eb4 	.word	0x20008eb4
 800f5f4:	080163f0 	.word	0x080163f0

0800f5f8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f5f8:	b5b0      	push	{r4, r5, r7, lr}
 800f5fa:	b084      	sub	sp, #16
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d106      	bne.n	800f614 <tcp_rexmit_rto_prepare+0x1c>
 800f606:	4b31      	ldr	r3, [pc, #196]	; (800f6cc <tcp_rexmit_rto_prepare+0xd4>)
 800f608:	f240 6263 	movw	r2, #1635	; 0x663
 800f60c:	4930      	ldr	r1, [pc, #192]	; (800f6d0 <tcp_rexmit_rto_prepare+0xd8>)
 800f60e:	4831      	ldr	r0, [pc, #196]	; (800f6d4 <tcp_rexmit_rto_prepare+0xdc>)
 800f610:	f003 fe5e 	bl	80132d0 <iprintf>

  if (pcb->unacked == NULL) {
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d102      	bne.n	800f622 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f61c:	f06f 0305 	mvn.w	r3, #5
 800f620:	e050      	b.n	800f6c4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f626:	60fb      	str	r3, [r7, #12]
 800f628:	e00b      	b.n	800f642 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f62a:	68f8      	ldr	r0, [r7, #12]
 800f62c:	f7ff fee6 	bl	800f3fc <tcp_output_segment_busy>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d002      	beq.n	800f63c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f636:	f06f 0305 	mvn.w	r3, #5
 800f63a:	e043      	b.n	800f6c4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	60fb      	str	r3, [r7, #12]
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d1ef      	bne.n	800f62a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f64a:	68f8      	ldr	r0, [r7, #12]
 800f64c:	f7ff fed6 	bl	800f3fc <tcp_output_segment_busy>
 800f650:	4603      	mov	r3, r0
 800f652:	2b00      	cmp	r3, #0
 800f654:	d002      	beq.n	800f65c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f656:	f06f 0305 	mvn.w	r3, #5
 800f65a:	e033      	b.n	800f6c4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	8b5b      	ldrh	r3, [r3, #26]
 800f676:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	4618      	mov	r0, r3
 800f688:	f7f9 fd0f 	bl	80090aa <lwip_htonl>
 800f68c:	4604      	mov	r4, r0
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	891b      	ldrh	r3, [r3, #8]
 800f692:	461d      	mov	r5, r3
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	899b      	ldrh	r3, [r3, #12]
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7f9 fcef 	bl	8009080 <lwip_htons>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	b2db      	uxtb	r3, r3
 800f6a6:	f003 0303 	and.w	r3, r3, #3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d001      	beq.n	800f6b2 <tcp_rexmit_rto_prepare+0xba>
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	e000      	b.n	800f6b4 <tcp_rexmit_rto_prepare+0xbc>
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	442b      	add	r3, r5
 800f6b6:	18e2      	adds	r2, r4, r3
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f6c2:	2300      	movs	r3, #0
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3710      	adds	r7, #16
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bdb0      	pop	{r4, r5, r7, pc}
 800f6cc:	08015dc8 	.word	0x08015dc8
 800f6d0:	08016404 	.word	0x08016404
 800f6d4:	08015e1c 	.word	0x08015e1c

0800f6d8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d106      	bne.n	800f6f4 <tcp_rexmit_rto_commit+0x1c>
 800f6e6:	4b0d      	ldr	r3, [pc, #52]	; (800f71c <tcp_rexmit_rto_commit+0x44>)
 800f6e8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f6ec:	490c      	ldr	r1, [pc, #48]	; (800f720 <tcp_rexmit_rto_commit+0x48>)
 800f6ee:	480d      	ldr	r0, [pc, #52]	; (800f724 <tcp_rexmit_rto_commit+0x4c>)
 800f6f0:	f003 fdee 	bl	80132d0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6fa:	2bff      	cmp	r3, #255	; 0xff
 800f6fc:	d007      	beq.n	800f70e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f704:	3301      	adds	r3, #1
 800f706:	b2da      	uxtb	r2, r3
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f7ff fc80 	bl	800f014 <tcp_output>
}
 800f714:	bf00      	nop
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	08015dc8 	.word	0x08015dc8
 800f720:	08016428 	.word	0x08016428
 800f724:	08015e1c 	.word	0x08015e1c

0800f728 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d106      	bne.n	800f744 <tcp_rexmit_rto+0x1c>
 800f736:	4b0a      	ldr	r3, [pc, #40]	; (800f760 <tcp_rexmit_rto+0x38>)
 800f738:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f73c:	4909      	ldr	r1, [pc, #36]	; (800f764 <tcp_rexmit_rto+0x3c>)
 800f73e:	480a      	ldr	r0, [pc, #40]	; (800f768 <tcp_rexmit_rto+0x40>)
 800f740:	f003 fdc6 	bl	80132d0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f7ff ff57 	bl	800f5f8 <tcp_rexmit_rto_prepare>
 800f74a:	4603      	mov	r3, r0
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d102      	bne.n	800f756 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7ff ffc1 	bl	800f6d8 <tcp_rexmit_rto_commit>
  }
}
 800f756:	bf00      	nop
 800f758:	3708      	adds	r7, #8
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	08015dc8 	.word	0x08015dc8
 800f764:	0801644c 	.word	0x0801644c
 800f768:	08015e1c 	.word	0x08015e1c

0800f76c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f76c:	b590      	push	{r4, r7, lr}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d106      	bne.n	800f788 <tcp_rexmit+0x1c>
 800f77a:	4b2f      	ldr	r3, [pc, #188]	; (800f838 <tcp_rexmit+0xcc>)
 800f77c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f780:	492e      	ldr	r1, [pc, #184]	; (800f83c <tcp_rexmit+0xd0>)
 800f782:	482f      	ldr	r0, [pc, #188]	; (800f840 <tcp_rexmit+0xd4>)
 800f784:	f003 fda4 	bl	80132d0 <iprintf>

  if (pcb->unacked == NULL) {
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d102      	bne.n	800f796 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f790:	f06f 0305 	mvn.w	r3, #5
 800f794:	e04c      	b.n	800f830 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f79a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f79c:	68b8      	ldr	r0, [r7, #8]
 800f79e:	f7ff fe2d 	bl	800f3fc <tcp_output_segment_busy>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d002      	beq.n	800f7ae <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f7a8:	f06f 0305 	mvn.w	r3, #5
 800f7ac:	e040      	b.n	800f830 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	336c      	adds	r3, #108	; 0x6c
 800f7ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f7bc:	e002      	b.n	800f7c4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d011      	beq.n	800f7f0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	68db      	ldr	r3, [r3, #12]
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7f9 fc68 	bl	80090aa <lwip_htonl>
 800f7da:	4604      	mov	r4, r0
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	68db      	ldr	r3, [r3, #12]
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7f9 fc61 	bl	80090aa <lwip_htonl>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	dbe6      	blt.n	800f7be <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	68ba      	ldr	r2, [r7, #8]
 800f7fc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d103      	bne.n	800f80e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2200      	movs	r2, #0
 800f80a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f814:	2bff      	cmp	r3, #255	; 0xff
 800f816:	d007      	beq.n	800f828 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f81e:	3301      	adds	r3, #1
 800f820:	b2da      	uxtb	r2, r3
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f82e:	2300      	movs	r3, #0
}
 800f830:	4618      	mov	r0, r3
 800f832:	3714      	adds	r7, #20
 800f834:	46bd      	mov	sp, r7
 800f836:	bd90      	pop	{r4, r7, pc}
 800f838:	08015dc8 	.word	0x08015dc8
 800f83c:	08016468 	.word	0x08016468
 800f840:	08015e1c 	.word	0x08015e1c

0800f844 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d106      	bne.n	800f860 <tcp_rexmit_fast+0x1c>
 800f852:	4b2a      	ldr	r3, [pc, #168]	; (800f8fc <tcp_rexmit_fast+0xb8>)
 800f854:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f858:	4929      	ldr	r1, [pc, #164]	; (800f900 <tcp_rexmit_fast+0xbc>)
 800f85a:	482a      	ldr	r0, [pc, #168]	; (800f904 <tcp_rexmit_fast+0xc0>)
 800f85c:	f003 fd38 	bl	80132d0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f864:	2b00      	cmp	r3, #0
 800f866:	d044      	beq.n	800f8f2 <tcp_rexmit_fast+0xae>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	8b5b      	ldrh	r3, [r3, #26]
 800f86c:	f003 0304 	and.w	r3, r3, #4
 800f870:	2b00      	cmp	r3, #0
 800f872:	d13e      	bne.n	800f8f2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f7ff ff79 	bl	800f76c <tcp_rexmit>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d138      	bne.n	800f8f2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f88c:	4293      	cmp	r3, r2
 800f88e:	bf28      	it	cs
 800f890:	4613      	movcs	r3, r2
 800f892:	b29b      	uxth	r3, r3
 800f894:	0fda      	lsrs	r2, r3, #31
 800f896:	4413      	add	r3, r2
 800f898:	105b      	asrs	r3, r3, #1
 800f89a:	b29a      	uxth	r2, r3
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8ae:	005b      	lsls	r3, r3, #1
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d206      	bcs.n	800f8c2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8b8:	005b      	lsls	r3, r3, #1
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	0049      	lsls	r1, r1, #1
 800f8d0:	440b      	add	r3, r1
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	4413      	add	r3, r2
 800f8d6:	b29a      	uxth	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	8b5b      	ldrh	r3, [r3, #26]
 800f8e2:	f043 0304 	orr.w	r3, r3, #4
 800f8e6:	b29a      	uxth	r2, r3
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f8f2:	bf00      	nop
 800f8f4:	3708      	adds	r7, #8
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	08015dc8 	.word	0x08015dc8
 800f900:	08016480 	.word	0x08016480
 800f904:	08015e1c 	.word	0x08015e1c

0800f908 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b086      	sub	sp, #24
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	607b      	str	r3, [r7, #4]
 800f912:	460b      	mov	r3, r1
 800f914:	817b      	strh	r3, [r7, #10]
 800f916:	4613      	mov	r3, r2
 800f918:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f91a:	897a      	ldrh	r2, [r7, #10]
 800f91c:	893b      	ldrh	r3, [r7, #8]
 800f91e:	4413      	add	r3, r2
 800f920:	b29b      	uxth	r3, r3
 800f922:	3314      	adds	r3, #20
 800f924:	b29b      	uxth	r3, r3
 800f926:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f92a:	4619      	mov	r1, r3
 800f92c:	2022      	movs	r0, #34	; 0x22
 800f92e:	f7fa fb77 	bl	800a020 <pbuf_alloc>
 800f932:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d04d      	beq.n	800f9d6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f93a:	897b      	ldrh	r3, [r7, #10]
 800f93c:	3313      	adds	r3, #19
 800f93e:	697a      	ldr	r2, [r7, #20]
 800f940:	8952      	ldrh	r2, [r2, #10]
 800f942:	4293      	cmp	r3, r2
 800f944:	db06      	blt.n	800f954 <tcp_output_alloc_header_common+0x4c>
 800f946:	4b26      	ldr	r3, [pc, #152]	; (800f9e0 <tcp_output_alloc_header_common+0xd8>)
 800f948:	f240 7223 	movw	r2, #1827	; 0x723
 800f94c:	4925      	ldr	r1, [pc, #148]	; (800f9e4 <tcp_output_alloc_header_common+0xdc>)
 800f94e:	4826      	ldr	r0, [pc, #152]	; (800f9e8 <tcp_output_alloc_header_common+0xe0>)
 800f950:	f003 fcbe 	bl	80132d0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f95a:	8c3b      	ldrh	r3, [r7, #32]
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7f9 fb8f 	bl	8009080 <lwip_htons>
 800f962:	4603      	mov	r3, r0
 800f964:	461a      	mov	r2, r3
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f96a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7f9 fb87 	bl	8009080 <lwip_htons>
 800f972:	4603      	mov	r3, r0
 800f974:	461a      	mov	r2, r3
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f7f9 fb92 	bl	80090aa <lwip_htonl>
 800f986:	4602      	mov	r2, r0
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f98c:	897b      	ldrh	r3, [r7, #10]
 800f98e:	089b      	lsrs	r3, r3, #2
 800f990:	b29b      	uxth	r3, r3
 800f992:	3305      	adds	r3, #5
 800f994:	b29b      	uxth	r3, r3
 800f996:	031b      	lsls	r3, r3, #12
 800f998:	b29a      	uxth	r2, r3
 800f99a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7f9 fb6b 	bl	8009080 <lwip_htons>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f9b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7f9 fb63 	bl	8009080 <lwip_htons>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	461a      	mov	r2, r3
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	741a      	strb	r2, [r3, #16]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	749a      	strb	r2, [r3, #18]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f9d6:	697b      	ldr	r3, [r7, #20]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3718      	adds	r7, #24
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	08015dc8 	.word	0x08015dc8
 800f9e4:	080164a0 	.word	0x080164a0
 800f9e8:	08015e1c 	.word	0x08015e1c

0800f9ec <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f9ec:	b5b0      	push	{r4, r5, r7, lr}
 800f9ee:	b08a      	sub	sp, #40	; 0x28
 800f9f0:	af04      	add	r7, sp, #16
 800f9f2:	60f8      	str	r0, [r7, #12]
 800f9f4:	607b      	str	r3, [r7, #4]
 800f9f6:	460b      	mov	r3, r1
 800f9f8:	817b      	strh	r3, [r7, #10]
 800f9fa:	4613      	mov	r3, r2
 800f9fc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d106      	bne.n	800fa12 <tcp_output_alloc_header+0x26>
 800fa04:	4b15      	ldr	r3, [pc, #84]	; (800fa5c <tcp_output_alloc_header+0x70>)
 800fa06:	f240 7242 	movw	r2, #1858	; 0x742
 800fa0a:	4915      	ldr	r1, [pc, #84]	; (800fa60 <tcp_output_alloc_header+0x74>)
 800fa0c:	4815      	ldr	r0, [pc, #84]	; (800fa64 <tcp_output_alloc_header+0x78>)
 800fa0e:	f003 fc5f 	bl	80132d0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	8adb      	ldrh	r3, [r3, #22]
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	8b12      	ldrh	r2, [r2, #24]
 800fa1e:	68f9      	ldr	r1, [r7, #12]
 800fa20:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800fa22:	893d      	ldrh	r5, [r7, #8]
 800fa24:	897c      	ldrh	r4, [r7, #10]
 800fa26:	9103      	str	r1, [sp, #12]
 800fa28:	2110      	movs	r1, #16
 800fa2a:	9102      	str	r1, [sp, #8]
 800fa2c:	9201      	str	r2, [sp, #4]
 800fa2e:	9300      	str	r3, [sp, #0]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	462a      	mov	r2, r5
 800fa34:	4621      	mov	r1, r4
 800fa36:	f7ff ff67 	bl	800f908 <tcp_output_alloc_header_common>
 800fa3a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d006      	beq.n	800fa50 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa46:	68fa      	ldr	r2, [r7, #12]
 800fa48:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fa4a:	441a      	add	r2, r3
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fa50:	697b      	ldr	r3, [r7, #20]
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3718      	adds	r7, #24
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bdb0      	pop	{r4, r5, r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	08015dc8 	.word	0x08015dc8
 800fa60:	080164d0 	.word	0x080164d0
 800fa64:	08015e1c 	.word	0x08015e1c

0800fa68 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b088      	sub	sp, #32
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	60b9      	str	r1, [r7, #8]
 800fa72:	4611      	mov	r1, r2
 800fa74:	461a      	mov	r2, r3
 800fa76:	460b      	mov	r3, r1
 800fa78:	71fb      	strb	r3, [r7, #7]
 800fa7a:	4613      	mov	r3, r2
 800fa7c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d106      	bne.n	800fa96 <tcp_output_fill_options+0x2e>
 800fa88:	4b13      	ldr	r3, [pc, #76]	; (800fad8 <tcp_output_fill_options+0x70>)
 800fa8a:	f240 7256 	movw	r2, #1878	; 0x756
 800fa8e:	4913      	ldr	r1, [pc, #76]	; (800fadc <tcp_output_fill_options+0x74>)
 800fa90:	4813      	ldr	r0, [pc, #76]	; (800fae0 <tcp_output_fill_options+0x78>)
 800fa92:	f003 fc1d 	bl	80132d0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	685b      	ldr	r3, [r3, #4]
 800fa9a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	3314      	adds	r3, #20
 800faa0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800faa2:	69bb      	ldr	r3, [r7, #24]
 800faa4:	f103 0214 	add.w	r2, r3, #20
 800faa8:	8bfb      	ldrh	r3, [r7, #30]
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	4619      	mov	r1, r3
 800faae:	79fb      	ldrb	r3, [r7, #7]
 800fab0:	009b      	lsls	r3, r3, #2
 800fab2:	f003 0304 	and.w	r3, r3, #4
 800fab6:	440b      	add	r3, r1
 800fab8:	4413      	add	r3, r2
 800faba:	697a      	ldr	r2, [r7, #20]
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d006      	beq.n	800face <tcp_output_fill_options+0x66>
 800fac0:	4b05      	ldr	r3, [pc, #20]	; (800fad8 <tcp_output_fill_options+0x70>)
 800fac2:	f240 7275 	movw	r2, #1909	; 0x775
 800fac6:	4907      	ldr	r1, [pc, #28]	; (800fae4 <tcp_output_fill_options+0x7c>)
 800fac8:	4805      	ldr	r0, [pc, #20]	; (800fae0 <tcp_output_fill_options+0x78>)
 800faca:	f003 fc01 	bl	80132d0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800face:	bf00      	nop
 800fad0:	3720      	adds	r7, #32
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	08015dc8 	.word	0x08015dc8
 800fadc:	080164f8 	.word	0x080164f8
 800fae0:	08015e1c 	.word	0x08015e1c
 800fae4:	080163f0 	.word	0x080163f0

0800fae8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b08a      	sub	sp, #40	; 0x28
 800faec:	af04      	add	r7, sp, #16
 800faee:	60f8      	str	r0, [r7, #12]
 800faf0:	60b9      	str	r1, [r7, #8]
 800faf2:	607a      	str	r2, [r7, #4]
 800faf4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d106      	bne.n	800fb0a <tcp_output_control_segment+0x22>
 800fafc:	4b1c      	ldr	r3, [pc, #112]	; (800fb70 <tcp_output_control_segment+0x88>)
 800fafe:	f240 7287 	movw	r2, #1927	; 0x787
 800fb02:	491c      	ldr	r1, [pc, #112]	; (800fb74 <tcp_output_control_segment+0x8c>)
 800fb04:	481c      	ldr	r0, [pc, #112]	; (800fb78 <tcp_output_control_segment+0x90>)
 800fb06:	f003 fbe3 	bl	80132d0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800fb0a:	683a      	ldr	r2, [r7, #0]
 800fb0c:	6879      	ldr	r1, [r7, #4]
 800fb0e:	68f8      	ldr	r0, [r7, #12]
 800fb10:	f7fe ff40 	bl	800e994 <tcp_route>
 800fb14:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d102      	bne.n	800fb22 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800fb1c:	23fc      	movs	r3, #252	; 0xfc
 800fb1e:	75fb      	strb	r3, [r7, #23]
 800fb20:	e01c      	b.n	800fb5c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d006      	beq.n	800fb36 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	7adb      	ldrb	r3, [r3, #11]
 800fb2c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	7a9b      	ldrb	r3, [r3, #10]
 800fb32:	757b      	strb	r3, [r7, #21]
 800fb34:	e003      	b.n	800fb3e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800fb36:	23ff      	movs	r3, #255	; 0xff
 800fb38:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800fb3e:	7dba      	ldrb	r2, [r7, #22]
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	9302      	str	r3, [sp, #8]
 800fb44:	2306      	movs	r3, #6
 800fb46:	9301      	str	r3, [sp, #4]
 800fb48:	7d7b      	ldrb	r3, [r7, #21]
 800fb4a:	9300      	str	r3, [sp, #0]
 800fb4c:	4613      	mov	r3, r2
 800fb4e:	683a      	ldr	r2, [r7, #0]
 800fb50:	6879      	ldr	r1, [r7, #4]
 800fb52:	68b8      	ldr	r0, [r7, #8]
 800fb54:	f002 fb2a 	bl	80121ac <ip4_output_if>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fb5c:	68b8      	ldr	r0, [r7, #8]
 800fb5e:	f7fa fd43 	bl	800a5e8 <pbuf_free>
  return err;
 800fb62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3718      	adds	r7, #24
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	08015dc8 	.word	0x08015dc8
 800fb74:	08016520 	.word	0x08016520
 800fb78:	08015e1c 	.word	0x08015e1c

0800fb7c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fb7c:	b590      	push	{r4, r7, lr}
 800fb7e:	b08b      	sub	sp, #44	; 0x2c
 800fb80:	af04      	add	r7, sp, #16
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	607a      	str	r2, [r7, #4]
 800fb88:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d106      	bne.n	800fb9e <tcp_rst+0x22>
 800fb90:	4b1f      	ldr	r3, [pc, #124]	; (800fc10 <tcp_rst+0x94>)
 800fb92:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fb96:	491f      	ldr	r1, [pc, #124]	; (800fc14 <tcp_rst+0x98>)
 800fb98:	481f      	ldr	r0, [pc, #124]	; (800fc18 <tcp_rst+0x9c>)
 800fb9a:	f003 fb99 	bl	80132d0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d106      	bne.n	800fbb2 <tcp_rst+0x36>
 800fba4:	4b1a      	ldr	r3, [pc, #104]	; (800fc10 <tcp_rst+0x94>)
 800fba6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fbaa:	491c      	ldr	r1, [pc, #112]	; (800fc1c <tcp_rst+0xa0>)
 800fbac:	481a      	ldr	r0, [pc, #104]	; (800fc18 <tcp_rst+0x9c>)
 800fbae:	f003 fb8f 	bl	80132d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fbb6:	f246 0308 	movw	r3, #24584	; 0x6008
 800fbba:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fbbc:	7dfb      	ldrb	r3, [r7, #23]
 800fbbe:	b29c      	uxth	r4, r3
 800fbc0:	68b8      	ldr	r0, [r7, #8]
 800fbc2:	f7f9 fa72 	bl	80090aa <lwip_htonl>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	8abb      	ldrh	r3, [r7, #20]
 800fbca:	9303      	str	r3, [sp, #12]
 800fbcc:	2314      	movs	r3, #20
 800fbce:	9302      	str	r3, [sp, #8]
 800fbd0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fbd2:	9301      	str	r3, [sp, #4]
 800fbd4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fbd6:	9300      	str	r3, [sp, #0]
 800fbd8:	4613      	mov	r3, r2
 800fbda:	2200      	movs	r2, #0
 800fbdc:	4621      	mov	r1, r4
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f7ff fe92 	bl	800f908 <tcp_output_alloc_header_common>
 800fbe4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d00c      	beq.n	800fc06 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fbec:	7dfb      	ldrb	r3, [r7, #23]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	6939      	ldr	r1, [r7, #16]
 800fbf2:	68f8      	ldr	r0, [r7, #12]
 800fbf4:	f7ff ff38 	bl	800fa68 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfa:	683a      	ldr	r2, [r7, #0]
 800fbfc:	6939      	ldr	r1, [r7, #16]
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	f7ff ff72 	bl	800fae8 <tcp_output_control_segment>
 800fc04:	e000      	b.n	800fc08 <tcp_rst+0x8c>
    return;
 800fc06:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fc08:	371c      	adds	r7, #28
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd90      	pop	{r4, r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	08015dc8 	.word	0x08015dc8
 800fc14:	0801654c 	.word	0x0801654c
 800fc18:	08015e1c 	.word	0x08015e1c
 800fc1c:	08016568 	.word	0x08016568

0800fc20 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fc20:	b590      	push	{r4, r7, lr}
 800fc22:	b087      	sub	sp, #28
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d106      	bne.n	800fc44 <tcp_send_empty_ack+0x24>
 800fc36:	4b28      	ldr	r3, [pc, #160]	; (800fcd8 <tcp_send_empty_ack+0xb8>)
 800fc38:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800fc3c:	4927      	ldr	r1, [pc, #156]	; (800fcdc <tcp_send_empty_ack+0xbc>)
 800fc3e:	4828      	ldr	r0, [pc, #160]	; (800fce0 <tcp_send_empty_ack+0xc0>)
 800fc40:	f003 fb46 	bl	80132d0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fc44:	7dfb      	ldrb	r3, [r7, #23]
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	f003 0304 	and.w	r3, r3, #4
 800fc4e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fc50:	7d7b      	ldrb	r3, [r7, #21]
 800fc52:	b29c      	uxth	r4, r3
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7f9 fa26 	bl	80090aa <lwip_htonl>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2200      	movs	r2, #0
 800fc62:	4621      	mov	r1, r4
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f7ff fec1 	bl	800f9ec <tcp_output_alloc_header>
 800fc6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d109      	bne.n	800fc86 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	8b5b      	ldrh	r3, [r3, #26]
 800fc76:	f043 0303 	orr.w	r3, r3, #3
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fc80:	f06f 0301 	mvn.w	r3, #1
 800fc84:	e023      	b.n	800fcce <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fc86:	7dbb      	ldrb	r3, [r7, #22]
 800fc88:	7dfa      	ldrb	r2, [r7, #23]
 800fc8a:	6939      	ldr	r1, [r7, #16]
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f7ff feeb 	bl	800fa68 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	3304      	adds	r3, #4
 800fc98:	6939      	ldr	r1, [r7, #16]
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f7ff ff24 	bl	800fae8 <tcp_output_control_segment>
 800fca0:	4603      	mov	r3, r0
 800fca2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d007      	beq.n	800fcbc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	8b5b      	ldrh	r3, [r3, #26]
 800fcb0:	f043 0303 	orr.w	r3, r3, #3
 800fcb4:	b29a      	uxth	r2, r3
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	835a      	strh	r2, [r3, #26]
 800fcba:	e006      	b.n	800fcca <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	8b5b      	ldrh	r3, [r3, #26]
 800fcc0:	f023 0303 	bic.w	r3, r3, #3
 800fcc4:	b29a      	uxth	r2, r3
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fcca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	371c      	adds	r7, #28
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd90      	pop	{r4, r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	08015dc8 	.word	0x08015dc8
 800fcdc:	08016584 	.word	0x08016584
 800fce0:	08015e1c 	.word	0x08015e1c

0800fce4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fce4:	b590      	push	{r4, r7, lr}
 800fce6:	b087      	sub	sp, #28
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fcec:	2300      	movs	r3, #0
 800fcee:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d106      	bne.n	800fd04 <tcp_keepalive+0x20>
 800fcf6:	4b18      	ldr	r3, [pc, #96]	; (800fd58 <tcp_keepalive+0x74>)
 800fcf8:	f640 0224 	movw	r2, #2084	; 0x824
 800fcfc:	4917      	ldr	r1, [pc, #92]	; (800fd5c <tcp_keepalive+0x78>)
 800fcfe:	4818      	ldr	r0, [pc, #96]	; (800fd60 <tcp_keepalive+0x7c>)
 800fd00:	f003 fae6 	bl	80132d0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fd04:	7dfb      	ldrb	r3, [r7, #23]
 800fd06:	b29c      	uxth	r4, r3
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd0c:	3b01      	subs	r3, #1
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7f9 f9cb 	bl	80090aa <lwip_htonl>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2200      	movs	r2, #0
 800fd18:	4621      	mov	r1, r4
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f7ff fe66 	bl	800f9ec <tcp_output_alloc_header>
 800fd20:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d102      	bne.n	800fd2e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fd28:	f04f 33ff 	mov.w	r3, #4294967295
 800fd2c:	e010      	b.n	800fd50 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fd2e:	7dfb      	ldrb	r3, [r7, #23]
 800fd30:	2200      	movs	r2, #0
 800fd32:	6939      	ldr	r1, [r7, #16]
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f7ff fe97 	bl	800fa68 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	3304      	adds	r3, #4
 800fd40:	6939      	ldr	r1, [r7, #16]
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f7ff fed0 	bl	800fae8 <tcp_output_control_segment>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fd4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	371c      	adds	r7, #28
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd90      	pop	{r4, r7, pc}
 800fd58:	08015dc8 	.word	0x08015dc8
 800fd5c:	080165a4 	.word	0x080165a4
 800fd60:	08015e1c 	.word	0x08015e1c

0800fd64 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fd64:	b590      	push	{r4, r7, lr}
 800fd66:	b08b      	sub	sp, #44	; 0x2c
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d106      	bne.n	800fd86 <tcp_zero_window_probe+0x22>
 800fd78:	4b4c      	ldr	r3, [pc, #304]	; (800feac <tcp_zero_window_probe+0x148>)
 800fd7a:	f640 024f 	movw	r2, #2127	; 0x84f
 800fd7e:	494c      	ldr	r1, [pc, #304]	; (800feb0 <tcp_zero_window_probe+0x14c>)
 800fd80:	484c      	ldr	r0, [pc, #304]	; (800feb4 <tcp_zero_window_probe+0x150>)
 800fd82:	f003 faa5 	bl	80132d0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd8a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fd8c:	6a3b      	ldr	r3, [r7, #32]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d101      	bne.n	800fd96 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fd92:	2300      	movs	r3, #0
 800fd94:	e086      	b.n	800fea4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fd9c:	2bff      	cmp	r3, #255	; 0xff
 800fd9e:	d007      	beq.n	800fdb0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fda6:	3301      	adds	r3, #1
 800fda8:	b2da      	uxtb	r2, r3
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fdb0:	6a3b      	ldr	r3, [r7, #32]
 800fdb2:	68db      	ldr	r3, [r3, #12]
 800fdb4:	899b      	ldrh	r3, [r3, #12]
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7f9 f961 	bl	8009080 <lwip_htons>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	b2db      	uxtb	r3, r3
 800fdc2:	f003 0301 	and.w	r3, r3, #1
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d005      	beq.n	800fdd6 <tcp_zero_window_probe+0x72>
 800fdca:	6a3b      	ldr	r3, [r7, #32]
 800fdcc:	891b      	ldrh	r3, [r3, #8]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d101      	bne.n	800fdd6 <tcp_zero_window_probe+0x72>
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	e000      	b.n	800fdd8 <tcp_zero_window_probe+0x74>
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fdda:	7ffb      	ldrb	r3, [r7, #31]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	bf0c      	ite	eq
 800fde0:	2301      	moveq	r3, #1
 800fde2:	2300      	movne	r3, #0
 800fde4:	b2db      	uxtb	r3, r3
 800fde6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fde8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdec:	b299      	uxth	r1, r3
 800fdee:	6a3b      	ldr	r3, [r7, #32]
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	8bba      	ldrh	r2, [r7, #28]
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f7ff fdf8 	bl	800f9ec <tcp_output_alloc_header>
 800fdfc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fdfe:	69bb      	ldr	r3, [r7, #24]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d102      	bne.n	800fe0a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fe04:	f04f 33ff 	mov.w	r3, #4294967295
 800fe08:	e04c      	b.n	800fea4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fe0a:	69bb      	ldr	r3, [r7, #24]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fe10:	7ffb      	ldrb	r3, [r7, #31]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d011      	beq.n	800fe3a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	899b      	ldrh	r3, [r3, #12]
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	b21b      	sxth	r3, r3
 800fe1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fe22:	b21c      	sxth	r4, r3
 800fe24:	2011      	movs	r0, #17
 800fe26:	f7f9 f92b 	bl	8009080 <lwip_htons>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	b21b      	sxth	r3, r3
 800fe2e:	4323      	orrs	r3, r4
 800fe30:	b21b      	sxth	r3, r3
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	819a      	strh	r2, [r3, #12]
 800fe38:	e010      	b.n	800fe5c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fe3a:	69bb      	ldr	r3, [r7, #24]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	3314      	adds	r3, #20
 800fe40:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fe42:	6a3b      	ldr	r3, [r7, #32]
 800fe44:	6858      	ldr	r0, [r3, #4]
 800fe46:	6a3b      	ldr	r3, [r7, #32]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	891a      	ldrh	r2, [r3, #8]
 800fe4c:	6a3b      	ldr	r3, [r7, #32]
 800fe4e:	891b      	ldrh	r3, [r3, #8]
 800fe50:	1ad3      	subs	r3, r2, r3
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	2201      	movs	r2, #1
 800fe56:	6939      	ldr	r1, [r7, #16]
 800fe58:	f7fa fdc0 	bl	800a9dc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fe5c:	6a3b      	ldr	r3, [r7, #32]
 800fe5e:	68db      	ldr	r3, [r3, #12]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7f9 f921 	bl	80090aa <lwip_htonl>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	1ad3      	subs	r3, r2, r3
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	da02      	bge.n	800fe80 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	68fa      	ldr	r2, [r7, #12]
 800fe7e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fe80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe84:	2200      	movs	r2, #0
 800fe86:	69b9      	ldr	r1, [r7, #24]
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f7ff fded 	bl	800fa68 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	3304      	adds	r3, #4
 800fe94:	69b9      	ldr	r1, [r7, #24]
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f7ff fe26 	bl	800fae8 <tcp_output_control_segment>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fea0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	372c      	adds	r7, #44	; 0x2c
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd90      	pop	{r4, r7, pc}
 800feac:	08015dc8 	.word	0x08015dc8
 800feb0:	080165c0 	.word	0x080165c0
 800feb4:	08015e1c 	.word	0x08015e1c

0800feb8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fec0:	f7fa ff0c 	bl	800acdc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fec4:	4b0a      	ldr	r3, [pc, #40]	; (800fef0 <tcpip_tcp_timer+0x38>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d103      	bne.n	800fed4 <tcpip_tcp_timer+0x1c>
 800fecc:	4b09      	ldr	r3, [pc, #36]	; (800fef4 <tcpip_tcp_timer+0x3c>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d005      	beq.n	800fee0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fed4:	2200      	movs	r2, #0
 800fed6:	4908      	ldr	r1, [pc, #32]	; (800fef8 <tcpip_tcp_timer+0x40>)
 800fed8:	20fa      	movs	r0, #250	; 0xfa
 800feda:	f000 f8f3 	bl	80100c4 <sys_timeout>
 800fede:	e003      	b.n	800fee8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fee0:	4b06      	ldr	r3, [pc, #24]	; (800fefc <tcpip_tcp_timer+0x44>)
 800fee2:	2200      	movs	r2, #0
 800fee4:	601a      	str	r2, [r3, #0]
  }
}
 800fee6:	bf00      	nop
 800fee8:	bf00      	nop
 800feea:	3708      	adds	r7, #8
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}
 800fef0:	20008ec0 	.word	0x20008ec0
 800fef4:	20008ec4 	.word	0x20008ec4
 800fef8:	0800feb9 	.word	0x0800feb9
 800fefc:	20008f0c 	.word	0x20008f0c

0800ff00 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ff04:	4b0a      	ldr	r3, [pc, #40]	; (800ff30 <tcp_timer_needed+0x30>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d10f      	bne.n	800ff2c <tcp_timer_needed+0x2c>
 800ff0c:	4b09      	ldr	r3, [pc, #36]	; (800ff34 <tcp_timer_needed+0x34>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d103      	bne.n	800ff1c <tcp_timer_needed+0x1c>
 800ff14:	4b08      	ldr	r3, [pc, #32]	; (800ff38 <tcp_timer_needed+0x38>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d007      	beq.n	800ff2c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ff1c:	4b04      	ldr	r3, [pc, #16]	; (800ff30 <tcp_timer_needed+0x30>)
 800ff1e:	2201      	movs	r2, #1
 800ff20:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ff22:	2200      	movs	r2, #0
 800ff24:	4905      	ldr	r1, [pc, #20]	; (800ff3c <tcp_timer_needed+0x3c>)
 800ff26:	20fa      	movs	r0, #250	; 0xfa
 800ff28:	f000 f8cc 	bl	80100c4 <sys_timeout>
  }
}
 800ff2c:	bf00      	nop
 800ff2e:	bd80      	pop	{r7, pc}
 800ff30:	20008f0c 	.word	0x20008f0c
 800ff34:	20008ec0 	.word	0x20008ec0
 800ff38:	20008ec4 	.word	0x20008ec4
 800ff3c:	0800feb9 	.word	0x0800feb9

0800ff40 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b086      	sub	sp, #24
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	60f8      	str	r0, [r7, #12]
 800ff48:	60b9      	str	r1, [r7, #8]
 800ff4a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ff4c:	2006      	movs	r0, #6
 800ff4e:	f7f9 fced 	bl	800992c <memp_malloc>
 800ff52:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d109      	bne.n	800ff6e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d151      	bne.n	8010004 <sys_timeout_abs+0xc4>
 800ff60:	4b2a      	ldr	r3, [pc, #168]	; (801000c <sys_timeout_abs+0xcc>)
 800ff62:	22be      	movs	r2, #190	; 0xbe
 800ff64:	492a      	ldr	r1, [pc, #168]	; (8010010 <sys_timeout_abs+0xd0>)
 800ff66:	482b      	ldr	r0, [pc, #172]	; (8010014 <sys_timeout_abs+0xd4>)
 800ff68:	f003 f9b2 	bl	80132d0 <iprintf>
    return;
 800ff6c:	e04a      	b.n	8010004 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	2200      	movs	r2, #0
 800ff72:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	68ba      	ldr	r2, [r7, #8]
 800ff78:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	68fa      	ldr	r2, [r7, #12]
 800ff84:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ff86:	4b24      	ldr	r3, [pc, #144]	; (8010018 <sys_timeout_abs+0xd8>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d103      	bne.n	800ff96 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ff8e:	4a22      	ldr	r2, [pc, #136]	; (8010018 <sys_timeout_abs+0xd8>)
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	6013      	str	r3, [r2, #0]
    return;
 800ff94:	e037      	b.n	8010006 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	685a      	ldr	r2, [r3, #4]
 800ff9a:	4b1f      	ldr	r3, [pc, #124]	; (8010018 <sys_timeout_abs+0xd8>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	685b      	ldr	r3, [r3, #4]
 800ffa0:	1ad3      	subs	r3, r2, r3
 800ffa2:	0fdb      	lsrs	r3, r3, #31
 800ffa4:	f003 0301 	and.w	r3, r3, #1
 800ffa8:	b2db      	uxtb	r3, r3
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d007      	beq.n	800ffbe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ffae:	4b1a      	ldr	r3, [pc, #104]	; (8010018 <sys_timeout_abs+0xd8>)
 800ffb0:	681a      	ldr	r2, [r3, #0]
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ffb6:	4a18      	ldr	r2, [pc, #96]	; (8010018 <sys_timeout_abs+0xd8>)
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	6013      	str	r3, [r2, #0]
 800ffbc:	e023      	b.n	8010006 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ffbe:	4b16      	ldr	r3, [pc, #88]	; (8010018 <sys_timeout_abs+0xd8>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	617b      	str	r3, [r7, #20]
 800ffc4:	e01a      	b.n	800fffc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d00b      	beq.n	800ffe6 <sys_timeout_abs+0xa6>
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	685a      	ldr	r2, [r3, #4]
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	1ad3      	subs	r3, r2, r3
 800ffda:	0fdb      	lsrs	r3, r3, #31
 800ffdc:	f003 0301 	and.w	r3, r3, #1
 800ffe0:	b2db      	uxtb	r3, r3
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d007      	beq.n	800fff6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	693a      	ldr	r2, [r7, #16]
 800fff2:	601a      	str	r2, [r3, #0]
        break;
 800fff4:	e007      	b.n	8010006 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	617b      	str	r3, [r7, #20]
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d1e1      	bne.n	800ffc6 <sys_timeout_abs+0x86>
 8010002:	e000      	b.n	8010006 <sys_timeout_abs+0xc6>
    return;
 8010004:	bf00      	nop
      }
    }
  }
}
 8010006:	3718      	adds	r7, #24
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	080165e4 	.word	0x080165e4
 8010010:	08016618 	.word	0x08016618
 8010014:	08016658 	.word	0x08016658
 8010018:	20008f04 	.word	0x20008f04

0801001c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b086      	sub	sp, #24
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	4798      	blx	r3

  now = sys_now();
 801002e:	f7f8 ff99 	bl	8008f64 <sys_now>
 8010032:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	4b0f      	ldr	r3, [pc, #60]	; (8010078 <lwip_cyclic_timer+0x5c>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	4413      	add	r3, r2
 801003e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010040:	68fa      	ldr	r2, [r7, #12]
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	1ad3      	subs	r3, r2, r3
 8010046:	0fdb      	lsrs	r3, r3, #31
 8010048:	f003 0301 	and.w	r3, r3, #1
 801004c:	b2db      	uxtb	r3, r3
 801004e:	2b00      	cmp	r3, #0
 8010050:	d009      	beq.n	8010066 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	4413      	add	r3, r2
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	4907      	ldr	r1, [pc, #28]	; (801007c <lwip_cyclic_timer+0x60>)
 801005e:	4618      	mov	r0, r3
 8010060:	f7ff ff6e 	bl	800ff40 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010064:	e004      	b.n	8010070 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010066:	687a      	ldr	r2, [r7, #4]
 8010068:	4904      	ldr	r1, [pc, #16]	; (801007c <lwip_cyclic_timer+0x60>)
 801006a:	68f8      	ldr	r0, [r7, #12]
 801006c:	f7ff ff68 	bl	800ff40 <sys_timeout_abs>
}
 8010070:	bf00      	nop
 8010072:	3718      	adds	r7, #24
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	20008f08 	.word	0x20008f08
 801007c:	0801001d 	.word	0x0801001d

08010080 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010086:	2301      	movs	r3, #1
 8010088:	607b      	str	r3, [r7, #4]
 801008a:	e00e      	b.n	80100aa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801008c:	4a0b      	ldr	r2, [pc, #44]	; (80100bc <sys_timeouts_init+0x3c>)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	00db      	lsls	r3, r3, #3
 8010098:	4a08      	ldr	r2, [pc, #32]	; (80100bc <sys_timeouts_init+0x3c>)
 801009a:	4413      	add	r3, r2
 801009c:	461a      	mov	r2, r3
 801009e:	4908      	ldr	r1, [pc, #32]	; (80100c0 <sys_timeouts_init+0x40>)
 80100a0:	f000 f810 	bl	80100c4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	3301      	adds	r3, #1
 80100a8:	607b      	str	r3, [r7, #4]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	d9ed      	bls.n	801008c <sys_timeouts_init+0xc>
  }
}
 80100b0:	bf00      	nop
 80100b2:	bf00      	nop
 80100b4:	3708      	adds	r7, #8
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}
 80100ba:	bf00      	nop
 80100bc:	080171cc 	.word	0x080171cc
 80100c0:	0801001d 	.word	0x0801001d

080100c4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b086      	sub	sp, #24
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100d6:	d306      	bcc.n	80100e6 <sys_timeout+0x22>
 80100d8:	4b0a      	ldr	r3, [pc, #40]	; (8010104 <sys_timeout+0x40>)
 80100da:	f240 1229 	movw	r2, #297	; 0x129
 80100de:	490a      	ldr	r1, [pc, #40]	; (8010108 <sys_timeout+0x44>)
 80100e0:	480a      	ldr	r0, [pc, #40]	; (801010c <sys_timeout+0x48>)
 80100e2:	f003 f8f5 	bl	80132d0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80100e6:	f7f8 ff3d 	bl	8008f64 <sys_now>
 80100ea:	4602      	mov	r2, r0
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	4413      	add	r3, r2
 80100f0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	68b9      	ldr	r1, [r7, #8]
 80100f6:	6978      	ldr	r0, [r7, #20]
 80100f8:	f7ff ff22 	bl	800ff40 <sys_timeout_abs>
#endif
}
 80100fc:	bf00      	nop
 80100fe:	3718      	adds	r7, #24
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	080165e4 	.word	0x080165e4
 8010108:	08016680 	.word	0x08016680
 801010c:	08016658 	.word	0x08016658

08010110 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b084      	sub	sp, #16
 8010114:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010116:	f7f8 ff25 	bl	8008f64 <sys_now>
 801011a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801011c:	4b1a      	ldr	r3, [pc, #104]	; (8010188 <sys_check_timeouts+0x78>)
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	b2db      	uxtb	r3, r3
 8010122:	2b00      	cmp	r3, #0
 8010124:	d001      	beq.n	801012a <sys_check_timeouts+0x1a>
 8010126:	f7f9 ff25 	bl	8009f74 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801012a:	4b18      	ldr	r3, [pc, #96]	; (801018c <sys_check_timeouts+0x7c>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d022      	beq.n	801017c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	68fa      	ldr	r2, [r7, #12]
 801013c:	1ad3      	subs	r3, r2, r3
 801013e:	0fdb      	lsrs	r3, r3, #31
 8010140:	f003 0301 	and.w	r3, r3, #1
 8010144:	b2db      	uxtb	r3, r3
 8010146:	2b00      	cmp	r3, #0
 8010148:	d11a      	bne.n	8010180 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4a0f      	ldr	r2, [pc, #60]	; (801018c <sys_check_timeouts+0x7c>)
 8010150:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	689b      	ldr	r3, [r3, #8]
 8010156:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	68db      	ldr	r3, [r3, #12]
 801015c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	4a0b      	ldr	r2, [pc, #44]	; (8010190 <sys_check_timeouts+0x80>)
 8010164:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010166:	68b9      	ldr	r1, [r7, #8]
 8010168:	2006      	movs	r0, #6
 801016a:	f7f9 fc2b 	bl	80099c4 <memp_free>
    if (handler != NULL) {
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d0d3      	beq.n	801011c <sys_check_timeouts+0xc>
      handler(arg);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6838      	ldr	r0, [r7, #0]
 8010178:	4798      	blx	r3
  do {
 801017a:	e7cf      	b.n	801011c <sys_check_timeouts+0xc>
      return;
 801017c:	bf00      	nop
 801017e:	e000      	b.n	8010182 <sys_check_timeouts+0x72>
      return;
 8010180:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010182:	3710      	adds	r7, #16
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	20008eb1 	.word	0x20008eb1
 801018c:	20008f04 	.word	0x20008f04
 8010190:	20008f08 	.word	0x20008f08

08010194 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010198:	f003 f8b2 	bl	8013300 <rand>
 801019c:	4603      	mov	r3, r0
 801019e:	b29b      	uxth	r3, r3
 80101a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80101aa:	b29a      	uxth	r2, r3
 80101ac:	4b01      	ldr	r3, [pc, #4]	; (80101b4 <udp_init+0x20>)
 80101ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80101b0:	bf00      	nop
 80101b2:	bd80      	pop	{r7, pc}
 80101b4:	20000014 	.word	0x20000014

080101b8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80101be:	2300      	movs	r3, #0
 80101c0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80101c2:	4b17      	ldr	r3, [pc, #92]	; (8010220 <udp_new_port+0x68>)
 80101c4:	881b      	ldrh	r3, [r3, #0]
 80101c6:	1c5a      	adds	r2, r3, #1
 80101c8:	b291      	uxth	r1, r2
 80101ca:	4a15      	ldr	r2, [pc, #84]	; (8010220 <udp_new_port+0x68>)
 80101cc:	8011      	strh	r1, [r2, #0]
 80101ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d103      	bne.n	80101de <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80101d6:	4b12      	ldr	r3, [pc, #72]	; (8010220 <udp_new_port+0x68>)
 80101d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80101dc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80101de:	4b11      	ldr	r3, [pc, #68]	; (8010224 <udp_new_port+0x6c>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	603b      	str	r3, [r7, #0]
 80101e4:	e011      	b.n	801020a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	8a5a      	ldrh	r2, [r3, #18]
 80101ea:	4b0d      	ldr	r3, [pc, #52]	; (8010220 <udp_new_port+0x68>)
 80101ec:	881b      	ldrh	r3, [r3, #0]
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d108      	bne.n	8010204 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80101f2:	88fb      	ldrh	r3, [r7, #6]
 80101f4:	3301      	adds	r3, #1
 80101f6:	80fb      	strh	r3, [r7, #6]
 80101f8:	88fb      	ldrh	r3, [r7, #6]
 80101fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80101fe:	d3e0      	bcc.n	80101c2 <udp_new_port+0xa>
        return 0;
 8010200:	2300      	movs	r3, #0
 8010202:	e007      	b.n	8010214 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	603b      	str	r3, [r7, #0]
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d1ea      	bne.n	80101e6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010210:	4b03      	ldr	r3, [pc, #12]	; (8010220 <udp_new_port+0x68>)
 8010212:	881b      	ldrh	r3, [r3, #0]
}
 8010214:	4618      	mov	r0, r3
 8010216:	370c      	adds	r7, #12
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr
 8010220:	20000014 	.word	0x20000014
 8010224:	20008f10 	.word	0x20008f10

08010228 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	4613      	mov	r3, r2
 8010234:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d105      	bne.n	8010248 <udp_input_local_match+0x20>
 801023c:	4b27      	ldr	r3, [pc, #156]	; (80102dc <udp_input_local_match+0xb4>)
 801023e:	2287      	movs	r2, #135	; 0x87
 8010240:	4927      	ldr	r1, [pc, #156]	; (80102e0 <udp_input_local_match+0xb8>)
 8010242:	4828      	ldr	r0, [pc, #160]	; (80102e4 <udp_input_local_match+0xbc>)
 8010244:	f003 f844 	bl	80132d0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d105      	bne.n	801025a <udp_input_local_match+0x32>
 801024e:	4b23      	ldr	r3, [pc, #140]	; (80102dc <udp_input_local_match+0xb4>)
 8010250:	2288      	movs	r2, #136	; 0x88
 8010252:	4925      	ldr	r1, [pc, #148]	; (80102e8 <udp_input_local_match+0xc0>)
 8010254:	4823      	ldr	r0, [pc, #140]	; (80102e4 <udp_input_local_match+0xbc>)
 8010256:	f003 f83b 	bl	80132d0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	7a1b      	ldrb	r3, [r3, #8]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d00b      	beq.n	801027a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	7a1a      	ldrb	r2, [r3, #8]
 8010266:	4b21      	ldr	r3, [pc, #132]	; (80102ec <udp_input_local_match+0xc4>)
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801026e:	3301      	adds	r3, #1
 8010270:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010272:	429a      	cmp	r2, r3
 8010274:	d001      	beq.n	801027a <udp_input_local_match+0x52>
    return 0;
 8010276:	2300      	movs	r3, #0
 8010278:	e02b      	b.n	80102d2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801027a:	79fb      	ldrb	r3, [r7, #7]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d018      	beq.n	80102b2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d013      	beq.n	80102ae <udp_input_local_match+0x86>
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00f      	beq.n	80102ae <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801028e:	4b17      	ldr	r3, [pc, #92]	; (80102ec <udp_input_local_match+0xc4>)
 8010290:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010296:	d00a      	beq.n	80102ae <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681a      	ldr	r2, [r3, #0]
 801029c:	4b13      	ldr	r3, [pc, #76]	; (80102ec <udp_input_local_match+0xc4>)
 801029e:	695b      	ldr	r3, [r3, #20]
 80102a0:	405a      	eors	r2, r3
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	3308      	adds	r3, #8
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d110      	bne.n	80102d0 <udp_input_local_match+0xa8>
          return 1;
 80102ae:	2301      	movs	r3, #1
 80102b0:	e00f      	b.n	80102d2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d009      	beq.n	80102cc <udp_input_local_match+0xa4>
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d005      	beq.n	80102cc <udp_input_local_match+0xa4>
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	681a      	ldr	r2, [r3, #0]
 80102c4:	4b09      	ldr	r3, [pc, #36]	; (80102ec <udp_input_local_match+0xc4>)
 80102c6:	695b      	ldr	r3, [r3, #20]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d101      	bne.n	80102d0 <udp_input_local_match+0xa8>
        return 1;
 80102cc:	2301      	movs	r3, #1
 80102ce:	e000      	b.n	80102d2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80102d0:	2300      	movs	r3, #0
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3710      	adds	r7, #16
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	080166cc 	.word	0x080166cc
 80102e0:	080166fc 	.word	0x080166fc
 80102e4:	08016720 	.word	0x08016720
 80102e8:	08016748 	.word	0x08016748
 80102ec:	20003784 	.word	0x20003784

080102f0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80102f0:	b590      	push	{r4, r7, lr}
 80102f2:	b08d      	sub	sp, #52	; 0x34
 80102f4:	af02      	add	r7, sp, #8
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80102fa:	2300      	movs	r3, #0
 80102fc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d105      	bne.n	8010310 <udp_input+0x20>
 8010304:	4b7c      	ldr	r3, [pc, #496]	; (80104f8 <udp_input+0x208>)
 8010306:	22cf      	movs	r2, #207	; 0xcf
 8010308:	497c      	ldr	r1, [pc, #496]	; (80104fc <udp_input+0x20c>)
 801030a:	487d      	ldr	r0, [pc, #500]	; (8010500 <udp_input+0x210>)
 801030c:	f002 ffe0 	bl	80132d0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d105      	bne.n	8010322 <udp_input+0x32>
 8010316:	4b78      	ldr	r3, [pc, #480]	; (80104f8 <udp_input+0x208>)
 8010318:	22d0      	movs	r2, #208	; 0xd0
 801031a:	497a      	ldr	r1, [pc, #488]	; (8010504 <udp_input+0x214>)
 801031c:	4878      	ldr	r0, [pc, #480]	; (8010500 <udp_input+0x210>)
 801031e:	f002 ffd7 	bl	80132d0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	895b      	ldrh	r3, [r3, #10]
 8010326:	2b07      	cmp	r3, #7
 8010328:	d803      	bhi.n	8010332 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f7fa f95c 	bl	800a5e8 <pbuf_free>
    goto end;
 8010330:	e0de      	b.n	80104f0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010338:	4b73      	ldr	r3, [pc, #460]	; (8010508 <udp_input+0x218>)
 801033a:	695b      	ldr	r3, [r3, #20]
 801033c:	4a72      	ldr	r2, [pc, #456]	; (8010508 <udp_input+0x218>)
 801033e:	6812      	ldr	r2, [r2, #0]
 8010340:	4611      	mov	r1, r2
 8010342:	4618      	mov	r0, r3
 8010344:	f002 f80a 	bl	801235c <ip4_addr_isbroadcast_u32>
 8010348:	4603      	mov	r3, r0
 801034a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	881b      	ldrh	r3, [r3, #0]
 8010350:	b29b      	uxth	r3, r3
 8010352:	4618      	mov	r0, r3
 8010354:	f7f8 fe94 	bl	8009080 <lwip_htons>
 8010358:	4603      	mov	r3, r0
 801035a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	885b      	ldrh	r3, [r3, #2]
 8010360:	b29b      	uxth	r3, r3
 8010362:	4618      	mov	r0, r3
 8010364:	f7f8 fe8c 	bl	8009080 <lwip_htons>
 8010368:	4603      	mov	r3, r0
 801036a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801036c:	2300      	movs	r3, #0
 801036e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010370:	2300      	movs	r3, #0
 8010372:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010374:	2300      	movs	r3, #0
 8010376:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010378:	4b64      	ldr	r3, [pc, #400]	; (801050c <udp_input+0x21c>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	627b      	str	r3, [r7, #36]	; 0x24
 801037e:	e054      	b.n	801042a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010382:	8a5b      	ldrh	r3, [r3, #18]
 8010384:	89fa      	ldrh	r2, [r7, #14]
 8010386:	429a      	cmp	r2, r3
 8010388:	d14a      	bne.n	8010420 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801038a:	7cfb      	ldrb	r3, [r7, #19]
 801038c:	461a      	mov	r2, r3
 801038e:	6839      	ldr	r1, [r7, #0]
 8010390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010392:	f7ff ff49 	bl	8010228 <udp_input_local_match>
 8010396:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010398:	2b00      	cmp	r3, #0
 801039a:	d041      	beq.n	8010420 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801039c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039e:	7c1b      	ldrb	r3, [r3, #16]
 80103a0:	f003 0304 	and.w	r3, r3, #4
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d11d      	bne.n	80103e4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d102      	bne.n	80103b4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80103ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b0:	61fb      	str	r3, [r7, #28]
 80103b2:	e017      	b.n	80103e4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80103b4:	7cfb      	ldrb	r3, [r7, #19]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d014      	beq.n	80103e4 <udp_input+0xf4>
 80103ba:	4b53      	ldr	r3, [pc, #332]	; (8010508 <udp_input+0x218>)
 80103bc:	695b      	ldr	r3, [r3, #20]
 80103be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103c2:	d10f      	bne.n	80103e4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80103c4:	69fb      	ldr	r3, [r7, #28]
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	3304      	adds	r3, #4
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d008      	beq.n	80103e4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80103d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d4:	681a      	ldr	r2, [r3, #0]
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	3304      	adds	r3, #4
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d101      	bne.n	80103e4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80103e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80103e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e6:	8a9b      	ldrh	r3, [r3, #20]
 80103e8:	8a3a      	ldrh	r2, [r7, #16]
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d118      	bne.n	8010420 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80103ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d005      	beq.n	8010402 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80103f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f8:	685a      	ldr	r2, [r3, #4]
 80103fa:	4b43      	ldr	r3, [pc, #268]	; (8010508 <udp_input+0x218>)
 80103fc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80103fe:	429a      	cmp	r2, r3
 8010400:	d10e      	bne.n	8010420 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010402:	6a3b      	ldr	r3, [r7, #32]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d014      	beq.n	8010432 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040a:	68da      	ldr	r2, [r3, #12]
 801040c:	6a3b      	ldr	r3, [r7, #32]
 801040e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010410:	4b3e      	ldr	r3, [pc, #248]	; (801050c <udp_input+0x21c>)
 8010412:	681a      	ldr	r2, [r3, #0]
 8010414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010416:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010418:	4a3c      	ldr	r2, [pc, #240]	; (801050c <udp_input+0x21c>)
 801041a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801041e:	e008      	b.n	8010432 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010422:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010426:	68db      	ldr	r3, [r3, #12]
 8010428:	627b      	str	r3, [r7, #36]	; 0x24
 801042a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042c:	2b00      	cmp	r3, #0
 801042e:	d1a7      	bne.n	8010380 <udp_input+0x90>
 8010430:	e000      	b.n	8010434 <udp_input+0x144>
        break;
 8010432:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010436:	2b00      	cmp	r3, #0
 8010438:	d101      	bne.n	801043e <udp_input+0x14e>
    pcb = uncon_pcb;
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801043e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010440:	2b00      	cmp	r3, #0
 8010442:	d002      	beq.n	801044a <udp_input+0x15a>
    for_us = 1;
 8010444:	2301      	movs	r3, #1
 8010446:	76fb      	strb	r3, [r7, #27]
 8010448:	e00a      	b.n	8010460 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	3304      	adds	r3, #4
 801044e:	681a      	ldr	r2, [r3, #0]
 8010450:	4b2d      	ldr	r3, [pc, #180]	; (8010508 <udp_input+0x218>)
 8010452:	695b      	ldr	r3, [r3, #20]
 8010454:	429a      	cmp	r2, r3
 8010456:	bf0c      	ite	eq
 8010458:	2301      	moveq	r3, #1
 801045a:	2300      	movne	r3, #0
 801045c:	b2db      	uxtb	r3, r3
 801045e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010460:	7efb      	ldrb	r3, [r7, #27]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d041      	beq.n	80104ea <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010466:	2108      	movs	r1, #8
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f7fa f837 	bl	800a4dc <pbuf_remove_header>
 801046e:	4603      	mov	r3, r0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d00a      	beq.n	801048a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010474:	4b20      	ldr	r3, [pc, #128]	; (80104f8 <udp_input+0x208>)
 8010476:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801047a:	4925      	ldr	r1, [pc, #148]	; (8010510 <udp_input+0x220>)
 801047c:	4820      	ldr	r0, [pc, #128]	; (8010500 <udp_input+0x210>)
 801047e:	f002 ff27 	bl	80132d0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7fa f8b0 	bl	800a5e8 <pbuf_free>
      goto end;
 8010488:	e032      	b.n	80104f0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801048a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048c:	2b00      	cmp	r3, #0
 801048e:	d012      	beq.n	80104b6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010492:	699b      	ldr	r3, [r3, #24]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d00a      	beq.n	80104ae <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049a:	699c      	ldr	r4, [r3, #24]
 801049c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049e:	69d8      	ldr	r0, [r3, #28]
 80104a0:	8a3b      	ldrh	r3, [r7, #16]
 80104a2:	9300      	str	r3, [sp, #0]
 80104a4:	4b1b      	ldr	r3, [pc, #108]	; (8010514 <udp_input+0x224>)
 80104a6:	687a      	ldr	r2, [r7, #4]
 80104a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80104aa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80104ac:	e021      	b.n	80104f2 <udp_input+0x202>
        pbuf_free(p);
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f7fa f89a 	bl	800a5e8 <pbuf_free>
        goto end;
 80104b4:	e01c      	b.n	80104f0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80104b6:	7cfb      	ldrb	r3, [r7, #19]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d112      	bne.n	80104e2 <udp_input+0x1f2>
 80104bc:	4b12      	ldr	r3, [pc, #72]	; (8010508 <udp_input+0x218>)
 80104be:	695b      	ldr	r3, [r3, #20]
 80104c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80104c4:	2be0      	cmp	r3, #224	; 0xe0
 80104c6:	d00c      	beq.n	80104e2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80104c8:	4b0f      	ldr	r3, [pc, #60]	; (8010508 <udp_input+0x218>)
 80104ca:	899b      	ldrh	r3, [r3, #12]
 80104cc:	3308      	adds	r3, #8
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	b21b      	sxth	r3, r3
 80104d2:	4619      	mov	r1, r3
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f7fa f874 	bl	800a5c2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80104da:	2103      	movs	r1, #3
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f001 fc1d 	bl	8011d1c <icmp_dest_unreach>
      pbuf_free(p);
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f7fa f880 	bl	800a5e8 <pbuf_free>
  return;
 80104e8:	e003      	b.n	80104f2 <udp_input+0x202>
    pbuf_free(p);
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f7fa f87c 	bl	800a5e8 <pbuf_free>
  return;
 80104f0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80104f2:	372c      	adds	r7, #44	; 0x2c
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd90      	pop	{r4, r7, pc}
 80104f8:	080166cc 	.word	0x080166cc
 80104fc:	08016770 	.word	0x08016770
 8010500:	08016720 	.word	0x08016720
 8010504:	08016788 	.word	0x08016788
 8010508:	20003784 	.word	0x20003784
 801050c:	20008f10 	.word	0x20008f10
 8010510:	080167a4 	.word	0x080167a4
 8010514:	20003794 	.word	0x20003794

08010518 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d109      	bne.n	801053c <udp_send+0x24>
 8010528:	4b11      	ldr	r3, [pc, #68]	; (8010570 <udp_send+0x58>)
 801052a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801052e:	4911      	ldr	r1, [pc, #68]	; (8010574 <udp_send+0x5c>)
 8010530:	4811      	ldr	r0, [pc, #68]	; (8010578 <udp_send+0x60>)
 8010532:	f002 fecd 	bl	80132d0 <iprintf>
 8010536:	f06f 030f 	mvn.w	r3, #15
 801053a:	e015      	b.n	8010568 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d109      	bne.n	8010556 <udp_send+0x3e>
 8010542:	4b0b      	ldr	r3, [pc, #44]	; (8010570 <udp_send+0x58>)
 8010544:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8010548:	490c      	ldr	r1, [pc, #48]	; (801057c <udp_send+0x64>)
 801054a:	480b      	ldr	r0, [pc, #44]	; (8010578 <udp_send+0x60>)
 801054c:	f002 fec0 	bl	80132d0 <iprintf>
 8010550:	f06f 030f 	mvn.w	r3, #15
 8010554:	e008      	b.n	8010568 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	1d1a      	adds	r2, r3, #4
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	8a9b      	ldrh	r3, [r3, #20]
 801055e:	6839      	ldr	r1, [r7, #0]
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f000 f80d 	bl	8010580 <udp_sendto>
 8010566:	4603      	mov	r3, r0
}
 8010568:	4618      	mov	r0, r3
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}
 8010570:	080166cc 	.word	0x080166cc
 8010574:	080167c0 	.word	0x080167c0
 8010578:	08016720 	.word	0x08016720
 801057c:	080167d8 	.word	0x080167d8

08010580 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b088      	sub	sp, #32
 8010584:	af02      	add	r7, sp, #8
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	60b9      	str	r1, [r7, #8]
 801058a:	607a      	str	r2, [r7, #4]
 801058c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d109      	bne.n	80105a8 <udp_sendto+0x28>
 8010594:	4b23      	ldr	r3, [pc, #140]	; (8010624 <udp_sendto+0xa4>)
 8010596:	f44f 7206 	mov.w	r2, #536	; 0x218
 801059a:	4923      	ldr	r1, [pc, #140]	; (8010628 <udp_sendto+0xa8>)
 801059c:	4823      	ldr	r0, [pc, #140]	; (801062c <udp_sendto+0xac>)
 801059e:	f002 fe97 	bl	80132d0 <iprintf>
 80105a2:	f06f 030f 	mvn.w	r3, #15
 80105a6:	e038      	b.n	801061a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d109      	bne.n	80105c2 <udp_sendto+0x42>
 80105ae:	4b1d      	ldr	r3, [pc, #116]	; (8010624 <udp_sendto+0xa4>)
 80105b0:	f240 2219 	movw	r2, #537	; 0x219
 80105b4:	491e      	ldr	r1, [pc, #120]	; (8010630 <udp_sendto+0xb0>)
 80105b6:	481d      	ldr	r0, [pc, #116]	; (801062c <udp_sendto+0xac>)
 80105b8:	f002 fe8a 	bl	80132d0 <iprintf>
 80105bc:	f06f 030f 	mvn.w	r3, #15
 80105c0:	e02b      	b.n	801061a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d109      	bne.n	80105dc <udp_sendto+0x5c>
 80105c8:	4b16      	ldr	r3, [pc, #88]	; (8010624 <udp_sendto+0xa4>)
 80105ca:	f240 221a 	movw	r2, #538	; 0x21a
 80105ce:	4919      	ldr	r1, [pc, #100]	; (8010634 <udp_sendto+0xb4>)
 80105d0:	4816      	ldr	r0, [pc, #88]	; (801062c <udp_sendto+0xac>)
 80105d2:	f002 fe7d 	bl	80132d0 <iprintf>
 80105d6:	f06f 030f 	mvn.w	r3, #15
 80105da:	e01e      	b.n	801061a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	7a1b      	ldrb	r3, [r3, #8]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d006      	beq.n	80105f2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	7a1b      	ldrb	r3, [r3, #8]
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7f9 fc9d 	bl	8009f28 <netif_get_by_index>
 80105ee:	6178      	str	r0, [r7, #20]
 80105f0:	e003      	b.n	80105fa <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f001 fc1c 	bl	8011e30 <ip4_route>
 80105f8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d102      	bne.n	8010606 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8010600:	f06f 0303 	mvn.w	r3, #3
 8010604:	e009      	b.n	801061a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8010606:	887a      	ldrh	r2, [r7, #2]
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	9300      	str	r3, [sp, #0]
 801060c:	4613      	mov	r3, r2
 801060e:	687a      	ldr	r2, [r7, #4]
 8010610:	68b9      	ldr	r1, [r7, #8]
 8010612:	68f8      	ldr	r0, [r7, #12]
 8010614:	f000 f810 	bl	8010638 <udp_sendto_if>
 8010618:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801061a:	4618      	mov	r0, r3
 801061c:	3718      	adds	r7, #24
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	080166cc 	.word	0x080166cc
 8010628:	080167f0 	.word	0x080167f0
 801062c:	08016720 	.word	0x08016720
 8010630:	08016808 	.word	0x08016808
 8010634:	08016824 	.word	0x08016824

08010638 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b088      	sub	sp, #32
 801063c:	af02      	add	r7, sp, #8
 801063e:	60f8      	str	r0, [r7, #12]
 8010640:	60b9      	str	r1, [r7, #8]
 8010642:	607a      	str	r2, [r7, #4]
 8010644:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d109      	bne.n	8010660 <udp_sendto_if+0x28>
 801064c:	4b2e      	ldr	r3, [pc, #184]	; (8010708 <udp_sendto_if+0xd0>)
 801064e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010652:	492e      	ldr	r1, [pc, #184]	; (801070c <udp_sendto_if+0xd4>)
 8010654:	482e      	ldr	r0, [pc, #184]	; (8010710 <udp_sendto_if+0xd8>)
 8010656:	f002 fe3b 	bl	80132d0 <iprintf>
 801065a:	f06f 030f 	mvn.w	r3, #15
 801065e:	e04f      	b.n	8010700 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d109      	bne.n	801067a <udp_sendto_if+0x42>
 8010666:	4b28      	ldr	r3, [pc, #160]	; (8010708 <udp_sendto_if+0xd0>)
 8010668:	f240 2281 	movw	r2, #641	; 0x281
 801066c:	4929      	ldr	r1, [pc, #164]	; (8010714 <udp_sendto_if+0xdc>)
 801066e:	4828      	ldr	r0, [pc, #160]	; (8010710 <udp_sendto_if+0xd8>)
 8010670:	f002 fe2e 	bl	80132d0 <iprintf>
 8010674:	f06f 030f 	mvn.w	r3, #15
 8010678:	e042      	b.n	8010700 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d109      	bne.n	8010694 <udp_sendto_if+0x5c>
 8010680:	4b21      	ldr	r3, [pc, #132]	; (8010708 <udp_sendto_if+0xd0>)
 8010682:	f240 2282 	movw	r2, #642	; 0x282
 8010686:	4924      	ldr	r1, [pc, #144]	; (8010718 <udp_sendto_if+0xe0>)
 8010688:	4821      	ldr	r0, [pc, #132]	; (8010710 <udp_sendto_if+0xd8>)
 801068a:	f002 fe21 	bl	80132d0 <iprintf>
 801068e:	f06f 030f 	mvn.w	r3, #15
 8010692:	e035      	b.n	8010700 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010694:	6a3b      	ldr	r3, [r7, #32]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d109      	bne.n	80106ae <udp_sendto_if+0x76>
 801069a:	4b1b      	ldr	r3, [pc, #108]	; (8010708 <udp_sendto_if+0xd0>)
 801069c:	f240 2283 	movw	r2, #643	; 0x283
 80106a0:	491e      	ldr	r1, [pc, #120]	; (801071c <udp_sendto_if+0xe4>)
 80106a2:	481b      	ldr	r0, [pc, #108]	; (8010710 <udp_sendto_if+0xd8>)
 80106a4:	f002 fe14 	bl	80132d0 <iprintf>
 80106a8:	f06f 030f 	mvn.w	r3, #15
 80106ac:	e028      	b.n	8010700 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d009      	beq.n	80106c8 <udp_sendto_if+0x90>
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d005      	beq.n	80106c8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80106c4:	2be0      	cmp	r3, #224	; 0xe0
 80106c6:	d103      	bne.n	80106d0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80106c8:	6a3b      	ldr	r3, [r7, #32]
 80106ca:	3304      	adds	r3, #4
 80106cc:	617b      	str	r3, [r7, #20]
 80106ce:	e00b      	b.n	80106e8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	681a      	ldr	r2, [r3, #0]
 80106d4:	6a3b      	ldr	r3, [r7, #32]
 80106d6:	3304      	adds	r3, #4
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	429a      	cmp	r2, r3
 80106dc:	d002      	beq.n	80106e4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80106de:	f06f 0303 	mvn.w	r3, #3
 80106e2:	e00d      	b.n	8010700 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80106e8:	887a      	ldrh	r2, [r7, #2]
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	9301      	str	r3, [sp, #4]
 80106ee:	6a3b      	ldr	r3, [r7, #32]
 80106f0:	9300      	str	r3, [sp, #0]
 80106f2:	4613      	mov	r3, r2
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	68b9      	ldr	r1, [r7, #8]
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f000 f811 	bl	8010720 <udp_sendto_if_src>
 80106fe:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010700:	4618      	mov	r0, r3
 8010702:	3718      	adds	r7, #24
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	080166cc 	.word	0x080166cc
 801070c:	08016840 	.word	0x08016840
 8010710:	08016720 	.word	0x08016720
 8010714:	0801685c 	.word	0x0801685c
 8010718:	08016878 	.word	0x08016878
 801071c:	08016898 	.word	0x08016898

08010720 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b08c      	sub	sp, #48	; 0x30
 8010724:	af04      	add	r7, sp, #16
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	607a      	str	r2, [r7, #4]
 801072c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d109      	bne.n	8010748 <udp_sendto_if_src+0x28>
 8010734:	4b65      	ldr	r3, [pc, #404]	; (80108cc <udp_sendto_if_src+0x1ac>)
 8010736:	f240 22d1 	movw	r2, #721	; 0x2d1
 801073a:	4965      	ldr	r1, [pc, #404]	; (80108d0 <udp_sendto_if_src+0x1b0>)
 801073c:	4865      	ldr	r0, [pc, #404]	; (80108d4 <udp_sendto_if_src+0x1b4>)
 801073e:	f002 fdc7 	bl	80132d0 <iprintf>
 8010742:	f06f 030f 	mvn.w	r3, #15
 8010746:	e0bc      	b.n	80108c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d109      	bne.n	8010762 <udp_sendto_if_src+0x42>
 801074e:	4b5f      	ldr	r3, [pc, #380]	; (80108cc <udp_sendto_if_src+0x1ac>)
 8010750:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010754:	4960      	ldr	r1, [pc, #384]	; (80108d8 <udp_sendto_if_src+0x1b8>)
 8010756:	485f      	ldr	r0, [pc, #380]	; (80108d4 <udp_sendto_if_src+0x1b4>)
 8010758:	f002 fdba 	bl	80132d0 <iprintf>
 801075c:	f06f 030f 	mvn.w	r3, #15
 8010760:	e0af      	b.n	80108c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d109      	bne.n	801077c <udp_sendto_if_src+0x5c>
 8010768:	4b58      	ldr	r3, [pc, #352]	; (80108cc <udp_sendto_if_src+0x1ac>)
 801076a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801076e:	495b      	ldr	r1, [pc, #364]	; (80108dc <udp_sendto_if_src+0x1bc>)
 8010770:	4858      	ldr	r0, [pc, #352]	; (80108d4 <udp_sendto_if_src+0x1b4>)
 8010772:	f002 fdad 	bl	80132d0 <iprintf>
 8010776:	f06f 030f 	mvn.w	r3, #15
 801077a:	e0a2      	b.n	80108c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077e:	2b00      	cmp	r3, #0
 8010780:	d109      	bne.n	8010796 <udp_sendto_if_src+0x76>
 8010782:	4b52      	ldr	r3, [pc, #328]	; (80108cc <udp_sendto_if_src+0x1ac>)
 8010784:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010788:	4955      	ldr	r1, [pc, #340]	; (80108e0 <udp_sendto_if_src+0x1c0>)
 801078a:	4852      	ldr	r0, [pc, #328]	; (80108d4 <udp_sendto_if_src+0x1b4>)
 801078c:	f002 fda0 	bl	80132d0 <iprintf>
 8010790:	f06f 030f 	mvn.w	r3, #15
 8010794:	e095      	b.n	80108c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010798:	2b00      	cmp	r3, #0
 801079a:	d109      	bne.n	80107b0 <udp_sendto_if_src+0x90>
 801079c:	4b4b      	ldr	r3, [pc, #300]	; (80108cc <udp_sendto_if_src+0x1ac>)
 801079e:	f240 22d5 	movw	r2, #725	; 0x2d5
 80107a2:	4950      	ldr	r1, [pc, #320]	; (80108e4 <udp_sendto_if_src+0x1c4>)
 80107a4:	484b      	ldr	r0, [pc, #300]	; (80108d4 <udp_sendto_if_src+0x1b4>)
 80107a6:	f002 fd93 	bl	80132d0 <iprintf>
 80107aa:	f06f 030f 	mvn.w	r3, #15
 80107ae:	e088      	b.n	80108c2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	8a5b      	ldrh	r3, [r3, #18]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d10f      	bne.n	80107d8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80107b8:	68f9      	ldr	r1, [r7, #12]
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	8a5b      	ldrh	r3, [r3, #18]
 80107be:	461a      	mov	r2, r3
 80107c0:	68f8      	ldr	r0, [r7, #12]
 80107c2:	f000 f893 	bl	80108ec <udp_bind>
 80107c6:	4603      	mov	r3, r0
 80107c8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80107ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d002      	beq.n	80107d8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80107d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80107d6:	e074      	b.n	80108c2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	891b      	ldrh	r3, [r3, #8]
 80107dc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d902      	bls.n	80107ea <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80107e4:	f04f 33ff 	mov.w	r3, #4294967295
 80107e8:	e06b      	b.n	80108c2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80107ea:	2108      	movs	r1, #8
 80107ec:	68b8      	ldr	r0, [r7, #8]
 80107ee:	f7f9 fe65 	bl	800a4bc <pbuf_add_header>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d015      	beq.n	8010824 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80107f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80107fc:	2108      	movs	r1, #8
 80107fe:	2022      	movs	r0, #34	; 0x22
 8010800:	f7f9 fc0e 	bl	800a020 <pbuf_alloc>
 8010804:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010806:	69fb      	ldr	r3, [r7, #28]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d102      	bne.n	8010812 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801080c:	f04f 33ff 	mov.w	r3, #4294967295
 8010810:	e057      	b.n	80108c2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	891b      	ldrh	r3, [r3, #8]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d006      	beq.n	8010828 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801081a:	68b9      	ldr	r1, [r7, #8]
 801081c:	69f8      	ldr	r0, [r7, #28]
 801081e:	f7f9 fffb 	bl	800a818 <pbuf_chain>
 8010822:	e001      	b.n	8010828 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010828:	69fb      	ldr	r3, [r7, #28]
 801082a:	895b      	ldrh	r3, [r3, #10]
 801082c:	2b07      	cmp	r3, #7
 801082e:	d806      	bhi.n	801083e <udp_sendto_if_src+0x11e>
 8010830:	4b26      	ldr	r3, [pc, #152]	; (80108cc <udp_sendto_if_src+0x1ac>)
 8010832:	f240 320d 	movw	r2, #781	; 0x30d
 8010836:	492c      	ldr	r1, [pc, #176]	; (80108e8 <udp_sendto_if_src+0x1c8>)
 8010838:	4826      	ldr	r0, [pc, #152]	; (80108d4 <udp_sendto_if_src+0x1b4>)
 801083a:	f002 fd49 	bl	80132d0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801083e:	69fb      	ldr	r3, [r7, #28]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	8a5b      	ldrh	r3, [r3, #18]
 8010848:	4618      	mov	r0, r3
 801084a:	f7f8 fc19 	bl	8009080 <lwip_htons>
 801084e:	4603      	mov	r3, r0
 8010850:	461a      	mov	r2, r3
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010856:	887b      	ldrh	r3, [r7, #2]
 8010858:	4618      	mov	r0, r3
 801085a:	f7f8 fc11 	bl	8009080 <lwip_htons>
 801085e:	4603      	mov	r3, r0
 8010860:	461a      	mov	r2, r3
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	2200      	movs	r2, #0
 801086a:	719a      	strb	r2, [r3, #6]
 801086c:	2200      	movs	r2, #0
 801086e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	891b      	ldrh	r3, [r3, #8]
 8010874:	4618      	mov	r0, r3
 8010876:	f7f8 fc03 	bl	8009080 <lwip_htons>
 801087a:	4603      	mov	r3, r0
 801087c:	461a      	mov	r2, r3
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010882:	2311      	movs	r3, #17
 8010884:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	7adb      	ldrb	r3, [r3, #11]
 801088a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	7a9b      	ldrb	r3, [r3, #10]
 8010890:	7cb9      	ldrb	r1, [r7, #18]
 8010892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010894:	9202      	str	r2, [sp, #8]
 8010896:	7cfa      	ldrb	r2, [r7, #19]
 8010898:	9201      	str	r2, [sp, #4]
 801089a:	9300      	str	r3, [sp, #0]
 801089c:	460b      	mov	r3, r1
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108a2:	69f8      	ldr	r0, [r7, #28]
 80108a4:	f001 fcac 	bl	8012200 <ip4_output_if_src>
 80108a8:	4603      	mov	r3, r0
 80108aa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80108ac:	69fa      	ldr	r2, [r7, #28]
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d004      	beq.n	80108be <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80108b4:	69f8      	ldr	r0, [r7, #28]
 80108b6:	f7f9 fe97 	bl	800a5e8 <pbuf_free>
    q = NULL;
 80108ba:	2300      	movs	r3, #0
 80108bc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80108be:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3720      	adds	r7, #32
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	080166cc 	.word	0x080166cc
 80108d0:	080168b8 	.word	0x080168b8
 80108d4:	08016720 	.word	0x08016720
 80108d8:	080168d8 	.word	0x080168d8
 80108dc:	080168f8 	.word	0x080168f8
 80108e0:	0801691c 	.word	0x0801691c
 80108e4:	08016940 	.word	0x08016940
 80108e8:	08016964 	.word	0x08016964

080108ec <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b086      	sub	sp, #24
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	4613      	mov	r3, r2
 80108f8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d101      	bne.n	8010904 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010900:	4b39      	ldr	r3, [pc, #228]	; (80109e8 <udp_bind+0xfc>)
 8010902:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d109      	bne.n	801091e <udp_bind+0x32>
 801090a:	4b38      	ldr	r3, [pc, #224]	; (80109ec <udp_bind+0x100>)
 801090c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010910:	4937      	ldr	r1, [pc, #220]	; (80109f0 <udp_bind+0x104>)
 8010912:	4838      	ldr	r0, [pc, #224]	; (80109f4 <udp_bind+0x108>)
 8010914:	f002 fcdc 	bl	80132d0 <iprintf>
 8010918:	f06f 030f 	mvn.w	r3, #15
 801091c:	e060      	b.n	80109e0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801091e:	2300      	movs	r3, #0
 8010920:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010922:	4b35      	ldr	r3, [pc, #212]	; (80109f8 <udp_bind+0x10c>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	617b      	str	r3, [r7, #20]
 8010928:	e009      	b.n	801093e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801092a:	68fa      	ldr	r2, [r7, #12]
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	429a      	cmp	r2, r3
 8010930:	d102      	bne.n	8010938 <udp_bind+0x4c>
      rebind = 1;
 8010932:	2301      	movs	r3, #1
 8010934:	74fb      	strb	r3, [r7, #19]
      break;
 8010936:	e005      	b.n	8010944 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	617b      	str	r3, [r7, #20]
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d1f2      	bne.n	801092a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010944:	88fb      	ldrh	r3, [r7, #6]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d109      	bne.n	801095e <udp_bind+0x72>
    port = udp_new_port();
 801094a:	f7ff fc35 	bl	80101b8 <udp_new_port>
 801094e:	4603      	mov	r3, r0
 8010950:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010952:	88fb      	ldrh	r3, [r7, #6]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d12c      	bne.n	80109b2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010958:	f06f 0307 	mvn.w	r3, #7
 801095c:	e040      	b.n	80109e0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801095e:	4b26      	ldr	r3, [pc, #152]	; (80109f8 <udp_bind+0x10c>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	617b      	str	r3, [r7, #20]
 8010964:	e022      	b.n	80109ac <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010966:	68fa      	ldr	r2, [r7, #12]
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	429a      	cmp	r2, r3
 801096c:	d01b      	beq.n	80109a6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	8a5b      	ldrh	r3, [r3, #18]
 8010972:	88fa      	ldrh	r2, [r7, #6]
 8010974:	429a      	cmp	r2, r3
 8010976:	d116      	bne.n	80109a6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010980:	429a      	cmp	r2, r3
 8010982:	d00d      	beq.n	80109a0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d00a      	beq.n	80109a0 <udp_bind+0xb4>
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d006      	beq.n	80109a0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010992:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010994:	2b00      	cmp	r3, #0
 8010996:	d003      	beq.n	80109a0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d102      	bne.n	80109a6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80109a0:	f06f 0307 	mvn.w	r3, #7
 80109a4:	e01c      	b.n	80109e0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	68db      	ldr	r3, [r3, #12]
 80109aa:	617b      	str	r3, [r7, #20]
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d1d9      	bne.n	8010966 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d002      	beq.n	80109be <udp_bind+0xd2>
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	e000      	b.n	80109c0 <udp_bind+0xd4>
 80109be:	2300      	movs	r3, #0
 80109c0:	68fa      	ldr	r2, [r7, #12]
 80109c2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	88fa      	ldrh	r2, [r7, #6]
 80109c8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80109ca:	7cfb      	ldrb	r3, [r7, #19]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d106      	bne.n	80109de <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80109d0:	4b09      	ldr	r3, [pc, #36]	; (80109f8 <udp_bind+0x10c>)
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80109d8:	4a07      	ldr	r2, [pc, #28]	; (80109f8 <udp_bind+0x10c>)
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80109de:	2300      	movs	r3, #0
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3718      	adds	r7, #24
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	080171e4 	.word	0x080171e4
 80109ec:	080166cc 	.word	0x080166cc
 80109f0:	08016994 	.word	0x08016994
 80109f4:	08016720 	.word	0x08016720
 80109f8:	20008f10 	.word	0x20008f10

080109fc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b086      	sub	sp, #24
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	4613      	mov	r3, r2
 8010a08:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d109      	bne.n	8010a24 <udp_connect+0x28>
 8010a10:	4b2c      	ldr	r3, [pc, #176]	; (8010ac4 <udp_connect+0xc8>)
 8010a12:	f240 4235 	movw	r2, #1077	; 0x435
 8010a16:	492c      	ldr	r1, [pc, #176]	; (8010ac8 <udp_connect+0xcc>)
 8010a18:	482c      	ldr	r0, [pc, #176]	; (8010acc <udp_connect+0xd0>)
 8010a1a:	f002 fc59 	bl	80132d0 <iprintf>
 8010a1e:	f06f 030f 	mvn.w	r3, #15
 8010a22:	e04b      	b.n	8010abc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d109      	bne.n	8010a3e <udp_connect+0x42>
 8010a2a:	4b26      	ldr	r3, [pc, #152]	; (8010ac4 <udp_connect+0xc8>)
 8010a2c:	f240 4236 	movw	r2, #1078	; 0x436
 8010a30:	4927      	ldr	r1, [pc, #156]	; (8010ad0 <udp_connect+0xd4>)
 8010a32:	4826      	ldr	r0, [pc, #152]	; (8010acc <udp_connect+0xd0>)
 8010a34:	f002 fc4c 	bl	80132d0 <iprintf>
 8010a38:	f06f 030f 	mvn.w	r3, #15
 8010a3c:	e03e      	b.n	8010abc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	8a5b      	ldrh	r3, [r3, #18]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d10f      	bne.n	8010a66 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010a46:	68f9      	ldr	r1, [r7, #12]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	8a5b      	ldrh	r3, [r3, #18]
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	68f8      	ldr	r0, [r7, #12]
 8010a50:	f7ff ff4c 	bl	80108ec <udp_bind>
 8010a54:	4603      	mov	r3, r0
 8010a56:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010a58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d002      	beq.n	8010a66 <udp_connect+0x6a>
      return err;
 8010a60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a64:	e02a      	b.n	8010abc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d002      	beq.n	8010a72 <udp_connect+0x76>
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	e000      	b.n	8010a74 <udp_connect+0x78>
 8010a72:	2300      	movs	r3, #0
 8010a74:	68fa      	ldr	r2, [r7, #12]
 8010a76:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	88fa      	ldrh	r2, [r7, #6]
 8010a7c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	7c1b      	ldrb	r3, [r3, #16]
 8010a82:	f043 0304 	orr.w	r3, r3, #4
 8010a86:	b2da      	uxtb	r2, r3
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010a8c:	4b11      	ldr	r3, [pc, #68]	; (8010ad4 <udp_connect+0xd8>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	617b      	str	r3, [r7, #20]
 8010a92:	e008      	b.n	8010aa6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010a94:	68fa      	ldr	r2, [r7, #12]
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d101      	bne.n	8010aa0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	e00d      	b.n	8010abc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	68db      	ldr	r3, [r3, #12]
 8010aa4:	617b      	str	r3, [r7, #20]
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d1f3      	bne.n	8010a94 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010aac:	4b09      	ldr	r3, [pc, #36]	; (8010ad4 <udp_connect+0xd8>)
 8010aae:	681a      	ldr	r2, [r3, #0]
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010ab4:	4a07      	ldr	r2, [pc, #28]	; (8010ad4 <udp_connect+0xd8>)
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010aba:	2300      	movs	r3, #0
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3718      	adds	r7, #24
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	080166cc 	.word	0x080166cc
 8010ac8:	080169ac 	.word	0x080169ac
 8010acc:	08016720 	.word	0x08016720
 8010ad0:	080169c8 	.word	0x080169c8
 8010ad4:	20008f10 	.word	0x20008f10

08010ad8 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d107      	bne.n	8010af6 <udp_disconnect+0x1e>
 8010ae6:	4b0d      	ldr	r3, [pc, #52]	; (8010b1c <udp_disconnect+0x44>)
 8010ae8:	f240 426a 	movw	r2, #1130	; 0x46a
 8010aec:	490c      	ldr	r1, [pc, #48]	; (8010b20 <udp_disconnect+0x48>)
 8010aee:	480d      	ldr	r0, [pc, #52]	; (8010b24 <udp_disconnect+0x4c>)
 8010af0:	f002 fbee 	bl	80132d0 <iprintf>
 8010af4:	e00f      	b.n	8010b16 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2200      	movs	r2, #0
 8010afa:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2200      	movs	r2, #0
 8010b00:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2200      	movs	r2, #0
 8010b06:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	7c1b      	ldrb	r3, [r3, #16]
 8010b0c:	f023 0304 	bic.w	r3, r3, #4
 8010b10:	b2da      	uxtb	r2, r3
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	741a      	strb	r2, [r3, #16]
}
 8010b16:	3708      	adds	r7, #8
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}
 8010b1c:	080166cc 	.word	0x080166cc
 8010b20:	080169e4 	.word	0x080169e4
 8010b24:	08016720 	.word	0x08016720

08010b28 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b084      	sub	sp, #16
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	60b9      	str	r1, [r7, #8]
 8010b32:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d107      	bne.n	8010b4a <udp_recv+0x22>
 8010b3a:	4b08      	ldr	r3, [pc, #32]	; (8010b5c <udp_recv+0x34>)
 8010b3c:	f240 428a 	movw	r2, #1162	; 0x48a
 8010b40:	4907      	ldr	r1, [pc, #28]	; (8010b60 <udp_recv+0x38>)
 8010b42:	4808      	ldr	r0, [pc, #32]	; (8010b64 <udp_recv+0x3c>)
 8010b44:	f002 fbc4 	bl	80132d0 <iprintf>
 8010b48:	e005      	b.n	8010b56 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	68ba      	ldr	r2, [r7, #8]
 8010b4e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	61da      	str	r2, [r3, #28]
}
 8010b56:	3710      	adds	r7, #16
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	080166cc 	.word	0x080166cc
 8010b60:	08016a00 	.word	0x08016a00
 8010b64:	08016720 	.word	0x08016720

08010b68 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d107      	bne.n	8010b86 <udp_remove+0x1e>
 8010b76:	4b19      	ldr	r3, [pc, #100]	; (8010bdc <udp_remove+0x74>)
 8010b78:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8010b7c:	4918      	ldr	r1, [pc, #96]	; (8010be0 <udp_remove+0x78>)
 8010b7e:	4819      	ldr	r0, [pc, #100]	; (8010be4 <udp_remove+0x7c>)
 8010b80:	f002 fba6 	bl	80132d0 <iprintf>
 8010b84:	e026      	b.n	8010bd4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010b86:	4b18      	ldr	r3, [pc, #96]	; (8010be8 <udp_remove+0x80>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d105      	bne.n	8010b9c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010b90:	4b15      	ldr	r3, [pc, #84]	; (8010be8 <udp_remove+0x80>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	68db      	ldr	r3, [r3, #12]
 8010b96:	4a14      	ldr	r2, [pc, #80]	; (8010be8 <udp_remove+0x80>)
 8010b98:	6013      	str	r3, [r2, #0]
 8010b9a:	e017      	b.n	8010bcc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010b9c:	4b12      	ldr	r3, [pc, #72]	; (8010be8 <udp_remove+0x80>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	60fb      	str	r3, [r7, #12]
 8010ba2:	e010      	b.n	8010bc6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d009      	beq.n	8010bc0 <udp_remove+0x58>
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	687a      	ldr	r2, [r7, #4]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d104      	bne.n	8010bc0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	68da      	ldr	r2, [r3, #12]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	60da      	str	r2, [r3, #12]
        break;
 8010bbe:	e005      	b.n	8010bcc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	60fb      	str	r3, [r7, #12]
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d1eb      	bne.n	8010ba4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010bcc:	6879      	ldr	r1, [r7, #4]
 8010bce:	2000      	movs	r0, #0
 8010bd0:	f7f8 fef8 	bl	80099c4 <memp_free>
}
 8010bd4:	3710      	adds	r7, #16
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}
 8010bda:	bf00      	nop
 8010bdc:	080166cc 	.word	0x080166cc
 8010be0:	08016a18 	.word	0x08016a18
 8010be4:	08016720 	.word	0x08016720
 8010be8:	20008f10 	.word	0x20008f10

08010bec <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	f7f8 fe9a 	bl	800992c <memp_malloc>
 8010bf8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d007      	beq.n	8010c10 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010c00:	2220      	movs	r2, #32
 8010c02:	2100      	movs	r1, #0
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f002 fb5b 	bl	80132c0 <memset>
    pcb->ttl = UDP_TTL;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	22ff      	movs	r2, #255	; 0xff
 8010c0e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010c10:	687b      	ldr	r3, [r7, #4]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3708      	adds	r7, #8
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}
	...

08010c1c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b085      	sub	sp, #20
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d01e      	beq.n	8010c6a <udp_netif_ip_addr_changed+0x4e>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d01a      	beq.n	8010c6a <udp_netif_ip_addr_changed+0x4e>
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d017      	beq.n	8010c6a <udp_netif_ip_addr_changed+0x4e>
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d013      	beq.n	8010c6a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010c42:	4b0d      	ldr	r3, [pc, #52]	; (8010c78 <udp_netif_ip_addr_changed+0x5c>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	60fb      	str	r3, [r7, #12]
 8010c48:	e00c      	b.n	8010c64 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d103      	bne.n	8010c5e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	60fb      	str	r3, [r7, #12]
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d1ef      	bne.n	8010c4a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010c6a:	bf00      	nop
 8010c6c:	3714      	adds	r7, #20
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c74:	4770      	bx	lr
 8010c76:	bf00      	nop
 8010c78:	20008f10 	.word	0x20008f10

08010c7c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010c84:	4915      	ldr	r1, [pc, #84]	; (8010cdc <etharp_free_entry+0x60>)
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	4613      	mov	r3, r2
 8010c8a:	005b      	lsls	r3, r3, #1
 8010c8c:	4413      	add	r3, r2
 8010c8e:	00db      	lsls	r3, r3, #3
 8010c90:	440b      	add	r3, r1
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d013      	beq.n	8010cc0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010c98:	4910      	ldr	r1, [pc, #64]	; (8010cdc <etharp_free_entry+0x60>)
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	4613      	mov	r3, r2
 8010c9e:	005b      	lsls	r3, r3, #1
 8010ca0:	4413      	add	r3, r2
 8010ca2:	00db      	lsls	r3, r3, #3
 8010ca4:	440b      	add	r3, r1
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7f9 fc9d 	bl	800a5e8 <pbuf_free>
    arp_table[i].q = NULL;
 8010cae:	490b      	ldr	r1, [pc, #44]	; (8010cdc <etharp_free_entry+0x60>)
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	4613      	mov	r3, r2
 8010cb4:	005b      	lsls	r3, r3, #1
 8010cb6:	4413      	add	r3, r2
 8010cb8:	00db      	lsls	r3, r3, #3
 8010cba:	440b      	add	r3, r1
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010cc0:	4906      	ldr	r1, [pc, #24]	; (8010cdc <etharp_free_entry+0x60>)
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	4613      	mov	r3, r2
 8010cc6:	005b      	lsls	r3, r3, #1
 8010cc8:	4413      	add	r3, r2
 8010cca:	00db      	lsls	r3, r3, #3
 8010ccc:	440b      	add	r3, r1
 8010cce:	3314      	adds	r3, #20
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010cd4:	bf00      	nop
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	20008f14 	.word	0x20008f14

08010ce0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	607b      	str	r3, [r7, #4]
 8010cea:	e096      	b.n	8010e1a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010cec:	494f      	ldr	r1, [pc, #316]	; (8010e2c <etharp_tmr+0x14c>)
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	4613      	mov	r3, r2
 8010cf2:	005b      	lsls	r3, r3, #1
 8010cf4:	4413      	add	r3, r2
 8010cf6:	00db      	lsls	r3, r3, #3
 8010cf8:	440b      	add	r3, r1
 8010cfa:	3314      	adds	r3, #20
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010d00:	78fb      	ldrb	r3, [r7, #3]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	f000 8086 	beq.w	8010e14 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010d08:	4948      	ldr	r1, [pc, #288]	; (8010e2c <etharp_tmr+0x14c>)
 8010d0a:	687a      	ldr	r2, [r7, #4]
 8010d0c:	4613      	mov	r3, r2
 8010d0e:	005b      	lsls	r3, r3, #1
 8010d10:	4413      	add	r3, r2
 8010d12:	00db      	lsls	r3, r3, #3
 8010d14:	440b      	add	r3, r1
 8010d16:	3312      	adds	r3, #18
 8010d18:	881b      	ldrh	r3, [r3, #0]
 8010d1a:	3301      	adds	r3, #1
 8010d1c:	b298      	uxth	r0, r3
 8010d1e:	4943      	ldr	r1, [pc, #268]	; (8010e2c <etharp_tmr+0x14c>)
 8010d20:	687a      	ldr	r2, [r7, #4]
 8010d22:	4613      	mov	r3, r2
 8010d24:	005b      	lsls	r3, r3, #1
 8010d26:	4413      	add	r3, r2
 8010d28:	00db      	lsls	r3, r3, #3
 8010d2a:	440b      	add	r3, r1
 8010d2c:	3312      	adds	r3, #18
 8010d2e:	4602      	mov	r2, r0
 8010d30:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010d32:	493e      	ldr	r1, [pc, #248]	; (8010e2c <etharp_tmr+0x14c>)
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	4613      	mov	r3, r2
 8010d38:	005b      	lsls	r3, r3, #1
 8010d3a:	4413      	add	r3, r2
 8010d3c:	00db      	lsls	r3, r3, #3
 8010d3e:	440b      	add	r3, r1
 8010d40:	3312      	adds	r3, #18
 8010d42:	881b      	ldrh	r3, [r3, #0]
 8010d44:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010d48:	d215      	bcs.n	8010d76 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010d4a:	4938      	ldr	r1, [pc, #224]	; (8010e2c <etharp_tmr+0x14c>)
 8010d4c:	687a      	ldr	r2, [r7, #4]
 8010d4e:	4613      	mov	r3, r2
 8010d50:	005b      	lsls	r3, r3, #1
 8010d52:	4413      	add	r3, r2
 8010d54:	00db      	lsls	r3, r3, #3
 8010d56:	440b      	add	r3, r1
 8010d58:	3314      	adds	r3, #20
 8010d5a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010d5c:	2b01      	cmp	r3, #1
 8010d5e:	d10e      	bne.n	8010d7e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010d60:	4932      	ldr	r1, [pc, #200]	; (8010e2c <etharp_tmr+0x14c>)
 8010d62:	687a      	ldr	r2, [r7, #4]
 8010d64:	4613      	mov	r3, r2
 8010d66:	005b      	lsls	r3, r3, #1
 8010d68:	4413      	add	r3, r2
 8010d6a:	00db      	lsls	r3, r3, #3
 8010d6c:	440b      	add	r3, r1
 8010d6e:	3312      	adds	r3, #18
 8010d70:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010d72:	2b04      	cmp	r3, #4
 8010d74:	d903      	bls.n	8010d7e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f7ff ff80 	bl	8010c7c <etharp_free_entry>
 8010d7c:	e04a      	b.n	8010e14 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010d7e:	492b      	ldr	r1, [pc, #172]	; (8010e2c <etharp_tmr+0x14c>)
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	4613      	mov	r3, r2
 8010d84:	005b      	lsls	r3, r3, #1
 8010d86:	4413      	add	r3, r2
 8010d88:	00db      	lsls	r3, r3, #3
 8010d8a:	440b      	add	r3, r1
 8010d8c:	3314      	adds	r3, #20
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	2b03      	cmp	r3, #3
 8010d92:	d10a      	bne.n	8010daa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010d94:	4925      	ldr	r1, [pc, #148]	; (8010e2c <etharp_tmr+0x14c>)
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	4613      	mov	r3, r2
 8010d9a:	005b      	lsls	r3, r3, #1
 8010d9c:	4413      	add	r3, r2
 8010d9e:	00db      	lsls	r3, r3, #3
 8010da0:	440b      	add	r3, r1
 8010da2:	3314      	adds	r3, #20
 8010da4:	2204      	movs	r2, #4
 8010da6:	701a      	strb	r2, [r3, #0]
 8010da8:	e034      	b.n	8010e14 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010daa:	4920      	ldr	r1, [pc, #128]	; (8010e2c <etharp_tmr+0x14c>)
 8010dac:	687a      	ldr	r2, [r7, #4]
 8010dae:	4613      	mov	r3, r2
 8010db0:	005b      	lsls	r3, r3, #1
 8010db2:	4413      	add	r3, r2
 8010db4:	00db      	lsls	r3, r3, #3
 8010db6:	440b      	add	r3, r1
 8010db8:	3314      	adds	r3, #20
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	2b04      	cmp	r3, #4
 8010dbe:	d10a      	bne.n	8010dd6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010dc0:	491a      	ldr	r1, [pc, #104]	; (8010e2c <etharp_tmr+0x14c>)
 8010dc2:	687a      	ldr	r2, [r7, #4]
 8010dc4:	4613      	mov	r3, r2
 8010dc6:	005b      	lsls	r3, r3, #1
 8010dc8:	4413      	add	r3, r2
 8010dca:	00db      	lsls	r3, r3, #3
 8010dcc:	440b      	add	r3, r1
 8010dce:	3314      	adds	r3, #20
 8010dd0:	2202      	movs	r2, #2
 8010dd2:	701a      	strb	r2, [r3, #0]
 8010dd4:	e01e      	b.n	8010e14 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010dd6:	4915      	ldr	r1, [pc, #84]	; (8010e2c <etharp_tmr+0x14c>)
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	4613      	mov	r3, r2
 8010ddc:	005b      	lsls	r3, r3, #1
 8010dde:	4413      	add	r3, r2
 8010de0:	00db      	lsls	r3, r3, #3
 8010de2:	440b      	add	r3, r1
 8010de4:	3314      	adds	r3, #20
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	d113      	bne.n	8010e14 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010dec:	490f      	ldr	r1, [pc, #60]	; (8010e2c <etharp_tmr+0x14c>)
 8010dee:	687a      	ldr	r2, [r7, #4]
 8010df0:	4613      	mov	r3, r2
 8010df2:	005b      	lsls	r3, r3, #1
 8010df4:	4413      	add	r3, r2
 8010df6:	00db      	lsls	r3, r3, #3
 8010df8:	440b      	add	r3, r1
 8010dfa:	3308      	adds	r3, #8
 8010dfc:	6818      	ldr	r0, [r3, #0]
 8010dfe:	687a      	ldr	r2, [r7, #4]
 8010e00:	4613      	mov	r3, r2
 8010e02:	005b      	lsls	r3, r3, #1
 8010e04:	4413      	add	r3, r2
 8010e06:	00db      	lsls	r3, r3, #3
 8010e08:	4a08      	ldr	r2, [pc, #32]	; (8010e2c <etharp_tmr+0x14c>)
 8010e0a:	4413      	add	r3, r2
 8010e0c:	3304      	adds	r3, #4
 8010e0e:	4619      	mov	r1, r3
 8010e10:	f000 fe6e 	bl	8011af0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	3301      	adds	r3, #1
 8010e18:	607b      	str	r3, [r7, #4]
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2b09      	cmp	r3, #9
 8010e1e:	f77f af65 	ble.w	8010cec <etharp_tmr+0xc>
      }
    }
  }
}
 8010e22:	bf00      	nop
 8010e24:	bf00      	nop
 8010e26:	3708      	adds	r7, #8
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	20008f14 	.word	0x20008f14

08010e30 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b08a      	sub	sp, #40	; 0x28
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	460b      	mov	r3, r1
 8010e3a:	607a      	str	r2, [r7, #4]
 8010e3c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010e3e:	230a      	movs	r3, #10
 8010e40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010e42:	230a      	movs	r3, #10
 8010e44:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010e46:	230a      	movs	r3, #10
 8010e48:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010e4e:	230a      	movs	r3, #10
 8010e50:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010e52:	2300      	movs	r3, #0
 8010e54:	83bb      	strh	r3, [r7, #28]
 8010e56:	2300      	movs	r3, #0
 8010e58:	837b      	strh	r3, [r7, #26]
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e5e:	2300      	movs	r3, #0
 8010e60:	843b      	strh	r3, [r7, #32]
 8010e62:	e0ae      	b.n	8010fc2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010e64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e68:	49a6      	ldr	r1, [pc, #664]	; (8011104 <etharp_find_entry+0x2d4>)
 8010e6a:	4613      	mov	r3, r2
 8010e6c:	005b      	lsls	r3, r3, #1
 8010e6e:	4413      	add	r3, r2
 8010e70:	00db      	lsls	r3, r3, #3
 8010e72:	440b      	add	r3, r1
 8010e74:	3314      	adds	r3, #20
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010e7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010e7e:	2b0a      	cmp	r3, #10
 8010e80:	d105      	bne.n	8010e8e <etharp_find_entry+0x5e>
 8010e82:	7dfb      	ldrb	r3, [r7, #23]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d102      	bne.n	8010e8e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010e88:	8c3b      	ldrh	r3, [r7, #32]
 8010e8a:	847b      	strh	r3, [r7, #34]	; 0x22
 8010e8c:	e095      	b.n	8010fba <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010e8e:	7dfb      	ldrb	r3, [r7, #23]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	f000 8092 	beq.w	8010fba <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010e96:	7dfb      	ldrb	r3, [r7, #23]
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	d009      	beq.n	8010eb0 <etharp_find_entry+0x80>
 8010e9c:	7dfb      	ldrb	r3, [r7, #23]
 8010e9e:	2b01      	cmp	r3, #1
 8010ea0:	d806      	bhi.n	8010eb0 <etharp_find_entry+0x80>
 8010ea2:	4b99      	ldr	r3, [pc, #612]	; (8011108 <etharp_find_entry+0x2d8>)
 8010ea4:	f240 1223 	movw	r2, #291	; 0x123
 8010ea8:	4998      	ldr	r1, [pc, #608]	; (801110c <etharp_find_entry+0x2dc>)
 8010eaa:	4899      	ldr	r0, [pc, #612]	; (8011110 <etharp_find_entry+0x2e0>)
 8010eac:	f002 fa10 	bl	80132d0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d020      	beq.n	8010ef8 <etharp_find_entry+0xc8>
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	6819      	ldr	r1, [r3, #0]
 8010eba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ebe:	4891      	ldr	r0, [pc, #580]	; (8011104 <etharp_find_entry+0x2d4>)
 8010ec0:	4613      	mov	r3, r2
 8010ec2:	005b      	lsls	r3, r3, #1
 8010ec4:	4413      	add	r3, r2
 8010ec6:	00db      	lsls	r3, r3, #3
 8010ec8:	4403      	add	r3, r0
 8010eca:	3304      	adds	r3, #4
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	4299      	cmp	r1, r3
 8010ed0:	d112      	bne.n	8010ef8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d00c      	beq.n	8010ef2 <etharp_find_entry+0xc2>
 8010ed8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010edc:	4989      	ldr	r1, [pc, #548]	; (8011104 <etharp_find_entry+0x2d4>)
 8010ede:	4613      	mov	r3, r2
 8010ee0:	005b      	lsls	r3, r3, #1
 8010ee2:	4413      	add	r3, r2
 8010ee4:	00db      	lsls	r3, r3, #3
 8010ee6:	440b      	add	r3, r1
 8010ee8:	3308      	adds	r3, #8
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	687a      	ldr	r2, [r7, #4]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d102      	bne.n	8010ef8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010ef2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ef6:	e100      	b.n	80110fa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010ef8:	7dfb      	ldrb	r3, [r7, #23]
 8010efa:	2b01      	cmp	r3, #1
 8010efc:	d140      	bne.n	8010f80 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010efe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f02:	4980      	ldr	r1, [pc, #512]	; (8011104 <etharp_find_entry+0x2d4>)
 8010f04:	4613      	mov	r3, r2
 8010f06:	005b      	lsls	r3, r3, #1
 8010f08:	4413      	add	r3, r2
 8010f0a:	00db      	lsls	r3, r3, #3
 8010f0c:	440b      	add	r3, r1
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d01a      	beq.n	8010f4a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010f14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f18:	497a      	ldr	r1, [pc, #488]	; (8011104 <etharp_find_entry+0x2d4>)
 8010f1a:	4613      	mov	r3, r2
 8010f1c:	005b      	lsls	r3, r3, #1
 8010f1e:	4413      	add	r3, r2
 8010f20:	00db      	lsls	r3, r3, #3
 8010f22:	440b      	add	r3, r1
 8010f24:	3312      	adds	r3, #18
 8010f26:	881b      	ldrh	r3, [r3, #0]
 8010f28:	8bba      	ldrh	r2, [r7, #28]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d845      	bhi.n	8010fba <etharp_find_entry+0x18a>
            old_queue = i;
 8010f2e:	8c3b      	ldrh	r3, [r7, #32]
 8010f30:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010f32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f36:	4973      	ldr	r1, [pc, #460]	; (8011104 <etharp_find_entry+0x2d4>)
 8010f38:	4613      	mov	r3, r2
 8010f3a:	005b      	lsls	r3, r3, #1
 8010f3c:	4413      	add	r3, r2
 8010f3e:	00db      	lsls	r3, r3, #3
 8010f40:	440b      	add	r3, r1
 8010f42:	3312      	adds	r3, #18
 8010f44:	881b      	ldrh	r3, [r3, #0]
 8010f46:	83bb      	strh	r3, [r7, #28]
 8010f48:	e037      	b.n	8010fba <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010f4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f4e:	496d      	ldr	r1, [pc, #436]	; (8011104 <etharp_find_entry+0x2d4>)
 8010f50:	4613      	mov	r3, r2
 8010f52:	005b      	lsls	r3, r3, #1
 8010f54:	4413      	add	r3, r2
 8010f56:	00db      	lsls	r3, r3, #3
 8010f58:	440b      	add	r3, r1
 8010f5a:	3312      	adds	r3, #18
 8010f5c:	881b      	ldrh	r3, [r3, #0]
 8010f5e:	8b7a      	ldrh	r2, [r7, #26]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d82a      	bhi.n	8010fba <etharp_find_entry+0x18a>
            old_pending = i;
 8010f64:	8c3b      	ldrh	r3, [r7, #32]
 8010f66:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010f68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f6c:	4965      	ldr	r1, [pc, #404]	; (8011104 <etharp_find_entry+0x2d4>)
 8010f6e:	4613      	mov	r3, r2
 8010f70:	005b      	lsls	r3, r3, #1
 8010f72:	4413      	add	r3, r2
 8010f74:	00db      	lsls	r3, r3, #3
 8010f76:	440b      	add	r3, r1
 8010f78:	3312      	adds	r3, #18
 8010f7a:	881b      	ldrh	r3, [r3, #0]
 8010f7c:	837b      	strh	r3, [r7, #26]
 8010f7e:	e01c      	b.n	8010fba <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010f80:	7dfb      	ldrb	r3, [r7, #23]
 8010f82:	2b01      	cmp	r3, #1
 8010f84:	d919      	bls.n	8010fba <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010f86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f8a:	495e      	ldr	r1, [pc, #376]	; (8011104 <etharp_find_entry+0x2d4>)
 8010f8c:	4613      	mov	r3, r2
 8010f8e:	005b      	lsls	r3, r3, #1
 8010f90:	4413      	add	r3, r2
 8010f92:	00db      	lsls	r3, r3, #3
 8010f94:	440b      	add	r3, r1
 8010f96:	3312      	adds	r3, #18
 8010f98:	881b      	ldrh	r3, [r3, #0]
 8010f9a:	8b3a      	ldrh	r2, [r7, #24]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d80c      	bhi.n	8010fba <etharp_find_entry+0x18a>
            old_stable = i;
 8010fa0:	8c3b      	ldrh	r3, [r7, #32]
 8010fa2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010fa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fa8:	4956      	ldr	r1, [pc, #344]	; (8011104 <etharp_find_entry+0x2d4>)
 8010faa:	4613      	mov	r3, r2
 8010fac:	005b      	lsls	r3, r3, #1
 8010fae:	4413      	add	r3, r2
 8010fb0:	00db      	lsls	r3, r3, #3
 8010fb2:	440b      	add	r3, r1
 8010fb4:	3312      	adds	r3, #18
 8010fb6:	881b      	ldrh	r3, [r3, #0]
 8010fb8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010fba:	8c3b      	ldrh	r3, [r7, #32]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	b29b      	uxth	r3, r3
 8010fc0:	843b      	strh	r3, [r7, #32]
 8010fc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010fc6:	2b09      	cmp	r3, #9
 8010fc8:	f77f af4c 	ble.w	8010e64 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010fcc:	7afb      	ldrb	r3, [r7, #11]
 8010fce:	f003 0302 	and.w	r3, r3, #2
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d108      	bne.n	8010fe8 <etharp_find_entry+0x1b8>
 8010fd6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010fda:	2b0a      	cmp	r3, #10
 8010fdc:	d107      	bne.n	8010fee <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010fde:	7afb      	ldrb	r3, [r7, #11]
 8010fe0:	f003 0301 	and.w	r3, r3, #1
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d102      	bne.n	8010fee <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8010fec:	e085      	b.n	80110fa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010fee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010ff2:	2b09      	cmp	r3, #9
 8010ff4:	dc02      	bgt.n	8010ffc <etharp_find_entry+0x1cc>
    i = empty;
 8010ff6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ff8:	843b      	strh	r3, [r7, #32]
 8010ffa:	e039      	b.n	8011070 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010ffc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011000:	2b09      	cmp	r3, #9
 8011002:	dc14      	bgt.n	801102e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011006:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011008:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801100c:	493d      	ldr	r1, [pc, #244]	; (8011104 <etharp_find_entry+0x2d4>)
 801100e:	4613      	mov	r3, r2
 8011010:	005b      	lsls	r3, r3, #1
 8011012:	4413      	add	r3, r2
 8011014:	00db      	lsls	r3, r3, #3
 8011016:	440b      	add	r3, r1
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d018      	beq.n	8011050 <etharp_find_entry+0x220>
 801101e:	4b3a      	ldr	r3, [pc, #232]	; (8011108 <etharp_find_entry+0x2d8>)
 8011020:	f240 126d 	movw	r2, #365	; 0x16d
 8011024:	493b      	ldr	r1, [pc, #236]	; (8011114 <etharp_find_entry+0x2e4>)
 8011026:	483a      	ldr	r0, [pc, #232]	; (8011110 <etharp_find_entry+0x2e0>)
 8011028:	f002 f952 	bl	80132d0 <iprintf>
 801102c:	e010      	b.n	8011050 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801102e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011032:	2b09      	cmp	r3, #9
 8011034:	dc02      	bgt.n	801103c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011036:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011038:	843b      	strh	r3, [r7, #32]
 801103a:	e009      	b.n	8011050 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801103c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011040:	2b09      	cmp	r3, #9
 8011042:	dc02      	bgt.n	801104a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011044:	8bfb      	ldrh	r3, [r7, #30]
 8011046:	843b      	strh	r3, [r7, #32]
 8011048:	e002      	b.n	8011050 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801104a:	f04f 33ff 	mov.w	r3, #4294967295
 801104e:	e054      	b.n	80110fa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011050:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011054:	2b09      	cmp	r3, #9
 8011056:	dd06      	ble.n	8011066 <etharp_find_entry+0x236>
 8011058:	4b2b      	ldr	r3, [pc, #172]	; (8011108 <etharp_find_entry+0x2d8>)
 801105a:	f240 127f 	movw	r2, #383	; 0x17f
 801105e:	492e      	ldr	r1, [pc, #184]	; (8011118 <etharp_find_entry+0x2e8>)
 8011060:	482b      	ldr	r0, [pc, #172]	; (8011110 <etharp_find_entry+0x2e0>)
 8011062:	f002 f935 	bl	80132d0 <iprintf>
    etharp_free_entry(i);
 8011066:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801106a:	4618      	mov	r0, r3
 801106c:	f7ff fe06 	bl	8010c7c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011070:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011074:	2b09      	cmp	r3, #9
 8011076:	dd06      	ble.n	8011086 <etharp_find_entry+0x256>
 8011078:	4b23      	ldr	r3, [pc, #140]	; (8011108 <etharp_find_entry+0x2d8>)
 801107a:	f240 1283 	movw	r2, #387	; 0x183
 801107e:	4926      	ldr	r1, [pc, #152]	; (8011118 <etharp_find_entry+0x2e8>)
 8011080:	4823      	ldr	r0, [pc, #140]	; (8011110 <etharp_find_entry+0x2e0>)
 8011082:	f002 f925 	bl	80132d0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011086:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801108a:	491e      	ldr	r1, [pc, #120]	; (8011104 <etharp_find_entry+0x2d4>)
 801108c:	4613      	mov	r3, r2
 801108e:	005b      	lsls	r3, r3, #1
 8011090:	4413      	add	r3, r2
 8011092:	00db      	lsls	r3, r3, #3
 8011094:	440b      	add	r3, r1
 8011096:	3314      	adds	r3, #20
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d006      	beq.n	80110ac <etharp_find_entry+0x27c>
 801109e:	4b1a      	ldr	r3, [pc, #104]	; (8011108 <etharp_find_entry+0x2d8>)
 80110a0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80110a4:	491d      	ldr	r1, [pc, #116]	; (801111c <etharp_find_entry+0x2ec>)
 80110a6:	481a      	ldr	r0, [pc, #104]	; (8011110 <etharp_find_entry+0x2e0>)
 80110a8:	f002 f912 	bl	80132d0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d00b      	beq.n	80110ca <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80110b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	6819      	ldr	r1, [r3, #0]
 80110ba:	4812      	ldr	r0, [pc, #72]	; (8011104 <etharp_find_entry+0x2d4>)
 80110bc:	4613      	mov	r3, r2
 80110be:	005b      	lsls	r3, r3, #1
 80110c0:	4413      	add	r3, r2
 80110c2:	00db      	lsls	r3, r3, #3
 80110c4:	4403      	add	r3, r0
 80110c6:	3304      	adds	r3, #4
 80110c8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80110ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110ce:	490d      	ldr	r1, [pc, #52]	; (8011104 <etharp_find_entry+0x2d4>)
 80110d0:	4613      	mov	r3, r2
 80110d2:	005b      	lsls	r3, r3, #1
 80110d4:	4413      	add	r3, r2
 80110d6:	00db      	lsls	r3, r3, #3
 80110d8:	440b      	add	r3, r1
 80110da:	3312      	adds	r3, #18
 80110dc:	2200      	movs	r2, #0
 80110de:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80110e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110e4:	4907      	ldr	r1, [pc, #28]	; (8011104 <etharp_find_entry+0x2d4>)
 80110e6:	4613      	mov	r3, r2
 80110e8:	005b      	lsls	r3, r3, #1
 80110ea:	4413      	add	r3, r2
 80110ec:	00db      	lsls	r3, r3, #3
 80110ee:	440b      	add	r3, r1
 80110f0:	3308      	adds	r3, #8
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80110f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3728      	adds	r7, #40	; 0x28
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	20008f14 	.word	0x20008f14
 8011108:	08016a30 	.word	0x08016a30
 801110c:	08016a68 	.word	0x08016a68
 8011110:	08016aa8 	.word	0x08016aa8
 8011114:	08016ad0 	.word	0x08016ad0
 8011118:	08016ae8 	.word	0x08016ae8
 801111c:	08016afc 	.word	0x08016afc

08011120 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b088      	sub	sp, #32
 8011124:	af02      	add	r7, sp, #8
 8011126:	60f8      	str	r0, [r7, #12]
 8011128:	60b9      	str	r1, [r7, #8]
 801112a:	607a      	str	r2, [r7, #4]
 801112c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011134:	2b06      	cmp	r3, #6
 8011136:	d006      	beq.n	8011146 <etharp_update_arp_entry+0x26>
 8011138:	4b48      	ldr	r3, [pc, #288]	; (801125c <etharp_update_arp_entry+0x13c>)
 801113a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801113e:	4948      	ldr	r1, [pc, #288]	; (8011260 <etharp_update_arp_entry+0x140>)
 8011140:	4848      	ldr	r0, [pc, #288]	; (8011264 <etharp_update_arp_entry+0x144>)
 8011142:	f002 f8c5 	bl	80132d0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d012      	beq.n	8011172 <etharp_update_arp_entry+0x52>
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d00e      	beq.n	8011172 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	68f9      	ldr	r1, [r7, #12]
 801115a:	4618      	mov	r0, r3
 801115c:	f001 f8fe 	bl	801235c <ip4_addr_isbroadcast_u32>
 8011160:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011162:	2b00      	cmp	r3, #0
 8011164:	d105      	bne.n	8011172 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801116e:	2be0      	cmp	r3, #224	; 0xe0
 8011170:	d102      	bne.n	8011178 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011172:	f06f 030f 	mvn.w	r3, #15
 8011176:	e06c      	b.n	8011252 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011178:	78fb      	ldrb	r3, [r7, #3]
 801117a:	68fa      	ldr	r2, [r7, #12]
 801117c:	4619      	mov	r1, r3
 801117e:	68b8      	ldr	r0, [r7, #8]
 8011180:	f7ff fe56 	bl	8010e30 <etharp_find_entry>
 8011184:	4603      	mov	r3, r0
 8011186:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011188:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801118c:	2b00      	cmp	r3, #0
 801118e:	da02      	bge.n	8011196 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011190:	8afb      	ldrh	r3, [r7, #22]
 8011192:	b25b      	sxtb	r3, r3
 8011194:	e05d      	b.n	8011252 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011196:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801119a:	4933      	ldr	r1, [pc, #204]	; (8011268 <etharp_update_arp_entry+0x148>)
 801119c:	4613      	mov	r3, r2
 801119e:	005b      	lsls	r3, r3, #1
 80111a0:	4413      	add	r3, r2
 80111a2:	00db      	lsls	r3, r3, #3
 80111a4:	440b      	add	r3, r1
 80111a6:	3314      	adds	r3, #20
 80111a8:	2202      	movs	r2, #2
 80111aa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80111ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80111b0:	492d      	ldr	r1, [pc, #180]	; (8011268 <etharp_update_arp_entry+0x148>)
 80111b2:	4613      	mov	r3, r2
 80111b4:	005b      	lsls	r3, r3, #1
 80111b6:	4413      	add	r3, r2
 80111b8:	00db      	lsls	r3, r3, #3
 80111ba:	440b      	add	r3, r1
 80111bc:	3308      	adds	r3, #8
 80111be:	68fa      	ldr	r2, [r7, #12]
 80111c0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80111c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80111c6:	4613      	mov	r3, r2
 80111c8:	005b      	lsls	r3, r3, #1
 80111ca:	4413      	add	r3, r2
 80111cc:	00db      	lsls	r3, r3, #3
 80111ce:	3308      	adds	r3, #8
 80111d0:	4a25      	ldr	r2, [pc, #148]	; (8011268 <etharp_update_arp_entry+0x148>)
 80111d2:	4413      	add	r3, r2
 80111d4:	3304      	adds	r3, #4
 80111d6:	2206      	movs	r2, #6
 80111d8:	6879      	ldr	r1, [r7, #4]
 80111da:	4618      	mov	r0, r3
 80111dc:	f002 f848 	bl	8013270 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80111e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80111e4:	4920      	ldr	r1, [pc, #128]	; (8011268 <etharp_update_arp_entry+0x148>)
 80111e6:	4613      	mov	r3, r2
 80111e8:	005b      	lsls	r3, r3, #1
 80111ea:	4413      	add	r3, r2
 80111ec:	00db      	lsls	r3, r3, #3
 80111ee:	440b      	add	r3, r1
 80111f0:	3312      	adds	r3, #18
 80111f2:	2200      	movs	r2, #0
 80111f4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80111f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80111fa:	491b      	ldr	r1, [pc, #108]	; (8011268 <etharp_update_arp_entry+0x148>)
 80111fc:	4613      	mov	r3, r2
 80111fe:	005b      	lsls	r3, r3, #1
 8011200:	4413      	add	r3, r2
 8011202:	00db      	lsls	r3, r3, #3
 8011204:	440b      	add	r3, r1
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d021      	beq.n	8011250 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801120c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011210:	4915      	ldr	r1, [pc, #84]	; (8011268 <etharp_update_arp_entry+0x148>)
 8011212:	4613      	mov	r3, r2
 8011214:	005b      	lsls	r3, r3, #1
 8011216:	4413      	add	r3, r2
 8011218:	00db      	lsls	r3, r3, #3
 801121a:	440b      	add	r3, r1
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011220:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011224:	4910      	ldr	r1, [pc, #64]	; (8011268 <etharp_update_arp_entry+0x148>)
 8011226:	4613      	mov	r3, r2
 8011228:	005b      	lsls	r3, r3, #1
 801122a:	4413      	add	r3, r2
 801122c:	00db      	lsls	r3, r3, #3
 801122e:	440b      	add	r3, r1
 8011230:	2200      	movs	r2, #0
 8011232:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801123a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801123e:	9300      	str	r3, [sp, #0]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6939      	ldr	r1, [r7, #16]
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	f001 ff97 	bl	8013178 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801124a:	6938      	ldr	r0, [r7, #16]
 801124c:	f7f9 f9cc 	bl	800a5e8 <pbuf_free>
  }
  return ERR_OK;
 8011250:	2300      	movs	r3, #0
}
 8011252:	4618      	mov	r0, r3
 8011254:	3718      	adds	r7, #24
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	08016a30 	.word	0x08016a30
 8011260:	08016b28 	.word	0x08016b28
 8011264:	08016aa8 	.word	0x08016aa8
 8011268:	20008f14 	.word	0x20008f14

0801126c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011274:	2300      	movs	r3, #0
 8011276:	60fb      	str	r3, [r7, #12]
 8011278:	e01e      	b.n	80112b8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801127a:	4913      	ldr	r1, [pc, #76]	; (80112c8 <etharp_cleanup_netif+0x5c>)
 801127c:	68fa      	ldr	r2, [r7, #12]
 801127e:	4613      	mov	r3, r2
 8011280:	005b      	lsls	r3, r3, #1
 8011282:	4413      	add	r3, r2
 8011284:	00db      	lsls	r3, r3, #3
 8011286:	440b      	add	r3, r1
 8011288:	3314      	adds	r3, #20
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801128e:	7afb      	ldrb	r3, [r7, #11]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d00e      	beq.n	80112b2 <etharp_cleanup_netif+0x46>
 8011294:	490c      	ldr	r1, [pc, #48]	; (80112c8 <etharp_cleanup_netif+0x5c>)
 8011296:	68fa      	ldr	r2, [r7, #12]
 8011298:	4613      	mov	r3, r2
 801129a:	005b      	lsls	r3, r3, #1
 801129c:	4413      	add	r3, r2
 801129e:	00db      	lsls	r3, r3, #3
 80112a0:	440b      	add	r3, r1
 80112a2:	3308      	adds	r3, #8
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	687a      	ldr	r2, [r7, #4]
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d102      	bne.n	80112b2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80112ac:	68f8      	ldr	r0, [r7, #12]
 80112ae:	f7ff fce5 	bl	8010c7c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	3301      	adds	r3, #1
 80112b6:	60fb      	str	r3, [r7, #12]
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	2b09      	cmp	r3, #9
 80112bc:	dddd      	ble.n	801127a <etharp_cleanup_netif+0xe>
    }
  }
}
 80112be:	bf00      	nop
 80112c0:	bf00      	nop
 80112c2:	3710      	adds	r7, #16
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	20008f14 	.word	0x20008f14

080112cc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80112cc:	b5b0      	push	{r4, r5, r7, lr}
 80112ce:	b08a      	sub	sp, #40	; 0x28
 80112d0:	af04      	add	r7, sp, #16
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d107      	bne.n	80112ec <etharp_input+0x20>
 80112dc:	4b3d      	ldr	r3, [pc, #244]	; (80113d4 <etharp_input+0x108>)
 80112de:	f240 228a 	movw	r2, #650	; 0x28a
 80112e2:	493d      	ldr	r1, [pc, #244]	; (80113d8 <etharp_input+0x10c>)
 80112e4:	483d      	ldr	r0, [pc, #244]	; (80113dc <etharp_input+0x110>)
 80112e6:	f001 fff3 	bl	80132d0 <iprintf>
 80112ea:	e06f      	b.n	80113cc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	881b      	ldrh	r3, [r3, #0]
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80112fc:	d10c      	bne.n	8011318 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011302:	2b06      	cmp	r3, #6
 8011304:	d108      	bne.n	8011318 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801130a:	2b04      	cmp	r3, #4
 801130c:	d104      	bne.n	8011318 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	885b      	ldrh	r3, [r3, #2]
 8011312:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011314:	2b08      	cmp	r3, #8
 8011316:	d003      	beq.n	8011320 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f7f9 f965 	bl	800a5e8 <pbuf_free>
    return;
 801131e:	e055      	b.n	80113cc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	330e      	adds	r3, #14
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	3318      	adds	r3, #24
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	3304      	adds	r3, #4
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d102      	bne.n	8011340 <etharp_input+0x74>
    for_us = 0;
 801133a:	2300      	movs	r3, #0
 801133c:	75fb      	strb	r3, [r7, #23]
 801133e:	e009      	b.n	8011354 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011340:	68ba      	ldr	r2, [r7, #8]
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	3304      	adds	r3, #4
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	429a      	cmp	r2, r3
 801134a:	bf0c      	ite	eq
 801134c:	2301      	moveq	r3, #1
 801134e:	2300      	movne	r3, #0
 8011350:	b2db      	uxtb	r3, r3
 8011352:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	f103 0208 	add.w	r2, r3, #8
 801135a:	7dfb      	ldrb	r3, [r7, #23]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d001      	beq.n	8011364 <etharp_input+0x98>
 8011360:	2301      	movs	r3, #1
 8011362:	e000      	b.n	8011366 <etharp_input+0x9a>
 8011364:	2302      	movs	r3, #2
 8011366:	f107 010c 	add.w	r1, r7, #12
 801136a:	6838      	ldr	r0, [r7, #0]
 801136c:	f7ff fed8 	bl	8011120 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	88db      	ldrh	r3, [r3, #6]
 8011374:	b29b      	uxth	r3, r3
 8011376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801137a:	d003      	beq.n	8011384 <etharp_input+0xb8>
 801137c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011380:	d01e      	beq.n	80113c0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011382:	e020      	b.n	80113c6 <etharp_input+0xfa>
      if (for_us) {
 8011384:	7dfb      	ldrb	r3, [r7, #23]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d01c      	beq.n	80113c4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80113a0:	693a      	ldr	r2, [r7, #16]
 80113a2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80113a4:	2102      	movs	r1, #2
 80113a6:	9103      	str	r1, [sp, #12]
 80113a8:	f107 010c 	add.w	r1, r7, #12
 80113ac:	9102      	str	r1, [sp, #8]
 80113ae:	9201      	str	r2, [sp, #4]
 80113b0:	9300      	str	r3, [sp, #0]
 80113b2:	462b      	mov	r3, r5
 80113b4:	4622      	mov	r2, r4
 80113b6:	4601      	mov	r1, r0
 80113b8:	6838      	ldr	r0, [r7, #0]
 80113ba:	f000 faeb 	bl	8011994 <etharp_raw>
      break;
 80113be:	e001      	b.n	80113c4 <etharp_input+0xf8>
      break;
 80113c0:	bf00      	nop
 80113c2:	e000      	b.n	80113c6 <etharp_input+0xfa>
      break;
 80113c4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f7f9 f90e 	bl	800a5e8 <pbuf_free>
}
 80113cc:	3718      	adds	r7, #24
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bdb0      	pop	{r4, r5, r7, pc}
 80113d2:	bf00      	nop
 80113d4:	08016a30 	.word	0x08016a30
 80113d8:	08016b80 	.word	0x08016b80
 80113dc:	08016aa8 	.word	0x08016aa8

080113e0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b086      	sub	sp, #24
 80113e4:	af02      	add	r7, sp, #8
 80113e6:	60f8      	str	r0, [r7, #12]
 80113e8:	60b9      	str	r1, [r7, #8]
 80113ea:	4613      	mov	r3, r2
 80113ec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80113ee:	79fa      	ldrb	r2, [r7, #7]
 80113f0:	4944      	ldr	r1, [pc, #272]	; (8011504 <etharp_output_to_arp_index+0x124>)
 80113f2:	4613      	mov	r3, r2
 80113f4:	005b      	lsls	r3, r3, #1
 80113f6:	4413      	add	r3, r2
 80113f8:	00db      	lsls	r3, r3, #3
 80113fa:	440b      	add	r3, r1
 80113fc:	3314      	adds	r3, #20
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	2b01      	cmp	r3, #1
 8011402:	d806      	bhi.n	8011412 <etharp_output_to_arp_index+0x32>
 8011404:	4b40      	ldr	r3, [pc, #256]	; (8011508 <etharp_output_to_arp_index+0x128>)
 8011406:	f240 22ee 	movw	r2, #750	; 0x2ee
 801140a:	4940      	ldr	r1, [pc, #256]	; (801150c <etharp_output_to_arp_index+0x12c>)
 801140c:	4840      	ldr	r0, [pc, #256]	; (8011510 <etharp_output_to_arp_index+0x130>)
 801140e:	f001 ff5f 	bl	80132d0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011412:	79fa      	ldrb	r2, [r7, #7]
 8011414:	493b      	ldr	r1, [pc, #236]	; (8011504 <etharp_output_to_arp_index+0x124>)
 8011416:	4613      	mov	r3, r2
 8011418:	005b      	lsls	r3, r3, #1
 801141a:	4413      	add	r3, r2
 801141c:	00db      	lsls	r3, r3, #3
 801141e:	440b      	add	r3, r1
 8011420:	3314      	adds	r3, #20
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	2b02      	cmp	r3, #2
 8011426:	d153      	bne.n	80114d0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011428:	79fa      	ldrb	r2, [r7, #7]
 801142a:	4936      	ldr	r1, [pc, #216]	; (8011504 <etharp_output_to_arp_index+0x124>)
 801142c:	4613      	mov	r3, r2
 801142e:	005b      	lsls	r3, r3, #1
 8011430:	4413      	add	r3, r2
 8011432:	00db      	lsls	r3, r3, #3
 8011434:	440b      	add	r3, r1
 8011436:	3312      	adds	r3, #18
 8011438:	881b      	ldrh	r3, [r3, #0]
 801143a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801143e:	d919      	bls.n	8011474 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011440:	79fa      	ldrb	r2, [r7, #7]
 8011442:	4613      	mov	r3, r2
 8011444:	005b      	lsls	r3, r3, #1
 8011446:	4413      	add	r3, r2
 8011448:	00db      	lsls	r3, r3, #3
 801144a:	4a2e      	ldr	r2, [pc, #184]	; (8011504 <etharp_output_to_arp_index+0x124>)
 801144c:	4413      	add	r3, r2
 801144e:	3304      	adds	r3, #4
 8011450:	4619      	mov	r1, r3
 8011452:	68f8      	ldr	r0, [r7, #12]
 8011454:	f000 fb4c 	bl	8011af0 <etharp_request>
 8011458:	4603      	mov	r3, r0
 801145a:	2b00      	cmp	r3, #0
 801145c:	d138      	bne.n	80114d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801145e:	79fa      	ldrb	r2, [r7, #7]
 8011460:	4928      	ldr	r1, [pc, #160]	; (8011504 <etharp_output_to_arp_index+0x124>)
 8011462:	4613      	mov	r3, r2
 8011464:	005b      	lsls	r3, r3, #1
 8011466:	4413      	add	r3, r2
 8011468:	00db      	lsls	r3, r3, #3
 801146a:	440b      	add	r3, r1
 801146c:	3314      	adds	r3, #20
 801146e:	2203      	movs	r2, #3
 8011470:	701a      	strb	r2, [r3, #0]
 8011472:	e02d      	b.n	80114d0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011474:	79fa      	ldrb	r2, [r7, #7]
 8011476:	4923      	ldr	r1, [pc, #140]	; (8011504 <etharp_output_to_arp_index+0x124>)
 8011478:	4613      	mov	r3, r2
 801147a:	005b      	lsls	r3, r3, #1
 801147c:	4413      	add	r3, r2
 801147e:	00db      	lsls	r3, r3, #3
 8011480:	440b      	add	r3, r1
 8011482:	3312      	adds	r3, #18
 8011484:	881b      	ldrh	r3, [r3, #0]
 8011486:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801148a:	d321      	bcc.n	80114d0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801148c:	79fa      	ldrb	r2, [r7, #7]
 801148e:	4613      	mov	r3, r2
 8011490:	005b      	lsls	r3, r3, #1
 8011492:	4413      	add	r3, r2
 8011494:	00db      	lsls	r3, r3, #3
 8011496:	4a1b      	ldr	r2, [pc, #108]	; (8011504 <etharp_output_to_arp_index+0x124>)
 8011498:	4413      	add	r3, r2
 801149a:	1d19      	adds	r1, r3, #4
 801149c:	79fa      	ldrb	r2, [r7, #7]
 801149e:	4613      	mov	r3, r2
 80114a0:	005b      	lsls	r3, r3, #1
 80114a2:	4413      	add	r3, r2
 80114a4:	00db      	lsls	r3, r3, #3
 80114a6:	3308      	adds	r3, #8
 80114a8:	4a16      	ldr	r2, [pc, #88]	; (8011504 <etharp_output_to_arp_index+0x124>)
 80114aa:	4413      	add	r3, r2
 80114ac:	3304      	adds	r3, #4
 80114ae:	461a      	mov	r2, r3
 80114b0:	68f8      	ldr	r0, [r7, #12]
 80114b2:	f000 fafb 	bl	8011aac <etharp_request_dst>
 80114b6:	4603      	mov	r3, r0
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d109      	bne.n	80114d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80114bc:	79fa      	ldrb	r2, [r7, #7]
 80114be:	4911      	ldr	r1, [pc, #68]	; (8011504 <etharp_output_to_arp_index+0x124>)
 80114c0:	4613      	mov	r3, r2
 80114c2:	005b      	lsls	r3, r3, #1
 80114c4:	4413      	add	r3, r2
 80114c6:	00db      	lsls	r3, r3, #3
 80114c8:	440b      	add	r3, r1
 80114ca:	3314      	adds	r3, #20
 80114cc:	2203      	movs	r2, #3
 80114ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80114d6:	79fa      	ldrb	r2, [r7, #7]
 80114d8:	4613      	mov	r3, r2
 80114da:	005b      	lsls	r3, r3, #1
 80114dc:	4413      	add	r3, r2
 80114de:	00db      	lsls	r3, r3, #3
 80114e0:	3308      	adds	r3, #8
 80114e2:	4a08      	ldr	r2, [pc, #32]	; (8011504 <etharp_output_to_arp_index+0x124>)
 80114e4:	4413      	add	r3, r2
 80114e6:	3304      	adds	r3, #4
 80114e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80114ec:	9200      	str	r2, [sp, #0]
 80114ee:	460a      	mov	r2, r1
 80114f0:	68b9      	ldr	r1, [r7, #8]
 80114f2:	68f8      	ldr	r0, [r7, #12]
 80114f4:	f001 fe40 	bl	8013178 <ethernet_output>
 80114f8:	4603      	mov	r3, r0
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3710      	adds	r7, #16
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}
 8011502:	bf00      	nop
 8011504:	20008f14 	.word	0x20008f14
 8011508:	08016a30 	.word	0x08016a30
 801150c:	08016ba0 	.word	0x08016ba0
 8011510:	08016aa8 	.word	0x08016aa8

08011514 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b08a      	sub	sp, #40	; 0x28
 8011518:	af02      	add	r7, sp, #8
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d106      	bne.n	8011538 <etharp_output+0x24>
 801152a:	4b73      	ldr	r3, [pc, #460]	; (80116f8 <etharp_output+0x1e4>)
 801152c:	f240 321e 	movw	r2, #798	; 0x31e
 8011530:	4972      	ldr	r1, [pc, #456]	; (80116fc <etharp_output+0x1e8>)
 8011532:	4873      	ldr	r0, [pc, #460]	; (8011700 <etharp_output+0x1ec>)
 8011534:	f001 fecc 	bl	80132d0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d106      	bne.n	801154c <etharp_output+0x38>
 801153e:	4b6e      	ldr	r3, [pc, #440]	; (80116f8 <etharp_output+0x1e4>)
 8011540:	f240 321f 	movw	r2, #799	; 0x31f
 8011544:	496f      	ldr	r1, [pc, #444]	; (8011704 <etharp_output+0x1f0>)
 8011546:	486e      	ldr	r0, [pc, #440]	; (8011700 <etharp_output+0x1ec>)
 8011548:	f001 fec2 	bl	80132d0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d106      	bne.n	8011560 <etharp_output+0x4c>
 8011552:	4b69      	ldr	r3, [pc, #420]	; (80116f8 <etharp_output+0x1e4>)
 8011554:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011558:	496b      	ldr	r1, [pc, #428]	; (8011708 <etharp_output+0x1f4>)
 801155a:	4869      	ldr	r0, [pc, #420]	; (8011700 <etharp_output+0x1ec>)
 801155c:	f001 feb8 	bl	80132d0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	68f9      	ldr	r1, [r7, #12]
 8011566:	4618      	mov	r0, r3
 8011568:	f000 fef8 	bl	801235c <ip4_addr_isbroadcast_u32>
 801156c:	4603      	mov	r3, r0
 801156e:	2b00      	cmp	r3, #0
 8011570:	d002      	beq.n	8011578 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011572:	4b66      	ldr	r3, [pc, #408]	; (801170c <etharp_output+0x1f8>)
 8011574:	61fb      	str	r3, [r7, #28]
 8011576:	e0af      	b.n	80116d8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011580:	2be0      	cmp	r3, #224	; 0xe0
 8011582:	d118      	bne.n	80115b6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011584:	2301      	movs	r3, #1
 8011586:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011588:	2300      	movs	r3, #0
 801158a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801158c:	235e      	movs	r3, #94	; 0x5e
 801158e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	3301      	adds	r3, #1
 8011594:	781b      	ldrb	r3, [r3, #0]
 8011596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801159a:	b2db      	uxtb	r3, r3
 801159c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	3302      	adds	r3, #2
 80115a2:	781b      	ldrb	r3, [r3, #0]
 80115a4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	3303      	adds	r3, #3
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80115ae:	f107 0310 	add.w	r3, r7, #16
 80115b2:	61fb      	str	r3, [r7, #28]
 80115b4:	e090      	b.n	80116d8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681a      	ldr	r2, [r3, #0]
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	3304      	adds	r3, #4
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	405a      	eors	r2, r3
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	3308      	adds	r3, #8
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4013      	ands	r3, r2
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d012      	beq.n	80115f4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80115d4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80115d8:	4293      	cmp	r3, r2
 80115da:	d00b      	beq.n	80115f4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	330c      	adds	r3, #12
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d003      	beq.n	80115ee <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	330c      	adds	r3, #12
 80115ea:	61bb      	str	r3, [r7, #24]
 80115ec:	e002      	b.n	80115f4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80115ee:	f06f 0303 	mvn.w	r3, #3
 80115f2:	e07d      	b.n	80116f0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80115f4:	4b46      	ldr	r3, [pc, #280]	; (8011710 <etharp_output+0x1fc>)
 80115f6:	781b      	ldrb	r3, [r3, #0]
 80115f8:	4619      	mov	r1, r3
 80115fa:	4a46      	ldr	r2, [pc, #280]	; (8011714 <etharp_output+0x200>)
 80115fc:	460b      	mov	r3, r1
 80115fe:	005b      	lsls	r3, r3, #1
 8011600:	440b      	add	r3, r1
 8011602:	00db      	lsls	r3, r3, #3
 8011604:	4413      	add	r3, r2
 8011606:	3314      	adds	r3, #20
 8011608:	781b      	ldrb	r3, [r3, #0]
 801160a:	2b01      	cmp	r3, #1
 801160c:	d925      	bls.n	801165a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801160e:	4b40      	ldr	r3, [pc, #256]	; (8011710 <etharp_output+0x1fc>)
 8011610:	781b      	ldrb	r3, [r3, #0]
 8011612:	4619      	mov	r1, r3
 8011614:	4a3f      	ldr	r2, [pc, #252]	; (8011714 <etharp_output+0x200>)
 8011616:	460b      	mov	r3, r1
 8011618:	005b      	lsls	r3, r3, #1
 801161a:	440b      	add	r3, r1
 801161c:	00db      	lsls	r3, r3, #3
 801161e:	4413      	add	r3, r2
 8011620:	3308      	adds	r3, #8
 8011622:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011624:	68fa      	ldr	r2, [r7, #12]
 8011626:	429a      	cmp	r2, r3
 8011628:	d117      	bne.n	801165a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801162a:	69bb      	ldr	r3, [r7, #24]
 801162c:	681a      	ldr	r2, [r3, #0]
 801162e:	4b38      	ldr	r3, [pc, #224]	; (8011710 <etharp_output+0x1fc>)
 8011630:	781b      	ldrb	r3, [r3, #0]
 8011632:	4618      	mov	r0, r3
 8011634:	4937      	ldr	r1, [pc, #220]	; (8011714 <etharp_output+0x200>)
 8011636:	4603      	mov	r3, r0
 8011638:	005b      	lsls	r3, r3, #1
 801163a:	4403      	add	r3, r0
 801163c:	00db      	lsls	r3, r3, #3
 801163e:	440b      	add	r3, r1
 8011640:	3304      	adds	r3, #4
 8011642:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011644:	429a      	cmp	r2, r3
 8011646:	d108      	bne.n	801165a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011648:	4b31      	ldr	r3, [pc, #196]	; (8011710 <etharp_output+0x1fc>)
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	461a      	mov	r2, r3
 801164e:	68b9      	ldr	r1, [r7, #8]
 8011650:	68f8      	ldr	r0, [r7, #12]
 8011652:	f7ff fec5 	bl	80113e0 <etharp_output_to_arp_index>
 8011656:	4603      	mov	r3, r0
 8011658:	e04a      	b.n	80116f0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801165a:	2300      	movs	r3, #0
 801165c:	75fb      	strb	r3, [r7, #23]
 801165e:	e031      	b.n	80116c4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011660:	7dfa      	ldrb	r2, [r7, #23]
 8011662:	492c      	ldr	r1, [pc, #176]	; (8011714 <etharp_output+0x200>)
 8011664:	4613      	mov	r3, r2
 8011666:	005b      	lsls	r3, r3, #1
 8011668:	4413      	add	r3, r2
 801166a:	00db      	lsls	r3, r3, #3
 801166c:	440b      	add	r3, r1
 801166e:	3314      	adds	r3, #20
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	2b01      	cmp	r3, #1
 8011674:	d923      	bls.n	80116be <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011676:	7dfa      	ldrb	r2, [r7, #23]
 8011678:	4926      	ldr	r1, [pc, #152]	; (8011714 <etharp_output+0x200>)
 801167a:	4613      	mov	r3, r2
 801167c:	005b      	lsls	r3, r3, #1
 801167e:	4413      	add	r3, r2
 8011680:	00db      	lsls	r3, r3, #3
 8011682:	440b      	add	r3, r1
 8011684:	3308      	adds	r3, #8
 8011686:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011688:	68fa      	ldr	r2, [r7, #12]
 801168a:	429a      	cmp	r2, r3
 801168c:	d117      	bne.n	80116be <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801168e:	69bb      	ldr	r3, [r7, #24]
 8011690:	6819      	ldr	r1, [r3, #0]
 8011692:	7dfa      	ldrb	r2, [r7, #23]
 8011694:	481f      	ldr	r0, [pc, #124]	; (8011714 <etharp_output+0x200>)
 8011696:	4613      	mov	r3, r2
 8011698:	005b      	lsls	r3, r3, #1
 801169a:	4413      	add	r3, r2
 801169c:	00db      	lsls	r3, r3, #3
 801169e:	4403      	add	r3, r0
 80116a0:	3304      	adds	r3, #4
 80116a2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80116a4:	4299      	cmp	r1, r3
 80116a6:	d10a      	bne.n	80116be <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80116a8:	4a19      	ldr	r2, [pc, #100]	; (8011710 <etharp_output+0x1fc>)
 80116aa:	7dfb      	ldrb	r3, [r7, #23]
 80116ac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80116ae:	7dfb      	ldrb	r3, [r7, #23]
 80116b0:	461a      	mov	r2, r3
 80116b2:	68b9      	ldr	r1, [r7, #8]
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	f7ff fe93 	bl	80113e0 <etharp_output_to_arp_index>
 80116ba:	4603      	mov	r3, r0
 80116bc:	e018      	b.n	80116f0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80116be:	7dfb      	ldrb	r3, [r7, #23]
 80116c0:	3301      	adds	r3, #1
 80116c2:	75fb      	strb	r3, [r7, #23]
 80116c4:	7dfb      	ldrb	r3, [r7, #23]
 80116c6:	2b09      	cmp	r3, #9
 80116c8:	d9ca      	bls.n	8011660 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80116ca:	68ba      	ldr	r2, [r7, #8]
 80116cc:	69b9      	ldr	r1, [r7, #24]
 80116ce:	68f8      	ldr	r0, [r7, #12]
 80116d0:	f000 f822 	bl	8011718 <etharp_query>
 80116d4:	4603      	mov	r3, r0
 80116d6:	e00b      	b.n	80116f0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80116de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80116e2:	9300      	str	r3, [sp, #0]
 80116e4:	69fb      	ldr	r3, [r7, #28]
 80116e6:	68b9      	ldr	r1, [r7, #8]
 80116e8:	68f8      	ldr	r0, [r7, #12]
 80116ea:	f001 fd45 	bl	8013178 <ethernet_output>
 80116ee:	4603      	mov	r3, r0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3720      	adds	r7, #32
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	08016a30 	.word	0x08016a30
 80116fc:	08016b80 	.word	0x08016b80
 8011700:	08016aa8 	.word	0x08016aa8
 8011704:	08016bd0 	.word	0x08016bd0
 8011708:	08016b70 	.word	0x08016b70
 801170c:	080171e8 	.word	0x080171e8
 8011710:	20009004 	.word	0x20009004
 8011714:	20008f14 	.word	0x20008f14

08011718 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b08c      	sub	sp, #48	; 0x30
 801171c:	af02      	add	r7, sp, #8
 801171e:	60f8      	str	r0, [r7, #12]
 8011720:	60b9      	str	r1, [r7, #8]
 8011722:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	3326      	adds	r3, #38	; 0x26
 8011728:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801172a:	23ff      	movs	r3, #255	; 0xff
 801172c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011730:	2300      	movs	r3, #0
 8011732:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	68f9      	ldr	r1, [r7, #12]
 801173a:	4618      	mov	r0, r3
 801173c:	f000 fe0e 	bl	801235c <ip4_addr_isbroadcast_u32>
 8011740:	4603      	mov	r3, r0
 8011742:	2b00      	cmp	r3, #0
 8011744:	d10c      	bne.n	8011760 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801174e:	2be0      	cmp	r3, #224	; 0xe0
 8011750:	d006      	beq.n	8011760 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d003      	beq.n	8011760 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d102      	bne.n	8011766 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011760:	f06f 030f 	mvn.w	r3, #15
 8011764:	e101      	b.n	801196a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011766:	68fa      	ldr	r2, [r7, #12]
 8011768:	2101      	movs	r1, #1
 801176a:	68b8      	ldr	r0, [r7, #8]
 801176c:	f7ff fb60 	bl	8010e30 <etharp_find_entry>
 8011770:	4603      	mov	r3, r0
 8011772:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011774:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011778:	2b00      	cmp	r3, #0
 801177a:	da02      	bge.n	8011782 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801177c:	8a7b      	ldrh	r3, [r7, #18]
 801177e:	b25b      	sxtb	r3, r3
 8011780:	e0f3      	b.n	801196a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011782:	8a7b      	ldrh	r3, [r7, #18]
 8011784:	2b7e      	cmp	r3, #126	; 0x7e
 8011786:	d906      	bls.n	8011796 <etharp_query+0x7e>
 8011788:	4b7a      	ldr	r3, [pc, #488]	; (8011974 <etharp_query+0x25c>)
 801178a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801178e:	497a      	ldr	r1, [pc, #488]	; (8011978 <etharp_query+0x260>)
 8011790:	487a      	ldr	r0, [pc, #488]	; (801197c <etharp_query+0x264>)
 8011792:	f001 fd9d 	bl	80132d0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011796:	8a7b      	ldrh	r3, [r7, #18]
 8011798:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801179a:	7c7a      	ldrb	r2, [r7, #17]
 801179c:	4978      	ldr	r1, [pc, #480]	; (8011980 <etharp_query+0x268>)
 801179e:	4613      	mov	r3, r2
 80117a0:	005b      	lsls	r3, r3, #1
 80117a2:	4413      	add	r3, r2
 80117a4:	00db      	lsls	r3, r3, #3
 80117a6:	440b      	add	r3, r1
 80117a8:	3314      	adds	r3, #20
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d115      	bne.n	80117dc <etharp_query+0xc4>
    is_new_entry = 1;
 80117b0:	2301      	movs	r3, #1
 80117b2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80117b4:	7c7a      	ldrb	r2, [r7, #17]
 80117b6:	4972      	ldr	r1, [pc, #456]	; (8011980 <etharp_query+0x268>)
 80117b8:	4613      	mov	r3, r2
 80117ba:	005b      	lsls	r3, r3, #1
 80117bc:	4413      	add	r3, r2
 80117be:	00db      	lsls	r3, r3, #3
 80117c0:	440b      	add	r3, r1
 80117c2:	3314      	adds	r3, #20
 80117c4:	2201      	movs	r2, #1
 80117c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80117c8:	7c7a      	ldrb	r2, [r7, #17]
 80117ca:	496d      	ldr	r1, [pc, #436]	; (8011980 <etharp_query+0x268>)
 80117cc:	4613      	mov	r3, r2
 80117ce:	005b      	lsls	r3, r3, #1
 80117d0:	4413      	add	r3, r2
 80117d2:	00db      	lsls	r3, r3, #3
 80117d4:	440b      	add	r3, r1
 80117d6:	3308      	adds	r3, #8
 80117d8:	68fa      	ldr	r2, [r7, #12]
 80117da:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80117dc:	7c7a      	ldrb	r2, [r7, #17]
 80117de:	4968      	ldr	r1, [pc, #416]	; (8011980 <etharp_query+0x268>)
 80117e0:	4613      	mov	r3, r2
 80117e2:	005b      	lsls	r3, r3, #1
 80117e4:	4413      	add	r3, r2
 80117e6:	00db      	lsls	r3, r3, #3
 80117e8:	440b      	add	r3, r1
 80117ea:	3314      	adds	r3, #20
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	2b01      	cmp	r3, #1
 80117f0:	d011      	beq.n	8011816 <etharp_query+0xfe>
 80117f2:	7c7a      	ldrb	r2, [r7, #17]
 80117f4:	4962      	ldr	r1, [pc, #392]	; (8011980 <etharp_query+0x268>)
 80117f6:	4613      	mov	r3, r2
 80117f8:	005b      	lsls	r3, r3, #1
 80117fa:	4413      	add	r3, r2
 80117fc:	00db      	lsls	r3, r3, #3
 80117fe:	440b      	add	r3, r1
 8011800:	3314      	adds	r3, #20
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	2b01      	cmp	r3, #1
 8011806:	d806      	bhi.n	8011816 <etharp_query+0xfe>
 8011808:	4b5a      	ldr	r3, [pc, #360]	; (8011974 <etharp_query+0x25c>)
 801180a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801180e:	495d      	ldr	r1, [pc, #372]	; (8011984 <etharp_query+0x26c>)
 8011810:	485a      	ldr	r0, [pc, #360]	; (801197c <etharp_query+0x264>)
 8011812:	f001 fd5d 	bl	80132d0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011816:	6a3b      	ldr	r3, [r7, #32]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d102      	bne.n	8011822 <etharp_query+0x10a>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d10c      	bne.n	801183c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011822:	68b9      	ldr	r1, [r7, #8]
 8011824:	68f8      	ldr	r0, [r7, #12]
 8011826:	f000 f963 	bl	8011af0 <etharp_request>
 801182a:	4603      	mov	r3, r0
 801182c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d102      	bne.n	801183c <etharp_query+0x124>
      return result;
 8011836:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801183a:	e096      	b.n	801196a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d106      	bne.n	8011850 <etharp_query+0x138>
 8011842:	4b4c      	ldr	r3, [pc, #304]	; (8011974 <etharp_query+0x25c>)
 8011844:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011848:	494f      	ldr	r1, [pc, #316]	; (8011988 <etharp_query+0x270>)
 801184a:	484c      	ldr	r0, [pc, #304]	; (801197c <etharp_query+0x264>)
 801184c:	f001 fd40 	bl	80132d0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011850:	7c7a      	ldrb	r2, [r7, #17]
 8011852:	494b      	ldr	r1, [pc, #300]	; (8011980 <etharp_query+0x268>)
 8011854:	4613      	mov	r3, r2
 8011856:	005b      	lsls	r3, r3, #1
 8011858:	4413      	add	r3, r2
 801185a:	00db      	lsls	r3, r3, #3
 801185c:	440b      	add	r3, r1
 801185e:	3314      	adds	r3, #20
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	2b01      	cmp	r3, #1
 8011864:	d917      	bls.n	8011896 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011866:	4a49      	ldr	r2, [pc, #292]	; (801198c <etharp_query+0x274>)
 8011868:	7c7b      	ldrb	r3, [r7, #17]
 801186a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801186c:	7c7a      	ldrb	r2, [r7, #17]
 801186e:	4613      	mov	r3, r2
 8011870:	005b      	lsls	r3, r3, #1
 8011872:	4413      	add	r3, r2
 8011874:	00db      	lsls	r3, r3, #3
 8011876:	3308      	adds	r3, #8
 8011878:	4a41      	ldr	r2, [pc, #260]	; (8011980 <etharp_query+0x268>)
 801187a:	4413      	add	r3, r2
 801187c:	3304      	adds	r3, #4
 801187e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011882:	9200      	str	r2, [sp, #0]
 8011884:	697a      	ldr	r2, [r7, #20]
 8011886:	6879      	ldr	r1, [r7, #4]
 8011888:	68f8      	ldr	r0, [r7, #12]
 801188a:	f001 fc75 	bl	8013178 <ethernet_output>
 801188e:	4603      	mov	r3, r0
 8011890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011894:	e067      	b.n	8011966 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011896:	7c7a      	ldrb	r2, [r7, #17]
 8011898:	4939      	ldr	r1, [pc, #228]	; (8011980 <etharp_query+0x268>)
 801189a:	4613      	mov	r3, r2
 801189c:	005b      	lsls	r3, r3, #1
 801189e:	4413      	add	r3, r2
 80118a0:	00db      	lsls	r3, r3, #3
 80118a2:	440b      	add	r3, r1
 80118a4:	3314      	adds	r3, #20
 80118a6:	781b      	ldrb	r3, [r3, #0]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d15c      	bne.n	8011966 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80118ac:	2300      	movs	r3, #0
 80118ae:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80118b4:	e01c      	b.n	80118f0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80118b6:	69fb      	ldr	r3, [r7, #28]
 80118b8:	895a      	ldrh	r2, [r3, #10]
 80118ba:	69fb      	ldr	r3, [r7, #28]
 80118bc:	891b      	ldrh	r3, [r3, #8]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d10a      	bne.n	80118d8 <etharp_query+0x1c0>
 80118c2:	69fb      	ldr	r3, [r7, #28]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d006      	beq.n	80118d8 <etharp_query+0x1c0>
 80118ca:	4b2a      	ldr	r3, [pc, #168]	; (8011974 <etharp_query+0x25c>)
 80118cc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80118d0:	492f      	ldr	r1, [pc, #188]	; (8011990 <etharp_query+0x278>)
 80118d2:	482a      	ldr	r0, [pc, #168]	; (801197c <etharp_query+0x264>)
 80118d4:	f001 fcfc 	bl	80132d0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80118d8:	69fb      	ldr	r3, [r7, #28]
 80118da:	7b1b      	ldrb	r3, [r3, #12]
 80118dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d002      	beq.n	80118ea <etharp_query+0x1d2>
        copy_needed = 1;
 80118e4:	2301      	movs	r3, #1
 80118e6:	61bb      	str	r3, [r7, #24]
        break;
 80118e8:	e005      	b.n	80118f6 <etharp_query+0x1de>
      }
      p = p->next;
 80118ea:	69fb      	ldr	r3, [r7, #28]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d1df      	bne.n	80118b6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d007      	beq.n	801190c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80118fc:	687a      	ldr	r2, [r7, #4]
 80118fe:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011902:	200e      	movs	r0, #14
 8011904:	f7f9 f96e 	bl	800abe4 <pbuf_clone>
 8011908:	61f8      	str	r0, [r7, #28]
 801190a:	e004      	b.n	8011916 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011910:	69f8      	ldr	r0, [r7, #28]
 8011912:	f7f8 ff09 	bl	800a728 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011916:	69fb      	ldr	r3, [r7, #28]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d021      	beq.n	8011960 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801191c:	7c7a      	ldrb	r2, [r7, #17]
 801191e:	4918      	ldr	r1, [pc, #96]	; (8011980 <etharp_query+0x268>)
 8011920:	4613      	mov	r3, r2
 8011922:	005b      	lsls	r3, r3, #1
 8011924:	4413      	add	r3, r2
 8011926:	00db      	lsls	r3, r3, #3
 8011928:	440b      	add	r3, r1
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d00a      	beq.n	8011946 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011930:	7c7a      	ldrb	r2, [r7, #17]
 8011932:	4913      	ldr	r1, [pc, #76]	; (8011980 <etharp_query+0x268>)
 8011934:	4613      	mov	r3, r2
 8011936:	005b      	lsls	r3, r3, #1
 8011938:	4413      	add	r3, r2
 801193a:	00db      	lsls	r3, r3, #3
 801193c:	440b      	add	r3, r1
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	4618      	mov	r0, r3
 8011942:	f7f8 fe51 	bl	800a5e8 <pbuf_free>
      }
      arp_table[i].q = p;
 8011946:	7c7a      	ldrb	r2, [r7, #17]
 8011948:	490d      	ldr	r1, [pc, #52]	; (8011980 <etharp_query+0x268>)
 801194a:	4613      	mov	r3, r2
 801194c:	005b      	lsls	r3, r3, #1
 801194e:	4413      	add	r3, r2
 8011950:	00db      	lsls	r3, r3, #3
 8011952:	440b      	add	r3, r1
 8011954:	69fa      	ldr	r2, [r7, #28]
 8011956:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011958:	2300      	movs	r3, #0
 801195a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801195e:	e002      	b.n	8011966 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011960:	23ff      	movs	r3, #255	; 0xff
 8011962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011966:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801196a:	4618      	mov	r0, r3
 801196c:	3728      	adds	r7, #40	; 0x28
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	08016a30 	.word	0x08016a30
 8011978:	08016bdc 	.word	0x08016bdc
 801197c:	08016aa8 	.word	0x08016aa8
 8011980:	20008f14 	.word	0x20008f14
 8011984:	08016bec 	.word	0x08016bec
 8011988:	08016bd0 	.word	0x08016bd0
 801198c:	20009004 	.word	0x20009004
 8011990:	08016c14 	.word	0x08016c14

08011994 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b08a      	sub	sp, #40	; 0x28
 8011998:	af02      	add	r7, sp, #8
 801199a:	60f8      	str	r0, [r7, #12]
 801199c:	60b9      	str	r1, [r7, #8]
 801199e:	607a      	str	r2, [r7, #4]
 80119a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80119a2:	2300      	movs	r3, #0
 80119a4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d106      	bne.n	80119ba <etharp_raw+0x26>
 80119ac:	4b3a      	ldr	r3, [pc, #232]	; (8011a98 <etharp_raw+0x104>)
 80119ae:	f240 4257 	movw	r2, #1111	; 0x457
 80119b2:	493a      	ldr	r1, [pc, #232]	; (8011a9c <etharp_raw+0x108>)
 80119b4:	483a      	ldr	r0, [pc, #232]	; (8011aa0 <etharp_raw+0x10c>)
 80119b6:	f001 fc8b 	bl	80132d0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80119ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119be:	211c      	movs	r1, #28
 80119c0:	200e      	movs	r0, #14
 80119c2:	f7f8 fb2d 	bl	800a020 <pbuf_alloc>
 80119c6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80119c8:	69bb      	ldr	r3, [r7, #24]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d102      	bne.n	80119d4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80119ce:	f04f 33ff 	mov.w	r3, #4294967295
 80119d2:	e05d      	b.n	8011a90 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80119d4:	69bb      	ldr	r3, [r7, #24]
 80119d6:	895b      	ldrh	r3, [r3, #10]
 80119d8:	2b1b      	cmp	r3, #27
 80119da:	d806      	bhi.n	80119ea <etharp_raw+0x56>
 80119dc:	4b2e      	ldr	r3, [pc, #184]	; (8011a98 <etharp_raw+0x104>)
 80119de:	f240 4262 	movw	r2, #1122	; 0x462
 80119e2:	4930      	ldr	r1, [pc, #192]	; (8011aa4 <etharp_raw+0x110>)
 80119e4:	482e      	ldr	r0, [pc, #184]	; (8011aa0 <etharp_raw+0x10c>)
 80119e6:	f001 fc73 	bl	80132d0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80119ea:	69bb      	ldr	r3, [r7, #24]
 80119ec:	685b      	ldr	r3, [r3, #4]
 80119ee:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80119f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7f7 fb44 	bl	8009080 <lwip_htons>
 80119f8:	4603      	mov	r3, r0
 80119fa:	461a      	mov	r2, r3
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011a06:	2b06      	cmp	r3, #6
 8011a08:	d006      	beq.n	8011a18 <etharp_raw+0x84>
 8011a0a:	4b23      	ldr	r3, [pc, #140]	; (8011a98 <etharp_raw+0x104>)
 8011a0c:	f240 4269 	movw	r2, #1129	; 0x469
 8011a10:	4925      	ldr	r1, [pc, #148]	; (8011aa8 <etharp_raw+0x114>)
 8011a12:	4823      	ldr	r0, [pc, #140]	; (8011aa0 <etharp_raw+0x10c>)
 8011a14:	f001 fc5c 	bl	80132d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011a18:	697b      	ldr	r3, [r7, #20]
 8011a1a:	3308      	adds	r3, #8
 8011a1c:	2206      	movs	r2, #6
 8011a1e:	6839      	ldr	r1, [r7, #0]
 8011a20:	4618      	mov	r0, r3
 8011a22:	f001 fc25 	bl	8013270 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	3312      	adds	r3, #18
 8011a2a:	2206      	movs	r2, #6
 8011a2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f001 fc1e 	bl	8013270 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	330e      	adds	r3, #14
 8011a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a3a:	6812      	ldr	r2, [r2, #0]
 8011a3c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	3318      	adds	r3, #24
 8011a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a44:	6812      	ldr	r2, [r2, #0]
 8011a46:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011a48:	697b      	ldr	r3, [r7, #20]
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	701a      	strb	r2, [r3, #0]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	f042 0201 	orr.w	r2, r2, #1
 8011a54:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	2200      	movs	r2, #0
 8011a5a:	f042 0208 	orr.w	r2, r2, #8
 8011a5e:	709a      	strb	r2, [r3, #2]
 8011a60:	2200      	movs	r2, #0
 8011a62:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	2206      	movs	r2, #6
 8011a68:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	2204      	movs	r2, #4
 8011a6e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011a70:	f640 0306 	movw	r3, #2054	; 0x806
 8011a74:	9300      	str	r3, [sp, #0]
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	68ba      	ldr	r2, [r7, #8]
 8011a7a:	69b9      	ldr	r1, [r7, #24]
 8011a7c:	68f8      	ldr	r0, [r7, #12]
 8011a7e:	f001 fb7b 	bl	8013178 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011a82:	69b8      	ldr	r0, [r7, #24]
 8011a84:	f7f8 fdb0 	bl	800a5e8 <pbuf_free>
  p = NULL;
 8011a88:	2300      	movs	r3, #0
 8011a8a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011a8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3720      	adds	r7, #32
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}
 8011a98:	08016a30 	.word	0x08016a30
 8011a9c:	08016b80 	.word	0x08016b80
 8011aa0:	08016aa8 	.word	0x08016aa8
 8011aa4:	08016c30 	.word	0x08016c30
 8011aa8:	08016c64 	.word	0x08016c64

08011aac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b088      	sub	sp, #32
 8011ab0:	af04      	add	r7, sp, #16
 8011ab2:	60f8      	str	r0, [r7, #12]
 8011ab4:	60b9      	str	r1, [r7, #8]
 8011ab6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011ac8:	2201      	movs	r2, #1
 8011aca:	9203      	str	r2, [sp, #12]
 8011acc:	68ba      	ldr	r2, [r7, #8]
 8011ace:	9202      	str	r2, [sp, #8]
 8011ad0:	4a06      	ldr	r2, [pc, #24]	; (8011aec <etharp_request_dst+0x40>)
 8011ad2:	9201      	str	r2, [sp, #4]
 8011ad4:	9300      	str	r3, [sp, #0]
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	687a      	ldr	r2, [r7, #4]
 8011ada:	68f8      	ldr	r0, [r7, #12]
 8011adc:	f7ff ff5a 	bl	8011994 <etharp_raw>
 8011ae0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	3710      	adds	r7, #16
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}
 8011aea:	bf00      	nop
 8011aec:	080171f0 	.word	0x080171f0

08011af0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011afa:	4a05      	ldr	r2, [pc, #20]	; (8011b10 <etharp_request+0x20>)
 8011afc:	6839      	ldr	r1, [r7, #0]
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f7ff ffd4 	bl	8011aac <etharp_request_dst>
 8011b04:	4603      	mov	r3, r0
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3708      	adds	r7, #8
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	080171e8 	.word	0x080171e8

08011b14 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b08e      	sub	sp, #56	; 0x38
 8011b18:	af04      	add	r7, sp, #16
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011b1e:	4b79      	ldr	r3, [pc, #484]	; (8011d04 <icmp_input+0x1f0>)
 8011b20:	689b      	ldr	r3, [r3, #8]
 8011b22:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	f003 030f 	and.w	r3, r3, #15
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	009b      	lsls	r3, r3, #2
 8011b30:	b2db      	uxtb	r3, r3
 8011b32:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011b34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b36:	2b13      	cmp	r3, #19
 8011b38:	f240 80cd 	bls.w	8011cd6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	895b      	ldrh	r3, [r3, #10]
 8011b40:	2b03      	cmp	r3, #3
 8011b42:	f240 80ca 	bls.w	8011cda <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011b50:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	f000 80b7 	beq.w	8011cc8 <icmp_input+0x1b4>
 8011b5a:	2b08      	cmp	r3, #8
 8011b5c:	f040 80b7 	bne.w	8011cce <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011b60:	4b69      	ldr	r3, [pc, #420]	; (8011d08 <icmp_input+0x1f4>)
 8011b62:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011b64:	4b67      	ldr	r3, [pc, #412]	; (8011d04 <icmp_input+0x1f0>)
 8011b66:	695b      	ldr	r3, [r3, #20]
 8011b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b6c:	2be0      	cmp	r3, #224	; 0xe0
 8011b6e:	f000 80bb 	beq.w	8011ce8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011b72:	4b64      	ldr	r3, [pc, #400]	; (8011d04 <icmp_input+0x1f0>)
 8011b74:	695b      	ldr	r3, [r3, #20]
 8011b76:	4a63      	ldr	r2, [pc, #396]	; (8011d04 <icmp_input+0x1f0>)
 8011b78:	6812      	ldr	r2, [r2, #0]
 8011b7a:	4611      	mov	r1, r2
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f000 fbed 	bl	801235c <ip4_addr_isbroadcast_u32>
 8011b82:	4603      	mov	r3, r0
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	f040 80b1 	bne.w	8011cec <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	891b      	ldrh	r3, [r3, #8]
 8011b8e:	2b07      	cmp	r3, #7
 8011b90:	f240 80a5 	bls.w	8011cde <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011b94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b96:	330e      	adds	r3, #14
 8011b98:	4619      	mov	r1, r3
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f7f8 fc8e 	bl	800a4bc <pbuf_add_header>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d04b      	beq.n	8011c3e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	891a      	ldrh	r2, [r3, #8]
 8011baa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011bac:	4413      	add	r3, r2
 8011bae:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	891b      	ldrh	r3, [r3, #8]
 8011bb4:	8b7a      	ldrh	r2, [r7, #26]
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	f0c0 809a 	bcc.w	8011cf0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011bbc:	8b7b      	ldrh	r3, [r7, #26]
 8011bbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	200e      	movs	r0, #14
 8011bc6:	f7f8 fa2b 	bl	800a020 <pbuf_alloc>
 8011bca:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	f000 8090 	beq.w	8011cf4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	895b      	ldrh	r3, [r3, #10]
 8011bd8:	461a      	mov	r2, r3
 8011bda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011bdc:	3308      	adds	r3, #8
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d203      	bcs.n	8011bea <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011be2:	6978      	ldr	r0, [r7, #20]
 8011be4:	f7f8 fd00 	bl	800a5e8 <pbuf_free>
          goto icmperr;
 8011be8:	e085      	b.n	8011cf6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f001 fb3c 	bl	8013270 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011bf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	6978      	ldr	r0, [r7, #20]
 8011bfe:	f7f8 fc6d 	bl	800a4dc <pbuf_remove_header>
 8011c02:	4603      	mov	r3, r0
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d009      	beq.n	8011c1c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011c08:	4b40      	ldr	r3, [pc, #256]	; (8011d0c <icmp_input+0x1f8>)
 8011c0a:	22b6      	movs	r2, #182	; 0xb6
 8011c0c:	4940      	ldr	r1, [pc, #256]	; (8011d10 <icmp_input+0x1fc>)
 8011c0e:	4841      	ldr	r0, [pc, #260]	; (8011d14 <icmp_input+0x200>)
 8011c10:	f001 fb5e 	bl	80132d0 <iprintf>
          pbuf_free(r);
 8011c14:	6978      	ldr	r0, [r7, #20]
 8011c16:	f7f8 fce7 	bl	800a5e8 <pbuf_free>
          goto icmperr;
 8011c1a:	e06c      	b.n	8011cf6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011c1c:	6879      	ldr	r1, [r7, #4]
 8011c1e:	6978      	ldr	r0, [r7, #20]
 8011c20:	f7f8 fe0a 	bl	800a838 <pbuf_copy>
 8011c24:	4603      	mov	r3, r0
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d003      	beq.n	8011c32 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011c2a:	6978      	ldr	r0, [r7, #20]
 8011c2c:	f7f8 fcdc 	bl	800a5e8 <pbuf_free>
          goto icmperr;
 8011c30:	e061      	b.n	8011cf6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f7f8 fcd8 	bl	800a5e8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	607b      	str	r3, [r7, #4]
 8011c3c:	e00f      	b.n	8011c5e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011c3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c40:	330e      	adds	r3, #14
 8011c42:	4619      	mov	r1, r3
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f7f8 fc49 	bl	800a4dc <pbuf_remove_header>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d006      	beq.n	8011c5e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011c50:	4b2e      	ldr	r3, [pc, #184]	; (8011d0c <icmp_input+0x1f8>)
 8011c52:	22c7      	movs	r2, #199	; 0xc7
 8011c54:	4930      	ldr	r1, [pc, #192]	; (8011d18 <icmp_input+0x204>)
 8011c56:	482f      	ldr	r0, [pc, #188]	; (8011d14 <icmp_input+0x200>)
 8011c58:	f001 fb3a 	bl	80132d0 <iprintf>
          goto icmperr;
 8011c5c:	e04b      	b.n	8011cf6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011c64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c66:	4619      	mov	r1, r3
 8011c68:	6878      	ldr	r0, [r7, #4]
 8011c6a:	f7f8 fc27 	bl	800a4bc <pbuf_add_header>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d12b      	bne.n	8011ccc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	685b      	ldr	r3, [r3, #4]
 8011c78:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011c7a:	69fb      	ldr	r3, [r7, #28]
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011c82:	4b20      	ldr	r3, [pc, #128]	; (8011d04 <icmp_input+0x1f0>)
 8011c84:	691a      	ldr	r2, [r3, #16]
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	2200      	movs	r2, #0
 8011c94:	709a      	strb	r2, [r3, #2]
 8011c96:	2200      	movs	r2, #0
 8011c98:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	22ff      	movs	r2, #255	; 0xff
 8011c9e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	729a      	strb	r2, [r3, #10]
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	9302      	str	r3, [sp, #8]
 8011cae:	2301      	movs	r3, #1
 8011cb0:	9301      	str	r3, [sp, #4]
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	9300      	str	r3, [sp, #0]
 8011cb6:	23ff      	movs	r3, #255	; 0xff
 8011cb8:	2200      	movs	r2, #0
 8011cba:	69f9      	ldr	r1, [r7, #28]
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f000 fa75 	bl	80121ac <ip4_output_if>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011cc6:	e001      	b.n	8011ccc <icmp_input+0x1b8>
      break;
 8011cc8:	bf00      	nop
 8011cca:	e000      	b.n	8011cce <icmp_input+0x1ba>
      break;
 8011ccc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f7f8 fc8a 	bl	800a5e8 <pbuf_free>
  return;
 8011cd4:	e013      	b.n	8011cfe <icmp_input+0x1ea>
    goto lenerr;
 8011cd6:	bf00      	nop
 8011cd8:	e002      	b.n	8011ce0 <icmp_input+0x1cc>
    goto lenerr;
 8011cda:	bf00      	nop
 8011cdc:	e000      	b.n	8011ce0 <icmp_input+0x1cc>
        goto lenerr;
 8011cde:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f7f8 fc81 	bl	800a5e8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011ce6:	e00a      	b.n	8011cfe <icmp_input+0x1ea>
        goto icmperr;
 8011ce8:	bf00      	nop
 8011cea:	e004      	b.n	8011cf6 <icmp_input+0x1e2>
        goto icmperr;
 8011cec:	bf00      	nop
 8011cee:	e002      	b.n	8011cf6 <icmp_input+0x1e2>
          goto icmperr;
 8011cf0:	bf00      	nop
 8011cf2:	e000      	b.n	8011cf6 <icmp_input+0x1e2>
          goto icmperr;
 8011cf4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f7f8 fc76 	bl	800a5e8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011cfc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011cfe:	3728      	adds	r7, #40	; 0x28
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}
 8011d04:	20003784 	.word	0x20003784
 8011d08:	20003798 	.word	0x20003798
 8011d0c:	08016ca8 	.word	0x08016ca8
 8011d10:	08016ce0 	.word	0x08016ce0
 8011d14:	08016d18 	.word	0x08016d18
 8011d18:	08016d40 	.word	0x08016d40

08011d1c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	460b      	mov	r3, r1
 8011d26:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011d28:	78fb      	ldrb	r3, [r7, #3]
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	2103      	movs	r1, #3
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f000 f814 	bl	8011d5c <icmp_send_response>
}
 8011d34:	bf00      	nop
 8011d36:	3708      	adds	r7, #8
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b082      	sub	sp, #8
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	460b      	mov	r3, r1
 8011d46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011d48:	78fb      	ldrb	r3, [r7, #3]
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	210b      	movs	r1, #11
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f000 f804 	bl	8011d5c <icmp_send_response>
}
 8011d54:	bf00      	nop
 8011d56:	3708      	adds	r7, #8
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}

08011d5c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b08c      	sub	sp, #48	; 0x30
 8011d60:	af04      	add	r7, sp, #16
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	460b      	mov	r3, r1
 8011d66:	70fb      	strb	r3, [r7, #3]
 8011d68:	4613      	mov	r3, r2
 8011d6a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011d6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d70:	2124      	movs	r1, #36	; 0x24
 8011d72:	2022      	movs	r0, #34	; 0x22
 8011d74:	f7f8 f954 	bl	800a020 <pbuf_alloc>
 8011d78:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011d7a:	69fb      	ldr	r3, [r7, #28]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d04c      	beq.n	8011e1a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011d80:	69fb      	ldr	r3, [r7, #28]
 8011d82:	895b      	ldrh	r3, [r3, #10]
 8011d84:	2b23      	cmp	r3, #35	; 0x23
 8011d86:	d806      	bhi.n	8011d96 <icmp_send_response+0x3a>
 8011d88:	4b26      	ldr	r3, [pc, #152]	; (8011e24 <icmp_send_response+0xc8>)
 8011d8a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011d8e:	4926      	ldr	r1, [pc, #152]	; (8011e28 <icmp_send_response+0xcc>)
 8011d90:	4826      	ldr	r0, [pc, #152]	; (8011e2c <icmp_send_response+0xd0>)
 8011d92:	f001 fa9d 	bl	80132d0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011d9c:	69fb      	ldr	r3, [r7, #28]
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	78fa      	ldrb	r2, [r7, #3]
 8011da6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	78ba      	ldrb	r2, [r7, #2]
 8011dac:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011dae:	697b      	ldr	r3, [r7, #20]
 8011db0:	2200      	movs	r2, #0
 8011db2:	711a      	strb	r2, [r3, #4]
 8011db4:	2200      	movs	r2, #0
 8011db6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	719a      	strb	r2, [r3, #6]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011dc2:	69fb      	ldr	r3, [r7, #28]
 8011dc4:	685b      	ldr	r3, [r3, #4]
 8011dc6:	f103 0008 	add.w	r0, r3, #8
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	685b      	ldr	r3, [r3, #4]
 8011dce:	221c      	movs	r2, #28
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	f001 fa4d 	bl	8013270 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011dd6:	69bb      	ldr	r3, [r7, #24]
 8011dd8:	68db      	ldr	r3, [r3, #12]
 8011dda:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011ddc:	f107 030c 	add.w	r3, r7, #12
 8011de0:	4618      	mov	r0, r3
 8011de2:	f000 f825 	bl	8011e30 <ip4_route>
 8011de6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011de8:	693b      	ldr	r3, [r7, #16]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d011      	beq.n	8011e12 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	2200      	movs	r2, #0
 8011df2:	709a      	strb	r2, [r3, #2]
 8011df4:	2200      	movs	r2, #0
 8011df6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011df8:	f107 020c 	add.w	r2, r7, #12
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	9302      	str	r3, [sp, #8]
 8011e00:	2301      	movs	r3, #1
 8011e02:	9301      	str	r3, [sp, #4]
 8011e04:	2300      	movs	r3, #0
 8011e06:	9300      	str	r3, [sp, #0]
 8011e08:	23ff      	movs	r3, #255	; 0xff
 8011e0a:	2100      	movs	r1, #0
 8011e0c:	69f8      	ldr	r0, [r7, #28]
 8011e0e:	f000 f9cd 	bl	80121ac <ip4_output_if>
  }
  pbuf_free(q);
 8011e12:	69f8      	ldr	r0, [r7, #28]
 8011e14:	f7f8 fbe8 	bl	800a5e8 <pbuf_free>
 8011e18:	e000      	b.n	8011e1c <icmp_send_response+0xc0>
    return;
 8011e1a:	bf00      	nop
}
 8011e1c:	3720      	adds	r7, #32
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
 8011e22:	bf00      	nop
 8011e24:	08016ca8 	.word	0x08016ca8
 8011e28:	08016d74 	.word	0x08016d74
 8011e2c:	08016d18 	.word	0x08016d18

08011e30 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011e30:	b480      	push	{r7}
 8011e32:	b085      	sub	sp, #20
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011e38:	4b33      	ldr	r3, [pc, #204]	; (8011f08 <ip4_route+0xd8>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	60fb      	str	r3, [r7, #12]
 8011e3e:	e036      	b.n	8011eae <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e46:	f003 0301 	and.w	r3, r3, #1
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d02b      	beq.n	8011ea8 <ip4_route+0x78>
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e56:	089b      	lsrs	r3, r3, #2
 8011e58:	f003 0301 	and.w	r3, r3, #1
 8011e5c:	b2db      	uxtb	r3, r3
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d022      	beq.n	8011ea8 <ip4_route+0x78>
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	3304      	adds	r3, #4
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d01d      	beq.n	8011ea8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	3304      	adds	r3, #4
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	405a      	eors	r2, r3
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	3308      	adds	r3, #8
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	4013      	ands	r3, r2
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d101      	bne.n	8011e88 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	e038      	b.n	8011efa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e8e:	f003 0302 	and.w	r3, r3, #2
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d108      	bne.n	8011ea8 <ip4_route+0x78>
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	330c      	adds	r3, #12
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d101      	bne.n	8011ea8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	e028      	b.n	8011efa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	60fb      	str	r3, [r7, #12]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d1c5      	bne.n	8011e40 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011eb4:	4b15      	ldr	r3, [pc, #84]	; (8011f0c <ip4_route+0xdc>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d01a      	beq.n	8011ef2 <ip4_route+0xc2>
 8011ebc:	4b13      	ldr	r3, [pc, #76]	; (8011f0c <ip4_route+0xdc>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011ec4:	f003 0301 	and.w	r3, r3, #1
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d012      	beq.n	8011ef2 <ip4_route+0xc2>
 8011ecc:	4b0f      	ldr	r3, [pc, #60]	; (8011f0c <ip4_route+0xdc>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011ed4:	f003 0304 	and.w	r3, r3, #4
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d00a      	beq.n	8011ef2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011edc:	4b0b      	ldr	r3, [pc, #44]	; (8011f0c <ip4_route+0xdc>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	3304      	adds	r3, #4
 8011ee2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d004      	beq.n	8011ef2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	b2db      	uxtb	r3, r3
 8011eee:	2b7f      	cmp	r3, #127	; 0x7f
 8011ef0:	d101      	bne.n	8011ef6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	e001      	b.n	8011efa <ip4_route+0xca>
  }

  return netif_default;
 8011ef6:	4b05      	ldr	r3, [pc, #20]	; (8011f0c <ip4_route+0xdc>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3714      	adds	r7, #20
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr
 8011f06:	bf00      	nop
 8011f08:	20008ea8 	.word	0x20008ea8
 8011f0c:	20008eac 	.word	0x20008eac

08011f10 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f1e:	f003 0301 	and.w	r3, r3, #1
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d016      	beq.n	8011f56 <ip4_input_accept+0x46>
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	3304      	adds	r3, #4
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d011      	beq.n	8011f56 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011f32:	4b0b      	ldr	r3, [pc, #44]	; (8011f60 <ip4_input_accept+0x50>)
 8011f34:	695a      	ldr	r2, [r3, #20]
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	3304      	adds	r3, #4
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	d008      	beq.n	8011f52 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011f40:	4b07      	ldr	r3, [pc, #28]	; (8011f60 <ip4_input_accept+0x50>)
 8011f42:	695b      	ldr	r3, [r3, #20]
 8011f44:	6879      	ldr	r1, [r7, #4]
 8011f46:	4618      	mov	r0, r3
 8011f48:	f000 fa08 	bl	801235c <ip4_addr_isbroadcast_u32>
 8011f4c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d001      	beq.n	8011f56 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011f52:	2301      	movs	r3, #1
 8011f54:	e000      	b.n	8011f58 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011f56:	2300      	movs	r3, #0
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3708      	adds	r7, #8
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}
 8011f60:	20003784 	.word	0x20003784

08011f64 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b086      	sub	sp, #24
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	091b      	lsrs	r3, r3, #4
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	2b04      	cmp	r3, #4
 8011f7e:	d004      	beq.n	8011f8a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f7f8 fb31 	bl	800a5e8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011f86:	2300      	movs	r3, #0
 8011f88:	e107      	b.n	801219a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	f003 030f 	and.w	r3, r3, #15
 8011f92:	b2db      	uxtb	r3, r3
 8011f94:	009b      	lsls	r3, r3, #2
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011f9a:	697b      	ldr	r3, [r7, #20]
 8011f9c:	885b      	ldrh	r3, [r3, #2]
 8011f9e:	b29b      	uxth	r3, r3
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7f7 f86d 	bl	8009080 <lwip_htons>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	891b      	ldrh	r3, [r3, #8]
 8011fae:	89ba      	ldrh	r2, [r7, #12]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d204      	bcs.n	8011fbe <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011fb4:	89bb      	ldrh	r3, [r7, #12]
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f7f8 f98f 	bl	800a2dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	895b      	ldrh	r3, [r3, #10]
 8011fc2:	89fa      	ldrh	r2, [r7, #14]
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d807      	bhi.n	8011fd8 <ip4_input+0x74>
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	891b      	ldrh	r3, [r3, #8]
 8011fcc:	89ba      	ldrh	r2, [r7, #12]
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d802      	bhi.n	8011fd8 <ip4_input+0x74>
 8011fd2:	89fb      	ldrh	r3, [r7, #14]
 8011fd4:	2b13      	cmp	r3, #19
 8011fd6:	d804      	bhi.n	8011fe2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f7f8 fb05 	bl	800a5e8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	e0db      	b.n	801219a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	691b      	ldr	r3, [r3, #16]
 8011fe6:	4a6f      	ldr	r2, [pc, #444]	; (80121a4 <ip4_input+0x240>)
 8011fe8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011fea:	697b      	ldr	r3, [r7, #20]
 8011fec:	68db      	ldr	r3, [r3, #12]
 8011fee:	4a6d      	ldr	r2, [pc, #436]	; (80121a4 <ip4_input+0x240>)
 8011ff0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011ff2:	4b6c      	ldr	r3, [pc, #432]	; (80121a4 <ip4_input+0x240>)
 8011ff4:	695b      	ldr	r3, [r3, #20]
 8011ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ffa:	2be0      	cmp	r3, #224	; 0xe0
 8011ffc:	d112      	bne.n	8012024 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012004:	f003 0301 	and.w	r3, r3, #1
 8012008:	b2db      	uxtb	r3, r3
 801200a:	2b00      	cmp	r3, #0
 801200c:	d007      	beq.n	801201e <ip4_input+0xba>
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	3304      	adds	r3, #4
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d002      	beq.n	801201e <ip4_input+0xba>
      netif = inp;
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	613b      	str	r3, [r7, #16]
 801201c:	e02a      	b.n	8012074 <ip4_input+0x110>
    } else {
      netif = NULL;
 801201e:	2300      	movs	r3, #0
 8012020:	613b      	str	r3, [r7, #16]
 8012022:	e027      	b.n	8012074 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012024:	6838      	ldr	r0, [r7, #0]
 8012026:	f7ff ff73 	bl	8011f10 <ip4_input_accept>
 801202a:	4603      	mov	r3, r0
 801202c:	2b00      	cmp	r3, #0
 801202e:	d002      	beq.n	8012036 <ip4_input+0xd2>
      netif = inp;
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	613b      	str	r3, [r7, #16]
 8012034:	e01e      	b.n	8012074 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012036:	2300      	movs	r3, #0
 8012038:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801203a:	4b5a      	ldr	r3, [pc, #360]	; (80121a4 <ip4_input+0x240>)
 801203c:	695b      	ldr	r3, [r3, #20]
 801203e:	b2db      	uxtb	r3, r3
 8012040:	2b7f      	cmp	r3, #127	; 0x7f
 8012042:	d017      	beq.n	8012074 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012044:	4b58      	ldr	r3, [pc, #352]	; (80121a8 <ip4_input+0x244>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	613b      	str	r3, [r7, #16]
 801204a:	e00e      	b.n	801206a <ip4_input+0x106>
          if (netif == inp) {
 801204c:	693a      	ldr	r2, [r7, #16]
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	429a      	cmp	r2, r3
 8012052:	d006      	beq.n	8012062 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012054:	6938      	ldr	r0, [r7, #16]
 8012056:	f7ff ff5b 	bl	8011f10 <ip4_input_accept>
 801205a:	4603      	mov	r3, r0
 801205c:	2b00      	cmp	r3, #0
 801205e:	d108      	bne.n	8012072 <ip4_input+0x10e>
 8012060:	e000      	b.n	8012064 <ip4_input+0x100>
            continue;
 8012062:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	613b      	str	r3, [r7, #16]
 801206a:	693b      	ldr	r3, [r7, #16]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d1ed      	bne.n	801204c <ip4_input+0xe8>
 8012070:	e000      	b.n	8012074 <ip4_input+0x110>
            break;
 8012072:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012074:	4b4b      	ldr	r3, [pc, #300]	; (80121a4 <ip4_input+0x240>)
 8012076:	691b      	ldr	r3, [r3, #16]
 8012078:	6839      	ldr	r1, [r7, #0]
 801207a:	4618      	mov	r0, r3
 801207c:	f000 f96e 	bl	801235c <ip4_addr_isbroadcast_u32>
 8012080:	4603      	mov	r3, r0
 8012082:	2b00      	cmp	r3, #0
 8012084:	d105      	bne.n	8012092 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012086:	4b47      	ldr	r3, [pc, #284]	; (80121a4 <ip4_input+0x240>)
 8012088:	691b      	ldr	r3, [r3, #16]
 801208a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801208e:	2be0      	cmp	r3, #224	; 0xe0
 8012090:	d104      	bne.n	801209c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f7f8 faa8 	bl	800a5e8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012098:	2300      	movs	r3, #0
 801209a:	e07e      	b.n	801219a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801209c:	693b      	ldr	r3, [r7, #16]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d104      	bne.n	80120ac <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f7f8 faa0 	bl	800a5e8 <pbuf_free>
    return ERR_OK;
 80120a8:	2300      	movs	r3, #0
 80120aa:	e076      	b.n	801219a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	88db      	ldrh	r3, [r3, #6]
 80120b0:	b29b      	uxth	r3, r3
 80120b2:	461a      	mov	r2, r3
 80120b4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80120b8:	4013      	ands	r3, r2
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d00b      	beq.n	80120d6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f000 fc92 	bl	80129e8 <ip4_reass>
 80120c4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d101      	bne.n	80120d0 <ip4_input+0x16c>
      return ERR_OK;
 80120cc:	2300      	movs	r3, #0
 80120ce:	e064      	b.n	801219a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	685b      	ldr	r3, [r3, #4]
 80120d4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80120d6:	4a33      	ldr	r2, [pc, #204]	; (80121a4 <ip4_input+0x240>)
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80120dc:	4a31      	ldr	r2, [pc, #196]	; (80121a4 <ip4_input+0x240>)
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80120e2:	4a30      	ldr	r2, [pc, #192]	; (80121a4 <ip4_input+0x240>)
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80120e8:	697b      	ldr	r3, [r7, #20]
 80120ea:	781b      	ldrb	r3, [r3, #0]
 80120ec:	f003 030f 	and.w	r3, r3, #15
 80120f0:	b2db      	uxtb	r3, r3
 80120f2:	009b      	lsls	r3, r3, #2
 80120f4:	b2db      	uxtb	r3, r3
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	4b2a      	ldr	r3, [pc, #168]	; (80121a4 <ip4_input+0x240>)
 80120fa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80120fc:	89fb      	ldrh	r3, [r7, #14]
 80120fe:	4619      	mov	r1, r3
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7f8 f9eb 	bl	800a4dc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012106:	697b      	ldr	r3, [r7, #20]
 8012108:	7a5b      	ldrb	r3, [r3, #9]
 801210a:	2b11      	cmp	r3, #17
 801210c:	d006      	beq.n	801211c <ip4_input+0x1b8>
 801210e:	2b11      	cmp	r3, #17
 8012110:	dc13      	bgt.n	801213a <ip4_input+0x1d6>
 8012112:	2b01      	cmp	r3, #1
 8012114:	d00c      	beq.n	8012130 <ip4_input+0x1cc>
 8012116:	2b06      	cmp	r3, #6
 8012118:	d005      	beq.n	8012126 <ip4_input+0x1c2>
 801211a:	e00e      	b.n	801213a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801211c:	6839      	ldr	r1, [r7, #0]
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f7fe f8e6 	bl	80102f0 <udp_input>
        break;
 8012124:	e026      	b.n	8012174 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012126:	6839      	ldr	r1, [r7, #0]
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f7fa f927 	bl	800c37c <tcp_input>
        break;
 801212e:	e021      	b.n	8012174 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012130:	6839      	ldr	r1, [r7, #0]
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f7ff fcee 	bl	8011b14 <icmp_input>
        break;
 8012138:	e01c      	b.n	8012174 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801213a:	4b1a      	ldr	r3, [pc, #104]	; (80121a4 <ip4_input+0x240>)
 801213c:	695b      	ldr	r3, [r3, #20]
 801213e:	6939      	ldr	r1, [r7, #16]
 8012140:	4618      	mov	r0, r3
 8012142:	f000 f90b 	bl	801235c <ip4_addr_isbroadcast_u32>
 8012146:	4603      	mov	r3, r0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d10f      	bne.n	801216c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801214c:	4b15      	ldr	r3, [pc, #84]	; (80121a4 <ip4_input+0x240>)
 801214e:	695b      	ldr	r3, [r3, #20]
 8012150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012154:	2be0      	cmp	r3, #224	; 0xe0
 8012156:	d009      	beq.n	801216c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012158:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801215c:	4619      	mov	r1, r3
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f7f8 fa2f 	bl	800a5c2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012164:	2102      	movs	r1, #2
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f7ff fdd8 	bl	8011d1c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f7f8 fa3b 	bl	800a5e8 <pbuf_free>
        break;
 8012172:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012174:	4b0b      	ldr	r3, [pc, #44]	; (80121a4 <ip4_input+0x240>)
 8012176:	2200      	movs	r2, #0
 8012178:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801217a:	4b0a      	ldr	r3, [pc, #40]	; (80121a4 <ip4_input+0x240>)
 801217c:	2200      	movs	r2, #0
 801217e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012180:	4b08      	ldr	r3, [pc, #32]	; (80121a4 <ip4_input+0x240>)
 8012182:	2200      	movs	r2, #0
 8012184:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012186:	4b07      	ldr	r3, [pc, #28]	; (80121a4 <ip4_input+0x240>)
 8012188:	2200      	movs	r2, #0
 801218a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801218c:	4b05      	ldr	r3, [pc, #20]	; (80121a4 <ip4_input+0x240>)
 801218e:	2200      	movs	r2, #0
 8012190:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012192:	4b04      	ldr	r3, [pc, #16]	; (80121a4 <ip4_input+0x240>)
 8012194:	2200      	movs	r2, #0
 8012196:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012198:	2300      	movs	r3, #0
}
 801219a:	4618      	mov	r0, r3
 801219c:	3718      	adds	r7, #24
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	20003784 	.word	0x20003784
 80121a8:	20008ea8 	.word	0x20008ea8

080121ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b08a      	sub	sp, #40	; 0x28
 80121b0:	af04      	add	r7, sp, #16
 80121b2:	60f8      	str	r0, [r7, #12]
 80121b4:	60b9      	str	r1, [r7, #8]
 80121b6:	607a      	str	r2, [r7, #4]
 80121b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d009      	beq.n	80121d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d003      	beq.n	80121d2 <ip4_output_if+0x26>
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d102      	bne.n	80121d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80121d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d4:	3304      	adds	r3, #4
 80121d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80121d8:	78fa      	ldrb	r2, [r7, #3]
 80121da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121dc:	9302      	str	r3, [sp, #8]
 80121de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80121e2:	9301      	str	r3, [sp, #4]
 80121e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80121e8:	9300      	str	r3, [sp, #0]
 80121ea:	4613      	mov	r3, r2
 80121ec:	687a      	ldr	r2, [r7, #4]
 80121ee:	6979      	ldr	r1, [r7, #20]
 80121f0:	68f8      	ldr	r0, [r7, #12]
 80121f2:	f000 f805 	bl	8012200 <ip4_output_if_src>
 80121f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3718      	adds	r7, #24
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}

08012200 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b088      	sub	sp, #32
 8012204:	af00      	add	r7, sp, #0
 8012206:	60f8      	str	r0, [r7, #12]
 8012208:	60b9      	str	r1, [r7, #8]
 801220a:	607a      	str	r2, [r7, #4]
 801220c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	7b9b      	ldrb	r3, [r3, #14]
 8012212:	2b01      	cmp	r3, #1
 8012214:	d006      	beq.n	8012224 <ip4_output_if_src+0x24>
 8012216:	4b4b      	ldr	r3, [pc, #300]	; (8012344 <ip4_output_if_src+0x144>)
 8012218:	f44f 7255 	mov.w	r2, #852	; 0x354
 801221c:	494a      	ldr	r1, [pc, #296]	; (8012348 <ip4_output_if_src+0x148>)
 801221e:	484b      	ldr	r0, [pc, #300]	; (801234c <ip4_output_if_src+0x14c>)
 8012220:	f001 f856 	bl	80132d0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d060      	beq.n	80122ec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801222a:	2314      	movs	r3, #20
 801222c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801222e:	2114      	movs	r1, #20
 8012230:	68f8      	ldr	r0, [r7, #12]
 8012232:	f7f8 f943 	bl	800a4bc <pbuf_add_header>
 8012236:	4603      	mov	r3, r0
 8012238:	2b00      	cmp	r3, #0
 801223a:	d002      	beq.n	8012242 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801223c:	f06f 0301 	mvn.w	r3, #1
 8012240:	e07c      	b.n	801233c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	685b      	ldr	r3, [r3, #4]
 8012246:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	895b      	ldrh	r3, [r3, #10]
 801224c:	2b13      	cmp	r3, #19
 801224e:	d806      	bhi.n	801225e <ip4_output_if_src+0x5e>
 8012250:	4b3c      	ldr	r3, [pc, #240]	; (8012344 <ip4_output_if_src+0x144>)
 8012252:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012256:	493e      	ldr	r1, [pc, #248]	; (8012350 <ip4_output_if_src+0x150>)
 8012258:	483c      	ldr	r0, [pc, #240]	; (801234c <ip4_output_if_src+0x14c>)
 801225a:	f001 f839 	bl	80132d0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801225e:	69fb      	ldr	r3, [r7, #28]
 8012260:	78fa      	ldrb	r2, [r7, #3]
 8012262:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012264:	69fb      	ldr	r3, [r7, #28]
 8012266:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801226a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	69fb      	ldr	r3, [r7, #28]
 8012272:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012274:	8b7b      	ldrh	r3, [r7, #26]
 8012276:	089b      	lsrs	r3, r3, #2
 8012278:	b29b      	uxth	r3, r3
 801227a:	b2db      	uxtb	r3, r3
 801227c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012280:	b2da      	uxtb	r2, r3
 8012282:	69fb      	ldr	r3, [r7, #28]
 8012284:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012286:	69fb      	ldr	r3, [r7, #28]
 8012288:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801228c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	891b      	ldrh	r3, [r3, #8]
 8012292:	4618      	mov	r0, r3
 8012294:	f7f6 fef4 	bl	8009080 <lwip_htons>
 8012298:	4603      	mov	r3, r0
 801229a:	461a      	mov	r2, r3
 801229c:	69fb      	ldr	r3, [r7, #28]
 801229e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80122a0:	69fb      	ldr	r3, [r7, #28]
 80122a2:	2200      	movs	r2, #0
 80122a4:	719a      	strb	r2, [r3, #6]
 80122a6:	2200      	movs	r2, #0
 80122a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80122aa:	4b2a      	ldr	r3, [pc, #168]	; (8012354 <ip4_output_if_src+0x154>)
 80122ac:	881b      	ldrh	r3, [r3, #0]
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7f6 fee6 	bl	8009080 <lwip_htons>
 80122b4:	4603      	mov	r3, r0
 80122b6:	461a      	mov	r2, r3
 80122b8:	69fb      	ldr	r3, [r7, #28]
 80122ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80122bc:	4b25      	ldr	r3, [pc, #148]	; (8012354 <ip4_output_if_src+0x154>)
 80122be:	881b      	ldrh	r3, [r3, #0]
 80122c0:	3301      	adds	r3, #1
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	4b23      	ldr	r3, [pc, #140]	; (8012354 <ip4_output_if_src+0x154>)
 80122c6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d104      	bne.n	80122d8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80122ce:	4b22      	ldr	r3, [pc, #136]	; (8012358 <ip4_output_if_src+0x158>)
 80122d0:	681a      	ldr	r2, [r3, #0]
 80122d2:	69fb      	ldr	r3, [r7, #28]
 80122d4:	60da      	str	r2, [r3, #12]
 80122d6:	e003      	b.n	80122e0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	681a      	ldr	r2, [r3, #0]
 80122dc:	69fb      	ldr	r3, [r7, #28]
 80122de:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	2200      	movs	r2, #0
 80122e4:	729a      	strb	r2, [r3, #10]
 80122e6:	2200      	movs	r2, #0
 80122e8:	72da      	strb	r2, [r3, #11]
 80122ea:	e00f      	b.n	801230c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	895b      	ldrh	r3, [r3, #10]
 80122f0:	2b13      	cmp	r3, #19
 80122f2:	d802      	bhi.n	80122fa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80122f4:	f06f 0301 	mvn.w	r3, #1
 80122f8:	e020      	b.n	801233c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	685b      	ldr	r3, [r3, #4]
 80122fe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012300:	69fb      	ldr	r3, [r7, #28]
 8012302:	691b      	ldr	r3, [r3, #16]
 8012304:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012306:	f107 0314 	add.w	r3, r7, #20
 801230a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801230e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012310:	2b00      	cmp	r3, #0
 8012312:	d00c      	beq.n	801232e <ip4_output_if_src+0x12e>
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	891a      	ldrh	r2, [r3, #8]
 8012318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801231a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801231c:	429a      	cmp	r2, r3
 801231e:	d906      	bls.n	801232e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012320:	687a      	ldr	r2, [r7, #4]
 8012322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012324:	68f8      	ldr	r0, [r7, #12]
 8012326:	f000 fd53 	bl	8012dd0 <ip4_frag>
 801232a:	4603      	mov	r3, r0
 801232c:	e006      	b.n	801233c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012330:	695b      	ldr	r3, [r3, #20]
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	68f9      	ldr	r1, [r7, #12]
 8012336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012338:	4798      	blx	r3
 801233a:	4603      	mov	r3, r0
}
 801233c:	4618      	mov	r0, r3
 801233e:	3720      	adds	r7, #32
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}
 8012344:	08016da0 	.word	0x08016da0
 8012348:	08016dd4 	.word	0x08016dd4
 801234c:	08016de0 	.word	0x08016de0
 8012350:	08016e08 	.word	0x08016e08
 8012354:	20009006 	.word	0x20009006
 8012358:	080171e4 	.word	0x080171e4

0801235c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801235c:	b480      	push	{r7}
 801235e:	b085      	sub	sp, #20
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012370:	d002      	beq.n	8012378 <ip4_addr_isbroadcast_u32+0x1c>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d101      	bne.n	801237c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012378:	2301      	movs	r3, #1
 801237a:	e02a      	b.n	80123d2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012382:	f003 0302 	and.w	r3, r3, #2
 8012386:	2b00      	cmp	r3, #0
 8012388:	d101      	bne.n	801238e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801238a:	2300      	movs	r3, #0
 801238c:	e021      	b.n	80123d2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	3304      	adds	r3, #4
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	429a      	cmp	r2, r3
 8012398:	d101      	bne.n	801239e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801239a:	2300      	movs	r3, #0
 801239c:	e019      	b.n	80123d2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801239e:	68fa      	ldr	r2, [r7, #12]
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	3304      	adds	r3, #4
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	405a      	eors	r2, r3
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	3308      	adds	r3, #8
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	4013      	ands	r3, r2
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d10d      	bne.n	80123d0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	3308      	adds	r3, #8
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	43da      	mvns	r2, r3
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	3308      	adds	r3, #8
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d101      	bne.n	80123d0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80123cc:	2301      	movs	r3, #1
 80123ce:	e000      	b.n	80123d2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80123d0:	2300      	movs	r3, #0
  }
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3714      	adds	r7, #20
 80123d6:	46bd      	mov	sp, r7
 80123d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123dc:	4770      	bx	lr
	...

080123e0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b084      	sub	sp, #16
 80123e4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80123e6:	2300      	movs	r3, #0
 80123e8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80123ea:	4b12      	ldr	r3, [pc, #72]	; (8012434 <ip_reass_tmr+0x54>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80123f0:	e018      	b.n	8012424 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	7fdb      	ldrb	r3, [r3, #31]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d00b      	beq.n	8012412 <ip_reass_tmr+0x32>
      r->timer--;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	7fdb      	ldrb	r3, [r3, #31]
 80123fe:	3b01      	subs	r3, #1
 8012400:	b2da      	uxtb	r2, r3
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	60fb      	str	r3, [r7, #12]
 8012410:	e008      	b.n	8012424 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801241c:	68b9      	ldr	r1, [r7, #8]
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f000 f80a 	bl	8012438 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d1e3      	bne.n	80123f2 <ip_reass_tmr+0x12>
    }
  }
}
 801242a:	bf00      	nop
 801242c:	bf00      	nop
 801242e:	3710      	adds	r7, #16
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}
 8012434:	20009008 	.word	0x20009008

08012438 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b088      	sub	sp, #32
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
 8012440:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012442:	2300      	movs	r3, #0
 8012444:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012446:	683a      	ldr	r2, [r7, #0]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	429a      	cmp	r2, r3
 801244c:	d105      	bne.n	801245a <ip_reass_free_complete_datagram+0x22>
 801244e:	4b45      	ldr	r3, [pc, #276]	; (8012564 <ip_reass_free_complete_datagram+0x12c>)
 8012450:	22ab      	movs	r2, #171	; 0xab
 8012452:	4945      	ldr	r1, [pc, #276]	; (8012568 <ip_reass_free_complete_datagram+0x130>)
 8012454:	4845      	ldr	r0, [pc, #276]	; (801256c <ip_reass_free_complete_datagram+0x134>)
 8012456:	f000 ff3b 	bl	80132d0 <iprintf>
  if (prev != NULL) {
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d00a      	beq.n	8012476 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	687a      	ldr	r2, [r7, #4]
 8012466:	429a      	cmp	r2, r3
 8012468:	d005      	beq.n	8012476 <ip_reass_free_complete_datagram+0x3e>
 801246a:	4b3e      	ldr	r3, [pc, #248]	; (8012564 <ip_reass_free_complete_datagram+0x12c>)
 801246c:	22ad      	movs	r2, #173	; 0xad
 801246e:	4940      	ldr	r1, [pc, #256]	; (8012570 <ip_reass_free_complete_datagram+0x138>)
 8012470:	483e      	ldr	r0, [pc, #248]	; (801256c <ip_reass_free_complete_datagram+0x134>)
 8012472:	f000 ff2d 	bl	80132d0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	685b      	ldr	r3, [r3, #4]
 801247c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	889b      	ldrh	r3, [r3, #4]
 8012482:	b29b      	uxth	r3, r3
 8012484:	2b00      	cmp	r3, #0
 8012486:	d12a      	bne.n	80124de <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	685b      	ldr	r3, [r3, #4]
 801248c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	681a      	ldr	r2, [r3, #0]
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012496:	69bb      	ldr	r3, [r7, #24]
 8012498:	6858      	ldr	r0, [r3, #4]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	3308      	adds	r3, #8
 801249e:	2214      	movs	r2, #20
 80124a0:	4619      	mov	r1, r3
 80124a2:	f000 fee5 	bl	8013270 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80124a6:	2101      	movs	r1, #1
 80124a8:	69b8      	ldr	r0, [r7, #24]
 80124aa:	f7ff fc47 	bl	8011d3c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80124ae:	69b8      	ldr	r0, [r7, #24]
 80124b0:	f7f8 f922 	bl	800a6f8 <pbuf_clen>
 80124b4:	4603      	mov	r3, r0
 80124b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80124b8:	8bfa      	ldrh	r2, [r7, #30]
 80124ba:	8a7b      	ldrh	r3, [r7, #18]
 80124bc:	4413      	add	r3, r2
 80124be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80124c2:	db05      	blt.n	80124d0 <ip_reass_free_complete_datagram+0x98>
 80124c4:	4b27      	ldr	r3, [pc, #156]	; (8012564 <ip_reass_free_complete_datagram+0x12c>)
 80124c6:	22bc      	movs	r2, #188	; 0xbc
 80124c8:	492a      	ldr	r1, [pc, #168]	; (8012574 <ip_reass_free_complete_datagram+0x13c>)
 80124ca:	4828      	ldr	r0, [pc, #160]	; (801256c <ip_reass_free_complete_datagram+0x134>)
 80124cc:	f000 ff00 	bl	80132d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80124d0:	8bfa      	ldrh	r2, [r7, #30]
 80124d2:	8a7b      	ldrh	r3, [r7, #18]
 80124d4:	4413      	add	r3, r2
 80124d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80124d8:	69b8      	ldr	r0, [r7, #24]
 80124da:	f7f8 f885 	bl	800a5e8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80124e4:	e01f      	b.n	8012526 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80124e6:	69bb      	ldr	r3, [r7, #24]
 80124e8:	685b      	ldr	r3, [r3, #4]
 80124ea:	617b      	str	r3, [r7, #20]
    pcur = p;
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80124f6:	68f8      	ldr	r0, [r7, #12]
 80124f8:	f7f8 f8fe 	bl	800a6f8 <pbuf_clen>
 80124fc:	4603      	mov	r3, r0
 80124fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012500:	8bfa      	ldrh	r2, [r7, #30]
 8012502:	8a7b      	ldrh	r3, [r7, #18]
 8012504:	4413      	add	r3, r2
 8012506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801250a:	db05      	blt.n	8012518 <ip_reass_free_complete_datagram+0xe0>
 801250c:	4b15      	ldr	r3, [pc, #84]	; (8012564 <ip_reass_free_complete_datagram+0x12c>)
 801250e:	22cc      	movs	r2, #204	; 0xcc
 8012510:	4918      	ldr	r1, [pc, #96]	; (8012574 <ip_reass_free_complete_datagram+0x13c>)
 8012512:	4816      	ldr	r0, [pc, #88]	; (801256c <ip_reass_free_complete_datagram+0x134>)
 8012514:	f000 fedc 	bl	80132d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012518:	8bfa      	ldrh	r2, [r7, #30]
 801251a:	8a7b      	ldrh	r3, [r7, #18]
 801251c:	4413      	add	r3, r2
 801251e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012520:	68f8      	ldr	r0, [r7, #12]
 8012522:	f7f8 f861 	bl	800a5e8 <pbuf_free>
  while (p != NULL) {
 8012526:	69bb      	ldr	r3, [r7, #24]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d1dc      	bne.n	80124e6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801252c:	6839      	ldr	r1, [r7, #0]
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f000 f8c2 	bl	80126b8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012534:	4b10      	ldr	r3, [pc, #64]	; (8012578 <ip_reass_free_complete_datagram+0x140>)
 8012536:	881b      	ldrh	r3, [r3, #0]
 8012538:	8bfa      	ldrh	r2, [r7, #30]
 801253a:	429a      	cmp	r2, r3
 801253c:	d905      	bls.n	801254a <ip_reass_free_complete_datagram+0x112>
 801253e:	4b09      	ldr	r3, [pc, #36]	; (8012564 <ip_reass_free_complete_datagram+0x12c>)
 8012540:	22d2      	movs	r2, #210	; 0xd2
 8012542:	490e      	ldr	r1, [pc, #56]	; (801257c <ip_reass_free_complete_datagram+0x144>)
 8012544:	4809      	ldr	r0, [pc, #36]	; (801256c <ip_reass_free_complete_datagram+0x134>)
 8012546:	f000 fec3 	bl	80132d0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801254a:	4b0b      	ldr	r3, [pc, #44]	; (8012578 <ip_reass_free_complete_datagram+0x140>)
 801254c:	881a      	ldrh	r2, [r3, #0]
 801254e:	8bfb      	ldrh	r3, [r7, #30]
 8012550:	1ad3      	subs	r3, r2, r3
 8012552:	b29a      	uxth	r2, r3
 8012554:	4b08      	ldr	r3, [pc, #32]	; (8012578 <ip_reass_free_complete_datagram+0x140>)
 8012556:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012558:	8bfb      	ldrh	r3, [r7, #30]
}
 801255a:	4618      	mov	r0, r3
 801255c:	3720      	adds	r7, #32
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}
 8012562:	bf00      	nop
 8012564:	08016e38 	.word	0x08016e38
 8012568:	08016e74 	.word	0x08016e74
 801256c:	08016e80 	.word	0x08016e80
 8012570:	08016ea8 	.word	0x08016ea8
 8012574:	08016ebc 	.word	0x08016ebc
 8012578:	2000900c 	.word	0x2000900c
 801257c:	08016edc 	.word	0x08016edc

08012580 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b08a      	sub	sp, #40	; 0x28
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801258a:	2300      	movs	r3, #0
 801258c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801258e:	2300      	movs	r3, #0
 8012590:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012592:	2300      	movs	r3, #0
 8012594:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012596:	2300      	movs	r3, #0
 8012598:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801259a:	2300      	movs	r3, #0
 801259c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801259e:	4b28      	ldr	r3, [pc, #160]	; (8012640 <ip_reass_remove_oldest_datagram+0xc0>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80125a4:	e030      	b.n	8012608 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80125a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a8:	695a      	ldr	r2, [r3, #20]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	68db      	ldr	r3, [r3, #12]
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d10c      	bne.n	80125cc <ip_reass_remove_oldest_datagram+0x4c>
 80125b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b4:	699a      	ldr	r2, [r3, #24]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	691b      	ldr	r3, [r3, #16]
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d106      	bne.n	80125cc <ip_reass_remove_oldest_datagram+0x4c>
 80125be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c0:	899a      	ldrh	r2, [r3, #12]
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	889b      	ldrh	r3, [r3, #4]
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d014      	beq.n	80125f6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	3301      	adds	r3, #1
 80125d0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80125d2:	6a3b      	ldr	r3, [r7, #32]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d104      	bne.n	80125e2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80125d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125da:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80125dc:	69fb      	ldr	r3, [r7, #28]
 80125de:	61bb      	str	r3, [r7, #24]
 80125e0:	e009      	b.n	80125f6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80125e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e4:	7fda      	ldrb	r2, [r3, #31]
 80125e6:	6a3b      	ldr	r3, [r7, #32]
 80125e8:	7fdb      	ldrb	r3, [r3, #31]
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d803      	bhi.n	80125f6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80125ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80125f2:	69fb      	ldr	r3, [r7, #28]
 80125f4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80125f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d001      	beq.n	8012602 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80125fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012600:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260a:	2b00      	cmp	r3, #0
 801260c:	d1cb      	bne.n	80125a6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801260e:	6a3b      	ldr	r3, [r7, #32]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d008      	beq.n	8012626 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012614:	69b9      	ldr	r1, [r7, #24]
 8012616:	6a38      	ldr	r0, [r7, #32]
 8012618:	f7ff ff0e 	bl	8012438 <ip_reass_free_complete_datagram>
 801261c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801261e:	697a      	ldr	r2, [r7, #20]
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	4413      	add	r3, r2
 8012624:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012626:	697a      	ldr	r2, [r7, #20]
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	429a      	cmp	r2, r3
 801262c:	da02      	bge.n	8012634 <ip_reass_remove_oldest_datagram+0xb4>
 801262e:	693b      	ldr	r3, [r7, #16]
 8012630:	2b01      	cmp	r3, #1
 8012632:	dcac      	bgt.n	801258e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012634:	697b      	ldr	r3, [r7, #20]
}
 8012636:	4618      	mov	r0, r3
 8012638:	3728      	adds	r7, #40	; 0x28
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	20009008 	.word	0x20009008

08012644 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b084      	sub	sp, #16
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801264e:	2004      	movs	r0, #4
 8012650:	f7f7 f96c 	bl	800992c <memp_malloc>
 8012654:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d110      	bne.n	801267e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801265c:	6839      	ldr	r1, [r7, #0]
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f7ff ff8e 	bl	8012580 <ip_reass_remove_oldest_datagram>
 8012664:	4602      	mov	r2, r0
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	4293      	cmp	r3, r2
 801266a:	dc03      	bgt.n	8012674 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801266c:	2004      	movs	r0, #4
 801266e:	f7f7 f95d 	bl	800992c <memp_malloc>
 8012672:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d101      	bne.n	801267e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801267a:	2300      	movs	r3, #0
 801267c:	e016      	b.n	80126ac <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801267e:	2220      	movs	r2, #32
 8012680:	2100      	movs	r1, #0
 8012682:	68f8      	ldr	r0, [r7, #12]
 8012684:	f000 fe1c 	bl	80132c0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	220f      	movs	r2, #15
 801268c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801268e:	4b09      	ldr	r3, [pc, #36]	; (80126b4 <ip_reass_enqueue_new_datagram+0x70>)
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012696:	4a07      	ldr	r2, [pc, #28]	; (80126b4 <ip_reass_enqueue_new_datagram+0x70>)
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	3308      	adds	r3, #8
 80126a0:	2214      	movs	r2, #20
 80126a2:	6879      	ldr	r1, [r7, #4]
 80126a4:	4618      	mov	r0, r3
 80126a6:	f000 fde3 	bl	8013270 <memcpy>
  return ipr;
 80126aa:	68fb      	ldr	r3, [r7, #12]
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3710      	adds	r7, #16
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	20009008 	.word	0x20009008

080126b8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80126c2:	4b10      	ldr	r3, [pc, #64]	; (8012704 <ip_reass_dequeue_datagram+0x4c>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	687a      	ldr	r2, [r7, #4]
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d104      	bne.n	80126d6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	4a0c      	ldr	r2, [pc, #48]	; (8012704 <ip_reass_dequeue_datagram+0x4c>)
 80126d2:	6013      	str	r3, [r2, #0]
 80126d4:	e00d      	b.n	80126f2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d106      	bne.n	80126ea <ip_reass_dequeue_datagram+0x32>
 80126dc:	4b0a      	ldr	r3, [pc, #40]	; (8012708 <ip_reass_dequeue_datagram+0x50>)
 80126de:	f240 1245 	movw	r2, #325	; 0x145
 80126e2:	490a      	ldr	r1, [pc, #40]	; (801270c <ip_reass_dequeue_datagram+0x54>)
 80126e4:	480a      	ldr	r0, [pc, #40]	; (8012710 <ip_reass_dequeue_datagram+0x58>)
 80126e6:	f000 fdf3 	bl	80132d0 <iprintf>
    prev->next = ipr->next;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681a      	ldr	r2, [r3, #0]
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80126f2:	6879      	ldr	r1, [r7, #4]
 80126f4:	2004      	movs	r0, #4
 80126f6:	f7f7 f965 	bl	80099c4 <memp_free>
}
 80126fa:	bf00      	nop
 80126fc:	3708      	adds	r7, #8
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	20009008 	.word	0x20009008
 8012708:	08016e38 	.word	0x08016e38
 801270c:	08016f00 	.word	0x08016f00
 8012710:	08016e80 	.word	0x08016e80

08012714 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b08c      	sub	sp, #48	; 0x30
 8012718:	af00      	add	r7, sp, #0
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012720:	2300      	movs	r3, #0
 8012722:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012724:	2301      	movs	r3, #1
 8012726:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	685b      	ldr	r3, [r3, #4]
 801272c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801272e:	69fb      	ldr	r3, [r7, #28]
 8012730:	885b      	ldrh	r3, [r3, #2]
 8012732:	b29b      	uxth	r3, r3
 8012734:	4618      	mov	r0, r3
 8012736:	f7f6 fca3 	bl	8009080 <lwip_htons>
 801273a:	4603      	mov	r3, r0
 801273c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801273e:	69fb      	ldr	r3, [r7, #28]
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	f003 030f 	and.w	r3, r3, #15
 8012746:	b2db      	uxtb	r3, r3
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801274c:	7e7b      	ldrb	r3, [r7, #25]
 801274e:	b29b      	uxth	r3, r3
 8012750:	8b7a      	ldrh	r2, [r7, #26]
 8012752:	429a      	cmp	r2, r3
 8012754:	d202      	bcs.n	801275c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012756:	f04f 33ff 	mov.w	r3, #4294967295
 801275a:	e135      	b.n	80129c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801275c:	7e7b      	ldrb	r3, [r7, #25]
 801275e:	b29b      	uxth	r3, r3
 8012760:	8b7a      	ldrh	r2, [r7, #26]
 8012762:	1ad3      	subs	r3, r2, r3
 8012764:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012766:	69fb      	ldr	r3, [r7, #28]
 8012768:	88db      	ldrh	r3, [r3, #6]
 801276a:	b29b      	uxth	r3, r3
 801276c:	4618      	mov	r0, r3
 801276e:	f7f6 fc87 	bl	8009080 <lwip_htons>
 8012772:	4603      	mov	r3, r0
 8012774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012778:	b29b      	uxth	r3, r3
 801277a:	00db      	lsls	r3, r3, #3
 801277c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801277e:	68bb      	ldr	r3, [r7, #8]
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012786:	2200      	movs	r2, #0
 8012788:	701a      	strb	r2, [r3, #0]
 801278a:	2200      	movs	r2, #0
 801278c:	705a      	strb	r2, [r3, #1]
 801278e:	2200      	movs	r2, #0
 8012790:	709a      	strb	r2, [r3, #2]
 8012792:	2200      	movs	r2, #0
 8012794:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012798:	8afa      	ldrh	r2, [r7, #22]
 801279a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801279c:	8afa      	ldrh	r2, [r7, #22]
 801279e:	8b7b      	ldrh	r3, [r7, #26]
 80127a0:	4413      	add	r3, r2
 80127a2:	b29a      	uxth	r2, r3
 80127a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80127a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127aa:	88db      	ldrh	r3, [r3, #6]
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	8afa      	ldrh	r2, [r7, #22]
 80127b0:	429a      	cmp	r2, r3
 80127b2:	d902      	bls.n	80127ba <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80127b4:	f04f 33ff 	mov.w	r3, #4294967295
 80127b8:	e106      	b.n	80129c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	627b      	str	r3, [r7, #36]	; 0x24
 80127c0:	e068      	b.n	8012894 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80127c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c4:	685b      	ldr	r3, [r3, #4]
 80127c6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80127c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ca:	889b      	ldrh	r3, [r3, #4]
 80127cc:	b29a      	uxth	r2, r3
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	889b      	ldrh	r3, [r3, #4]
 80127d2:	b29b      	uxth	r3, r3
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d235      	bcs.n	8012844 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80127d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80127de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d020      	beq.n	8012826 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80127e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e6:	889b      	ldrh	r3, [r3, #4]
 80127e8:	b29a      	uxth	r2, r3
 80127ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ec:	88db      	ldrh	r3, [r3, #6]
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d307      	bcc.n	8012804 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80127f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f6:	88db      	ldrh	r3, [r3, #6]
 80127f8:	b29a      	uxth	r2, r3
 80127fa:	693b      	ldr	r3, [r7, #16]
 80127fc:	889b      	ldrh	r3, [r3, #4]
 80127fe:	b29b      	uxth	r3, r3
 8012800:	429a      	cmp	r2, r3
 8012802:	d902      	bls.n	801280a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012804:	f04f 33ff 	mov.w	r3, #4294967295
 8012808:	e0de      	b.n	80129c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280c:	68ba      	ldr	r2, [r7, #8]
 801280e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012812:	88db      	ldrh	r3, [r3, #6]
 8012814:	b29a      	uxth	r2, r3
 8012816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012818:	889b      	ldrh	r3, [r3, #4]
 801281a:	b29b      	uxth	r3, r3
 801281c:	429a      	cmp	r2, r3
 801281e:	d03d      	beq.n	801289c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012820:	2300      	movs	r3, #0
 8012822:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012824:	e03a      	b.n	801289c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012828:	88db      	ldrh	r3, [r3, #6]
 801282a:	b29a      	uxth	r2, r3
 801282c:	693b      	ldr	r3, [r7, #16]
 801282e:	889b      	ldrh	r3, [r3, #4]
 8012830:	b29b      	uxth	r3, r3
 8012832:	429a      	cmp	r2, r3
 8012834:	d902      	bls.n	801283c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012836:	f04f 33ff 	mov.w	r3, #4294967295
 801283a:	e0c5      	b.n	80129c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	68ba      	ldr	r2, [r7, #8]
 8012840:	605a      	str	r2, [r3, #4]
      break;
 8012842:	e02b      	b.n	801289c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012846:	889b      	ldrh	r3, [r3, #4]
 8012848:	b29a      	uxth	r2, r3
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	889b      	ldrh	r3, [r3, #4]
 801284e:	b29b      	uxth	r3, r3
 8012850:	429a      	cmp	r2, r3
 8012852:	d102      	bne.n	801285a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012854:	f04f 33ff 	mov.w	r3, #4294967295
 8012858:	e0b6      	b.n	80129c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801285c:	889b      	ldrh	r3, [r3, #4]
 801285e:	b29a      	uxth	r2, r3
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	88db      	ldrh	r3, [r3, #6]
 8012864:	b29b      	uxth	r3, r3
 8012866:	429a      	cmp	r2, r3
 8012868:	d202      	bcs.n	8012870 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801286a:	f04f 33ff 	mov.w	r3, #4294967295
 801286e:	e0ab      	b.n	80129c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012872:	2b00      	cmp	r3, #0
 8012874:	d009      	beq.n	801288a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012878:	88db      	ldrh	r3, [r3, #6]
 801287a:	b29a      	uxth	r2, r3
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	889b      	ldrh	r3, [r3, #4]
 8012880:	b29b      	uxth	r3, r3
 8012882:	429a      	cmp	r2, r3
 8012884:	d001      	beq.n	801288a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012886:	2300      	movs	r3, #0
 8012888:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801288a:	693b      	ldr	r3, [r7, #16]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012896:	2b00      	cmp	r3, #0
 8012898:	d193      	bne.n	80127c2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801289a:	e000      	b.n	801289e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801289c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d12d      	bne.n	8012900 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80128a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d01c      	beq.n	80128e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80128aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ac:	88db      	ldrh	r3, [r3, #6]
 80128ae:	b29a      	uxth	r2, r3
 80128b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b2:	889b      	ldrh	r3, [r3, #4]
 80128b4:	b29b      	uxth	r3, r3
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d906      	bls.n	80128c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80128ba:	4b45      	ldr	r3, [pc, #276]	; (80129d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80128bc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80128c0:	4944      	ldr	r1, [pc, #272]	; (80129d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80128c2:	4845      	ldr	r0, [pc, #276]	; (80129d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80128c4:	f000 fd04 	bl	80132d0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80128c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ca:	68ba      	ldr	r2, [r7, #8]
 80128cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80128ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d0:	88db      	ldrh	r3, [r3, #6]
 80128d2:	b29a      	uxth	r2, r3
 80128d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d6:	889b      	ldrh	r3, [r3, #4]
 80128d8:	b29b      	uxth	r3, r3
 80128da:	429a      	cmp	r2, r3
 80128dc:	d010      	beq.n	8012900 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80128de:	2300      	movs	r3, #0
 80128e0:	623b      	str	r3, [r7, #32]
 80128e2:	e00d      	b.n	8012900 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d006      	beq.n	80128fa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80128ec:	4b38      	ldr	r3, [pc, #224]	; (80129d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80128ee:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80128f2:	493a      	ldr	r1, [pc, #232]	; (80129dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80128f4:	4838      	ldr	r0, [pc, #224]	; (80129d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80128f6:	f000 fceb 	bl	80132d0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	68ba      	ldr	r2, [r7, #8]
 80128fe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d105      	bne.n	8012912 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	7f9b      	ldrb	r3, [r3, #30]
 801290a:	f003 0301 	and.w	r3, r3, #1
 801290e:	2b00      	cmp	r3, #0
 8012910:	d059      	beq.n	80129c6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012912:	6a3b      	ldr	r3, [r7, #32]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d04f      	beq.n	80129b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d006      	beq.n	801292e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	685b      	ldr	r3, [r3, #4]
 8012926:	889b      	ldrh	r3, [r3, #4]
 8012928:	b29b      	uxth	r3, r3
 801292a:	2b00      	cmp	r3, #0
 801292c:	d002      	beq.n	8012934 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801292e:	2300      	movs	r3, #0
 8012930:	623b      	str	r3, [r7, #32]
 8012932:	e041      	b.n	80129b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012936:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801293e:	e012      	b.n	8012966 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012948:	88db      	ldrh	r3, [r3, #6]
 801294a:	b29a      	uxth	r2, r3
 801294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294e:	889b      	ldrh	r3, [r3, #4]
 8012950:	b29b      	uxth	r3, r3
 8012952:	429a      	cmp	r2, r3
 8012954:	d002      	beq.n	801295c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012956:	2300      	movs	r3, #0
 8012958:	623b      	str	r3, [r7, #32]
            break;
 801295a:	e007      	b.n	801296c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801295e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012968:	2b00      	cmp	r3, #0
 801296a:	d1e9      	bne.n	8012940 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801296c:	6a3b      	ldr	r3, [r7, #32]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d022      	beq.n	80129b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	685b      	ldr	r3, [r3, #4]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d106      	bne.n	8012988 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801297a:	4b15      	ldr	r3, [pc, #84]	; (80129d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801297c:	f240 12df 	movw	r2, #479	; 0x1df
 8012980:	4917      	ldr	r1, [pc, #92]	; (80129e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012982:	4815      	ldr	r0, [pc, #84]	; (80129d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012984:	f000 fca4 	bl	80132d0 <iprintf>
          LWIP_ASSERT("sanity check",
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	685b      	ldr	r3, [r3, #4]
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012990:	429a      	cmp	r2, r3
 8012992:	d106      	bne.n	80129a2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012994:	4b0e      	ldr	r3, [pc, #56]	; (80129d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012996:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801299a:	4911      	ldr	r1, [pc, #68]	; (80129e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801299c:	480e      	ldr	r0, [pc, #56]	; (80129d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801299e:	f000 fc97 	bl	80132d0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80129a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d006      	beq.n	80129b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80129aa:	4b09      	ldr	r3, [pc, #36]	; (80129d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80129ac:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80129b0:	490c      	ldr	r1, [pc, #48]	; (80129e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80129b2:	4809      	ldr	r0, [pc, #36]	; (80129d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80129b4:	f000 fc8c 	bl	80132d0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80129b8:	6a3b      	ldr	r3, [r7, #32]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	bf14      	ite	ne
 80129be:	2301      	movne	r3, #1
 80129c0:	2300      	moveq	r3, #0
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	e000      	b.n	80129c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80129c6:	2300      	movs	r3, #0
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3730      	adds	r7, #48	; 0x30
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	08016e38 	.word	0x08016e38
 80129d4:	08016f1c 	.word	0x08016f1c
 80129d8:	08016e80 	.word	0x08016e80
 80129dc:	08016f3c 	.word	0x08016f3c
 80129e0:	08016f74 	.word	0x08016f74
 80129e4:	08016f84 	.word	0x08016f84

080129e8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b08e      	sub	sp, #56	; 0x38
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	685b      	ldr	r3, [r3, #4]
 80129f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80129f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f8:	781b      	ldrb	r3, [r3, #0]
 80129fa:	f003 030f 	and.w	r3, r3, #15
 80129fe:	b2db      	uxtb	r3, r3
 8012a00:	009b      	lsls	r3, r3, #2
 8012a02:	b2db      	uxtb	r3, r3
 8012a04:	2b14      	cmp	r3, #20
 8012a06:	f040 8171 	bne.w	8012cec <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0c:	88db      	ldrh	r3, [r3, #6]
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7f6 fb35 	bl	8009080 <lwip_htons>
 8012a16:	4603      	mov	r3, r0
 8012a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	00db      	lsls	r3, r3, #3
 8012a20:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a24:	885b      	ldrh	r3, [r3, #2]
 8012a26:	b29b      	uxth	r3, r3
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7f6 fb29 	bl	8009080 <lwip_htons>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	f003 030f 	and.w	r3, r3, #15
 8012a3a:	b2db      	uxtb	r3, r3
 8012a3c:	009b      	lsls	r3, r3, #2
 8012a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012a42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012a46:	b29b      	uxth	r3, r3
 8012a48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	f0c0 8150 	bcc.w	8012cf0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012a50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a58:	1ad3      	subs	r3, r2, r3
 8012a5a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012a5c:	6878      	ldr	r0, [r7, #4]
 8012a5e:	f7f7 fe4b 	bl	800a6f8 <pbuf_clen>
 8012a62:	4603      	mov	r3, r0
 8012a64:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012a66:	4b8c      	ldr	r3, [pc, #560]	; (8012c98 <ip4_reass+0x2b0>)
 8012a68:	881b      	ldrh	r3, [r3, #0]
 8012a6a:	461a      	mov	r2, r3
 8012a6c:	8c3b      	ldrh	r3, [r7, #32]
 8012a6e:	4413      	add	r3, r2
 8012a70:	2b0a      	cmp	r3, #10
 8012a72:	dd10      	ble.n	8012a96 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012a74:	8c3b      	ldrh	r3, [r7, #32]
 8012a76:	4619      	mov	r1, r3
 8012a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a7a:	f7ff fd81 	bl	8012580 <ip_reass_remove_oldest_datagram>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	f000 8137 	beq.w	8012cf4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012a86:	4b84      	ldr	r3, [pc, #528]	; (8012c98 <ip4_reass+0x2b0>)
 8012a88:	881b      	ldrh	r3, [r3, #0]
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	8c3b      	ldrh	r3, [r7, #32]
 8012a8e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012a90:	2b0a      	cmp	r3, #10
 8012a92:	f300 812f 	bgt.w	8012cf4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012a96:	4b81      	ldr	r3, [pc, #516]	; (8012c9c <ip4_reass+0x2b4>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8012a9c:	e015      	b.n	8012aca <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa0:	695a      	ldr	r2, [r3, #20]
 8012aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa4:	68db      	ldr	r3, [r3, #12]
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d10c      	bne.n	8012ac4 <ip4_reass+0xdc>
 8012aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aac:	699a      	ldr	r2, [r3, #24]
 8012aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab0:	691b      	ldr	r3, [r3, #16]
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d106      	bne.n	8012ac4 <ip4_reass+0xdc>
 8012ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab8:	899a      	ldrh	r2, [r3, #12]
 8012aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012abc:	889b      	ldrh	r3, [r3, #4]
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	d006      	beq.n	8012ad2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8012aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d1e6      	bne.n	8012a9e <ip4_reass+0xb6>
 8012ad0:	e000      	b.n	8012ad4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012ad2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d109      	bne.n	8012aee <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012ada:	8c3b      	ldrh	r3, [r7, #32]
 8012adc:	4619      	mov	r1, r3
 8012ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ae0:	f7ff fdb0 	bl	8012644 <ip_reass_enqueue_new_datagram>
 8012ae4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d11c      	bne.n	8012b26 <ip4_reass+0x13e>
      goto nullreturn;
 8012aec:	e105      	b.n	8012cfa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af0:	88db      	ldrh	r3, [r3, #6]
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7f6 fac3 	bl	8009080 <lwip_htons>
 8012afa:	4603      	mov	r3, r0
 8012afc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d110      	bne.n	8012b26 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b06:	89db      	ldrh	r3, [r3, #14]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f7f6 fab9 	bl	8009080 <lwip_htons>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d006      	beq.n	8012b26 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b1a:	3308      	adds	r3, #8
 8012b1c:	2214      	movs	r2, #20
 8012b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012b20:	4618      	mov	r0, r3
 8012b22:	f000 fba5 	bl	8013270 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b28:	88db      	ldrh	r3, [r3, #6]
 8012b2a:	b29b      	uxth	r3, r3
 8012b2c:	f003 0320 	and.w	r3, r3, #32
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	bf0c      	ite	eq
 8012b34:	2301      	moveq	r3, #1
 8012b36:	2300      	movne	r3, #0
 8012b38:	b2db      	uxtb	r3, r3
 8012b3a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012b3c:	69fb      	ldr	r3, [r7, #28]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d00e      	beq.n	8012b60 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012b42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012b44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012b46:	4413      	add	r3, r2
 8012b48:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012b4a:	8b7a      	ldrh	r2, [r7, #26]
 8012b4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	f0c0 80a0 	bcc.w	8012c94 <ip4_reass+0x2ac>
 8012b54:	8b7b      	ldrh	r3, [r7, #26]
 8012b56:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	f200 809a 	bhi.w	8012c94 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012b60:	69fa      	ldr	r2, [r7, #28]
 8012b62:	6879      	ldr	r1, [r7, #4]
 8012b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b66:	f7ff fdd5 	bl	8012714 <ip_reass_chain_frag_into_datagram_and_validate>
 8012b6a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b72:	f000 809b 	beq.w	8012cac <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012b76:	4b48      	ldr	r3, [pc, #288]	; (8012c98 <ip4_reass+0x2b0>)
 8012b78:	881a      	ldrh	r2, [r3, #0]
 8012b7a:	8c3b      	ldrh	r3, [r7, #32]
 8012b7c:	4413      	add	r3, r2
 8012b7e:	b29a      	uxth	r2, r3
 8012b80:	4b45      	ldr	r3, [pc, #276]	; (8012c98 <ip4_reass+0x2b0>)
 8012b82:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012b84:	69fb      	ldr	r3, [r7, #28]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d00d      	beq.n	8012ba6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012b8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012b8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012b8e:	4413      	add	r3, r2
 8012b90:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b94:	8a7a      	ldrh	r2, [r7, #18]
 8012b96:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b9a:	7f9b      	ldrb	r3, [r3, #30]
 8012b9c:	f043 0301 	orr.w	r3, r3, #1
 8012ba0:	b2da      	uxtb	r2, r3
 8012ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d171      	bne.n	8012c90 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bae:	8b9b      	ldrh	r3, [r3, #28]
 8012bb0:	3314      	adds	r3, #20
 8012bb2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc8:	3308      	adds	r3, #8
 8012bca:	2214      	movs	r2, #20
 8012bcc:	4619      	mov	r1, r3
 8012bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012bd0:	f000 fb4e 	bl	8013270 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012bd4:	8a3b      	ldrh	r3, [r7, #16]
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7f6 fa52 	bl	8009080 <lwip_htons>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	461a      	mov	r2, r3
 8012be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be6:	2200      	movs	r2, #0
 8012be8:	719a      	strb	r2, [r3, #6]
 8012bea:	2200      	movs	r2, #0
 8012bec:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	729a      	strb	r2, [r3, #10]
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bfa:	685b      	ldr	r3, [r3, #4]
 8012bfc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012bfe:	e00d      	b.n	8012c1c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012c06:	2114      	movs	r1, #20
 8012c08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012c0a:	f7f7 fc67 	bl	800a4dc <pbuf_remove_header>
      pbuf_cat(p, r);
 8012c0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f7f7 fdab 	bl	800a76c <pbuf_cat>
      r = iprh->next_pbuf;
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d1ee      	bne.n	8012c00 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012c22:	4b1e      	ldr	r3, [pc, #120]	; (8012c9c <ip4_reass+0x2b4>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d102      	bne.n	8012c32 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c30:	e010      	b.n	8012c54 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012c32:	4b1a      	ldr	r3, [pc, #104]	; (8012c9c <ip4_reass+0x2b4>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c38:	e007      	b.n	8012c4a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d006      	beq.n	8012c52 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d1f4      	bne.n	8012c3a <ip4_reass+0x252>
 8012c50:	e000      	b.n	8012c54 <ip4_reass+0x26c>
          break;
 8012c52:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012c54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c58:	f7ff fd2e 	bl	80126b8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f7f7 fd4b 	bl	800a6f8 <pbuf_clen>
 8012c62:	4603      	mov	r3, r0
 8012c64:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012c66:	4b0c      	ldr	r3, [pc, #48]	; (8012c98 <ip4_reass+0x2b0>)
 8012c68:	881b      	ldrh	r3, [r3, #0]
 8012c6a:	8c3a      	ldrh	r2, [r7, #32]
 8012c6c:	429a      	cmp	r2, r3
 8012c6e:	d906      	bls.n	8012c7e <ip4_reass+0x296>
 8012c70:	4b0b      	ldr	r3, [pc, #44]	; (8012ca0 <ip4_reass+0x2b8>)
 8012c72:	f240 229b 	movw	r2, #667	; 0x29b
 8012c76:	490b      	ldr	r1, [pc, #44]	; (8012ca4 <ip4_reass+0x2bc>)
 8012c78:	480b      	ldr	r0, [pc, #44]	; (8012ca8 <ip4_reass+0x2c0>)
 8012c7a:	f000 fb29 	bl	80132d0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012c7e:	4b06      	ldr	r3, [pc, #24]	; (8012c98 <ip4_reass+0x2b0>)
 8012c80:	881a      	ldrh	r2, [r3, #0]
 8012c82:	8c3b      	ldrh	r3, [r7, #32]
 8012c84:	1ad3      	subs	r3, r2, r3
 8012c86:	b29a      	uxth	r2, r3
 8012c88:	4b03      	ldr	r3, [pc, #12]	; (8012c98 <ip4_reass+0x2b0>)
 8012c8a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	e038      	b.n	8012d02 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012c90:	2300      	movs	r3, #0
 8012c92:	e036      	b.n	8012d02 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012c94:	bf00      	nop
 8012c96:	e00a      	b.n	8012cae <ip4_reass+0x2c6>
 8012c98:	2000900c 	.word	0x2000900c
 8012c9c:	20009008 	.word	0x20009008
 8012ca0:	08016e38 	.word	0x08016e38
 8012ca4:	08016fa8 	.word	0x08016fa8
 8012ca8:	08016e80 	.word	0x08016e80
    goto nullreturn_ipr;
 8012cac:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d106      	bne.n	8012cc2 <ip4_reass+0x2da>
 8012cb4:	4b15      	ldr	r3, [pc, #84]	; (8012d0c <ip4_reass+0x324>)
 8012cb6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012cba:	4915      	ldr	r1, [pc, #84]	; (8012d10 <ip4_reass+0x328>)
 8012cbc:	4815      	ldr	r0, [pc, #84]	; (8012d14 <ip4_reass+0x32c>)
 8012cbe:	f000 fb07 	bl	80132d0 <iprintf>
  if (ipr->p == NULL) {
 8012cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc4:	685b      	ldr	r3, [r3, #4]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d116      	bne.n	8012cf8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012cca:	4b13      	ldr	r3, [pc, #76]	; (8012d18 <ip4_reass+0x330>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d006      	beq.n	8012ce2 <ip4_reass+0x2fa>
 8012cd4:	4b0d      	ldr	r3, [pc, #52]	; (8012d0c <ip4_reass+0x324>)
 8012cd6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012cda:	4910      	ldr	r1, [pc, #64]	; (8012d1c <ip4_reass+0x334>)
 8012cdc:	480d      	ldr	r0, [pc, #52]	; (8012d14 <ip4_reass+0x32c>)
 8012cde:	f000 faf7 	bl	80132d0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012ce2:	2100      	movs	r1, #0
 8012ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ce6:	f7ff fce7 	bl	80126b8 <ip_reass_dequeue_datagram>
 8012cea:	e006      	b.n	8012cfa <ip4_reass+0x312>
    goto nullreturn;
 8012cec:	bf00      	nop
 8012cee:	e004      	b.n	8012cfa <ip4_reass+0x312>
    goto nullreturn;
 8012cf0:	bf00      	nop
 8012cf2:	e002      	b.n	8012cfa <ip4_reass+0x312>
      goto nullreturn;
 8012cf4:	bf00      	nop
 8012cf6:	e000      	b.n	8012cfa <ip4_reass+0x312>
  }

nullreturn:
 8012cf8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f7f7 fc74 	bl	800a5e8 <pbuf_free>
  return NULL;
 8012d00:	2300      	movs	r3, #0
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3738      	adds	r7, #56	; 0x38
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}
 8012d0a:	bf00      	nop
 8012d0c:	08016e38 	.word	0x08016e38
 8012d10:	08016fc4 	.word	0x08016fc4
 8012d14:	08016e80 	.word	0x08016e80
 8012d18:	20009008 	.word	0x20009008
 8012d1c:	08016fd0 	.word	0x08016fd0

08012d20 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012d24:	2005      	movs	r0, #5
 8012d26:	f7f6 fe01 	bl	800992c <memp_malloc>
 8012d2a:	4603      	mov	r3, r0
}
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	bd80      	pop	{r7, pc}

08012d30 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d106      	bne.n	8012d4c <ip_frag_free_pbuf_custom_ref+0x1c>
 8012d3e:	4b07      	ldr	r3, [pc, #28]	; (8012d5c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012d40:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012d44:	4906      	ldr	r1, [pc, #24]	; (8012d60 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012d46:	4807      	ldr	r0, [pc, #28]	; (8012d64 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012d48:	f000 fac2 	bl	80132d0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012d4c:	6879      	ldr	r1, [r7, #4]
 8012d4e:	2005      	movs	r0, #5
 8012d50:	f7f6 fe38 	bl	80099c4 <memp_free>
}
 8012d54:	bf00      	nop
 8012d56:	3708      	adds	r7, #8
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	08016e38 	.word	0x08016e38
 8012d60:	08016ff0 	.word	0x08016ff0
 8012d64:	08016e80 	.word	0x08016e80

08012d68 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d106      	bne.n	8012d88 <ipfrag_free_pbuf_custom+0x20>
 8012d7a:	4b11      	ldr	r3, [pc, #68]	; (8012dc0 <ipfrag_free_pbuf_custom+0x58>)
 8012d7c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012d80:	4910      	ldr	r1, [pc, #64]	; (8012dc4 <ipfrag_free_pbuf_custom+0x5c>)
 8012d82:	4811      	ldr	r0, [pc, #68]	; (8012dc8 <ipfrag_free_pbuf_custom+0x60>)
 8012d84:	f000 faa4 	bl	80132d0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012d88:	68fa      	ldr	r2, [r7, #12]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	d006      	beq.n	8012d9e <ipfrag_free_pbuf_custom+0x36>
 8012d90:	4b0b      	ldr	r3, [pc, #44]	; (8012dc0 <ipfrag_free_pbuf_custom+0x58>)
 8012d92:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012d96:	490d      	ldr	r1, [pc, #52]	; (8012dcc <ipfrag_free_pbuf_custom+0x64>)
 8012d98:	480b      	ldr	r0, [pc, #44]	; (8012dc8 <ipfrag_free_pbuf_custom+0x60>)
 8012d9a:	f000 fa99 	bl	80132d0 <iprintf>
  if (pcr->original != NULL) {
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	695b      	ldr	r3, [r3, #20]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d004      	beq.n	8012db0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	695b      	ldr	r3, [r3, #20]
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7f7 fc1c 	bl	800a5e8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012db0:	68f8      	ldr	r0, [r7, #12]
 8012db2:	f7ff ffbd 	bl	8012d30 <ip_frag_free_pbuf_custom_ref>
}
 8012db6:	bf00      	nop
 8012db8:	3710      	adds	r7, #16
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}
 8012dbe:	bf00      	nop
 8012dc0:	08016e38 	.word	0x08016e38
 8012dc4:	08016ffc 	.word	0x08016ffc
 8012dc8:	08016e80 	.word	0x08016e80
 8012dcc:	08017008 	.word	0x08017008

08012dd0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b094      	sub	sp, #80	; 0x50
 8012dd4:	af02      	add	r7, sp, #8
 8012dd6:	60f8      	str	r0, [r7, #12]
 8012dd8:	60b9      	str	r1, [r7, #8]
 8012dda:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012de6:	3b14      	subs	r3, #20
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	da00      	bge.n	8012dee <ip4_frag+0x1e>
 8012dec:	3307      	adds	r3, #7
 8012dee:	10db      	asrs	r3, r3, #3
 8012df0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012df2:	2314      	movs	r3, #20
 8012df4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	685b      	ldr	r3, [r3, #4]
 8012dfa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dfe:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	f003 030f 	and.w	r3, r3, #15
 8012e08:	b2db      	uxtb	r3, r3
 8012e0a:	009b      	lsls	r3, r3, #2
 8012e0c:	b2db      	uxtb	r3, r3
 8012e0e:	2b14      	cmp	r3, #20
 8012e10:	d002      	beq.n	8012e18 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012e12:	f06f 0305 	mvn.w	r3, #5
 8012e16:	e110      	b.n	801303a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	895b      	ldrh	r3, [r3, #10]
 8012e1c:	2b13      	cmp	r3, #19
 8012e1e:	d809      	bhi.n	8012e34 <ip4_frag+0x64>
 8012e20:	4b88      	ldr	r3, [pc, #544]	; (8013044 <ip4_frag+0x274>)
 8012e22:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012e26:	4988      	ldr	r1, [pc, #544]	; (8013048 <ip4_frag+0x278>)
 8012e28:	4888      	ldr	r0, [pc, #544]	; (801304c <ip4_frag+0x27c>)
 8012e2a:	f000 fa51 	bl	80132d0 <iprintf>
 8012e2e:	f06f 0305 	mvn.w	r3, #5
 8012e32:	e102      	b.n	801303a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e36:	88db      	ldrh	r3, [r3, #6]
 8012e38:	b29b      	uxth	r3, r3
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7f6 f920 	bl	8009080 <lwip_htons>
 8012e40:	4603      	mov	r3, r0
 8012e42:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012e44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012e4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012e4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012e54:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	891b      	ldrh	r3, [r3, #8]
 8012e5a:	3b14      	subs	r3, #20
 8012e5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012e60:	e0e1      	b.n	8013026 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012e62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e64:	00db      	lsls	r3, r3, #3
 8012e66:	b29b      	uxth	r3, r3
 8012e68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e6c:	4293      	cmp	r3, r2
 8012e6e:	bf28      	it	cs
 8012e70:	4613      	movcs	r3, r2
 8012e72:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012e74:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e78:	2114      	movs	r1, #20
 8012e7a:	200e      	movs	r0, #14
 8012e7c:	f7f7 f8d0 	bl	800a020 <pbuf_alloc>
 8012e80:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	f000 80d5 	beq.w	8013034 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e8c:	895b      	ldrh	r3, [r3, #10]
 8012e8e:	2b13      	cmp	r3, #19
 8012e90:	d806      	bhi.n	8012ea0 <ip4_frag+0xd0>
 8012e92:	4b6c      	ldr	r3, [pc, #432]	; (8013044 <ip4_frag+0x274>)
 8012e94:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012e98:	496d      	ldr	r1, [pc, #436]	; (8013050 <ip4_frag+0x280>)
 8012e9a:	486c      	ldr	r0, [pc, #432]	; (801304c <ip4_frag+0x27c>)
 8012e9c:	f000 fa18 	bl	80132d0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	2214      	movs	r2, #20
 8012ea6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f000 f9e1 	bl	8013270 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012eb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012eb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012eba:	e064      	b.n	8012f86 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	895a      	ldrh	r2, [r3, #10]
 8012ec0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ec2:	1ad3      	subs	r3, r2, r3
 8012ec4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	895b      	ldrh	r3, [r3, #10]
 8012eca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d906      	bls.n	8012ede <ip4_frag+0x10e>
 8012ed0:	4b5c      	ldr	r3, [pc, #368]	; (8013044 <ip4_frag+0x274>)
 8012ed2:	f240 322d 	movw	r2, #813	; 0x32d
 8012ed6:	495f      	ldr	r1, [pc, #380]	; (8013054 <ip4_frag+0x284>)
 8012ed8:	485c      	ldr	r0, [pc, #368]	; (801304c <ip4_frag+0x27c>)
 8012eda:	f000 f9f9 	bl	80132d0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012ede:	8bfa      	ldrh	r2, [r7, #30]
 8012ee0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012ee4:	4293      	cmp	r3, r2
 8012ee6:	bf28      	it	cs
 8012ee8:	4613      	movcs	r3, r2
 8012eea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012eee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d105      	bne.n	8012f02 <ip4_frag+0x132>
        poff = 0;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	60fb      	str	r3, [r7, #12]
        continue;
 8012f00:	e041      	b.n	8012f86 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012f02:	f7ff ff0d 	bl	8012d20 <ip_frag_alloc_pbuf_custom_ref>
 8012f06:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012f08:	69bb      	ldr	r3, [r7, #24]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d103      	bne.n	8012f16 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f10:	f7f7 fb6a 	bl	800a5e8 <pbuf_free>
        goto memerr;
 8012f14:	e08f      	b.n	8013036 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012f16:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012f1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f1e:	4413      	add	r3, r2
 8012f20:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012f24:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012f28:	9201      	str	r2, [sp, #4]
 8012f2a:	9300      	str	r3, [sp, #0]
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	2241      	movs	r2, #65	; 0x41
 8012f30:	2000      	movs	r0, #0
 8012f32:	f7f7 f99f 	bl	800a274 <pbuf_alloced_custom>
 8012f36:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d106      	bne.n	8012f4c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012f3e:	69b8      	ldr	r0, [r7, #24]
 8012f40:	f7ff fef6 	bl	8012d30 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012f44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f46:	f7f7 fb4f 	bl	800a5e8 <pbuf_free>
        goto memerr;
 8012f4a:	e074      	b.n	8013036 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012f4c:	68f8      	ldr	r0, [r7, #12]
 8012f4e:	f7f7 fbeb 	bl	800a728 <pbuf_ref>
      pcr->original = p;
 8012f52:	69bb      	ldr	r3, [r7, #24]
 8012f54:	68fa      	ldr	r2, [r7, #12]
 8012f56:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	4a3f      	ldr	r2, [pc, #252]	; (8013058 <ip4_frag+0x288>)
 8012f5c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012f5e:	6979      	ldr	r1, [r7, #20]
 8012f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f62:	f7f7 fc03 	bl	800a76c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012f66:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012f6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012f6e:	1ad3      	subs	r3, r2, r3
 8012f70:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012f74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d004      	beq.n	8012f86 <ip4_frag+0x1b6>
        poff = 0;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012f86:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d196      	bne.n	8012ebc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012f8e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012f90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012f94:	4413      	add	r3, r2
 8012f96:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012f9c:	f1a3 0213 	sub.w	r2, r3, #19
 8012fa0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	bfcc      	ite	gt
 8012fa8:	2301      	movgt	r3, #1
 8012faa:	2300      	movle	r3, #0
 8012fac:	b2db      	uxtb	r3, r3
 8012fae:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012fb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012fb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012fb8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012fba:	6a3b      	ldr	r3, [r7, #32]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d002      	beq.n	8012fc6 <ip4_frag+0x1f6>
 8012fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d003      	beq.n	8012fce <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012fc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012fc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012fcc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012fce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7f6 f855 	bl	8009080 <lwip_htons>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	461a      	mov	r2, r3
 8012fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fdc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012fde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012fe0:	3314      	adds	r3, #20
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7f6 f84b 	bl	8009080 <lwip_htons>
 8012fea:	4603      	mov	r3, r0
 8012fec:	461a      	mov	r2, r3
 8012fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	729a      	strb	r2, [r3, #10]
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	695b      	ldr	r3, [r3, #20]
 8013000:	687a      	ldr	r2, [r7, #4]
 8013002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013004:	68b8      	ldr	r0, [r7, #8]
 8013006:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801300a:	f7f7 faed 	bl	800a5e8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801300e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013012:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013014:	1ad3      	subs	r3, r2, r3
 8013016:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801301a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801301e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013020:	4413      	add	r3, r2
 8013022:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013026:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801302a:	2b00      	cmp	r3, #0
 801302c:	f47f af19 	bne.w	8012e62 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013030:	2300      	movs	r3, #0
 8013032:	e002      	b.n	801303a <ip4_frag+0x26a>
      goto memerr;
 8013034:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013036:	f04f 33ff 	mov.w	r3, #4294967295
}
 801303a:	4618      	mov	r0, r3
 801303c:	3748      	adds	r7, #72	; 0x48
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}
 8013042:	bf00      	nop
 8013044:	08016e38 	.word	0x08016e38
 8013048:	08017014 	.word	0x08017014
 801304c:	08016e80 	.word	0x08016e80
 8013050:	08017030 	.word	0x08017030
 8013054:	08017050 	.word	0x08017050
 8013058:	08012d69 	.word	0x08012d69

0801305c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b086      	sub	sp, #24
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013066:	230e      	movs	r3, #14
 8013068:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	895b      	ldrh	r3, [r3, #10]
 801306e:	2b0e      	cmp	r3, #14
 8013070:	d96e      	bls.n	8013150 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	7bdb      	ldrb	r3, [r3, #15]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d106      	bne.n	8013088 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013080:	3301      	adds	r3, #1
 8013082:	b2da      	uxtb	r2, r3
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	685b      	ldr	r3, [r3, #4]
 801308c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	7b1a      	ldrb	r2, [r3, #12]
 8013092:	7b5b      	ldrb	r3, [r3, #13]
 8013094:	021b      	lsls	r3, r3, #8
 8013096:	4313      	orrs	r3, r2
 8013098:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	f003 0301 	and.w	r3, r3, #1
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d023      	beq.n	80130ee <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	781b      	ldrb	r3, [r3, #0]
 80130aa:	2b01      	cmp	r3, #1
 80130ac:	d10f      	bne.n	80130ce <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80130ae:	693b      	ldr	r3, [r7, #16]
 80130b0:	785b      	ldrb	r3, [r3, #1]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d11b      	bne.n	80130ee <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80130b6:	693b      	ldr	r3, [r7, #16]
 80130b8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80130ba:	2b5e      	cmp	r3, #94	; 0x5e
 80130bc:	d117      	bne.n	80130ee <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	7b5b      	ldrb	r3, [r3, #13]
 80130c2:	f043 0310 	orr.w	r3, r3, #16
 80130c6:	b2da      	uxtb	r2, r3
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	735a      	strb	r2, [r3, #13]
 80130cc:	e00f      	b.n	80130ee <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	2206      	movs	r2, #6
 80130d2:	4928      	ldr	r1, [pc, #160]	; (8013174 <ethernet_input+0x118>)
 80130d4:	4618      	mov	r0, r3
 80130d6:	f000 f8bb 	bl	8013250 <memcmp>
 80130da:	4603      	mov	r3, r0
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d106      	bne.n	80130ee <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	7b5b      	ldrb	r3, [r3, #13]
 80130e4:	f043 0308 	orr.w	r3, r3, #8
 80130e8:	b2da      	uxtb	r2, r3
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80130ee:	89fb      	ldrh	r3, [r7, #14]
 80130f0:	2b08      	cmp	r3, #8
 80130f2:	d003      	beq.n	80130fc <ethernet_input+0xa0>
 80130f4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80130f8:	d014      	beq.n	8013124 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80130fa:	e032      	b.n	8013162 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013102:	f003 0308 	and.w	r3, r3, #8
 8013106:	2b00      	cmp	r3, #0
 8013108:	d024      	beq.n	8013154 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801310a:	8afb      	ldrh	r3, [r7, #22]
 801310c:	4619      	mov	r1, r3
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f7f7 f9e4 	bl	800a4dc <pbuf_remove_header>
 8013114:	4603      	mov	r3, r0
 8013116:	2b00      	cmp	r3, #0
 8013118:	d11e      	bne.n	8013158 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801311a:	6839      	ldr	r1, [r7, #0]
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f7fe ff21 	bl	8011f64 <ip4_input>
      break;
 8013122:	e013      	b.n	801314c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801312a:	f003 0308 	and.w	r3, r3, #8
 801312e:	2b00      	cmp	r3, #0
 8013130:	d014      	beq.n	801315c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013132:	8afb      	ldrh	r3, [r7, #22]
 8013134:	4619      	mov	r1, r3
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f7f7 f9d0 	bl	800a4dc <pbuf_remove_header>
 801313c:	4603      	mov	r3, r0
 801313e:	2b00      	cmp	r3, #0
 8013140:	d10e      	bne.n	8013160 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013142:	6839      	ldr	r1, [r7, #0]
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f7fe f8c1 	bl	80112cc <etharp_input>
      break;
 801314a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801314c:	2300      	movs	r3, #0
 801314e:	e00c      	b.n	801316a <ethernet_input+0x10e>
    goto free_and_return;
 8013150:	bf00      	nop
 8013152:	e006      	b.n	8013162 <ethernet_input+0x106>
        goto free_and_return;
 8013154:	bf00      	nop
 8013156:	e004      	b.n	8013162 <ethernet_input+0x106>
        goto free_and_return;
 8013158:	bf00      	nop
 801315a:	e002      	b.n	8013162 <ethernet_input+0x106>
        goto free_and_return;
 801315c:	bf00      	nop
 801315e:	e000      	b.n	8013162 <ethernet_input+0x106>
        goto free_and_return;
 8013160:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f7f7 fa40 	bl	800a5e8 <pbuf_free>
  return ERR_OK;
 8013168:	2300      	movs	r3, #0
}
 801316a:	4618      	mov	r0, r3
 801316c:	3718      	adds	r7, #24
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}
 8013172:	bf00      	nop
 8013174:	080171e8 	.word	0x080171e8

08013178 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013178:	b580      	push	{r7, lr}
 801317a:	b086      	sub	sp, #24
 801317c:	af00      	add	r7, sp, #0
 801317e:	60f8      	str	r0, [r7, #12]
 8013180:	60b9      	str	r1, [r7, #8]
 8013182:	607a      	str	r2, [r7, #4]
 8013184:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013186:	8c3b      	ldrh	r3, [r7, #32]
 8013188:	4618      	mov	r0, r3
 801318a:	f7f5 ff79 	bl	8009080 <lwip_htons>
 801318e:	4603      	mov	r3, r0
 8013190:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013192:	210e      	movs	r1, #14
 8013194:	68b8      	ldr	r0, [r7, #8]
 8013196:	f7f7 f991 	bl	800a4bc <pbuf_add_header>
 801319a:	4603      	mov	r3, r0
 801319c:	2b00      	cmp	r3, #0
 801319e:	d125      	bne.n	80131ec <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80131a0:	68bb      	ldr	r3, [r7, #8]
 80131a2:	685b      	ldr	r3, [r3, #4]
 80131a4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	8afa      	ldrh	r2, [r7, #22]
 80131aa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80131ac:	693b      	ldr	r3, [r7, #16]
 80131ae:	2206      	movs	r2, #6
 80131b0:	6839      	ldr	r1, [r7, #0]
 80131b2:	4618      	mov	r0, r3
 80131b4:	f000 f85c 	bl	8013270 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80131b8:	693b      	ldr	r3, [r7, #16]
 80131ba:	3306      	adds	r3, #6
 80131bc:	2206      	movs	r2, #6
 80131be:	6879      	ldr	r1, [r7, #4]
 80131c0:	4618      	mov	r0, r3
 80131c2:	f000 f855 	bl	8013270 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80131cc:	2b06      	cmp	r3, #6
 80131ce:	d006      	beq.n	80131de <ethernet_output+0x66>
 80131d0:	4b0a      	ldr	r3, [pc, #40]	; (80131fc <ethernet_output+0x84>)
 80131d2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80131d6:	490a      	ldr	r1, [pc, #40]	; (8013200 <ethernet_output+0x88>)
 80131d8:	480a      	ldr	r0, [pc, #40]	; (8013204 <ethernet_output+0x8c>)
 80131da:	f000 f879 	bl	80132d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	699b      	ldr	r3, [r3, #24]
 80131e2:	68b9      	ldr	r1, [r7, #8]
 80131e4:	68f8      	ldr	r0, [r7, #12]
 80131e6:	4798      	blx	r3
 80131e8:	4603      	mov	r3, r0
 80131ea:	e002      	b.n	80131f2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80131ec:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80131ee:	f06f 0301 	mvn.w	r3, #1
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3718      	adds	r7, #24
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	bf00      	nop
 80131fc:	08017060 	.word	0x08017060
 8013200:	08017098 	.word	0x08017098
 8013204:	080170cc 	.word	0x080170cc

08013208 <__libc_init_array>:
 8013208:	b570      	push	{r4, r5, r6, lr}
 801320a:	4d0d      	ldr	r5, [pc, #52]	; (8013240 <__libc_init_array+0x38>)
 801320c:	4c0d      	ldr	r4, [pc, #52]	; (8013244 <__libc_init_array+0x3c>)
 801320e:	1b64      	subs	r4, r4, r5
 8013210:	10a4      	asrs	r4, r4, #2
 8013212:	2600      	movs	r6, #0
 8013214:	42a6      	cmp	r6, r4
 8013216:	d109      	bne.n	801322c <__libc_init_array+0x24>
 8013218:	4d0b      	ldr	r5, [pc, #44]	; (8013248 <__libc_init_array+0x40>)
 801321a:	4c0c      	ldr	r4, [pc, #48]	; (801324c <__libc_init_array+0x44>)
 801321c:	f001 fa5c 	bl	80146d8 <_init>
 8013220:	1b64      	subs	r4, r4, r5
 8013222:	10a4      	asrs	r4, r4, #2
 8013224:	2600      	movs	r6, #0
 8013226:	42a6      	cmp	r6, r4
 8013228:	d105      	bne.n	8013236 <__libc_init_array+0x2e>
 801322a:	bd70      	pop	{r4, r5, r6, pc}
 801322c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013230:	4798      	blx	r3
 8013232:	3601      	adds	r6, #1
 8013234:	e7ee      	b.n	8013214 <__libc_init_array+0xc>
 8013236:	f855 3b04 	ldr.w	r3, [r5], #4
 801323a:	4798      	blx	r3
 801323c:	3601      	adds	r6, #1
 801323e:	e7f2      	b.n	8013226 <__libc_init_array+0x1e>
 8013240:	08017348 	.word	0x08017348
 8013244:	08017348 	.word	0x08017348
 8013248:	08017348 	.word	0x08017348
 801324c:	0801734c 	.word	0x0801734c

08013250 <memcmp>:
 8013250:	b510      	push	{r4, lr}
 8013252:	3901      	subs	r1, #1
 8013254:	4402      	add	r2, r0
 8013256:	4290      	cmp	r0, r2
 8013258:	d101      	bne.n	801325e <memcmp+0xe>
 801325a:	2000      	movs	r0, #0
 801325c:	e005      	b.n	801326a <memcmp+0x1a>
 801325e:	7803      	ldrb	r3, [r0, #0]
 8013260:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013264:	42a3      	cmp	r3, r4
 8013266:	d001      	beq.n	801326c <memcmp+0x1c>
 8013268:	1b18      	subs	r0, r3, r4
 801326a:	bd10      	pop	{r4, pc}
 801326c:	3001      	adds	r0, #1
 801326e:	e7f2      	b.n	8013256 <memcmp+0x6>

08013270 <memcpy>:
 8013270:	440a      	add	r2, r1
 8013272:	4291      	cmp	r1, r2
 8013274:	f100 33ff 	add.w	r3, r0, #4294967295
 8013278:	d100      	bne.n	801327c <memcpy+0xc>
 801327a:	4770      	bx	lr
 801327c:	b510      	push	{r4, lr}
 801327e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013286:	4291      	cmp	r1, r2
 8013288:	d1f9      	bne.n	801327e <memcpy+0xe>
 801328a:	bd10      	pop	{r4, pc}

0801328c <memmove>:
 801328c:	4288      	cmp	r0, r1
 801328e:	b510      	push	{r4, lr}
 8013290:	eb01 0402 	add.w	r4, r1, r2
 8013294:	d902      	bls.n	801329c <memmove+0x10>
 8013296:	4284      	cmp	r4, r0
 8013298:	4623      	mov	r3, r4
 801329a:	d807      	bhi.n	80132ac <memmove+0x20>
 801329c:	1e43      	subs	r3, r0, #1
 801329e:	42a1      	cmp	r1, r4
 80132a0:	d008      	beq.n	80132b4 <memmove+0x28>
 80132a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132aa:	e7f8      	b.n	801329e <memmove+0x12>
 80132ac:	4402      	add	r2, r0
 80132ae:	4601      	mov	r1, r0
 80132b0:	428a      	cmp	r2, r1
 80132b2:	d100      	bne.n	80132b6 <memmove+0x2a>
 80132b4:	bd10      	pop	{r4, pc}
 80132b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80132ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80132be:	e7f7      	b.n	80132b0 <memmove+0x24>

080132c0 <memset>:
 80132c0:	4402      	add	r2, r0
 80132c2:	4603      	mov	r3, r0
 80132c4:	4293      	cmp	r3, r2
 80132c6:	d100      	bne.n	80132ca <memset+0xa>
 80132c8:	4770      	bx	lr
 80132ca:	f803 1b01 	strb.w	r1, [r3], #1
 80132ce:	e7f9      	b.n	80132c4 <memset+0x4>

080132d0 <iprintf>:
 80132d0:	b40f      	push	{r0, r1, r2, r3}
 80132d2:	4b0a      	ldr	r3, [pc, #40]	; (80132fc <iprintf+0x2c>)
 80132d4:	b513      	push	{r0, r1, r4, lr}
 80132d6:	681c      	ldr	r4, [r3, #0]
 80132d8:	b124      	cbz	r4, 80132e4 <iprintf+0x14>
 80132da:	69a3      	ldr	r3, [r4, #24]
 80132dc:	b913      	cbnz	r3, 80132e4 <iprintf+0x14>
 80132de:	4620      	mov	r0, r4
 80132e0:	f000 f8e2 	bl	80134a8 <__sinit>
 80132e4:	ab05      	add	r3, sp, #20
 80132e6:	9a04      	ldr	r2, [sp, #16]
 80132e8:	68a1      	ldr	r1, [r4, #8]
 80132ea:	9301      	str	r3, [sp, #4]
 80132ec:	4620      	mov	r0, r4
 80132ee:	f000 fbfb 	bl	8013ae8 <_vfiprintf_r>
 80132f2:	b002      	add	sp, #8
 80132f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132f8:	b004      	add	sp, #16
 80132fa:	4770      	bx	lr
 80132fc:	20000018 	.word	0x20000018

08013300 <rand>:
 8013300:	4b16      	ldr	r3, [pc, #88]	; (801335c <rand+0x5c>)
 8013302:	b510      	push	{r4, lr}
 8013304:	681c      	ldr	r4, [r3, #0]
 8013306:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013308:	b9b3      	cbnz	r3, 8013338 <rand+0x38>
 801330a:	2018      	movs	r0, #24
 801330c:	f000 f97e 	bl	801360c <malloc>
 8013310:	63a0      	str	r0, [r4, #56]	; 0x38
 8013312:	b928      	cbnz	r0, 8013320 <rand+0x20>
 8013314:	4602      	mov	r2, r0
 8013316:	4b12      	ldr	r3, [pc, #72]	; (8013360 <rand+0x60>)
 8013318:	4812      	ldr	r0, [pc, #72]	; (8013364 <rand+0x64>)
 801331a:	214e      	movs	r1, #78	; 0x4e
 801331c:	f000 f84e 	bl	80133bc <__assert_func>
 8013320:	4a11      	ldr	r2, [pc, #68]	; (8013368 <rand+0x68>)
 8013322:	4b12      	ldr	r3, [pc, #72]	; (801336c <rand+0x6c>)
 8013324:	e9c0 2300 	strd	r2, r3, [r0]
 8013328:	4b11      	ldr	r3, [pc, #68]	; (8013370 <rand+0x70>)
 801332a:	6083      	str	r3, [r0, #8]
 801332c:	230b      	movs	r3, #11
 801332e:	8183      	strh	r3, [r0, #12]
 8013330:	2201      	movs	r2, #1
 8013332:	2300      	movs	r3, #0
 8013334:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013338:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801333a:	4a0e      	ldr	r2, [pc, #56]	; (8013374 <rand+0x74>)
 801333c:	6920      	ldr	r0, [r4, #16]
 801333e:	6963      	ldr	r3, [r4, #20]
 8013340:	490d      	ldr	r1, [pc, #52]	; (8013378 <rand+0x78>)
 8013342:	4342      	muls	r2, r0
 8013344:	fb01 2203 	mla	r2, r1, r3, r2
 8013348:	fba0 0101 	umull	r0, r1, r0, r1
 801334c:	1c43      	adds	r3, r0, #1
 801334e:	eb42 0001 	adc.w	r0, r2, r1
 8013352:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013356:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801335a:	bd10      	pop	{r4, pc}
 801335c:	20000018 	.word	0x20000018
 8013360:	080171fc 	.word	0x080171fc
 8013364:	08017213 	.word	0x08017213
 8013368:	abcd330e 	.word	0xabcd330e
 801336c:	e66d1234 	.word	0xe66d1234
 8013370:	0005deec 	.word	0x0005deec
 8013374:	5851f42d 	.word	0x5851f42d
 8013378:	4c957f2d 	.word	0x4c957f2d

0801337c <siprintf>:
 801337c:	b40e      	push	{r1, r2, r3}
 801337e:	b500      	push	{lr}
 8013380:	b09c      	sub	sp, #112	; 0x70
 8013382:	ab1d      	add	r3, sp, #116	; 0x74
 8013384:	9002      	str	r0, [sp, #8]
 8013386:	9006      	str	r0, [sp, #24]
 8013388:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801338c:	4809      	ldr	r0, [pc, #36]	; (80133b4 <siprintf+0x38>)
 801338e:	9107      	str	r1, [sp, #28]
 8013390:	9104      	str	r1, [sp, #16]
 8013392:	4909      	ldr	r1, [pc, #36]	; (80133b8 <siprintf+0x3c>)
 8013394:	f853 2b04 	ldr.w	r2, [r3], #4
 8013398:	9105      	str	r1, [sp, #20]
 801339a:	6800      	ldr	r0, [r0, #0]
 801339c:	9301      	str	r3, [sp, #4]
 801339e:	a902      	add	r1, sp, #8
 80133a0:	f000 fa78 	bl	8013894 <_svfiprintf_r>
 80133a4:	9b02      	ldr	r3, [sp, #8]
 80133a6:	2200      	movs	r2, #0
 80133a8:	701a      	strb	r2, [r3, #0]
 80133aa:	b01c      	add	sp, #112	; 0x70
 80133ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80133b0:	b003      	add	sp, #12
 80133b2:	4770      	bx	lr
 80133b4:	20000018 	.word	0x20000018
 80133b8:	ffff0208 	.word	0xffff0208

080133bc <__assert_func>:
 80133bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80133be:	4614      	mov	r4, r2
 80133c0:	461a      	mov	r2, r3
 80133c2:	4b09      	ldr	r3, [pc, #36]	; (80133e8 <__assert_func+0x2c>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	4605      	mov	r5, r0
 80133c8:	68d8      	ldr	r0, [r3, #12]
 80133ca:	b14c      	cbz	r4, 80133e0 <__assert_func+0x24>
 80133cc:	4b07      	ldr	r3, [pc, #28]	; (80133ec <__assert_func+0x30>)
 80133ce:	9100      	str	r1, [sp, #0]
 80133d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80133d4:	4906      	ldr	r1, [pc, #24]	; (80133f0 <__assert_func+0x34>)
 80133d6:	462b      	mov	r3, r5
 80133d8:	f000 f8e4 	bl	80135a4 <fiprintf>
 80133dc:	f000 ff6e 	bl	80142bc <abort>
 80133e0:	4b04      	ldr	r3, [pc, #16]	; (80133f4 <__assert_func+0x38>)
 80133e2:	461c      	mov	r4, r3
 80133e4:	e7f3      	b.n	80133ce <__assert_func+0x12>
 80133e6:	bf00      	nop
 80133e8:	20000018 	.word	0x20000018
 80133ec:	0801726e 	.word	0x0801726e
 80133f0:	0801727b 	.word	0x0801727b
 80133f4:	080172a9 	.word	0x080172a9

080133f8 <std>:
 80133f8:	2300      	movs	r3, #0
 80133fa:	b510      	push	{r4, lr}
 80133fc:	4604      	mov	r4, r0
 80133fe:	e9c0 3300 	strd	r3, r3, [r0]
 8013402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013406:	6083      	str	r3, [r0, #8]
 8013408:	8181      	strh	r1, [r0, #12]
 801340a:	6643      	str	r3, [r0, #100]	; 0x64
 801340c:	81c2      	strh	r2, [r0, #14]
 801340e:	6183      	str	r3, [r0, #24]
 8013410:	4619      	mov	r1, r3
 8013412:	2208      	movs	r2, #8
 8013414:	305c      	adds	r0, #92	; 0x5c
 8013416:	f7ff ff53 	bl	80132c0 <memset>
 801341a:	4b05      	ldr	r3, [pc, #20]	; (8013430 <std+0x38>)
 801341c:	6263      	str	r3, [r4, #36]	; 0x24
 801341e:	4b05      	ldr	r3, [pc, #20]	; (8013434 <std+0x3c>)
 8013420:	62a3      	str	r3, [r4, #40]	; 0x28
 8013422:	4b05      	ldr	r3, [pc, #20]	; (8013438 <std+0x40>)
 8013424:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013426:	4b05      	ldr	r3, [pc, #20]	; (801343c <std+0x44>)
 8013428:	6224      	str	r4, [r4, #32]
 801342a:	6323      	str	r3, [r4, #48]	; 0x30
 801342c:	bd10      	pop	{r4, pc}
 801342e:	bf00      	nop
 8013430:	08014091 	.word	0x08014091
 8013434:	080140b3 	.word	0x080140b3
 8013438:	080140eb 	.word	0x080140eb
 801343c:	0801410f 	.word	0x0801410f

08013440 <_cleanup_r>:
 8013440:	4901      	ldr	r1, [pc, #4]	; (8013448 <_cleanup_r+0x8>)
 8013442:	f000 b8c1 	b.w	80135c8 <_fwalk_reent>
 8013446:	bf00      	nop
 8013448:	080143f9 	.word	0x080143f9

0801344c <__sfmoreglue>:
 801344c:	b570      	push	{r4, r5, r6, lr}
 801344e:	2268      	movs	r2, #104	; 0x68
 8013450:	1e4d      	subs	r5, r1, #1
 8013452:	4355      	muls	r5, r2
 8013454:	460e      	mov	r6, r1
 8013456:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801345a:	f000 f94b 	bl	80136f4 <_malloc_r>
 801345e:	4604      	mov	r4, r0
 8013460:	b140      	cbz	r0, 8013474 <__sfmoreglue+0x28>
 8013462:	2100      	movs	r1, #0
 8013464:	e9c0 1600 	strd	r1, r6, [r0]
 8013468:	300c      	adds	r0, #12
 801346a:	60a0      	str	r0, [r4, #8]
 801346c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013470:	f7ff ff26 	bl	80132c0 <memset>
 8013474:	4620      	mov	r0, r4
 8013476:	bd70      	pop	{r4, r5, r6, pc}

08013478 <__sfp_lock_acquire>:
 8013478:	4801      	ldr	r0, [pc, #4]	; (8013480 <__sfp_lock_acquire+0x8>)
 801347a:	f000 b8c5 	b.w	8013608 <__retarget_lock_acquire_recursive>
 801347e:	bf00      	nop
 8013480:	20009015 	.word	0x20009015

08013484 <__sfp_lock_release>:
 8013484:	4801      	ldr	r0, [pc, #4]	; (801348c <__sfp_lock_release+0x8>)
 8013486:	f000 b8c0 	b.w	801360a <__retarget_lock_release_recursive>
 801348a:	bf00      	nop
 801348c:	20009015 	.word	0x20009015

08013490 <__sinit_lock_acquire>:
 8013490:	4801      	ldr	r0, [pc, #4]	; (8013498 <__sinit_lock_acquire+0x8>)
 8013492:	f000 b8b9 	b.w	8013608 <__retarget_lock_acquire_recursive>
 8013496:	bf00      	nop
 8013498:	20009016 	.word	0x20009016

0801349c <__sinit_lock_release>:
 801349c:	4801      	ldr	r0, [pc, #4]	; (80134a4 <__sinit_lock_release+0x8>)
 801349e:	f000 b8b4 	b.w	801360a <__retarget_lock_release_recursive>
 80134a2:	bf00      	nop
 80134a4:	20009016 	.word	0x20009016

080134a8 <__sinit>:
 80134a8:	b510      	push	{r4, lr}
 80134aa:	4604      	mov	r4, r0
 80134ac:	f7ff fff0 	bl	8013490 <__sinit_lock_acquire>
 80134b0:	69a3      	ldr	r3, [r4, #24]
 80134b2:	b11b      	cbz	r3, 80134bc <__sinit+0x14>
 80134b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134b8:	f7ff bff0 	b.w	801349c <__sinit_lock_release>
 80134bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80134c0:	6523      	str	r3, [r4, #80]	; 0x50
 80134c2:	4b13      	ldr	r3, [pc, #76]	; (8013510 <__sinit+0x68>)
 80134c4:	4a13      	ldr	r2, [pc, #76]	; (8013514 <__sinit+0x6c>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80134ca:	42a3      	cmp	r3, r4
 80134cc:	bf04      	itt	eq
 80134ce:	2301      	moveq	r3, #1
 80134d0:	61a3      	streq	r3, [r4, #24]
 80134d2:	4620      	mov	r0, r4
 80134d4:	f000 f820 	bl	8013518 <__sfp>
 80134d8:	6060      	str	r0, [r4, #4]
 80134da:	4620      	mov	r0, r4
 80134dc:	f000 f81c 	bl	8013518 <__sfp>
 80134e0:	60a0      	str	r0, [r4, #8]
 80134e2:	4620      	mov	r0, r4
 80134e4:	f000 f818 	bl	8013518 <__sfp>
 80134e8:	2200      	movs	r2, #0
 80134ea:	60e0      	str	r0, [r4, #12]
 80134ec:	2104      	movs	r1, #4
 80134ee:	6860      	ldr	r0, [r4, #4]
 80134f0:	f7ff ff82 	bl	80133f8 <std>
 80134f4:	68a0      	ldr	r0, [r4, #8]
 80134f6:	2201      	movs	r2, #1
 80134f8:	2109      	movs	r1, #9
 80134fa:	f7ff ff7d 	bl	80133f8 <std>
 80134fe:	68e0      	ldr	r0, [r4, #12]
 8013500:	2202      	movs	r2, #2
 8013502:	2112      	movs	r1, #18
 8013504:	f7ff ff78 	bl	80133f8 <std>
 8013508:	2301      	movs	r3, #1
 801350a:	61a3      	str	r3, [r4, #24]
 801350c:	e7d2      	b.n	80134b4 <__sinit+0xc>
 801350e:	bf00      	nop
 8013510:	080171f8 	.word	0x080171f8
 8013514:	08013441 	.word	0x08013441

08013518 <__sfp>:
 8013518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801351a:	4607      	mov	r7, r0
 801351c:	f7ff ffac 	bl	8013478 <__sfp_lock_acquire>
 8013520:	4b1e      	ldr	r3, [pc, #120]	; (801359c <__sfp+0x84>)
 8013522:	681e      	ldr	r6, [r3, #0]
 8013524:	69b3      	ldr	r3, [r6, #24]
 8013526:	b913      	cbnz	r3, 801352e <__sfp+0x16>
 8013528:	4630      	mov	r0, r6
 801352a:	f7ff ffbd 	bl	80134a8 <__sinit>
 801352e:	3648      	adds	r6, #72	; 0x48
 8013530:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013534:	3b01      	subs	r3, #1
 8013536:	d503      	bpl.n	8013540 <__sfp+0x28>
 8013538:	6833      	ldr	r3, [r6, #0]
 801353a:	b30b      	cbz	r3, 8013580 <__sfp+0x68>
 801353c:	6836      	ldr	r6, [r6, #0]
 801353e:	e7f7      	b.n	8013530 <__sfp+0x18>
 8013540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013544:	b9d5      	cbnz	r5, 801357c <__sfp+0x64>
 8013546:	4b16      	ldr	r3, [pc, #88]	; (80135a0 <__sfp+0x88>)
 8013548:	60e3      	str	r3, [r4, #12]
 801354a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801354e:	6665      	str	r5, [r4, #100]	; 0x64
 8013550:	f000 f859 	bl	8013606 <__retarget_lock_init_recursive>
 8013554:	f7ff ff96 	bl	8013484 <__sfp_lock_release>
 8013558:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801355c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013560:	6025      	str	r5, [r4, #0]
 8013562:	61a5      	str	r5, [r4, #24]
 8013564:	2208      	movs	r2, #8
 8013566:	4629      	mov	r1, r5
 8013568:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801356c:	f7ff fea8 	bl	80132c0 <memset>
 8013570:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013574:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013578:	4620      	mov	r0, r4
 801357a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801357c:	3468      	adds	r4, #104	; 0x68
 801357e:	e7d9      	b.n	8013534 <__sfp+0x1c>
 8013580:	2104      	movs	r1, #4
 8013582:	4638      	mov	r0, r7
 8013584:	f7ff ff62 	bl	801344c <__sfmoreglue>
 8013588:	4604      	mov	r4, r0
 801358a:	6030      	str	r0, [r6, #0]
 801358c:	2800      	cmp	r0, #0
 801358e:	d1d5      	bne.n	801353c <__sfp+0x24>
 8013590:	f7ff ff78 	bl	8013484 <__sfp_lock_release>
 8013594:	230c      	movs	r3, #12
 8013596:	603b      	str	r3, [r7, #0]
 8013598:	e7ee      	b.n	8013578 <__sfp+0x60>
 801359a:	bf00      	nop
 801359c:	080171f8 	.word	0x080171f8
 80135a0:	ffff0001 	.word	0xffff0001

080135a4 <fiprintf>:
 80135a4:	b40e      	push	{r1, r2, r3}
 80135a6:	b503      	push	{r0, r1, lr}
 80135a8:	4601      	mov	r1, r0
 80135aa:	ab03      	add	r3, sp, #12
 80135ac:	4805      	ldr	r0, [pc, #20]	; (80135c4 <fiprintf+0x20>)
 80135ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80135b2:	6800      	ldr	r0, [r0, #0]
 80135b4:	9301      	str	r3, [sp, #4]
 80135b6:	f000 fa97 	bl	8013ae8 <_vfiprintf_r>
 80135ba:	b002      	add	sp, #8
 80135bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80135c0:	b003      	add	sp, #12
 80135c2:	4770      	bx	lr
 80135c4:	20000018 	.word	0x20000018

080135c8 <_fwalk_reent>:
 80135c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135cc:	4606      	mov	r6, r0
 80135ce:	4688      	mov	r8, r1
 80135d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80135d4:	2700      	movs	r7, #0
 80135d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80135da:	f1b9 0901 	subs.w	r9, r9, #1
 80135de:	d505      	bpl.n	80135ec <_fwalk_reent+0x24>
 80135e0:	6824      	ldr	r4, [r4, #0]
 80135e2:	2c00      	cmp	r4, #0
 80135e4:	d1f7      	bne.n	80135d6 <_fwalk_reent+0xe>
 80135e6:	4638      	mov	r0, r7
 80135e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135ec:	89ab      	ldrh	r3, [r5, #12]
 80135ee:	2b01      	cmp	r3, #1
 80135f0:	d907      	bls.n	8013602 <_fwalk_reent+0x3a>
 80135f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80135f6:	3301      	adds	r3, #1
 80135f8:	d003      	beq.n	8013602 <_fwalk_reent+0x3a>
 80135fa:	4629      	mov	r1, r5
 80135fc:	4630      	mov	r0, r6
 80135fe:	47c0      	blx	r8
 8013600:	4307      	orrs	r7, r0
 8013602:	3568      	adds	r5, #104	; 0x68
 8013604:	e7e9      	b.n	80135da <_fwalk_reent+0x12>

08013606 <__retarget_lock_init_recursive>:
 8013606:	4770      	bx	lr

08013608 <__retarget_lock_acquire_recursive>:
 8013608:	4770      	bx	lr

0801360a <__retarget_lock_release_recursive>:
 801360a:	4770      	bx	lr

0801360c <malloc>:
 801360c:	4b02      	ldr	r3, [pc, #8]	; (8013618 <malloc+0xc>)
 801360e:	4601      	mov	r1, r0
 8013610:	6818      	ldr	r0, [r3, #0]
 8013612:	f000 b86f 	b.w	80136f4 <_malloc_r>
 8013616:	bf00      	nop
 8013618:	20000018 	.word	0x20000018

0801361c <_free_r>:
 801361c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801361e:	2900      	cmp	r1, #0
 8013620:	d044      	beq.n	80136ac <_free_r+0x90>
 8013622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013626:	9001      	str	r0, [sp, #4]
 8013628:	2b00      	cmp	r3, #0
 801362a:	f1a1 0404 	sub.w	r4, r1, #4
 801362e:	bfb8      	it	lt
 8013630:	18e4      	addlt	r4, r4, r3
 8013632:	f000 ff95 	bl	8014560 <__malloc_lock>
 8013636:	4a1e      	ldr	r2, [pc, #120]	; (80136b0 <_free_r+0x94>)
 8013638:	9801      	ldr	r0, [sp, #4]
 801363a:	6813      	ldr	r3, [r2, #0]
 801363c:	b933      	cbnz	r3, 801364c <_free_r+0x30>
 801363e:	6063      	str	r3, [r4, #4]
 8013640:	6014      	str	r4, [r2, #0]
 8013642:	b003      	add	sp, #12
 8013644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013648:	f000 bf90 	b.w	801456c <__malloc_unlock>
 801364c:	42a3      	cmp	r3, r4
 801364e:	d908      	bls.n	8013662 <_free_r+0x46>
 8013650:	6825      	ldr	r5, [r4, #0]
 8013652:	1961      	adds	r1, r4, r5
 8013654:	428b      	cmp	r3, r1
 8013656:	bf01      	itttt	eq
 8013658:	6819      	ldreq	r1, [r3, #0]
 801365a:	685b      	ldreq	r3, [r3, #4]
 801365c:	1949      	addeq	r1, r1, r5
 801365e:	6021      	streq	r1, [r4, #0]
 8013660:	e7ed      	b.n	801363e <_free_r+0x22>
 8013662:	461a      	mov	r2, r3
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	b10b      	cbz	r3, 801366c <_free_r+0x50>
 8013668:	42a3      	cmp	r3, r4
 801366a:	d9fa      	bls.n	8013662 <_free_r+0x46>
 801366c:	6811      	ldr	r1, [r2, #0]
 801366e:	1855      	adds	r5, r2, r1
 8013670:	42a5      	cmp	r5, r4
 8013672:	d10b      	bne.n	801368c <_free_r+0x70>
 8013674:	6824      	ldr	r4, [r4, #0]
 8013676:	4421      	add	r1, r4
 8013678:	1854      	adds	r4, r2, r1
 801367a:	42a3      	cmp	r3, r4
 801367c:	6011      	str	r1, [r2, #0]
 801367e:	d1e0      	bne.n	8013642 <_free_r+0x26>
 8013680:	681c      	ldr	r4, [r3, #0]
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	6053      	str	r3, [r2, #4]
 8013686:	4421      	add	r1, r4
 8013688:	6011      	str	r1, [r2, #0]
 801368a:	e7da      	b.n	8013642 <_free_r+0x26>
 801368c:	d902      	bls.n	8013694 <_free_r+0x78>
 801368e:	230c      	movs	r3, #12
 8013690:	6003      	str	r3, [r0, #0]
 8013692:	e7d6      	b.n	8013642 <_free_r+0x26>
 8013694:	6825      	ldr	r5, [r4, #0]
 8013696:	1961      	adds	r1, r4, r5
 8013698:	428b      	cmp	r3, r1
 801369a:	bf04      	itt	eq
 801369c:	6819      	ldreq	r1, [r3, #0]
 801369e:	685b      	ldreq	r3, [r3, #4]
 80136a0:	6063      	str	r3, [r4, #4]
 80136a2:	bf04      	itt	eq
 80136a4:	1949      	addeq	r1, r1, r5
 80136a6:	6021      	streq	r1, [r4, #0]
 80136a8:	6054      	str	r4, [r2, #4]
 80136aa:	e7ca      	b.n	8013642 <_free_r+0x26>
 80136ac:	b003      	add	sp, #12
 80136ae:	bd30      	pop	{r4, r5, pc}
 80136b0:	20009018 	.word	0x20009018

080136b4 <sbrk_aligned>:
 80136b4:	b570      	push	{r4, r5, r6, lr}
 80136b6:	4e0e      	ldr	r6, [pc, #56]	; (80136f0 <sbrk_aligned+0x3c>)
 80136b8:	460c      	mov	r4, r1
 80136ba:	6831      	ldr	r1, [r6, #0]
 80136bc:	4605      	mov	r5, r0
 80136be:	b911      	cbnz	r1, 80136c6 <sbrk_aligned+0x12>
 80136c0:	f000 fcd6 	bl	8014070 <_sbrk_r>
 80136c4:	6030      	str	r0, [r6, #0]
 80136c6:	4621      	mov	r1, r4
 80136c8:	4628      	mov	r0, r5
 80136ca:	f000 fcd1 	bl	8014070 <_sbrk_r>
 80136ce:	1c43      	adds	r3, r0, #1
 80136d0:	d00a      	beq.n	80136e8 <sbrk_aligned+0x34>
 80136d2:	1cc4      	adds	r4, r0, #3
 80136d4:	f024 0403 	bic.w	r4, r4, #3
 80136d8:	42a0      	cmp	r0, r4
 80136da:	d007      	beq.n	80136ec <sbrk_aligned+0x38>
 80136dc:	1a21      	subs	r1, r4, r0
 80136de:	4628      	mov	r0, r5
 80136e0:	f000 fcc6 	bl	8014070 <_sbrk_r>
 80136e4:	3001      	adds	r0, #1
 80136e6:	d101      	bne.n	80136ec <sbrk_aligned+0x38>
 80136e8:	f04f 34ff 	mov.w	r4, #4294967295
 80136ec:	4620      	mov	r0, r4
 80136ee:	bd70      	pop	{r4, r5, r6, pc}
 80136f0:	2000901c 	.word	0x2000901c

080136f4 <_malloc_r>:
 80136f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136f8:	1ccd      	adds	r5, r1, #3
 80136fa:	f025 0503 	bic.w	r5, r5, #3
 80136fe:	3508      	adds	r5, #8
 8013700:	2d0c      	cmp	r5, #12
 8013702:	bf38      	it	cc
 8013704:	250c      	movcc	r5, #12
 8013706:	2d00      	cmp	r5, #0
 8013708:	4607      	mov	r7, r0
 801370a:	db01      	blt.n	8013710 <_malloc_r+0x1c>
 801370c:	42a9      	cmp	r1, r5
 801370e:	d905      	bls.n	801371c <_malloc_r+0x28>
 8013710:	230c      	movs	r3, #12
 8013712:	603b      	str	r3, [r7, #0]
 8013714:	2600      	movs	r6, #0
 8013716:	4630      	mov	r0, r6
 8013718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801371c:	4e2e      	ldr	r6, [pc, #184]	; (80137d8 <_malloc_r+0xe4>)
 801371e:	f000 ff1f 	bl	8014560 <__malloc_lock>
 8013722:	6833      	ldr	r3, [r6, #0]
 8013724:	461c      	mov	r4, r3
 8013726:	bb34      	cbnz	r4, 8013776 <_malloc_r+0x82>
 8013728:	4629      	mov	r1, r5
 801372a:	4638      	mov	r0, r7
 801372c:	f7ff ffc2 	bl	80136b4 <sbrk_aligned>
 8013730:	1c43      	adds	r3, r0, #1
 8013732:	4604      	mov	r4, r0
 8013734:	d14d      	bne.n	80137d2 <_malloc_r+0xde>
 8013736:	6834      	ldr	r4, [r6, #0]
 8013738:	4626      	mov	r6, r4
 801373a:	2e00      	cmp	r6, #0
 801373c:	d140      	bne.n	80137c0 <_malloc_r+0xcc>
 801373e:	6823      	ldr	r3, [r4, #0]
 8013740:	4631      	mov	r1, r6
 8013742:	4638      	mov	r0, r7
 8013744:	eb04 0803 	add.w	r8, r4, r3
 8013748:	f000 fc92 	bl	8014070 <_sbrk_r>
 801374c:	4580      	cmp	r8, r0
 801374e:	d13a      	bne.n	80137c6 <_malloc_r+0xd2>
 8013750:	6821      	ldr	r1, [r4, #0]
 8013752:	3503      	adds	r5, #3
 8013754:	1a6d      	subs	r5, r5, r1
 8013756:	f025 0503 	bic.w	r5, r5, #3
 801375a:	3508      	adds	r5, #8
 801375c:	2d0c      	cmp	r5, #12
 801375e:	bf38      	it	cc
 8013760:	250c      	movcc	r5, #12
 8013762:	4629      	mov	r1, r5
 8013764:	4638      	mov	r0, r7
 8013766:	f7ff ffa5 	bl	80136b4 <sbrk_aligned>
 801376a:	3001      	adds	r0, #1
 801376c:	d02b      	beq.n	80137c6 <_malloc_r+0xd2>
 801376e:	6823      	ldr	r3, [r4, #0]
 8013770:	442b      	add	r3, r5
 8013772:	6023      	str	r3, [r4, #0]
 8013774:	e00e      	b.n	8013794 <_malloc_r+0xa0>
 8013776:	6822      	ldr	r2, [r4, #0]
 8013778:	1b52      	subs	r2, r2, r5
 801377a:	d41e      	bmi.n	80137ba <_malloc_r+0xc6>
 801377c:	2a0b      	cmp	r2, #11
 801377e:	d916      	bls.n	80137ae <_malloc_r+0xba>
 8013780:	1961      	adds	r1, r4, r5
 8013782:	42a3      	cmp	r3, r4
 8013784:	6025      	str	r5, [r4, #0]
 8013786:	bf18      	it	ne
 8013788:	6059      	strne	r1, [r3, #4]
 801378a:	6863      	ldr	r3, [r4, #4]
 801378c:	bf08      	it	eq
 801378e:	6031      	streq	r1, [r6, #0]
 8013790:	5162      	str	r2, [r4, r5]
 8013792:	604b      	str	r3, [r1, #4]
 8013794:	4638      	mov	r0, r7
 8013796:	f104 060b 	add.w	r6, r4, #11
 801379a:	f000 fee7 	bl	801456c <__malloc_unlock>
 801379e:	f026 0607 	bic.w	r6, r6, #7
 80137a2:	1d23      	adds	r3, r4, #4
 80137a4:	1af2      	subs	r2, r6, r3
 80137a6:	d0b6      	beq.n	8013716 <_malloc_r+0x22>
 80137a8:	1b9b      	subs	r3, r3, r6
 80137aa:	50a3      	str	r3, [r4, r2]
 80137ac:	e7b3      	b.n	8013716 <_malloc_r+0x22>
 80137ae:	6862      	ldr	r2, [r4, #4]
 80137b0:	42a3      	cmp	r3, r4
 80137b2:	bf0c      	ite	eq
 80137b4:	6032      	streq	r2, [r6, #0]
 80137b6:	605a      	strne	r2, [r3, #4]
 80137b8:	e7ec      	b.n	8013794 <_malloc_r+0xa0>
 80137ba:	4623      	mov	r3, r4
 80137bc:	6864      	ldr	r4, [r4, #4]
 80137be:	e7b2      	b.n	8013726 <_malloc_r+0x32>
 80137c0:	4634      	mov	r4, r6
 80137c2:	6876      	ldr	r6, [r6, #4]
 80137c4:	e7b9      	b.n	801373a <_malloc_r+0x46>
 80137c6:	230c      	movs	r3, #12
 80137c8:	603b      	str	r3, [r7, #0]
 80137ca:	4638      	mov	r0, r7
 80137cc:	f000 fece 	bl	801456c <__malloc_unlock>
 80137d0:	e7a1      	b.n	8013716 <_malloc_r+0x22>
 80137d2:	6025      	str	r5, [r4, #0]
 80137d4:	e7de      	b.n	8013794 <_malloc_r+0xa0>
 80137d6:	bf00      	nop
 80137d8:	20009018 	.word	0x20009018

080137dc <__ssputs_r>:
 80137dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137e0:	688e      	ldr	r6, [r1, #8]
 80137e2:	429e      	cmp	r6, r3
 80137e4:	4682      	mov	sl, r0
 80137e6:	460c      	mov	r4, r1
 80137e8:	4690      	mov	r8, r2
 80137ea:	461f      	mov	r7, r3
 80137ec:	d838      	bhi.n	8013860 <__ssputs_r+0x84>
 80137ee:	898a      	ldrh	r2, [r1, #12]
 80137f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80137f4:	d032      	beq.n	801385c <__ssputs_r+0x80>
 80137f6:	6825      	ldr	r5, [r4, #0]
 80137f8:	6909      	ldr	r1, [r1, #16]
 80137fa:	eba5 0901 	sub.w	r9, r5, r1
 80137fe:	6965      	ldr	r5, [r4, #20]
 8013800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013804:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013808:	3301      	adds	r3, #1
 801380a:	444b      	add	r3, r9
 801380c:	106d      	asrs	r5, r5, #1
 801380e:	429d      	cmp	r5, r3
 8013810:	bf38      	it	cc
 8013812:	461d      	movcc	r5, r3
 8013814:	0553      	lsls	r3, r2, #21
 8013816:	d531      	bpl.n	801387c <__ssputs_r+0xa0>
 8013818:	4629      	mov	r1, r5
 801381a:	f7ff ff6b 	bl	80136f4 <_malloc_r>
 801381e:	4606      	mov	r6, r0
 8013820:	b950      	cbnz	r0, 8013838 <__ssputs_r+0x5c>
 8013822:	230c      	movs	r3, #12
 8013824:	f8ca 3000 	str.w	r3, [sl]
 8013828:	89a3      	ldrh	r3, [r4, #12]
 801382a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801382e:	81a3      	strh	r3, [r4, #12]
 8013830:	f04f 30ff 	mov.w	r0, #4294967295
 8013834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013838:	6921      	ldr	r1, [r4, #16]
 801383a:	464a      	mov	r2, r9
 801383c:	f7ff fd18 	bl	8013270 <memcpy>
 8013840:	89a3      	ldrh	r3, [r4, #12]
 8013842:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801384a:	81a3      	strh	r3, [r4, #12]
 801384c:	6126      	str	r6, [r4, #16]
 801384e:	6165      	str	r5, [r4, #20]
 8013850:	444e      	add	r6, r9
 8013852:	eba5 0509 	sub.w	r5, r5, r9
 8013856:	6026      	str	r6, [r4, #0]
 8013858:	60a5      	str	r5, [r4, #8]
 801385a:	463e      	mov	r6, r7
 801385c:	42be      	cmp	r6, r7
 801385e:	d900      	bls.n	8013862 <__ssputs_r+0x86>
 8013860:	463e      	mov	r6, r7
 8013862:	6820      	ldr	r0, [r4, #0]
 8013864:	4632      	mov	r2, r6
 8013866:	4641      	mov	r1, r8
 8013868:	f7ff fd10 	bl	801328c <memmove>
 801386c:	68a3      	ldr	r3, [r4, #8]
 801386e:	1b9b      	subs	r3, r3, r6
 8013870:	60a3      	str	r3, [r4, #8]
 8013872:	6823      	ldr	r3, [r4, #0]
 8013874:	4433      	add	r3, r6
 8013876:	6023      	str	r3, [r4, #0]
 8013878:	2000      	movs	r0, #0
 801387a:	e7db      	b.n	8013834 <__ssputs_r+0x58>
 801387c:	462a      	mov	r2, r5
 801387e:	f000 fe7b 	bl	8014578 <_realloc_r>
 8013882:	4606      	mov	r6, r0
 8013884:	2800      	cmp	r0, #0
 8013886:	d1e1      	bne.n	801384c <__ssputs_r+0x70>
 8013888:	6921      	ldr	r1, [r4, #16]
 801388a:	4650      	mov	r0, sl
 801388c:	f7ff fec6 	bl	801361c <_free_r>
 8013890:	e7c7      	b.n	8013822 <__ssputs_r+0x46>
	...

08013894 <_svfiprintf_r>:
 8013894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013898:	4698      	mov	r8, r3
 801389a:	898b      	ldrh	r3, [r1, #12]
 801389c:	061b      	lsls	r3, r3, #24
 801389e:	b09d      	sub	sp, #116	; 0x74
 80138a0:	4607      	mov	r7, r0
 80138a2:	460d      	mov	r5, r1
 80138a4:	4614      	mov	r4, r2
 80138a6:	d50e      	bpl.n	80138c6 <_svfiprintf_r+0x32>
 80138a8:	690b      	ldr	r3, [r1, #16]
 80138aa:	b963      	cbnz	r3, 80138c6 <_svfiprintf_r+0x32>
 80138ac:	2140      	movs	r1, #64	; 0x40
 80138ae:	f7ff ff21 	bl	80136f4 <_malloc_r>
 80138b2:	6028      	str	r0, [r5, #0]
 80138b4:	6128      	str	r0, [r5, #16]
 80138b6:	b920      	cbnz	r0, 80138c2 <_svfiprintf_r+0x2e>
 80138b8:	230c      	movs	r3, #12
 80138ba:	603b      	str	r3, [r7, #0]
 80138bc:	f04f 30ff 	mov.w	r0, #4294967295
 80138c0:	e0d1      	b.n	8013a66 <_svfiprintf_r+0x1d2>
 80138c2:	2340      	movs	r3, #64	; 0x40
 80138c4:	616b      	str	r3, [r5, #20]
 80138c6:	2300      	movs	r3, #0
 80138c8:	9309      	str	r3, [sp, #36]	; 0x24
 80138ca:	2320      	movs	r3, #32
 80138cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80138d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80138d4:	2330      	movs	r3, #48	; 0x30
 80138d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013a80 <_svfiprintf_r+0x1ec>
 80138da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80138de:	f04f 0901 	mov.w	r9, #1
 80138e2:	4623      	mov	r3, r4
 80138e4:	469a      	mov	sl, r3
 80138e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138ea:	b10a      	cbz	r2, 80138f0 <_svfiprintf_r+0x5c>
 80138ec:	2a25      	cmp	r2, #37	; 0x25
 80138ee:	d1f9      	bne.n	80138e4 <_svfiprintf_r+0x50>
 80138f0:	ebba 0b04 	subs.w	fp, sl, r4
 80138f4:	d00b      	beq.n	801390e <_svfiprintf_r+0x7a>
 80138f6:	465b      	mov	r3, fp
 80138f8:	4622      	mov	r2, r4
 80138fa:	4629      	mov	r1, r5
 80138fc:	4638      	mov	r0, r7
 80138fe:	f7ff ff6d 	bl	80137dc <__ssputs_r>
 8013902:	3001      	adds	r0, #1
 8013904:	f000 80aa 	beq.w	8013a5c <_svfiprintf_r+0x1c8>
 8013908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801390a:	445a      	add	r2, fp
 801390c:	9209      	str	r2, [sp, #36]	; 0x24
 801390e:	f89a 3000 	ldrb.w	r3, [sl]
 8013912:	2b00      	cmp	r3, #0
 8013914:	f000 80a2 	beq.w	8013a5c <_svfiprintf_r+0x1c8>
 8013918:	2300      	movs	r3, #0
 801391a:	f04f 32ff 	mov.w	r2, #4294967295
 801391e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013922:	f10a 0a01 	add.w	sl, sl, #1
 8013926:	9304      	str	r3, [sp, #16]
 8013928:	9307      	str	r3, [sp, #28]
 801392a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801392e:	931a      	str	r3, [sp, #104]	; 0x68
 8013930:	4654      	mov	r4, sl
 8013932:	2205      	movs	r2, #5
 8013934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013938:	4851      	ldr	r0, [pc, #324]	; (8013a80 <_svfiprintf_r+0x1ec>)
 801393a:	f7ec fc59 	bl	80001f0 <memchr>
 801393e:	9a04      	ldr	r2, [sp, #16]
 8013940:	b9d8      	cbnz	r0, 801397a <_svfiprintf_r+0xe6>
 8013942:	06d0      	lsls	r0, r2, #27
 8013944:	bf44      	itt	mi
 8013946:	2320      	movmi	r3, #32
 8013948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801394c:	0711      	lsls	r1, r2, #28
 801394e:	bf44      	itt	mi
 8013950:	232b      	movmi	r3, #43	; 0x2b
 8013952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013956:	f89a 3000 	ldrb.w	r3, [sl]
 801395a:	2b2a      	cmp	r3, #42	; 0x2a
 801395c:	d015      	beq.n	801398a <_svfiprintf_r+0xf6>
 801395e:	9a07      	ldr	r2, [sp, #28]
 8013960:	4654      	mov	r4, sl
 8013962:	2000      	movs	r0, #0
 8013964:	f04f 0c0a 	mov.w	ip, #10
 8013968:	4621      	mov	r1, r4
 801396a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801396e:	3b30      	subs	r3, #48	; 0x30
 8013970:	2b09      	cmp	r3, #9
 8013972:	d94e      	bls.n	8013a12 <_svfiprintf_r+0x17e>
 8013974:	b1b0      	cbz	r0, 80139a4 <_svfiprintf_r+0x110>
 8013976:	9207      	str	r2, [sp, #28]
 8013978:	e014      	b.n	80139a4 <_svfiprintf_r+0x110>
 801397a:	eba0 0308 	sub.w	r3, r0, r8
 801397e:	fa09 f303 	lsl.w	r3, r9, r3
 8013982:	4313      	orrs	r3, r2
 8013984:	9304      	str	r3, [sp, #16]
 8013986:	46a2      	mov	sl, r4
 8013988:	e7d2      	b.n	8013930 <_svfiprintf_r+0x9c>
 801398a:	9b03      	ldr	r3, [sp, #12]
 801398c:	1d19      	adds	r1, r3, #4
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	9103      	str	r1, [sp, #12]
 8013992:	2b00      	cmp	r3, #0
 8013994:	bfbb      	ittet	lt
 8013996:	425b      	neglt	r3, r3
 8013998:	f042 0202 	orrlt.w	r2, r2, #2
 801399c:	9307      	strge	r3, [sp, #28]
 801399e:	9307      	strlt	r3, [sp, #28]
 80139a0:	bfb8      	it	lt
 80139a2:	9204      	strlt	r2, [sp, #16]
 80139a4:	7823      	ldrb	r3, [r4, #0]
 80139a6:	2b2e      	cmp	r3, #46	; 0x2e
 80139a8:	d10c      	bne.n	80139c4 <_svfiprintf_r+0x130>
 80139aa:	7863      	ldrb	r3, [r4, #1]
 80139ac:	2b2a      	cmp	r3, #42	; 0x2a
 80139ae:	d135      	bne.n	8013a1c <_svfiprintf_r+0x188>
 80139b0:	9b03      	ldr	r3, [sp, #12]
 80139b2:	1d1a      	adds	r2, r3, #4
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	9203      	str	r2, [sp, #12]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	bfb8      	it	lt
 80139bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80139c0:	3402      	adds	r4, #2
 80139c2:	9305      	str	r3, [sp, #20]
 80139c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013a90 <_svfiprintf_r+0x1fc>
 80139c8:	7821      	ldrb	r1, [r4, #0]
 80139ca:	2203      	movs	r2, #3
 80139cc:	4650      	mov	r0, sl
 80139ce:	f7ec fc0f 	bl	80001f0 <memchr>
 80139d2:	b140      	cbz	r0, 80139e6 <_svfiprintf_r+0x152>
 80139d4:	2340      	movs	r3, #64	; 0x40
 80139d6:	eba0 000a 	sub.w	r0, r0, sl
 80139da:	fa03 f000 	lsl.w	r0, r3, r0
 80139de:	9b04      	ldr	r3, [sp, #16]
 80139e0:	4303      	orrs	r3, r0
 80139e2:	3401      	adds	r4, #1
 80139e4:	9304      	str	r3, [sp, #16]
 80139e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139ea:	4826      	ldr	r0, [pc, #152]	; (8013a84 <_svfiprintf_r+0x1f0>)
 80139ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80139f0:	2206      	movs	r2, #6
 80139f2:	f7ec fbfd 	bl	80001f0 <memchr>
 80139f6:	2800      	cmp	r0, #0
 80139f8:	d038      	beq.n	8013a6c <_svfiprintf_r+0x1d8>
 80139fa:	4b23      	ldr	r3, [pc, #140]	; (8013a88 <_svfiprintf_r+0x1f4>)
 80139fc:	bb1b      	cbnz	r3, 8013a46 <_svfiprintf_r+0x1b2>
 80139fe:	9b03      	ldr	r3, [sp, #12]
 8013a00:	3307      	adds	r3, #7
 8013a02:	f023 0307 	bic.w	r3, r3, #7
 8013a06:	3308      	adds	r3, #8
 8013a08:	9303      	str	r3, [sp, #12]
 8013a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a0c:	4433      	add	r3, r6
 8013a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8013a10:	e767      	b.n	80138e2 <_svfiprintf_r+0x4e>
 8013a12:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a16:	460c      	mov	r4, r1
 8013a18:	2001      	movs	r0, #1
 8013a1a:	e7a5      	b.n	8013968 <_svfiprintf_r+0xd4>
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	3401      	adds	r4, #1
 8013a20:	9305      	str	r3, [sp, #20]
 8013a22:	4619      	mov	r1, r3
 8013a24:	f04f 0c0a 	mov.w	ip, #10
 8013a28:	4620      	mov	r0, r4
 8013a2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a2e:	3a30      	subs	r2, #48	; 0x30
 8013a30:	2a09      	cmp	r2, #9
 8013a32:	d903      	bls.n	8013a3c <_svfiprintf_r+0x1a8>
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d0c5      	beq.n	80139c4 <_svfiprintf_r+0x130>
 8013a38:	9105      	str	r1, [sp, #20]
 8013a3a:	e7c3      	b.n	80139c4 <_svfiprintf_r+0x130>
 8013a3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a40:	4604      	mov	r4, r0
 8013a42:	2301      	movs	r3, #1
 8013a44:	e7f0      	b.n	8013a28 <_svfiprintf_r+0x194>
 8013a46:	ab03      	add	r3, sp, #12
 8013a48:	9300      	str	r3, [sp, #0]
 8013a4a:	462a      	mov	r2, r5
 8013a4c:	4b0f      	ldr	r3, [pc, #60]	; (8013a8c <_svfiprintf_r+0x1f8>)
 8013a4e:	a904      	add	r1, sp, #16
 8013a50:	4638      	mov	r0, r7
 8013a52:	f3af 8000 	nop.w
 8013a56:	1c42      	adds	r2, r0, #1
 8013a58:	4606      	mov	r6, r0
 8013a5a:	d1d6      	bne.n	8013a0a <_svfiprintf_r+0x176>
 8013a5c:	89ab      	ldrh	r3, [r5, #12]
 8013a5e:	065b      	lsls	r3, r3, #25
 8013a60:	f53f af2c 	bmi.w	80138bc <_svfiprintf_r+0x28>
 8013a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a66:	b01d      	add	sp, #116	; 0x74
 8013a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a6c:	ab03      	add	r3, sp, #12
 8013a6e:	9300      	str	r3, [sp, #0]
 8013a70:	462a      	mov	r2, r5
 8013a72:	4b06      	ldr	r3, [pc, #24]	; (8013a8c <_svfiprintf_r+0x1f8>)
 8013a74:	a904      	add	r1, sp, #16
 8013a76:	4638      	mov	r0, r7
 8013a78:	f000 f9d4 	bl	8013e24 <_printf_i>
 8013a7c:	e7eb      	b.n	8013a56 <_svfiprintf_r+0x1c2>
 8013a7e:	bf00      	nop
 8013a80:	0801730c 	.word	0x0801730c
 8013a84:	08017316 	.word	0x08017316
 8013a88:	00000000 	.word	0x00000000
 8013a8c:	080137dd 	.word	0x080137dd
 8013a90:	08017312 	.word	0x08017312

08013a94 <__sfputc_r>:
 8013a94:	6893      	ldr	r3, [r2, #8]
 8013a96:	3b01      	subs	r3, #1
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	b410      	push	{r4}
 8013a9c:	6093      	str	r3, [r2, #8]
 8013a9e:	da08      	bge.n	8013ab2 <__sfputc_r+0x1e>
 8013aa0:	6994      	ldr	r4, [r2, #24]
 8013aa2:	42a3      	cmp	r3, r4
 8013aa4:	db01      	blt.n	8013aaa <__sfputc_r+0x16>
 8013aa6:	290a      	cmp	r1, #10
 8013aa8:	d103      	bne.n	8013ab2 <__sfputc_r+0x1e>
 8013aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013aae:	f000 bb33 	b.w	8014118 <__swbuf_r>
 8013ab2:	6813      	ldr	r3, [r2, #0]
 8013ab4:	1c58      	adds	r0, r3, #1
 8013ab6:	6010      	str	r0, [r2, #0]
 8013ab8:	7019      	strb	r1, [r3, #0]
 8013aba:	4608      	mov	r0, r1
 8013abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ac0:	4770      	bx	lr

08013ac2 <__sfputs_r>:
 8013ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ac4:	4606      	mov	r6, r0
 8013ac6:	460f      	mov	r7, r1
 8013ac8:	4614      	mov	r4, r2
 8013aca:	18d5      	adds	r5, r2, r3
 8013acc:	42ac      	cmp	r4, r5
 8013ace:	d101      	bne.n	8013ad4 <__sfputs_r+0x12>
 8013ad0:	2000      	movs	r0, #0
 8013ad2:	e007      	b.n	8013ae4 <__sfputs_r+0x22>
 8013ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ad8:	463a      	mov	r2, r7
 8013ada:	4630      	mov	r0, r6
 8013adc:	f7ff ffda 	bl	8013a94 <__sfputc_r>
 8013ae0:	1c43      	adds	r3, r0, #1
 8013ae2:	d1f3      	bne.n	8013acc <__sfputs_r+0xa>
 8013ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013ae8 <_vfiprintf_r>:
 8013ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aec:	460d      	mov	r5, r1
 8013aee:	b09d      	sub	sp, #116	; 0x74
 8013af0:	4614      	mov	r4, r2
 8013af2:	4698      	mov	r8, r3
 8013af4:	4606      	mov	r6, r0
 8013af6:	b118      	cbz	r0, 8013b00 <_vfiprintf_r+0x18>
 8013af8:	6983      	ldr	r3, [r0, #24]
 8013afa:	b90b      	cbnz	r3, 8013b00 <_vfiprintf_r+0x18>
 8013afc:	f7ff fcd4 	bl	80134a8 <__sinit>
 8013b00:	4b89      	ldr	r3, [pc, #548]	; (8013d28 <_vfiprintf_r+0x240>)
 8013b02:	429d      	cmp	r5, r3
 8013b04:	d11b      	bne.n	8013b3e <_vfiprintf_r+0x56>
 8013b06:	6875      	ldr	r5, [r6, #4]
 8013b08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b0a:	07d9      	lsls	r1, r3, #31
 8013b0c:	d405      	bmi.n	8013b1a <_vfiprintf_r+0x32>
 8013b0e:	89ab      	ldrh	r3, [r5, #12]
 8013b10:	059a      	lsls	r2, r3, #22
 8013b12:	d402      	bmi.n	8013b1a <_vfiprintf_r+0x32>
 8013b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b16:	f7ff fd77 	bl	8013608 <__retarget_lock_acquire_recursive>
 8013b1a:	89ab      	ldrh	r3, [r5, #12]
 8013b1c:	071b      	lsls	r3, r3, #28
 8013b1e:	d501      	bpl.n	8013b24 <_vfiprintf_r+0x3c>
 8013b20:	692b      	ldr	r3, [r5, #16]
 8013b22:	b9eb      	cbnz	r3, 8013b60 <_vfiprintf_r+0x78>
 8013b24:	4629      	mov	r1, r5
 8013b26:	4630      	mov	r0, r6
 8013b28:	f000 fb5a 	bl	80141e0 <__swsetup_r>
 8013b2c:	b1c0      	cbz	r0, 8013b60 <_vfiprintf_r+0x78>
 8013b2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b30:	07dc      	lsls	r4, r3, #31
 8013b32:	d50e      	bpl.n	8013b52 <_vfiprintf_r+0x6a>
 8013b34:	f04f 30ff 	mov.w	r0, #4294967295
 8013b38:	b01d      	add	sp, #116	; 0x74
 8013b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b3e:	4b7b      	ldr	r3, [pc, #492]	; (8013d2c <_vfiprintf_r+0x244>)
 8013b40:	429d      	cmp	r5, r3
 8013b42:	d101      	bne.n	8013b48 <_vfiprintf_r+0x60>
 8013b44:	68b5      	ldr	r5, [r6, #8]
 8013b46:	e7df      	b.n	8013b08 <_vfiprintf_r+0x20>
 8013b48:	4b79      	ldr	r3, [pc, #484]	; (8013d30 <_vfiprintf_r+0x248>)
 8013b4a:	429d      	cmp	r5, r3
 8013b4c:	bf08      	it	eq
 8013b4e:	68f5      	ldreq	r5, [r6, #12]
 8013b50:	e7da      	b.n	8013b08 <_vfiprintf_r+0x20>
 8013b52:	89ab      	ldrh	r3, [r5, #12]
 8013b54:	0598      	lsls	r0, r3, #22
 8013b56:	d4ed      	bmi.n	8013b34 <_vfiprintf_r+0x4c>
 8013b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b5a:	f7ff fd56 	bl	801360a <__retarget_lock_release_recursive>
 8013b5e:	e7e9      	b.n	8013b34 <_vfiprintf_r+0x4c>
 8013b60:	2300      	movs	r3, #0
 8013b62:	9309      	str	r3, [sp, #36]	; 0x24
 8013b64:	2320      	movs	r3, #32
 8013b66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b6e:	2330      	movs	r3, #48	; 0x30
 8013b70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013d34 <_vfiprintf_r+0x24c>
 8013b74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b78:	f04f 0901 	mov.w	r9, #1
 8013b7c:	4623      	mov	r3, r4
 8013b7e:	469a      	mov	sl, r3
 8013b80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b84:	b10a      	cbz	r2, 8013b8a <_vfiprintf_r+0xa2>
 8013b86:	2a25      	cmp	r2, #37	; 0x25
 8013b88:	d1f9      	bne.n	8013b7e <_vfiprintf_r+0x96>
 8013b8a:	ebba 0b04 	subs.w	fp, sl, r4
 8013b8e:	d00b      	beq.n	8013ba8 <_vfiprintf_r+0xc0>
 8013b90:	465b      	mov	r3, fp
 8013b92:	4622      	mov	r2, r4
 8013b94:	4629      	mov	r1, r5
 8013b96:	4630      	mov	r0, r6
 8013b98:	f7ff ff93 	bl	8013ac2 <__sfputs_r>
 8013b9c:	3001      	adds	r0, #1
 8013b9e:	f000 80aa 	beq.w	8013cf6 <_vfiprintf_r+0x20e>
 8013ba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ba4:	445a      	add	r2, fp
 8013ba6:	9209      	str	r2, [sp, #36]	; 0x24
 8013ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	f000 80a2 	beq.w	8013cf6 <_vfiprintf_r+0x20e>
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8013bb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013bbc:	f10a 0a01 	add.w	sl, sl, #1
 8013bc0:	9304      	str	r3, [sp, #16]
 8013bc2:	9307      	str	r3, [sp, #28]
 8013bc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013bc8:	931a      	str	r3, [sp, #104]	; 0x68
 8013bca:	4654      	mov	r4, sl
 8013bcc:	2205      	movs	r2, #5
 8013bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bd2:	4858      	ldr	r0, [pc, #352]	; (8013d34 <_vfiprintf_r+0x24c>)
 8013bd4:	f7ec fb0c 	bl	80001f0 <memchr>
 8013bd8:	9a04      	ldr	r2, [sp, #16]
 8013bda:	b9d8      	cbnz	r0, 8013c14 <_vfiprintf_r+0x12c>
 8013bdc:	06d1      	lsls	r1, r2, #27
 8013bde:	bf44      	itt	mi
 8013be0:	2320      	movmi	r3, #32
 8013be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013be6:	0713      	lsls	r3, r2, #28
 8013be8:	bf44      	itt	mi
 8013bea:	232b      	movmi	r3, #43	; 0x2b
 8013bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8013bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8013bf6:	d015      	beq.n	8013c24 <_vfiprintf_r+0x13c>
 8013bf8:	9a07      	ldr	r2, [sp, #28]
 8013bfa:	4654      	mov	r4, sl
 8013bfc:	2000      	movs	r0, #0
 8013bfe:	f04f 0c0a 	mov.w	ip, #10
 8013c02:	4621      	mov	r1, r4
 8013c04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c08:	3b30      	subs	r3, #48	; 0x30
 8013c0a:	2b09      	cmp	r3, #9
 8013c0c:	d94e      	bls.n	8013cac <_vfiprintf_r+0x1c4>
 8013c0e:	b1b0      	cbz	r0, 8013c3e <_vfiprintf_r+0x156>
 8013c10:	9207      	str	r2, [sp, #28]
 8013c12:	e014      	b.n	8013c3e <_vfiprintf_r+0x156>
 8013c14:	eba0 0308 	sub.w	r3, r0, r8
 8013c18:	fa09 f303 	lsl.w	r3, r9, r3
 8013c1c:	4313      	orrs	r3, r2
 8013c1e:	9304      	str	r3, [sp, #16]
 8013c20:	46a2      	mov	sl, r4
 8013c22:	e7d2      	b.n	8013bca <_vfiprintf_r+0xe2>
 8013c24:	9b03      	ldr	r3, [sp, #12]
 8013c26:	1d19      	adds	r1, r3, #4
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	9103      	str	r1, [sp, #12]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	bfbb      	ittet	lt
 8013c30:	425b      	neglt	r3, r3
 8013c32:	f042 0202 	orrlt.w	r2, r2, #2
 8013c36:	9307      	strge	r3, [sp, #28]
 8013c38:	9307      	strlt	r3, [sp, #28]
 8013c3a:	bfb8      	it	lt
 8013c3c:	9204      	strlt	r2, [sp, #16]
 8013c3e:	7823      	ldrb	r3, [r4, #0]
 8013c40:	2b2e      	cmp	r3, #46	; 0x2e
 8013c42:	d10c      	bne.n	8013c5e <_vfiprintf_r+0x176>
 8013c44:	7863      	ldrb	r3, [r4, #1]
 8013c46:	2b2a      	cmp	r3, #42	; 0x2a
 8013c48:	d135      	bne.n	8013cb6 <_vfiprintf_r+0x1ce>
 8013c4a:	9b03      	ldr	r3, [sp, #12]
 8013c4c:	1d1a      	adds	r2, r3, #4
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	9203      	str	r2, [sp, #12]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	bfb8      	it	lt
 8013c56:	f04f 33ff 	movlt.w	r3, #4294967295
 8013c5a:	3402      	adds	r4, #2
 8013c5c:	9305      	str	r3, [sp, #20]
 8013c5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013d44 <_vfiprintf_r+0x25c>
 8013c62:	7821      	ldrb	r1, [r4, #0]
 8013c64:	2203      	movs	r2, #3
 8013c66:	4650      	mov	r0, sl
 8013c68:	f7ec fac2 	bl	80001f0 <memchr>
 8013c6c:	b140      	cbz	r0, 8013c80 <_vfiprintf_r+0x198>
 8013c6e:	2340      	movs	r3, #64	; 0x40
 8013c70:	eba0 000a 	sub.w	r0, r0, sl
 8013c74:	fa03 f000 	lsl.w	r0, r3, r0
 8013c78:	9b04      	ldr	r3, [sp, #16]
 8013c7a:	4303      	orrs	r3, r0
 8013c7c:	3401      	adds	r4, #1
 8013c7e:	9304      	str	r3, [sp, #16]
 8013c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c84:	482c      	ldr	r0, [pc, #176]	; (8013d38 <_vfiprintf_r+0x250>)
 8013c86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c8a:	2206      	movs	r2, #6
 8013c8c:	f7ec fab0 	bl	80001f0 <memchr>
 8013c90:	2800      	cmp	r0, #0
 8013c92:	d03f      	beq.n	8013d14 <_vfiprintf_r+0x22c>
 8013c94:	4b29      	ldr	r3, [pc, #164]	; (8013d3c <_vfiprintf_r+0x254>)
 8013c96:	bb1b      	cbnz	r3, 8013ce0 <_vfiprintf_r+0x1f8>
 8013c98:	9b03      	ldr	r3, [sp, #12]
 8013c9a:	3307      	adds	r3, #7
 8013c9c:	f023 0307 	bic.w	r3, r3, #7
 8013ca0:	3308      	adds	r3, #8
 8013ca2:	9303      	str	r3, [sp, #12]
 8013ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ca6:	443b      	add	r3, r7
 8013ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8013caa:	e767      	b.n	8013b7c <_vfiprintf_r+0x94>
 8013cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8013cb0:	460c      	mov	r4, r1
 8013cb2:	2001      	movs	r0, #1
 8013cb4:	e7a5      	b.n	8013c02 <_vfiprintf_r+0x11a>
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	3401      	adds	r4, #1
 8013cba:	9305      	str	r3, [sp, #20]
 8013cbc:	4619      	mov	r1, r3
 8013cbe:	f04f 0c0a 	mov.w	ip, #10
 8013cc2:	4620      	mov	r0, r4
 8013cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013cc8:	3a30      	subs	r2, #48	; 0x30
 8013cca:	2a09      	cmp	r2, #9
 8013ccc:	d903      	bls.n	8013cd6 <_vfiprintf_r+0x1ee>
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d0c5      	beq.n	8013c5e <_vfiprintf_r+0x176>
 8013cd2:	9105      	str	r1, [sp, #20]
 8013cd4:	e7c3      	b.n	8013c5e <_vfiprintf_r+0x176>
 8013cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8013cda:	4604      	mov	r4, r0
 8013cdc:	2301      	movs	r3, #1
 8013cde:	e7f0      	b.n	8013cc2 <_vfiprintf_r+0x1da>
 8013ce0:	ab03      	add	r3, sp, #12
 8013ce2:	9300      	str	r3, [sp, #0]
 8013ce4:	462a      	mov	r2, r5
 8013ce6:	4b16      	ldr	r3, [pc, #88]	; (8013d40 <_vfiprintf_r+0x258>)
 8013ce8:	a904      	add	r1, sp, #16
 8013cea:	4630      	mov	r0, r6
 8013cec:	f3af 8000 	nop.w
 8013cf0:	4607      	mov	r7, r0
 8013cf2:	1c78      	adds	r0, r7, #1
 8013cf4:	d1d6      	bne.n	8013ca4 <_vfiprintf_r+0x1bc>
 8013cf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013cf8:	07d9      	lsls	r1, r3, #31
 8013cfa:	d405      	bmi.n	8013d08 <_vfiprintf_r+0x220>
 8013cfc:	89ab      	ldrh	r3, [r5, #12]
 8013cfe:	059a      	lsls	r2, r3, #22
 8013d00:	d402      	bmi.n	8013d08 <_vfiprintf_r+0x220>
 8013d02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d04:	f7ff fc81 	bl	801360a <__retarget_lock_release_recursive>
 8013d08:	89ab      	ldrh	r3, [r5, #12]
 8013d0a:	065b      	lsls	r3, r3, #25
 8013d0c:	f53f af12 	bmi.w	8013b34 <_vfiprintf_r+0x4c>
 8013d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d12:	e711      	b.n	8013b38 <_vfiprintf_r+0x50>
 8013d14:	ab03      	add	r3, sp, #12
 8013d16:	9300      	str	r3, [sp, #0]
 8013d18:	462a      	mov	r2, r5
 8013d1a:	4b09      	ldr	r3, [pc, #36]	; (8013d40 <_vfiprintf_r+0x258>)
 8013d1c:	a904      	add	r1, sp, #16
 8013d1e:	4630      	mov	r0, r6
 8013d20:	f000 f880 	bl	8013e24 <_printf_i>
 8013d24:	e7e4      	b.n	8013cf0 <_vfiprintf_r+0x208>
 8013d26:	bf00      	nop
 8013d28:	080172cc 	.word	0x080172cc
 8013d2c:	080172ec 	.word	0x080172ec
 8013d30:	080172ac 	.word	0x080172ac
 8013d34:	0801730c 	.word	0x0801730c
 8013d38:	08017316 	.word	0x08017316
 8013d3c:	00000000 	.word	0x00000000
 8013d40:	08013ac3 	.word	0x08013ac3
 8013d44:	08017312 	.word	0x08017312

08013d48 <_printf_common>:
 8013d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d4c:	4616      	mov	r6, r2
 8013d4e:	4699      	mov	r9, r3
 8013d50:	688a      	ldr	r2, [r1, #8]
 8013d52:	690b      	ldr	r3, [r1, #16]
 8013d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013d58:	4293      	cmp	r3, r2
 8013d5a:	bfb8      	it	lt
 8013d5c:	4613      	movlt	r3, r2
 8013d5e:	6033      	str	r3, [r6, #0]
 8013d60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013d64:	4607      	mov	r7, r0
 8013d66:	460c      	mov	r4, r1
 8013d68:	b10a      	cbz	r2, 8013d6e <_printf_common+0x26>
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	6033      	str	r3, [r6, #0]
 8013d6e:	6823      	ldr	r3, [r4, #0]
 8013d70:	0699      	lsls	r1, r3, #26
 8013d72:	bf42      	ittt	mi
 8013d74:	6833      	ldrmi	r3, [r6, #0]
 8013d76:	3302      	addmi	r3, #2
 8013d78:	6033      	strmi	r3, [r6, #0]
 8013d7a:	6825      	ldr	r5, [r4, #0]
 8013d7c:	f015 0506 	ands.w	r5, r5, #6
 8013d80:	d106      	bne.n	8013d90 <_printf_common+0x48>
 8013d82:	f104 0a19 	add.w	sl, r4, #25
 8013d86:	68e3      	ldr	r3, [r4, #12]
 8013d88:	6832      	ldr	r2, [r6, #0]
 8013d8a:	1a9b      	subs	r3, r3, r2
 8013d8c:	42ab      	cmp	r3, r5
 8013d8e:	dc26      	bgt.n	8013dde <_printf_common+0x96>
 8013d90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013d94:	1e13      	subs	r3, r2, #0
 8013d96:	6822      	ldr	r2, [r4, #0]
 8013d98:	bf18      	it	ne
 8013d9a:	2301      	movne	r3, #1
 8013d9c:	0692      	lsls	r2, r2, #26
 8013d9e:	d42b      	bmi.n	8013df8 <_printf_common+0xb0>
 8013da0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013da4:	4649      	mov	r1, r9
 8013da6:	4638      	mov	r0, r7
 8013da8:	47c0      	blx	r8
 8013daa:	3001      	adds	r0, #1
 8013dac:	d01e      	beq.n	8013dec <_printf_common+0xa4>
 8013dae:	6823      	ldr	r3, [r4, #0]
 8013db0:	68e5      	ldr	r5, [r4, #12]
 8013db2:	6832      	ldr	r2, [r6, #0]
 8013db4:	f003 0306 	and.w	r3, r3, #6
 8013db8:	2b04      	cmp	r3, #4
 8013dba:	bf08      	it	eq
 8013dbc:	1aad      	subeq	r5, r5, r2
 8013dbe:	68a3      	ldr	r3, [r4, #8]
 8013dc0:	6922      	ldr	r2, [r4, #16]
 8013dc2:	bf0c      	ite	eq
 8013dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013dc8:	2500      	movne	r5, #0
 8013dca:	4293      	cmp	r3, r2
 8013dcc:	bfc4      	itt	gt
 8013dce:	1a9b      	subgt	r3, r3, r2
 8013dd0:	18ed      	addgt	r5, r5, r3
 8013dd2:	2600      	movs	r6, #0
 8013dd4:	341a      	adds	r4, #26
 8013dd6:	42b5      	cmp	r5, r6
 8013dd8:	d11a      	bne.n	8013e10 <_printf_common+0xc8>
 8013dda:	2000      	movs	r0, #0
 8013ddc:	e008      	b.n	8013df0 <_printf_common+0xa8>
 8013dde:	2301      	movs	r3, #1
 8013de0:	4652      	mov	r2, sl
 8013de2:	4649      	mov	r1, r9
 8013de4:	4638      	mov	r0, r7
 8013de6:	47c0      	blx	r8
 8013de8:	3001      	adds	r0, #1
 8013dea:	d103      	bne.n	8013df4 <_printf_common+0xac>
 8013dec:	f04f 30ff 	mov.w	r0, #4294967295
 8013df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013df4:	3501      	adds	r5, #1
 8013df6:	e7c6      	b.n	8013d86 <_printf_common+0x3e>
 8013df8:	18e1      	adds	r1, r4, r3
 8013dfa:	1c5a      	adds	r2, r3, #1
 8013dfc:	2030      	movs	r0, #48	; 0x30
 8013dfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013e02:	4422      	add	r2, r4
 8013e04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013e08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013e0c:	3302      	adds	r3, #2
 8013e0e:	e7c7      	b.n	8013da0 <_printf_common+0x58>
 8013e10:	2301      	movs	r3, #1
 8013e12:	4622      	mov	r2, r4
 8013e14:	4649      	mov	r1, r9
 8013e16:	4638      	mov	r0, r7
 8013e18:	47c0      	blx	r8
 8013e1a:	3001      	adds	r0, #1
 8013e1c:	d0e6      	beq.n	8013dec <_printf_common+0xa4>
 8013e1e:	3601      	adds	r6, #1
 8013e20:	e7d9      	b.n	8013dd6 <_printf_common+0x8e>
	...

08013e24 <_printf_i>:
 8013e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e28:	7e0f      	ldrb	r7, [r1, #24]
 8013e2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013e2c:	2f78      	cmp	r7, #120	; 0x78
 8013e2e:	4691      	mov	r9, r2
 8013e30:	4680      	mov	r8, r0
 8013e32:	460c      	mov	r4, r1
 8013e34:	469a      	mov	sl, r3
 8013e36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013e3a:	d807      	bhi.n	8013e4c <_printf_i+0x28>
 8013e3c:	2f62      	cmp	r7, #98	; 0x62
 8013e3e:	d80a      	bhi.n	8013e56 <_printf_i+0x32>
 8013e40:	2f00      	cmp	r7, #0
 8013e42:	f000 80d8 	beq.w	8013ff6 <_printf_i+0x1d2>
 8013e46:	2f58      	cmp	r7, #88	; 0x58
 8013e48:	f000 80a3 	beq.w	8013f92 <_printf_i+0x16e>
 8013e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013e54:	e03a      	b.n	8013ecc <_printf_i+0xa8>
 8013e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013e5a:	2b15      	cmp	r3, #21
 8013e5c:	d8f6      	bhi.n	8013e4c <_printf_i+0x28>
 8013e5e:	a101      	add	r1, pc, #4	; (adr r1, 8013e64 <_printf_i+0x40>)
 8013e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013e64:	08013ebd 	.word	0x08013ebd
 8013e68:	08013ed1 	.word	0x08013ed1
 8013e6c:	08013e4d 	.word	0x08013e4d
 8013e70:	08013e4d 	.word	0x08013e4d
 8013e74:	08013e4d 	.word	0x08013e4d
 8013e78:	08013e4d 	.word	0x08013e4d
 8013e7c:	08013ed1 	.word	0x08013ed1
 8013e80:	08013e4d 	.word	0x08013e4d
 8013e84:	08013e4d 	.word	0x08013e4d
 8013e88:	08013e4d 	.word	0x08013e4d
 8013e8c:	08013e4d 	.word	0x08013e4d
 8013e90:	08013fdd 	.word	0x08013fdd
 8013e94:	08013f01 	.word	0x08013f01
 8013e98:	08013fbf 	.word	0x08013fbf
 8013e9c:	08013e4d 	.word	0x08013e4d
 8013ea0:	08013e4d 	.word	0x08013e4d
 8013ea4:	08013fff 	.word	0x08013fff
 8013ea8:	08013e4d 	.word	0x08013e4d
 8013eac:	08013f01 	.word	0x08013f01
 8013eb0:	08013e4d 	.word	0x08013e4d
 8013eb4:	08013e4d 	.word	0x08013e4d
 8013eb8:	08013fc7 	.word	0x08013fc7
 8013ebc:	682b      	ldr	r3, [r5, #0]
 8013ebe:	1d1a      	adds	r2, r3, #4
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	602a      	str	r2, [r5, #0]
 8013ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013ecc:	2301      	movs	r3, #1
 8013ece:	e0a3      	b.n	8014018 <_printf_i+0x1f4>
 8013ed0:	6820      	ldr	r0, [r4, #0]
 8013ed2:	6829      	ldr	r1, [r5, #0]
 8013ed4:	0606      	lsls	r6, r0, #24
 8013ed6:	f101 0304 	add.w	r3, r1, #4
 8013eda:	d50a      	bpl.n	8013ef2 <_printf_i+0xce>
 8013edc:	680e      	ldr	r6, [r1, #0]
 8013ede:	602b      	str	r3, [r5, #0]
 8013ee0:	2e00      	cmp	r6, #0
 8013ee2:	da03      	bge.n	8013eec <_printf_i+0xc8>
 8013ee4:	232d      	movs	r3, #45	; 0x2d
 8013ee6:	4276      	negs	r6, r6
 8013ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013eec:	485e      	ldr	r0, [pc, #376]	; (8014068 <_printf_i+0x244>)
 8013eee:	230a      	movs	r3, #10
 8013ef0:	e019      	b.n	8013f26 <_printf_i+0x102>
 8013ef2:	680e      	ldr	r6, [r1, #0]
 8013ef4:	602b      	str	r3, [r5, #0]
 8013ef6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013efa:	bf18      	it	ne
 8013efc:	b236      	sxthne	r6, r6
 8013efe:	e7ef      	b.n	8013ee0 <_printf_i+0xbc>
 8013f00:	682b      	ldr	r3, [r5, #0]
 8013f02:	6820      	ldr	r0, [r4, #0]
 8013f04:	1d19      	adds	r1, r3, #4
 8013f06:	6029      	str	r1, [r5, #0]
 8013f08:	0601      	lsls	r1, r0, #24
 8013f0a:	d501      	bpl.n	8013f10 <_printf_i+0xec>
 8013f0c:	681e      	ldr	r6, [r3, #0]
 8013f0e:	e002      	b.n	8013f16 <_printf_i+0xf2>
 8013f10:	0646      	lsls	r6, r0, #25
 8013f12:	d5fb      	bpl.n	8013f0c <_printf_i+0xe8>
 8013f14:	881e      	ldrh	r6, [r3, #0]
 8013f16:	4854      	ldr	r0, [pc, #336]	; (8014068 <_printf_i+0x244>)
 8013f18:	2f6f      	cmp	r7, #111	; 0x6f
 8013f1a:	bf0c      	ite	eq
 8013f1c:	2308      	moveq	r3, #8
 8013f1e:	230a      	movne	r3, #10
 8013f20:	2100      	movs	r1, #0
 8013f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013f26:	6865      	ldr	r5, [r4, #4]
 8013f28:	60a5      	str	r5, [r4, #8]
 8013f2a:	2d00      	cmp	r5, #0
 8013f2c:	bfa2      	ittt	ge
 8013f2e:	6821      	ldrge	r1, [r4, #0]
 8013f30:	f021 0104 	bicge.w	r1, r1, #4
 8013f34:	6021      	strge	r1, [r4, #0]
 8013f36:	b90e      	cbnz	r6, 8013f3c <_printf_i+0x118>
 8013f38:	2d00      	cmp	r5, #0
 8013f3a:	d04d      	beq.n	8013fd8 <_printf_i+0x1b4>
 8013f3c:	4615      	mov	r5, r2
 8013f3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013f42:	fb03 6711 	mls	r7, r3, r1, r6
 8013f46:	5dc7      	ldrb	r7, [r0, r7]
 8013f48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013f4c:	4637      	mov	r7, r6
 8013f4e:	42bb      	cmp	r3, r7
 8013f50:	460e      	mov	r6, r1
 8013f52:	d9f4      	bls.n	8013f3e <_printf_i+0x11a>
 8013f54:	2b08      	cmp	r3, #8
 8013f56:	d10b      	bne.n	8013f70 <_printf_i+0x14c>
 8013f58:	6823      	ldr	r3, [r4, #0]
 8013f5a:	07de      	lsls	r6, r3, #31
 8013f5c:	d508      	bpl.n	8013f70 <_printf_i+0x14c>
 8013f5e:	6923      	ldr	r3, [r4, #16]
 8013f60:	6861      	ldr	r1, [r4, #4]
 8013f62:	4299      	cmp	r1, r3
 8013f64:	bfde      	ittt	le
 8013f66:	2330      	movle	r3, #48	; 0x30
 8013f68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013f6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013f70:	1b52      	subs	r2, r2, r5
 8013f72:	6122      	str	r2, [r4, #16]
 8013f74:	f8cd a000 	str.w	sl, [sp]
 8013f78:	464b      	mov	r3, r9
 8013f7a:	aa03      	add	r2, sp, #12
 8013f7c:	4621      	mov	r1, r4
 8013f7e:	4640      	mov	r0, r8
 8013f80:	f7ff fee2 	bl	8013d48 <_printf_common>
 8013f84:	3001      	adds	r0, #1
 8013f86:	d14c      	bne.n	8014022 <_printf_i+0x1fe>
 8013f88:	f04f 30ff 	mov.w	r0, #4294967295
 8013f8c:	b004      	add	sp, #16
 8013f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f92:	4835      	ldr	r0, [pc, #212]	; (8014068 <_printf_i+0x244>)
 8013f94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013f98:	6829      	ldr	r1, [r5, #0]
 8013f9a:	6823      	ldr	r3, [r4, #0]
 8013f9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013fa0:	6029      	str	r1, [r5, #0]
 8013fa2:	061d      	lsls	r5, r3, #24
 8013fa4:	d514      	bpl.n	8013fd0 <_printf_i+0x1ac>
 8013fa6:	07df      	lsls	r7, r3, #31
 8013fa8:	bf44      	itt	mi
 8013faa:	f043 0320 	orrmi.w	r3, r3, #32
 8013fae:	6023      	strmi	r3, [r4, #0]
 8013fb0:	b91e      	cbnz	r6, 8013fba <_printf_i+0x196>
 8013fb2:	6823      	ldr	r3, [r4, #0]
 8013fb4:	f023 0320 	bic.w	r3, r3, #32
 8013fb8:	6023      	str	r3, [r4, #0]
 8013fba:	2310      	movs	r3, #16
 8013fbc:	e7b0      	b.n	8013f20 <_printf_i+0xfc>
 8013fbe:	6823      	ldr	r3, [r4, #0]
 8013fc0:	f043 0320 	orr.w	r3, r3, #32
 8013fc4:	6023      	str	r3, [r4, #0]
 8013fc6:	2378      	movs	r3, #120	; 0x78
 8013fc8:	4828      	ldr	r0, [pc, #160]	; (801406c <_printf_i+0x248>)
 8013fca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013fce:	e7e3      	b.n	8013f98 <_printf_i+0x174>
 8013fd0:	0659      	lsls	r1, r3, #25
 8013fd2:	bf48      	it	mi
 8013fd4:	b2b6      	uxthmi	r6, r6
 8013fd6:	e7e6      	b.n	8013fa6 <_printf_i+0x182>
 8013fd8:	4615      	mov	r5, r2
 8013fda:	e7bb      	b.n	8013f54 <_printf_i+0x130>
 8013fdc:	682b      	ldr	r3, [r5, #0]
 8013fde:	6826      	ldr	r6, [r4, #0]
 8013fe0:	6961      	ldr	r1, [r4, #20]
 8013fe2:	1d18      	adds	r0, r3, #4
 8013fe4:	6028      	str	r0, [r5, #0]
 8013fe6:	0635      	lsls	r5, r6, #24
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	d501      	bpl.n	8013ff0 <_printf_i+0x1cc>
 8013fec:	6019      	str	r1, [r3, #0]
 8013fee:	e002      	b.n	8013ff6 <_printf_i+0x1d2>
 8013ff0:	0670      	lsls	r0, r6, #25
 8013ff2:	d5fb      	bpl.n	8013fec <_printf_i+0x1c8>
 8013ff4:	8019      	strh	r1, [r3, #0]
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	6123      	str	r3, [r4, #16]
 8013ffa:	4615      	mov	r5, r2
 8013ffc:	e7ba      	b.n	8013f74 <_printf_i+0x150>
 8013ffe:	682b      	ldr	r3, [r5, #0]
 8014000:	1d1a      	adds	r2, r3, #4
 8014002:	602a      	str	r2, [r5, #0]
 8014004:	681d      	ldr	r5, [r3, #0]
 8014006:	6862      	ldr	r2, [r4, #4]
 8014008:	2100      	movs	r1, #0
 801400a:	4628      	mov	r0, r5
 801400c:	f7ec f8f0 	bl	80001f0 <memchr>
 8014010:	b108      	cbz	r0, 8014016 <_printf_i+0x1f2>
 8014012:	1b40      	subs	r0, r0, r5
 8014014:	6060      	str	r0, [r4, #4]
 8014016:	6863      	ldr	r3, [r4, #4]
 8014018:	6123      	str	r3, [r4, #16]
 801401a:	2300      	movs	r3, #0
 801401c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014020:	e7a8      	b.n	8013f74 <_printf_i+0x150>
 8014022:	6923      	ldr	r3, [r4, #16]
 8014024:	462a      	mov	r2, r5
 8014026:	4649      	mov	r1, r9
 8014028:	4640      	mov	r0, r8
 801402a:	47d0      	blx	sl
 801402c:	3001      	adds	r0, #1
 801402e:	d0ab      	beq.n	8013f88 <_printf_i+0x164>
 8014030:	6823      	ldr	r3, [r4, #0]
 8014032:	079b      	lsls	r3, r3, #30
 8014034:	d413      	bmi.n	801405e <_printf_i+0x23a>
 8014036:	68e0      	ldr	r0, [r4, #12]
 8014038:	9b03      	ldr	r3, [sp, #12]
 801403a:	4298      	cmp	r0, r3
 801403c:	bfb8      	it	lt
 801403e:	4618      	movlt	r0, r3
 8014040:	e7a4      	b.n	8013f8c <_printf_i+0x168>
 8014042:	2301      	movs	r3, #1
 8014044:	4632      	mov	r2, r6
 8014046:	4649      	mov	r1, r9
 8014048:	4640      	mov	r0, r8
 801404a:	47d0      	blx	sl
 801404c:	3001      	adds	r0, #1
 801404e:	d09b      	beq.n	8013f88 <_printf_i+0x164>
 8014050:	3501      	adds	r5, #1
 8014052:	68e3      	ldr	r3, [r4, #12]
 8014054:	9903      	ldr	r1, [sp, #12]
 8014056:	1a5b      	subs	r3, r3, r1
 8014058:	42ab      	cmp	r3, r5
 801405a:	dcf2      	bgt.n	8014042 <_printf_i+0x21e>
 801405c:	e7eb      	b.n	8014036 <_printf_i+0x212>
 801405e:	2500      	movs	r5, #0
 8014060:	f104 0619 	add.w	r6, r4, #25
 8014064:	e7f5      	b.n	8014052 <_printf_i+0x22e>
 8014066:	bf00      	nop
 8014068:	0801731d 	.word	0x0801731d
 801406c:	0801732e 	.word	0x0801732e

08014070 <_sbrk_r>:
 8014070:	b538      	push	{r3, r4, r5, lr}
 8014072:	4d06      	ldr	r5, [pc, #24]	; (801408c <_sbrk_r+0x1c>)
 8014074:	2300      	movs	r3, #0
 8014076:	4604      	mov	r4, r0
 8014078:	4608      	mov	r0, r1
 801407a:	602b      	str	r3, [r5, #0]
 801407c:	f7ed fb7a 	bl	8001774 <_sbrk>
 8014080:	1c43      	adds	r3, r0, #1
 8014082:	d102      	bne.n	801408a <_sbrk_r+0x1a>
 8014084:	682b      	ldr	r3, [r5, #0]
 8014086:	b103      	cbz	r3, 801408a <_sbrk_r+0x1a>
 8014088:	6023      	str	r3, [r4, #0]
 801408a:	bd38      	pop	{r3, r4, r5, pc}
 801408c:	20009010 	.word	0x20009010

08014090 <__sread>:
 8014090:	b510      	push	{r4, lr}
 8014092:	460c      	mov	r4, r1
 8014094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014098:	f000 fa9e 	bl	80145d8 <_read_r>
 801409c:	2800      	cmp	r0, #0
 801409e:	bfab      	itete	ge
 80140a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80140a2:	89a3      	ldrhlt	r3, [r4, #12]
 80140a4:	181b      	addge	r3, r3, r0
 80140a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80140aa:	bfac      	ite	ge
 80140ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80140ae:	81a3      	strhlt	r3, [r4, #12]
 80140b0:	bd10      	pop	{r4, pc}

080140b2 <__swrite>:
 80140b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140b6:	461f      	mov	r7, r3
 80140b8:	898b      	ldrh	r3, [r1, #12]
 80140ba:	05db      	lsls	r3, r3, #23
 80140bc:	4605      	mov	r5, r0
 80140be:	460c      	mov	r4, r1
 80140c0:	4616      	mov	r6, r2
 80140c2:	d505      	bpl.n	80140d0 <__swrite+0x1e>
 80140c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140c8:	2302      	movs	r3, #2
 80140ca:	2200      	movs	r2, #0
 80140cc:	f000 f9d0 	bl	8014470 <_lseek_r>
 80140d0:	89a3      	ldrh	r3, [r4, #12]
 80140d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80140da:	81a3      	strh	r3, [r4, #12]
 80140dc:	4632      	mov	r2, r6
 80140de:	463b      	mov	r3, r7
 80140e0:	4628      	mov	r0, r5
 80140e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140e6:	f000 b869 	b.w	80141bc <_write_r>

080140ea <__sseek>:
 80140ea:	b510      	push	{r4, lr}
 80140ec:	460c      	mov	r4, r1
 80140ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140f2:	f000 f9bd 	bl	8014470 <_lseek_r>
 80140f6:	1c43      	adds	r3, r0, #1
 80140f8:	89a3      	ldrh	r3, [r4, #12]
 80140fa:	bf15      	itete	ne
 80140fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80140fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014106:	81a3      	strheq	r3, [r4, #12]
 8014108:	bf18      	it	ne
 801410a:	81a3      	strhne	r3, [r4, #12]
 801410c:	bd10      	pop	{r4, pc}

0801410e <__sclose>:
 801410e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014112:	f000 b8db 	b.w	80142cc <_close_r>
	...

08014118 <__swbuf_r>:
 8014118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801411a:	460e      	mov	r6, r1
 801411c:	4614      	mov	r4, r2
 801411e:	4605      	mov	r5, r0
 8014120:	b118      	cbz	r0, 801412a <__swbuf_r+0x12>
 8014122:	6983      	ldr	r3, [r0, #24]
 8014124:	b90b      	cbnz	r3, 801412a <__swbuf_r+0x12>
 8014126:	f7ff f9bf 	bl	80134a8 <__sinit>
 801412a:	4b21      	ldr	r3, [pc, #132]	; (80141b0 <__swbuf_r+0x98>)
 801412c:	429c      	cmp	r4, r3
 801412e:	d12b      	bne.n	8014188 <__swbuf_r+0x70>
 8014130:	686c      	ldr	r4, [r5, #4]
 8014132:	69a3      	ldr	r3, [r4, #24]
 8014134:	60a3      	str	r3, [r4, #8]
 8014136:	89a3      	ldrh	r3, [r4, #12]
 8014138:	071a      	lsls	r2, r3, #28
 801413a:	d52f      	bpl.n	801419c <__swbuf_r+0x84>
 801413c:	6923      	ldr	r3, [r4, #16]
 801413e:	b36b      	cbz	r3, 801419c <__swbuf_r+0x84>
 8014140:	6923      	ldr	r3, [r4, #16]
 8014142:	6820      	ldr	r0, [r4, #0]
 8014144:	1ac0      	subs	r0, r0, r3
 8014146:	6963      	ldr	r3, [r4, #20]
 8014148:	b2f6      	uxtb	r6, r6
 801414a:	4283      	cmp	r3, r0
 801414c:	4637      	mov	r7, r6
 801414e:	dc04      	bgt.n	801415a <__swbuf_r+0x42>
 8014150:	4621      	mov	r1, r4
 8014152:	4628      	mov	r0, r5
 8014154:	f000 f950 	bl	80143f8 <_fflush_r>
 8014158:	bb30      	cbnz	r0, 80141a8 <__swbuf_r+0x90>
 801415a:	68a3      	ldr	r3, [r4, #8]
 801415c:	3b01      	subs	r3, #1
 801415e:	60a3      	str	r3, [r4, #8]
 8014160:	6823      	ldr	r3, [r4, #0]
 8014162:	1c5a      	adds	r2, r3, #1
 8014164:	6022      	str	r2, [r4, #0]
 8014166:	701e      	strb	r6, [r3, #0]
 8014168:	6963      	ldr	r3, [r4, #20]
 801416a:	3001      	adds	r0, #1
 801416c:	4283      	cmp	r3, r0
 801416e:	d004      	beq.n	801417a <__swbuf_r+0x62>
 8014170:	89a3      	ldrh	r3, [r4, #12]
 8014172:	07db      	lsls	r3, r3, #31
 8014174:	d506      	bpl.n	8014184 <__swbuf_r+0x6c>
 8014176:	2e0a      	cmp	r6, #10
 8014178:	d104      	bne.n	8014184 <__swbuf_r+0x6c>
 801417a:	4621      	mov	r1, r4
 801417c:	4628      	mov	r0, r5
 801417e:	f000 f93b 	bl	80143f8 <_fflush_r>
 8014182:	b988      	cbnz	r0, 80141a8 <__swbuf_r+0x90>
 8014184:	4638      	mov	r0, r7
 8014186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014188:	4b0a      	ldr	r3, [pc, #40]	; (80141b4 <__swbuf_r+0x9c>)
 801418a:	429c      	cmp	r4, r3
 801418c:	d101      	bne.n	8014192 <__swbuf_r+0x7a>
 801418e:	68ac      	ldr	r4, [r5, #8]
 8014190:	e7cf      	b.n	8014132 <__swbuf_r+0x1a>
 8014192:	4b09      	ldr	r3, [pc, #36]	; (80141b8 <__swbuf_r+0xa0>)
 8014194:	429c      	cmp	r4, r3
 8014196:	bf08      	it	eq
 8014198:	68ec      	ldreq	r4, [r5, #12]
 801419a:	e7ca      	b.n	8014132 <__swbuf_r+0x1a>
 801419c:	4621      	mov	r1, r4
 801419e:	4628      	mov	r0, r5
 80141a0:	f000 f81e 	bl	80141e0 <__swsetup_r>
 80141a4:	2800      	cmp	r0, #0
 80141a6:	d0cb      	beq.n	8014140 <__swbuf_r+0x28>
 80141a8:	f04f 37ff 	mov.w	r7, #4294967295
 80141ac:	e7ea      	b.n	8014184 <__swbuf_r+0x6c>
 80141ae:	bf00      	nop
 80141b0:	080172cc 	.word	0x080172cc
 80141b4:	080172ec 	.word	0x080172ec
 80141b8:	080172ac 	.word	0x080172ac

080141bc <_write_r>:
 80141bc:	b538      	push	{r3, r4, r5, lr}
 80141be:	4d07      	ldr	r5, [pc, #28]	; (80141dc <_write_r+0x20>)
 80141c0:	4604      	mov	r4, r0
 80141c2:	4608      	mov	r0, r1
 80141c4:	4611      	mov	r1, r2
 80141c6:	2200      	movs	r2, #0
 80141c8:	602a      	str	r2, [r5, #0]
 80141ca:	461a      	mov	r2, r3
 80141cc:	f7ed fa81 	bl	80016d2 <_write>
 80141d0:	1c43      	adds	r3, r0, #1
 80141d2:	d102      	bne.n	80141da <_write_r+0x1e>
 80141d4:	682b      	ldr	r3, [r5, #0]
 80141d6:	b103      	cbz	r3, 80141da <_write_r+0x1e>
 80141d8:	6023      	str	r3, [r4, #0]
 80141da:	bd38      	pop	{r3, r4, r5, pc}
 80141dc:	20009010 	.word	0x20009010

080141e0 <__swsetup_r>:
 80141e0:	4b32      	ldr	r3, [pc, #200]	; (80142ac <__swsetup_r+0xcc>)
 80141e2:	b570      	push	{r4, r5, r6, lr}
 80141e4:	681d      	ldr	r5, [r3, #0]
 80141e6:	4606      	mov	r6, r0
 80141e8:	460c      	mov	r4, r1
 80141ea:	b125      	cbz	r5, 80141f6 <__swsetup_r+0x16>
 80141ec:	69ab      	ldr	r3, [r5, #24]
 80141ee:	b913      	cbnz	r3, 80141f6 <__swsetup_r+0x16>
 80141f0:	4628      	mov	r0, r5
 80141f2:	f7ff f959 	bl	80134a8 <__sinit>
 80141f6:	4b2e      	ldr	r3, [pc, #184]	; (80142b0 <__swsetup_r+0xd0>)
 80141f8:	429c      	cmp	r4, r3
 80141fa:	d10f      	bne.n	801421c <__swsetup_r+0x3c>
 80141fc:	686c      	ldr	r4, [r5, #4]
 80141fe:	89a3      	ldrh	r3, [r4, #12]
 8014200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014204:	0719      	lsls	r1, r3, #28
 8014206:	d42c      	bmi.n	8014262 <__swsetup_r+0x82>
 8014208:	06dd      	lsls	r5, r3, #27
 801420a:	d411      	bmi.n	8014230 <__swsetup_r+0x50>
 801420c:	2309      	movs	r3, #9
 801420e:	6033      	str	r3, [r6, #0]
 8014210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014214:	81a3      	strh	r3, [r4, #12]
 8014216:	f04f 30ff 	mov.w	r0, #4294967295
 801421a:	e03e      	b.n	801429a <__swsetup_r+0xba>
 801421c:	4b25      	ldr	r3, [pc, #148]	; (80142b4 <__swsetup_r+0xd4>)
 801421e:	429c      	cmp	r4, r3
 8014220:	d101      	bne.n	8014226 <__swsetup_r+0x46>
 8014222:	68ac      	ldr	r4, [r5, #8]
 8014224:	e7eb      	b.n	80141fe <__swsetup_r+0x1e>
 8014226:	4b24      	ldr	r3, [pc, #144]	; (80142b8 <__swsetup_r+0xd8>)
 8014228:	429c      	cmp	r4, r3
 801422a:	bf08      	it	eq
 801422c:	68ec      	ldreq	r4, [r5, #12]
 801422e:	e7e6      	b.n	80141fe <__swsetup_r+0x1e>
 8014230:	0758      	lsls	r0, r3, #29
 8014232:	d512      	bpl.n	801425a <__swsetup_r+0x7a>
 8014234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014236:	b141      	cbz	r1, 801424a <__swsetup_r+0x6a>
 8014238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801423c:	4299      	cmp	r1, r3
 801423e:	d002      	beq.n	8014246 <__swsetup_r+0x66>
 8014240:	4630      	mov	r0, r6
 8014242:	f7ff f9eb 	bl	801361c <_free_r>
 8014246:	2300      	movs	r3, #0
 8014248:	6363      	str	r3, [r4, #52]	; 0x34
 801424a:	89a3      	ldrh	r3, [r4, #12]
 801424c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014250:	81a3      	strh	r3, [r4, #12]
 8014252:	2300      	movs	r3, #0
 8014254:	6063      	str	r3, [r4, #4]
 8014256:	6923      	ldr	r3, [r4, #16]
 8014258:	6023      	str	r3, [r4, #0]
 801425a:	89a3      	ldrh	r3, [r4, #12]
 801425c:	f043 0308 	orr.w	r3, r3, #8
 8014260:	81a3      	strh	r3, [r4, #12]
 8014262:	6923      	ldr	r3, [r4, #16]
 8014264:	b94b      	cbnz	r3, 801427a <__swsetup_r+0x9a>
 8014266:	89a3      	ldrh	r3, [r4, #12]
 8014268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801426c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014270:	d003      	beq.n	801427a <__swsetup_r+0x9a>
 8014272:	4621      	mov	r1, r4
 8014274:	4630      	mov	r0, r6
 8014276:	f000 f933 	bl	80144e0 <__smakebuf_r>
 801427a:	89a0      	ldrh	r0, [r4, #12]
 801427c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014280:	f010 0301 	ands.w	r3, r0, #1
 8014284:	d00a      	beq.n	801429c <__swsetup_r+0xbc>
 8014286:	2300      	movs	r3, #0
 8014288:	60a3      	str	r3, [r4, #8]
 801428a:	6963      	ldr	r3, [r4, #20]
 801428c:	425b      	negs	r3, r3
 801428e:	61a3      	str	r3, [r4, #24]
 8014290:	6923      	ldr	r3, [r4, #16]
 8014292:	b943      	cbnz	r3, 80142a6 <__swsetup_r+0xc6>
 8014294:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014298:	d1ba      	bne.n	8014210 <__swsetup_r+0x30>
 801429a:	bd70      	pop	{r4, r5, r6, pc}
 801429c:	0781      	lsls	r1, r0, #30
 801429e:	bf58      	it	pl
 80142a0:	6963      	ldrpl	r3, [r4, #20]
 80142a2:	60a3      	str	r3, [r4, #8]
 80142a4:	e7f4      	b.n	8014290 <__swsetup_r+0xb0>
 80142a6:	2000      	movs	r0, #0
 80142a8:	e7f7      	b.n	801429a <__swsetup_r+0xba>
 80142aa:	bf00      	nop
 80142ac:	20000018 	.word	0x20000018
 80142b0:	080172cc 	.word	0x080172cc
 80142b4:	080172ec 	.word	0x080172ec
 80142b8:	080172ac 	.word	0x080172ac

080142bc <abort>:
 80142bc:	b508      	push	{r3, lr}
 80142be:	2006      	movs	r0, #6
 80142c0:	f000 f9c4 	bl	801464c <raise>
 80142c4:	2001      	movs	r0, #1
 80142c6:	f7ed f9dd 	bl	8001684 <_exit>
	...

080142cc <_close_r>:
 80142cc:	b538      	push	{r3, r4, r5, lr}
 80142ce:	4d06      	ldr	r5, [pc, #24]	; (80142e8 <_close_r+0x1c>)
 80142d0:	2300      	movs	r3, #0
 80142d2:	4604      	mov	r4, r0
 80142d4:	4608      	mov	r0, r1
 80142d6:	602b      	str	r3, [r5, #0]
 80142d8:	f7ed fa17 	bl	800170a <_close>
 80142dc:	1c43      	adds	r3, r0, #1
 80142de:	d102      	bne.n	80142e6 <_close_r+0x1a>
 80142e0:	682b      	ldr	r3, [r5, #0]
 80142e2:	b103      	cbz	r3, 80142e6 <_close_r+0x1a>
 80142e4:	6023      	str	r3, [r4, #0]
 80142e6:	bd38      	pop	{r3, r4, r5, pc}
 80142e8:	20009010 	.word	0x20009010

080142ec <__sflush_r>:
 80142ec:	898a      	ldrh	r2, [r1, #12]
 80142ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142f2:	4605      	mov	r5, r0
 80142f4:	0710      	lsls	r0, r2, #28
 80142f6:	460c      	mov	r4, r1
 80142f8:	d458      	bmi.n	80143ac <__sflush_r+0xc0>
 80142fa:	684b      	ldr	r3, [r1, #4]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	dc05      	bgt.n	801430c <__sflush_r+0x20>
 8014300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014302:	2b00      	cmp	r3, #0
 8014304:	dc02      	bgt.n	801430c <__sflush_r+0x20>
 8014306:	2000      	movs	r0, #0
 8014308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801430c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801430e:	2e00      	cmp	r6, #0
 8014310:	d0f9      	beq.n	8014306 <__sflush_r+0x1a>
 8014312:	2300      	movs	r3, #0
 8014314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014318:	682f      	ldr	r7, [r5, #0]
 801431a:	602b      	str	r3, [r5, #0]
 801431c:	d032      	beq.n	8014384 <__sflush_r+0x98>
 801431e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014320:	89a3      	ldrh	r3, [r4, #12]
 8014322:	075a      	lsls	r2, r3, #29
 8014324:	d505      	bpl.n	8014332 <__sflush_r+0x46>
 8014326:	6863      	ldr	r3, [r4, #4]
 8014328:	1ac0      	subs	r0, r0, r3
 801432a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801432c:	b10b      	cbz	r3, 8014332 <__sflush_r+0x46>
 801432e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014330:	1ac0      	subs	r0, r0, r3
 8014332:	2300      	movs	r3, #0
 8014334:	4602      	mov	r2, r0
 8014336:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014338:	6a21      	ldr	r1, [r4, #32]
 801433a:	4628      	mov	r0, r5
 801433c:	47b0      	blx	r6
 801433e:	1c43      	adds	r3, r0, #1
 8014340:	89a3      	ldrh	r3, [r4, #12]
 8014342:	d106      	bne.n	8014352 <__sflush_r+0x66>
 8014344:	6829      	ldr	r1, [r5, #0]
 8014346:	291d      	cmp	r1, #29
 8014348:	d82c      	bhi.n	80143a4 <__sflush_r+0xb8>
 801434a:	4a2a      	ldr	r2, [pc, #168]	; (80143f4 <__sflush_r+0x108>)
 801434c:	40ca      	lsrs	r2, r1
 801434e:	07d6      	lsls	r6, r2, #31
 8014350:	d528      	bpl.n	80143a4 <__sflush_r+0xb8>
 8014352:	2200      	movs	r2, #0
 8014354:	6062      	str	r2, [r4, #4]
 8014356:	04d9      	lsls	r1, r3, #19
 8014358:	6922      	ldr	r2, [r4, #16]
 801435a:	6022      	str	r2, [r4, #0]
 801435c:	d504      	bpl.n	8014368 <__sflush_r+0x7c>
 801435e:	1c42      	adds	r2, r0, #1
 8014360:	d101      	bne.n	8014366 <__sflush_r+0x7a>
 8014362:	682b      	ldr	r3, [r5, #0]
 8014364:	b903      	cbnz	r3, 8014368 <__sflush_r+0x7c>
 8014366:	6560      	str	r0, [r4, #84]	; 0x54
 8014368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801436a:	602f      	str	r7, [r5, #0]
 801436c:	2900      	cmp	r1, #0
 801436e:	d0ca      	beq.n	8014306 <__sflush_r+0x1a>
 8014370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014374:	4299      	cmp	r1, r3
 8014376:	d002      	beq.n	801437e <__sflush_r+0x92>
 8014378:	4628      	mov	r0, r5
 801437a:	f7ff f94f 	bl	801361c <_free_r>
 801437e:	2000      	movs	r0, #0
 8014380:	6360      	str	r0, [r4, #52]	; 0x34
 8014382:	e7c1      	b.n	8014308 <__sflush_r+0x1c>
 8014384:	6a21      	ldr	r1, [r4, #32]
 8014386:	2301      	movs	r3, #1
 8014388:	4628      	mov	r0, r5
 801438a:	47b0      	blx	r6
 801438c:	1c41      	adds	r1, r0, #1
 801438e:	d1c7      	bne.n	8014320 <__sflush_r+0x34>
 8014390:	682b      	ldr	r3, [r5, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d0c4      	beq.n	8014320 <__sflush_r+0x34>
 8014396:	2b1d      	cmp	r3, #29
 8014398:	d001      	beq.n	801439e <__sflush_r+0xb2>
 801439a:	2b16      	cmp	r3, #22
 801439c:	d101      	bne.n	80143a2 <__sflush_r+0xb6>
 801439e:	602f      	str	r7, [r5, #0]
 80143a0:	e7b1      	b.n	8014306 <__sflush_r+0x1a>
 80143a2:	89a3      	ldrh	r3, [r4, #12]
 80143a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143a8:	81a3      	strh	r3, [r4, #12]
 80143aa:	e7ad      	b.n	8014308 <__sflush_r+0x1c>
 80143ac:	690f      	ldr	r7, [r1, #16]
 80143ae:	2f00      	cmp	r7, #0
 80143b0:	d0a9      	beq.n	8014306 <__sflush_r+0x1a>
 80143b2:	0793      	lsls	r3, r2, #30
 80143b4:	680e      	ldr	r6, [r1, #0]
 80143b6:	bf08      	it	eq
 80143b8:	694b      	ldreq	r3, [r1, #20]
 80143ba:	600f      	str	r7, [r1, #0]
 80143bc:	bf18      	it	ne
 80143be:	2300      	movne	r3, #0
 80143c0:	eba6 0807 	sub.w	r8, r6, r7
 80143c4:	608b      	str	r3, [r1, #8]
 80143c6:	f1b8 0f00 	cmp.w	r8, #0
 80143ca:	dd9c      	ble.n	8014306 <__sflush_r+0x1a>
 80143cc:	6a21      	ldr	r1, [r4, #32]
 80143ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80143d0:	4643      	mov	r3, r8
 80143d2:	463a      	mov	r2, r7
 80143d4:	4628      	mov	r0, r5
 80143d6:	47b0      	blx	r6
 80143d8:	2800      	cmp	r0, #0
 80143da:	dc06      	bgt.n	80143ea <__sflush_r+0xfe>
 80143dc:	89a3      	ldrh	r3, [r4, #12]
 80143de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143e2:	81a3      	strh	r3, [r4, #12]
 80143e4:	f04f 30ff 	mov.w	r0, #4294967295
 80143e8:	e78e      	b.n	8014308 <__sflush_r+0x1c>
 80143ea:	4407      	add	r7, r0
 80143ec:	eba8 0800 	sub.w	r8, r8, r0
 80143f0:	e7e9      	b.n	80143c6 <__sflush_r+0xda>
 80143f2:	bf00      	nop
 80143f4:	20400001 	.word	0x20400001

080143f8 <_fflush_r>:
 80143f8:	b538      	push	{r3, r4, r5, lr}
 80143fa:	690b      	ldr	r3, [r1, #16]
 80143fc:	4605      	mov	r5, r0
 80143fe:	460c      	mov	r4, r1
 8014400:	b913      	cbnz	r3, 8014408 <_fflush_r+0x10>
 8014402:	2500      	movs	r5, #0
 8014404:	4628      	mov	r0, r5
 8014406:	bd38      	pop	{r3, r4, r5, pc}
 8014408:	b118      	cbz	r0, 8014412 <_fflush_r+0x1a>
 801440a:	6983      	ldr	r3, [r0, #24]
 801440c:	b90b      	cbnz	r3, 8014412 <_fflush_r+0x1a>
 801440e:	f7ff f84b 	bl	80134a8 <__sinit>
 8014412:	4b14      	ldr	r3, [pc, #80]	; (8014464 <_fflush_r+0x6c>)
 8014414:	429c      	cmp	r4, r3
 8014416:	d11b      	bne.n	8014450 <_fflush_r+0x58>
 8014418:	686c      	ldr	r4, [r5, #4]
 801441a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d0ef      	beq.n	8014402 <_fflush_r+0xa>
 8014422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014424:	07d0      	lsls	r0, r2, #31
 8014426:	d404      	bmi.n	8014432 <_fflush_r+0x3a>
 8014428:	0599      	lsls	r1, r3, #22
 801442a:	d402      	bmi.n	8014432 <_fflush_r+0x3a>
 801442c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801442e:	f7ff f8eb 	bl	8013608 <__retarget_lock_acquire_recursive>
 8014432:	4628      	mov	r0, r5
 8014434:	4621      	mov	r1, r4
 8014436:	f7ff ff59 	bl	80142ec <__sflush_r>
 801443a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801443c:	07da      	lsls	r2, r3, #31
 801443e:	4605      	mov	r5, r0
 8014440:	d4e0      	bmi.n	8014404 <_fflush_r+0xc>
 8014442:	89a3      	ldrh	r3, [r4, #12]
 8014444:	059b      	lsls	r3, r3, #22
 8014446:	d4dd      	bmi.n	8014404 <_fflush_r+0xc>
 8014448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801444a:	f7ff f8de 	bl	801360a <__retarget_lock_release_recursive>
 801444e:	e7d9      	b.n	8014404 <_fflush_r+0xc>
 8014450:	4b05      	ldr	r3, [pc, #20]	; (8014468 <_fflush_r+0x70>)
 8014452:	429c      	cmp	r4, r3
 8014454:	d101      	bne.n	801445a <_fflush_r+0x62>
 8014456:	68ac      	ldr	r4, [r5, #8]
 8014458:	e7df      	b.n	801441a <_fflush_r+0x22>
 801445a:	4b04      	ldr	r3, [pc, #16]	; (801446c <_fflush_r+0x74>)
 801445c:	429c      	cmp	r4, r3
 801445e:	bf08      	it	eq
 8014460:	68ec      	ldreq	r4, [r5, #12]
 8014462:	e7da      	b.n	801441a <_fflush_r+0x22>
 8014464:	080172cc 	.word	0x080172cc
 8014468:	080172ec 	.word	0x080172ec
 801446c:	080172ac 	.word	0x080172ac

08014470 <_lseek_r>:
 8014470:	b538      	push	{r3, r4, r5, lr}
 8014472:	4d07      	ldr	r5, [pc, #28]	; (8014490 <_lseek_r+0x20>)
 8014474:	4604      	mov	r4, r0
 8014476:	4608      	mov	r0, r1
 8014478:	4611      	mov	r1, r2
 801447a:	2200      	movs	r2, #0
 801447c:	602a      	str	r2, [r5, #0]
 801447e:	461a      	mov	r2, r3
 8014480:	f7ed f96a 	bl	8001758 <_lseek>
 8014484:	1c43      	adds	r3, r0, #1
 8014486:	d102      	bne.n	801448e <_lseek_r+0x1e>
 8014488:	682b      	ldr	r3, [r5, #0]
 801448a:	b103      	cbz	r3, 801448e <_lseek_r+0x1e>
 801448c:	6023      	str	r3, [r4, #0]
 801448e:	bd38      	pop	{r3, r4, r5, pc}
 8014490:	20009010 	.word	0x20009010

08014494 <__swhatbuf_r>:
 8014494:	b570      	push	{r4, r5, r6, lr}
 8014496:	460e      	mov	r6, r1
 8014498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801449c:	2900      	cmp	r1, #0
 801449e:	b096      	sub	sp, #88	; 0x58
 80144a0:	4614      	mov	r4, r2
 80144a2:	461d      	mov	r5, r3
 80144a4:	da08      	bge.n	80144b8 <__swhatbuf_r+0x24>
 80144a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80144aa:	2200      	movs	r2, #0
 80144ac:	602a      	str	r2, [r5, #0]
 80144ae:	061a      	lsls	r2, r3, #24
 80144b0:	d410      	bmi.n	80144d4 <__swhatbuf_r+0x40>
 80144b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80144b6:	e00e      	b.n	80144d6 <__swhatbuf_r+0x42>
 80144b8:	466a      	mov	r2, sp
 80144ba:	f000 f8e3 	bl	8014684 <_fstat_r>
 80144be:	2800      	cmp	r0, #0
 80144c0:	dbf1      	blt.n	80144a6 <__swhatbuf_r+0x12>
 80144c2:	9a01      	ldr	r2, [sp, #4]
 80144c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80144c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80144cc:	425a      	negs	r2, r3
 80144ce:	415a      	adcs	r2, r3
 80144d0:	602a      	str	r2, [r5, #0]
 80144d2:	e7ee      	b.n	80144b2 <__swhatbuf_r+0x1e>
 80144d4:	2340      	movs	r3, #64	; 0x40
 80144d6:	2000      	movs	r0, #0
 80144d8:	6023      	str	r3, [r4, #0]
 80144da:	b016      	add	sp, #88	; 0x58
 80144dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080144e0 <__smakebuf_r>:
 80144e0:	898b      	ldrh	r3, [r1, #12]
 80144e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80144e4:	079d      	lsls	r5, r3, #30
 80144e6:	4606      	mov	r6, r0
 80144e8:	460c      	mov	r4, r1
 80144ea:	d507      	bpl.n	80144fc <__smakebuf_r+0x1c>
 80144ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80144f0:	6023      	str	r3, [r4, #0]
 80144f2:	6123      	str	r3, [r4, #16]
 80144f4:	2301      	movs	r3, #1
 80144f6:	6163      	str	r3, [r4, #20]
 80144f8:	b002      	add	sp, #8
 80144fa:	bd70      	pop	{r4, r5, r6, pc}
 80144fc:	ab01      	add	r3, sp, #4
 80144fe:	466a      	mov	r2, sp
 8014500:	f7ff ffc8 	bl	8014494 <__swhatbuf_r>
 8014504:	9900      	ldr	r1, [sp, #0]
 8014506:	4605      	mov	r5, r0
 8014508:	4630      	mov	r0, r6
 801450a:	f7ff f8f3 	bl	80136f4 <_malloc_r>
 801450e:	b948      	cbnz	r0, 8014524 <__smakebuf_r+0x44>
 8014510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014514:	059a      	lsls	r2, r3, #22
 8014516:	d4ef      	bmi.n	80144f8 <__smakebuf_r+0x18>
 8014518:	f023 0303 	bic.w	r3, r3, #3
 801451c:	f043 0302 	orr.w	r3, r3, #2
 8014520:	81a3      	strh	r3, [r4, #12]
 8014522:	e7e3      	b.n	80144ec <__smakebuf_r+0xc>
 8014524:	4b0d      	ldr	r3, [pc, #52]	; (801455c <__smakebuf_r+0x7c>)
 8014526:	62b3      	str	r3, [r6, #40]	; 0x28
 8014528:	89a3      	ldrh	r3, [r4, #12]
 801452a:	6020      	str	r0, [r4, #0]
 801452c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014530:	81a3      	strh	r3, [r4, #12]
 8014532:	9b00      	ldr	r3, [sp, #0]
 8014534:	6163      	str	r3, [r4, #20]
 8014536:	9b01      	ldr	r3, [sp, #4]
 8014538:	6120      	str	r0, [r4, #16]
 801453a:	b15b      	cbz	r3, 8014554 <__smakebuf_r+0x74>
 801453c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014540:	4630      	mov	r0, r6
 8014542:	f000 f8b1 	bl	80146a8 <_isatty_r>
 8014546:	b128      	cbz	r0, 8014554 <__smakebuf_r+0x74>
 8014548:	89a3      	ldrh	r3, [r4, #12]
 801454a:	f023 0303 	bic.w	r3, r3, #3
 801454e:	f043 0301 	orr.w	r3, r3, #1
 8014552:	81a3      	strh	r3, [r4, #12]
 8014554:	89a0      	ldrh	r0, [r4, #12]
 8014556:	4305      	orrs	r5, r0
 8014558:	81a5      	strh	r5, [r4, #12]
 801455a:	e7cd      	b.n	80144f8 <__smakebuf_r+0x18>
 801455c:	08013441 	.word	0x08013441

08014560 <__malloc_lock>:
 8014560:	4801      	ldr	r0, [pc, #4]	; (8014568 <__malloc_lock+0x8>)
 8014562:	f7ff b851 	b.w	8013608 <__retarget_lock_acquire_recursive>
 8014566:	bf00      	nop
 8014568:	20009014 	.word	0x20009014

0801456c <__malloc_unlock>:
 801456c:	4801      	ldr	r0, [pc, #4]	; (8014574 <__malloc_unlock+0x8>)
 801456e:	f7ff b84c 	b.w	801360a <__retarget_lock_release_recursive>
 8014572:	bf00      	nop
 8014574:	20009014 	.word	0x20009014

08014578 <_realloc_r>:
 8014578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801457c:	4680      	mov	r8, r0
 801457e:	4614      	mov	r4, r2
 8014580:	460e      	mov	r6, r1
 8014582:	b921      	cbnz	r1, 801458e <_realloc_r+0x16>
 8014584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014588:	4611      	mov	r1, r2
 801458a:	f7ff b8b3 	b.w	80136f4 <_malloc_r>
 801458e:	b92a      	cbnz	r2, 801459c <_realloc_r+0x24>
 8014590:	f7ff f844 	bl	801361c <_free_r>
 8014594:	4625      	mov	r5, r4
 8014596:	4628      	mov	r0, r5
 8014598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801459c:	f000 f894 	bl	80146c8 <_malloc_usable_size_r>
 80145a0:	4284      	cmp	r4, r0
 80145a2:	4607      	mov	r7, r0
 80145a4:	d802      	bhi.n	80145ac <_realloc_r+0x34>
 80145a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80145aa:	d812      	bhi.n	80145d2 <_realloc_r+0x5a>
 80145ac:	4621      	mov	r1, r4
 80145ae:	4640      	mov	r0, r8
 80145b0:	f7ff f8a0 	bl	80136f4 <_malloc_r>
 80145b4:	4605      	mov	r5, r0
 80145b6:	2800      	cmp	r0, #0
 80145b8:	d0ed      	beq.n	8014596 <_realloc_r+0x1e>
 80145ba:	42bc      	cmp	r4, r7
 80145bc:	4622      	mov	r2, r4
 80145be:	4631      	mov	r1, r6
 80145c0:	bf28      	it	cs
 80145c2:	463a      	movcs	r2, r7
 80145c4:	f7fe fe54 	bl	8013270 <memcpy>
 80145c8:	4631      	mov	r1, r6
 80145ca:	4640      	mov	r0, r8
 80145cc:	f7ff f826 	bl	801361c <_free_r>
 80145d0:	e7e1      	b.n	8014596 <_realloc_r+0x1e>
 80145d2:	4635      	mov	r5, r6
 80145d4:	e7df      	b.n	8014596 <_realloc_r+0x1e>
	...

080145d8 <_read_r>:
 80145d8:	b538      	push	{r3, r4, r5, lr}
 80145da:	4d07      	ldr	r5, [pc, #28]	; (80145f8 <_read_r+0x20>)
 80145dc:	4604      	mov	r4, r0
 80145de:	4608      	mov	r0, r1
 80145e0:	4611      	mov	r1, r2
 80145e2:	2200      	movs	r2, #0
 80145e4:	602a      	str	r2, [r5, #0]
 80145e6:	461a      	mov	r2, r3
 80145e8:	f7ed f856 	bl	8001698 <_read>
 80145ec:	1c43      	adds	r3, r0, #1
 80145ee:	d102      	bne.n	80145f6 <_read_r+0x1e>
 80145f0:	682b      	ldr	r3, [r5, #0]
 80145f2:	b103      	cbz	r3, 80145f6 <_read_r+0x1e>
 80145f4:	6023      	str	r3, [r4, #0]
 80145f6:	bd38      	pop	{r3, r4, r5, pc}
 80145f8:	20009010 	.word	0x20009010

080145fc <_raise_r>:
 80145fc:	291f      	cmp	r1, #31
 80145fe:	b538      	push	{r3, r4, r5, lr}
 8014600:	4604      	mov	r4, r0
 8014602:	460d      	mov	r5, r1
 8014604:	d904      	bls.n	8014610 <_raise_r+0x14>
 8014606:	2316      	movs	r3, #22
 8014608:	6003      	str	r3, [r0, #0]
 801460a:	f04f 30ff 	mov.w	r0, #4294967295
 801460e:	bd38      	pop	{r3, r4, r5, pc}
 8014610:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014612:	b112      	cbz	r2, 801461a <_raise_r+0x1e>
 8014614:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014618:	b94b      	cbnz	r3, 801462e <_raise_r+0x32>
 801461a:	4620      	mov	r0, r4
 801461c:	f000 f830 	bl	8014680 <_getpid_r>
 8014620:	462a      	mov	r2, r5
 8014622:	4601      	mov	r1, r0
 8014624:	4620      	mov	r0, r4
 8014626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801462a:	f000 b817 	b.w	801465c <_kill_r>
 801462e:	2b01      	cmp	r3, #1
 8014630:	d00a      	beq.n	8014648 <_raise_r+0x4c>
 8014632:	1c59      	adds	r1, r3, #1
 8014634:	d103      	bne.n	801463e <_raise_r+0x42>
 8014636:	2316      	movs	r3, #22
 8014638:	6003      	str	r3, [r0, #0]
 801463a:	2001      	movs	r0, #1
 801463c:	e7e7      	b.n	801460e <_raise_r+0x12>
 801463e:	2400      	movs	r4, #0
 8014640:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014644:	4628      	mov	r0, r5
 8014646:	4798      	blx	r3
 8014648:	2000      	movs	r0, #0
 801464a:	e7e0      	b.n	801460e <_raise_r+0x12>

0801464c <raise>:
 801464c:	4b02      	ldr	r3, [pc, #8]	; (8014658 <raise+0xc>)
 801464e:	4601      	mov	r1, r0
 8014650:	6818      	ldr	r0, [r3, #0]
 8014652:	f7ff bfd3 	b.w	80145fc <_raise_r>
 8014656:	bf00      	nop
 8014658:	20000018 	.word	0x20000018

0801465c <_kill_r>:
 801465c:	b538      	push	{r3, r4, r5, lr}
 801465e:	4d07      	ldr	r5, [pc, #28]	; (801467c <_kill_r+0x20>)
 8014660:	2300      	movs	r3, #0
 8014662:	4604      	mov	r4, r0
 8014664:	4608      	mov	r0, r1
 8014666:	4611      	mov	r1, r2
 8014668:	602b      	str	r3, [r5, #0]
 801466a:	f7ec fff9 	bl	8001660 <_kill>
 801466e:	1c43      	adds	r3, r0, #1
 8014670:	d102      	bne.n	8014678 <_kill_r+0x1c>
 8014672:	682b      	ldr	r3, [r5, #0]
 8014674:	b103      	cbz	r3, 8014678 <_kill_r+0x1c>
 8014676:	6023      	str	r3, [r4, #0]
 8014678:	bd38      	pop	{r3, r4, r5, pc}
 801467a:	bf00      	nop
 801467c:	20009010 	.word	0x20009010

08014680 <_getpid_r>:
 8014680:	f7ec bfe6 	b.w	8001650 <_getpid>

08014684 <_fstat_r>:
 8014684:	b538      	push	{r3, r4, r5, lr}
 8014686:	4d07      	ldr	r5, [pc, #28]	; (80146a4 <_fstat_r+0x20>)
 8014688:	2300      	movs	r3, #0
 801468a:	4604      	mov	r4, r0
 801468c:	4608      	mov	r0, r1
 801468e:	4611      	mov	r1, r2
 8014690:	602b      	str	r3, [r5, #0]
 8014692:	f7ed f846 	bl	8001722 <_fstat>
 8014696:	1c43      	adds	r3, r0, #1
 8014698:	d102      	bne.n	80146a0 <_fstat_r+0x1c>
 801469a:	682b      	ldr	r3, [r5, #0]
 801469c:	b103      	cbz	r3, 80146a0 <_fstat_r+0x1c>
 801469e:	6023      	str	r3, [r4, #0]
 80146a0:	bd38      	pop	{r3, r4, r5, pc}
 80146a2:	bf00      	nop
 80146a4:	20009010 	.word	0x20009010

080146a8 <_isatty_r>:
 80146a8:	b538      	push	{r3, r4, r5, lr}
 80146aa:	4d06      	ldr	r5, [pc, #24]	; (80146c4 <_isatty_r+0x1c>)
 80146ac:	2300      	movs	r3, #0
 80146ae:	4604      	mov	r4, r0
 80146b0:	4608      	mov	r0, r1
 80146b2:	602b      	str	r3, [r5, #0]
 80146b4:	f7ed f845 	bl	8001742 <_isatty>
 80146b8:	1c43      	adds	r3, r0, #1
 80146ba:	d102      	bne.n	80146c2 <_isatty_r+0x1a>
 80146bc:	682b      	ldr	r3, [r5, #0]
 80146be:	b103      	cbz	r3, 80146c2 <_isatty_r+0x1a>
 80146c0:	6023      	str	r3, [r4, #0]
 80146c2:	bd38      	pop	{r3, r4, r5, pc}
 80146c4:	20009010 	.word	0x20009010

080146c8 <_malloc_usable_size_r>:
 80146c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80146cc:	1f18      	subs	r0, r3, #4
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	bfbc      	itt	lt
 80146d2:	580b      	ldrlt	r3, [r1, r0]
 80146d4:	18c0      	addlt	r0, r0, r3
 80146d6:	4770      	bx	lr

080146d8 <_init>:
 80146d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146da:	bf00      	nop
 80146dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146de:	bc08      	pop	{r3}
 80146e0:	469e      	mov	lr, r3
 80146e2:	4770      	bx	lr

080146e4 <_fini>:
 80146e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146e6:	bf00      	nop
 80146e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146ea:	bc08      	pop	{r3}
 80146ec:	469e      	mov	lr, r3
 80146ee:	4770      	bx	lr
