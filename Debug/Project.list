
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014768  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c50  08014918  08014918  00024918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017568  08017568  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  08017568  08017568  00027568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017570  08017570  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017570  08017570  00027570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017574  08017574  00027574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08017578  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003008c  2**0
                  CONTENTS
 10 .bss          00008ecc  2000008c  2000008c  0003008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008f58  20008f58  0003008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021aae  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005614  00000000  00000000  00051b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001800  00000000  00000000  00057180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001778  00000000  00000000  00058980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fd5f  00000000  00000000  0005a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029503  00000000  00000000  00089e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef05f  00000000  00000000  000b335a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a23b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c88  00000000  00000000  001a240c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014900 	.word	0x08014900

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08014900 	.word	0x08014900

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_SPI_RxCpltCallback>:
static void MX_SPI4_Init(void);
static void MX_UART4_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	flag = 1;
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_SPI_RxCpltCallback+0x1c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	flag = 1;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000000 	.word	0x20000000

080005d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	flag = 1;
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <HAL_UART_RxCpltCallback+0x1c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000000 	.word	0x20000000

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 f90c 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f876 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fa9a 	bl	8000b38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 fa42 	bl	8000a8c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000608:	f000 f9ec 	bl	80009e4 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 800060c:	f008 f8e2 	bl	80087d4 <MX_LWIP_Init>
  MX_I2C1_Init();
 8000610:	f000 f8d6 	bl	80007c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000614:	f000 f914 	bl	8000840 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000618:	f000 f952 	bl	80008c0 <MX_SPI2_Init>
  MX_SPI4_Init();
 800061c:	f000 f982 	bl	8000924 <MX_SPI4_Init>
  MX_UART4_Init();
 8000620:	f000 f9b6 	bl	8000990 <MX_UART4_Init>
  MX_USART6_UART_Init();
 8000624:	f000 fa08 	bl	8000a38 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  udpServer_init();
 8000628:	f001 f864 	bl	80016f4 <udpServer_init>
  HAL_UART_Transmit(&huart3, "start\n\r", 6, 20);
 800062c:	2314      	movs	r3, #20
 800062e:	2206      	movs	r2, #6
 8000630:	4921      	ldr	r1, [pc, #132]	; (80006b8 <main+0xc4>)
 8000632:	4822      	ldr	r0, [pc, #136]	; (80006bc <main+0xc8>)
 8000634:	f006 fe39 	bl	80072aa <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 8000638:	4821      	ldr	r0, [pc, #132]	; (80006c0 <main+0xcc>)
 800063a:	f008 fcc9 	bl	8008fd0 <ethernetif_input>
	  sys_check_timeouts();
 800063e:	f00f fdeb 	bl	8010218 <sys_check_timeouts>
	  if(protocol == 1)
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <main+0xd0>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d10a      	bne.n	8000660 <main+0x6c>
	  {
			 HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)mem, sizeof(send));
 800064a:	220f      	movs	r2, #15
 800064c:	491e      	ldr	r1, [pc, #120]	; (80006c8 <main+0xd4>)
 800064e:	481f      	ldr	r0, [pc, #124]	; (80006cc <main+0xd8>)
 8000650:	f006 f85a 	bl	8006708 <HAL_SPI_Receive_DMA>
			 HAL_SPI_Transmit_DMA(&hspi4, (uint8_t *)send, sizeof(send));
 8000654:	220f      	movs	r2, #15
 8000656:	491e      	ldr	r1, [pc, #120]	; (80006d0 <main+0xdc>)
 8000658:	481e      	ldr	r0, [pc, #120]	; (80006d4 <main+0xe0>)
 800065a:	f005 ff9f 	bl	800659c <HAL_SPI_Transmit_DMA>
 800065e:	e01d      	b.n	800069c <main+0xa8>
	  }
	  else if(protocol == 2)
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <main+0xd0>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d10b      	bne.n	8000680 <main+0x8c>
	  {
		  HAL_I2C_Master_Transmit_DMA(&hi2c1, 20, send, sizeof(send));
 8000668:	230f      	movs	r3, #15
 800066a:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <main+0xdc>)
 800066c:	2114      	movs	r1, #20
 800066e:	481a      	ldr	r0, [pc, #104]	; (80006d8 <main+0xe4>)
 8000670:	f003 fb32 	bl	8003cd8 <HAL_I2C_Master_Transmit_DMA>
		  HAL_I2C_Slave_Receive_DMA(&hi2c2, mem, sizeof(send));
 8000674:	220f      	movs	r2, #15
 8000676:	4914      	ldr	r1, [pc, #80]	; (80006c8 <main+0xd4>)
 8000678:	4818      	ldr	r0, [pc, #96]	; (80006dc <main+0xe8>)
 800067a:	f003 fc5d 	bl	8003f38 <HAL_I2C_Slave_Receive_DMA>
 800067e:	e00d      	b.n	800069c <main+0xa8>
	  }
	  //UART send and receive
	  else if(protocol == 3)
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <main+0xd0>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d109      	bne.n	800069c <main+0xa8>
	  {
	  	HAL_UART_Receive_DMA(&huart6, mem, sizeof(send));
 8000688:	220f      	movs	r2, #15
 800068a:	490f      	ldr	r1, [pc, #60]	; (80006c8 <main+0xd4>)
 800068c:	4814      	ldr	r0, [pc, #80]	; (80006e0 <main+0xec>)
 800068e:	f006 ff1d 	bl	80074cc <HAL_UART_Receive_DMA>
	  	HAL_UART_Transmit_DMA(&huart4, send, sizeof(send));
 8000692:	220f      	movs	r2, #15
 8000694:	490e      	ldr	r1, [pc, #56]	; (80006d0 <main+0xdc>)
 8000696:	4813      	ldr	r0, [pc, #76]	; (80006e4 <main+0xf0>)
 8000698:	f006 fe9a 	bl	80073d0 <HAL_UART_Transmit_DMA>
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  //debugging
	  #ifdef DEBUG
	  if(flag)
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <main+0xf4>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0c9      	beq.n	8000638 <main+0x44>
	  {
		  HAL_UART_Transmit(&huart3, mem, 15, 20);
 80006a4:	2314      	movs	r3, #20
 80006a6:	220f      	movs	r2, #15
 80006a8:	4907      	ldr	r1, [pc, #28]	; (80006c8 <main+0xd4>)
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <main+0xc8>)
 80006ac:	f006 fdfd 	bl	80072aa <HAL_UART_Transmit>
		  flag = 0;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <main+0xf4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
	  ethernetif_input(&gnetif);
 80006b6:	e7bf      	b.n	8000638 <main+0x44>
 80006b8:	08014918 	.word	0x08014918
 80006bc:	200003c4 	.word	0x200003c4
 80006c0:	20000578 	.word	0x20000578
 80006c4:	20000001 	.word	0x20000001
 80006c8:	2000050c 	.word	0x2000050c
 80006cc:	20000210 	.word	0x20000210
 80006d0:	20000004 	.word	0x20000004
 80006d4:	20000268 	.word	0x20000268
 80006d8:	200000a8 	.word	0x200000a8
 80006dc:	200000fc 	.word	0x200000fc
 80006e0:	20000408 	.word	0x20000408
 80006e4:	20000380 	.word	0x20000380
 80006e8:	20000000 	.word	0x20000000

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	; 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	; 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f012 fef4 	bl	80134e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <SystemClock_Config+0xcc>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a27      	ldr	r2, [pc, #156]	; (80007b8 <SystemClock_Config+0xcc>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	; 0x40
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <SystemClock_Config+0xcc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <SystemClock_Config+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <SystemClock_Config+0xd0>)
 8000736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <SystemClock_Config+0xd0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800074c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800075c:	2304      	movs	r3, #4
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000760:	23a8      	movs	r3, #168	; 0xa8
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000768:	2307      	movs	r3, #7
 800076a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f005 f9f1 	bl	8005b58 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800077c:	f000 fab8 	bl	8000cf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2302      	movs	r3, #2
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2105      	movs	r1, #5
 800079e:	4618      	mov	r0, r3
 80007a0:	f005 fc52 	bl	8006048 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007aa:	f000 faa1 	bl	8000cf0 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	; 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <MX_I2C1_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_I2C1_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_I2C1_Init+0x74>)
 80007cc:	4a1b      	ldr	r2, [pc, #108]	; (800083c <MX_I2C1_Init+0x7c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_I2C1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_I2C1_Init+0x74>)
 80007de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_I2C1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_I2C1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_I2C1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_I2C1_Init+0x74>)
 80007fe:	f003 f927 	bl	8003a50 <HAL_I2C_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000808:	f000 fa72 	bl	8000cf0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	4809      	ldr	r0, [pc, #36]	; (8000834 <MX_I2C1_Init+0x74>)
 8000810:	f005 f927 	bl	8005a62 <HAL_I2CEx_ConfigAnalogFilter>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800081a:	f000 fa69 	bl	8000cf0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_I2C1_Init+0x74>)
 8000822:	f005 f95a 	bl	8005ada <HAL_I2CEx_ConfigDigitalFilter>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800082c:	f000 fa60 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000a8 	.word	0x200000a8
 8000838:	40005400 	.word	0x40005400
 800083c:	000186a0 	.word	0x000186a0

08000840 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_I2C2_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <MX_I2C2_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_I2C2_Init+0x74>)
 800084c:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <MX_I2C2_Init+0x7c>)
 800084e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_I2C2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 20;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_I2C2_Init+0x74>)
 8000858:	2214      	movs	r2, #20
 800085a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_I2C2_Init+0x74>)
 800085e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000862:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_I2C2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_I2C2_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <MX_I2C2_Init+0x74>)
 800087e:	f003 f8e7 	bl	8003a50 <HAL_I2C_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000888:	f000 fa32 	bl	8000cf0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088c:	2100      	movs	r1, #0
 800088e:	4809      	ldr	r0, [pc, #36]	; (80008b4 <MX_I2C2_Init+0x74>)
 8000890:	f005 f8e7 	bl	8005a62 <HAL_I2CEx_ConfigAnalogFilter>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800089a:	f000 fa29 	bl	8000cf0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800089e:	2100      	movs	r1, #0
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_I2C2_Init+0x74>)
 80008a2:	f005 f91a 	bl	8005ada <HAL_I2CEx_ConfigDigitalFilter>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80008ac:	f000 fa20 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000fc 	.word	0x200000fc
 80008b8:	40005800 	.word	0x40005800
 80008bc:	000186a0 	.word	0x000186a0

080008c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_SPI2_Init+0x5c>)
 80008c6:	4a16      	ldr	r2, [pc, #88]	; (8000920 <MX_SPI2_Init+0x60>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_SPI2_Init+0x5c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_SPI2_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_SPI2_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_SPI2_Init+0x5c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_SPI2_Init+0x5c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_SPI2_Init+0x5c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_SPI2_Init+0x5c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_SPI2_Init+0x5c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_SPI2_Init+0x5c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_SPI2_Init+0x5c>)
 8000902:	220a      	movs	r2, #10
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_SPI2_Init+0x5c>)
 8000908:	f005 fdbe 	bl	8006488 <HAL_SPI_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8000912:	f000 f9ed 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000210 	.word	0x20000210
 8000920:	40003800 	.word	0x40003800

08000924 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_SPI4_Init+0x64>)
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <MX_SPI4_Init+0x68>)
 800092c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_SPI4_Init+0x64>)
 8000930:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000934:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_SPI4_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_SPI4_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_SPI4_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_SPI4_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_SPI4_Init+0x64>)
 8000950:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000954:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_SPI4_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <MX_SPI4_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_SPI4_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <MX_SPI4_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_SPI4_Init+0x64>)
 8000970:	220a      	movs	r2, #10
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_SPI4_Init+0x64>)
 8000976:	f005 fd87 	bl	8006488 <HAL_SPI_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000980:	f000 f9b6 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000268 	.word	0x20000268
 800098c:	40013400 	.word	0x40013400

08000990 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_UART4_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <MX_UART4_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_UART4_Init+0x4c>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_UART4_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_UART4_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_UART4_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_UART4_Init+0x4c>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_UART4_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_UART4_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_UART4_Init+0x4c>)
 80009c8:	f006 fc22 	bl	8007210 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80009d2:	f000 f98d 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000380 	.word	0x20000380
 80009e0:	40004c00 	.word	0x40004c00

080009e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART3_UART_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_USART3_UART_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_USART3_UART_Init+0x4c>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART3_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART3_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART3_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART3_UART_Init+0x4c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART3_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART3_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART3_UART_Init+0x4c>)
 8000a1c:	f006 fbf8 	bl	8007210 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a26:	f000 f963 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200003c4 	.word	0x200003c4
 8000a34:	40004800 	.word	0x40004800

08000a38 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART6_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_USART6_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USART6_UART_Init+0x4c>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART6_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART6_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART6_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART6_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART6_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART6_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART6_UART_Init+0x4c>)
 8000a70:	f006 fbce 	bl	8007210 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a7a:	f000 f939 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000408 	.word	0x20000408
 8000a88:	40011400 	.word	0x40011400

08000a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_DMA_Init+0xa8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a26      	ldr	r2, [pc, #152]	; (8000b34 <MX_DMA_Init+0xa8>)
 8000a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_DMA_Init+0xa8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_DMA_Init+0xa8>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <MX_DMA_Init+0xa8>)
 8000ab8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_DMA_Init+0xa8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	200d      	movs	r0, #13
 8000ad0:	f001 f811 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ad4:	200d      	movs	r0, #13
 8000ad6:	f001 f82a 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	200e      	movs	r0, #14
 8000ae0:	f001 f809 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ae4:	200e      	movs	r0, #14
 8000ae6:	f001 f822 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	200f      	movs	r0, #15
 8000af0:	f001 f801 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000af4:	200f      	movs	r0, #15
 8000af6:	f001 f81a 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2011      	movs	r0, #17
 8000b00:	f000 fff9 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b04:	2011      	movs	r0, #17
 8000b06:	f001 f812 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2039      	movs	r0, #57	; 0x39
 8000b10:	f000 fff1 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b14:	2039      	movs	r0, #57	; 0x39
 8000b16:	f001 f80a 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	203a      	movs	r0, #58	; 0x3a
 8000b20:	f000 ffe9 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b24:	203a      	movs	r0, #58	; 0x3a
 8000b26:	f001 f802 	bl	8001b2e <HAL_NVIC_EnableIRQ>

}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
 8000b52:	4b62      	ldr	r3, [pc, #392]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a61      	ldr	r2, [pc, #388]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000b58:	f043 0310 	orr.w	r3, r3, #16
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b5f      	ldr	r3, [pc, #380]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	4b5b      	ldr	r3, [pc, #364]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a5a      	ldr	r2, [pc, #360]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b58      	ldr	r3, [pc, #352]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b54      	ldr	r3, [pc, #336]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a53      	ldr	r2, [pc, #332]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b51      	ldr	r3, [pc, #324]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b4d      	ldr	r3, [pc, #308]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a4c      	ldr	r2, [pc, #304]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b4a      	ldr	r3, [pc, #296]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b46      	ldr	r3, [pc, #280]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a45      	ldr	r2, [pc, #276]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b43      	ldr	r3, [pc, #268]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b3f      	ldr	r3, [pc, #252]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a3e      	ldr	r2, [pc, #248]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b3c      	ldr	r3, [pc, #240]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a37      	ldr	r2, [pc, #220]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000c18:	4831      	ldr	r0, [pc, #196]	; (8000ce0 <MX_GPIO_Init+0x1a8>)
 8000c1a:	f002 feff 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2140      	movs	r1, #64	; 0x40
 8000c22:	4830      	ldr	r0, [pc, #192]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000c24:	f002 fefa 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	482a      	ldr	r0, [pc, #168]	; (8000ce8 <MX_GPIO_Init+0x1b0>)
 8000c40:	f002 fd40 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c44:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4820      	ldr	r0, [pc, #128]	; (8000ce0 <MX_GPIO_Init+0x1a8>)
 8000c5e:	f002 fd31 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	481a      	ldr	r0, [pc, #104]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000c7a:	f002 fd23 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000c92:	f002 fd17 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ca8:	230a      	movs	r3, #10
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480e      	ldr	r0, [pc, #56]	; (8000cec <MX_GPIO_Init+0x1b4>)
 8000cb4:	f002 fd06 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4807      	ldr	r0, [pc, #28]	; (8000cec <MX_GPIO_Init+0x1b4>)
 8000cce:	f002 fcf9 	bl	80036c4 <HAL_GPIO_Init>

}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	; 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020400 	.word	0x40020400
 8000ce4:	40021800 	.word	0x40021800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020000 	.word	0x40020000

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d10:	6453      	str	r3, [r2, #68]	; 0x44
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	; 0x30
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a69      	ldr	r2, [pc, #420]	; (8000f10 <HAL_I2C_MspInit+0x1c4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d163      	bne.n	8000e36 <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	4b68      	ldr	r3, [pc, #416]	; (8000f14 <HAL_I2C_MspInit+0x1c8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a67      	ldr	r2, [pc, #412]	; (8000f14 <HAL_I2C_MspInit+0x1c8>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b65      	ldr	r3, [pc, #404]	; (8000f14 <HAL_I2C_MspInit+0x1c8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d90:	2312      	movs	r3, #18
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	485c      	ldr	r0, [pc, #368]	; (8000f18 <HAL_I2C_MspInit+0x1cc>)
 8000da8:	f002 fc8c 	bl	80036c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	4b58      	ldr	r3, [pc, #352]	; (8000f14 <HAL_I2C_MspInit+0x1c8>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a57      	ldr	r2, [pc, #348]	; (8000f14 <HAL_I2C_MspInit+0x1c8>)
 8000db6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <HAL_I2C_MspInit+0x1c8>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000dc8:	4b54      	ldr	r3, [pc, #336]	; (8000f1c <HAL_I2C_MspInit+0x1d0>)
 8000dca:	4a55      	ldr	r2, [pc, #340]	; (8000f20 <HAL_I2C_MspInit+0x1d4>)
 8000dcc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000dce:	4b53      	ldr	r3, [pc, #332]	; (8000f1c <HAL_I2C_MspInit+0x1d0>)
 8000dd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000dd4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dd6:	4b51      	ldr	r3, [pc, #324]	; (8000f1c <HAL_I2C_MspInit+0x1d0>)
 8000dd8:	2240      	movs	r2, #64	; 0x40
 8000dda:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ddc:	4b4f      	ldr	r3, [pc, #316]	; (8000f1c <HAL_I2C_MspInit+0x1d0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000de2:	4b4e      	ldr	r3, [pc, #312]	; (8000f1c <HAL_I2C_MspInit+0x1d0>)
 8000de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dea:	4b4c      	ldr	r3, [pc, #304]	; (8000f1c <HAL_I2C_MspInit+0x1d0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000df0:	4b4a      	ldr	r3, [pc, #296]	; (8000f1c <HAL_I2C_MspInit+0x1d0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000df6:	4b49      	ldr	r3, [pc, #292]	; (8000f1c <HAL_I2C_MspInit+0x1d0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dfc:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <HAL_I2C_MspInit+0x1d0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e02:	4b46      	ldr	r3, [pc, #280]	; (8000f1c <HAL_I2C_MspInit+0x1d0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000e08:	4844      	ldr	r0, [pc, #272]	; (8000f1c <HAL_I2C_MspInit+0x1d0>)
 8000e0a:	f000 feab 	bl	8001b64 <HAL_DMA_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000e14:	f7ff ff6c 	bl	8000cf0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a40      	ldr	r2, [pc, #256]	; (8000f1c <HAL_I2C_MspInit+0x1d0>)
 8000e1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e1e:	4a3f      	ldr	r2, [pc, #252]	; (8000f1c <HAL_I2C_MspInit+0x1d0>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	201f      	movs	r0, #31
 8000e2a:	f000 fe64 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e2e:	201f      	movs	r0, #31
 8000e30:	f000 fe7d 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e34:	e067      	b.n	8000f06 <HAL_I2C_MspInit+0x1ba>
  else if(hi2c->Instance==I2C2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a3a      	ldr	r2, [pc, #232]	; (8000f24 <HAL_I2C_MspInit+0x1d8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d162      	bne.n	8000f06 <HAL_I2C_MspInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <HAL_I2C_MspInit+0x1c8>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	4a32      	ldr	r2, [pc, #200]	; (8000f14 <HAL_I2C_MspInit+0x1c8>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <HAL_I2C_MspInit+0x1c8>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e62:	2312      	movs	r3, #18
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4827      	ldr	r0, [pc, #156]	; (8000f18 <HAL_I2C_MspInit+0x1cc>)
 8000e7a:	f002 fc23 	bl	80036c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <HAL_I2C_MspInit+0x1c8>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <HAL_I2C_MspInit+0x1c8>)
 8000e88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <HAL_I2C_MspInit+0x1c8>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <HAL_I2C_MspInit+0x1dc>)
 8000e9c:	4a23      	ldr	r2, [pc, #140]	; (8000f2c <HAL_I2C_MspInit+0x1e0>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <HAL_I2C_MspInit+0x1dc>)
 8000ea2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000ea6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <HAL_I2C_MspInit+0x1dc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <HAL_I2C_MspInit+0x1dc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <HAL_I2C_MspInit+0x1dc>)
 8000eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eba:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_I2C_MspInit+0x1dc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_I2C_MspInit+0x1dc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_I2C_MspInit+0x1dc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_I2C_MspInit+0x1dc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_I2C_MspInit+0x1dc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000eda:	4813      	ldr	r0, [pc, #76]	; (8000f28 <HAL_I2C_MspInit+0x1dc>)
 8000edc:	f000 fe42 	bl	8001b64 <HAL_DMA_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_I2C_MspInit+0x19e>
      Error_Handler();
 8000ee6:	f7ff ff03 	bl	8000cf0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_I2C_MspInit+0x1dc>)
 8000eee:	639a      	str	r2, [r3, #56]	; 0x38
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <HAL_I2C_MspInit+0x1dc>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2021      	movs	r0, #33	; 0x21
 8000efc:	f000 fdfb 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000f00:	2021      	movs	r0, #33	; 0x21
 8000f02:	f000 fe14 	bl	8001b2e <HAL_NVIC_EnableIRQ>
}
 8000f06:	bf00      	nop
 8000f08:	3730      	adds	r7, #48	; 0x30
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40005400 	.word	0x40005400
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	20000150 	.word	0x20000150
 8000f20:	400260a0 	.word	0x400260a0
 8000f24:	40005800 	.word	0x40005800
 8000f28:	200001b0 	.word	0x200001b0
 8000f2c:	40026040 	.word	0x40026040

08000f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08e      	sub	sp, #56	; 0x38
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a86      	ldr	r2, [pc, #536]	; (8001168 <HAL_SPI_MspInit+0x238>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	f040 809f 	bne.w	8001092 <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
 8000f58:	4b84      	ldr	r3, [pc, #528]	; (800116c <HAL_SPI_MspInit+0x23c>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a83      	ldr	r2, [pc, #524]	; (800116c <HAL_SPI_MspInit+0x23c>)
 8000f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b81      	ldr	r3, [pc, #516]	; (800116c <HAL_SPI_MspInit+0x23c>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6c:	623b      	str	r3, [r7, #32]
 8000f6e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	4b7d      	ldr	r3, [pc, #500]	; (800116c <HAL_SPI_MspInit+0x23c>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	4a7c      	ldr	r2, [pc, #496]	; (800116c <HAL_SPI_MspInit+0x23c>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f80:	4b7a      	ldr	r3, [pc, #488]	; (800116c <HAL_SPI_MspInit+0x23c>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
 8000f90:	4b76      	ldr	r3, [pc, #472]	; (800116c <HAL_SPI_MspInit+0x23c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4a75      	ldr	r2, [pc, #468]	; (800116c <HAL_SPI_MspInit+0x23c>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9c:	4b73      	ldr	r3, [pc, #460]	; (800116c <HAL_SPI_MspInit+0x23c>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	4b6f      	ldr	r3, [pc, #444]	; (800116c <HAL_SPI_MspInit+0x23c>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	4a6e      	ldr	r2, [pc, #440]	; (800116c <HAL_SPI_MspInit+0x23c>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb8:	4b6c      	ldr	r3, [pc, #432]	; (800116c <HAL_SPI_MspInit+0x23c>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fc4:	230c      	movs	r3, #12
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4864      	ldr	r0, [pc, #400]	; (8001170 <HAL_SPI_MspInit+0x240>)
 8000fe0:	f002 fb70 	bl	80036c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	485c      	ldr	r0, [pc, #368]	; (8001174 <HAL_SPI_MspInit+0x244>)
 8001002:	f002 fb5f 	bl	80036c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001006:	2308      	movs	r3, #8
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001016:	2305      	movs	r3, #5
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	4855      	ldr	r0, [pc, #340]	; (8001178 <HAL_SPI_MspInit+0x248>)
 8001022:	f002 fb4f 	bl	80036c4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001026:	4b55      	ldr	r3, [pc, #340]	; (800117c <HAL_SPI_MspInit+0x24c>)
 8001028:	4a55      	ldr	r2, [pc, #340]	; (8001180 <HAL_SPI_MspInit+0x250>)
 800102a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800102c:	4b53      	ldr	r3, [pc, #332]	; (800117c <HAL_SPI_MspInit+0x24c>)
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001032:	4b52      	ldr	r3, [pc, #328]	; (800117c <HAL_SPI_MspInit+0x24c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001038:	4b50      	ldr	r3, [pc, #320]	; (800117c <HAL_SPI_MspInit+0x24c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800103e:	4b4f      	ldr	r3, [pc, #316]	; (800117c <HAL_SPI_MspInit+0x24c>)
 8001040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001044:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001046:	4b4d      	ldr	r3, [pc, #308]	; (800117c <HAL_SPI_MspInit+0x24c>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800104c:	4b4b      	ldr	r3, [pc, #300]	; (800117c <HAL_SPI_MspInit+0x24c>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001052:	4b4a      	ldr	r3, [pc, #296]	; (800117c <HAL_SPI_MspInit+0x24c>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001058:	4b48      	ldr	r3, [pc, #288]	; (800117c <HAL_SPI_MspInit+0x24c>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800105e:	4b47      	ldr	r3, [pc, #284]	; (800117c <HAL_SPI_MspInit+0x24c>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001064:	4845      	ldr	r0, [pc, #276]	; (800117c <HAL_SPI_MspInit+0x24c>)
 8001066:	f000 fd7d 	bl	8001b64 <HAL_DMA_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_SPI_MspInit+0x144>
    {
      Error_Handler();
 8001070:	f7ff fe3e 	bl	8000cf0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a41      	ldr	r2, [pc, #260]	; (800117c <HAL_SPI_MspInit+0x24c>)
 8001078:	64da      	str	r2, [r3, #76]	; 0x4c
 800107a:	4a40      	ldr	r2, [pc, #256]	; (800117c <HAL_SPI_MspInit+0x24c>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2024      	movs	r0, #36	; 0x24
 8001086:	f000 fd36 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800108a:	2024      	movs	r0, #36	; 0x24
 800108c:	f000 fd4f 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001090:	e066      	b.n	8001160 <HAL_SPI_MspInit+0x230>
  else if(hspi->Instance==SPI4)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a3b      	ldr	r2, [pc, #236]	; (8001184 <HAL_SPI_MspInit+0x254>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d161      	bne.n	8001160 <HAL_SPI_MspInit+0x230>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	4b32      	ldr	r3, [pc, #200]	; (800116c <HAL_SPI_MspInit+0x23c>)
 80010a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a4:	4a31      	ldr	r2, [pc, #196]	; (800116c <HAL_SPI_MspInit+0x23c>)
 80010a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010aa:	6453      	str	r3, [r2, #68]	; 0x44
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_SPI_MspInit+0x23c>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HAL_SPI_MspInit+0x23c>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	4a2a      	ldr	r2, [pc, #168]	; (800116c <HAL_SPI_MspInit+0x23c>)
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	6313      	str	r3, [r2, #48]	; 0x30
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <HAL_SPI_MspInit+0x23c>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80010d4:	2374      	movs	r3, #116	; 0x74
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80010e4:	2305      	movs	r3, #5
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	4619      	mov	r1, r3
 80010ee:	4826      	ldr	r0, [pc, #152]	; (8001188 <HAL_SPI_MspInit+0x258>)
 80010f0:	f002 fae8 	bl	80036c4 <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <HAL_SPI_MspInit+0x25c>)
 80010f6:	4a26      	ldr	r2, [pc, #152]	; (8001190 <HAL_SPI_MspInit+0x260>)
 80010f8:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <HAL_SPI_MspInit+0x25c>)
 80010fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001100:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <HAL_SPI_MspInit+0x25c>)
 8001104:	2240      	movs	r2, #64	; 0x40
 8001106:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_SPI_MspInit+0x25c>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <HAL_SPI_MspInit+0x25c>)
 8001110:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001114:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_SPI_MspInit+0x25c>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_SPI_MspInit+0x25c>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <HAL_SPI_MspInit+0x25c>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_SPI_MspInit+0x25c>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_SPI_MspInit+0x25c>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001134:	4815      	ldr	r0, [pc, #84]	; (800118c <HAL_SPI_MspInit+0x25c>)
 8001136:	f000 fd15 	bl	8001b64 <HAL_DMA_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_SPI_MspInit+0x214>
      Error_Handler();
 8001140:	f7ff fdd6 	bl	8000cf0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a11      	ldr	r2, [pc, #68]	; (800118c <HAL_SPI_MspInit+0x25c>)
 8001148:	649a      	str	r2, [r3, #72]	; 0x48
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <HAL_SPI_MspInit+0x25c>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2054      	movs	r0, #84	; 0x54
 8001156:	f000 fcce 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800115a:	2054      	movs	r0, #84	; 0x54
 800115c:	f000 fce7 	bl	8001b2e <HAL_NVIC_EnableIRQ>
}
 8001160:	bf00      	nop
 8001162:	3738      	adds	r7, #56	; 0x38
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40003800 	.word	0x40003800
 800116c:	40023800 	.word	0x40023800
 8001170:	40020800 	.word	0x40020800
 8001174:	40020400 	.word	0x40020400
 8001178:	40020c00 	.word	0x40020c00
 800117c:	200002c0 	.word	0x200002c0
 8001180:	40026058 	.word	0x40026058
 8001184:	40013400 	.word	0x40013400
 8001188:	40021000 	.word	0x40021000
 800118c:	20000320 	.word	0x20000320
 8001190:	40026428 	.word	0x40026428

08001194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08e      	sub	sp, #56	; 0x38
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a82      	ldr	r2, [pc, #520]	; (80013bc <HAL_UART_MspInit+0x228>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d163      	bne.n	800127e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
 80011ba:	4b81      	ldr	r3, [pc, #516]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a80      	ldr	r2, [pc, #512]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 80011c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b7e      	ldr	r3, [pc, #504]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ce:	623b      	str	r3, [r7, #32]
 80011d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	4b7a      	ldr	r3, [pc, #488]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a79      	ldr	r2, [pc, #484]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b77      	ldr	r3, [pc, #476]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001200:	2308      	movs	r3, #8
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	4619      	mov	r1, r3
 800120a:	486e      	ldr	r0, [pc, #440]	; (80013c4 <HAL_UART_MspInit+0x230>)
 800120c:	f002 fa5a 	bl	80036c4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001210:	4b6d      	ldr	r3, [pc, #436]	; (80013c8 <HAL_UART_MspInit+0x234>)
 8001212:	4a6e      	ldr	r2, [pc, #440]	; (80013cc <HAL_UART_MspInit+0x238>)
 8001214:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001216:	4b6c      	ldr	r3, [pc, #432]	; (80013c8 <HAL_UART_MspInit+0x234>)
 8001218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800121c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800121e:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <HAL_UART_MspInit+0x234>)
 8001220:	2240      	movs	r2, #64	; 0x40
 8001222:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001224:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <HAL_UART_MspInit+0x234>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800122a:	4b67      	ldr	r3, [pc, #412]	; (80013c8 <HAL_UART_MspInit+0x234>)
 800122c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001230:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001232:	4b65      	ldr	r3, [pc, #404]	; (80013c8 <HAL_UART_MspInit+0x234>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001238:	4b63      	ldr	r3, [pc, #396]	; (80013c8 <HAL_UART_MspInit+0x234>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800123e:	4b62      	ldr	r3, [pc, #392]	; (80013c8 <HAL_UART_MspInit+0x234>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001244:	4b60      	ldr	r3, [pc, #384]	; (80013c8 <HAL_UART_MspInit+0x234>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800124a:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <HAL_UART_MspInit+0x234>)
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001250:	485d      	ldr	r0, [pc, #372]	; (80013c8 <HAL_UART_MspInit+0x234>)
 8001252:	f000 fc87 	bl	8001b64 <HAL_DMA_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800125c:	f7ff fd48 	bl	8000cf0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a59      	ldr	r2, [pc, #356]	; (80013c8 <HAL_UART_MspInit+0x234>)
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
 8001266:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <HAL_UART_MspInit+0x234>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2034      	movs	r0, #52	; 0x34
 8001272:	f000 fc40 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001276:	2034      	movs	r0, #52	; 0x34
 8001278:	f000 fc59 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800127c:	e099      	b.n	80013b2 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a53      	ldr	r2, [pc, #332]	; (80013d0 <HAL_UART_MspInit+0x23c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d12d      	bne.n	80012e4 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	4a4b      	ldr	r2, [pc, #300]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 8001292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001296:	6413      	str	r3, [r2, #64]	; 0x40
 8001298:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4a44      	ldr	r2, [pc, #272]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
 80012b4:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012d2:	2307      	movs	r3, #7
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012da:	4619      	mov	r1, r3
 80012dc:	483d      	ldr	r0, [pc, #244]	; (80013d4 <HAL_UART_MspInit+0x240>)
 80012de:	f002 f9f1 	bl	80036c4 <HAL_GPIO_Init>
}
 80012e2:	e066      	b.n	80013b2 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART6)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a3b      	ldr	r2, [pc, #236]	; (80013d8 <HAL_UART_MspInit+0x244>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d161      	bne.n	80013b2 <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a32      	ldr	r2, [pc, #200]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 80012f8:	f043 0320 	orr.w	r3, r3, #32
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a2b      	ldr	r2, [pc, #172]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <HAL_UART_MspInit+0x22c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001326:	23c0      	movs	r3, #192	; 0xc0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001336:	2308      	movs	r3, #8
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	4820      	ldr	r0, [pc, #128]	; (80013c4 <HAL_UART_MspInit+0x230>)
 8001342:	f002 f9bf 	bl	80036c4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <HAL_UART_MspInit+0x248>)
 8001348:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <HAL_UART_MspInit+0x24c>)
 800134a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <HAL_UART_MspInit+0x248>)
 800134e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001352:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_UART_MspInit+0x248>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_UART_MspInit+0x248>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <HAL_UART_MspInit+0x248>)
 8001362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001366:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_UART_MspInit+0x248>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_UART_MspInit+0x248>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_UART_MspInit+0x248>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_UART_MspInit+0x248>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_UART_MspInit+0x248>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001386:	4815      	ldr	r0, [pc, #84]	; (80013dc <HAL_UART_MspInit+0x248>)
 8001388:	f000 fbec 	bl	8001b64 <HAL_DMA_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_UART_MspInit+0x202>
      Error_Handler();
 8001392:	f7ff fcad 	bl	8000cf0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_UART_MspInit+0x248>)
 800139a:	639a      	str	r2, [r3, #56]	; 0x38
 800139c:	4a0f      	ldr	r2, [pc, #60]	; (80013dc <HAL_UART_MspInit+0x248>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2047      	movs	r0, #71	; 0x47
 80013a8:	f000 fba5 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80013ac:	2047      	movs	r0, #71	; 0x47
 80013ae:	f000 fbbe 	bl	8001b2e <HAL_NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3738      	adds	r7, #56	; 0x38
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40004c00 	.word	0x40004c00
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020800 	.word	0x40020800
 80013c8:	2000044c 	.word	0x2000044c
 80013cc:	40026070 	.word	0x40026070
 80013d0:	40004800 	.word	0x40004800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40011400 	.word	0x40011400
 80013dc:	200004ac 	.word	0x200004ac
 80013e0:	40026440 	.word	0x40026440

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 fa42 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <DMA1_Stream2_IRQHandler+0x10>)
 800143e:	f000 fd29 	bl	8001e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200001b0 	.word	0x200001b0

0800144c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <DMA1_Stream3_IRQHandler+0x10>)
 8001452:	f000 fd1f 	bl	8001e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200002c0 	.word	0x200002c0

08001460 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <DMA1_Stream4_IRQHandler+0x10>)
 8001466:	f000 fd15 	bl	8001e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000044c 	.word	0x2000044c

08001474 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <DMA1_Stream6_IRQHandler+0x10>)
 800147a:	f000 fd0b 	bl	8001e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000150 	.word	0x20000150

08001488 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <I2C1_EV_IRQHandler+0x10>)
 800148e:	f002 fe25 	bl	80040dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200000a8 	.word	0x200000a8

0800149c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <I2C2_EV_IRQHandler+0x10>)
 80014a2:	f002 fe1b 	bl	80040dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200000fc 	.word	0x200000fc

080014b0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <SPI2_IRQHandler+0x10>)
 80014b6:	f005 faf1 	bl	8006a9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000210 	.word	0x20000210

080014c4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <UART4_IRQHandler+0x10>)
 80014ca:	f006 f82f 	bl	800752c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000380 	.word	0x20000380

080014d8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <DMA2_Stream1_IRQHandler+0x10>)
 80014de:	f000 fcd9 	bl	8001e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000320 	.word	0x20000320

080014ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <DMA2_Stream2_IRQHandler+0x10>)
 80014f2:	f000 fccf 	bl	8001e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200004ac 	.word	0x200004ac

08001500 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <ETH_IRQHandler+0x10>)
 8001506:	f001 fb25 	bl	8002b54 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20003664 	.word	0x20003664

08001514 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <USART6_IRQHandler+0x10>)
 800151a:	f006 f807 	bl	800752c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000408 	.word	0x20000408

08001528 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <SPI4_IRQHandler+0x10>)
 800152e:	f005 fab5 	bl	8006a9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000268 	.word	0x20000268

0800153c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_kill>:

int _kill(int pid, int sig)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <_kill+0x20>)
 8001558:	2216      	movs	r2, #22
 800155a:	601a      	str	r2, [r3, #0]
	return -1;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	20008f48 	.word	0x20008f48

08001570 <_exit>:

void _exit (int status)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ffe5 	bl	800154c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001582:	e7fe      	b.n	8001582 <_exit+0x12>

08001584 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e00a      	b.n	80015ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001596:	f3af 8000 	nop.w
 800159a:	4601      	mov	r1, r0
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	b2ca      	uxtb	r2, r1
 80015a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf0      	blt.n	8001596 <_read+0x12>
	}

return len;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e009      	b.n	80015e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	60ba      	str	r2, [r7, #8]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbf1      	blt.n	80015d0 <_write+0x12>
	}
	return len;
 80015ec:	687b      	ldr	r3, [r7, #4]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_close>:

int _close(int file)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
	return -1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161e:	605a      	str	r2, [r3, #4]
	return 0;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_isatty>:

int _isatty(int file)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
	return 1;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
	return 0;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d205      	bcs.n	800169c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <_sbrk+0x6c>)
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	20030000 	.word	0x20030000
 80016c0:	00000400 	.word	0x00000400
 80016c4:	20000570 	.word	0x20000570
 80016c8:	20008f58 	.word	0x20008f58
 80016cc:	20008f48 	.word	0x20008f48

080016d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <SystemInit+0x20>)
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <SystemInit+0x20>)
 80016dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 80016fa:	f00f fafb 	bl	8010cf4 <udp_new>
 80016fe:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 0, 132);
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <udpServer_init+0x44>)
 8001702:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 50014);  // 7 is the server UDP port
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	f24c 325e 	movw	r2, #50014	; 0xc35e
 800170a:	4619      	mov	r1, r3
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f00f f971 	bl	80109f4 <udp_bind>
 8001712:	4603      	mov	r3, r0
 8001714:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8001716:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <udpServer_init+0x36>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 800171e:	2200      	movs	r2, #0
 8001720:	4906      	ldr	r1, [pc, #24]	; (800173c <udpServer_init+0x48>)
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f00f fa84 	bl	8010c30 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8001728:	e002      	b.n	8001730 <udpServer_init+0x3c>
	   udp_remove(upcb);
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f00f faa0 	bl	8010c70 <udp_remove>
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	8400a8c0 	.word	0x8400a8c0
 800173c:	08001741 	.word	0x08001741

08001740 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b0a0      	sub	sp, #128	; 0x80
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
	struct pbuf *txBuf;

	/* Get the IP of the Client */
	char *remoteIP = ipaddr_ntoa(addr);
 800174e:	6838      	ldr	r0, [r7, #0]
 8001750:	f010 feca 	bl	80124e8 <ip4addr_ntoa>
 8001754:	67f8      	str	r0, [r7, #124]	; 0x7c

	char buf[100];


	int len = sprintf (buf,"Hello %s From UDP SERVER\n", (char*)p->payload);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	4917      	ldr	r1, [pc, #92]	; (80017bc <udp_receive_callback+0x7c>)
 8001760:	4618      	mov	r0, r3
 8001762:	f011 ff1f 	bl	80135a4 <siprintf>
 8001766:	67b8      	str	r0, [r7, #120]	; 0x78

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8001768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800176a:	b29b      	uxth	r3, r3
 800176c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001770:	4619      	mov	r1, r3
 8001772:	2036      	movs	r0, #54	; 0x36
 8001774:	f008 fcd8 	bl	800a128 <pbuf_alloc>
 8001778:	6778      	str	r0, [r7, #116]	; 0x74

	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, len);
 800177a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800177c:	b29a      	uxth	r2, r3
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4619      	mov	r1, r3
 8001784:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001786:	f009 fa1f 	bl	800abc8 <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 800178a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800178e:	461a      	mov	r2, r3
 8001790:	6839      	ldr	r1, [r7, #0]
 8001792:	68b8      	ldr	r0, [r7, #8]
 8001794:	f00f f9b6 	bl	8010b04 <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8001798:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800179a:	68b8      	ldr	r0, [r7, #8]
 800179c:	f00e ff40 	bl	8010620 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 80017a0:	68b8      	ldr	r0, [r7, #8]
 80017a2:	f00f fa1d 	bl	8010be0 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 80017a6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80017a8:	f008 ffa2 	bl	800a6f0 <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f008 ff9f 	bl	800a6f0 <pbuf_free>
}
 80017b2:	bf00      	nop
 80017b4:	3780      	adds	r7, #128	; 0x80
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	08014920 	.word	0x08014920

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c6:	490e      	ldr	r1, [pc, #56]	; (8001800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017dc:	4c0b      	ldr	r4, [pc, #44]	; (800180c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ea:	f7ff ff71 	bl	80016d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f011 fe1f 	bl	8013430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7fe feff 	bl	80005f4 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001804:	08017578 	.word	0x08017578
  ldr r2, =_sbss
 8001808:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800180c:	20008f58 	.word	0x20008f58

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <HAL_Init+0x40>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_Init+0x40>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_Init+0x40>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f94f 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fa58 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f967 	bl	8001b4a <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 f92f 	bl	8001af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000014 	.word	0x20000014
 80018b0:	2000001c 	.word	0x2000001c
 80018b4:	20000018 	.word	0x20000018

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2000001c 	.word	0x2000001c
 80018dc:	20000574 	.word	0x20000574

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000574 	.word	0x20000574

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000001c 	.word	0x2000001c

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db0b      	blt.n	80019ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4907      	ldr	r1, [pc, #28]	; (80019dc <__NVIC_EnableIRQ+0x38>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	; (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff8e 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff29 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff3e 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff8e 	bl	8001a34 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5d 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff31 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa2 	bl	8001a9c <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff feb6 	bl	80018e0 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e099      	b.n	8001cb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba0:	e00f      	b.n	8001bc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ba2:	f7ff fe9d 	bl	80018e0 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d908      	bls.n	8001bc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2203      	movs	r2, #3
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e078      	b.n	8001cb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e8      	bne.n	8001ba2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_DMA_Init+0x158>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d107      	bne.n	8001c2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	4313      	orrs	r3, r2
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f023 0307 	bic.w	r3, r3, #7
 8001c42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d117      	bne.n	8001c86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00e      	beq.n	8001c86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fb1b 	bl	80022a4 <DMA_CheckFifoParam>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2240      	movs	r2, #64	; 0x40
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c82:	2301      	movs	r3, #1
 8001c84:	e016      	b.n	8001cb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 fad2 	bl	8002238 <DMA_CalcBaseAndBitshift>
 8001c94:	4603      	mov	r3, r0
 8001c96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	223f      	movs	r2, #63	; 0x3f
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	f010803f 	.word	0xf010803f

08001cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_DMA_Start_IT+0x26>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e040      	b.n	8001d68 <HAL_DMA_Start_IT+0xa8>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d12f      	bne.n	8001d5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fa64 	bl	80021dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	223f      	movs	r2, #63	; 0x3f
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0216 	orr.w	r2, r2, #22
 8001d2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0208 	orr.w	r2, r2, #8
 8001d46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e005      	b.n	8001d66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
 8001d64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d7e:	f7ff fdaf 	bl	80018e0 <HAL_GetTick>
 8001d82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d008      	beq.n	8001da2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2280      	movs	r2, #128	; 0x80
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e052      	b.n	8001e48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0216 	bic.w	r2, r2, #22
 8001db0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d103      	bne.n	8001dd2 <HAL_DMA_Abort+0x62>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0208 	bic.w	r2, r2, #8
 8001de0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0201 	bic.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001df2:	e013      	b.n	8001e1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001df4:	f7ff fd74 	bl	80018e0 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d90c      	bls.n	8001e1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2220      	movs	r2, #32
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e015      	b.n	8001e48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1e4      	bne.n	8001df4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	223f      	movs	r2, #63	; 0x3f
 8001e30:	409a      	lsls	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d004      	beq.n	8001e6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00c      	b.n	8001e88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2205      	movs	r2, #5
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0201 	bic.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ea0:	4b8e      	ldr	r3, [pc, #568]	; (80020dc <HAL_DMA_IRQHandler+0x248>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a8e      	ldr	r2, [pc, #568]	; (80020e0 <HAL_DMA_IRQHandler+0x24c>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0a9b      	lsrs	r3, r3, #10
 8001eac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	2208      	movs	r2, #8
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d01a      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0204 	bic.w	r2, r2, #4
 8001ee6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	2208      	movs	r2, #8
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	2201      	movs	r2, #1
 8001f06:	409a      	lsls	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d012      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	2201      	movs	r2, #1
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f043 0202 	orr.w	r2, r3, #2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d012      	beq.n	8001f6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	2204      	movs	r2, #4
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f043 0204 	orr.w	r2, r3, #4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	2210      	movs	r2, #16
 8001f72:	409a      	lsls	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d043      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d03c      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	2210      	movs	r2, #16
 8001f90:	409a      	lsls	r2, r3
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d018      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d108      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d024      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
 8001fc2:	e01f      	b.n	8002004 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01b      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
 8001fd4:	e016      	b.n	8002004 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d107      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0208 	bic.w	r2, r2, #8
 8001ff2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2220      	movs	r2, #32
 800200a:	409a      	lsls	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 808f 	beq.w	8002134 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8087 	beq.w	8002134 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	2220      	movs	r2, #32
 800202c:	409a      	lsls	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b05      	cmp	r3, #5
 800203c:	d136      	bne.n	80020ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0216 	bic.w	r2, r2, #22
 800204c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800205c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d103      	bne.n	800206e <HAL_DMA_IRQHandler+0x1da>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0208 	bic.w	r2, r2, #8
 800207c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	223f      	movs	r2, #63	; 0x3f
 8002084:	409a      	lsls	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d07e      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
        }
        return;
 80020aa:	e079      	b.n	80021a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d01d      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10d      	bne.n	80020e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d031      	beq.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4798      	blx	r3
 80020d8:	e02c      	b.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
 80020da:	bf00      	nop
 80020dc:	20000014 	.word	0x20000014
 80020e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d023      	beq.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
 80020f4:	e01e      	b.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10f      	bne.n	8002124 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0210 	bic.w	r2, r2, #16
 8002112:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	2b00      	cmp	r3, #0
 800213a:	d032      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d022      	beq.n	800218e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2205      	movs	r2, #5
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	3301      	adds	r3, #1
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	429a      	cmp	r2, r3
 800216a:	d307      	bcc.n	800217c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f2      	bne.n	8002160 <HAL_DMA_IRQHandler+0x2cc>
 800217a:	e000      	b.n	800217e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800217c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
 800219e:	e000      	b.n	80021a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021a0:	bf00      	nop
    }
  }
}
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b6:	b2db      	uxtb	r3, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b40      	cmp	r3, #64	; 0x40
 8002208:	d108      	bne.n	800221c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800221a:	e007      	b.n	800222c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	3b10      	subs	r3, #16
 8002248:	4a14      	ldr	r2, [pc, #80]	; (800229c <DMA_CalcBaseAndBitshift+0x64>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d909      	bls.n	800227a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800226e:	f023 0303 	bic.w	r3, r3, #3
 8002272:	1d1a      	adds	r2, r3, #4
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	659a      	str	r2, [r3, #88]	; 0x58
 8002278:	e007      	b.n	800228a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002282:	f023 0303 	bic.w	r3, r3, #3
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	aaaaaaab 	.word	0xaaaaaaab
 80022a0:	08017334 	.word	0x08017334

080022a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d11f      	bne.n	80022fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d856      	bhi.n	8002372 <DMA_CheckFifoParam+0xce>
 80022c4:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <DMA_CheckFifoParam+0x28>)
 80022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ca:	bf00      	nop
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	080022ef 	.word	0x080022ef
 80022d4:	080022dd 	.word	0x080022dd
 80022d8:	08002373 	.word	0x08002373
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d046      	beq.n	8002376 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ec:	e043      	b.n	8002376 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022f6:	d140      	bne.n	800237a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022fc:	e03d      	b.n	800237a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002306:	d121      	bne.n	800234c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d837      	bhi.n	800237e <DMA_CheckFifoParam+0xda>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <DMA_CheckFifoParam+0x70>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002325 	.word	0x08002325
 8002318:	0800232b 	.word	0x0800232b
 800231c:	08002325 	.word	0x08002325
 8002320:	0800233d 	.word	0x0800233d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
      break;
 8002328:	e030      	b.n	800238c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d025      	beq.n	8002382 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800233a:	e022      	b.n	8002382 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002344:	d11f      	bne.n	8002386 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800234a:	e01c      	b.n	8002386 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d903      	bls.n	800235a <DMA_CheckFifoParam+0xb6>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d003      	beq.n	8002360 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002358:	e018      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
      break;
 800235e:	e015      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00e      	beq.n	800238a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
      break;
 8002370:	e00b      	b.n	800238a <DMA_CheckFifoParam+0xe6>
      break;
 8002372:	bf00      	nop
 8002374:	e00a      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 8002376:	bf00      	nop
 8002378:	e008      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 800237a:	bf00      	nop
 800237c:	e006      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 800237e:	bf00      	nop
 8002380:	e004      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 8002382:	bf00      	nop
 8002384:	e002      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;   
 8002386:	bf00      	nop
 8002388:	e000      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 800238a:	bf00      	nop
    }
  } 
  
  return status; 
 800238c:	7bfb      	ldrb	r3, [r7, #15]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop

0800239c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80023ac:	4ba1      	ldr	r3, [pc, #644]	; (8002634 <HAL_ETH_Init+0x298>)
 80023ae:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e182      	b.n	80026c8 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f006 fb2e 	bl	8008a38 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	4b95      	ldr	r3, [pc, #596]	; (8002638 <HAL_ETH_Init+0x29c>)
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	4a94      	ldr	r2, [pc, #592]	; (8002638 <HAL_ETH_Init+0x29c>)
 80023e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ea:	6453      	str	r3, [r2, #68]	; 0x44
 80023ec:	4b92      	ldr	r3, [pc, #584]	; (8002638 <HAL_ETH_Init+0x29c>)
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80023f8:	4b90      	ldr	r3, [pc, #576]	; (800263c <HAL_ETH_Init+0x2a0>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a8f      	ldr	r2, [pc, #572]	; (800263c <HAL_ETH_Init+0x2a0>)
 80023fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002402:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002404:	4b8d      	ldr	r3, [pc, #564]	; (800263c <HAL_ETH_Init+0x2a0>)
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	498b      	ldr	r1, [pc, #556]	; (800263c <HAL_ETH_Init+0x2a0>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002428:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800242a:	f7ff fa59 	bl	80018e0 <HAL_GetTick>
 800242e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002430:	e011      	b.n	8002456 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002432:	f7ff fa55 	bl	80018e0 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002440:	d909      	bls.n	8002456 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2203      	movs	r2, #3
 8002446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e138      	b.n	80026c8 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1e4      	bne.n	8002432 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f023 031c 	bic.w	r3, r3, #28
 8002476:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002478:	f003 ffd2 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 800247c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	4a6f      	ldr	r2, [pc, #444]	; (8002640 <HAL_ETH_Init+0x2a4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d908      	bls.n	8002498 <HAL_ETH_Init+0xfc>
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4a6e      	ldr	r2, [pc, #440]	; (8002644 <HAL_ETH_Init+0x2a8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d804      	bhi.n	8002498 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f043 0308 	orr.w	r3, r3, #8
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e027      	b.n	80024e8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	4a6a      	ldr	r2, [pc, #424]	; (8002644 <HAL_ETH_Init+0x2a8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d908      	bls.n	80024b2 <HAL_ETH_Init+0x116>
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	4a64      	ldr	r2, [pc, #400]	; (8002634 <HAL_ETH_Init+0x298>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d204      	bcs.n	80024b2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f043 030c 	orr.w	r3, r3, #12
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	e01a      	b.n	80024e8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	4a5f      	ldr	r2, [pc, #380]	; (8002634 <HAL_ETH_Init+0x298>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d303      	bcc.n	80024c2 <HAL_ETH_Init+0x126>
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4a62      	ldr	r2, [pc, #392]	; (8002648 <HAL_ETH_Init+0x2ac>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d911      	bls.n	80024e6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4a60      	ldr	r2, [pc, #384]	; (8002648 <HAL_ETH_Init+0x2ac>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d908      	bls.n	80024dc <HAL_ETH_Init+0x140>
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4a5f      	ldr	r2, [pc, #380]	; (800264c <HAL_ETH_Init+0x2b0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d804      	bhi.n	80024dc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e005      	b.n	80024e8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f043 0310 	orr.w	r3, r3, #16
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	e000      	b.n	80024e8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80024e6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80024f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024f4:	2100      	movs	r1, #0
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fc16 	bl	8002d28 <HAL_ETH_WritePHYRegister>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002506:	6939      	ldr	r1, [r7, #16]
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fdcb 	bl	80030a4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0d6      	b.n	80026c8 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800251a:	20ff      	movs	r0, #255	; 0xff
 800251c:	f7ff f9ec 	bl	80018f8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a4 	beq.w	8002672 <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800252a:	f7ff f9d9 	bl	80018e0 <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002530:	f107 030c 	add.w	r3, r7, #12
 8002534:	461a      	mov	r2, r3
 8002536:	2101      	movs	r1, #1
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fb8d 	bl	8002c58 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800253e:	f7ff f9cf 	bl	80018e0 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d90f      	bls.n	8002570 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002554:	6939      	ldr	r1, [r7, #16]
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fda4 	bl	80030a4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e0ab      	b.n	80026c8 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0da      	beq.n	8002530 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800257a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800257e:	2100      	movs	r1, #0
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fbd1 	bl	8002d28 <HAL_ETH_WritePHYRegister>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002590:	6939      	ldr	r1, [r7, #16]
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fd86 	bl	80030a4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80025a0:	2301      	movs	r3, #1
 80025a2:	e091      	b.n	80026c8 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80025a4:	f7ff f99c 	bl	80018e0 <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	461a      	mov	r2, r3
 80025b0:	2101      	movs	r1, #1
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fb50 	bl	8002c58 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80025b8:	f7ff f992 	bl	80018e0 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d90f      	bls.n	80025ea <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80025ce:	6939      	ldr	r1, [r7, #16]
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fd67 	bl	80030a4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e06e      	b.n	80026c8 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0da      	beq.n	80025aa <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	461a      	mov	r2, r3
 80025fa:	2110      	movs	r1, #16
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fb2b 	bl	8002c58 <HAL_ETH_ReadPHYRegister>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800260c:	6939      	ldr	r1, [r7, #16]
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fd48 	bl	80030a4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800261c:	2301      	movs	r3, #1
 800261e:	e053      	b.n	80026c8 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d012      	beq.n	8002650 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	e010      	b.n	8002656 <HAL_ETH_Init+0x2ba>
 8002634:	03938700 	.word	0x03938700
 8002638:	40023800 	.word	0x40023800
 800263c:	40013800 	.word	0x40013800
 8002640:	01312cff 	.word	0x01312cff
 8002644:	02160ebf 	.word	0x02160ebf
 8002648:	05f5e0ff 	.word	0x05f5e0ff
 800264c:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	e026      	b.n	80026b6 <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	e021      	b.n	80026b6 <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	08db      	lsrs	r3, r3, #3
 8002678:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002682:	4313      	orrs	r3, r2
 8002684:	b29b      	uxth	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	2100      	movs	r1, #0
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fb4c 	bl	8002d28 <HAL_ETH_WritePHYRegister>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800269a:	6939      	ldr	r1, [r7, #16]
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fd01 	bl	80030a4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00c      	b.n	80026c8 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80026ae:	f640 70ff 	movw	r0, #4095	; 0xfff
 80026b2:	f7ff f921 	bl	80018f8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80026b6:	6939      	ldr	r1, [r7, #16]
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 fcf3 	bl	80030a4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3720      	adds	r7, #32
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_ETH_DMATxDescListInit+0x20>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e051      	b.n	8002794 <HAL_ETH_DMATxDescListInit+0xc4>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e030      	b.n	800276e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	015b      	lsls	r3, r3, #5
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	4413      	add	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800271c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002724:	fb02 f303 	mul.w	r3, r2, r3
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	461a      	mov	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	3b01      	subs	r3, #1
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	429a      	cmp	r2, r3
 800274e:	d208      	bcs.n	8002762 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3301      	adds	r3, #1
 8002754:	015b      	lsls	r3, r3, #5
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	4413      	add	r3, r2
 800275a:	461a      	mov	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	60da      	str	r2, [r3, #12]
 8002760:	e002      	b.n	8002768 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3301      	adds	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d3ca      	bcc.n	800270c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002780:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_ETH_DMARxDescListInit+0x20>
 80027bc:	2302      	movs	r3, #2
 80027be:	e055      	b.n	800286c <HAL_ETH_DMARxDescListInit+0xcc>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e034      	b.n	8002846 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	015b      	lsls	r3, r3, #5
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	4413      	add	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80027ec:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80027f4:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	4413      	add	r3, r2
 8002804:	461a      	mov	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	3b01      	subs	r3, #1
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	d208      	bcs.n	800283a <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3301      	adds	r3, #1
 800282c:	015b      	lsls	r3, r3, #5
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	4413      	add	r3, r2
 8002832:	461a      	mov	r2, r3
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	e002      	b.n	8002840 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3301      	adds	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d3c6      	bcc.n	80027dc <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002858:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_ETH_TransmitFrame+0x24>
 8002898:	2302      	movs	r3, #2
 800289a:	e0cc      	b.n	8002a36 <HAL_ETH_TransmitFrame+0x1be>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0b7      	b.n	8002a36 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da09      	bge.n	80028e4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2212      	movs	r2, #18
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0a8      	b.n	8002a36 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d915      	bls.n	800291a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	4a54      	ldr	r2, [pc, #336]	; (8002a44 <HAL_ETH_TransmitFrame+0x1cc>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0a9b      	lsrs	r3, r3, #10
 80028f8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <HAL_ETH_TransmitFrame+0x1cc>)
 80028fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002902:	0a9b      	lsrs	r3, r3, #10
 8002904:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3301      	adds	r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e001      	b.n	800291e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800291a:	2301      	movs	r3, #1
 800291c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d11c      	bne.n	800295e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002932:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800293e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800294e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
 800295c:	e04b      	b.n	80029f6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	e044      	b.n	80029ee <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002972:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d107      	bne.n	800298a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002988:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002992:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3b01      	subs	r3, #1
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	429a      	cmp	r2, r3
 800299c:	d116      	bne.n	80029cc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80029ac:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	4a25      	ldr	r2, [pc, #148]	; (8002a48 <HAL_ETH_TransmitFrame+0x1d0>)
 80029b2:	fb03 f202 	mul.w	r2, r3, r2
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80029be:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80029ca:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029da:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	461a      	mov	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	3301      	adds	r3, #1
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d3b6      	bcc.n	8002964 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00d      	beq.n	8002a24 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a10:	461a      	mov	r2, r3
 8002a12:	2304      	movs	r3, #4
 8002a14:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2300      	movs	r3, #0
 8002a22:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	ac02b00b 	.word	0xac02b00b
 8002a48:	fffffa0c 	.word	0xfffffa0c

08002a4c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_ETH_GetReceivedFrame+0x1a>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e070      	b.n	8002b48 <HAL_ETH_GetReceivedFrame+0xfc>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	db5a      	blt.n	8002b36 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d030      	beq.n	8002af0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d103      	bne.n	8002aa8 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	0c1b      	lsrs	r3, r3, #16
 8002ab8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002abc:	3b04      	subs	r3, #4
 8002abe:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e02b      	b.n	8002b48 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d010      	beq.n	8002b20 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b1e:	e00a      	b.n	8002b36 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	461a      	mov	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d112      	bne.n	8002b94 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f85e 	bl	8002c30 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2340      	movs	r3, #64	; 0x40
 8002b80:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b92:	e01a      	b.n	8002bca <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d111      	bne.n	8002bca <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f838 	bl	8002c1c <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bd8:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bec:	d112      	bne.n	8002c14 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f828 	bl	8002c44 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c02:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	460b      	mov	r3, r1
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b82      	cmp	r3, #130	; 0x82
 8002c78:	d101      	bne.n	8002c7e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e050      	b.n	8002d20 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2282      	movs	r2, #130	; 0x82
 8002c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f003 031c 	and.w	r3, r3, #28
 8002c94:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8a1b      	ldrh	r3, [r3, #16]
 8002c9a:	02db      	lsls	r3, r3, #11
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002ca4:	897b      	ldrh	r3, [r7, #10]
 8002ca6:	019b      	lsls	r3, r3, #6
 8002ca8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f023 0302 	bic.w	r3, r3, #2
 8002cb8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002cca:	f7fe fe09 	bl	80018e0 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cd0:	e015      	b.n	8002cfe <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002cd2:	f7fe fe05 	bl	80018e0 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d309      	bcc.n	8002cf6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e014      	b.n	8002d20 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e4      	bne.n	8002cd2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	460b      	mov	r3, r1
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b42      	cmp	r3, #66	; 0x42
 8002d48:	d101      	bne.n	8002d4e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e04e      	b.n	8002dec <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2242      	movs	r2, #66	; 0x42
 8002d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f003 031c 	and.w	r3, r3, #28
 8002d64:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8a1b      	ldrh	r3, [r3, #16]
 8002d6a:	02db      	lsls	r3, r3, #11
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002d74:	897b      	ldrh	r3, [r7, #10]
 8002d76:	019b      	lsls	r3, r3, #6
 8002d78:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002da4:	f7fe fd9c 	bl	80018e0 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002daa:	e015      	b.n	8002dd8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002dac:	f7fe fd98 	bl	80018e0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dba:	d309      	bcc.n	8002dd0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e00d      	b.n	8002dec <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e4      	bne.n	8002dac <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_ETH_Start+0x16>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e01f      	b.n	8002e4a <HAL_ETH_Start+0x56>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fb40 	bl	80034a0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fb77 	bl	8003514 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fc06 	bl	8003638 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fbab 	bl	8003588 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fbd4 	bl	80035e0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_ETH_Stop+0x16>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e01f      	b.n	8002ea8 <HAL_ETH_Stop+0x56>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fb9b 	bl	80035b4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fbc4 	bl	800360c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fb62 	bl	800354e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fbd4 	bl	8003638 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fb22 	bl	80034da <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_ETH_ConfigMAC+0x1c>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e0e4      	b.n	8003096 <HAL_ETH_ConfigMAC+0x1e6>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80b1 	beq.w	8003046 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4b6c      	ldr	r3, [pc, #432]	; (80030a0 <HAL_ETH_ConfigMAC+0x1f0>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002efc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002f02:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002f08:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002f0e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002f14:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002f1a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002f20:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002f26:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002f2c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002f32:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002f38:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002f3e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f56:	2001      	movs	r0, #1
 8002f58:	f7fe fcce 	bl	80018f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002f6c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002f72:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002f78:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002f7e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002f84:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002f8a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002f96:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002f98:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f7fe fca8 	bl	80018f8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002fb8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fc2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002fe0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002fe6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002fec:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002ff2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002ff8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003010:	2001      	movs	r0, #1
 8003012:	f7fe fc71 	bl	80018f8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003036:	2001      	movs	r0, #1
 8003038:	f7fe fc5e 	bl	80018f8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	61da      	str	r2, [r3, #28]
 8003044:	e01e      	b.n	8003084 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003054:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003076:	2001      	movs	r0, #1
 8003078:	f7fe fc3e 	bl	80018f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	ff20810f 	.word	0xff20810f

080030a4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b0b0      	sub	sp, #192	; 0xc0
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030c0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80030d2:	2300      	movs	r3, #0
 80030d4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80030da:	2300      	movs	r3, #0
 80030dc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80030de:	2300      	movs	r3, #0
 80030e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80030ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ee:	663b      	str	r3, [r7, #96]	; 0x60
 80030f0:	e001      	b.n	80030f6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80030f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030fa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003100:	2300      	movs	r3, #0
 8003102:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003108:	2300      	movs	r3, #0
 800310a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800310c:	2300      	movs	r3, #0
 800310e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003110:	2340      	movs	r3, #64	; 0x40
 8003112:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003132:	2300      	movs	r3, #0
 8003134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003138:	2300      	movs	r3, #0
 800313a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800313e:	2300      	movs	r3, #0
 8003140:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003162:	2300      	movs	r3, #0
 8003164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003178:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800317c:	4baa      	ldr	r3, [pc, #680]	; (8003428 <ETH_MACDMAConfig+0x384>)
 800317e:	4013      	ands	r3, r2
 8003180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003184:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003188:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800318a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800318c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800318e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003190:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003196:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800319a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800319c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800319e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80031a4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80031a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80031a8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80031aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80031ac:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80031ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80031b0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80031b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80031b4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80031b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80031b8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80031ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031cc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031d8:	2001      	movs	r0, #1
 80031da:	f7fe fb8d 	bl	80018f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031e6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80031e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80031ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80031ec:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80031ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80031f0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80031f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80031f6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80031f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80031fc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80031fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003202:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003208:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800320c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003214:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003216:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003222:	2001      	movs	r0, #1
 8003224:	f7fe fb68 	bl	80018f8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003230:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800323a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003244:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003250:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003254:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003258:	4013      	ands	r3, r2
 800325a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800325e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003262:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003264:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003268:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800326a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800326e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003274:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800327a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800327c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003280:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003282:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003294:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f7fe fb29 	bl	80018f8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032ae:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80032b0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80032b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80032ca:	2001      	movs	r0, #1
 80032cc:	f7fe fb14 	bl	80018f8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032d8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80032de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80032e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032ec:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80032fe:	2304      	movs	r3, #4
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800330e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003318:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800331e:	2300      	movs	r3, #0
 8003320:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003322:	2300      	movs	r3, #0
 8003324:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003334:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003338:	4b3c      	ldr	r3, [pc, #240]	; (800342c <ETH_MACDMAConfig+0x388>)
 800333a:	4013      	ands	r3, r2
 800333c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003340:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003342:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003344:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003346:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003348:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800334a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800334c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800334e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003350:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003352:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003354:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003356:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003358:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800335c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003360:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003362:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003374:	461a      	mov	r2, r3
 8003376:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800337a:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800338a:	2001      	movs	r0, #1
 800338c:	f7fe fab4 	bl	80018f8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003398:	461a      	mov	r2, r3
 800339a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800339e:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80033a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80033a4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80033a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80033a8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80033ac:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80033ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80033b0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80033b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80033b6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80033b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80033ba:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033c8:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80033d8:	2001      	movs	r0, #1
 80033da:	f7fe fa8d 	bl	80018f8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e6:	461a      	mov	r2, r3
 80033e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033ec:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d10d      	bne.n	8003412 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800340c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003410:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	461a      	mov	r2, r3
 8003418:	2100      	movs	r1, #0
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f808 	bl	8003430 <ETH_MACAddressConfig>
}
 8003420:	bf00      	nop
 8003422:	37c0      	adds	r7, #192	; 0xc0
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	ff20810f 	.word	0xff20810f
 800342c:	f8de3f23 	.word	0xf8de3f23

08003430 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3305      	adds	r3, #5
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	3204      	adds	r2, #4
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <ETH_MACAddressConfig+0x68>)
 8003452:	4413      	add	r3, r2
 8003454:	461a      	mov	r2, r3
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3303      	adds	r3, #3
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	061a      	lsls	r2, r3, #24
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3302      	adds	r3, #2
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3301      	adds	r3, #1
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	4313      	orrs	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	7812      	ldrb	r2, [r2, #0]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <ETH_MACAddressConfig+0x6c>)
 8003482:	4413      	add	r3, r2
 8003484:	461a      	mov	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	6013      	str	r3, [r2, #0]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40028040 	.word	0x40028040
 800349c:	40028044 	.word	0x40028044

080034a0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0208 	orr.w	r2, r2, #8
 80034ba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80034c4:	2001      	movs	r0, #1
 80034c6:	f000 f8dd 	bl	8003684 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	601a      	str	r2, [r3, #0]
}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0208 	bic.w	r2, r2, #8
 80034f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80034fe:	2001      	movs	r0, #1
 8003500:	f000 f8c0 	bl	8003684 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	601a      	str	r2, [r3, #0]
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0204 	orr.w	r2, r2, #4
 800352e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003538:	2001      	movs	r0, #1
 800353a:	f000 f8a3 	bl	8003684 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0204 	bic.w	r2, r2, #4
 8003568:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003572:	2001      	movs	r0, #1
 8003574:	f000 f886 	bl	8003684 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	601a      	str	r2, [r3, #0]
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035a6:	6193      	str	r3, [r2, #24]
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035d2:	6193      	str	r3, [r2, #24]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	f043 0302 	orr.w	r3, r3, #2
 80035fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035fe:	6193      	str	r3, [r2, #24]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	f023 0302 	bic.w	r3, r3, #2
 8003626:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800362a:	6193      	str	r3, [r2, #24]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003656:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800365a:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003668:	2001      	movs	r0, #1
 800366a:	f000 f80b 	bl	8003684 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003678:	6193      	str	r3, [r2, #24]
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <ETH_Delay+0x38>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0b      	ldr	r2, [pc, #44]	; (80036c0 <ETH_Delay+0x3c>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	0a5b      	lsrs	r3, r3, #9
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80036a0:	bf00      	nop
  } 
  while (Delay --);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1e5a      	subs	r2, r3, #1
 80036a6:	60fa      	str	r2, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f9      	bne.n	80036a0 <ETH_Delay+0x1c>
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000014 	.word	0x20000014
 80036c0:	10624dd3 	.word	0x10624dd3

080036c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	e177      	b.n	80039d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036e0:	2201      	movs	r2, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	f040 8166 	bne.w	80039ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d005      	beq.n	8003716 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003712:	2b02      	cmp	r3, #2
 8003714:	d130      	bne.n	8003778 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800374c:	2201      	movs	r2, #1
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 0201 	and.w	r2, r3, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b03      	cmp	r3, #3
 8003782:	d017      	beq.n	80037b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d123      	bne.n	8003808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	08da      	lsrs	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3208      	adds	r2, #8
 80037c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	220f      	movs	r2, #15
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	08da      	lsrs	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3208      	adds	r2, #8
 8003802:	69b9      	ldr	r1, [r7, #24]
 8003804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0203 	and.w	r2, r3, #3
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80c0 	beq.w	80039ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b66      	ldr	r3, [pc, #408]	; (80039e8 <HAL_GPIO_Init+0x324>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	4a65      	ldr	r2, [pc, #404]	; (80039e8 <HAL_GPIO_Init+0x324>)
 8003854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003858:	6453      	str	r3, [r2, #68]	; 0x44
 800385a:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <HAL_GPIO_Init+0x324>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003866:	4a61      	ldr	r2, [pc, #388]	; (80039ec <HAL_GPIO_Init+0x328>)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	089b      	lsrs	r3, r3, #2
 800386c:	3302      	adds	r3, #2
 800386e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	220f      	movs	r2, #15
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a58      	ldr	r2, [pc, #352]	; (80039f0 <HAL_GPIO_Init+0x32c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d037      	beq.n	8003902 <HAL_GPIO_Init+0x23e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a57      	ldr	r2, [pc, #348]	; (80039f4 <HAL_GPIO_Init+0x330>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d031      	beq.n	80038fe <HAL_GPIO_Init+0x23a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a56      	ldr	r2, [pc, #344]	; (80039f8 <HAL_GPIO_Init+0x334>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d02b      	beq.n	80038fa <HAL_GPIO_Init+0x236>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a55      	ldr	r2, [pc, #340]	; (80039fc <HAL_GPIO_Init+0x338>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d025      	beq.n	80038f6 <HAL_GPIO_Init+0x232>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a54      	ldr	r2, [pc, #336]	; (8003a00 <HAL_GPIO_Init+0x33c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01f      	beq.n	80038f2 <HAL_GPIO_Init+0x22e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a53      	ldr	r2, [pc, #332]	; (8003a04 <HAL_GPIO_Init+0x340>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d019      	beq.n	80038ee <HAL_GPIO_Init+0x22a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a52      	ldr	r2, [pc, #328]	; (8003a08 <HAL_GPIO_Init+0x344>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <HAL_GPIO_Init+0x226>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a51      	ldr	r2, [pc, #324]	; (8003a0c <HAL_GPIO_Init+0x348>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00d      	beq.n	80038e6 <HAL_GPIO_Init+0x222>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a50      	ldr	r2, [pc, #320]	; (8003a10 <HAL_GPIO_Init+0x34c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <HAL_GPIO_Init+0x21e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4f      	ldr	r2, [pc, #316]	; (8003a14 <HAL_GPIO_Init+0x350>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <HAL_GPIO_Init+0x21a>
 80038da:	2309      	movs	r3, #9
 80038dc:	e012      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038de:	230a      	movs	r3, #10
 80038e0:	e010      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038e2:	2308      	movs	r3, #8
 80038e4:	e00e      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038e6:	2307      	movs	r3, #7
 80038e8:	e00c      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038ea:	2306      	movs	r3, #6
 80038ec:	e00a      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038ee:	2305      	movs	r3, #5
 80038f0:	e008      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038f2:	2304      	movs	r3, #4
 80038f4:	e006      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038f6:	2303      	movs	r3, #3
 80038f8:	e004      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e002      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_GPIO_Init+0x240>
 8003902:	2300      	movs	r3, #0
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	f002 0203 	and.w	r2, r2, #3
 800390a:	0092      	lsls	r2, r2, #2
 800390c:	4093      	lsls	r3, r2
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003914:	4935      	ldr	r1, [pc, #212]	; (80039ec <HAL_GPIO_Init+0x328>)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	3302      	adds	r3, #2
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003922:	4b3d      	ldr	r3, [pc, #244]	; (8003a18 <HAL_GPIO_Init+0x354>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003946:	4a34      	ldr	r2, [pc, #208]	; (8003a18 <HAL_GPIO_Init+0x354>)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800394c:	4b32      	ldr	r3, [pc, #200]	; (8003a18 <HAL_GPIO_Init+0x354>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003970:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <HAL_GPIO_Init+0x354>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003976:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <HAL_GPIO_Init+0x354>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800399a:	4a1f      	ldr	r2, [pc, #124]	; (8003a18 <HAL_GPIO_Init+0x354>)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039a0:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <HAL_GPIO_Init+0x354>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039c4:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <HAL_GPIO_Init+0x354>)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3301      	adds	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	f67f ae84 	bls.w	80036e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3724      	adds	r7, #36	; 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40013800 	.word	0x40013800
 80039f0:	40020000 	.word	0x40020000
 80039f4:	40020400 	.word	0x40020400
 80039f8:	40020800 	.word	0x40020800
 80039fc:	40020c00 	.word	0x40020c00
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40021400 	.word	0x40021400
 8003a08:	40021800 	.word	0x40021800
 8003a0c:	40021c00 	.word	0x40021c00
 8003a10:	40022000 	.word	0x40022000
 8003a14:	40022400 	.word	0x40022400
 8003a18:	40013c00 	.word	0x40013c00

08003a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a2c:	787b      	ldrb	r3, [r7, #1]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a38:	e003      	b.n	8003a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a3a:	887b      	ldrh	r3, [r7, #2]
 8003a3c:	041a      	lsls	r2, r3, #16
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	619a      	str	r2, [r3, #24]
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e12b      	b.n	8003cba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fd f968 	bl	8000d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	; 0x24
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ab4:	f002 fcc0 	bl	8006438 <HAL_RCC_GetPCLK1Freq>
 8003ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4a81      	ldr	r2, [pc, #516]	; (8003cc4 <HAL_I2C_Init+0x274>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d807      	bhi.n	8003ad4 <HAL_I2C_Init+0x84>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a80      	ldr	r2, [pc, #512]	; (8003cc8 <HAL_I2C_Init+0x278>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bf94      	ite	ls
 8003acc:	2301      	movls	r3, #1
 8003ace:	2300      	movhi	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e006      	b.n	8003ae2 <HAL_I2C_Init+0x92>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4a7d      	ldr	r2, [pc, #500]	; (8003ccc <HAL_I2C_Init+0x27c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	bf94      	ite	ls
 8003adc:	2301      	movls	r3, #1
 8003ade:	2300      	movhi	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0e7      	b.n	8003cba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4a78      	ldr	r2, [pc, #480]	; (8003cd0 <HAL_I2C_Init+0x280>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0c9b      	lsrs	r3, r3, #18
 8003af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4a6a      	ldr	r2, [pc, #424]	; (8003cc4 <HAL_I2C_Init+0x274>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d802      	bhi.n	8003b24 <HAL_I2C_Init+0xd4>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	3301      	adds	r3, #1
 8003b22:	e009      	b.n	8003b38 <HAL_I2C_Init+0xe8>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	4a69      	ldr	r2, [pc, #420]	; (8003cd4 <HAL_I2C_Init+0x284>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	3301      	adds	r3, #1
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	495c      	ldr	r1, [pc, #368]	; (8003cc4 <HAL_I2C_Init+0x274>)
 8003b54:	428b      	cmp	r3, r1
 8003b56:	d819      	bhi.n	8003b8c <HAL_I2C_Init+0x13c>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	1e59      	subs	r1, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b66:	1c59      	adds	r1, r3, #1
 8003b68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_I2C_Init+0x138>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1e59      	subs	r1, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b86:	e051      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	e04f      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d111      	bne.n	8003bb8 <HAL_I2C_Init+0x168>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e58      	subs	r0, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	440b      	add	r3, r1
 8003ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e012      	b.n	8003bde <HAL_I2C_Init+0x18e>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1e58      	subs	r0, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	0099      	lsls	r1, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Init+0x196>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e022      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10e      	bne.n	8003c0c <HAL_I2C_Init+0x1bc>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1e58      	subs	r0, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6859      	ldr	r1, [r3, #4]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	440b      	add	r3, r1
 8003bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c00:	3301      	adds	r3, #1
 8003c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0a:	e00f      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1e58      	subs	r0, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	0099      	lsls	r1, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c22:	3301      	adds	r3, #1
 8003c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	6809      	ldr	r1, [r1, #0]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6911      	ldr	r1, [r2, #16]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68d2      	ldr	r2, [r2, #12]
 8003c66:	4311      	orrs	r1, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	000186a0 	.word	0x000186a0
 8003cc8:	001e847f 	.word	0x001e847f
 8003ccc:	003d08ff 	.word	0x003d08ff
 8003cd0:	431bde83 	.word	0x431bde83
 8003cd4:	10624dd3 	.word	0x10624dd3

08003cd8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	817b      	strh	r3, [r7, #10]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	f040 810d 	bne.w	8003f18 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cfe:	4b89      	ldr	r3, [pc, #548]	; (8003f24 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	08db      	lsrs	r3, r3, #3
 8003d04:	4a88      	ldr	r2, [pc, #544]	; (8003f28 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	0a1a      	lsrs	r2, r3, #8
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009a      	lsls	r2, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d116      	bne.n	8003d52 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f043 0220 	orr.w	r2, r3, #32
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e0e3      	b.n	8003f1a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d0db      	beq.n	8003d18 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_I2C_Master_Transmit_DMA+0x96>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e0d5      	b.n	8003f1a <HAL_I2C_Master_Transmit_DMA+0x242>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d007      	beq.n	8003d94 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2221      	movs	r2, #33	; 0x21
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2210      	movs	r2, #16
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	893a      	ldrh	r2, [r7, #8]
 8003dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4a56      	ldr	r2, [pc, #344]	; (8003f2c <HAL_I2C_Master_Transmit_DMA+0x254>)
 8003dd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003dd6:	897a      	ldrh	r2, [r7, #10]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d07b      	beq.n	8003edc <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d02a      	beq.n	8003e42 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	4a4f      	ldr	r2, [pc, #316]	; (8003f30 <HAL_I2C_Master_Transmit_DMA+0x258>)
 8003df2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	4a4e      	ldr	r2, [pc, #312]	; (8003f34 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 8003dfa:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e00:	2200      	movs	r2, #0
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e08:	2200      	movs	r2, #0
 8003e0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e10:	2200      	movs	r2, #0
 8003e12:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e18:	2200      	movs	r2, #0
 8003e1a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	4619      	mov	r1, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3310      	adds	r3, #16
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e32:	f7fd ff45 	bl	8001cc0 <HAL_DMA_Start_IT>
 8003e36:	4603      	mov	r3, r0
 8003e38:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d139      	bne.n	8003eb4 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8003e40:	e013      	b.n	8003e6a <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e057      	b.n	8003f1a <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e80:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e90:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e02f      	b.n	8003f14 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	f043 0210 	orr.w	r2, r3, #16
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e01e      	b.n	8003f1a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eea:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003efa:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003f12:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	e000      	b.n	8003f1a <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8003f18:	2302      	movs	r3, #2
  }
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000014 	.word	0x20000014
 8003f28:	14f8b589 	.word	0x14f8b589
 8003f2c:	ffff0000 	.word	0xffff0000
 8003f30:	08005655 	.word	0x08005655
 8003f34:	080057ff 	.word	0x080057ff

08003f38 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	f040 80b8 	bne.w	80040c4 <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_I2C_Slave_Receive_DMA+0x28>
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0b0      	b.n	80040c6 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2C_Slave_Receive_DMA+0x3a>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e0a9      	b.n	80040c6 <HAL_I2C_Slave_Receive_DMA+0x18e>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d007      	beq.n	8003f98 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2222      	movs	r2, #34	; 0x22
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a3e      	ldr	r2, [pc, #248]	; (80040d0 <HAL_I2C_Slave_Receive_DMA+0x198>)
 8003fd8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d02a      	beq.n	8004038 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	4a3b      	ldr	r2, [pc, #236]	; (80040d4 <HAL_I2C_Slave_Receive_DMA+0x19c>)
 8003fe8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	4a3a      	ldr	r2, [pc, #232]	; (80040d8 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 8003ff0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	2200      	movs	r2, #0
 8004000:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	2200      	movs	r2, #0
 8004008:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	2200      	movs	r2, #0
 8004010:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3310      	adds	r3, #16
 800401c:	4619      	mov	r1, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004028:	f7fd fe4a 	bl	8001cc0 <HAL_DMA_Start_IT>
 800402c:	4603      	mov	r3, r0
 800402e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d132      	bne.n	800409c <HAL_I2C_Slave_Receive_DMA+0x164>
 8004036:	e013      	b.n	8004060 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2228      	movs	r2, #40	; 0x28
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e032      	b.n	80040c6 <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800406e:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004086:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004096:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	e014      	b.n	80040c6 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	f043 0210 	orr.w	r2, r3, #16
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
  }
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	ffff0000 	.word	0xffff0000
 80040d4:	08005655 	.word	0x08005655
 80040d8:	080057ff 	.word	0x080057ff

080040dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004104:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b10      	cmp	r3, #16
 800410a:	d003      	beq.n	8004114 <HAL_I2C_EV_IRQHandler+0x38>
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	f040 80c1 	bne.w	8004296 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10d      	bne.n	800414a <HAL_I2C_EV_IRQHandler+0x6e>
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004134:	d003      	beq.n	800413e <HAL_I2C_EV_IRQHandler+0x62>
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800413c:	d101      	bne.n	8004142 <HAL_I2C_EV_IRQHandler+0x66>
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <HAL_I2C_EV_IRQHandler+0x68>
 8004142:	2300      	movs	r3, #0
 8004144:	2b01      	cmp	r3, #1
 8004146:	f000 8132 	beq.w	80043ae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00c      	beq.n	800416e <HAL_I2C_EV_IRQHandler+0x92>
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	0a5b      	lsrs	r3, r3, #9
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d006      	beq.n	800416e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f001 fc63 	bl	8005a2c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fcc8 	bl	8004afc <I2C_Master_SB>
 800416c:	e092      	b.n	8004294 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	08db      	lsrs	r3, r3, #3
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_I2C_EV_IRQHandler+0xb2>
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	0a5b      	lsrs	r3, r3, #9
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fd3e 	bl	8004c08 <I2C_Master_ADD10>
 800418c:	e082      	b.n	8004294 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <HAL_I2C_EV_IRQHandler+0xd2>
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	0a5b      	lsrs	r3, r3, #9
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fd58 	bl	8004c5c <I2C_Master_ADDR>
 80041ac:	e072      	b.n	8004294 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	089b      	lsrs	r3, r3, #2
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d03b      	beq.n	8004232 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c8:	f000 80f3 	beq.w	80043b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	09db      	lsrs	r3, r3, #7
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00f      	beq.n	80041f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	0a9b      	lsrs	r3, r3, #10
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d009      	beq.n	80041f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	089b      	lsrs	r3, r3, #2
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d103      	bne.n	80041f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f942 	bl	800447a <I2C_MasterTransmit_TXE>
 80041f6:	e04d      	b.n	8004294 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	089b      	lsrs	r3, r3, #2
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80d6 	beq.w	80043b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	0a5b      	lsrs	r3, r3, #9
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80cf 	beq.w	80043b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004214:	7bbb      	ldrb	r3, [r7, #14]
 8004216:	2b21      	cmp	r3, #33	; 0x21
 8004218:	d103      	bne.n	8004222 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f9c9 	bl	80045b2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004220:	e0c7      	b.n	80043b2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	f040 80c4 	bne.w	80043b2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa37 	bl	800469e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004230:	e0bf      	b.n	80043b2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004240:	f000 80b7 	beq.w	80043b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	099b      	lsrs	r3, r3, #6
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00f      	beq.n	8004270 <HAL_I2C_EV_IRQHandler+0x194>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	0a9b      	lsrs	r3, r3, #10
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d009      	beq.n	8004270 <HAL_I2C_EV_IRQHandler+0x194>
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d103      	bne.n	8004270 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 faac 	bl	80047c6 <I2C_MasterReceive_RXNE>
 800426e:	e011      	b.n	8004294 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 809a 	beq.w	80043b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	0a5b      	lsrs	r3, r3, #9
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8093 	beq.w	80043b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fb4b 	bl	8004928 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004292:	e08e      	b.n	80043b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004294:	e08d      	b.n	80043b2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d004      	beq.n	80042a8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	e007      	b.n	80042b8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d012      	beq.n	80042ea <HAL_I2C_EV_IRQHandler+0x20e>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	0a5b      	lsrs	r3, r3, #9
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00c      	beq.n	80042ea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80042e0:	69b9      	ldr	r1, [r7, #24]
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 ff09 	bl	80050fa <I2C_Slave_ADDR>
 80042e8:	e066      	b.n	80043b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	091b      	lsrs	r3, r3, #4
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <HAL_I2C_EV_IRQHandler+0x22e>
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	0a5b      	lsrs	r3, r3, #9
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 ff44 	bl	8005190 <I2C_Slave_STOPF>
 8004308:	e056      	b.n	80043b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800430a:	7bbb      	ldrb	r3, [r7, #14]
 800430c:	2b21      	cmp	r3, #33	; 0x21
 800430e:	d002      	beq.n	8004316 <HAL_I2C_EV_IRQHandler+0x23a>
 8004310:	7bbb      	ldrb	r3, [r7, #14]
 8004312:	2b29      	cmp	r3, #41	; 0x29
 8004314:	d125      	bne.n	8004362 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	09db      	lsrs	r3, r3, #7
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00f      	beq.n	8004342 <HAL_I2C_EV_IRQHandler+0x266>
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	0a9b      	lsrs	r3, r3, #10
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <HAL_I2C_EV_IRQHandler+0x266>
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	089b      	lsrs	r3, r3, #2
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d103      	bne.n	8004342 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fe1f 	bl	8004f7e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004340:	e039      	b.n	80043b6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d033      	beq.n	80043b6 <HAL_I2C_EV_IRQHandler+0x2da>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	0a5b      	lsrs	r3, r3, #9
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d02d      	beq.n	80043b6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fe4c 	bl	8004ff8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004360:	e029      	b.n	80043b6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	099b      	lsrs	r3, r3, #6
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00f      	beq.n	800438e <HAL_I2C_EV_IRQHandler+0x2b2>
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	0a9b      	lsrs	r3, r3, #10
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <HAL_I2C_EV_IRQHandler+0x2b2>
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	089b      	lsrs	r3, r3, #2
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d103      	bne.n	800438e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fe57 	bl	800503a <I2C_SlaveReceive_RXNE>
 800438c:	e014      	b.n	80043b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	089b      	lsrs	r3, r3, #2
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00e      	beq.n	80043b8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	0a5b      	lsrs	r3, r3, #9
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fe85 	bl	80050b6 <I2C_SlaveReceive_BTF>
 80043ac:	e004      	b.n	80043b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80043ae:	bf00      	nop
 80043b0:	e002      	b.n	80043b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043b2:	bf00      	nop
 80043b4:	e000      	b.n	80043b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043b6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80043b8:	3720      	adds	r7, #32
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	460b      	mov	r3, r1
 8004404:	70fb      	strb	r3, [r7, #3]
 8004406:	4613      	mov	r3, r2
 8004408:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004488:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004490:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449c:	2b00      	cmp	r3, #0
 800449e:	d150      	bne.n	8004542 <I2C_MasterTransmit_TXE+0xc8>
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	2b21      	cmp	r3, #33	; 0x21
 80044a4:	d14d      	bne.n	8004542 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d01d      	beq.n	80044e8 <I2C_MasterTransmit_TXE+0x6e>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d01a      	beq.n	80044e8 <I2C_MasterTransmit_TXE+0x6e>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044b8:	d016      	beq.n	80044e8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044c8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2211      	movs	r2, #17
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff ff6c 	bl	80043be <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044e6:	e060      	b.n	80045aa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044f6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004506:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	d107      	bne.n	8004532 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ff7d 	bl	800442a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004530:	e03b      	b.n	80045aa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ff3f 	bl	80043be <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004540:	e033      	b.n	80045aa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	2b21      	cmp	r3, #33	; 0x21
 8004546:	d005      	beq.n	8004554 <I2C_MasterTransmit_TXE+0xda>
 8004548:	7bbb      	ldrb	r3, [r7, #14]
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d12d      	bne.n	80045aa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	2b22      	cmp	r3, #34	; 0x22
 8004552:	d12a      	bne.n	80045aa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d108      	bne.n	8004570 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800456c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800456e:	e01c      	b.n	80045aa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d103      	bne.n	8004584 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f88e 	bl	800469e <I2C_MemoryTransmit_TXE_BTF>
}
 8004582:	e012      	b.n	80045aa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045a8:	e7ff      	b.n	80045aa <I2C_MasterTransmit_TXE+0x130>
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b21      	cmp	r3, #33	; 0x21
 80045ca:	d164      	bne.n	8004696 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d012      	beq.n	80045fc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	781a      	ldrb	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80045fa:	e04c      	b.n	8004696 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d01d      	beq.n	800463e <I2C_MasterTransmit_BTF+0x8c>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b20      	cmp	r3, #32
 8004606:	d01a      	beq.n	800463e <I2C_MasterTransmit_BTF+0x8c>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800460e:	d016      	beq.n	800463e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800461e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2211      	movs	r2, #17
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff fec1 	bl	80043be <HAL_I2C_MasterTxCpltCallback>
}
 800463c:	e02b      	b.n	8004696 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800464c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800465c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d107      	bne.n	8004688 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff fed2 	bl	800442a <HAL_I2C_MemTxCpltCallback>
}
 8004686:	e006      	b.n	8004696 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff fe94 	bl	80043be <HAL_I2C_MasterTxCpltCallback>
}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11d      	bne.n	80046f2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d10b      	bne.n	80046d6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ce:	1c9a      	adds	r2, r3, #2
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80046d4:	e073      	b.n	80047be <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046da:	b29b      	uxth	r3, r3
 80046dc:	121b      	asrs	r3, r3, #8
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046f0:	e065      	b.n	80047be <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d10b      	bne.n	8004712 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004710:	e055      	b.n	80047be <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	2b02      	cmp	r3, #2
 8004718:	d151      	bne.n	80047be <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b22      	cmp	r3, #34	; 0x22
 800471e:	d10d      	bne.n	800473c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800472e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	651a      	str	r2, [r3, #80]	; 0x50
}
 800473a:	e040      	b.n	80047be <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d015      	beq.n	8004772 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b21      	cmp	r3, #33	; 0x21
 800474a:	d112      	bne.n	8004772 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	781a      	ldrb	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004770:	e025      	b.n	80047be <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d120      	bne.n	80047be <I2C_MemoryTransmit_TXE_BTF+0x120>
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b21      	cmp	r3, #33	; 0x21
 8004780:	d11d      	bne.n	80047be <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004790:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff fe36 	bl	800442a <HAL_I2C_MemTxCpltCallback>
}
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b22      	cmp	r3, #34	; 0x22
 80047d8:	f040 80a2 	bne.w	8004920 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d921      	bls.n	800482e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b03      	cmp	r3, #3
 8004818:	f040 8082 	bne.w	8004920 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800482a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800482c:	e078      	b.n	8004920 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	2b02      	cmp	r3, #2
 8004834:	d074      	beq.n	8004920 <I2C_MasterReceive_RXNE+0x15a>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d002      	beq.n	8004842 <I2C_MasterReceive_RXNE+0x7c>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d16e      	bne.n	8004920 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f001 f8c0 	bl	80059c8 <I2C_WaitOnSTOPRequestThroughIT>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d142      	bne.n	80048d4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800486c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b40      	cmp	r3, #64	; 0x40
 80048a6:	d10a      	bne.n	80048be <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fdc1 	bl	800443e <HAL_I2C_MemRxCpltCallback>
}
 80048bc:	e030      	b.n	8004920 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2212      	movs	r2, #18
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff fd80 	bl	80043d2 <HAL_I2C_MasterRxCpltCallback>
}
 80048d2:	e025      	b.n	8004920 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048e2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff fd99 	bl	8004452 <HAL_I2C_ErrorCallback>
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b04      	cmp	r3, #4
 800493e:	d11b      	bne.n	8004978 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800494e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004976:	e0bd      	b.n	8004af4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b03      	cmp	r3, #3
 8004980:	d129      	bne.n	80049d6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004990:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b04      	cmp	r3, #4
 8004996:	d00a      	beq.n	80049ae <I2C_MasterReceive_BTF+0x86>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d007      	beq.n	80049ae <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049d4:	e08e      	b.n	8004af4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d176      	bne.n	8004ace <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d002      	beq.n	80049ec <I2C_MasterReceive_BTF+0xc4>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d108      	bne.n	80049fe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e019      	b.n	8004a32 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d002      	beq.n	8004a0a <I2C_MasterReceive_BTF+0xe2>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d108      	bne.n	8004a1c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e00a      	b.n	8004a32 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d007      	beq.n	8004a32 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a30:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a8c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b40      	cmp	r3, #64	; 0x40
 8004aa0:	d10a      	bne.n	8004ab8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff fcc4 	bl	800443e <HAL_I2C_MemRxCpltCallback>
}
 8004ab6:	e01d      	b.n	8004af4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2212      	movs	r2, #18
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fc83 	bl	80043d2 <HAL_I2C_MasterRxCpltCallback>
}
 8004acc:	e012      	b.n	8004af4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d117      	bne.n	8004b40 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b28:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b2a:	e067      	b.n	8004bfc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	611a      	str	r2, [r3, #16]
}
 8004b3e:	e05d      	b.n	8004bfc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b48:	d133      	bne.n	8004bb2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b21      	cmp	r3, #33	; 0x21
 8004b54:	d109      	bne.n	8004b6a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b66:	611a      	str	r2, [r3, #16]
 8004b68:	e008      	b.n	8004b7c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <I2C_Master_SB+0x92>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d108      	bne.n	8004ba0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d032      	beq.n	8004bfc <I2C_Master_SB+0x100>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d02d      	beq.n	8004bfc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bae:	605a      	str	r2, [r3, #4]
}
 8004bb0:	e024      	b.n	8004bfc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10e      	bne.n	8004bd8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	11db      	asrs	r3, r3, #7
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	f003 0306 	and.w	r3, r3, #6
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f063 030f 	orn	r3, r3, #15
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	611a      	str	r2, [r3, #16]
}
 8004bd6:	e011      	b.n	8004bfc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10d      	bne.n	8004bfc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	11db      	asrs	r3, r3, #7
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f003 0306 	and.w	r3, r3, #6
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f063 030e 	orn	r3, r3, #14
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	611a      	str	r2, [r3, #16]
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d004      	beq.n	8004c2e <I2C_Master_ADD10+0x26>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d108      	bne.n	8004c40 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <I2C_Master_ADD10+0x48>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4e:	605a      	str	r2, [r3, #4]
  }
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b091      	sub	sp, #68	; 0x44
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b22      	cmp	r3, #34	; 0x22
 8004c84:	f040 8169 	bne.w	8004f5a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10f      	bne.n	8004cb0 <I2C_Master_ADDR+0x54>
 8004c90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c94:	2b40      	cmp	r3, #64	; 0x40
 8004c96:	d10b      	bne.n	8004cb0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c98:	2300      	movs	r3, #0
 8004c9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	633b      	str	r3, [r7, #48]	; 0x30
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	e160      	b.n	8004f72 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d11d      	bne.n	8004cf4 <I2C_Master_ADDR+0x98>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cc0:	d118      	bne.n	8004cf4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ce6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	651a      	str	r2, [r3, #80]	; 0x50
 8004cf2:	e13e      	b.n	8004f72 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d113      	bne.n	8004d26 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfe:	2300      	movs	r3, #0
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e115      	b.n	8004f52 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	f040 808a 	bne.w	8004e46 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d38:	d137      	bne.n	8004daa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d48:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d58:	d113      	bne.n	8004d82 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d68:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	e0e7      	b.n	8004f52 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d82:	2300      	movs	r3, #0
 8004d84:	623b      	str	r3, [r7, #32]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	623b      	str	r3, [r7, #32]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	623b      	str	r3, [r7, #32]
 8004d96:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	e0d3      	b.n	8004f52 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d02e      	beq.n	8004e0e <I2C_Master_ADDR+0x1b2>
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d02b      	beq.n	8004e0e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db8:	2b12      	cmp	r3, #18
 8004dba:	d102      	bne.n	8004dc2 <I2C_Master_ADDR+0x166>
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d125      	bne.n	8004e0e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d00e      	beq.n	8004de6 <I2C_Master_ADDR+0x18a>
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d00b      	beq.n	8004de6 <I2C_Master_ADDR+0x18a>
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	d008      	beq.n	8004de6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e007      	b.n	8004df6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004df4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	e0a1      	b.n	8004f52 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e1c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	e085      	b.n	8004f52 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d14d      	bne.n	8004eec <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d016      	beq.n	8004e84 <I2C_Master_ADDR+0x228>
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d013      	beq.n	8004e84 <I2C_Master_ADDR+0x228>
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	2b10      	cmp	r3, #16
 8004e60:	d010      	beq.n	8004e84 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e70:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e007      	b.n	8004e94 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e92:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea2:	d117      	bne.n	8004ed4 <I2C_Master_ADDR+0x278>
 8004ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004eaa:	d00b      	beq.n	8004ec4 <I2C_Master_ADDR+0x268>
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d008      	beq.n	8004ec4 <I2C_Master_ADDR+0x268>
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d005      	beq.n	8004ec4 <I2C_Master_ADDR+0x268>
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eba:	2b10      	cmp	r3, #16
 8004ebc:	d002      	beq.n	8004ec4 <I2C_Master_ADDR+0x268>
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	d107      	bne.n	8004ed4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ed2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	e032      	b.n	8004f52 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004efa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f0a:	d117      	bne.n	8004f3c <I2C_Master_ADDR+0x2e0>
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f12:	d00b      	beq.n	8004f2c <I2C_Master_ADDR+0x2d0>
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d008      	beq.n	8004f2c <I2C_Master_ADDR+0x2d0>
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d005      	beq.n	8004f2c <I2C_Master_ADDR+0x2d0>
 8004f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d002      	beq.n	8004f2c <I2C_Master_ADDR+0x2d0>
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d107      	bne.n	8004f3c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f3a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004f58:	e00b      	b.n	8004f72 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
}
 8004f70:	e7ff      	b.n	8004f72 <I2C_Master_ADDR+0x316>
 8004f72:	bf00      	nop
 8004f74:	3744      	adds	r7, #68	; 0x44
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02b      	beq.n	8004ff0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	781a      	ldrb	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d114      	bne.n	8004ff0 <I2C_SlaveTransmit_TXE+0x72>
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	2b29      	cmp	r3, #41	; 0x29
 8004fca:	d111      	bne.n	8004ff0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fda:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2221      	movs	r2, #33	; 0x21
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2228      	movs	r2, #40	; 0x28
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff f9fb 	bl	80043e6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ff0:	bf00      	nop
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d011      	beq.n	800502e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	781a      	ldrb	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d02c      	beq.n	80050ae <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d114      	bne.n	80050ae <I2C_SlaveReceive_RXNE+0x74>
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	2b2a      	cmp	r3, #42	; 0x2a
 8005088:	d111      	bne.n	80050ae <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005098:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2222      	movs	r2, #34	; 0x22
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2228      	movs	r2, #40	; 0x28
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7fb fa83 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d012      	beq.n	80050ee <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691a      	ldr	r2, [r3, #16]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005114:	2b28      	cmp	r3, #40	; 0x28
 8005116:	d127      	bne.n	8005168 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005126:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	089b      	lsrs	r3, r3, #2
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	09db      	lsrs	r3, r3, #7
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d103      	bne.n	800514c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	81bb      	strh	r3, [r7, #12]
 800514a:	e002      	b.n	8005152 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800515a:	89ba      	ldrh	r2, [r7, #12]
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	4619      	mov	r1, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff f94a 	bl	80043fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005166:	e00e      	b.n	8005186 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005168:	2300      	movs	r3, #0
 800516a:	60bb      	str	r3, [r7, #8]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	60bb      	str	r3, [r7, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005186:	bf00      	nop
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80051b0:	2300      	movs	r3, #0
 80051b2:	60bb      	str	r3, [r7, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	60bb      	str	r3, [r7, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ec:	d172      	bne.n	80052d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	2b22      	cmp	r3, #34	; 0x22
 80051f2:	d002      	beq.n	80051fa <I2C_Slave_STOPF+0x6a>
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	2b2a      	cmp	r3, #42	; 0x2a
 80051f8:	d135      	bne.n	8005266 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	b29a      	uxth	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f043 0204 	orr.w	r2, r3, #4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800522c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	4618      	mov	r0, r3
 8005234:	f7fc ffb8 	bl	80021a8 <HAL_DMA_GetState>
 8005238:	4603      	mov	r3, r0
 800523a:	2b01      	cmp	r3, #1
 800523c:	d049      	beq.n	80052d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	4a69      	ldr	r2, [pc, #420]	; (80053e8 <I2C_Slave_STOPF+0x258>)
 8005244:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	4618      	mov	r0, r3
 800524c:	f7fc fe00 	bl	8001e50 <HAL_DMA_Abort_IT>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d03d      	beq.n	80052d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005260:	4610      	mov	r0, r2
 8005262:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005264:	e035      	b.n	80052d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f043 0204 	orr.w	r2, r3, #4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005298:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fc ff82 	bl	80021a8 <HAL_DMA_GetState>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d014      	beq.n	80052d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ae:	4a4e      	ldr	r2, [pc, #312]	; (80053e8 <I2C_Slave_STOPF+0x258>)
 80052b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fc fdca 	bl	8001e50 <HAL_DMA_Abort_IT>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d008      	beq.n	80052d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052cc:	4610      	mov	r0, r2
 80052ce:	4798      	blx	r3
 80052d0:	e000      	b.n	80052d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d03e      	beq.n	800535c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d112      	bne.n	8005312 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d112      	bne.n	8005346 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	f043 0204 	orr.w	r2, r3, #4
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f843 	bl	80053f0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800536a:	e039      	b.n	80053e0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	2b2a      	cmp	r3, #42	; 0x2a
 8005370:	d109      	bne.n	8005386 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2228      	movs	r2, #40	; 0x28
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7fb f917 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b28      	cmp	r3, #40	; 0x28
 8005390:	d111      	bne.n	80053b6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a15      	ldr	r2, [pc, #84]	; (80053ec <I2C_Slave_STOPF+0x25c>)
 8005396:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff f831 	bl	8004416 <HAL_I2C_ListenCpltCallback>
}
 80053b4:	e014      	b.n	80053e0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	2b22      	cmp	r3, #34	; 0x22
 80053bc:	d002      	beq.n	80053c4 <I2C_Slave_STOPF+0x234>
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	2b22      	cmp	r3, #34	; 0x22
 80053c2:	d10d      	bne.n	80053e0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fb f8ea 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80053e0:	bf00      	nop
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	08005879 	.word	0x08005879
 80053ec:	ffff0000 	.word	0xffff0000

080053f0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005406:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005408:	7bbb      	ldrb	r3, [r7, #14]
 800540a:	2b10      	cmp	r3, #16
 800540c:	d002      	beq.n	8005414 <I2C_ITError+0x24>
 800540e:	7bbb      	ldrb	r3, [r7, #14]
 8005410:	2b40      	cmp	r3, #64	; 0x40
 8005412:	d10a      	bne.n	800542a <I2C_ITError+0x3a>
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	2b22      	cmp	r3, #34	; 0x22
 8005418:	d107      	bne.n	800542a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005428:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005430:	2b28      	cmp	r3, #40	; 0x28
 8005432:	d107      	bne.n	8005444 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2228      	movs	r2, #40	; 0x28
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005442:	e015      	b.n	8005470 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005452:	d00a      	beq.n	800546a <I2C_ITError+0x7a>
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b60      	cmp	r3, #96	; 0x60
 8005458:	d007      	beq.n	800546a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800547a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547e:	d162      	bne.n	8005546 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800548e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b01      	cmp	r3, #1
 800549c:	d020      	beq.n	80054e0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a2:	4a6a      	ldr	r2, [pc, #424]	; (800564c <I2C_ITError+0x25c>)
 80054a4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fc fcd0 	bl	8001e50 <HAL_DMA_Abort_IT>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8089 	beq.w	80055ca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0201 	bic.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054da:	4610      	mov	r0, r2
 80054dc:	4798      	blx	r3
 80054de:	e074      	b.n	80055ca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	4a59      	ldr	r2, [pc, #356]	; (800564c <I2C_ITError+0x25c>)
 80054e6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fc fcaf 	bl	8001e50 <HAL_DMA_Abort_IT>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d068      	beq.n	80055ca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	d10b      	bne.n	800551e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0201 	bic.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005540:	4610      	mov	r0, r2
 8005542:	4798      	blx	r3
 8005544:	e041      	b.n	80055ca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b60      	cmp	r3, #96	; 0x60
 8005550:	d125      	bne.n	800559e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d10b      	bne.n	8005586 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0201 	bic.w	r2, r2, #1
 8005594:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fe ff65 	bl	8004466 <HAL_I2C_AbortCpltCallback>
 800559c:	e015      	b.n	80055ca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a8:	2b40      	cmp	r3, #64	; 0x40
 80055aa:	d10b      	bne.n	80055c4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7fe ff44 	bl	8004452 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10e      	bne.n	80055f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d109      	bne.n	80055f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d104      	bne.n	80055f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005606:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b04      	cmp	r3, #4
 800561a:	d113      	bne.n	8005644 <I2C_ITError+0x254>
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b28      	cmp	r3, #40	; 0x28
 8005620:	d110      	bne.n	8005644 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a0a      	ldr	r2, [pc, #40]	; (8005650 <I2C_ITError+0x260>)
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fe fee9 	bl	8004416 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	08005879 	.word	0x08005879
 8005650:	ffff0000 	.word	0xffff0000

08005654 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005668:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005670:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005686:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005694:	2200      	movs	r2, #0
 8005696:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	2200      	movs	r2, #0
 80056a6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80056a8:	7cfb      	ldrb	r3, [r7, #19]
 80056aa:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80056ae:	2b21      	cmp	r3, #33	; 0x21
 80056b0:	d007      	beq.n	80056c2 <I2C_DMAXferCplt+0x6e>
 80056b2:	7cfb      	ldrb	r3, [r7, #19]
 80056b4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80056b8:	2b22      	cmp	r3, #34	; 0x22
 80056ba:	d131      	bne.n	8005720 <I2C_DMAXferCplt+0xcc>
 80056bc:	7cbb      	ldrb	r3, [r7, #18]
 80056be:	2b20      	cmp	r3, #32
 80056c0:	d12e      	bne.n	8005720 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056d0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80056d8:	7cfb      	ldrb	r3, [r7, #19]
 80056da:	2b29      	cmp	r3, #41	; 0x29
 80056dc:	d10a      	bne.n	80056f4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2221      	movs	r2, #33	; 0x21
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2228      	movs	r2, #40	; 0x28
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056ec:	6978      	ldr	r0, [r7, #20]
 80056ee:	f7fe fe7a 	bl	80043e6 <HAL_I2C_SlaveTxCpltCallback>
 80056f2:	e00c      	b.n	800570e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056f4:	7cfb      	ldrb	r3, [r7, #19]
 80056f6:	2b2a      	cmp	r3, #42	; 0x2a
 80056f8:	d109      	bne.n	800570e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2222      	movs	r2, #34	; 0x22
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2228      	movs	r2, #40	; 0x28
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005708:	6978      	ldr	r0, [r7, #20]
 800570a:	f7fa ff53 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800571c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800571e:	e06a      	b.n	80057f6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d064      	beq.n	80057f6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	d107      	bne.n	8005746 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005744:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005754:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800575c:	d009      	beq.n	8005772 <I2C_DMAXferCplt+0x11e>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b08      	cmp	r3, #8
 8005762:	d006      	beq.n	8005772 <I2C_DMAXferCplt+0x11e>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800576a:	d002      	beq.n	8005772 <I2C_DMAXferCplt+0x11e>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b20      	cmp	r3, #32
 8005770:	d107      	bne.n	8005782 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005780:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005790:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057a0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2200      	movs	r2, #0
 80057a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80057b0:	6978      	ldr	r0, [r7, #20]
 80057b2:	f7fe fe4e 	bl	8004452 <HAL_I2C_ErrorCallback>
}
 80057b6:	e01e      	b.n	80057f6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b40      	cmp	r3, #64	; 0x40
 80057ca:	d10a      	bne.n	80057e2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2200      	movs	r2, #0
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80057da:	6978      	ldr	r0, [r7, #20]
 80057dc:	f7fe fe2f 	bl	800443e <HAL_I2C_MemRxCpltCallback>
}
 80057e0:	e009      	b.n	80057f6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2212      	movs	r2, #18
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80057f0:	6978      	ldr	r0, [r7, #20]
 80057f2:	f7fe fdee 	bl	80043d2 <HAL_I2C_MasterRxCpltCallback>
}
 80057f6:	bf00      	nop
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005818:	2200      	movs	r2, #0
 800581a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	2200      	movs	r2, #0
 800582a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7fc fcc9 	bl	80021c4 <HAL_DMA_GetError>
 8005832:	4603      	mov	r3, r0
 8005834:	2b02      	cmp	r3, #2
 8005836:	d01b      	beq.n	8005870 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005846:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f043 0210 	orr.w	r2, r3, #16
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f7fe fdf1 	bl	8004452 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005870:	bf00      	nop
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005890:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005892:	4b4b      	ldr	r3, [pc, #300]	; (80059c0 <I2C_DMAAbort+0x148>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	08db      	lsrs	r3, r3, #3
 8005898:	4a4a      	ldr	r2, [pc, #296]	; (80059c4 <I2C_DMAAbort+0x14c>)
 800589a:	fba2 2303 	umull	r2, r3, r2, r3
 800589e:	0a1a      	lsrs	r2, r3, #8
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	00da      	lsls	r2, r3, #3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f043 0220 	orr.w	r2, r3, #32
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80058be:	e00a      	b.n	80058d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058d4:	d0ea      	beq.n	80058ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e2:	2200      	movs	r2, #0
 80058e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	2200      	movs	r2, #0
 80058f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005904:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2200      	movs	r2, #0
 800590a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005918:	2200      	movs	r2, #0
 800591a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	2200      	movs	r2, #0
 800592a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0201 	bic.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b60      	cmp	r3, #96	; 0x60
 8005946:	d10e      	bne.n	8005966 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2200      	movs	r2, #0
 800595c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800595e:	6978      	ldr	r0, [r7, #20]
 8005960:	f7fe fd81 	bl	8004466 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005964:	e027      	b.n	80059b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005966:	7cfb      	ldrb	r3, [r7, #19]
 8005968:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800596c:	2b28      	cmp	r3, #40	; 0x28
 800596e:	d117      	bne.n	80059a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800598e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2228      	movs	r2, #40	; 0x28
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800599e:	e007      	b.n	80059b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80059b0:	6978      	ldr	r0, [r7, #20]
 80059b2:	f7fe fd4e 	bl	8004452 <HAL_I2C_ErrorCallback>
}
 80059b6:	bf00      	nop
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000014 	.word	0x20000014
 80059c4:	14f8b589 	.word	0x14f8b589

080059c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80059d4:	4b13      	ldr	r3, [pc, #76]	; (8005a24 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	08db      	lsrs	r3, r3, #3
 80059da:	4a13      	ldr	r2, [pc, #76]	; (8005a28 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80059dc:	fba2 2303 	umull	r2, r3, r2, r3
 80059e0:	0a1a      	lsrs	r2, r3, #8
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d107      	bne.n	8005a06 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f043 0220 	orr.w	r2, r3, #32
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e008      	b.n	8005a18 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a14:	d0e9      	beq.n	80059ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	20000014 	.word	0x20000014
 8005a28:	14f8b589 	.word	0x14f8b589

08005a2c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005a3c:	d103      	bne.n	8005a46 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a44:	e007      	b.n	8005a56 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a4e:	d102      	bne.n	8005a56 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2208      	movs	r2, #8
 8005a54:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d129      	bne.n	8005acc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2224      	movs	r2, #36	; 0x24
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0210 	bic.w	r2, r2, #16
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e000      	b.n	8005ace <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005acc:	2302      	movs	r3, #2
  }
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d12a      	bne.n	8005b4a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2224      	movs	r2, #36	; 0x24
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0201 	bic.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005b14:	89fb      	ldrh	r3, [r7, #14]
 8005b16:	f023 030f 	bic.w	r3, r3, #15
 8005b1a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	89fb      	ldrh	r3, [r7, #14]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	89fa      	ldrh	r2, [r7, #14]
 8005b2c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	e000      	b.n	8005b4c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005b4a:	2302      	movs	r3, #2
  }
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e267      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d075      	beq.n	8005c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b76:	4b88      	ldr	r3, [pc, #544]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 030c 	and.w	r3, r3, #12
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d00c      	beq.n	8005b9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b82:	4b85      	ldr	r3, [pc, #532]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d112      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b8e:	4b82      	ldr	r3, [pc, #520]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b9a:	d10b      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b9c:	4b7e      	ldr	r3, [pc, #504]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d05b      	beq.n	8005c60 <HAL_RCC_OscConfig+0x108>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d157      	bne.n	8005c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e242      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bbc:	d106      	bne.n	8005bcc <HAL_RCC_OscConfig+0x74>
 8005bbe:	4b76      	ldr	r3, [pc, #472]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a75      	ldr	r2, [pc, #468]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	e01d      	b.n	8005c08 <HAL_RCC_OscConfig+0xb0>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bd4:	d10c      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x98>
 8005bd6:	4b70      	ldr	r3, [pc, #448]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a6f      	ldr	r2, [pc, #444]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	4b6d      	ldr	r3, [pc, #436]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a6c      	ldr	r2, [pc, #432]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	e00b      	b.n	8005c08 <HAL_RCC_OscConfig+0xb0>
 8005bf0:	4b69      	ldr	r3, [pc, #420]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a68      	ldr	r2, [pc, #416]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	4b66      	ldr	r3, [pc, #408]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a65      	ldr	r2, [pc, #404]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d013      	beq.n	8005c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c10:	f7fb fe66 	bl	80018e0 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c18:	f7fb fe62 	bl	80018e0 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b64      	cmp	r3, #100	; 0x64
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e207      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2a:	4b5b      	ldr	r3, [pc, #364]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f0      	beq.n	8005c18 <HAL_RCC_OscConfig+0xc0>
 8005c36:	e014      	b.n	8005c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c38:	f7fb fe52 	bl	80018e0 <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c40:	f7fb fe4e 	bl	80018e0 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b64      	cmp	r3, #100	; 0x64
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e1f3      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c52:	4b51      	ldr	r3, [pc, #324]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1f0      	bne.n	8005c40 <HAL_RCC_OscConfig+0xe8>
 8005c5e:	e000      	b.n	8005c62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d063      	beq.n	8005d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c6e:	4b4a      	ldr	r3, [pc, #296]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 030c 	and.w	r3, r3, #12
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00b      	beq.n	8005c92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c7a:	4b47      	ldr	r3, [pc, #284]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d11c      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c86:	4b44      	ldr	r3, [pc, #272]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d116      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c92:	4b41      	ldr	r3, [pc, #260]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_RCC_OscConfig+0x152>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d001      	beq.n	8005caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e1c7      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005caa:	4b3b      	ldr	r3, [pc, #236]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4937      	ldr	r1, [pc, #220]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cbe:	e03a      	b.n	8005d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d020      	beq.n	8005d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cc8:	4b34      	ldr	r3, [pc, #208]	; (8005d9c <HAL_RCC_OscConfig+0x244>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cce:	f7fb fe07 	bl	80018e0 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cd6:	f7fb fe03 	bl	80018e0 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e1a8      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce8:	4b2b      	ldr	r3, [pc, #172]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0f0      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf4:	4b28      	ldr	r3, [pc, #160]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4925      	ldr	r1, [pc, #148]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	600b      	str	r3, [r1, #0]
 8005d08:	e015      	b.n	8005d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d0a:	4b24      	ldr	r3, [pc, #144]	; (8005d9c <HAL_RCC_OscConfig+0x244>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d10:	f7fb fde6 	bl	80018e0 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d18:	f7fb fde2 	bl	80018e0 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e187      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d2a:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f0      	bne.n	8005d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d036      	beq.n	8005db0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d016      	beq.n	8005d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d4a:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <HAL_RCC_OscConfig+0x248>)
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d50:	f7fb fdc6 	bl	80018e0 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d58:	f7fb fdc2 	bl	80018e0 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e167      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0f0      	beq.n	8005d58 <HAL_RCC_OscConfig+0x200>
 8005d76:	e01b      	b.n	8005db0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d78:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <HAL_RCC_OscConfig+0x248>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d7e:	f7fb fdaf 	bl	80018e0 <HAL_GetTick>
 8005d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d84:	e00e      	b.n	8005da4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d86:	f7fb fdab 	bl	80018e0 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d907      	bls.n	8005da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e150      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	42470000 	.word	0x42470000
 8005da0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da4:	4b88      	ldr	r3, [pc, #544]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1ea      	bne.n	8005d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 8097 	beq.w	8005eec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dc2:	4b81      	ldr	r3, [pc, #516]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10f      	bne.n	8005dee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	4b7d      	ldr	r3, [pc, #500]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	4a7c      	ldr	r2, [pc, #496]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8005dde:	4b7a      	ldr	r3, [pc, #488]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de6:	60bb      	str	r3, [r7, #8]
 8005de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dea:	2301      	movs	r3, #1
 8005dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dee:	4b77      	ldr	r3, [pc, #476]	; (8005fcc <HAL_RCC_OscConfig+0x474>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d118      	bne.n	8005e2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dfa:	4b74      	ldr	r3, [pc, #464]	; (8005fcc <HAL_RCC_OscConfig+0x474>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a73      	ldr	r2, [pc, #460]	; (8005fcc <HAL_RCC_OscConfig+0x474>)
 8005e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e06:	f7fb fd6b 	bl	80018e0 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e0e:	f7fb fd67 	bl	80018e0 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e10c      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e20:	4b6a      	ldr	r3, [pc, #424]	; (8005fcc <HAL_RCC_OscConfig+0x474>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f0      	beq.n	8005e0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d106      	bne.n	8005e42 <HAL_RCC_OscConfig+0x2ea>
 8005e34:	4b64      	ldr	r3, [pc, #400]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	4a63      	ldr	r2, [pc, #396]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e40:	e01c      	b.n	8005e7c <HAL_RCC_OscConfig+0x324>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b05      	cmp	r3, #5
 8005e48:	d10c      	bne.n	8005e64 <HAL_RCC_OscConfig+0x30c>
 8005e4a:	4b5f      	ldr	r3, [pc, #380]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	4a5e      	ldr	r2, [pc, #376]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e50:	f043 0304 	orr.w	r3, r3, #4
 8005e54:	6713      	str	r3, [r2, #112]	; 0x70
 8005e56:	4b5c      	ldr	r3, [pc, #368]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	4a5b      	ldr	r2, [pc, #364]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e5c:	f043 0301 	orr.w	r3, r3, #1
 8005e60:	6713      	str	r3, [r2, #112]	; 0x70
 8005e62:	e00b      	b.n	8005e7c <HAL_RCC_OscConfig+0x324>
 8005e64:	4b58      	ldr	r3, [pc, #352]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e68:	4a57      	ldr	r2, [pc, #348]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e6a:	f023 0301 	bic.w	r3, r3, #1
 8005e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e70:	4b55      	ldr	r3, [pc, #340]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e74:	4a54      	ldr	r2, [pc, #336]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005e76:	f023 0304 	bic.w	r3, r3, #4
 8005e7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d015      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e84:	f7fb fd2c 	bl	80018e0 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e8a:	e00a      	b.n	8005ea2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e8c:	f7fb fd28 	bl	80018e0 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e0cb      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea2:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0ee      	beq.n	8005e8c <HAL_RCC_OscConfig+0x334>
 8005eae:	e014      	b.n	8005eda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eb0:	f7fb fd16 	bl	80018e0 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eb6:	e00a      	b.n	8005ece <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eb8:	f7fb fd12 	bl	80018e0 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e0b5      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ece:	4b3e      	ldr	r3, [pc, #248]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1ee      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d105      	bne.n	8005eec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ee0:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	4a38      	ldr	r2, [pc, #224]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80a1 	beq.w	8006038 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ef6:	4b34      	ldr	r3, [pc, #208]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 030c 	and.w	r3, r3, #12
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d05c      	beq.n	8005fbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d141      	bne.n	8005f8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f0a:	4b31      	ldr	r3, [pc, #196]	; (8005fd0 <HAL_RCC_OscConfig+0x478>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f10:	f7fb fce6 	bl	80018e0 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f18:	f7fb fce2 	bl	80018e0 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e087      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f2a:	4b27      	ldr	r3, [pc, #156]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f0      	bne.n	8005f18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69da      	ldr	r2, [r3, #28]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	019b      	lsls	r3, r3, #6
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	085b      	lsrs	r3, r3, #1
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	041b      	lsls	r3, r3, #16
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	061b      	lsls	r3, r3, #24
 8005f5a:	491b      	ldr	r1, [pc, #108]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f60:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <HAL_RCC_OscConfig+0x478>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f66:	f7fb fcbb 	bl	80018e0 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f6e:	f7fb fcb7 	bl	80018e0 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e05c      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f80:	4b11      	ldr	r3, [pc, #68]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0f0      	beq.n	8005f6e <HAL_RCC_OscConfig+0x416>
 8005f8c:	e054      	b.n	8006038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8e:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <HAL_RCC_OscConfig+0x478>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f94:	f7fb fca4 	bl	80018e0 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f9c:	f7fb fca0 	bl	80018e0 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e045      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fae:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f0      	bne.n	8005f9c <HAL_RCC_OscConfig+0x444>
 8005fba:	e03d      	b.n	8006038 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d107      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e038      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	40007000 	.word	0x40007000
 8005fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fd4:	4b1b      	ldr	r3, [pc, #108]	; (8006044 <HAL_RCC_OscConfig+0x4ec>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d028      	beq.n	8006034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d121      	bne.n	8006034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d11a      	bne.n	8006034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006004:	4013      	ands	r3, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800600a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800600c:	4293      	cmp	r3, r2
 800600e:	d111      	bne.n	8006034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	3b01      	subs	r3, #1
 800601e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006020:	429a      	cmp	r2, r3
 8006022:	d107      	bne.n	8006034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006030:	429a      	cmp	r2, r3
 8006032:	d001      	beq.n	8006038 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40023800 	.word	0x40023800

08006048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e0cc      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800605c:	4b68      	ldr	r3, [pc, #416]	; (8006200 <HAL_RCC_ClockConfig+0x1b8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d90c      	bls.n	8006084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800606a:	4b65      	ldr	r3, [pc, #404]	; (8006200 <HAL_RCC_ClockConfig+0x1b8>)
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006072:	4b63      	ldr	r3, [pc, #396]	; (8006200 <HAL_RCC_ClockConfig+0x1b8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d001      	beq.n	8006084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e0b8      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d020      	beq.n	80060d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800609c:	4b59      	ldr	r3, [pc, #356]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	4a58      	ldr	r2, [pc, #352]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80060a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d005      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060b4:	4b53      	ldr	r3, [pc, #332]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	4a52      	ldr	r2, [pc, #328]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c0:	4b50      	ldr	r3, [pc, #320]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	494d      	ldr	r1, [pc, #308]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d044      	beq.n	8006168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d107      	bne.n	80060f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e6:	4b47      	ldr	r3, [pc, #284]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d119      	bne.n	8006126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e07f      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d003      	beq.n	8006106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006102:	2b03      	cmp	r3, #3
 8006104:	d107      	bne.n	8006116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006106:	4b3f      	ldr	r3, [pc, #252]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e06f      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006116:	4b3b      	ldr	r3, [pc, #236]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e067      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006126:	4b37      	ldr	r3, [pc, #220]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f023 0203 	bic.w	r2, r3, #3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	4934      	ldr	r1, [pc, #208]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 8006134:	4313      	orrs	r3, r2
 8006136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006138:	f7fb fbd2 	bl	80018e0 <HAL_GetTick>
 800613c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800613e:	e00a      	b.n	8006156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006140:	f7fb fbce 	bl	80018e0 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	f241 3288 	movw	r2, #5000	; 0x1388
 800614e:	4293      	cmp	r3, r2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e04f      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006156:	4b2b      	ldr	r3, [pc, #172]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 020c 	and.w	r2, r3, #12
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	429a      	cmp	r2, r3
 8006166:	d1eb      	bne.n	8006140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006168:	4b25      	ldr	r3, [pc, #148]	; (8006200 <HAL_RCC_ClockConfig+0x1b8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d20c      	bcs.n	8006190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006176:	4b22      	ldr	r3, [pc, #136]	; (8006200 <HAL_RCC_ClockConfig+0x1b8>)
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b20      	ldr	r3, [pc, #128]	; (8006200 <HAL_RCC_ClockConfig+0x1b8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e032      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800619c:	4b19      	ldr	r3, [pc, #100]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	4916      	ldr	r1, [pc, #88]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061ba:	4b12      	ldr	r3, [pc, #72]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	490e      	ldr	r1, [pc, #56]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061ce:	f000 f821 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 80061d2:	4602      	mov	r2, r0
 80061d4:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	490a      	ldr	r1, [pc, #40]	; (8006208 <HAL_RCC_ClockConfig+0x1c0>)
 80061e0:	5ccb      	ldrb	r3, [r1, r3]
 80061e2:	fa22 f303 	lsr.w	r3, r2, r3
 80061e6:	4a09      	ldr	r2, [pc, #36]	; (800620c <HAL_RCC_ClockConfig+0x1c4>)
 80061e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061ea:	4b09      	ldr	r3, [pc, #36]	; (8006210 <HAL_RCC_ClockConfig+0x1c8>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fb fb32 	bl	8001858 <HAL_InitTick>

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40023c00 	.word	0x40023c00
 8006204:	40023800 	.word	0x40023800
 8006208:	0801731c 	.word	0x0801731c
 800620c:	20000014 	.word	0x20000014
 8006210:	20000018 	.word	0x20000018

08006214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006218:	b094      	sub	sp, #80	; 0x50
 800621a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	647b      	str	r3, [r7, #68]	; 0x44
 8006220:	2300      	movs	r3, #0
 8006222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006224:	2300      	movs	r3, #0
 8006226:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800622c:	4b79      	ldr	r3, [pc, #484]	; (8006414 <HAL_RCC_GetSysClockFreq+0x200>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f003 030c 	and.w	r3, r3, #12
 8006234:	2b08      	cmp	r3, #8
 8006236:	d00d      	beq.n	8006254 <HAL_RCC_GetSysClockFreq+0x40>
 8006238:	2b08      	cmp	r3, #8
 800623a:	f200 80e1 	bhi.w	8006400 <HAL_RCC_GetSysClockFreq+0x1ec>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_RCC_GetSysClockFreq+0x34>
 8006242:	2b04      	cmp	r3, #4
 8006244:	d003      	beq.n	800624e <HAL_RCC_GetSysClockFreq+0x3a>
 8006246:	e0db      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006248:	4b73      	ldr	r3, [pc, #460]	; (8006418 <HAL_RCC_GetSysClockFreq+0x204>)
 800624a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800624c:	e0db      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800624e:	4b73      	ldr	r3, [pc, #460]	; (800641c <HAL_RCC_GetSysClockFreq+0x208>)
 8006250:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006252:	e0d8      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006254:	4b6f      	ldr	r3, [pc, #444]	; (8006414 <HAL_RCC_GetSysClockFreq+0x200>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800625c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800625e:	4b6d      	ldr	r3, [pc, #436]	; (8006414 <HAL_RCC_GetSysClockFreq+0x200>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d063      	beq.n	8006332 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800626a:	4b6a      	ldr	r3, [pc, #424]	; (8006414 <HAL_RCC_GetSysClockFreq+0x200>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	099b      	lsrs	r3, r3, #6
 8006270:	2200      	movs	r2, #0
 8006272:	63bb      	str	r3, [r7, #56]	; 0x38
 8006274:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627c:	633b      	str	r3, [r7, #48]	; 0x30
 800627e:	2300      	movs	r3, #0
 8006280:	637b      	str	r3, [r7, #52]	; 0x34
 8006282:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006286:	4622      	mov	r2, r4
 8006288:	462b      	mov	r3, r5
 800628a:	f04f 0000 	mov.w	r0, #0
 800628e:	f04f 0100 	mov.w	r1, #0
 8006292:	0159      	lsls	r1, r3, #5
 8006294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006298:	0150      	lsls	r0, r2, #5
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4621      	mov	r1, r4
 80062a0:	1a51      	subs	r1, r2, r1
 80062a2:	6139      	str	r1, [r7, #16]
 80062a4:	4629      	mov	r1, r5
 80062a6:	eb63 0301 	sbc.w	r3, r3, r1
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062b8:	4659      	mov	r1, fp
 80062ba:	018b      	lsls	r3, r1, #6
 80062bc:	4651      	mov	r1, sl
 80062be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062c2:	4651      	mov	r1, sl
 80062c4:	018a      	lsls	r2, r1, #6
 80062c6:	4651      	mov	r1, sl
 80062c8:	ebb2 0801 	subs.w	r8, r2, r1
 80062cc:	4659      	mov	r1, fp
 80062ce:	eb63 0901 	sbc.w	r9, r3, r1
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062e6:	4690      	mov	r8, r2
 80062e8:	4699      	mov	r9, r3
 80062ea:	4623      	mov	r3, r4
 80062ec:	eb18 0303 	adds.w	r3, r8, r3
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	462b      	mov	r3, r5
 80062f4:	eb49 0303 	adc.w	r3, r9, r3
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	f04f 0200 	mov.w	r2, #0
 80062fe:	f04f 0300 	mov.w	r3, #0
 8006302:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006306:	4629      	mov	r1, r5
 8006308:	024b      	lsls	r3, r1, #9
 800630a:	4621      	mov	r1, r4
 800630c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006310:	4621      	mov	r1, r4
 8006312:	024a      	lsls	r2, r1, #9
 8006314:	4610      	mov	r0, r2
 8006316:	4619      	mov	r1, r3
 8006318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800631a:	2200      	movs	r2, #0
 800631c:	62bb      	str	r3, [r7, #40]	; 0x28
 800631e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006324:	f7f9 ffb4 	bl	8000290 <__aeabi_uldivmod>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4613      	mov	r3, r2
 800632e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006330:	e058      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006332:	4b38      	ldr	r3, [pc, #224]	; (8006414 <HAL_RCC_GetSysClockFreq+0x200>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	099b      	lsrs	r3, r3, #6
 8006338:	2200      	movs	r2, #0
 800633a:	4618      	mov	r0, r3
 800633c:	4611      	mov	r1, r2
 800633e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006342:	623b      	str	r3, [r7, #32]
 8006344:	2300      	movs	r3, #0
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
 8006348:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800634c:	4642      	mov	r2, r8
 800634e:	464b      	mov	r3, r9
 8006350:	f04f 0000 	mov.w	r0, #0
 8006354:	f04f 0100 	mov.w	r1, #0
 8006358:	0159      	lsls	r1, r3, #5
 800635a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800635e:	0150      	lsls	r0, r2, #5
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4641      	mov	r1, r8
 8006366:	ebb2 0a01 	subs.w	sl, r2, r1
 800636a:	4649      	mov	r1, r9
 800636c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800637c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006380:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006384:	ebb2 040a 	subs.w	r4, r2, sl
 8006388:	eb63 050b 	sbc.w	r5, r3, fp
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	00eb      	lsls	r3, r5, #3
 8006396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800639a:	00e2      	lsls	r2, r4, #3
 800639c:	4614      	mov	r4, r2
 800639e:	461d      	mov	r5, r3
 80063a0:	4643      	mov	r3, r8
 80063a2:	18e3      	adds	r3, r4, r3
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	464b      	mov	r3, r9
 80063a8:	eb45 0303 	adc.w	r3, r5, r3
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063ba:	4629      	mov	r1, r5
 80063bc:	028b      	lsls	r3, r1, #10
 80063be:	4621      	mov	r1, r4
 80063c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063c4:	4621      	mov	r1, r4
 80063c6:	028a      	lsls	r2, r1, #10
 80063c8:	4610      	mov	r0, r2
 80063ca:	4619      	mov	r1, r3
 80063cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ce:	2200      	movs	r2, #0
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	61fa      	str	r2, [r7, #28]
 80063d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063d8:	f7f9 ff5a 	bl	8000290 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4613      	mov	r3, r2
 80063e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063e4:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <HAL_RCC_GetSysClockFreq+0x200>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	0c1b      	lsrs	r3, r3, #16
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	3301      	adds	r3, #1
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80063f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063fe:	e002      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <HAL_RCC_GetSysClockFreq+0x204>)
 8006402:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006408:	4618      	mov	r0, r3
 800640a:	3750      	adds	r7, #80	; 0x50
 800640c:	46bd      	mov	sp, r7
 800640e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006412:	bf00      	nop
 8006414:	40023800 	.word	0x40023800
 8006418:	00f42400 	.word	0x00f42400
 800641c:	007a1200 	.word	0x007a1200

08006420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006424:	4b03      	ldr	r3, [pc, #12]	; (8006434 <HAL_RCC_GetHCLKFreq+0x14>)
 8006426:	681b      	ldr	r3, [r3, #0]
}
 8006428:	4618      	mov	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20000014 	.word	0x20000014

08006438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800643c:	f7ff fff0 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 8006440:	4602      	mov	r2, r0
 8006442:	4b05      	ldr	r3, [pc, #20]	; (8006458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	0a9b      	lsrs	r3, r3, #10
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	4903      	ldr	r1, [pc, #12]	; (800645c <HAL_RCC_GetPCLK1Freq+0x24>)
 800644e:	5ccb      	ldrb	r3, [r1, r3]
 8006450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006454:	4618      	mov	r0, r3
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40023800 	.word	0x40023800
 800645c:	0801732c 	.word	0x0801732c

08006460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006464:	f7ff ffdc 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 8006468:	4602      	mov	r2, r0
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	0b5b      	lsrs	r3, r3, #13
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	4903      	ldr	r1, [pc, #12]	; (8006484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006476:	5ccb      	ldrb	r3, [r1, r3]
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800647c:	4618      	mov	r0, r3
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40023800 	.word	0x40023800
 8006484:	0801732c 	.word	0x0801732c

08006488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e07b      	b.n	8006592 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d108      	bne.n	80064b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064aa:	d009      	beq.n	80064c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	61da      	str	r2, [r3, #28]
 80064b2:	e005      	b.n	80064c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fa fd28 	bl	8000f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	431a      	orrs	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006530:	431a      	orrs	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006544:	ea42 0103 	orr.w	r1, r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	0c1b      	lsrs	r3, r3, #16
 800655e:	f003 0104 	and.w	r1, r3, #4
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	f003 0210 	and.w	r2, r3, #16
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69da      	ldr	r2, [r3, #28]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	4613      	mov	r3, r2
 80065a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_SPI_Transmit_DMA+0x20>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e09b      	b.n	80066f4 <HAL_SPI_Transmit_DMA+0x158>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d002      	beq.n	80065d6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80065d0:	2302      	movs	r3, #2
 80065d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065d4:	e089      	b.n	80066ea <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <HAL_SPI_Transmit_DMA+0x46>
 80065dc:	88fb      	ldrh	r3, [r7, #6]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065e6:	e080      	b.n	80066ea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2203      	movs	r2, #3
 80065ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	88fa      	ldrh	r2, [r7, #6]
 8006600:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	88fa      	ldrh	r2, [r7, #6]
 8006606:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662e:	d10f      	bne.n	8006650 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800663e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800664e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006654:	4a29      	ldr	r2, [pc, #164]	; (80066fc <HAL_SPI_Transmit_DMA+0x160>)
 8006656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665c:	4a28      	ldr	r2, [pc, #160]	; (8006700 <HAL_SPI_Transmit_DMA+0x164>)
 800665e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006664:	4a27      	ldr	r2, [pc, #156]	; (8006704 <HAL_SPI_Transmit_DMA+0x168>)
 8006666:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666c:	2200      	movs	r2, #0
 800666e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	4619      	mov	r1, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	330c      	adds	r3, #12
 8006680:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006686:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006688:	f7fb fb1a 	bl	8001cc0 <HAL_DMA_Start_IT>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00c      	beq.n	80066ac <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006696:	f043 0210 	orr.w	r2, r3, #16
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80066aa:	e01e      	b.n	80066ea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b40      	cmp	r3, #64	; 0x40
 80066b8:	d007      	beq.n	80066ca <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066c8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0220 	orr.w	r2, r2, #32
 80066d8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0202 	orr.w	r2, r2, #2
 80066e8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	08006ef5 	.word	0x08006ef5
 8006700:	08006d15 	.word	0x08006d15
 8006704:	08006f49 	.word	0x08006f49

08006708 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	4613      	mov	r3, r2
 8006714:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d110      	bne.n	8006744 <HAL_SPI_Receive_DMA+0x3c>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800672a:	d10b      	bne.n	8006744 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2204      	movs	r2, #4
 8006730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006734:	88fb      	ldrh	r3, [r7, #6]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f8ac 	bl	8006898 <HAL_SPI_TransmitReceive_DMA>
 8006740:	4603      	mov	r3, r0
 8006742:	e09f      	b.n	8006884 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <HAL_SPI_Receive_DMA+0x4a>
 800674e:	2302      	movs	r3, #2
 8006750:	e098      	b.n	8006884 <HAL_SPI_Receive_DMA+0x17c>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b01      	cmp	r3, #1
 8006764:	d002      	beq.n	800676c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8006766:	2302      	movs	r3, #2
 8006768:	75fb      	strb	r3, [r7, #23]
    goto error;
 800676a:	e086      	b.n	800687a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <HAL_SPI_Receive_DMA+0x70>
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d102      	bne.n	800677e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800677c:	e07d      	b.n	800687a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2204      	movs	r2, #4
 8006782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	88fa      	ldrh	r2, [r7, #6]
 8006796:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	88fa      	ldrh	r2, [r7, #6]
 800679c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067be:	d10f      	bne.n	80067e0 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e4:	4a29      	ldr	r2, [pc, #164]	; (800688c <HAL_SPI_Receive_DMA+0x184>)
 80067e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ec:	4a28      	ldr	r2, [pc, #160]	; (8006890 <HAL_SPI_Receive_DMA+0x188>)
 80067ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f4:	4a27      	ldr	r2, [pc, #156]	; (8006894 <HAL_SPI_Receive_DMA+0x18c>)
 80067f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fc:	2200      	movs	r2, #0
 80067fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	330c      	adds	r3, #12
 800680a:	4619      	mov	r1, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006810:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006816:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006818:	f7fb fa52 	bl	8001cc0 <HAL_DMA_Start_IT>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00c      	beq.n	800683c <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006826:	f043 0210 	orr.w	r2, r3, #16
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800683a:	e01e      	b.n	800687a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	d007      	beq.n	800685a <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006858:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 0220 	orr.w	r2, r2, #32
 8006868:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0201 	orr.w	r2, r2, #1
 8006878:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006882:	7dfb      	ldrb	r3, [r7, #23]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	08006f11 	.word	0x08006f11
 8006890:	08006dbd 	.word	0x08006dbd
 8006894:	08006f49 	.word	0x08006f49

08006898 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e0e3      	b.n	8006a80 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068c6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80068ce:	7dbb      	ldrb	r3, [r7, #22]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d00d      	beq.n	80068f0 <HAL_SPI_TransmitReceive_DMA+0x58>
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068da:	d106      	bne.n	80068ea <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d102      	bne.n	80068ea <HAL_SPI_TransmitReceive_DMA+0x52>
 80068e4:	7dbb      	ldrb	r3, [r7, #22]
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d002      	beq.n	80068f0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80068ea:	2302      	movs	r3, #2
 80068ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068ee:	e0c2      	b.n	8006a76 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d005      	beq.n	8006902 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80068fc:	887b      	ldrh	r3, [r7, #2]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d102      	bne.n	8006908 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006906:	e0b6      	b.n	8006a76 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b04      	cmp	r3, #4
 8006912:	d003      	beq.n	800691c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2205      	movs	r2, #5
 8006918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	887a      	ldrh	r2, [r7, #2]
 800692c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	887a      	ldrh	r2, [r7, #2]
 8006932:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	887a      	ldrh	r2, [r7, #2]
 800693e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	887a      	ldrh	r2, [r7, #2]
 8006944:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b04      	cmp	r3, #4
 800695c:	d108      	bne.n	8006970 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006962:	4a49      	ldr	r2, [pc, #292]	; (8006a88 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006964:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696a:	4a48      	ldr	r2, [pc, #288]	; (8006a8c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800696c:	63da      	str	r2, [r3, #60]	; 0x3c
 800696e:	e007      	b.n	8006980 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006974:	4a46      	ldr	r2, [pc, #280]	; (8006a90 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8006976:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800697c:	4a45      	ldr	r2, [pc, #276]	; (8006a94 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800697e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006984:	4a44      	ldr	r2, [pc, #272]	; (8006a98 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8006986:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698c:	2200      	movs	r2, #0
 800698e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	4619      	mov	r1, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80069a8:	f7fb f98a 	bl	8001cc0 <HAL_DMA_Start_IT>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00c      	beq.n	80069cc <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b6:	f043 0210 	orr.w	r2, r3, #16
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80069ca:	e054      	b.n	8006a76 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e0:	2200      	movs	r2, #0
 80069e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e8:	2200      	movs	r2, #0
 80069ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f0:	2200      	movs	r2, #0
 80069f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f8:	2200      	movs	r2, #0
 80069fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	4619      	mov	r1, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006a14:	f7fb f954 	bl	8001cc0 <HAL_DMA_Start_IT>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00c      	beq.n	8006a38 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a22:	f043 0210 	orr.w	r2, r3, #16
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006a36:	e01e      	b.n	8006a76 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b40      	cmp	r3, #64	; 0x40
 8006a44:	d007      	beq.n	8006a56 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a54:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0220 	orr.w	r2, r2, #32
 8006a64:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0202 	orr.w	r2, r2, #2
 8006a74:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	08006f11 	.word	0x08006f11
 8006a8c:	08006dbd 	.word	0x08006dbd
 8006a90:	08006f2d 	.word	0x08006f2d
 8006a94:	08006e65 	.word	0x08006e65
 8006a98:	08006f49 	.word	0x08006f49

08006a9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	099b      	lsrs	r3, r3, #6
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10f      	bne.n	8006ae0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	099b      	lsrs	r3, r3, #6
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	4798      	blx	r3
    return;
 8006ade:	e0d7      	b.n	8006c90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	085b      	lsrs	r3, r3, #1
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <HAL_SPI_IRQHandler+0x66>
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	09db      	lsrs	r3, r3, #7
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
    return;
 8006b00:	e0c6      	b.n	8006c90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	095b      	lsrs	r3, r3, #5
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10c      	bne.n	8006b28 <HAL_SPI_IRQHandler+0x8c>
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	099b      	lsrs	r3, r3, #6
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	0a1b      	lsrs	r3, r3, #8
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 80b4 	beq.w	8006c90 <HAL_SPI_IRQHandler+0x1f4>
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 80ad 	beq.w	8006c90 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	099b      	lsrs	r3, r3, #6
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d023      	beq.n	8006b8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d011      	beq.n	8006b72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b52:	f043 0204 	orr.w	r2, r3, #4
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	e00b      	b.n	8006b8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b72:	2300      	movs	r3, #0
 8006b74:	613b      	str	r3, [r7, #16]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	693b      	ldr	r3, [r7, #16]
        return;
 8006b88:	e082      	b.n	8006c90 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d014      	beq.n	8006bc0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9a:	f043 0201 	orr.w	r2, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00c      	beq.n	8006be6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd0:	f043 0208 	orr.w	r2, r3, #8
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60bb      	str	r3, [r7, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d04f      	beq.n	8006c8e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bfc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <HAL_SPI_IRQHandler+0x17e>
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d034      	beq.n	8006c84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0203 	bic.w	r2, r2, #3
 8006c28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d011      	beq.n	8006c56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c36:	4a18      	ldr	r2, [pc, #96]	; (8006c98 <HAL_SPI_IRQHandler+0x1fc>)
 8006c38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fb f906 	bl	8001e50 <HAL_DMA_Abort_IT>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d016      	beq.n	8006c8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c62:	4a0d      	ldr	r2, [pc, #52]	; (8006c98 <HAL_SPI_IRQHandler+0x1fc>)
 8006c64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fb f8f0 	bl	8001e50 <HAL_DMA_Abort_IT>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006c82:	e003      	b.n	8006c8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f83b 	bl	8006d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c8a:	e000      	b.n	8006c8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006c8c:	bf00      	nop
    return;
 8006c8e:	bf00      	nop
  }
}
 8006c90:	3720      	adds	r7, #32
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	08006f89 	.word	0x08006f89

08006c9c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d22:	f7fa fddd 	bl	80018e0 <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d36:	d03b      	beq.n	8006db0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0220 	bic.w	r2, r2, #32
 8006d46:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 0202 	bic.w	r2, r2, #2
 8006d56:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	2164      	movs	r1, #100	; 0x64
 8006d5c:	6978      	ldr	r0, [r7, #20]
 8006d5e:	f000 fa15 	bl	800718c <SPI_EndRxTxTransaction>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2200      	movs	r2, #0
 8006d96:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006da8:	6978      	ldr	r0, [r7, #20]
 8006daa:	f7ff ffa9 	bl	8006d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006dae:	e002      	b.n	8006db6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006db0:	6978      	ldr	r0, [r7, #20]
 8006db2:	f7ff ff73 	bl	8006c9c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dca:	f7fa fd89 	bl	80018e0 <HAL_GetTick>
 8006dce:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dde:	d03b      	beq.n	8006e58 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0220 	bic.w	r2, r2, #32
 8006dee:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10d      	bne.n	8006e14 <SPI_DMAReceiveCplt+0x58>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e00:	d108      	bne.n	8006e14 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0203 	bic.w	r2, r2, #3
 8006e10:	605a      	str	r2, [r3, #4]
 8006e12:	e007      	b.n	8006e24 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0201 	bic.w	r2, r2, #1
 8006e22:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	2164      	movs	r1, #100	; 0x64
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 f949 	bl	80070c0 <SPI_EndRxTransaction>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2220      	movs	r2, #32
 8006e38:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f7ff ff55 	bl	8006d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006e56:	e002      	b.n	8006e5e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f7f9 fb9b 	bl	8000594 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e72:	f7fa fd35 	bl	80018e0 <HAL_GetTick>
 8006e76:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e86:	d02f      	beq.n	8006ee8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0220 	bic.w	r2, r2, #32
 8006e96:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	2164      	movs	r1, #100	; 0x64
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 f975 	bl	800718c <SPI_EndRxTxTransaction>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d005      	beq.n	8006eb4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eac:	f043 0220 	orr.w	r2, r3, #32
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0203 	bic.w	r2, r2, #3
 8006ec2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff ff0d 	bl	8006d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006ee6:	e002      	b.n	8006eee <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f7ff fee1 	bl	8006cb0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff fede 	bl	8006cc4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f08:	bf00      	nop
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f7ff feda 	bl	8006cd8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f7ff fed6 	bl	8006cec <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0203 	bic.w	r2, r2, #3
 8006f64:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6a:	f043 0210 	orr.w	r2, r3, #16
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7ff fec0 	bl	8006d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7ff feac 	bl	8006d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006fa8:	bf00      	nop
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fc0:	f7fa fc8e 	bl	80018e0 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc8:	1a9b      	subs	r3, r3, r2
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	4413      	add	r3, r2
 8006fce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fd0:	f7fa fc86 	bl	80018e0 <HAL_GetTick>
 8006fd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fd6:	4b39      	ldr	r3, [pc, #228]	; (80070bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	015b      	lsls	r3, r3, #5
 8006fdc:	0d1b      	lsrs	r3, r3, #20
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	fb02 f303 	mul.w	r3, r2, r3
 8006fe4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fe6:	e054      	b.n	8007092 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fee:	d050      	beq.n	8007092 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ff0:	f7fa fc76 	bl	80018e0 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d902      	bls.n	8007006 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d13d      	bne.n	8007082 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007014:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800701e:	d111      	bne.n	8007044 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007028:	d004      	beq.n	8007034 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007032:	d107      	bne.n	8007044 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007042:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800704c:	d10f      	bne.n	800706e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800706c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e017      	b.n	80070b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	3b01      	subs	r3, #1
 8007090:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4013      	ands	r3, r2
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	429a      	cmp	r2, r3
 80070a0:	bf0c      	ite	eq
 80070a2:	2301      	moveq	r3, #1
 80070a4:	2300      	movne	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d19b      	bne.n	8006fe8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3720      	adds	r7, #32
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	20000014 	.word	0x20000014

080070c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af02      	add	r7, sp, #8
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070d4:	d111      	bne.n	80070fa <SPI_EndRxTransaction+0x3a>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070de:	d004      	beq.n	80070ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e8:	d107      	bne.n	80070fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007102:	d12a      	bne.n	800715a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710c:	d012      	beq.n	8007134 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2200      	movs	r2, #0
 8007116:	2180      	movs	r1, #128	; 0x80
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff ff49 	bl	8006fb0 <SPI_WaitFlagStateUntilTimeout>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d02d      	beq.n	8007180 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007128:	f043 0220 	orr.w	r2, r3, #32
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e026      	b.n	8007182 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2200      	movs	r2, #0
 800713c:	2101      	movs	r1, #1
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff ff36 	bl	8006fb0 <SPI_WaitFlagStateUntilTimeout>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01a      	beq.n	8007180 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714e:	f043 0220 	orr.w	r2, r3, #32
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e013      	b.n	8007182 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2200      	movs	r2, #0
 8007162:	2101      	movs	r1, #1
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f7ff ff23 	bl	8006fb0 <SPI_WaitFlagStateUntilTimeout>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d007      	beq.n	8007180 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007174:	f043 0220 	orr.w	r2, r3, #32
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e000      	b.n	8007182 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af02      	add	r7, sp, #8
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007198:	4b1b      	ldr	r3, [pc, #108]	; (8007208 <SPI_EndRxTxTransaction+0x7c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a1b      	ldr	r2, [pc, #108]	; (800720c <SPI_EndRxTxTransaction+0x80>)
 800719e:	fba2 2303 	umull	r2, r3, r2, r3
 80071a2:	0d5b      	lsrs	r3, r3, #21
 80071a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071a8:	fb02 f303 	mul.w	r3, r2, r3
 80071ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071b6:	d112      	bne.n	80071de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2200      	movs	r2, #0
 80071c0:	2180      	movs	r1, #128	; 0x80
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7ff fef4 	bl	8006fb0 <SPI_WaitFlagStateUntilTimeout>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d016      	beq.n	80071fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d2:	f043 0220 	orr.w	r2, r3, #32
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e00f      	b.n	80071fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f4:	2b80      	cmp	r3, #128	; 0x80
 80071f6:	d0f2      	beq.n	80071de <SPI_EndRxTxTransaction+0x52>
 80071f8:	e000      	b.n	80071fc <SPI_EndRxTxTransaction+0x70>
        break;
 80071fa:	bf00      	nop
  }

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20000014 	.word	0x20000014
 800720c:	165e9f81 	.word	0x165e9f81

08007210 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e03f      	b.n	80072a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d106      	bne.n	800723c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7f9 ffac 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2224      	movs	r2, #36	; 0x24
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007252:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 f849 	bl	80082ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	691a      	ldr	r2, [r3, #16]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	695a      	ldr	r2, [r3, #20]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007278:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007288:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b08a      	sub	sp, #40	; 0x28
 80072ae:	af02      	add	r7, sp, #8
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	603b      	str	r3, [r7, #0]
 80072b6:	4613      	mov	r3, r2
 80072b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b20      	cmp	r3, #32
 80072c8:	d17c      	bne.n	80073c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <HAL_UART_Transmit+0x2c>
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e075      	b.n	80073c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_UART_Transmit+0x3e>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e06e      	b.n	80073c6 <HAL_UART_Transmit+0x11c>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2221      	movs	r2, #33	; 0x21
 80072fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072fe:	f7fa faef 	bl	80018e0 <HAL_GetTick>
 8007302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	88fa      	ldrh	r2, [r7, #6]
 8007308:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	88fa      	ldrh	r2, [r7, #6]
 800730e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007318:	d108      	bne.n	800732c <HAL_UART_Transmit+0x82>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d104      	bne.n	800732c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	61bb      	str	r3, [r7, #24]
 800732a:	e003      	b.n	8007334 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007330:	2300      	movs	r3, #0
 8007332:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800733c:	e02a      	b.n	8007394 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2200      	movs	r2, #0
 8007346:	2180      	movs	r1, #128	; 0x80
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 fd04 	bl	8007d56 <UART_WaitOnFlagUntilTimeout>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e036      	b.n	80073c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10b      	bne.n	8007376 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800736c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	3302      	adds	r3, #2
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	e007      	b.n	8007386 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	781a      	ldrb	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	3301      	adds	r3, #1
 8007384:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800738a:	b29b      	uxth	r3, r3
 800738c:	3b01      	subs	r3, #1
 800738e:	b29a      	uxth	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007398:	b29b      	uxth	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1cf      	bne.n	800733e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2200      	movs	r2, #0
 80073a6:	2140      	movs	r1, #64	; 0x40
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 fcd4 	bl	8007d56 <UART_WaitOnFlagUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e006      	b.n	80073c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	e000      	b.n	80073c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80073c4:	2302      	movs	r3, #2
  }
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3720      	adds	r7, #32
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08c      	sub	sp, #48	; 0x30
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	4613      	mov	r3, r2
 80073dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b20      	cmp	r3, #32
 80073e8:	d165      	bne.n	80074b6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <HAL_UART_Transmit_DMA+0x26>
 80073f0:	88fb      	ldrh	r3, [r7, #6]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e05e      	b.n	80074b8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007400:	2b01      	cmp	r3, #1
 8007402:	d101      	bne.n	8007408 <HAL_UART_Transmit_DMA+0x38>
 8007404:	2302      	movs	r3, #2
 8007406:	e057      	b.n	80074b8 <HAL_UART_Transmit_DMA+0xe8>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	88fa      	ldrh	r2, [r7, #6]
 800741a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	88fa      	ldrh	r2, [r7, #6]
 8007420:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2221      	movs	r2, #33	; 0x21
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007434:	4a22      	ldr	r2, [pc, #136]	; (80074c0 <HAL_UART_Transmit_DMA+0xf0>)
 8007436:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743c:	4a21      	ldr	r2, [pc, #132]	; (80074c4 <HAL_UART_Transmit_DMA+0xf4>)
 800743e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007444:	4a20      	ldr	r2, [pc, #128]	; (80074c8 <HAL_UART_Transmit_DMA+0xf8>)
 8007446:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744c:	2200      	movs	r2, #0
 800744e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007450:	f107 0308 	add.w	r3, r7, #8
 8007454:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	6819      	ldr	r1, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3304      	adds	r3, #4
 8007464:	461a      	mov	r2, r3
 8007466:	88fb      	ldrh	r3, [r7, #6]
 8007468:	f7fa fc2a 	bl	8001cc0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007474:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3314      	adds	r3, #20
 8007484:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	617b      	str	r3, [r7, #20]
   return(result);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007494:	62bb      	str	r3, [r7, #40]	; 0x28
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3314      	adds	r3, #20
 800749c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800749e:	627a      	str	r2, [r7, #36]	; 0x24
 80074a0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6a39      	ldr	r1, [r7, #32]
 80074a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e5      	bne.n	800747e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e000      	b.n	80074b8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80074b6:	2302      	movs	r3, #2
  }
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3730      	adds	r7, #48	; 0x30
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	08007ab1 	.word	0x08007ab1
 80074c4:	08007b4b 	.word	0x08007b4b
 80074c8:	08007cc3 	.word	0x08007cc3

080074cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	4613      	mov	r3, r2
 80074d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	d11d      	bne.n	8007522 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <HAL_UART_Receive_DMA+0x26>
 80074ec:	88fb      	ldrh	r3, [r7, #6]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e016      	b.n	8007524 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d101      	bne.n	8007504 <HAL_UART_Receive_DMA+0x38>
 8007500:	2302      	movs	r3, #2
 8007502:	e00f      	b.n	8007524 <HAL_UART_Receive_DMA+0x58>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007512:	88fb      	ldrh	r3, [r7, #6]
 8007514:	461a      	mov	r2, r3
 8007516:	68b9      	ldr	r1, [r7, #8]
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 fc8b 	bl	8007e34 <UART_Start_Receive_DMA>
 800751e:	4603      	mov	r3, r0
 8007520:	e000      	b.n	8007524 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007522:	2302      	movs	r3, #2
  }
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b0ba      	sub	sp, #232	; 0xe8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007552:	2300      	movs	r3, #0
 8007554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007558:	2300      	movs	r3, #0
 800755a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800755e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800756a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10f      	bne.n	8007592 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <HAL_UART_IRQHandler+0x66>
 800757e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fdf3 	bl	8008176 <UART_Receive_IT>
      return;
 8007590:	e256      	b.n	8007a40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 80de 	beq.w	8007758 <HAL_UART_IRQHandler+0x22c>
 800759c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d106      	bne.n	80075b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 80d1 	beq.w	8007758 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00b      	beq.n	80075da <HAL_UART_IRQHandler+0xae>
 80075c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d005      	beq.n	80075da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	f043 0201 	orr.w	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075de:	f003 0304 	and.w	r3, r3, #4
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00b      	beq.n	80075fe <HAL_UART_IRQHandler+0xd2>
 80075e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d005      	beq.n	80075fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	f043 0202 	orr.w	r2, r3, #2
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00b      	beq.n	8007622 <HAL_UART_IRQHandler+0xf6>
 800760a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	f043 0204 	orr.w	r2, r3, #4
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007626:	f003 0308 	and.w	r3, r3, #8
 800762a:	2b00      	cmp	r3, #0
 800762c:	d011      	beq.n	8007652 <HAL_UART_IRQHandler+0x126>
 800762e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b00      	cmp	r3, #0
 8007638:	d105      	bne.n	8007646 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800763a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	f043 0208 	orr.w	r2, r3, #8
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 81ed 	beq.w	8007a36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800765c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007660:	f003 0320 	and.w	r3, r3, #32
 8007664:	2b00      	cmp	r3, #0
 8007666:	d008      	beq.n	800767a <HAL_UART_IRQHandler+0x14e>
 8007668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800766c:	f003 0320 	and.w	r3, r3, #32
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fd7e 	bl	8008176 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	bf0c      	ite	eq
 8007688:	2301      	moveq	r3, #1
 800768a:	2300      	movne	r3, #0
 800768c:	b2db      	uxtb	r3, r3
 800768e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	f003 0308 	and.w	r3, r3, #8
 800769a:	2b00      	cmp	r3, #0
 800769c:	d103      	bne.n	80076a6 <HAL_UART_IRQHandler+0x17a>
 800769e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d04f      	beq.n	8007746 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fc86 	bl	8007fb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b6:	2b40      	cmp	r3, #64	; 0x40
 80076b8:	d141      	bne.n	800773e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3314      	adds	r3, #20
 80076c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3314      	adds	r3, #20
 80076e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1d9      	bne.n	80076ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770a:	2b00      	cmp	r3, #0
 800770c:	d013      	beq.n	8007736 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007712:	4a7d      	ldr	r2, [pc, #500]	; (8007908 <HAL_UART_IRQHandler+0x3dc>)
 8007714:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	4618      	mov	r0, r3
 800771c:	f7fa fb98 	bl	8001e50 <HAL_DMA_Abort_IT>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d016      	beq.n	8007754 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007730:	4610      	mov	r0, r2
 8007732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007734:	e00e      	b.n	8007754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f9a4 	bl	8007a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800773c:	e00a      	b.n	8007754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f9a0 	bl	8007a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007744:	e006      	b.n	8007754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f99c 	bl	8007a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007752:	e170      	b.n	8007a36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007754:	bf00      	nop
    return;
 8007756:	e16e      	b.n	8007a36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775c:	2b01      	cmp	r3, #1
 800775e:	f040 814a 	bne.w	80079f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007766:	f003 0310 	and.w	r3, r3, #16
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8143 	beq.w	80079f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007774:	f003 0310 	and.w	r3, r3, #16
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 813c 	beq.w	80079f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800777e:	2300      	movs	r3, #0
 8007780:	60bb      	str	r3, [r7, #8]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	60bb      	str	r3, [r7, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	60bb      	str	r3, [r7, #8]
 8007792:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779e:	2b40      	cmp	r3, #64	; 0x40
 80077a0:	f040 80b4 	bne.w	800790c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 8140 	beq.w	8007a3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077c2:	429a      	cmp	r2, r3
 80077c4:	f080 8139 	bcs.w	8007a3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077da:	f000 8088 	beq.w	80078ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	330c      	adds	r3, #12
 80077e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077ec:	e853 3f00 	ldrex	r3, [r3]
 80077f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	330c      	adds	r3, #12
 8007806:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800780a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800780e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007812:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007816:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1d9      	bne.n	80077de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3314      	adds	r3, #20
 8007830:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800783a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3314      	adds	r3, #20
 800784a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800784e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007852:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007856:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e1      	bne.n	800782a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3314      	adds	r3, #20
 800786c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800787c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3314      	adds	r3, #20
 8007886:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800788a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800788c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007890:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e3      	bne.n	8007866 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2220      	movs	r2, #32
 80078a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	330c      	adds	r3, #12
 80078b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b6:	e853 3f00 	ldrex	r3, [r3]
 80078ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078be:	f023 0310 	bic.w	r3, r3, #16
 80078c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	330c      	adds	r3, #12
 80078cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80078d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078d8:	e841 2300 	strex	r3, r2, [r1]
 80078dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e3      	bne.n	80078ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fa fa41 	bl	8001d70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f8ca 	bl	8007a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007904:	e099      	b.n	8007a3a <HAL_UART_IRQHandler+0x50e>
 8007906:	bf00      	nop
 8007908:	0800807f 	.word	0x0800807f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007914:	b29b      	uxth	r3, r3
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 808b 	beq.w	8007a3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007928:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 8086 	beq.w	8007a3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	330c      	adds	r3, #12
 8007938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007948:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	330c      	adds	r3, #12
 8007952:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007956:	647a      	str	r2, [r7, #68]	; 0x44
 8007958:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800795c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e3      	bne.n	8007932 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3314      	adds	r3, #20
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	623b      	str	r3, [r7, #32]
   return(result);
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3314      	adds	r3, #20
 800798a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800798e:	633a      	str	r2, [r7, #48]	; 0x30
 8007990:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e3      	bne.n	800796a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	330c      	adds	r3, #12
 80079b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	60fb      	str	r3, [r7, #12]
   return(result);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 0310 	bic.w	r3, r3, #16
 80079c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	330c      	adds	r3, #12
 80079d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079d4:	61fa      	str	r2, [r7, #28]
 80079d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	69b9      	ldr	r1, [r7, #24]
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	617b      	str	r3, [r7, #20]
   return(result);
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e3      	bne.n	80079b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f852 	bl	8007a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079f4:	e023      	b.n	8007a3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d009      	beq.n	8007a16 <HAL_UART_IRQHandler+0x4ea>
 8007a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fb49 	bl	80080a6 <UART_Transmit_IT>
    return;
 8007a14:	e014      	b.n	8007a40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00e      	beq.n	8007a40 <HAL_UART_IRQHandler+0x514>
 8007a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d008      	beq.n	8007a40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fb89 	bl	8008146 <UART_EndTransmit_IT>
    return;
 8007a34:	e004      	b.n	8007a40 <HAL_UART_IRQHandler+0x514>
    return;
 8007a36:	bf00      	nop
 8007a38:	e002      	b.n	8007a40 <HAL_UART_IRQHandler+0x514>
      return;
 8007a3a:	bf00      	nop
 8007a3c:	e000      	b.n	8007a40 <HAL_UART_IRQHandler+0x514>
      return;
 8007a3e:	bf00      	nop
  }
}
 8007a40:	37e8      	adds	r7, #232	; 0xe8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop

08007a48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b090      	sub	sp, #64	; 0x40
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d137      	bne.n	8007b3c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ace:	2200      	movs	r2, #0
 8007ad0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3314      	adds	r3, #20
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3314      	adds	r3, #20
 8007af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007af2:	633a      	str	r2, [r7, #48]	; 0x30
 8007af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e5      	bne.n	8007ad2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	330c      	adds	r3, #12
 8007b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b26:	61fa      	str	r2, [r7, #28]
 8007b28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	69b9      	ldr	r1, [r7, #24]
 8007b2c:	69fa      	ldr	r2, [r7, #28]
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	617b      	str	r3, [r7, #20]
   return(result);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e5      	bne.n	8007b06 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b3a:	e002      	b.n	8007b42 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007b3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007b3e:	f7ff ff83 	bl	8007a48 <HAL_UART_TxCpltCallback>
}
 8007b42:	bf00      	nop
 8007b44:	3740      	adds	r7, #64	; 0x40
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f7ff ff7f 	bl	8007a5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b5e:	bf00      	nop
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b09c      	sub	sp, #112	; 0x70
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b72:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d172      	bne.n	8007c68 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b84:	2200      	movs	r2, #0
 8007b86:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	330c      	adds	r3, #12
 8007b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	330c      	adds	r3, #12
 8007ba6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ba8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007baa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e5      	bne.n	8007b88 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3314      	adds	r3, #20
 8007bc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bce:	f023 0301 	bic.w	r3, r3, #1
 8007bd2:	667b      	str	r3, [r7, #100]	; 0x64
 8007bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3314      	adds	r3, #20
 8007bda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bdc:	647a      	str	r2, [r7, #68]	; 0x44
 8007bde:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e5      	bne.n	8007bbc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3314      	adds	r3, #20
 8007bf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	623b      	str	r3, [r7, #32]
   return(result);
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c06:	663b      	str	r3, [r7, #96]	; 0x60
 8007c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3314      	adds	r3, #20
 8007c0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c10:	633a      	str	r2, [r7, #48]	; 0x30
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e5      	bne.n	8007bf0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c26:	2220      	movs	r2, #32
 8007c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d119      	bne.n	8007c68 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	330c      	adds	r3, #12
 8007c3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	e853 3f00 	ldrex	r3, [r3]
 8007c42:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0310 	bic.w	r3, r3, #16
 8007c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	330c      	adds	r3, #12
 8007c52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c54:	61fa      	str	r2, [r7, #28]
 8007c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	69b9      	ldr	r1, [r7, #24]
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	617b      	str	r3, [r7, #20]
   return(result);
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e5      	bne.n	8007c34 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d106      	bne.n	8007c7e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c74:	4619      	mov	r1, r3
 8007c76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c78:	f7ff ff0e 	bl	8007a98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c7c:	e002      	b.n	8007c84 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007c7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c80:	f7f8 fca8 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 8007c84:	bf00      	nop
 8007c86:	3770      	adds	r7, #112	; 0x70
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d108      	bne.n	8007cb4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ca6:	085b      	lsrs	r3, r3, #1
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	4619      	mov	r1, r3
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f7ff fef3 	bl	8007a98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cb2:	e002      	b.n	8007cba <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f7ff fedb 	bl	8007a70 <HAL_UART_RxHalfCpltCallback>
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cde:	2b80      	cmp	r3, #128	; 0x80
 8007ce0:	bf0c      	ite	eq
 8007ce2:	2301      	moveq	r3, #1
 8007ce4:	2300      	movne	r3, #0
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b21      	cmp	r3, #33	; 0x21
 8007cf4:	d108      	bne.n	8007d08 <UART_DMAError+0x46>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007d02:	68b8      	ldr	r0, [r7, #8]
 8007d04:	f000 f930 	bl	8007f68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d12:	2b40      	cmp	r3, #64	; 0x40
 8007d14:	bf0c      	ite	eq
 8007d16:	2301      	moveq	r3, #1
 8007d18:	2300      	movne	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b22      	cmp	r3, #34	; 0x22
 8007d28:	d108      	bne.n	8007d3c <UART_DMAError+0x7a>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2200      	movs	r2, #0
 8007d34:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007d36:	68b8      	ldr	r0, [r7, #8]
 8007d38:	f000 f93e 	bl	8007fb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	f043 0210 	orr.w	r2, r3, #16
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d48:	68b8      	ldr	r0, [r7, #8]
 8007d4a:	f7ff fe9b 	bl	8007a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d4e:	bf00      	nop
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b090      	sub	sp, #64	; 0x40
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	603b      	str	r3, [r7, #0]
 8007d62:	4613      	mov	r3, r2
 8007d64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d66:	e050      	b.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6e:	d04c      	beq.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d007      	beq.n	8007d86 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d76:	f7f9 fdb3 	bl	80018e0 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d241      	bcs.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	330c      	adds	r3, #12
 8007d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	330c      	adds	r3, #12
 8007da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007da6:	637a      	str	r2, [r7, #52]	; 0x34
 8007da8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e5      	bne.n	8007d86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3314      	adds	r3, #20
 8007dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f023 0301 	bic.w	r3, r3, #1
 8007dd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3314      	adds	r3, #20
 8007dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dda:	623a      	str	r2, [r7, #32]
 8007ddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	69f9      	ldr	r1, [r7, #28]
 8007de0:	6a3a      	ldr	r2, [r7, #32]
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e5      	bne.n	8007dba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e00f      	b.n	8007e2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4013      	ands	r3, r2
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	bf0c      	ite	eq
 8007e1a:	2301      	moveq	r3, #1
 8007e1c:	2300      	movne	r3, #0
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	461a      	mov	r2, r3
 8007e22:	79fb      	ldrb	r3, [r7, #7]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d09f      	beq.n	8007d68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3740      	adds	r7, #64	; 0x40
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b098      	sub	sp, #96	; 0x60
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	88fa      	ldrh	r2, [r7, #6]
 8007e4c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2222      	movs	r2, #34	; 0x22
 8007e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e60:	4a3e      	ldr	r2, [pc, #248]	; (8007f5c <UART_Start_Receive_DMA+0x128>)
 8007e62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	4a3d      	ldr	r2, [pc, #244]	; (8007f60 <UART_Start_Receive_DMA+0x12c>)
 8007e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	4a3c      	ldr	r2, [pc, #240]	; (8007f64 <UART_Start_Receive_DMA+0x130>)
 8007e72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	2200      	movs	r2, #0
 8007e7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e7c:	f107 0308 	add.w	r3, r7, #8
 8007e80:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	88fb      	ldrh	r3, [r7, #6]
 8007e94:	f7f9 ff14 	bl	8001cc0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e98:	2300      	movs	r3, #0
 8007e9a:	613b      	str	r3, [r7, #16]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	613b      	str	r3, [r7, #16]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	613b      	str	r3, [r7, #16]
 8007eac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	330c      	adds	r3, #12
 8007ebc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ecc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	330c      	adds	r3, #12
 8007ed4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ed6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007ed8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e5      	bne.n	8007eb6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3314      	adds	r3, #20
 8007ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	f043 0301 	orr.w	r3, r3, #1
 8007f00:	657b      	str	r3, [r7, #84]	; 0x54
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3314      	adds	r3, #20
 8007f08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f0a:	63ba      	str	r2, [r7, #56]	; 0x38
 8007f0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e5      	bne.n	8007eea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3314      	adds	r3, #20
 8007f24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	e853 3f00 	ldrex	r3, [r3]
 8007f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f34:	653b      	str	r3, [r7, #80]	; 0x50
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3314      	adds	r3, #20
 8007f3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f3e:	627a      	str	r2, [r7, #36]	; 0x24
 8007f40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f42:	6a39      	ldr	r1, [r7, #32]
 8007f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f46:	e841 2300 	strex	r3, r2, [r1]
 8007f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1e5      	bne.n	8007f1e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3760      	adds	r7, #96	; 0x60
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	08007b67 	.word	0x08007b67
 8007f60:	08007c8d 	.word	0x08007c8d
 8007f64:	08007cc3 	.word	0x08007cc3

08007f68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b089      	sub	sp, #36	; 0x24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	330c      	adds	r3, #12
 8007f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	330c      	adds	r3, #12
 8007f8e:	69fa      	ldr	r2, [r7, #28]
 8007f90:	61ba      	str	r2, [r7, #24]
 8007f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6979      	ldr	r1, [r7, #20]
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e5      	bne.n	8007f70 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007fac:	bf00      	nop
 8007fae:	3724      	adds	r7, #36	; 0x24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b095      	sub	sp, #84	; 0x54
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	330c      	adds	r3, #12
 8007fc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	330c      	adds	r3, #12
 8007fde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fe0:	643a      	str	r2, [r7, #64]	; 0x40
 8007fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e5      	bne.n	8007fc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3314      	adds	r3, #20
 8007ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	61fb      	str	r3, [r7, #28]
   return(result);
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	f023 0301 	bic.w	r3, r3, #1
 800800a:	64bb      	str	r3, [r7, #72]	; 0x48
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3314      	adds	r3, #20
 8008012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008014:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800801a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e5      	bne.n	8007ff4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802c:	2b01      	cmp	r3, #1
 800802e:	d119      	bne.n	8008064 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	330c      	adds	r3, #12
 8008036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	e853 3f00 	ldrex	r3, [r3]
 800803e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f023 0310 	bic.w	r3, r3, #16
 8008046:	647b      	str	r3, [r7, #68]	; 0x44
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	330c      	adds	r3, #12
 800804e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008050:	61ba      	str	r2, [r7, #24]
 8008052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008054:	6979      	ldr	r1, [r7, #20]
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	e841 2300 	strex	r3, r2, [r1]
 800805c:	613b      	str	r3, [r7, #16]
   return(result);
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e5      	bne.n	8008030 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2220      	movs	r2, #32
 8008068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008072:	bf00      	nop
 8008074:	3754      	adds	r7, #84	; 0x54
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff fcf3 	bl	8007a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800809e:	bf00      	nop
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b21      	cmp	r3, #33	; 0x21
 80080b8:	d13e      	bne.n	8008138 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c2:	d114      	bne.n	80080ee <UART_Transmit_IT+0x48>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d110      	bne.n	80080ee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	1c9a      	adds	r2, r3, #2
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	621a      	str	r2, [r3, #32]
 80080ec:	e008      	b.n	8008100 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	1c59      	adds	r1, r3, #1
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6211      	str	r1, [r2, #32]
 80080f8:	781a      	ldrb	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008104:	b29b      	uxth	r3, r3
 8008106:	3b01      	subs	r3, #1
 8008108:	b29b      	uxth	r3, r3
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	4619      	mov	r1, r3
 800810e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10f      	bne.n	8008134 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008122:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008132:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	e000      	b.n	800813a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008138:	2302      	movs	r3, #2
  }
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b082      	sub	sp, #8
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68da      	ldr	r2, [r3, #12]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800815c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2220      	movs	r2, #32
 8008162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff fc6e 	bl	8007a48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b08c      	sub	sp, #48	; 0x30
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b22      	cmp	r3, #34	; 0x22
 8008188:	f040 80ab 	bne.w	80082e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008194:	d117      	bne.n	80081c6 <UART_Receive_IT+0x50>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d113      	bne.n	80081c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081be:	1c9a      	adds	r2, r3, #2
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	629a      	str	r2, [r3, #40]	; 0x28
 80081c4:	e026      	b.n	8008214 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d8:	d007      	beq.n	80081ea <UART_Receive_IT+0x74>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10a      	bne.n	80081f8 <UART_Receive_IT+0x82>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d106      	bne.n	80081f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f4:	701a      	strb	r2, [r3, #0]
 80081f6:	e008      	b.n	800820a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008204:	b2da      	uxtb	r2, r3
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008218:	b29b      	uxth	r3, r3
 800821a:	3b01      	subs	r3, #1
 800821c:	b29b      	uxth	r3, r3
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4619      	mov	r1, r3
 8008222:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008224:	2b00      	cmp	r3, #0
 8008226:	d15a      	bne.n	80082de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0220 	bic.w	r2, r2, #32
 8008236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	695a      	ldr	r2, [r3, #20]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0201 	bic.w	r2, r2, #1
 8008256:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2220      	movs	r2, #32
 800825c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	2b01      	cmp	r3, #1
 8008266:	d135      	bne.n	80082d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	330c      	adds	r3, #12
 8008274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	613b      	str	r3, [r7, #16]
   return(result);
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f023 0310 	bic.w	r3, r3, #16
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	330c      	adds	r3, #12
 800828c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828e:	623a      	str	r2, [r7, #32]
 8008290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	69f9      	ldr	r1, [r7, #28]
 8008294:	6a3a      	ldr	r2, [r7, #32]
 8008296:	e841 2300 	strex	r3, r2, [r1]
 800829a:	61bb      	str	r3, [r7, #24]
   return(result);
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1e5      	bne.n	800826e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0310 	and.w	r3, r3, #16
 80082ac:	2b10      	cmp	r3, #16
 80082ae:	d10a      	bne.n	80082c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7ff fbe3 	bl	8007a98 <HAL_UARTEx_RxEventCallback>
 80082d2:	e002      	b.n	80082da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7f8 f97d 	bl	80005d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	e002      	b.n	80082e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	e000      	b.n	80082e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082e2:	2302      	movs	r3, #2
  }
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3730      	adds	r7, #48	; 0x30
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082f0:	b0c0      	sub	sp, #256	; 0x100
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008308:	68d9      	ldr	r1, [r3, #12]
 800830a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	ea40 0301 	orr.w	r3, r0, r1
 8008314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800831a:	689a      	ldr	r2, [r3, #8]
 800831c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	431a      	orrs	r2, r3
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	431a      	orrs	r2, r3
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	4313      	orrs	r3, r2
 8008334:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008344:	f021 010c 	bic.w	r1, r1, #12
 8008348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008352:	430b      	orrs	r3, r1
 8008354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008366:	6999      	ldr	r1, [r3, #24]
 8008368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	ea40 0301 	orr.w	r3, r0, r1
 8008372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4b8f      	ldr	r3, [pc, #572]	; (80085b8 <UART_SetConfig+0x2cc>)
 800837c:	429a      	cmp	r2, r3
 800837e:	d005      	beq.n	800838c <UART_SetConfig+0xa0>
 8008380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	4b8d      	ldr	r3, [pc, #564]	; (80085bc <UART_SetConfig+0x2d0>)
 8008388:	429a      	cmp	r2, r3
 800838a:	d104      	bne.n	8008396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800838c:	f7fe f868 	bl	8006460 <HAL_RCC_GetPCLK2Freq>
 8008390:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008394:	e003      	b.n	800839e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008396:	f7fe f84f 	bl	8006438 <HAL_RCC_GetPCLK1Freq>
 800839a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800839e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a2:	69db      	ldr	r3, [r3, #28]
 80083a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083a8:	f040 810c 	bne.w	80085c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083b0:	2200      	movs	r2, #0
 80083b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80083ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80083be:	4622      	mov	r2, r4
 80083c0:	462b      	mov	r3, r5
 80083c2:	1891      	adds	r1, r2, r2
 80083c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80083c6:	415b      	adcs	r3, r3
 80083c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80083ce:	4621      	mov	r1, r4
 80083d0:	eb12 0801 	adds.w	r8, r2, r1
 80083d4:	4629      	mov	r1, r5
 80083d6:	eb43 0901 	adc.w	r9, r3, r1
 80083da:	f04f 0200 	mov.w	r2, #0
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083ee:	4690      	mov	r8, r2
 80083f0:	4699      	mov	r9, r3
 80083f2:	4623      	mov	r3, r4
 80083f4:	eb18 0303 	adds.w	r3, r8, r3
 80083f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083fc:	462b      	mov	r3, r5
 80083fe:	eb49 0303 	adc.w	r3, r9, r3
 8008402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008412:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800841a:	460b      	mov	r3, r1
 800841c:	18db      	adds	r3, r3, r3
 800841e:	653b      	str	r3, [r7, #80]	; 0x50
 8008420:	4613      	mov	r3, r2
 8008422:	eb42 0303 	adc.w	r3, r2, r3
 8008426:	657b      	str	r3, [r7, #84]	; 0x54
 8008428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800842c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008430:	f7f7 ff2e 	bl	8000290 <__aeabi_uldivmod>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4b61      	ldr	r3, [pc, #388]	; (80085c0 <UART_SetConfig+0x2d4>)
 800843a:	fba3 2302 	umull	r2, r3, r3, r2
 800843e:	095b      	lsrs	r3, r3, #5
 8008440:	011c      	lsls	r4, r3, #4
 8008442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008446:	2200      	movs	r2, #0
 8008448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800844c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008454:	4642      	mov	r2, r8
 8008456:	464b      	mov	r3, r9
 8008458:	1891      	adds	r1, r2, r2
 800845a:	64b9      	str	r1, [r7, #72]	; 0x48
 800845c:	415b      	adcs	r3, r3
 800845e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008464:	4641      	mov	r1, r8
 8008466:	eb12 0a01 	adds.w	sl, r2, r1
 800846a:	4649      	mov	r1, r9
 800846c:	eb43 0b01 	adc.w	fp, r3, r1
 8008470:	f04f 0200 	mov.w	r2, #0
 8008474:	f04f 0300 	mov.w	r3, #0
 8008478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800847c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008484:	4692      	mov	sl, r2
 8008486:	469b      	mov	fp, r3
 8008488:	4643      	mov	r3, r8
 800848a:	eb1a 0303 	adds.w	r3, sl, r3
 800848e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008492:	464b      	mov	r3, r9
 8008494:	eb4b 0303 	adc.w	r3, fp, r3
 8008498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800849c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80084ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80084b0:	460b      	mov	r3, r1
 80084b2:	18db      	adds	r3, r3, r3
 80084b4:	643b      	str	r3, [r7, #64]	; 0x40
 80084b6:	4613      	mov	r3, r2
 80084b8:	eb42 0303 	adc.w	r3, r2, r3
 80084bc:	647b      	str	r3, [r7, #68]	; 0x44
 80084be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80084c6:	f7f7 fee3 	bl	8000290 <__aeabi_uldivmod>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4611      	mov	r1, r2
 80084d0:	4b3b      	ldr	r3, [pc, #236]	; (80085c0 <UART_SetConfig+0x2d4>)
 80084d2:	fba3 2301 	umull	r2, r3, r3, r1
 80084d6:	095b      	lsrs	r3, r3, #5
 80084d8:	2264      	movs	r2, #100	; 0x64
 80084da:	fb02 f303 	mul.w	r3, r2, r3
 80084de:	1acb      	subs	r3, r1, r3
 80084e0:	00db      	lsls	r3, r3, #3
 80084e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80084e6:	4b36      	ldr	r3, [pc, #216]	; (80085c0 <UART_SetConfig+0x2d4>)
 80084e8:	fba3 2302 	umull	r2, r3, r3, r2
 80084ec:	095b      	lsrs	r3, r3, #5
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084f4:	441c      	add	r4, r3
 80084f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084fa:	2200      	movs	r2, #0
 80084fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008500:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008508:	4642      	mov	r2, r8
 800850a:	464b      	mov	r3, r9
 800850c:	1891      	adds	r1, r2, r2
 800850e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008510:	415b      	adcs	r3, r3
 8008512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008518:	4641      	mov	r1, r8
 800851a:	1851      	adds	r1, r2, r1
 800851c:	6339      	str	r1, [r7, #48]	; 0x30
 800851e:	4649      	mov	r1, r9
 8008520:	414b      	adcs	r3, r1
 8008522:	637b      	str	r3, [r7, #52]	; 0x34
 8008524:	f04f 0200 	mov.w	r2, #0
 8008528:	f04f 0300 	mov.w	r3, #0
 800852c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008530:	4659      	mov	r1, fp
 8008532:	00cb      	lsls	r3, r1, #3
 8008534:	4651      	mov	r1, sl
 8008536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800853a:	4651      	mov	r1, sl
 800853c:	00ca      	lsls	r2, r1, #3
 800853e:	4610      	mov	r0, r2
 8008540:	4619      	mov	r1, r3
 8008542:	4603      	mov	r3, r0
 8008544:	4642      	mov	r2, r8
 8008546:	189b      	adds	r3, r3, r2
 8008548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800854c:	464b      	mov	r3, r9
 800854e:	460a      	mov	r2, r1
 8008550:	eb42 0303 	adc.w	r3, r2, r3
 8008554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008564:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800856c:	460b      	mov	r3, r1
 800856e:	18db      	adds	r3, r3, r3
 8008570:	62bb      	str	r3, [r7, #40]	; 0x28
 8008572:	4613      	mov	r3, r2
 8008574:	eb42 0303 	adc.w	r3, r2, r3
 8008578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800857a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800857e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008582:	f7f7 fe85 	bl	8000290 <__aeabi_uldivmod>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	4b0d      	ldr	r3, [pc, #52]	; (80085c0 <UART_SetConfig+0x2d4>)
 800858c:	fba3 1302 	umull	r1, r3, r3, r2
 8008590:	095b      	lsrs	r3, r3, #5
 8008592:	2164      	movs	r1, #100	; 0x64
 8008594:	fb01 f303 	mul.w	r3, r1, r3
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	3332      	adds	r3, #50	; 0x32
 800859e:	4a08      	ldr	r2, [pc, #32]	; (80085c0 <UART_SetConfig+0x2d4>)
 80085a0:	fba2 2303 	umull	r2, r3, r2, r3
 80085a4:	095b      	lsrs	r3, r3, #5
 80085a6:	f003 0207 	and.w	r2, r3, #7
 80085aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4422      	add	r2, r4
 80085b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085b4:	e105      	b.n	80087c2 <UART_SetConfig+0x4d6>
 80085b6:	bf00      	nop
 80085b8:	40011000 	.word	0x40011000
 80085bc:	40011400 	.word	0x40011400
 80085c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80085d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80085d6:	4642      	mov	r2, r8
 80085d8:	464b      	mov	r3, r9
 80085da:	1891      	adds	r1, r2, r2
 80085dc:	6239      	str	r1, [r7, #32]
 80085de:	415b      	adcs	r3, r3
 80085e0:	627b      	str	r3, [r7, #36]	; 0x24
 80085e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085e6:	4641      	mov	r1, r8
 80085e8:	1854      	adds	r4, r2, r1
 80085ea:	4649      	mov	r1, r9
 80085ec:	eb43 0501 	adc.w	r5, r3, r1
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	f04f 0300 	mov.w	r3, #0
 80085f8:	00eb      	lsls	r3, r5, #3
 80085fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085fe:	00e2      	lsls	r2, r4, #3
 8008600:	4614      	mov	r4, r2
 8008602:	461d      	mov	r5, r3
 8008604:	4643      	mov	r3, r8
 8008606:	18e3      	adds	r3, r4, r3
 8008608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800860c:	464b      	mov	r3, r9
 800860e:	eb45 0303 	adc.w	r3, r5, r3
 8008612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008626:	f04f 0200 	mov.w	r2, #0
 800862a:	f04f 0300 	mov.w	r3, #0
 800862e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008632:	4629      	mov	r1, r5
 8008634:	008b      	lsls	r3, r1, #2
 8008636:	4621      	mov	r1, r4
 8008638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800863c:	4621      	mov	r1, r4
 800863e:	008a      	lsls	r2, r1, #2
 8008640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008644:	f7f7 fe24 	bl	8000290 <__aeabi_uldivmod>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4b60      	ldr	r3, [pc, #384]	; (80087d0 <UART_SetConfig+0x4e4>)
 800864e:	fba3 2302 	umull	r2, r3, r3, r2
 8008652:	095b      	lsrs	r3, r3, #5
 8008654:	011c      	lsls	r4, r3, #4
 8008656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800865a:	2200      	movs	r2, #0
 800865c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008660:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008668:	4642      	mov	r2, r8
 800866a:	464b      	mov	r3, r9
 800866c:	1891      	adds	r1, r2, r2
 800866e:	61b9      	str	r1, [r7, #24]
 8008670:	415b      	adcs	r3, r3
 8008672:	61fb      	str	r3, [r7, #28]
 8008674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008678:	4641      	mov	r1, r8
 800867a:	1851      	adds	r1, r2, r1
 800867c:	6139      	str	r1, [r7, #16]
 800867e:	4649      	mov	r1, r9
 8008680:	414b      	adcs	r3, r1
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	f04f 0200 	mov.w	r2, #0
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008690:	4659      	mov	r1, fp
 8008692:	00cb      	lsls	r3, r1, #3
 8008694:	4651      	mov	r1, sl
 8008696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800869a:	4651      	mov	r1, sl
 800869c:	00ca      	lsls	r2, r1, #3
 800869e:	4610      	mov	r0, r2
 80086a0:	4619      	mov	r1, r3
 80086a2:	4603      	mov	r3, r0
 80086a4:	4642      	mov	r2, r8
 80086a6:	189b      	adds	r3, r3, r2
 80086a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086ac:	464b      	mov	r3, r9
 80086ae:	460a      	mov	r2, r1
 80086b0:	eb42 0303 	adc.w	r3, r2, r3
 80086b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80086c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80086c4:	f04f 0200 	mov.w	r2, #0
 80086c8:	f04f 0300 	mov.w	r3, #0
 80086cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80086d0:	4649      	mov	r1, r9
 80086d2:	008b      	lsls	r3, r1, #2
 80086d4:	4641      	mov	r1, r8
 80086d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086da:	4641      	mov	r1, r8
 80086dc:	008a      	lsls	r2, r1, #2
 80086de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80086e2:	f7f7 fdd5 	bl	8000290 <__aeabi_uldivmod>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4b39      	ldr	r3, [pc, #228]	; (80087d0 <UART_SetConfig+0x4e4>)
 80086ec:	fba3 1302 	umull	r1, r3, r3, r2
 80086f0:	095b      	lsrs	r3, r3, #5
 80086f2:	2164      	movs	r1, #100	; 0x64
 80086f4:	fb01 f303 	mul.w	r3, r1, r3
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	011b      	lsls	r3, r3, #4
 80086fc:	3332      	adds	r3, #50	; 0x32
 80086fe:	4a34      	ldr	r2, [pc, #208]	; (80087d0 <UART_SetConfig+0x4e4>)
 8008700:	fba2 2303 	umull	r2, r3, r2, r3
 8008704:	095b      	lsrs	r3, r3, #5
 8008706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800870a:	441c      	add	r4, r3
 800870c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008710:	2200      	movs	r2, #0
 8008712:	673b      	str	r3, [r7, #112]	; 0x70
 8008714:	677a      	str	r2, [r7, #116]	; 0x74
 8008716:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800871a:	4642      	mov	r2, r8
 800871c:	464b      	mov	r3, r9
 800871e:	1891      	adds	r1, r2, r2
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	415b      	adcs	r3, r3
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800872a:	4641      	mov	r1, r8
 800872c:	1851      	adds	r1, r2, r1
 800872e:	6039      	str	r1, [r7, #0]
 8008730:	4649      	mov	r1, r9
 8008732:	414b      	adcs	r3, r1
 8008734:	607b      	str	r3, [r7, #4]
 8008736:	f04f 0200 	mov.w	r2, #0
 800873a:	f04f 0300 	mov.w	r3, #0
 800873e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008742:	4659      	mov	r1, fp
 8008744:	00cb      	lsls	r3, r1, #3
 8008746:	4651      	mov	r1, sl
 8008748:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800874c:	4651      	mov	r1, sl
 800874e:	00ca      	lsls	r2, r1, #3
 8008750:	4610      	mov	r0, r2
 8008752:	4619      	mov	r1, r3
 8008754:	4603      	mov	r3, r0
 8008756:	4642      	mov	r2, r8
 8008758:	189b      	adds	r3, r3, r2
 800875a:	66bb      	str	r3, [r7, #104]	; 0x68
 800875c:	464b      	mov	r3, r9
 800875e:	460a      	mov	r2, r1
 8008760:	eb42 0303 	adc.w	r3, r2, r3
 8008764:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	663b      	str	r3, [r7, #96]	; 0x60
 8008770:	667a      	str	r2, [r7, #100]	; 0x64
 8008772:	f04f 0200 	mov.w	r2, #0
 8008776:	f04f 0300 	mov.w	r3, #0
 800877a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800877e:	4649      	mov	r1, r9
 8008780:	008b      	lsls	r3, r1, #2
 8008782:	4641      	mov	r1, r8
 8008784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008788:	4641      	mov	r1, r8
 800878a:	008a      	lsls	r2, r1, #2
 800878c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008790:	f7f7 fd7e 	bl	8000290 <__aeabi_uldivmod>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4b0d      	ldr	r3, [pc, #52]	; (80087d0 <UART_SetConfig+0x4e4>)
 800879a:	fba3 1302 	umull	r1, r3, r3, r2
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	2164      	movs	r1, #100	; 0x64
 80087a2:	fb01 f303 	mul.w	r3, r1, r3
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	011b      	lsls	r3, r3, #4
 80087aa:	3332      	adds	r3, #50	; 0x32
 80087ac:	4a08      	ldr	r2, [pc, #32]	; (80087d0 <UART_SetConfig+0x4e4>)
 80087ae:	fba2 2303 	umull	r2, r3, r2, r3
 80087b2:	095b      	lsrs	r3, r3, #5
 80087b4:	f003 020f 	and.w	r2, r3, #15
 80087b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4422      	add	r2, r4
 80087c0:	609a      	str	r2, [r3, #8]
}
 80087c2:	bf00      	nop
 80087c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80087c8:	46bd      	mov	sp, r7
 80087ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087ce:	bf00      	nop
 80087d0:	51eb851f 	.word	0x51eb851f

080087d4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80087da:	4b8d      	ldr	r3, [pc, #564]	; (8008a10 <MX_LWIP_Init+0x23c>)
 80087dc:	22c0      	movs	r2, #192	; 0xc0
 80087de:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80087e0:	4b8b      	ldr	r3, [pc, #556]	; (8008a10 <MX_LWIP_Init+0x23c>)
 80087e2:	22a8      	movs	r2, #168	; 0xa8
 80087e4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80087e6:	4b8a      	ldr	r3, [pc, #552]	; (8008a10 <MX_LWIP_Init+0x23c>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 132;
 80087ec:	4b88      	ldr	r3, [pc, #544]	; (8008a10 <MX_LWIP_Init+0x23c>)
 80087ee:	2284      	movs	r2, #132	; 0x84
 80087f0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80087f2:	4b88      	ldr	r3, [pc, #544]	; (8008a14 <MX_LWIP_Init+0x240>)
 80087f4:	22ff      	movs	r2, #255	; 0xff
 80087f6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80087f8:	4b86      	ldr	r3, [pc, #536]	; (8008a14 <MX_LWIP_Init+0x240>)
 80087fa:	22ff      	movs	r2, #255	; 0xff
 80087fc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80087fe:	4b85      	ldr	r3, [pc, #532]	; (8008a14 <MX_LWIP_Init+0x240>)
 8008800:	22ff      	movs	r2, #255	; 0xff
 8008802:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008804:	4b83      	ldr	r3, [pc, #524]	; (8008a14 <MX_LWIP_Init+0x240>)
 8008806:	2200      	movs	r2, #0
 8008808:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800880a:	4b83      	ldr	r3, [pc, #524]	; (8008a18 <MX_LWIP_Init+0x244>)
 800880c:	22c0      	movs	r2, #192	; 0xc0
 800880e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008810:	4b81      	ldr	r3, [pc, #516]	; (8008a18 <MX_LWIP_Init+0x244>)
 8008812:	22a8      	movs	r2, #168	; 0xa8
 8008814:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8008816:	4b80      	ldr	r3, [pc, #512]	; (8008a18 <MX_LWIP_Init+0x244>)
 8008818:	2200      	movs	r2, #0
 800881a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800881c:	4b7e      	ldr	r3, [pc, #504]	; (8008a18 <MX_LWIP_Init+0x244>)
 800881e:	2201      	movs	r2, #1
 8008820:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8008822:	f000 fcdf 	bl	80091e4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008826:	4b7a      	ldr	r3, [pc, #488]	; (8008a10 <MX_LWIP_Init+0x23c>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	061a      	lsls	r2, r3, #24
 800882c:	4b78      	ldr	r3, [pc, #480]	; (8008a10 <MX_LWIP_Init+0x23c>)
 800882e:	785b      	ldrb	r3, [r3, #1]
 8008830:	041b      	lsls	r3, r3, #16
 8008832:	431a      	orrs	r2, r3
 8008834:	4b76      	ldr	r3, [pc, #472]	; (8008a10 <MX_LWIP_Init+0x23c>)
 8008836:	789b      	ldrb	r3, [r3, #2]
 8008838:	021b      	lsls	r3, r3, #8
 800883a:	4313      	orrs	r3, r2
 800883c:	4a74      	ldr	r2, [pc, #464]	; (8008a10 <MX_LWIP_Init+0x23c>)
 800883e:	78d2      	ldrb	r2, [r2, #3]
 8008840:	4313      	orrs	r3, r2
 8008842:	061a      	lsls	r2, r3, #24
 8008844:	4b72      	ldr	r3, [pc, #456]	; (8008a10 <MX_LWIP_Init+0x23c>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	0619      	lsls	r1, r3, #24
 800884a:	4b71      	ldr	r3, [pc, #452]	; (8008a10 <MX_LWIP_Init+0x23c>)
 800884c:	785b      	ldrb	r3, [r3, #1]
 800884e:	041b      	lsls	r3, r3, #16
 8008850:	4319      	orrs	r1, r3
 8008852:	4b6f      	ldr	r3, [pc, #444]	; (8008a10 <MX_LWIP_Init+0x23c>)
 8008854:	789b      	ldrb	r3, [r3, #2]
 8008856:	021b      	lsls	r3, r3, #8
 8008858:	430b      	orrs	r3, r1
 800885a:	496d      	ldr	r1, [pc, #436]	; (8008a10 <MX_LWIP_Init+0x23c>)
 800885c:	78c9      	ldrb	r1, [r1, #3]
 800885e:	430b      	orrs	r3, r1
 8008860:	021b      	lsls	r3, r3, #8
 8008862:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008866:	431a      	orrs	r2, r3
 8008868:	4b69      	ldr	r3, [pc, #420]	; (8008a10 <MX_LWIP_Init+0x23c>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	0619      	lsls	r1, r3, #24
 800886e:	4b68      	ldr	r3, [pc, #416]	; (8008a10 <MX_LWIP_Init+0x23c>)
 8008870:	785b      	ldrb	r3, [r3, #1]
 8008872:	041b      	lsls	r3, r3, #16
 8008874:	4319      	orrs	r1, r3
 8008876:	4b66      	ldr	r3, [pc, #408]	; (8008a10 <MX_LWIP_Init+0x23c>)
 8008878:	789b      	ldrb	r3, [r3, #2]
 800887a:	021b      	lsls	r3, r3, #8
 800887c:	430b      	orrs	r3, r1
 800887e:	4964      	ldr	r1, [pc, #400]	; (8008a10 <MX_LWIP_Init+0x23c>)
 8008880:	78c9      	ldrb	r1, [r1, #3]
 8008882:	430b      	orrs	r3, r1
 8008884:	0a1b      	lsrs	r3, r3, #8
 8008886:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800888a:	431a      	orrs	r2, r3
 800888c:	4b60      	ldr	r3, [pc, #384]	; (8008a10 <MX_LWIP_Init+0x23c>)
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	0619      	lsls	r1, r3, #24
 8008892:	4b5f      	ldr	r3, [pc, #380]	; (8008a10 <MX_LWIP_Init+0x23c>)
 8008894:	785b      	ldrb	r3, [r3, #1]
 8008896:	041b      	lsls	r3, r3, #16
 8008898:	4319      	orrs	r1, r3
 800889a:	4b5d      	ldr	r3, [pc, #372]	; (8008a10 <MX_LWIP_Init+0x23c>)
 800889c:	789b      	ldrb	r3, [r3, #2]
 800889e:	021b      	lsls	r3, r3, #8
 80088a0:	430b      	orrs	r3, r1
 80088a2:	495b      	ldr	r1, [pc, #364]	; (8008a10 <MX_LWIP_Init+0x23c>)
 80088a4:	78c9      	ldrb	r1, [r1, #3]
 80088a6:	430b      	orrs	r3, r1
 80088a8:	0e1b      	lsrs	r3, r3, #24
 80088aa:	4313      	orrs	r3, r2
 80088ac:	4a5b      	ldr	r2, [pc, #364]	; (8008a1c <MX_LWIP_Init+0x248>)
 80088ae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80088b0:	4b58      	ldr	r3, [pc, #352]	; (8008a14 <MX_LWIP_Init+0x240>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	061a      	lsls	r2, r3, #24
 80088b6:	4b57      	ldr	r3, [pc, #348]	; (8008a14 <MX_LWIP_Init+0x240>)
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	041b      	lsls	r3, r3, #16
 80088bc:	431a      	orrs	r2, r3
 80088be:	4b55      	ldr	r3, [pc, #340]	; (8008a14 <MX_LWIP_Init+0x240>)
 80088c0:	789b      	ldrb	r3, [r3, #2]
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	4313      	orrs	r3, r2
 80088c6:	4a53      	ldr	r2, [pc, #332]	; (8008a14 <MX_LWIP_Init+0x240>)
 80088c8:	78d2      	ldrb	r2, [r2, #3]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	061a      	lsls	r2, r3, #24
 80088ce:	4b51      	ldr	r3, [pc, #324]	; (8008a14 <MX_LWIP_Init+0x240>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	0619      	lsls	r1, r3, #24
 80088d4:	4b4f      	ldr	r3, [pc, #316]	; (8008a14 <MX_LWIP_Init+0x240>)
 80088d6:	785b      	ldrb	r3, [r3, #1]
 80088d8:	041b      	lsls	r3, r3, #16
 80088da:	4319      	orrs	r1, r3
 80088dc:	4b4d      	ldr	r3, [pc, #308]	; (8008a14 <MX_LWIP_Init+0x240>)
 80088de:	789b      	ldrb	r3, [r3, #2]
 80088e0:	021b      	lsls	r3, r3, #8
 80088e2:	430b      	orrs	r3, r1
 80088e4:	494b      	ldr	r1, [pc, #300]	; (8008a14 <MX_LWIP_Init+0x240>)
 80088e6:	78c9      	ldrb	r1, [r1, #3]
 80088e8:	430b      	orrs	r3, r1
 80088ea:	021b      	lsls	r3, r3, #8
 80088ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088f0:	431a      	orrs	r2, r3
 80088f2:	4b48      	ldr	r3, [pc, #288]	; (8008a14 <MX_LWIP_Init+0x240>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	0619      	lsls	r1, r3, #24
 80088f8:	4b46      	ldr	r3, [pc, #280]	; (8008a14 <MX_LWIP_Init+0x240>)
 80088fa:	785b      	ldrb	r3, [r3, #1]
 80088fc:	041b      	lsls	r3, r3, #16
 80088fe:	4319      	orrs	r1, r3
 8008900:	4b44      	ldr	r3, [pc, #272]	; (8008a14 <MX_LWIP_Init+0x240>)
 8008902:	789b      	ldrb	r3, [r3, #2]
 8008904:	021b      	lsls	r3, r3, #8
 8008906:	430b      	orrs	r3, r1
 8008908:	4942      	ldr	r1, [pc, #264]	; (8008a14 <MX_LWIP_Init+0x240>)
 800890a:	78c9      	ldrb	r1, [r1, #3]
 800890c:	430b      	orrs	r3, r1
 800890e:	0a1b      	lsrs	r3, r3, #8
 8008910:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008914:	431a      	orrs	r2, r3
 8008916:	4b3f      	ldr	r3, [pc, #252]	; (8008a14 <MX_LWIP_Init+0x240>)
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	0619      	lsls	r1, r3, #24
 800891c:	4b3d      	ldr	r3, [pc, #244]	; (8008a14 <MX_LWIP_Init+0x240>)
 800891e:	785b      	ldrb	r3, [r3, #1]
 8008920:	041b      	lsls	r3, r3, #16
 8008922:	4319      	orrs	r1, r3
 8008924:	4b3b      	ldr	r3, [pc, #236]	; (8008a14 <MX_LWIP_Init+0x240>)
 8008926:	789b      	ldrb	r3, [r3, #2]
 8008928:	021b      	lsls	r3, r3, #8
 800892a:	430b      	orrs	r3, r1
 800892c:	4939      	ldr	r1, [pc, #228]	; (8008a14 <MX_LWIP_Init+0x240>)
 800892e:	78c9      	ldrb	r1, [r1, #3]
 8008930:	430b      	orrs	r3, r1
 8008932:	0e1b      	lsrs	r3, r3, #24
 8008934:	4313      	orrs	r3, r2
 8008936:	4a3a      	ldr	r2, [pc, #232]	; (8008a20 <MX_LWIP_Init+0x24c>)
 8008938:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800893a:	4b37      	ldr	r3, [pc, #220]	; (8008a18 <MX_LWIP_Init+0x244>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	061a      	lsls	r2, r3, #24
 8008940:	4b35      	ldr	r3, [pc, #212]	; (8008a18 <MX_LWIP_Init+0x244>)
 8008942:	785b      	ldrb	r3, [r3, #1]
 8008944:	041b      	lsls	r3, r3, #16
 8008946:	431a      	orrs	r2, r3
 8008948:	4b33      	ldr	r3, [pc, #204]	; (8008a18 <MX_LWIP_Init+0x244>)
 800894a:	789b      	ldrb	r3, [r3, #2]
 800894c:	021b      	lsls	r3, r3, #8
 800894e:	4313      	orrs	r3, r2
 8008950:	4a31      	ldr	r2, [pc, #196]	; (8008a18 <MX_LWIP_Init+0x244>)
 8008952:	78d2      	ldrb	r2, [r2, #3]
 8008954:	4313      	orrs	r3, r2
 8008956:	061a      	lsls	r2, r3, #24
 8008958:	4b2f      	ldr	r3, [pc, #188]	; (8008a18 <MX_LWIP_Init+0x244>)
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	0619      	lsls	r1, r3, #24
 800895e:	4b2e      	ldr	r3, [pc, #184]	; (8008a18 <MX_LWIP_Init+0x244>)
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	041b      	lsls	r3, r3, #16
 8008964:	4319      	orrs	r1, r3
 8008966:	4b2c      	ldr	r3, [pc, #176]	; (8008a18 <MX_LWIP_Init+0x244>)
 8008968:	789b      	ldrb	r3, [r3, #2]
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	430b      	orrs	r3, r1
 800896e:	492a      	ldr	r1, [pc, #168]	; (8008a18 <MX_LWIP_Init+0x244>)
 8008970:	78c9      	ldrb	r1, [r1, #3]
 8008972:	430b      	orrs	r3, r1
 8008974:	021b      	lsls	r3, r3, #8
 8008976:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800897a:	431a      	orrs	r2, r3
 800897c:	4b26      	ldr	r3, [pc, #152]	; (8008a18 <MX_LWIP_Init+0x244>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	0619      	lsls	r1, r3, #24
 8008982:	4b25      	ldr	r3, [pc, #148]	; (8008a18 <MX_LWIP_Init+0x244>)
 8008984:	785b      	ldrb	r3, [r3, #1]
 8008986:	041b      	lsls	r3, r3, #16
 8008988:	4319      	orrs	r1, r3
 800898a:	4b23      	ldr	r3, [pc, #140]	; (8008a18 <MX_LWIP_Init+0x244>)
 800898c:	789b      	ldrb	r3, [r3, #2]
 800898e:	021b      	lsls	r3, r3, #8
 8008990:	430b      	orrs	r3, r1
 8008992:	4921      	ldr	r1, [pc, #132]	; (8008a18 <MX_LWIP_Init+0x244>)
 8008994:	78c9      	ldrb	r1, [r1, #3]
 8008996:	430b      	orrs	r3, r1
 8008998:	0a1b      	lsrs	r3, r3, #8
 800899a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800899e:	431a      	orrs	r2, r3
 80089a0:	4b1d      	ldr	r3, [pc, #116]	; (8008a18 <MX_LWIP_Init+0x244>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	0619      	lsls	r1, r3, #24
 80089a6:	4b1c      	ldr	r3, [pc, #112]	; (8008a18 <MX_LWIP_Init+0x244>)
 80089a8:	785b      	ldrb	r3, [r3, #1]
 80089aa:	041b      	lsls	r3, r3, #16
 80089ac:	4319      	orrs	r1, r3
 80089ae:	4b1a      	ldr	r3, [pc, #104]	; (8008a18 <MX_LWIP_Init+0x244>)
 80089b0:	789b      	ldrb	r3, [r3, #2]
 80089b2:	021b      	lsls	r3, r3, #8
 80089b4:	430b      	orrs	r3, r1
 80089b6:	4918      	ldr	r1, [pc, #96]	; (8008a18 <MX_LWIP_Init+0x244>)
 80089b8:	78c9      	ldrb	r1, [r1, #3]
 80089ba:	430b      	orrs	r3, r1
 80089bc:	0e1b      	lsrs	r3, r3, #24
 80089be:	4313      	orrs	r3, r2
 80089c0:	4a18      	ldr	r2, [pc, #96]	; (8008a24 <MX_LWIP_Init+0x250>)
 80089c2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80089c4:	4b18      	ldr	r3, [pc, #96]	; (8008a28 <MX_LWIP_Init+0x254>)
 80089c6:	9302      	str	r3, [sp, #8]
 80089c8:	4b18      	ldr	r3, [pc, #96]	; (8008a2c <MX_LWIP_Init+0x258>)
 80089ca:	9301      	str	r3, [sp, #4]
 80089cc:	2300      	movs	r3, #0
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	4b14      	ldr	r3, [pc, #80]	; (8008a24 <MX_LWIP_Init+0x250>)
 80089d2:	4a13      	ldr	r2, [pc, #76]	; (8008a20 <MX_LWIP_Init+0x24c>)
 80089d4:	4911      	ldr	r1, [pc, #68]	; (8008a1c <MX_LWIP_Init+0x248>)
 80089d6:	4816      	ldr	r0, [pc, #88]	; (8008a30 <MX_LWIP_Init+0x25c>)
 80089d8:	f001 f8aa 	bl	8009b30 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80089dc:	4814      	ldr	r0, [pc, #80]	; (8008a30 <MX_LWIP_Init+0x25c>)
 80089de:	f001 fa59 	bl	8009e94 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80089e2:	4b13      	ldr	r3, [pc, #76]	; (8008a30 <MX_LWIP_Init+0x25c>)
 80089e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089e8:	089b      	lsrs	r3, r3, #2
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80089f4:	480e      	ldr	r0, [pc, #56]	; (8008a30 <MX_LWIP_Init+0x25c>)
 80089f6:	f001 fa5d 	bl	8009eb4 <netif_set_up>
 80089fa:	e002      	b.n	8008a02 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80089fc:	480c      	ldr	r0, [pc, #48]	; (8008a30 <MX_LWIP_Init+0x25c>)
 80089fe:	f001 fac5 	bl	8009f8c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8008a02:	490c      	ldr	r1, [pc, #48]	; (8008a34 <MX_LWIP_Init+0x260>)
 8008a04:	480a      	ldr	r0, [pc, #40]	; (8008a30 <MX_LWIP_Init+0x25c>)
 8008a06:	f001 faf3 	bl	8009ff0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008a0a:	bf00      	nop
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	200005b8 	.word	0x200005b8
 8008a14:	200005bc 	.word	0x200005bc
 8008a18:	200005c0 	.word	0x200005c0
 8008a1c:	200005ac 	.word	0x200005ac
 8008a20:	200005b0 	.word	0x200005b0
 8008a24:	200005b4 	.word	0x200005b4
 8008a28:	08013285 	.word	0x08013285
 8008a2c:	08009011 	.word	0x08009011
 8008a30:	20000578 	.word	0x20000578
 8008a34:	0800907d 	.word	0x0800907d

08008a38 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08e      	sub	sp, #56	; 0x38
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	605a      	str	r2, [r3, #4]
 8008a4a:	609a      	str	r2, [r3, #8]
 8008a4c:	60da      	str	r2, [r3, #12]
 8008a4e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a59      	ldr	r2, [pc, #356]	; (8008bbc <HAL_ETH_MspInit+0x184>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	f040 80ac 	bne.w	8008bb4 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	623b      	str	r3, [r7, #32]
 8008a60:	4b57      	ldr	r3, [pc, #348]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a64:	4a56      	ldr	r2, [pc, #344]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008a66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8008a6c:	4b54      	ldr	r3, [pc, #336]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a74:	623b      	str	r3, [r7, #32]
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	61fb      	str	r3, [r7, #28]
 8008a7c:	4b50      	ldr	r3, [pc, #320]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a80:	4a4f      	ldr	r2, [pc, #316]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008a82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a86:	6313      	str	r3, [r2, #48]	; 0x30
 8008a88:	4b4d      	ldr	r3, [pc, #308]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a90:	61fb      	str	r3, [r7, #28]
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	2300      	movs	r3, #0
 8008a96:	61bb      	str	r3, [r7, #24]
 8008a98:	4b49      	ldr	r3, [pc, #292]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9c:	4a48      	ldr	r2, [pc, #288]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008a9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8008aa4:	4b46      	ldr	r3, [pc, #280]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aac:	61bb      	str	r3, [r7, #24]
 8008aae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	617b      	str	r3, [r7, #20]
 8008ab4:	4b42      	ldr	r3, [pc, #264]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab8:	4a41      	ldr	r2, [pc, #260]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008aba:	f043 0304 	orr.w	r3, r3, #4
 8008abe:	6313      	str	r3, [r2, #48]	; 0x30
 8008ac0:	4b3f      	ldr	r3, [pc, #252]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	617b      	str	r3, [r7, #20]
 8008aca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008acc:	2300      	movs	r3, #0
 8008ace:	613b      	str	r3, [r7, #16]
 8008ad0:	4b3b      	ldr	r3, [pc, #236]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad4:	4a3a      	ldr	r2, [pc, #232]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008ad6:	f043 0301 	orr.w	r3, r3, #1
 8008ada:	6313      	str	r3, [r2, #48]	; 0x30
 8008adc:	4b38      	ldr	r3, [pc, #224]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	613b      	str	r3, [r7, #16]
 8008ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	4b34      	ldr	r3, [pc, #208]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af0:	4a33      	ldr	r2, [pc, #204]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008af2:	f043 0302 	orr.w	r3, r3, #2
 8008af6:	6313      	str	r3, [r2, #48]	; 0x30
 8008af8:	4b31      	ldr	r3, [pc, #196]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008b04:	2300      	movs	r3, #0
 8008b06:	60bb      	str	r3, [r7, #8]
 8008b08:	4b2d      	ldr	r3, [pc, #180]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0c:	4a2c      	ldr	r2, [pc, #176]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b12:	6313      	str	r3, [r2, #48]	; 0x30
 8008b14:	4b2a      	ldr	r3, [pc, #168]	; (8008bc0 <HAL_ETH_MspInit+0x188>)
 8008b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1c:	60bb      	str	r3, [r7, #8]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008b20:	2332      	movs	r3, #50	; 0x32
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b24:	2302      	movs	r3, #2
 8008b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008b30:	230b      	movs	r3, #11
 8008b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4822      	ldr	r0, [pc, #136]	; (8008bc4 <HAL_ETH_MspInit+0x18c>)
 8008b3c:	f7fa fdc2 	bl	80036c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008b40:	2386      	movs	r3, #134	; 0x86
 8008b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b44:	2302      	movs	r3, #2
 8008b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008b50:	230b      	movs	r3, #11
 8008b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b58:	4619      	mov	r1, r3
 8008b5a:	481b      	ldr	r0, [pc, #108]	; (8008bc8 <HAL_ETH_MspInit+0x190>)
 8008b5c:	f7fa fdb2 	bl	80036c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 8008b60:	f242 0301 	movw	r3, #8193	; 0x2001
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b66:	2302      	movs	r3, #2
 8008b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008b72:	230b      	movs	r3, #11
 8008b74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4813      	ldr	r0, [pc, #76]	; (8008bcc <HAL_ETH_MspInit+0x194>)
 8008b7e:	f7fa fda1 	bl	80036c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008b82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b90:	2303      	movs	r3, #3
 8008b92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008b94:	230b      	movs	r3, #11
 8008b96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	480c      	ldr	r0, [pc, #48]	; (8008bd0 <HAL_ETH_MspInit+0x198>)
 8008ba0:	f7fa fd90 	bl	80036c4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	203d      	movs	r0, #61	; 0x3d
 8008baa:	f7f8 ffa4 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008bae:	203d      	movs	r0, #61	; 0x3d
 8008bb0:	f7f8 ffbd 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008bb4:	bf00      	nop
 8008bb6:	3738      	adds	r7, #56	; 0x38
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	40028000 	.word	0x40028000
 8008bc0:	40023800 	.word	0x40023800
 8008bc4:	40020800 	.word	0x40020800
 8008bc8:	40020000 	.word	0x40020000
 8008bcc:	40020400 	.word	0x40020400
 8008bd0:	40021800 	.word	0x40021800

08008bd4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008be0:	4b4d      	ldr	r3, [pc, #308]	; (8008d18 <low_level_init+0x144>)
 8008be2:	4a4e      	ldr	r2, [pc, #312]	; (8008d1c <low_level_init+0x148>)
 8008be4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008be6:	4b4c      	ldr	r3, [pc, #304]	; (8008d18 <low_level_init+0x144>)
 8008be8:	2201      	movs	r2, #1
 8008bea:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008bec:	4b4a      	ldr	r3, [pc, #296]	; (8008d18 <low_level_init+0x144>)
 8008bee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008bf2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008bf4:	4b48      	ldr	r3, [pc, #288]	; (8008d18 <low_level_init+0x144>)
 8008bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bfa:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008bfc:	4b46      	ldr	r3, [pc, #280]	; (8008d18 <low_level_init+0x144>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8008c02:	2300      	movs	r3, #0
 8008c04:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008c06:	2380      	movs	r3, #128	; 0x80
 8008c08:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008c0a:	23e1      	movs	r3, #225	; 0xe1
 8008c0c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008c12:	2300      	movs	r3, #0
 8008c14:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008c16:	2300      	movs	r3, #0
 8008c18:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008c1a:	4a3f      	ldr	r2, [pc, #252]	; (8008d18 <low_level_init+0x144>)
 8008c1c:	f107 0308 	add.w	r3, r7, #8
 8008c20:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8008c22:	4b3d      	ldr	r3, [pc, #244]	; (8008d18 <low_level_init+0x144>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008c28:	4b3b      	ldr	r3, [pc, #236]	; (8008d18 <low_level_init+0x144>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008c2e:	4b3a      	ldr	r3, [pc, #232]	; (8008d18 <low_level_init+0x144>)
 8008c30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008c34:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008c36:	4838      	ldr	r0, [pc, #224]	; (8008d18 <low_level_init+0x144>)
 8008c38:	f7f9 fbb0 	bl	800239c <HAL_ETH_Init>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d108      	bne.n	8008c58 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008c4c:	f043 0304 	orr.w	r3, r3, #4
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008c58:	2304      	movs	r3, #4
 8008c5a:	4a31      	ldr	r2, [pc, #196]	; (8008d20 <low_level_init+0x14c>)
 8008c5c:	4931      	ldr	r1, [pc, #196]	; (8008d24 <low_level_init+0x150>)
 8008c5e:	482e      	ldr	r0, [pc, #184]	; (8008d18 <low_level_init+0x144>)
 8008c60:	f7f9 fd36 	bl	80026d0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008c64:	2304      	movs	r3, #4
 8008c66:	4a30      	ldr	r2, [pc, #192]	; (8008d28 <low_level_init+0x154>)
 8008c68:	4930      	ldr	r1, [pc, #192]	; (8008d2c <low_level_init+0x158>)
 8008c6a:	482b      	ldr	r0, [pc, #172]	; (8008d18 <low_level_init+0x144>)
 8008c6c:	f7f9 fd98 	bl	80027a0 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2206      	movs	r2, #6
 8008c74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008c78:	4b27      	ldr	r3, [pc, #156]	; (8008d18 <low_level_init+0x144>)
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	781a      	ldrb	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008c84:	4b24      	ldr	r3, [pc, #144]	; (8008d18 <low_level_init+0x144>)
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	785a      	ldrb	r2, [r3, #1]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008c90:	4b21      	ldr	r3, [pc, #132]	; (8008d18 <low_level_init+0x144>)
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	789a      	ldrb	r2, [r3, #2]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008c9c:	4b1e      	ldr	r3, [pc, #120]	; (8008d18 <low_level_init+0x144>)
 8008c9e:	695b      	ldr	r3, [r3, #20]
 8008ca0:	78da      	ldrb	r2, [r3, #3]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008ca8:	4b1b      	ldr	r3, [pc, #108]	; (8008d18 <low_level_init+0x144>)
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	791a      	ldrb	r2, [r3, #4]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008cb4:	4b18      	ldr	r3, [pc, #96]	; (8008d18 <low_level_init+0x144>)
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	795a      	ldrb	r2, [r3, #5]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008cc6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008cce:	f043 030a 	orr.w	r3, r3, #10
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008cda:	480f      	ldr	r0, [pc, #60]	; (8008d18 <low_level_init+0x144>)
 8008cdc:	f7fa f88a 	bl	8002df4 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008ce0:	f107 0310 	add.w	r3, r7, #16
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	211d      	movs	r1, #29
 8008ce8:	480b      	ldr	r0, [pc, #44]	; (8008d18 <low_level_init+0x144>)
 8008cea:	f7f9 ffb5 	bl	8002c58 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	f043 030b 	orr.w	r3, r3, #11
 8008cf4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	211d      	movs	r1, #29
 8008cfc:	4806      	ldr	r0, [pc, #24]	; (8008d18 <low_level_init+0x144>)
 8008cfe:	f7fa f813 	bl	8002d28 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008d02:	f107 0310 	add.w	r3, r7, #16
 8008d06:	461a      	mov	r2, r3
 8008d08:	211d      	movs	r1, #29
 8008d0a:	4803      	ldr	r0, [pc, #12]	; (8008d18 <low_level_init+0x144>)
 8008d0c:	f7f9 ffa4 	bl	8002c58 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008d10:	bf00      	nop
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	20003664 	.word	0x20003664
 8008d1c:	40028000 	.word	0x40028000
 8008d20:	20001e94 	.word	0x20001e94
 8008d24:	20000644 	.word	0x20000644
 8008d28:	200006c4 	.word	0x200006c4
 8008d2c:	200005c4 	.word	0x200005c4

08008d30 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08a      	sub	sp, #40	; 0x28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008d3a:	4b4b      	ldr	r3, [pc, #300]	; (8008e68 <low_level_output+0x138>)
 8008d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008d42:	2300      	movs	r3, #0
 8008d44:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008d52:	4b45      	ldr	r3, [pc, #276]	; (8008e68 <low_level_output+0x138>)
 8008d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d56:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	623b      	str	r3, [r7, #32]
 8008d60:	e05a      	b.n	8008e18 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	da03      	bge.n	8008d72 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008d6a:	23f8      	movs	r3, #248	; 0xf8
 8008d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008d70:	e05c      	b.n	8008e2c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	895b      	ldrh	r3, [r3, #10]
 8008d76:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008d7c:	e02f      	b.n	8008dde <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008d7e:	69fa      	ldr	r2, [r7, #28]
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	18d0      	adds	r0, r2, r3
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	18d1      	adds	r1, r2, r3
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008d92:	3304      	adds	r3, #4
 8008d94:	461a      	mov	r2, r3
 8008d96:	f00a fb7f 	bl	8013498 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	da03      	bge.n	8008db0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008da8:	23f8      	movs	r3, #248	; 0xf8
 8008daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008dae:	e03d      	b.n	8008e2c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008dc0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008dcc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008dd8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	4413      	add	r3, r2
 8008de4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d8c8      	bhi.n	8008d7e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008dec:	69fa      	ldr	r2, [r7, #28]
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	18d0      	adds	r0, r2, r3
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	4413      	add	r3, r2
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f00a fb4b 	bl	8013498 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4413      	add	r3, r2
 8008e08:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	4413      	add	r3, r2
 8008e10:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	623b      	str	r3, [r7, #32]
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1a1      	bne.n	8008d62 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008e1e:	6979      	ldr	r1, [r7, #20]
 8008e20:	4811      	ldr	r0, [pc, #68]	; (8008e68 <low_level_output+0x138>)
 8008e22:	f7f9 fd29 	bl	8002878 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008e2c:	4b0e      	ldr	r3, [pc, #56]	; (8008e68 <low_level_output+0x138>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	f003 0320 	and.w	r3, r3, #32
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00d      	beq.n	8008e5a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008e3e:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <low_level_output+0x138>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e46:	461a      	mov	r2, r3
 8008e48:	2320      	movs	r3, #32
 8008e4a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008e4c:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <low_level_output+0x138>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e54:	461a      	mov	r2, r3
 8008e56:	2300      	movs	r3, #0
 8008e58:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8008e5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3728      	adds	r7, #40	; 0x28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20003664 	.word	0x20003664

08008e6c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08c      	sub	sp, #48	; 0x30
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008e80:	2300      	movs	r3, #0
 8008e82:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8008e90:	484e      	ldr	r0, [pc, #312]	; (8008fcc <low_level_input+0x160>)
 8008e92:	f7f9 fddb 	bl	8002a4c <HAL_ETH_GetReceivedFrame>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <low_level_input+0x34>

    return NULL;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	e091      	b.n	8008fc4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008ea0:	4b4a      	ldr	r3, [pc, #296]	; (8008fcc <low_level_input+0x160>)
 8008ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008ea6:	4b49      	ldr	r3, [pc, #292]	; (8008fcc <low_level_input+0x160>)
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eaa:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008eac:	89fb      	ldrh	r3, [r7, #14]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d007      	beq.n	8008ec2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008eb2:	89fb      	ldrh	r3, [r7, #14]
 8008eb4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008eb8:	4619      	mov	r1, r3
 8008eba:	2000      	movs	r0, #0
 8008ebc:	f001 f934 	bl	800a128 <pbuf_alloc>
 8008ec0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d04b      	beq.n	8008f60 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008ec8:	4b40      	ldr	r3, [pc, #256]	; (8008fcc <low_level_input+0x160>)
 8008eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ecc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ed6:	e040      	b.n	8008f5a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	895b      	ldrh	r3, [r3, #10]
 8008edc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008ee2:	e021      	b.n	8008f28 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	18d0      	adds	r0, r2, r3
 8008eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	18d1      	adds	r1, r2, r3
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008ef8:	3304      	adds	r3, #4
 8008efa:	461a      	mov	r2, r3
 8008efc:	f00a facc 	bl	8013498 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008f0c:	69fa      	ldr	r2, [r7, #28]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	4413      	add	r3, r2
 8008f12:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008f16:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008f22:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d8d6      	bhi.n	8008ee4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	18d0      	adds	r0, r2, r3
 8008f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	4413      	add	r3, r2
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	4619      	mov	r1, r3
 8008f48:	f00a faa6 	bl	8013498 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008f4c:	69fa      	ldr	r2, [r7, #28]
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	4413      	add	r3, r2
 8008f52:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1bb      	bne.n	8008ed8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008f60:	4b1a      	ldr	r3, [pc, #104]	; (8008fcc <low_level_input+0x160>)
 8008f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f64:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008f66:	2300      	movs	r3, #0
 8008f68:	613b      	str	r3, [r7, #16]
 8008f6a:	e00b      	b.n	8008f84 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	3301      	adds	r3, #1
 8008f82:	613b      	str	r3, [r7, #16]
 8008f84:	4b11      	ldr	r3, [pc, #68]	; (8008fcc <low_level_input+0x160>)
 8008f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d3ee      	bcc.n	8008f6c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008f8e:	4b0f      	ldr	r3, [pc, #60]	; (8008fcc <low_level_input+0x160>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008f94:	4b0d      	ldr	r3, [pc, #52]	; (8008fcc <low_level_input+0x160>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00d      	beq.n	8008fc2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008fa6:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <low_level_input+0x160>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fae:	461a      	mov	r2, r3
 8008fb0:	2380      	movs	r3, #128	; 0x80
 8008fb2:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008fb4:	4b05      	ldr	r3, [pc, #20]	; (8008fcc <low_level_input+0x160>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	6093      	str	r3, [r2, #8]
  }
  return p;
 8008fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3730      	adds	r7, #48	; 0x30
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20003664 	.word	0x20003664

08008fd0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff ff47 	bl	8008e6c <low_level_input>
 8008fde:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d010      	beq.n	8009008 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	6879      	ldr	r1, [r7, #4]
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	4798      	blx	r3
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8008ff4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d006      	beq.n	800900a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f001 fb77 	bl	800a6f0 <pbuf_free>
    p = NULL;
 8009002:	2300      	movs	r3, #0
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	e000      	b.n	800900a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8009008:	bf00      	nop
  }
}
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d106      	bne.n	800902c <ethernetif_init+0x1c>
 800901e:	4b0e      	ldr	r3, [pc, #56]	; (8009058 <ethernetif_init+0x48>)
 8009020:	f240 2219 	movw	r2, #537	; 0x219
 8009024:	490d      	ldr	r1, [pc, #52]	; (800905c <ethernetif_init+0x4c>)
 8009026:	480e      	ldr	r0, [pc, #56]	; (8009060 <ethernetif_init+0x50>)
 8009028:	f00a fa66 	bl	80134f8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2273      	movs	r2, #115	; 0x73
 8009030:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2274      	movs	r2, #116	; 0x74
 8009038:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a09      	ldr	r2, [pc, #36]	; (8009064 <ethernetif_init+0x54>)
 8009040:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a08      	ldr	r2, [pc, #32]	; (8009068 <ethernetif_init+0x58>)
 8009046:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7ff fdc3 	bl	8008bd4 <low_level_init>

  return ERR_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	0801493c 	.word	0x0801493c
 800905c:	08014958 	.word	0x08014958
 8009060:	08014968 	.word	0x08014968
 8009064:	0801161d 	.word	0x0801161d
 8009068:	08008d31 	.word	0x08008d31

0800906c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009070:	f7f8 fc36 	bl	80018e0 <HAL_GetTick>
 8009074:	4603      	mov	r3, r0
}
 8009076:	4618      	mov	r0, r3
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009092:	089b      	lsrs	r3, r3, #2
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d05d      	beq.n	800915a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800909e:	4b34      	ldr	r3, [pc, #208]	; (8009170 <ethernetif_update_config+0xf4>)
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d03f      	beq.n	8009126 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80090a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80090aa:	2100      	movs	r1, #0
 80090ac:	4830      	ldr	r0, [pc, #192]	; (8009170 <ethernetif_update_config+0xf4>)
 80090ae:	f7f9 fe3b 	bl	8002d28 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80090b2:	f7f8 fc15 	bl	80018e0 <HAL_GetTick>
 80090b6:	4603      	mov	r3, r0
 80090b8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80090ba:	f107 0308 	add.w	r3, r7, #8
 80090be:	461a      	mov	r2, r3
 80090c0:	2101      	movs	r1, #1
 80090c2:	482b      	ldr	r0, [pc, #172]	; (8009170 <ethernetif_update_config+0xf4>)
 80090c4:	f7f9 fdc8 	bl	8002c58 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80090c8:	f7f8 fc0a 	bl	80018e0 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090d6:	d828      	bhi.n	800912a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f003 0320 	and.w	r3, r3, #32
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0eb      	beq.n	80090ba <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80090e2:	f107 0308 	add.w	r3, r7, #8
 80090e6:	461a      	mov	r2, r3
 80090e8:	2110      	movs	r1, #16
 80090ea:	4821      	ldr	r0, [pc, #132]	; (8009170 <ethernetif_update_config+0xf4>)
 80090ec:	f7f9 fdb4 	bl	8002c58 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f003 0304 	and.w	r3, r3, #4
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d004      	beq.n	8009104 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80090fa:	4b1d      	ldr	r3, [pc, #116]	; (8009170 <ethernetif_update_config+0xf4>)
 80090fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009100:	60da      	str	r2, [r3, #12]
 8009102:	e002      	b.n	800910a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8009104:	4b1a      	ldr	r3, [pc, #104]	; (8009170 <ethernetif_update_config+0xf4>)
 8009106:	2200      	movs	r2, #0
 8009108:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	f003 0302 	and.w	r3, r3, #2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d003      	beq.n	800911c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8009114:	4b16      	ldr	r3, [pc, #88]	; (8009170 <ethernetif_update_config+0xf4>)
 8009116:	2200      	movs	r2, #0
 8009118:	609a      	str	r2, [r3, #8]
 800911a:	e016      	b.n	800914a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800911c:	4b14      	ldr	r3, [pc, #80]	; (8009170 <ethernetif_update_config+0xf4>)
 800911e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009122:	609a      	str	r2, [r3, #8]
 8009124:	e011      	b.n	800914a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8009126:	bf00      	nop
 8009128:	e000      	b.n	800912c <ethernetif_update_config+0xb0>
          goto error;
 800912a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800912c:	4b10      	ldr	r3, [pc, #64]	; (8009170 <ethernetif_update_config+0xf4>)
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	08db      	lsrs	r3, r3, #3
 8009132:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8009134:	4b0e      	ldr	r3, [pc, #56]	; (8009170 <ethernetif_update_config+0xf4>)
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	085b      	lsrs	r3, r3, #1
 800913a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800913c:	4313      	orrs	r3, r2
 800913e:	b29b      	uxth	r3, r3
 8009140:	461a      	mov	r2, r3
 8009142:	2100      	movs	r1, #0
 8009144:	480a      	ldr	r0, [pc, #40]	; (8009170 <ethernetif_update_config+0xf4>)
 8009146:	f7f9 fdef 	bl	8002d28 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800914a:	2100      	movs	r1, #0
 800914c:	4808      	ldr	r0, [pc, #32]	; (8009170 <ethernetif_update_config+0xf4>)
 800914e:	f7f9 feaf 	bl	8002eb0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8009152:	4807      	ldr	r0, [pc, #28]	; (8009170 <ethernetif_update_config+0xf4>)
 8009154:	f7f9 fe4e 	bl	8002df4 <HAL_ETH_Start>
 8009158:	e002      	b.n	8009160 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800915a:	4805      	ldr	r0, [pc, #20]	; (8009170 <ethernetif_update_config+0xf4>)
 800915c:	f7f9 fe79 	bl	8002e52 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f807 	bl	8009174 <ethernetif_notify_conn_changed>
}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20003664 	.word	0x20003664

08009174 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	4603      	mov	r3, r0
 8009190:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009192:	88fb      	ldrh	r3, [r7, #6]
 8009194:	021b      	lsls	r3, r3, #8
 8009196:	b21a      	sxth	r2, r3
 8009198:	88fb      	ldrh	r3, [r7, #6]
 800919a:	0a1b      	lsrs	r3, r3, #8
 800919c:	b29b      	uxth	r3, r3
 800919e:	b21b      	sxth	r3, r3
 80091a0:	4313      	orrs	r3, r2
 80091a2:	b21b      	sxth	r3, r3
 80091a4:	b29b      	uxth	r3, r3
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	061a      	lsls	r2, r3, #24
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	021b      	lsls	r3, r3, #8
 80091c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091c6:	431a      	orrs	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	0a1b      	lsrs	r3, r3, #8
 80091cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80091d0:	431a      	orrs	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	0e1b      	lsrs	r3, r3, #24
 80091d6:	4313      	orrs	r3, r2
}
 80091d8:	4618      	mov	r0, r3
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80091ee:	f000 f8d5 	bl	800939c <mem_init>
  memp_init();
 80091f2:	f000 fbdb 	bl	80099ac <memp_init>
  pbuf_init();
  netif_init();
 80091f6:	f000 fc93 	bl	8009b20 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80091fa:	f007 f84f 	bl	801029c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80091fe:	f001 fda7 	bl	800ad50 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009202:	f006 ffc1 	bl	8010188 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009206:	bf00      	nop
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
	...

08009210 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800921a:	4b05      	ldr	r3, [pc, #20]	; (8009230 <ptr_to_mem+0x20>)
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	88fb      	ldrh	r3, [r7, #6]
 8009220:	4413      	add	r3, r2
}
 8009222:	4618      	mov	r0, r3
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	20005ed8 	.word	0x20005ed8

08009234 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800923c:	4b05      	ldr	r3, [pc, #20]	; (8009254 <mem_to_ptr+0x20>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	b29b      	uxth	r3, r3
}
 8009246:	4618      	mov	r0, r3
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	20005ed8 	.word	0x20005ed8

08009258 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009258:	b590      	push	{r4, r7, lr}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009260:	4b45      	ldr	r3, [pc, #276]	; (8009378 <plug_holes+0x120>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	429a      	cmp	r2, r3
 8009268:	d206      	bcs.n	8009278 <plug_holes+0x20>
 800926a:	4b44      	ldr	r3, [pc, #272]	; (800937c <plug_holes+0x124>)
 800926c:	f240 12df 	movw	r2, #479	; 0x1df
 8009270:	4943      	ldr	r1, [pc, #268]	; (8009380 <plug_holes+0x128>)
 8009272:	4844      	ldr	r0, [pc, #272]	; (8009384 <plug_holes+0x12c>)
 8009274:	f00a f940 	bl	80134f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009278:	4b43      	ldr	r3, [pc, #268]	; (8009388 <plug_holes+0x130>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	429a      	cmp	r2, r3
 8009280:	d306      	bcc.n	8009290 <plug_holes+0x38>
 8009282:	4b3e      	ldr	r3, [pc, #248]	; (800937c <plug_holes+0x124>)
 8009284:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009288:	4940      	ldr	r1, [pc, #256]	; (800938c <plug_holes+0x134>)
 800928a:	483e      	ldr	r0, [pc, #248]	; (8009384 <plug_holes+0x12c>)
 800928c:	f00a f934 	bl	80134f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	791b      	ldrb	r3, [r3, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d006      	beq.n	80092a6 <plug_holes+0x4e>
 8009298:	4b38      	ldr	r3, [pc, #224]	; (800937c <plug_holes+0x124>)
 800929a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800929e:	493c      	ldr	r1, [pc, #240]	; (8009390 <plug_holes+0x138>)
 80092a0:	4838      	ldr	r0, [pc, #224]	; (8009384 <plug_holes+0x12c>)
 80092a2:	f00a f929 	bl	80134f8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80092ae:	d906      	bls.n	80092be <plug_holes+0x66>
 80092b0:	4b32      	ldr	r3, [pc, #200]	; (800937c <plug_holes+0x124>)
 80092b2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80092b6:	4937      	ldr	r1, [pc, #220]	; (8009394 <plug_holes+0x13c>)
 80092b8:	4832      	ldr	r0, [pc, #200]	; (8009384 <plug_holes+0x12c>)
 80092ba:	f00a f91d 	bl	80134f8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff ffa4 	bl	8009210 <ptr_to_mem>
 80092c8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d024      	beq.n	800931c <plug_holes+0xc4>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	791b      	ldrb	r3, [r3, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d120      	bne.n	800931c <plug_holes+0xc4>
 80092da:	4b2b      	ldr	r3, [pc, #172]	; (8009388 <plug_holes+0x130>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d01b      	beq.n	800931c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80092e4:	4b2c      	ldr	r3, [pc, #176]	; (8009398 <plug_holes+0x140>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d102      	bne.n	80092f4 <plug_holes+0x9c>
      lfree = mem;
 80092ee:	4a2a      	ldr	r2, [pc, #168]	; (8009398 <plug_holes+0x140>)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	881a      	ldrh	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	881b      	ldrh	r3, [r3, #0]
 8009300:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009304:	d00a      	beq.n	800931c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff ff80 	bl	8009210 <ptr_to_mem>
 8009310:	4604      	mov	r4, r0
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff ff8e 	bl	8009234 <mem_to_ptr>
 8009318:	4603      	mov	r3, r0
 800931a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	885b      	ldrh	r3, [r3, #2]
 8009320:	4618      	mov	r0, r3
 8009322:	f7ff ff75 	bl	8009210 <ptr_to_mem>
 8009326:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	429a      	cmp	r2, r3
 800932e:	d01f      	beq.n	8009370 <plug_holes+0x118>
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	791b      	ldrb	r3, [r3, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d11b      	bne.n	8009370 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009338:	4b17      	ldr	r3, [pc, #92]	; (8009398 <plug_holes+0x140>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	429a      	cmp	r2, r3
 8009340:	d102      	bne.n	8009348 <plug_holes+0xf0>
      lfree = pmem;
 8009342:	4a15      	ldr	r2, [pc, #84]	; (8009398 <plug_holes+0x140>)
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	881a      	ldrh	r2, [r3, #0]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009358:	d00a      	beq.n	8009370 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff ff56 	bl	8009210 <ptr_to_mem>
 8009364:	4604      	mov	r4, r0
 8009366:	68b8      	ldr	r0, [r7, #8]
 8009368:	f7ff ff64 	bl	8009234 <mem_to_ptr>
 800936c:	4603      	mov	r3, r0
 800936e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009370:	bf00      	nop
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	bd90      	pop	{r4, r7, pc}
 8009378:	20005ed8 	.word	0x20005ed8
 800937c:	08014990 	.word	0x08014990
 8009380:	080149c0 	.word	0x080149c0
 8009384:	080149d8 	.word	0x080149d8
 8009388:	20005edc 	.word	0x20005edc
 800938c:	08014a00 	.word	0x08014a00
 8009390:	08014a1c 	.word	0x08014a1c
 8009394:	08014a38 	.word	0x08014a38
 8009398:	20005ee0 	.word	0x20005ee0

0800939c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80093a2:	4b18      	ldr	r3, [pc, #96]	; (8009404 <mem_init+0x68>)
 80093a4:	3303      	adds	r3, #3
 80093a6:	f023 0303 	bic.w	r3, r3, #3
 80093aa:	461a      	mov	r2, r3
 80093ac:	4b16      	ldr	r3, [pc, #88]	; (8009408 <mem_init+0x6c>)
 80093ae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80093b0:	4b15      	ldr	r3, [pc, #84]	; (8009408 <mem_init+0x6c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80093bc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80093ca:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80093ce:	f7ff ff1f 	bl	8009210 <ptr_to_mem>
 80093d2:	4603      	mov	r3, r0
 80093d4:	4a0d      	ldr	r2, [pc, #52]	; (800940c <mem_init+0x70>)
 80093d6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80093d8:	4b0c      	ldr	r3, [pc, #48]	; (800940c <mem_init+0x70>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2201      	movs	r2, #1
 80093de:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80093e0:	4b0a      	ldr	r3, [pc, #40]	; (800940c <mem_init+0x70>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80093e8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80093ea:	4b08      	ldr	r3, [pc, #32]	; (800940c <mem_init+0x70>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80093f2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80093f4:	4b04      	ldr	r3, [pc, #16]	; (8009408 <mem_init+0x6c>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a05      	ldr	r2, [pc, #20]	; (8009410 <mem_init+0x74>)
 80093fa:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80093fc:	bf00      	nop
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	200036c4 	.word	0x200036c4
 8009408:	20005ed8 	.word	0x20005ed8
 800940c:	20005edc 	.word	0x20005edc
 8009410:	20005ee0 	.word	0x20005ee0

08009414 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff ff09 	bl	8009234 <mem_to_ptr>
 8009422:	4603      	mov	r3, r0
 8009424:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	4618      	mov	r0, r3
 800942c:	f7ff fef0 	bl	8009210 <ptr_to_mem>
 8009430:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	885b      	ldrh	r3, [r3, #2]
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff feea 	bl	8009210 <ptr_to_mem>
 800943c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009446:	d818      	bhi.n	800947a <mem_link_valid+0x66>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	885b      	ldrh	r3, [r3, #2]
 800944c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009450:	d813      	bhi.n	800947a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009456:	8afa      	ldrh	r2, [r7, #22]
 8009458:	429a      	cmp	r2, r3
 800945a:	d004      	beq.n	8009466 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	8afa      	ldrh	r2, [r7, #22]
 8009462:	429a      	cmp	r2, r3
 8009464:	d109      	bne.n	800947a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009466:	4b08      	ldr	r3, [pc, #32]	; (8009488 <mem_link_valid+0x74>)
 8009468:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	429a      	cmp	r2, r3
 800946e:	d006      	beq.n	800947e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	885b      	ldrh	r3, [r3, #2]
 8009474:	8afa      	ldrh	r2, [r7, #22]
 8009476:	429a      	cmp	r2, r3
 8009478:	d001      	beq.n	800947e <mem_link_valid+0x6a>
    return 0;
 800947a:	2300      	movs	r3, #0
 800947c:	e000      	b.n	8009480 <mem_link_valid+0x6c>
  }
  return 1;
 800947e:	2301      	movs	r3, #1
}
 8009480:	4618      	mov	r0, r3
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	20005edc 	.word	0x20005edc

0800948c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d04c      	beq.n	8009534 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f003 0303 	and.w	r3, r3, #3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d007      	beq.n	80094b4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80094a4:	4b25      	ldr	r3, [pc, #148]	; (800953c <mem_free+0xb0>)
 80094a6:	f240 2273 	movw	r2, #627	; 0x273
 80094aa:	4925      	ldr	r1, [pc, #148]	; (8009540 <mem_free+0xb4>)
 80094ac:	4825      	ldr	r0, [pc, #148]	; (8009544 <mem_free+0xb8>)
 80094ae:	f00a f823 	bl	80134f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80094b2:	e040      	b.n	8009536 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3b08      	subs	r3, #8
 80094b8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80094ba:	4b23      	ldr	r3, [pc, #140]	; (8009548 <mem_free+0xbc>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d306      	bcc.n	80094d2 <mem_free+0x46>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f103 020c 	add.w	r2, r3, #12
 80094ca:	4b20      	ldr	r3, [pc, #128]	; (800954c <mem_free+0xc0>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d907      	bls.n	80094e2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80094d2:	4b1a      	ldr	r3, [pc, #104]	; (800953c <mem_free+0xb0>)
 80094d4:	f240 227f 	movw	r2, #639	; 0x27f
 80094d8:	491d      	ldr	r1, [pc, #116]	; (8009550 <mem_free+0xc4>)
 80094da:	481a      	ldr	r0, [pc, #104]	; (8009544 <mem_free+0xb8>)
 80094dc:	f00a f80c 	bl	80134f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80094e0:	e029      	b.n	8009536 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	791b      	ldrb	r3, [r3, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d107      	bne.n	80094fa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80094ea:	4b14      	ldr	r3, [pc, #80]	; (800953c <mem_free+0xb0>)
 80094ec:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80094f0:	4918      	ldr	r1, [pc, #96]	; (8009554 <mem_free+0xc8>)
 80094f2:	4814      	ldr	r0, [pc, #80]	; (8009544 <mem_free+0xb8>)
 80094f4:	f00a f800 	bl	80134f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80094f8:	e01d      	b.n	8009536 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f7ff ff8a 	bl	8009414 <mem_link_valid>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d107      	bne.n	8009516 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009506:	4b0d      	ldr	r3, [pc, #52]	; (800953c <mem_free+0xb0>)
 8009508:	f240 2295 	movw	r2, #661	; 0x295
 800950c:	4912      	ldr	r1, [pc, #72]	; (8009558 <mem_free+0xcc>)
 800950e:	480d      	ldr	r0, [pc, #52]	; (8009544 <mem_free+0xb8>)
 8009510:	f009 fff2 	bl	80134f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009514:	e00f      	b.n	8009536 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800951c:	4b0f      	ldr	r3, [pc, #60]	; (800955c <mem_free+0xd0>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	429a      	cmp	r2, r3
 8009524:	d202      	bcs.n	800952c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009526:	4a0d      	ldr	r2, [pc, #52]	; (800955c <mem_free+0xd0>)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f7ff fe93 	bl	8009258 <plug_holes>
 8009532:	e000      	b.n	8009536 <mem_free+0xaa>
    return;
 8009534:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	08014990 	.word	0x08014990
 8009540:	08014a64 	.word	0x08014a64
 8009544:	080149d8 	.word	0x080149d8
 8009548:	20005ed8 	.word	0x20005ed8
 800954c:	20005edc 	.word	0x20005edc
 8009550:	08014a88 	.word	0x08014a88
 8009554:	08014aa4 	.word	0x08014aa4
 8009558:	08014acc 	.word	0x08014acc
 800955c:	20005ee0 	.word	0x20005ee0

08009560 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b088      	sub	sp, #32
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800956c:	887b      	ldrh	r3, [r7, #2]
 800956e:	3303      	adds	r3, #3
 8009570:	b29b      	uxth	r3, r3
 8009572:	f023 0303 	bic.w	r3, r3, #3
 8009576:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009578:	8bfb      	ldrh	r3, [r7, #30]
 800957a:	2b0b      	cmp	r3, #11
 800957c:	d801      	bhi.n	8009582 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800957e:	230c      	movs	r3, #12
 8009580:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009582:	8bfb      	ldrh	r3, [r7, #30]
 8009584:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009588:	d803      	bhi.n	8009592 <mem_trim+0x32>
 800958a:	8bfa      	ldrh	r2, [r7, #30]
 800958c:	887b      	ldrh	r3, [r7, #2]
 800958e:	429a      	cmp	r2, r3
 8009590:	d201      	bcs.n	8009596 <mem_trim+0x36>
    return NULL;
 8009592:	2300      	movs	r3, #0
 8009594:	e0cc      	b.n	8009730 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009596:	4b68      	ldr	r3, [pc, #416]	; (8009738 <mem_trim+0x1d8>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	429a      	cmp	r2, r3
 800959e:	d304      	bcc.n	80095aa <mem_trim+0x4a>
 80095a0:	4b66      	ldr	r3, [pc, #408]	; (800973c <mem_trim+0x1dc>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d306      	bcc.n	80095b8 <mem_trim+0x58>
 80095aa:	4b65      	ldr	r3, [pc, #404]	; (8009740 <mem_trim+0x1e0>)
 80095ac:	f240 22d1 	movw	r2, #721	; 0x2d1
 80095b0:	4964      	ldr	r1, [pc, #400]	; (8009744 <mem_trim+0x1e4>)
 80095b2:	4865      	ldr	r0, [pc, #404]	; (8009748 <mem_trim+0x1e8>)
 80095b4:	f009 ffa0 	bl	80134f8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80095b8:	4b5f      	ldr	r3, [pc, #380]	; (8009738 <mem_trim+0x1d8>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d304      	bcc.n	80095cc <mem_trim+0x6c>
 80095c2:	4b5e      	ldr	r3, [pc, #376]	; (800973c <mem_trim+0x1dc>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d301      	bcc.n	80095d0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	e0af      	b.n	8009730 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3b08      	subs	r3, #8
 80095d4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80095d6:	69b8      	ldr	r0, [r7, #24]
 80095d8:	f7ff fe2c 	bl	8009234 <mem_to_ptr>
 80095dc:	4603      	mov	r3, r0
 80095de:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	881a      	ldrh	r2, [r3, #0]
 80095e4:	8afb      	ldrh	r3, [r7, #22]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	3b08      	subs	r3, #8
 80095ec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80095ee:	8bfa      	ldrh	r2, [r7, #30]
 80095f0:	8abb      	ldrh	r3, [r7, #20]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d906      	bls.n	8009604 <mem_trim+0xa4>
 80095f6:	4b52      	ldr	r3, [pc, #328]	; (8009740 <mem_trim+0x1e0>)
 80095f8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80095fc:	4953      	ldr	r1, [pc, #332]	; (800974c <mem_trim+0x1ec>)
 80095fe:	4852      	ldr	r0, [pc, #328]	; (8009748 <mem_trim+0x1e8>)
 8009600:	f009 ff7a 	bl	80134f8 <iprintf>
  if (newsize > size) {
 8009604:	8bfa      	ldrh	r2, [r7, #30]
 8009606:	8abb      	ldrh	r3, [r7, #20]
 8009608:	429a      	cmp	r2, r3
 800960a:	d901      	bls.n	8009610 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800960c:	2300      	movs	r3, #0
 800960e:	e08f      	b.n	8009730 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009610:	8bfa      	ldrh	r2, [r7, #30]
 8009612:	8abb      	ldrh	r3, [r7, #20]
 8009614:	429a      	cmp	r2, r3
 8009616:	d101      	bne.n	800961c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	e089      	b.n	8009730 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	881b      	ldrh	r3, [r3, #0]
 8009620:	4618      	mov	r0, r3
 8009622:	f7ff fdf5 	bl	8009210 <ptr_to_mem>
 8009626:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	791b      	ldrb	r3, [r3, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d13f      	bne.n	80096b0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009638:	d106      	bne.n	8009648 <mem_trim+0xe8>
 800963a:	4b41      	ldr	r3, [pc, #260]	; (8009740 <mem_trim+0x1e0>)
 800963c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009640:	4943      	ldr	r1, [pc, #268]	; (8009750 <mem_trim+0x1f0>)
 8009642:	4841      	ldr	r0, [pc, #260]	; (8009748 <mem_trim+0x1e8>)
 8009644:	f009 ff58 	bl	80134f8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	881b      	ldrh	r3, [r3, #0]
 800964c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800964e:	8afa      	ldrh	r2, [r7, #22]
 8009650:	8bfb      	ldrh	r3, [r7, #30]
 8009652:	4413      	add	r3, r2
 8009654:	b29b      	uxth	r3, r3
 8009656:	3308      	adds	r3, #8
 8009658:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800965a:	4b3e      	ldr	r3, [pc, #248]	; (8009754 <mem_trim+0x1f4>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	429a      	cmp	r2, r3
 8009662:	d106      	bne.n	8009672 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8009664:	89fb      	ldrh	r3, [r7, #14]
 8009666:	4618      	mov	r0, r3
 8009668:	f7ff fdd2 	bl	8009210 <ptr_to_mem>
 800966c:	4603      	mov	r3, r0
 800966e:	4a39      	ldr	r2, [pc, #228]	; (8009754 <mem_trim+0x1f4>)
 8009670:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009672:	89fb      	ldrh	r3, [r7, #14]
 8009674:	4618      	mov	r0, r3
 8009676:	f7ff fdcb 	bl	8009210 <ptr_to_mem>
 800967a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	2200      	movs	r2, #0
 8009680:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	89ba      	ldrh	r2, [r7, #12]
 8009686:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	8afa      	ldrh	r2, [r7, #22]
 800968c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	89fa      	ldrh	r2, [r7, #14]
 8009692:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800969c:	d047      	beq.n	800972e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7ff fdb4 	bl	8009210 <ptr_to_mem>
 80096a8:	4602      	mov	r2, r0
 80096aa:	89fb      	ldrh	r3, [r7, #14]
 80096ac:	8053      	strh	r3, [r2, #2]
 80096ae:	e03e      	b.n	800972e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80096b0:	8bfb      	ldrh	r3, [r7, #30]
 80096b2:	f103 0214 	add.w	r2, r3, #20
 80096b6:	8abb      	ldrh	r3, [r7, #20]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d838      	bhi.n	800972e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80096bc:	8afa      	ldrh	r2, [r7, #22]
 80096be:	8bfb      	ldrh	r3, [r7, #30]
 80096c0:	4413      	add	r3, r2
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	3308      	adds	r3, #8
 80096c6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80096d0:	d106      	bne.n	80096e0 <mem_trim+0x180>
 80096d2:	4b1b      	ldr	r3, [pc, #108]	; (8009740 <mem_trim+0x1e0>)
 80096d4:	f240 3216 	movw	r2, #790	; 0x316
 80096d8:	491d      	ldr	r1, [pc, #116]	; (8009750 <mem_trim+0x1f0>)
 80096da:	481b      	ldr	r0, [pc, #108]	; (8009748 <mem_trim+0x1e8>)
 80096dc:	f009 ff0c 	bl	80134f8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80096e0:	89fb      	ldrh	r3, [r7, #14]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff fd94 	bl	8009210 <ptr_to_mem>
 80096e8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80096ea:	4b1a      	ldr	r3, [pc, #104]	; (8009754 <mem_trim+0x1f4>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d202      	bcs.n	80096fa <mem_trim+0x19a>
      lfree = mem2;
 80096f4:	4a17      	ldr	r2, [pc, #92]	; (8009754 <mem_trim+0x1f4>)
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2200      	movs	r2, #0
 80096fe:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	881a      	ldrh	r2, [r3, #0]
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	8afa      	ldrh	r2, [r7, #22]
 800970c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	89fa      	ldrh	r2, [r7, #14]
 8009712:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	881b      	ldrh	r3, [r3, #0]
 8009718:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800971c:	d007      	beq.n	800972e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	881b      	ldrh	r3, [r3, #0]
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff fd74 	bl	8009210 <ptr_to_mem>
 8009728:	4602      	mov	r2, r0
 800972a:	89fb      	ldrh	r3, [r7, #14]
 800972c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800972e:	687b      	ldr	r3, [r7, #4]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3720      	adds	r7, #32
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20005ed8 	.word	0x20005ed8
 800973c:	20005edc 	.word	0x20005edc
 8009740:	08014990 	.word	0x08014990
 8009744:	08014b00 	.word	0x08014b00
 8009748:	080149d8 	.word	0x080149d8
 800974c:	08014b18 	.word	0x08014b18
 8009750:	08014b38 	.word	0x08014b38
 8009754:	20005ee0 	.word	0x20005ee0

08009758 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b088      	sub	sp, #32
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009762:	88fb      	ldrh	r3, [r7, #6]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <mem_malloc+0x14>
    return NULL;
 8009768:	2300      	movs	r3, #0
 800976a:	e0d9      	b.n	8009920 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800976c:	88fb      	ldrh	r3, [r7, #6]
 800976e:	3303      	adds	r3, #3
 8009770:	b29b      	uxth	r3, r3
 8009772:	f023 0303 	bic.w	r3, r3, #3
 8009776:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009778:	8bbb      	ldrh	r3, [r7, #28]
 800977a:	2b0b      	cmp	r3, #11
 800977c:	d801      	bhi.n	8009782 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800977e:	230c      	movs	r3, #12
 8009780:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009782:	8bbb      	ldrh	r3, [r7, #28]
 8009784:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009788:	d803      	bhi.n	8009792 <mem_malloc+0x3a>
 800978a:	8bba      	ldrh	r2, [r7, #28]
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	429a      	cmp	r2, r3
 8009790:	d201      	bcs.n	8009796 <mem_malloc+0x3e>
    return NULL;
 8009792:	2300      	movs	r3, #0
 8009794:	e0c4      	b.n	8009920 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009796:	4b64      	ldr	r3, [pc, #400]	; (8009928 <mem_malloc+0x1d0>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4618      	mov	r0, r3
 800979c:	f7ff fd4a 	bl	8009234 <mem_to_ptr>
 80097a0:	4603      	mov	r3, r0
 80097a2:	83fb      	strh	r3, [r7, #30]
 80097a4:	e0b4      	b.n	8009910 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80097a6:	8bfb      	ldrh	r3, [r7, #30]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff fd31 	bl	8009210 <ptr_to_mem>
 80097ae:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	791b      	ldrb	r3, [r3, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f040 80a4 	bne.w	8009902 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	881b      	ldrh	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	8bfb      	ldrh	r3, [r7, #30]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	f1a3 0208 	sub.w	r2, r3, #8
 80097c8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80097ca:	429a      	cmp	r2, r3
 80097cc:	f0c0 8099 	bcc.w	8009902 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	461a      	mov	r2, r3
 80097d6:	8bfb      	ldrh	r3, [r7, #30]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	f1a3 0208 	sub.w	r2, r3, #8
 80097de:	8bbb      	ldrh	r3, [r7, #28]
 80097e0:	3314      	adds	r3, #20
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d333      	bcc.n	800984e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80097e6:	8bfa      	ldrh	r2, [r7, #30]
 80097e8:	8bbb      	ldrh	r3, [r7, #28]
 80097ea:	4413      	add	r3, r2
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	3308      	adds	r3, #8
 80097f0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80097f2:	8a7b      	ldrh	r3, [r7, #18]
 80097f4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80097f8:	d106      	bne.n	8009808 <mem_malloc+0xb0>
 80097fa:	4b4c      	ldr	r3, [pc, #304]	; (800992c <mem_malloc+0x1d4>)
 80097fc:	f240 3287 	movw	r2, #903	; 0x387
 8009800:	494b      	ldr	r1, [pc, #300]	; (8009930 <mem_malloc+0x1d8>)
 8009802:	484c      	ldr	r0, [pc, #304]	; (8009934 <mem_malloc+0x1dc>)
 8009804:	f009 fe78 	bl	80134f8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009808:	8a7b      	ldrh	r3, [r7, #18]
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff fd00 	bl	8009210 <ptr_to_mem>
 8009810:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	881a      	ldrh	r2, [r3, #0]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	8bfa      	ldrh	r2, [r7, #30]
 8009824:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	8a7a      	ldrh	r2, [r7, #18]
 800982a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2201      	movs	r2, #1
 8009830:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	881b      	ldrh	r3, [r3, #0]
 8009836:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800983a:	d00b      	beq.n	8009854 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	4618      	mov	r0, r3
 8009842:	f7ff fce5 	bl	8009210 <ptr_to_mem>
 8009846:	4602      	mov	r2, r0
 8009848:	8a7b      	ldrh	r3, [r7, #18]
 800984a:	8053      	strh	r3, [r2, #2]
 800984c:	e002      	b.n	8009854 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2201      	movs	r2, #1
 8009852:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009854:	4b34      	ldr	r3, [pc, #208]	; (8009928 <mem_malloc+0x1d0>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	429a      	cmp	r2, r3
 800985c:	d127      	bne.n	80098ae <mem_malloc+0x156>
          struct mem *cur = lfree;
 800985e:	4b32      	ldr	r3, [pc, #200]	; (8009928 <mem_malloc+0x1d0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009864:	e005      	b.n	8009872 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	4618      	mov	r0, r3
 800986c:	f7ff fcd0 	bl	8009210 <ptr_to_mem>
 8009870:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	791b      	ldrb	r3, [r3, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d004      	beq.n	8009884 <mem_malloc+0x12c>
 800987a:	4b2f      	ldr	r3, [pc, #188]	; (8009938 <mem_malloc+0x1e0>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	69ba      	ldr	r2, [r7, #24]
 8009880:	429a      	cmp	r2, r3
 8009882:	d1f0      	bne.n	8009866 <mem_malloc+0x10e>
          }
          lfree = cur;
 8009884:	4a28      	ldr	r2, [pc, #160]	; (8009928 <mem_malloc+0x1d0>)
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800988a:	4b27      	ldr	r3, [pc, #156]	; (8009928 <mem_malloc+0x1d0>)
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	4b2a      	ldr	r3, [pc, #168]	; (8009938 <mem_malloc+0x1e0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	d00b      	beq.n	80098ae <mem_malloc+0x156>
 8009896:	4b24      	ldr	r3, [pc, #144]	; (8009928 <mem_malloc+0x1d0>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	791b      	ldrb	r3, [r3, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d006      	beq.n	80098ae <mem_malloc+0x156>
 80098a0:	4b22      	ldr	r3, [pc, #136]	; (800992c <mem_malloc+0x1d4>)
 80098a2:	f240 32b5 	movw	r2, #949	; 0x3b5
 80098a6:	4925      	ldr	r1, [pc, #148]	; (800993c <mem_malloc+0x1e4>)
 80098a8:	4822      	ldr	r0, [pc, #136]	; (8009934 <mem_malloc+0x1dc>)
 80098aa:	f009 fe25 	bl	80134f8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80098ae:	8bba      	ldrh	r2, [r7, #28]
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	4413      	add	r3, r2
 80098b4:	3308      	adds	r3, #8
 80098b6:	4a20      	ldr	r2, [pc, #128]	; (8009938 <mem_malloc+0x1e0>)
 80098b8:	6812      	ldr	r2, [r2, #0]
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d906      	bls.n	80098cc <mem_malloc+0x174>
 80098be:	4b1b      	ldr	r3, [pc, #108]	; (800992c <mem_malloc+0x1d4>)
 80098c0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80098c4:	491e      	ldr	r1, [pc, #120]	; (8009940 <mem_malloc+0x1e8>)
 80098c6:	481b      	ldr	r0, [pc, #108]	; (8009934 <mem_malloc+0x1dc>)
 80098c8:	f009 fe16 	bl	80134f8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f003 0303 	and.w	r3, r3, #3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d006      	beq.n	80098e4 <mem_malloc+0x18c>
 80098d6:	4b15      	ldr	r3, [pc, #84]	; (800992c <mem_malloc+0x1d4>)
 80098d8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80098dc:	4919      	ldr	r1, [pc, #100]	; (8009944 <mem_malloc+0x1ec>)
 80098de:	4815      	ldr	r0, [pc, #84]	; (8009934 <mem_malloc+0x1dc>)
 80098e0:	f009 fe0a 	bl	80134f8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	f003 0303 	and.w	r3, r3, #3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d006      	beq.n	80098fc <mem_malloc+0x1a4>
 80098ee:	4b0f      	ldr	r3, [pc, #60]	; (800992c <mem_malloc+0x1d4>)
 80098f0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80098f4:	4914      	ldr	r1, [pc, #80]	; (8009948 <mem_malloc+0x1f0>)
 80098f6:	480f      	ldr	r0, [pc, #60]	; (8009934 <mem_malloc+0x1dc>)
 80098f8:	f009 fdfe 	bl	80134f8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	3308      	adds	r3, #8
 8009900:	e00e      	b.n	8009920 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8009902:	8bfb      	ldrh	r3, [r7, #30]
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff fc83 	bl	8009210 <ptr_to_mem>
 800990a:	4603      	mov	r3, r0
 800990c:	881b      	ldrh	r3, [r3, #0]
 800990e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009910:	8bfa      	ldrh	r2, [r7, #30]
 8009912:	8bbb      	ldrh	r3, [r7, #28]
 8009914:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8009918:	429a      	cmp	r2, r3
 800991a:	f4ff af44 	bcc.w	80097a6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3720      	adds	r7, #32
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	20005ee0 	.word	0x20005ee0
 800992c:	08014990 	.word	0x08014990
 8009930:	08014b38 	.word	0x08014b38
 8009934:	080149d8 	.word	0x080149d8
 8009938:	20005edc 	.word	0x20005edc
 800993c:	08014b4c 	.word	0x08014b4c
 8009940:	08014b68 	.word	0x08014b68
 8009944:	08014b98 	.word	0x08014b98
 8009948:	08014bc8 	.word	0x08014bc8

0800994c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	2200      	movs	r2, #0
 800995a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	3303      	adds	r3, #3
 8009962:	f023 0303 	bic.w	r3, r3, #3
 8009966:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009968:	2300      	movs	r3, #0
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	e011      	b.n	8009992 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	461a      	mov	r2, r3
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	4413      	add	r3, r2
 800998a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3301      	adds	r3, #1
 8009990:	60fb      	str	r3, [r7, #12]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	885b      	ldrh	r3, [r3, #2]
 8009996:	461a      	mov	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4293      	cmp	r3, r2
 800999c:	dbe7      	blt.n	800996e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800999e:	bf00      	nop
 80099a0:	bf00      	nop
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80099b2:	2300      	movs	r3, #0
 80099b4:	80fb      	strh	r3, [r7, #6]
 80099b6:	e009      	b.n	80099cc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80099b8:	88fb      	ldrh	r3, [r7, #6]
 80099ba:	4a08      	ldr	r2, [pc, #32]	; (80099dc <memp_init+0x30>)
 80099bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7ff ffc3 	bl	800994c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80099c6:	88fb      	ldrh	r3, [r7, #6]
 80099c8:	3301      	adds	r3, #1
 80099ca:	80fb      	strh	r3, [r7, #6]
 80099cc:	88fb      	ldrh	r3, [r7, #6]
 80099ce:	2b08      	cmp	r3, #8
 80099d0:	d9f2      	bls.n	80099b8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	080173a8 	.word	0x080173a8

080099e0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d012      	beq.n	8009a1c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	6812      	ldr	r2, [r2, #0]
 80099fe:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f003 0303 	and.w	r3, r3, #3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d006      	beq.n	8009a18 <do_memp_malloc_pool+0x38>
 8009a0a:	4b07      	ldr	r3, [pc, #28]	; (8009a28 <do_memp_malloc_pool+0x48>)
 8009a0c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009a10:	4906      	ldr	r1, [pc, #24]	; (8009a2c <do_memp_malloc_pool+0x4c>)
 8009a12:	4807      	ldr	r0, [pc, #28]	; (8009a30 <do_memp_malloc_pool+0x50>)
 8009a14:	f009 fd70 	bl	80134f8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	e000      	b.n	8009a1e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	08014bec 	.word	0x08014bec
 8009a2c:	08014c1c 	.word	0x08014c1c
 8009a30:	08014c40 	.word	0x08014c40

08009a34 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009a3e:	79fb      	ldrb	r3, [r7, #7]
 8009a40:	2b08      	cmp	r3, #8
 8009a42:	d908      	bls.n	8009a56 <memp_malloc+0x22>
 8009a44:	4b0a      	ldr	r3, [pc, #40]	; (8009a70 <memp_malloc+0x3c>)
 8009a46:	f240 1257 	movw	r2, #343	; 0x157
 8009a4a:	490a      	ldr	r1, [pc, #40]	; (8009a74 <memp_malloc+0x40>)
 8009a4c:	480a      	ldr	r0, [pc, #40]	; (8009a78 <memp_malloc+0x44>)
 8009a4e:	f009 fd53 	bl	80134f8 <iprintf>
 8009a52:	2300      	movs	r3, #0
 8009a54:	e008      	b.n	8009a68 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	4a08      	ldr	r2, [pc, #32]	; (8009a7c <memp_malloc+0x48>)
 8009a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7ff ffbe 	bl	80099e0 <do_memp_malloc_pool>
 8009a64:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009a66:	68fb      	ldr	r3, [r7, #12]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	08014bec 	.word	0x08014bec
 8009a74:	08014c7c 	.word	0x08014c7c
 8009a78:	08014c40 	.word	0x08014c40
 8009a7c:	080173a8 	.word	0x080173a8

08009a80 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	f003 0303 	and.w	r3, r3, #3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d006      	beq.n	8009aa2 <do_memp_free_pool+0x22>
 8009a94:	4b0a      	ldr	r3, [pc, #40]	; (8009ac0 <do_memp_free_pool+0x40>)
 8009a96:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009a9a:	490a      	ldr	r1, [pc, #40]	; (8009ac4 <do_memp_free_pool+0x44>)
 8009a9c:	480a      	ldr	r0, [pc, #40]	; (8009ac8 <do_memp_free_pool+0x48>)
 8009a9e:	f009 fd2b 	bl	80134f8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009ab8:	bf00      	nop
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	08014bec 	.word	0x08014bec
 8009ac4:	08014c9c 	.word	0x08014c9c
 8009ac8:	08014c40 	.word	0x08014c40

08009acc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	6039      	str	r1, [r7, #0]
 8009ad6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009ad8:	79fb      	ldrb	r3, [r7, #7]
 8009ada:	2b08      	cmp	r3, #8
 8009adc:	d907      	bls.n	8009aee <memp_free+0x22>
 8009ade:	4b0c      	ldr	r3, [pc, #48]	; (8009b10 <memp_free+0x44>)
 8009ae0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009ae4:	490b      	ldr	r1, [pc, #44]	; (8009b14 <memp_free+0x48>)
 8009ae6:	480c      	ldr	r0, [pc, #48]	; (8009b18 <memp_free+0x4c>)
 8009ae8:	f009 fd06 	bl	80134f8 <iprintf>
 8009aec:	e00c      	b.n	8009b08 <memp_free+0x3c>

  if (mem == NULL) {
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d008      	beq.n	8009b06 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	4a09      	ldr	r2, [pc, #36]	; (8009b1c <memp_free+0x50>)
 8009af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7ff ffbe 	bl	8009a80 <do_memp_free_pool>
 8009b04:	e000      	b.n	8009b08 <memp_free+0x3c>
    return;
 8009b06:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	08014bec 	.word	0x08014bec
 8009b14:	08014cbc 	.word	0x08014cbc
 8009b18:	08014c40 	.word	0x08014c40
 8009b1c:	080173a8 	.word	0x080173a8

08009b20 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009b20:	b480      	push	{r7}
 8009b22:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009b24:	bf00      	nop
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
	...

08009b30 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d108      	bne.n	8009b56 <netif_add+0x26>
 8009b44:	4b57      	ldr	r3, [pc, #348]	; (8009ca4 <netif_add+0x174>)
 8009b46:	f240 1227 	movw	r2, #295	; 0x127
 8009b4a:	4957      	ldr	r1, [pc, #348]	; (8009ca8 <netif_add+0x178>)
 8009b4c:	4857      	ldr	r0, [pc, #348]	; (8009cac <netif_add+0x17c>)
 8009b4e:	f009 fcd3 	bl	80134f8 <iprintf>
 8009b52:	2300      	movs	r3, #0
 8009b54:	e0a2      	b.n	8009c9c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d108      	bne.n	8009b6e <netif_add+0x3e>
 8009b5c:	4b51      	ldr	r3, [pc, #324]	; (8009ca4 <netif_add+0x174>)
 8009b5e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009b62:	4953      	ldr	r1, [pc, #332]	; (8009cb0 <netif_add+0x180>)
 8009b64:	4851      	ldr	r0, [pc, #324]	; (8009cac <netif_add+0x17c>)
 8009b66:	f009 fcc7 	bl	80134f8 <iprintf>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	e096      	b.n	8009c9c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009b74:	4b4f      	ldr	r3, [pc, #316]	; (8009cb4 <netif_add+0x184>)
 8009b76:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d101      	bne.n	8009b82 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009b7e:	4b4d      	ldr	r3, [pc, #308]	; (8009cb4 <netif_add+0x184>)
 8009b80:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009b88:	4b4a      	ldr	r3, [pc, #296]	; (8009cb4 <netif_add+0x184>)
 8009b8a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	4a45      	ldr	r2, [pc, #276]	; (8009cb8 <netif_add+0x188>)
 8009ba2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6a3a      	ldr	r2, [r7, #32]
 8009bbc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009bbe:	4b3f      	ldr	r3, [pc, #252]	; (8009cbc <netif_add+0x18c>)
 8009bc0:	781a      	ldrb	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bcc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	68b9      	ldr	r1, [r7, #8]
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f000 f913 	bl	8009e00 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	4798      	blx	r3
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <netif_add+0xba>
    return NULL;
 8009be6:	2300      	movs	r3, #0
 8009be8:	e058      	b.n	8009c9c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009bf0:	2bff      	cmp	r3, #255	; 0xff
 8009bf2:	d103      	bne.n	8009bfc <netif_add+0xcc>
        netif->num = 0;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009c00:	4b2f      	ldr	r3, [pc, #188]	; (8009cc0 <netif_add+0x190>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	617b      	str	r3, [r7, #20]
 8009c06:	e02b      	b.n	8009c60 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d106      	bne.n	8009c1e <netif_add+0xee>
 8009c10:	4b24      	ldr	r3, [pc, #144]	; (8009ca4 <netif_add+0x174>)
 8009c12:	f240 128b 	movw	r2, #395	; 0x18b
 8009c16:	492b      	ldr	r1, [pc, #172]	; (8009cc4 <netif_add+0x194>)
 8009c18:	4824      	ldr	r0, [pc, #144]	; (8009cac <netif_add+0x17c>)
 8009c1a:	f009 fc6d 	bl	80134f8 <iprintf>
        num_netifs++;
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	3301      	adds	r3, #1
 8009c22:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	2bff      	cmp	r3, #255	; 0xff
 8009c28:	dd06      	ble.n	8009c38 <netif_add+0x108>
 8009c2a:	4b1e      	ldr	r3, [pc, #120]	; (8009ca4 <netif_add+0x174>)
 8009c2c:	f240 128d 	movw	r2, #397	; 0x18d
 8009c30:	4925      	ldr	r1, [pc, #148]	; (8009cc8 <netif_add+0x198>)
 8009c32:	481e      	ldr	r0, [pc, #120]	; (8009cac <netif_add+0x17c>)
 8009c34:	f009 fc60 	bl	80134f8 <iprintf>
        if (netif2->num == netif->num) {
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d108      	bne.n	8009c5a <netif_add+0x12a>
          netif->num++;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c4e:	3301      	adds	r3, #1
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009c58:	e005      	b.n	8009c66 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	617b      	str	r3, [r7, #20]
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1d0      	bne.n	8009c08 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1be      	bne.n	8009bea <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c72:	2bfe      	cmp	r3, #254	; 0xfe
 8009c74:	d103      	bne.n	8009c7e <netif_add+0x14e>
    netif_num = 0;
 8009c76:	4b11      	ldr	r3, [pc, #68]	; (8009cbc <netif_add+0x18c>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	701a      	strb	r2, [r3, #0]
 8009c7c:	e006      	b.n	8009c8c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c84:	3301      	adds	r3, #1
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	4b0c      	ldr	r3, [pc, #48]	; (8009cbc <netif_add+0x18c>)
 8009c8a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009c8c:	4b0c      	ldr	r3, [pc, #48]	; (8009cc0 <netif_add+0x190>)
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009c94:	4a0a      	ldr	r2, [pc, #40]	; (8009cc0 <netif_add+0x190>)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	08014cd8 	.word	0x08014cd8
 8009ca8:	08014d6c 	.word	0x08014d6c
 8009cac:	08014d28 	.word	0x08014d28
 8009cb0:	08014d88 	.word	0x08014d88
 8009cb4:	0801740c 	.word	0x0801740c
 8009cb8:	0800a013 	.word	0x0800a013
 8009cbc:	20008dd8 	.word	0x20008dd8
 8009cc0:	20008dd0 	.word	0x20008dd0
 8009cc4:	08014dac 	.word	0x08014dac
 8009cc8:	08014dc0 	.word	0x08014dc0

08009ccc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f002 fb81 	bl	800c3e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f007 f81f 	bl	8010d24 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009ce6:	bf00      	nop
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
	...

08009cf0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d106      	bne.n	8009d10 <netif_do_set_ipaddr+0x20>
 8009d02:	4b1d      	ldr	r3, [pc, #116]	; (8009d78 <netif_do_set_ipaddr+0x88>)
 8009d04:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009d08:	491c      	ldr	r1, [pc, #112]	; (8009d7c <netif_do_set_ipaddr+0x8c>)
 8009d0a:	481d      	ldr	r0, [pc, #116]	; (8009d80 <netif_do_set_ipaddr+0x90>)
 8009d0c:	f009 fbf4 	bl	80134f8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d106      	bne.n	8009d24 <netif_do_set_ipaddr+0x34>
 8009d16:	4b18      	ldr	r3, [pc, #96]	; (8009d78 <netif_do_set_ipaddr+0x88>)
 8009d18:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009d1c:	4917      	ldr	r1, [pc, #92]	; (8009d7c <netif_do_set_ipaddr+0x8c>)
 8009d1e:	4818      	ldr	r0, [pc, #96]	; (8009d80 <netif_do_set_ipaddr+0x90>)
 8009d20:	f009 fbea 	bl	80134f8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d01c      	beq.n	8009d6c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009d42:	f107 0314 	add.w	r3, r7, #20
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff ffbf 	bl	8009ccc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <netif_do_set_ipaddr+0x6a>
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	e000      	b.n	8009d5c <netif_do_set_ipaddr+0x6c>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009d60:	2101      	movs	r1, #1
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f000 f8d2 	bl	8009f0c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e000      	b.n	8009d6e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3718      	adds	r7, #24
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	08014cd8 	.word	0x08014cd8
 8009d7c:	08014df0 	.word	0x08014df0
 8009d80:	08014d28 	.word	0x08014d28

08009d84 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	3308      	adds	r3, #8
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d00a      	beq.n	8009db4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <netif_do_set_netmask+0x26>
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	e000      	b.n	8009dac <netif_do_set_netmask+0x28>
 8009daa:	2300      	movs	r3, #0
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009db0:	2301      	movs	r3, #1
 8009db2:	e000      	b.n	8009db6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b085      	sub	sp, #20
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	60b9      	str	r1, [r7, #8]
 8009dcc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	330c      	adds	r3, #12
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d00a      	beq.n	8009df2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <netif_do_set_gw+0x26>
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	e000      	b.n	8009dea <netif_do_set_gw+0x28>
 8009de8:	2300      	movs	r3, #0
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009dee:	2301      	movs	r3, #1
 8009df0:	e000      	b.n	8009df4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b088      	sub	sp, #32
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009e1c:	4b1c      	ldr	r3, [pc, #112]	; (8009e90 <netif_set_addr+0x90>)
 8009e1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d101      	bne.n	8009e2a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009e26:	4b1a      	ldr	r3, [pc, #104]	; (8009e90 <netif_set_addr+0x90>)
 8009e28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d101      	bne.n	8009e34 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009e30:	4b17      	ldr	r3, [pc, #92]	; (8009e90 <netif_set_addr+0x90>)
 8009e32:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d003      	beq.n	8009e42 <netif_set_addr+0x42>
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <netif_set_addr+0x46>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e000      	b.n	8009e48 <netif_set_addr+0x48>
 8009e46:	2300      	movs	r3, #0
 8009e48:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d006      	beq.n	8009e5e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009e50:	f107 0310 	add.w	r3, r7, #16
 8009e54:	461a      	mov	r2, r3
 8009e56:	68b9      	ldr	r1, [r7, #8]
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f7ff ff49 	bl	8009cf0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009e5e:	69fa      	ldr	r2, [r7, #28]
 8009e60:	6879      	ldr	r1, [r7, #4]
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f7ff ff8e 	bl	8009d84 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009e68:	69ba      	ldr	r2, [r7, #24]
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f7ff ffa8 	bl	8009dc2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d106      	bne.n	8009e86 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009e78:	f107 0310 	add.w	r3, r7, #16
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	68b9      	ldr	r1, [r7, #8]
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f7ff ff35 	bl	8009cf0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009e86:	bf00      	nop
 8009e88:	3720      	adds	r7, #32
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	0801740c 	.word	0x0801740c

08009e94 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009e9c:	4a04      	ldr	r2, [pc, #16]	; (8009eb0 <netif_set_default+0x1c>)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009ea2:	bf00      	nop
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	20008dd4 	.word	0x20008dd4

08009eb4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d107      	bne.n	8009ed2 <netif_set_up+0x1e>
 8009ec2:	4b0f      	ldr	r3, [pc, #60]	; (8009f00 <netif_set_up+0x4c>)
 8009ec4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009ec8:	490e      	ldr	r1, [pc, #56]	; (8009f04 <netif_set_up+0x50>)
 8009eca:	480f      	ldr	r0, [pc, #60]	; (8009f08 <netif_set_up+0x54>)
 8009ecc:	f009 fb14 	bl	80134f8 <iprintf>
 8009ed0:	e013      	b.n	8009efa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ed8:	f003 0301 	and.w	r3, r3, #1
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10c      	bne.n	8009efa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ee6:	f043 0301 	orr.w	r3, r3, #1
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009ef2:	2103      	movs	r1, #3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f809 	bl	8009f0c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	08014cd8 	.word	0x08014cd8
 8009f04:	08014e60 	.word	0x08014e60
 8009f08:	08014d28 	.word	0x08014d28

08009f0c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d106      	bne.n	8009f2c <netif_issue_reports+0x20>
 8009f1e:	4b18      	ldr	r3, [pc, #96]	; (8009f80 <netif_issue_reports+0x74>)
 8009f20:	f240 326d 	movw	r2, #877	; 0x36d
 8009f24:	4917      	ldr	r1, [pc, #92]	; (8009f84 <netif_issue_reports+0x78>)
 8009f26:	4818      	ldr	r0, [pc, #96]	; (8009f88 <netif_issue_reports+0x7c>)
 8009f28:	f009 fae6 	bl	80134f8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f32:	f003 0304 	and.w	r3, r3, #4
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d01e      	beq.n	8009f78 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f40:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d017      	beq.n	8009f78 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009f48:	78fb      	ldrb	r3, [r7, #3]
 8009f4a:	f003 0301 	and.w	r3, r3, #1
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d013      	beq.n	8009f7a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	3304      	adds	r3, #4
 8009f56:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00e      	beq.n	8009f7a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f62:	f003 0308 	and.w	r3, r3, #8
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d007      	beq.n	8009f7a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f007 fe41 	bl	8011bf8 <etharp_request>
 8009f76:	e000      	b.n	8009f7a <netif_issue_reports+0x6e>
    return;
 8009f78:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	08014cd8 	.word	0x08014cd8
 8009f84:	08014e7c 	.word	0x08014e7c
 8009f88:	08014d28 	.word	0x08014d28

08009f8c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d107      	bne.n	8009faa <netif_set_down+0x1e>
 8009f9a:	4b12      	ldr	r3, [pc, #72]	; (8009fe4 <netif_set_down+0x58>)
 8009f9c:	f240 329b 	movw	r2, #923	; 0x39b
 8009fa0:	4911      	ldr	r1, [pc, #68]	; (8009fe8 <netif_set_down+0x5c>)
 8009fa2:	4812      	ldr	r0, [pc, #72]	; (8009fec <netif_set_down+0x60>)
 8009fa4:	f009 faa8 	bl	80134f8 <iprintf>
 8009fa8:	e019      	b.n	8009fde <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d012      	beq.n	8009fde <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009fbe:	f023 0301 	bic.w	r3, r3, #1
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009fd0:	f003 0308 	and.w	r3, r3, #8
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f007 f9cb 	bl	8011374 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	08014cd8 	.word	0x08014cd8
 8009fe8:	08014ea0 	.word	0x08014ea0
 8009fec:	08014d28 	.word	0x08014d28

08009ff0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	61da      	str	r2, [r3, #28]
  }
}
 800a006:	bf00      	nop
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a012:	b480      	push	{r7}
 800a014:	b085      	sub	sp, #20
 800a016:	af00      	add	r7, sp, #0
 800a018:	60f8      	str	r0, [r7, #12]
 800a01a:	60b9      	str	r1, [r7, #8]
 800a01c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a01e:	f06f 030b 	mvn.w	r3, #11
}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
	...

0800a030 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a03a:	79fb      	ldrb	r3, [r7, #7]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d013      	beq.n	800a068 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a040:	4b0d      	ldr	r3, [pc, #52]	; (800a078 <netif_get_by_index+0x48>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	60fb      	str	r3, [r7, #12]
 800a046:	e00c      	b.n	800a062 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a04e:	3301      	adds	r3, #1
 800a050:	b2db      	uxtb	r3, r3
 800a052:	79fa      	ldrb	r2, [r7, #7]
 800a054:	429a      	cmp	r2, r3
 800a056:	d101      	bne.n	800a05c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	e006      	b.n	800a06a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	60fb      	str	r3, [r7, #12]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1ef      	bne.n	800a048 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	20008dd0 	.word	0x20008dd0

0800a07c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a082:	4b0c      	ldr	r3, [pc, #48]	; (800a0b4 <pbuf_free_ooseq+0x38>)
 800a084:	2200      	movs	r2, #0
 800a086:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a088:	4b0b      	ldr	r3, [pc, #44]	; (800a0b8 <pbuf_free_ooseq+0x3c>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	607b      	str	r3, [r7, #4]
 800a08e:	e00a      	b.n	800a0a6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a094:	2b00      	cmp	r3, #0
 800a096:	d003      	beq.n	800a0a0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f002 f9df 	bl	800c45c <tcp_free_ooseq>
      return;
 800a09e:	e005      	b.n	800a0ac <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	607b      	str	r3, [r7, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1f1      	bne.n	800a090 <pbuf_free_ooseq+0x14>
    }
  }
}
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20008dd9 	.word	0x20008dd9
 800a0b8:	20008de8 	.word	0x20008de8

0800a0bc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a0c0:	4b03      	ldr	r3, [pc, #12]	; (800a0d0 <pbuf_pool_is_empty+0x14>)
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a0c6:	bf00      	nop
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr
 800a0d0:	20008dd9 	.word	0x20008dd9

0800a0d4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	4611      	mov	r1, r2
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	80fb      	strh	r3, [r7, #6]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	88fa      	ldrh	r2, [r7, #6]
 800a0fa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	88ba      	ldrh	r2, [r7, #4]
 800a100:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a102:	8b3b      	ldrh	r3, [r7, #24]
 800a104:	b2da      	uxtb	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	7f3a      	ldrb	r2, [r7, #28]
 800a10e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2201      	movs	r2, #1
 800a114:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	73da      	strb	r2, [r3, #15]
}
 800a11c:	bf00      	nop
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08c      	sub	sp, #48	; 0x30
 800a12c:	af02      	add	r7, sp, #8
 800a12e:	4603      	mov	r3, r0
 800a130:	71fb      	strb	r3, [r7, #7]
 800a132:	460b      	mov	r3, r1
 800a134:	80bb      	strh	r3, [r7, #4]
 800a136:	4613      	mov	r3, r2
 800a138:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a13a:	79fb      	ldrb	r3, [r7, #7]
 800a13c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a13e:	887b      	ldrh	r3, [r7, #2]
 800a140:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a144:	d07f      	beq.n	800a246 <pbuf_alloc+0x11e>
 800a146:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a14a:	f300 80c8 	bgt.w	800a2de <pbuf_alloc+0x1b6>
 800a14e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a152:	d010      	beq.n	800a176 <pbuf_alloc+0x4e>
 800a154:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a158:	f300 80c1 	bgt.w	800a2de <pbuf_alloc+0x1b6>
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d002      	beq.n	800a166 <pbuf_alloc+0x3e>
 800a160:	2b41      	cmp	r3, #65	; 0x41
 800a162:	f040 80bc 	bne.w	800a2de <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a166:	887a      	ldrh	r2, [r7, #2]
 800a168:	88bb      	ldrh	r3, [r7, #4]
 800a16a:	4619      	mov	r1, r3
 800a16c:	2000      	movs	r0, #0
 800a16e:	f000 f8d1 	bl	800a314 <pbuf_alloc_reference>
 800a172:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a174:	e0bd      	b.n	800a2f2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a176:	2300      	movs	r3, #0
 800a178:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a17e:	88bb      	ldrh	r3, [r7, #4]
 800a180:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a182:	2008      	movs	r0, #8
 800a184:	f7ff fc56 	bl	8009a34 <memp_malloc>
 800a188:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d109      	bne.n	800a1a4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a190:	f7ff ff94 	bl	800a0bc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	2b00      	cmp	r3, #0
 800a198:	d002      	beq.n	800a1a0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a19a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a19c:	f000 faa8 	bl	800a6f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	e0a7      	b.n	800a2f4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a1a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1a6:	3303      	adds	r3, #3
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	f023 0303 	bic.w	r3, r3, #3
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	8b7a      	ldrh	r2, [r7, #26]
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	bf28      	it	cs
 800a1bc:	4613      	movcs	r3, r2
 800a1be:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a1c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1c2:	3310      	adds	r3, #16
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	3303      	adds	r3, #3
 800a1ca:	f023 0303 	bic.w	r3, r3, #3
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	89f9      	ldrh	r1, [r7, #14]
 800a1d2:	8b7a      	ldrh	r2, [r7, #26]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	887b      	ldrh	r3, [r7, #2]
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4601      	mov	r1, r0
 800a1e0:	6938      	ldr	r0, [r7, #16]
 800a1e2:	f7ff ff77 	bl	800a0d4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d006      	beq.n	800a200 <pbuf_alloc+0xd8>
 800a1f2:	4b42      	ldr	r3, [pc, #264]	; (800a2fc <pbuf_alloc+0x1d4>)
 800a1f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1f8:	4941      	ldr	r1, [pc, #260]	; (800a300 <pbuf_alloc+0x1d8>)
 800a1fa:	4842      	ldr	r0, [pc, #264]	; (800a304 <pbuf_alloc+0x1dc>)
 800a1fc:	f009 f97c 	bl	80134f8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a202:	3303      	adds	r3, #3
 800a204:	f023 0303 	bic.w	r3, r3, #3
 800a208:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a20c:	d106      	bne.n	800a21c <pbuf_alloc+0xf4>
 800a20e:	4b3b      	ldr	r3, [pc, #236]	; (800a2fc <pbuf_alloc+0x1d4>)
 800a210:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a214:	493c      	ldr	r1, [pc, #240]	; (800a308 <pbuf_alloc+0x1e0>)
 800a216:	483b      	ldr	r0, [pc, #236]	; (800a304 <pbuf_alloc+0x1dc>)
 800a218:	f009 f96e 	bl	80134f8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d102      	bne.n	800a228 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	627b      	str	r3, [r7, #36]	; 0x24
 800a226:	e002      	b.n	800a22e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a232:	8b7a      	ldrh	r2, [r7, #26]
 800a234:	89fb      	ldrh	r3, [r7, #14]
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a23e:	8b7b      	ldrh	r3, [r7, #26]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d19e      	bne.n	800a182 <pbuf_alloc+0x5a>
      break;
 800a244:	e055      	b.n	800a2f2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a246:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a248:	3303      	adds	r3, #3
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	f023 0303 	bic.w	r3, r3, #3
 800a250:	b29a      	uxth	r2, r3
 800a252:	88bb      	ldrh	r3, [r7, #4]
 800a254:	3303      	adds	r3, #3
 800a256:	b29b      	uxth	r3, r3
 800a258:	f023 0303 	bic.w	r3, r3, #3
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	4413      	add	r3, r2
 800a260:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a262:	8b3b      	ldrh	r3, [r7, #24]
 800a264:	3310      	adds	r3, #16
 800a266:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a268:	8b3a      	ldrh	r2, [r7, #24]
 800a26a:	88bb      	ldrh	r3, [r7, #4]
 800a26c:	3303      	adds	r3, #3
 800a26e:	f023 0303 	bic.w	r3, r3, #3
 800a272:	429a      	cmp	r2, r3
 800a274:	d306      	bcc.n	800a284 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a276:	8afa      	ldrh	r2, [r7, #22]
 800a278:	88bb      	ldrh	r3, [r7, #4]
 800a27a:	3303      	adds	r3, #3
 800a27c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a280:	429a      	cmp	r2, r3
 800a282:	d201      	bcs.n	800a288 <pbuf_alloc+0x160>
        return NULL;
 800a284:	2300      	movs	r3, #0
 800a286:	e035      	b.n	800a2f4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a288:	8afb      	ldrh	r3, [r7, #22]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7ff fa64 	bl	8009758 <mem_malloc>
 800a290:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	2b00      	cmp	r3, #0
 800a296:	d101      	bne.n	800a29c <pbuf_alloc+0x174>
        return NULL;
 800a298:	2300      	movs	r3, #0
 800a29a:	e02b      	b.n	800a2f4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a29c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a29e:	3310      	adds	r3, #16
 800a2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a2:	4413      	add	r3, r2
 800a2a4:	3303      	adds	r3, #3
 800a2a6:	f023 0303 	bic.w	r3, r3, #3
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	88b9      	ldrh	r1, [r7, #4]
 800a2ae:	88ba      	ldrh	r2, [r7, #4]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	9301      	str	r3, [sp, #4]
 800a2b4:	887b      	ldrh	r3, [r7, #2]
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4601      	mov	r1, r0
 800a2bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2be:	f7ff ff09 	bl	800a0d4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d010      	beq.n	800a2f0 <pbuf_alloc+0x1c8>
 800a2ce:	4b0b      	ldr	r3, [pc, #44]	; (800a2fc <pbuf_alloc+0x1d4>)
 800a2d0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a2d4:	490d      	ldr	r1, [pc, #52]	; (800a30c <pbuf_alloc+0x1e4>)
 800a2d6:	480b      	ldr	r0, [pc, #44]	; (800a304 <pbuf_alloc+0x1dc>)
 800a2d8:	f009 f90e 	bl	80134f8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a2dc:	e008      	b.n	800a2f0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a2de:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <pbuf_alloc+0x1d4>)
 800a2e0:	f240 1227 	movw	r2, #295	; 0x127
 800a2e4:	490a      	ldr	r1, [pc, #40]	; (800a310 <pbuf_alloc+0x1e8>)
 800a2e6:	4807      	ldr	r0, [pc, #28]	; (800a304 <pbuf_alloc+0x1dc>)
 800a2e8:	f009 f906 	bl	80134f8 <iprintf>
      return NULL;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	e001      	b.n	800a2f4 <pbuf_alloc+0x1cc>
      break;
 800a2f0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3728      	adds	r7, #40	; 0x28
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	08014f08 	.word	0x08014f08
 800a300:	08014f38 	.word	0x08014f38
 800a304:	08014f68 	.word	0x08014f68
 800a308:	08014f90 	.word	0x08014f90
 800a30c:	08014fc4 	.word	0x08014fc4
 800a310:	08014ff0 	.word	0x08014ff0

0800a314 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af02      	add	r7, sp, #8
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	460b      	mov	r3, r1
 800a31e:	807b      	strh	r3, [r7, #2]
 800a320:	4613      	mov	r3, r2
 800a322:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a324:	883b      	ldrh	r3, [r7, #0]
 800a326:	2b41      	cmp	r3, #65	; 0x41
 800a328:	d009      	beq.n	800a33e <pbuf_alloc_reference+0x2a>
 800a32a:	883b      	ldrh	r3, [r7, #0]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d006      	beq.n	800a33e <pbuf_alloc_reference+0x2a>
 800a330:	4b0f      	ldr	r3, [pc, #60]	; (800a370 <pbuf_alloc_reference+0x5c>)
 800a332:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a336:	490f      	ldr	r1, [pc, #60]	; (800a374 <pbuf_alloc_reference+0x60>)
 800a338:	480f      	ldr	r0, [pc, #60]	; (800a378 <pbuf_alloc_reference+0x64>)
 800a33a:	f009 f8dd 	bl	80134f8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a33e:	2007      	movs	r0, #7
 800a340:	f7ff fb78 	bl	8009a34 <memp_malloc>
 800a344:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	e00b      	b.n	800a368 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a350:	8879      	ldrh	r1, [r7, #2]
 800a352:	887a      	ldrh	r2, [r7, #2]
 800a354:	2300      	movs	r3, #0
 800a356:	9301      	str	r3, [sp, #4]
 800a358:	883b      	ldrh	r3, [r7, #0]
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	460b      	mov	r3, r1
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f7ff feb7 	bl	800a0d4 <pbuf_init_alloced_pbuf>
  return p;
 800a366:	68fb      	ldr	r3, [r7, #12]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	08014f08 	.word	0x08014f08
 800a374:	0801500c 	.word	0x0801500c
 800a378:	08014f68 	.word	0x08014f68

0800a37c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b088      	sub	sp, #32
 800a380:	af02      	add	r7, sp, #8
 800a382:	607b      	str	r3, [r7, #4]
 800a384:	4603      	mov	r3, r0
 800a386:	73fb      	strb	r3, [r7, #15]
 800a388:	460b      	mov	r3, r1
 800a38a:	81bb      	strh	r3, [r7, #12]
 800a38c:	4613      	mov	r3, r2
 800a38e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a390:	7bfb      	ldrb	r3, [r7, #15]
 800a392:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a394:	8a7b      	ldrh	r3, [r7, #18]
 800a396:	3303      	adds	r3, #3
 800a398:	f023 0203 	bic.w	r2, r3, #3
 800a39c:	89bb      	ldrh	r3, [r7, #12]
 800a39e:	441a      	add	r2, r3
 800a3a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d901      	bls.n	800a3aa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	e018      	b.n	800a3dc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d007      	beq.n	800a3c0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a3b0:	8a7b      	ldrh	r3, [r7, #18]
 800a3b2:	3303      	adds	r3, #3
 800a3b4:	f023 0303 	bic.w	r3, r3, #3
 800a3b8:	6a3a      	ldr	r2, [r7, #32]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	617b      	str	r3, [r7, #20]
 800a3be:	e001      	b.n	800a3c4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	89b9      	ldrh	r1, [r7, #12]
 800a3c8:	89ba      	ldrh	r2, [r7, #12]
 800a3ca:	2302      	movs	r3, #2
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	897b      	ldrh	r3, [r7, #10]
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	6979      	ldr	r1, [r7, #20]
 800a3d6:	f7ff fe7d 	bl	800a0d4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a3da:	687b      	ldr	r3, [r7, #4]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d106      	bne.n	800a404 <pbuf_realloc+0x20>
 800a3f6:	4b3a      	ldr	r3, [pc, #232]	; (800a4e0 <pbuf_realloc+0xfc>)
 800a3f8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a3fc:	4939      	ldr	r1, [pc, #228]	; (800a4e4 <pbuf_realloc+0x100>)
 800a3fe:	483a      	ldr	r0, [pc, #232]	; (800a4e8 <pbuf_realloc+0x104>)
 800a400:	f009 f87a 	bl	80134f8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	891b      	ldrh	r3, [r3, #8]
 800a408:	887a      	ldrh	r2, [r7, #2]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d263      	bcs.n	800a4d6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	891a      	ldrh	r2, [r3, #8]
 800a412:	887b      	ldrh	r3, [r7, #2]
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a418:	887b      	ldrh	r3, [r7, #2]
 800a41a:	817b      	strh	r3, [r7, #10]
  q = p;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a420:	e018      	b.n	800a454 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	895b      	ldrh	r3, [r3, #10]
 800a426:	897a      	ldrh	r2, [r7, #10]
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	891a      	ldrh	r2, [r3, #8]
 800a430:	893b      	ldrh	r3, [r7, #8]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	b29a      	uxth	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <pbuf_realloc+0x70>
 800a446:	4b26      	ldr	r3, [pc, #152]	; (800a4e0 <pbuf_realloc+0xfc>)
 800a448:	f240 12af 	movw	r2, #431	; 0x1af
 800a44c:	4927      	ldr	r1, [pc, #156]	; (800a4ec <pbuf_realloc+0x108>)
 800a44e:	4826      	ldr	r0, [pc, #152]	; (800a4e8 <pbuf_realloc+0x104>)
 800a450:	f009 f852 	bl	80134f8 <iprintf>
  while (rem_len > q->len) {
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	895b      	ldrh	r3, [r3, #10]
 800a458:	897a      	ldrh	r2, [r7, #10]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d8e1      	bhi.n	800a422 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	7b1b      	ldrb	r3, [r3, #12]
 800a462:	f003 030f 	and.w	r3, r3, #15
 800a466:	2b00      	cmp	r3, #0
 800a468:	d121      	bne.n	800a4ae <pbuf_realloc+0xca>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	895b      	ldrh	r3, [r3, #10]
 800a46e:	897a      	ldrh	r2, [r7, #10]
 800a470:	429a      	cmp	r2, r3
 800a472:	d01c      	beq.n	800a4ae <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	7b5b      	ldrb	r3, [r3, #13]
 800a478:	f003 0302 	and.w	r3, r3, #2
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d116      	bne.n	800a4ae <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	b29a      	uxth	r2, r3
 800a48a:	897b      	ldrh	r3, [r7, #10]
 800a48c:	4413      	add	r3, r2
 800a48e:	b29b      	uxth	r3, r3
 800a490:	4619      	mov	r1, r3
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f7ff f864 	bl	8009560 <mem_trim>
 800a498:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d106      	bne.n	800a4ae <pbuf_realloc+0xca>
 800a4a0:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <pbuf_realloc+0xfc>)
 800a4a2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a4a6:	4912      	ldr	r1, [pc, #72]	; (800a4f0 <pbuf_realloc+0x10c>)
 800a4a8:	480f      	ldr	r0, [pc, #60]	; (800a4e8 <pbuf_realloc+0x104>)
 800a4aa:	f009 f825 	bl	80134f8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	897a      	ldrh	r2, [r7, #10]
 800a4b2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	895a      	ldrh	r2, [r3, #10]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d004      	beq.n	800a4ce <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 f911 	bl	800a6f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	e000      	b.n	800a4d8 <pbuf_realloc+0xf4>
    return;
 800a4d6:	bf00      	nop

}
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	08014f08 	.word	0x08014f08
 800a4e4:	08015020 	.word	0x08015020
 800a4e8:	08014f68 	.word	0x08014f68
 800a4ec:	08015038 	.word	0x08015038
 800a4f0:	08015050 	.word	0x08015050

0800a4f4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	4613      	mov	r3, r2
 800a500:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d106      	bne.n	800a516 <pbuf_add_header_impl+0x22>
 800a508:	4b2b      	ldr	r3, [pc, #172]	; (800a5b8 <pbuf_add_header_impl+0xc4>)
 800a50a:	f240 12df 	movw	r2, #479	; 0x1df
 800a50e:	492b      	ldr	r1, [pc, #172]	; (800a5bc <pbuf_add_header_impl+0xc8>)
 800a510:	482b      	ldr	r0, [pc, #172]	; (800a5c0 <pbuf_add_header_impl+0xcc>)
 800a512:	f008 fff1 	bl	80134f8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <pbuf_add_header_impl+0x30>
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a522:	d301      	bcc.n	800a528 <pbuf_add_header_impl+0x34>
    return 1;
 800a524:	2301      	movs	r3, #1
 800a526:	e043      	b.n	800a5b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <pbuf_add_header_impl+0x3e>
    return 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	e03e      	b.n	800a5b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	891a      	ldrh	r2, [r3, #8]
 800a53a:	8a7b      	ldrh	r3, [r7, #18]
 800a53c:	4413      	add	r3, r2
 800a53e:	b29b      	uxth	r3, r3
 800a540:	8a7a      	ldrh	r2, [r7, #18]
 800a542:	429a      	cmp	r2, r3
 800a544:	d901      	bls.n	800a54a <pbuf_add_header_impl+0x56>
    return 1;
 800a546:	2301      	movs	r3, #1
 800a548:	e032      	b.n	800a5b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	7b1b      	ldrb	r3, [r3, #12]
 800a54e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a550:	8a3b      	ldrh	r3, [r7, #16]
 800a552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00c      	beq.n	800a574 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	425b      	negs	r3, r3
 800a562:	4413      	add	r3, r2
 800a564:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3310      	adds	r3, #16
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d20d      	bcs.n	800a58c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a570:	2301      	movs	r3, #1
 800a572:	e01d      	b.n	800a5b0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a574:	79fb      	ldrb	r3, [r7, #7]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d006      	beq.n	800a588 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	425b      	negs	r3, r3
 800a582:	4413      	add	r3, r2
 800a584:	617b      	str	r3, [r7, #20]
 800a586:	e001      	b.n	800a58c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a588:	2301      	movs	r3, #1
 800a58a:	e011      	b.n	800a5b0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	895a      	ldrh	r2, [r3, #10]
 800a596:	8a7b      	ldrh	r3, [r7, #18]
 800a598:	4413      	add	r3, r2
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	891a      	ldrh	r2, [r3, #8]
 800a5a4:	8a7b      	ldrh	r3, [r7, #18]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	811a      	strh	r2, [r3, #8]


  return 0;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	08014f08 	.word	0x08014f08
 800a5bc:	0801506c 	.word	0x0801506c
 800a5c0:	08014f68 	.word	0x08014f68

0800a5c4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7ff ff8e 	bl	800a4f4 <pbuf_add_header_impl>
 800a5d8:	4603      	mov	r3, r0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
	...

0800a5e4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d106      	bne.n	800a602 <pbuf_remove_header+0x1e>
 800a5f4:	4b20      	ldr	r3, [pc, #128]	; (800a678 <pbuf_remove_header+0x94>)
 800a5f6:	f240 224b 	movw	r2, #587	; 0x24b
 800a5fa:	4920      	ldr	r1, [pc, #128]	; (800a67c <pbuf_remove_header+0x98>)
 800a5fc:	4820      	ldr	r0, [pc, #128]	; (800a680 <pbuf_remove_header+0x9c>)
 800a5fe:	f008 ff7b 	bl	80134f8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <pbuf_remove_header+0x2c>
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a60e:	d301      	bcc.n	800a614 <pbuf_remove_header+0x30>
    return 1;
 800a610:	2301      	movs	r3, #1
 800a612:	e02c      	b.n	800a66e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d101      	bne.n	800a61e <pbuf_remove_header+0x3a>
    return 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	e027      	b.n	800a66e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	895b      	ldrh	r3, [r3, #10]
 800a626:	89fa      	ldrh	r2, [r7, #14]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d908      	bls.n	800a63e <pbuf_remove_header+0x5a>
 800a62c:	4b12      	ldr	r3, [pc, #72]	; (800a678 <pbuf_remove_header+0x94>)
 800a62e:	f240 2255 	movw	r2, #597	; 0x255
 800a632:	4914      	ldr	r1, [pc, #80]	; (800a684 <pbuf_remove_header+0xa0>)
 800a634:	4812      	ldr	r0, [pc, #72]	; (800a680 <pbuf_remove_header+0x9c>)
 800a636:	f008 ff5f 	bl	80134f8 <iprintf>
 800a63a:	2301      	movs	r3, #1
 800a63c:	e017      	b.n	800a66e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	441a      	add	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	895a      	ldrh	r2, [r3, #10]
 800a654:	89fb      	ldrh	r3, [r7, #14]
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	b29a      	uxth	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	891a      	ldrh	r2, [r3, #8]
 800a662:	89fb      	ldrh	r3, [r7, #14]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	b29a      	uxth	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	08014f08 	.word	0x08014f08
 800a67c:	0801506c 	.word	0x0801506c
 800a680:	08014f68 	.word	0x08014f68
 800a684:	08015078 	.word	0x08015078

0800a688 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	807b      	strh	r3, [r7, #2]
 800a694:	4613      	mov	r3, r2
 800a696:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a698:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	da08      	bge.n	800a6b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a6a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6a4:	425b      	negs	r3, r3
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7ff ff9b 	bl	800a5e4 <pbuf_remove_header>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	e007      	b.n	800a6c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a6b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6b6:	787a      	ldrb	r2, [r7, #1]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f7ff ff1a 	bl	800a4f4 <pbuf_add_header_impl>
 800a6c0:	4603      	mov	r3, r0
  }
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a6d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff ffd2 	bl	800a688 <pbuf_header_impl>
 800a6e4:	4603      	mov	r3, r0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
	...

0800a6f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10b      	bne.n	800a716 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d106      	bne.n	800a712 <pbuf_free+0x22>
 800a704:	4b38      	ldr	r3, [pc, #224]	; (800a7e8 <pbuf_free+0xf8>)
 800a706:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a70a:	4938      	ldr	r1, [pc, #224]	; (800a7ec <pbuf_free+0xfc>)
 800a70c:	4838      	ldr	r0, [pc, #224]	; (800a7f0 <pbuf_free+0x100>)
 800a70e:	f008 fef3 	bl	80134f8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a712:	2300      	movs	r3, #0
 800a714:	e063      	b.n	800a7de <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a71a:	e05c      	b.n	800a7d6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	7b9b      	ldrb	r3, [r3, #14]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d106      	bne.n	800a732 <pbuf_free+0x42>
 800a724:	4b30      	ldr	r3, [pc, #192]	; (800a7e8 <pbuf_free+0xf8>)
 800a726:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a72a:	4932      	ldr	r1, [pc, #200]	; (800a7f4 <pbuf_free+0x104>)
 800a72c:	4830      	ldr	r0, [pc, #192]	; (800a7f0 <pbuf_free+0x100>)
 800a72e:	f008 fee3 	bl	80134f8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	7b9b      	ldrb	r3, [r3, #14]
 800a736:	3b01      	subs	r3, #1
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	739a      	strb	r2, [r3, #14]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	7b9b      	ldrb	r3, [r3, #14]
 800a742:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a744:	7dbb      	ldrb	r3, [r7, #22]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d143      	bne.n	800a7d2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	7b1b      	ldrb	r3, [r3, #12]
 800a754:	f003 030f 	and.w	r3, r3, #15
 800a758:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	7b5b      	ldrb	r3, [r3, #13]
 800a75e:	f003 0302 	and.w	r3, r3, #2
 800a762:	2b00      	cmp	r3, #0
 800a764:	d011      	beq.n	800a78a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d106      	bne.n	800a780 <pbuf_free+0x90>
 800a772:	4b1d      	ldr	r3, [pc, #116]	; (800a7e8 <pbuf_free+0xf8>)
 800a774:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a778:	491f      	ldr	r1, [pc, #124]	; (800a7f8 <pbuf_free+0x108>)
 800a77a:	481d      	ldr	r0, [pc, #116]	; (800a7f0 <pbuf_free+0x100>)
 800a77c:	f008 febc 	bl	80134f8 <iprintf>
        pc->custom_free_function(p);
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	4798      	blx	r3
 800a788:	e01d      	b.n	800a7c6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d104      	bne.n	800a79a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a790:	6879      	ldr	r1, [r7, #4]
 800a792:	2008      	movs	r0, #8
 800a794:	f7ff f99a 	bl	8009acc <memp_free>
 800a798:	e015      	b.n	800a7c6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d104      	bne.n	800a7aa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a7a0:	6879      	ldr	r1, [r7, #4]
 800a7a2:	2007      	movs	r0, #7
 800a7a4:	f7ff f992 	bl	8009acc <memp_free>
 800a7a8:	e00d      	b.n	800a7c6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d103      	bne.n	800a7b8 <pbuf_free+0xc8>
          mem_free(p);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7fe fe6b 	bl	800948c <mem_free>
 800a7b6:	e006      	b.n	800a7c6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a7b8:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <pbuf_free+0xf8>)
 800a7ba:	f240 320f 	movw	r2, #783	; 0x30f
 800a7be:	490f      	ldr	r1, [pc, #60]	; (800a7fc <pbuf_free+0x10c>)
 800a7c0:	480b      	ldr	r0, [pc, #44]	; (800a7f0 <pbuf_free+0x100>)
 800a7c2:	f008 fe99 	bl	80134f8 <iprintf>
        }
      }
      count++;
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	607b      	str	r3, [r7, #4]
 800a7d0:	e001      	b.n	800a7d6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d19f      	bne.n	800a71c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	08014f08 	.word	0x08014f08
 800a7ec:	0801506c 	.word	0x0801506c
 800a7f0:	08014f68 	.word	0x08014f68
 800a7f4:	08015098 	.word	0x08015098
 800a7f8:	080150b0 	.word	0x080150b0
 800a7fc:	080150d4 	.word	0x080150d4

0800a800 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a80c:	e005      	b.n	800a81a <pbuf_clen+0x1a>
    ++len;
 800a80e:	89fb      	ldrh	r3, [r7, #14]
 800a810:	3301      	adds	r3, #1
 800a812:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1f6      	bne.n	800a80e <pbuf_clen+0xe>
  }
  return len;
 800a820:	89fb      	ldrh	r3, [r7, #14]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
	...

0800a830 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d010      	beq.n	800a860 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	7b9b      	ldrb	r3, [r3, #14]
 800a842:	3301      	adds	r3, #1
 800a844:	b2da      	uxtb	r2, r3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	7b9b      	ldrb	r3, [r3, #14]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d106      	bne.n	800a860 <pbuf_ref+0x30>
 800a852:	4b05      	ldr	r3, [pc, #20]	; (800a868 <pbuf_ref+0x38>)
 800a854:	f240 3242 	movw	r2, #834	; 0x342
 800a858:	4904      	ldr	r1, [pc, #16]	; (800a86c <pbuf_ref+0x3c>)
 800a85a:	4805      	ldr	r0, [pc, #20]	; (800a870 <pbuf_ref+0x40>)
 800a85c:	f008 fe4c 	bl	80134f8 <iprintf>
  }
}
 800a860:	bf00      	nop
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	08014f08 	.word	0x08014f08
 800a86c:	080150e8 	.word	0x080150e8
 800a870:	08014f68 	.word	0x08014f68

0800a874 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d002      	beq.n	800a88a <pbuf_cat+0x16>
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d107      	bne.n	800a89a <pbuf_cat+0x26>
 800a88a:	4b20      	ldr	r3, [pc, #128]	; (800a90c <pbuf_cat+0x98>)
 800a88c:	f240 3259 	movw	r2, #857	; 0x359
 800a890:	491f      	ldr	r1, [pc, #124]	; (800a910 <pbuf_cat+0x9c>)
 800a892:	4820      	ldr	r0, [pc, #128]	; (800a914 <pbuf_cat+0xa0>)
 800a894:	f008 fe30 	bl	80134f8 <iprintf>
 800a898:	e034      	b.n	800a904 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	60fb      	str	r3, [r7, #12]
 800a89e:	e00a      	b.n	800a8b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	891a      	ldrh	r2, [r3, #8]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	891b      	ldrh	r3, [r3, #8]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	60fb      	str	r3, [r7, #12]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1f0      	bne.n	800a8a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	891a      	ldrh	r2, [r3, #8]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	895b      	ldrh	r3, [r3, #10]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d006      	beq.n	800a8d8 <pbuf_cat+0x64>
 800a8ca:	4b10      	ldr	r3, [pc, #64]	; (800a90c <pbuf_cat+0x98>)
 800a8cc:	f240 3262 	movw	r2, #866	; 0x362
 800a8d0:	4911      	ldr	r1, [pc, #68]	; (800a918 <pbuf_cat+0xa4>)
 800a8d2:	4810      	ldr	r0, [pc, #64]	; (800a914 <pbuf_cat+0xa0>)
 800a8d4:	f008 fe10 	bl	80134f8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d006      	beq.n	800a8ee <pbuf_cat+0x7a>
 800a8e0:	4b0a      	ldr	r3, [pc, #40]	; (800a90c <pbuf_cat+0x98>)
 800a8e2:	f240 3263 	movw	r2, #867	; 0x363
 800a8e6:	490d      	ldr	r1, [pc, #52]	; (800a91c <pbuf_cat+0xa8>)
 800a8e8:	480a      	ldr	r0, [pc, #40]	; (800a914 <pbuf_cat+0xa0>)
 800a8ea:	f008 fe05 	bl	80134f8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	891a      	ldrh	r2, [r3, #8]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	891b      	ldrh	r3, [r3, #8]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	08014f08 	.word	0x08014f08
 800a910:	080150fc 	.word	0x080150fc
 800a914:	08014f68 	.word	0x08014f68
 800a918:	08015134 	.word	0x08015134
 800a91c:	08015164 	.word	0x08015164

0800a920 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff ffa1 	bl	800a874 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a932:	6838      	ldr	r0, [r7, #0]
 800a934:	f7ff ff7c 	bl	800a830 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a938:	bf00      	nop
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a94a:	2300      	movs	r3, #0
 800a94c:	617b      	str	r3, [r7, #20]
 800a94e:	2300      	movs	r3, #0
 800a950:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d008      	beq.n	800a96a <pbuf_copy+0x2a>
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d005      	beq.n	800a96a <pbuf_copy+0x2a>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	891a      	ldrh	r2, [r3, #8]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	891b      	ldrh	r3, [r3, #8]
 800a966:	429a      	cmp	r2, r3
 800a968:	d209      	bcs.n	800a97e <pbuf_copy+0x3e>
 800a96a:	4b57      	ldr	r3, [pc, #348]	; (800aac8 <pbuf_copy+0x188>)
 800a96c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a970:	4956      	ldr	r1, [pc, #344]	; (800aacc <pbuf_copy+0x18c>)
 800a972:	4857      	ldr	r0, [pc, #348]	; (800aad0 <pbuf_copy+0x190>)
 800a974:	f008 fdc0 	bl	80134f8 <iprintf>
 800a978:	f06f 030f 	mvn.w	r3, #15
 800a97c:	e09f      	b.n	800aabe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	895b      	ldrh	r3, [r3, #10]
 800a982:	461a      	mov	r2, r3
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	1ad2      	subs	r2, r2, r3
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	895b      	ldrh	r3, [r3, #10]
 800a98c:	4619      	mov	r1, r3
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	1acb      	subs	r3, r1, r3
 800a992:	429a      	cmp	r2, r3
 800a994:	d306      	bcc.n	800a9a4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	895b      	ldrh	r3, [r3, #10]
 800a99a:	461a      	mov	r2, r3
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	60fb      	str	r3, [r7, #12]
 800a9a2:	e005      	b.n	800a9b0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	895b      	ldrh	r3, [r3, #10]
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685a      	ldr	r2, [r3, #4]
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	18d0      	adds	r0, r2, r3
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	4413      	add	r3, r2
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	f008 fd68 	bl	8013498 <memcpy>
    offset_to += len;
 800a9c8:	697a      	ldr	r2, [r7, #20]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	895b      	ldrh	r3, [r3, #10]
 800a9dc:	461a      	mov	r2, r3
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d906      	bls.n	800a9f2 <pbuf_copy+0xb2>
 800a9e4:	4b38      	ldr	r3, [pc, #224]	; (800aac8 <pbuf_copy+0x188>)
 800a9e6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a9ea:	493a      	ldr	r1, [pc, #232]	; (800aad4 <pbuf_copy+0x194>)
 800a9ec:	4838      	ldr	r0, [pc, #224]	; (800aad0 <pbuf_copy+0x190>)
 800a9ee:	f008 fd83 	bl	80134f8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	895b      	ldrh	r3, [r3, #10]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d906      	bls.n	800aa0c <pbuf_copy+0xcc>
 800a9fe:	4b32      	ldr	r3, [pc, #200]	; (800aac8 <pbuf_copy+0x188>)
 800aa00:	f240 32da 	movw	r2, #986	; 0x3da
 800aa04:	4934      	ldr	r1, [pc, #208]	; (800aad8 <pbuf_copy+0x198>)
 800aa06:	4832      	ldr	r0, [pc, #200]	; (800aad0 <pbuf_copy+0x190>)
 800aa08:	f008 fd76 	bl	80134f8 <iprintf>
    if (offset_from >= p_from->len) {
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	895b      	ldrh	r3, [r3, #10]
 800aa10:	461a      	mov	r2, r3
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d304      	bcc.n	800aa22 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	895b      	ldrh	r3, [r3, #10]
 800aa26:	461a      	mov	r2, r3
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d114      	bne.n	800aa58 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10c      	bne.n	800aa58 <pbuf_copy+0x118>
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d009      	beq.n	800aa58 <pbuf_copy+0x118>
 800aa44:	4b20      	ldr	r3, [pc, #128]	; (800aac8 <pbuf_copy+0x188>)
 800aa46:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800aa4a:	4924      	ldr	r1, [pc, #144]	; (800aadc <pbuf_copy+0x19c>)
 800aa4c:	4820      	ldr	r0, [pc, #128]	; (800aad0 <pbuf_copy+0x190>)
 800aa4e:	f008 fd53 	bl	80134f8 <iprintf>
 800aa52:	f06f 030f 	mvn.w	r3, #15
 800aa56:	e032      	b.n	800aabe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d013      	beq.n	800aa86 <pbuf_copy+0x146>
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	895a      	ldrh	r2, [r3, #10]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	891b      	ldrh	r3, [r3, #8]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d10d      	bne.n	800aa86 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d009      	beq.n	800aa86 <pbuf_copy+0x146>
 800aa72:	4b15      	ldr	r3, [pc, #84]	; (800aac8 <pbuf_copy+0x188>)
 800aa74:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800aa78:	4919      	ldr	r1, [pc, #100]	; (800aae0 <pbuf_copy+0x1a0>)
 800aa7a:	4815      	ldr	r0, [pc, #84]	; (800aad0 <pbuf_copy+0x190>)
 800aa7c:	f008 fd3c 	bl	80134f8 <iprintf>
 800aa80:	f06f 0305 	mvn.w	r3, #5
 800aa84:	e01b      	b.n	800aabe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d013      	beq.n	800aab4 <pbuf_copy+0x174>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	895a      	ldrh	r2, [r3, #10]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	891b      	ldrh	r3, [r3, #8]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d10d      	bne.n	800aab4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d009      	beq.n	800aab4 <pbuf_copy+0x174>
 800aaa0:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <pbuf_copy+0x188>)
 800aaa2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800aaa6:	490e      	ldr	r1, [pc, #56]	; (800aae0 <pbuf_copy+0x1a0>)
 800aaa8:	4809      	ldr	r0, [pc, #36]	; (800aad0 <pbuf_copy+0x190>)
 800aaaa:	f008 fd25 	bl	80134f8 <iprintf>
 800aaae:	f06f 0305 	mvn.w	r3, #5
 800aab2:	e004      	b.n	800aabe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f47f af61 	bne.w	800a97e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3718      	adds	r7, #24
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	08014f08 	.word	0x08014f08
 800aacc:	080151b0 	.word	0x080151b0
 800aad0:	08014f68 	.word	0x08014f68
 800aad4:	080151e0 	.word	0x080151e0
 800aad8:	080151f8 	.word	0x080151f8
 800aadc:	08015214 	.word	0x08015214
 800aae0:	08015224 	.word	0x08015224

0800aae4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b088      	sub	sp, #32
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	4611      	mov	r1, r2
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	80fb      	strh	r3, [r7, #6]
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800aafe:	2300      	movs	r3, #0
 800ab00:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d108      	bne.n	800ab1a <pbuf_copy_partial+0x36>
 800ab08:	4b2b      	ldr	r3, [pc, #172]	; (800abb8 <pbuf_copy_partial+0xd4>)
 800ab0a:	f240 420a 	movw	r2, #1034	; 0x40a
 800ab0e:	492b      	ldr	r1, [pc, #172]	; (800abbc <pbuf_copy_partial+0xd8>)
 800ab10:	482b      	ldr	r0, [pc, #172]	; (800abc0 <pbuf_copy_partial+0xdc>)
 800ab12:	f008 fcf1 	bl	80134f8 <iprintf>
 800ab16:	2300      	movs	r3, #0
 800ab18:	e04a      	b.n	800abb0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d108      	bne.n	800ab32 <pbuf_copy_partial+0x4e>
 800ab20:	4b25      	ldr	r3, [pc, #148]	; (800abb8 <pbuf_copy_partial+0xd4>)
 800ab22:	f240 420b 	movw	r2, #1035	; 0x40b
 800ab26:	4927      	ldr	r1, [pc, #156]	; (800abc4 <pbuf_copy_partial+0xe0>)
 800ab28:	4825      	ldr	r0, [pc, #148]	; (800abc0 <pbuf_copy_partial+0xdc>)
 800ab2a:	f008 fce5 	bl	80134f8 <iprintf>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e03e      	b.n	800abb0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	61fb      	str	r3, [r7, #28]
 800ab36:	e034      	b.n	800aba2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ab38:	88bb      	ldrh	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00a      	beq.n	800ab54 <pbuf_copy_partial+0x70>
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	895b      	ldrh	r3, [r3, #10]
 800ab42:	88ba      	ldrh	r2, [r7, #4]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d305      	bcc.n	800ab54 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	895b      	ldrh	r3, [r3, #10]
 800ab4c:	88ba      	ldrh	r2, [r7, #4]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	80bb      	strh	r3, [r7, #4]
 800ab52:	e023      	b.n	800ab9c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	895a      	ldrh	r2, [r3, #10]
 800ab58:	88bb      	ldrh	r3, [r7, #4]
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ab5e:	8b3a      	ldrh	r2, [r7, #24]
 800ab60:	88fb      	ldrh	r3, [r7, #6]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d901      	bls.n	800ab6a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ab66:	88fb      	ldrh	r3, [r7, #6]
 800ab68:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ab6a:	8b7b      	ldrh	r3, [r7, #26]
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	18d0      	adds	r0, r2, r3
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	685a      	ldr	r2, [r3, #4]
 800ab74:	88bb      	ldrh	r3, [r7, #4]
 800ab76:	4413      	add	r3, r2
 800ab78:	8b3a      	ldrh	r2, [r7, #24]
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	f008 fc8c 	bl	8013498 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ab80:	8afa      	ldrh	r2, [r7, #22]
 800ab82:	8b3b      	ldrh	r3, [r7, #24]
 800ab84:	4413      	add	r3, r2
 800ab86:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ab88:	8b7a      	ldrh	r2, [r7, #26]
 800ab8a:	8b3b      	ldrh	r3, [r7, #24]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ab90:	88fa      	ldrh	r2, [r7, #6]
 800ab92:	8b3b      	ldrh	r3, [r7, #24]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	61fb      	str	r3, [r7, #28]
 800aba2:	88fb      	ldrh	r3, [r7, #6]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <pbuf_copy_partial+0xca>
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1c4      	bne.n	800ab38 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800abae:	8afb      	ldrh	r3, [r7, #22]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3720      	adds	r7, #32
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	08014f08 	.word	0x08014f08
 800abbc:	08015250 	.word	0x08015250
 800abc0:	08014f68 	.word	0x08014f68
 800abc4:	08015270 	.word	0x08015270

0800abc8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	4613      	mov	r3, r2
 800abd4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800abd6:	88fb      	ldrh	r3, [r7, #6]
 800abd8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800abda:	2300      	movs	r3, #0
 800abdc:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d109      	bne.n	800abf8 <pbuf_take+0x30>
 800abe4:	4b3a      	ldr	r3, [pc, #232]	; (800acd0 <pbuf_take+0x108>)
 800abe6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800abea:	493a      	ldr	r1, [pc, #232]	; (800acd4 <pbuf_take+0x10c>)
 800abec:	483a      	ldr	r0, [pc, #232]	; (800acd8 <pbuf_take+0x110>)
 800abee:	f008 fc83 	bl	80134f8 <iprintf>
 800abf2:	f06f 030f 	mvn.w	r3, #15
 800abf6:	e067      	b.n	800acc8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d109      	bne.n	800ac12 <pbuf_take+0x4a>
 800abfe:	4b34      	ldr	r3, [pc, #208]	; (800acd0 <pbuf_take+0x108>)
 800ac00:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800ac04:	4935      	ldr	r1, [pc, #212]	; (800acdc <pbuf_take+0x114>)
 800ac06:	4834      	ldr	r0, [pc, #208]	; (800acd8 <pbuf_take+0x110>)
 800ac08:	f008 fc76 	bl	80134f8 <iprintf>
 800ac0c:	f06f 030f 	mvn.w	r3, #15
 800ac10:	e05a      	b.n	800acc8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	891b      	ldrh	r3, [r3, #8]
 800ac16:	88fa      	ldrh	r2, [r7, #6]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d909      	bls.n	800ac30 <pbuf_take+0x68>
 800ac1c:	4b2c      	ldr	r3, [pc, #176]	; (800acd0 <pbuf_take+0x108>)
 800ac1e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800ac22:	492f      	ldr	r1, [pc, #188]	; (800ace0 <pbuf_take+0x118>)
 800ac24:	482c      	ldr	r0, [pc, #176]	; (800acd8 <pbuf_take+0x110>)
 800ac26:	f008 fc67 	bl	80134f8 <iprintf>
 800ac2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac2e:	e04b      	b.n	800acc8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d007      	beq.n	800ac46 <pbuf_take+0x7e>
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d004      	beq.n	800ac46 <pbuf_take+0x7e>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	891b      	ldrh	r3, [r3, #8]
 800ac40:	88fa      	ldrh	r2, [r7, #6]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d902      	bls.n	800ac4c <pbuf_take+0x84>
    return ERR_ARG;
 800ac46:	f06f 030f 	mvn.w	r3, #15
 800ac4a:	e03d      	b.n	800acc8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	61fb      	str	r3, [r7, #28]
 800ac50:	e028      	b.n	800aca4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d106      	bne.n	800ac66 <pbuf_take+0x9e>
 800ac58:	4b1d      	ldr	r3, [pc, #116]	; (800acd0 <pbuf_take+0x108>)
 800ac5a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ac5e:	4921      	ldr	r1, [pc, #132]	; (800ace4 <pbuf_take+0x11c>)
 800ac60:	481d      	ldr	r0, [pc, #116]	; (800acd8 <pbuf_take+0x110>)
 800ac62:	f008 fc49 	bl	80134f8 <iprintf>
    buf_copy_len = total_copy_len;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	895b      	ldrh	r3, [r3, #10]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d902      	bls.n	800ac7c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	895b      	ldrh	r3, [r3, #10]
 800ac7a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	6858      	ldr	r0, [r3, #4]
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	4413      	add	r3, r2
 800ac86:	69ba      	ldr	r2, [r7, #24]
 800ac88:	4619      	mov	r1, r3
 800ac8a:	f008 fc05 	bl	8013498 <memcpy>
    total_copy_len -= buf_copy_len;
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800ac96:	693a      	ldr	r2, [r7, #16]
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	61fb      	str	r3, [r7, #28]
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1d3      	bne.n	800ac52 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d103      	bne.n	800acb8 <pbuf_take+0xf0>
 800acb0:	88fb      	ldrh	r3, [r7, #6]
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d006      	beq.n	800acc6 <pbuf_take+0xfe>
 800acb8:	4b05      	ldr	r3, [pc, #20]	; (800acd0 <pbuf_take+0x108>)
 800acba:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800acbe:	490a      	ldr	r1, [pc, #40]	; (800ace8 <pbuf_take+0x120>)
 800acc0:	4805      	ldr	r0, [pc, #20]	; (800acd8 <pbuf_take+0x110>)
 800acc2:	f008 fc19 	bl	80134f8 <iprintf>
  return ERR_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3720      	adds	r7, #32
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	08014f08 	.word	0x08014f08
 800acd4:	080152e0 	.word	0x080152e0
 800acd8:	08014f68 	.word	0x08014f68
 800acdc:	080152f8 	.word	0x080152f8
 800ace0:	08015314 	.word	0x08015314
 800ace4:	08015334 	.word	0x08015334
 800ace8:	0801534c 	.word	0x0801534c

0800acec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	4603      	mov	r3, r0
 800acf4:	603a      	str	r2, [r7, #0]
 800acf6:	71fb      	strb	r3, [r7, #7]
 800acf8:	460b      	mov	r3, r1
 800acfa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	8919      	ldrh	r1, [r3, #8]
 800ad00:	88ba      	ldrh	r2, [r7, #4]
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff fa0f 	bl	800a128 <pbuf_alloc>
 800ad0a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <pbuf_clone+0x2a>
    return NULL;
 800ad12:	2300      	movs	r3, #0
 800ad14:	e011      	b.n	800ad3a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ad16:	6839      	ldr	r1, [r7, #0]
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7ff fe11 	bl	800a940 <pbuf_copy>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ad22:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d006      	beq.n	800ad38 <pbuf_clone+0x4c>
 800ad2a:	4b06      	ldr	r3, [pc, #24]	; (800ad44 <pbuf_clone+0x58>)
 800ad2c:	f240 5224 	movw	r2, #1316	; 0x524
 800ad30:	4905      	ldr	r1, [pc, #20]	; (800ad48 <pbuf_clone+0x5c>)
 800ad32:	4806      	ldr	r0, [pc, #24]	; (800ad4c <pbuf_clone+0x60>)
 800ad34:	f008 fbe0 	bl	80134f8 <iprintf>
  return q;
 800ad38:	68fb      	ldr	r3, [r7, #12]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	08014f08 	.word	0x08014f08
 800ad48:	0801537c 	.word	0x0801537c
 800ad4c:	08014f68 	.word	0x08014f68

0800ad50 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ad54:	f008 fbe8 	bl	8013528 <rand>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	4b01      	ldr	r3, [pc, #4]	; (800ad70 <tcp_init+0x20>)
 800ad6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ad6c:	bf00      	nop
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	2000001e 	.word	0x2000001e

0800ad74 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	7d1b      	ldrb	r3, [r3, #20]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d105      	bne.n	800ad90 <tcp_free+0x1c>
 800ad84:	4b06      	ldr	r3, [pc, #24]	; (800ada0 <tcp_free+0x2c>)
 800ad86:	22d4      	movs	r2, #212	; 0xd4
 800ad88:	4906      	ldr	r1, [pc, #24]	; (800ada4 <tcp_free+0x30>)
 800ad8a:	4807      	ldr	r0, [pc, #28]	; (800ada8 <tcp_free+0x34>)
 800ad8c:	f008 fbb4 	bl	80134f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	2001      	movs	r0, #1
 800ad94:	f7fe fe9a 	bl	8009acc <memp_free>
}
 800ad98:	bf00      	nop
 800ad9a:	3708      	adds	r7, #8
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	08015408 	.word	0x08015408
 800ada4:	08015438 	.word	0x08015438
 800ada8:	0801544c 	.word	0x0801544c

0800adac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	7d1b      	ldrb	r3, [r3, #20]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d105      	bne.n	800adc8 <tcp_free_listen+0x1c>
 800adbc:	4b06      	ldr	r3, [pc, #24]	; (800add8 <tcp_free_listen+0x2c>)
 800adbe:	22df      	movs	r2, #223	; 0xdf
 800adc0:	4906      	ldr	r1, [pc, #24]	; (800addc <tcp_free_listen+0x30>)
 800adc2:	4807      	ldr	r0, [pc, #28]	; (800ade0 <tcp_free_listen+0x34>)
 800adc4:	f008 fb98 	bl	80134f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800adc8:	6879      	ldr	r1, [r7, #4]
 800adca:	2002      	movs	r0, #2
 800adcc:	f7fe fe7e 	bl	8009acc <memp_free>
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	08015408 	.word	0x08015408
 800addc:	08015474 	.word	0x08015474
 800ade0:	0801544c 	.word	0x0801544c

0800ade4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ade8:	f000 fea2 	bl	800bb30 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800adec:	4b07      	ldr	r3, [pc, #28]	; (800ae0c <tcp_tmr+0x28>)
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	3301      	adds	r3, #1
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	4b05      	ldr	r3, [pc, #20]	; (800ae0c <tcp_tmr+0x28>)
 800adf6:	701a      	strb	r2, [r3, #0]
 800adf8:	4b04      	ldr	r3, [pc, #16]	; (800ae0c <tcp_tmr+0x28>)
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d001      	beq.n	800ae08 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ae04:	f000 fb54 	bl	800b4b0 <tcp_slowtmr>
  }
}
 800ae08:	bf00      	nop
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	20008df1 	.word	0x20008df1

0800ae10 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d105      	bne.n	800ae2c <tcp_remove_listener+0x1c>
 800ae20:	4b0d      	ldr	r3, [pc, #52]	; (800ae58 <tcp_remove_listener+0x48>)
 800ae22:	22ff      	movs	r2, #255	; 0xff
 800ae24:	490d      	ldr	r1, [pc, #52]	; (800ae5c <tcp_remove_listener+0x4c>)
 800ae26:	480e      	ldr	r0, [pc, #56]	; (800ae60 <tcp_remove_listener+0x50>)
 800ae28:	f008 fb66 	bl	80134f8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	60fb      	str	r3, [r7, #12]
 800ae30:	e00a      	b.n	800ae48 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d102      	bne.n	800ae42 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	60fb      	str	r3, [r7, #12]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1f1      	bne.n	800ae32 <tcp_remove_listener+0x22>
    }
  }
}
 800ae4e:	bf00      	nop
 800ae50:	bf00      	nop
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	08015408 	.word	0x08015408
 800ae5c:	08015490 	.word	0x08015490
 800ae60:	0801544c 	.word	0x0801544c

0800ae64 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d106      	bne.n	800ae80 <tcp_listen_closed+0x1c>
 800ae72:	4b14      	ldr	r3, [pc, #80]	; (800aec4 <tcp_listen_closed+0x60>)
 800ae74:	f240 1211 	movw	r2, #273	; 0x111
 800ae78:	4913      	ldr	r1, [pc, #76]	; (800aec8 <tcp_listen_closed+0x64>)
 800ae7a:	4814      	ldr	r0, [pc, #80]	; (800aecc <tcp_listen_closed+0x68>)
 800ae7c:	f008 fb3c 	bl	80134f8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	7d1b      	ldrb	r3, [r3, #20]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d006      	beq.n	800ae96 <tcp_listen_closed+0x32>
 800ae88:	4b0e      	ldr	r3, [pc, #56]	; (800aec4 <tcp_listen_closed+0x60>)
 800ae8a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ae8e:	4910      	ldr	r1, [pc, #64]	; (800aed0 <tcp_listen_closed+0x6c>)
 800ae90:	480e      	ldr	r0, [pc, #56]	; (800aecc <tcp_listen_closed+0x68>)
 800ae92:	f008 fb31 	bl	80134f8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ae96:	2301      	movs	r3, #1
 800ae98:	60fb      	str	r3, [r7, #12]
 800ae9a:	e00b      	b.n	800aeb4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ae9c:	4a0d      	ldr	r2, [pc, #52]	; (800aed4 <tcp_listen_closed+0x70>)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	6879      	ldr	r1, [r7, #4]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7ff ffb1 	bl	800ae10 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	60fb      	str	r3, [r7, #12]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d9f0      	bls.n	800ae9c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800aeba:	bf00      	nop
 800aebc:	bf00      	nop
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	08015408 	.word	0x08015408
 800aec8:	080154b8 	.word	0x080154b8
 800aecc:	0801544c 	.word	0x0801544c
 800aed0:	080154c4 	.word	0x080154c4
 800aed4:	080173e4 	.word	0x080173e4

0800aed8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800aed8:	b5b0      	push	{r4, r5, r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af04      	add	r7, sp, #16
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d106      	bne.n	800aef8 <tcp_close_shutdown+0x20>
 800aeea:	4b63      	ldr	r3, [pc, #396]	; (800b078 <tcp_close_shutdown+0x1a0>)
 800aeec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800aef0:	4962      	ldr	r1, [pc, #392]	; (800b07c <tcp_close_shutdown+0x1a4>)
 800aef2:	4863      	ldr	r0, [pc, #396]	; (800b080 <tcp_close_shutdown+0x1a8>)
 800aef4:	f008 fb00 	bl	80134f8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800aef8:	78fb      	ldrb	r3, [r7, #3]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d066      	beq.n	800afcc <tcp_close_shutdown+0xf4>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	7d1b      	ldrb	r3, [r3, #20]
 800af02:	2b04      	cmp	r3, #4
 800af04:	d003      	beq.n	800af0e <tcp_close_shutdown+0x36>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	7d1b      	ldrb	r3, [r3, #20]
 800af0a:	2b07      	cmp	r3, #7
 800af0c:	d15e      	bne.n	800afcc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af12:	2b00      	cmp	r3, #0
 800af14:	d104      	bne.n	800af20 <tcp_close_shutdown+0x48>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800af1e:	d055      	beq.n	800afcc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	8b5b      	ldrh	r3, [r3, #26]
 800af24:	f003 0310 	and.w	r3, r3, #16
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d106      	bne.n	800af3a <tcp_close_shutdown+0x62>
 800af2c:	4b52      	ldr	r3, [pc, #328]	; (800b078 <tcp_close_shutdown+0x1a0>)
 800af2e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800af32:	4954      	ldr	r1, [pc, #336]	; (800b084 <tcp_close_shutdown+0x1ac>)
 800af34:	4852      	ldr	r0, [pc, #328]	; (800b080 <tcp_close_shutdown+0x1a8>)
 800af36:	f008 fadf 	bl	80134f8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800af42:	687d      	ldr	r5, [r7, #4]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3304      	adds	r3, #4
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	8ad2      	ldrh	r2, [r2, #22]
 800af4c:	6879      	ldr	r1, [r7, #4]
 800af4e:	8b09      	ldrh	r1, [r1, #24]
 800af50:	9102      	str	r1, [sp, #8]
 800af52:	9201      	str	r2, [sp, #4]
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	462b      	mov	r3, r5
 800af58:	4622      	mov	r2, r4
 800af5a:	4601      	mov	r1, r0
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f004 fe91 	bl	800fc84 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f001 f8c6 	bl	800c0f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800af68:	4b47      	ldr	r3, [pc, #284]	; (800b088 <tcp_close_shutdown+0x1b0>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d105      	bne.n	800af7e <tcp_close_shutdown+0xa6>
 800af72:	4b45      	ldr	r3, [pc, #276]	; (800b088 <tcp_close_shutdown+0x1b0>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	4a43      	ldr	r2, [pc, #268]	; (800b088 <tcp_close_shutdown+0x1b0>)
 800af7a:	6013      	str	r3, [r2, #0]
 800af7c:	e013      	b.n	800afa6 <tcp_close_shutdown+0xce>
 800af7e:	4b42      	ldr	r3, [pc, #264]	; (800b088 <tcp_close_shutdown+0x1b0>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	e00c      	b.n	800afa0 <tcp_close_shutdown+0xc8>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d104      	bne.n	800af9a <tcp_close_shutdown+0xc2>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	68da      	ldr	r2, [r3, #12]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	60da      	str	r2, [r3, #12]
 800af98:	e005      	b.n	800afa6 <tcp_close_shutdown+0xce>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	60fb      	str	r3, [r7, #12]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1ef      	bne.n	800af86 <tcp_close_shutdown+0xae>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	60da      	str	r2, [r3, #12]
 800afac:	4b37      	ldr	r3, [pc, #220]	; (800b08c <tcp_close_shutdown+0x1b4>)
 800afae:	2201      	movs	r2, #1
 800afb0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800afb2:	4b37      	ldr	r3, [pc, #220]	; (800b090 <tcp_close_shutdown+0x1b8>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d102      	bne.n	800afc2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800afbc:	f003 fd5e 	bl	800ea7c <tcp_trigger_input_pcb_close>
 800afc0:	e002      	b.n	800afc8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7ff fed6 	bl	800ad74 <tcp_free>
      }
      return ERR_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	e050      	b.n	800b06e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	7d1b      	ldrb	r3, [r3, #20]
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d03b      	beq.n	800b04c <tcp_close_shutdown+0x174>
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	dc44      	bgt.n	800b062 <tcp_close_shutdown+0x18a>
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <tcp_close_shutdown+0x10a>
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d02a      	beq.n	800b036 <tcp_close_shutdown+0x15e>
 800afe0:	e03f      	b.n	800b062 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	8adb      	ldrh	r3, [r3, #22]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d021      	beq.n	800b02e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800afea:	4b2a      	ldr	r3, [pc, #168]	; (800b094 <tcp_close_shutdown+0x1bc>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d105      	bne.n	800b000 <tcp_close_shutdown+0x128>
 800aff4:	4b27      	ldr	r3, [pc, #156]	; (800b094 <tcp_close_shutdown+0x1bc>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	4a26      	ldr	r2, [pc, #152]	; (800b094 <tcp_close_shutdown+0x1bc>)
 800affc:	6013      	str	r3, [r2, #0]
 800affe:	e013      	b.n	800b028 <tcp_close_shutdown+0x150>
 800b000:	4b24      	ldr	r3, [pc, #144]	; (800b094 <tcp_close_shutdown+0x1bc>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	60bb      	str	r3, [r7, #8]
 800b006:	e00c      	b.n	800b022 <tcp_close_shutdown+0x14a>
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d104      	bne.n	800b01c <tcp_close_shutdown+0x144>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68da      	ldr	r2, [r3, #12]
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	60da      	str	r2, [r3, #12]
 800b01a:	e005      	b.n	800b028 <tcp_close_shutdown+0x150>
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	60bb      	str	r3, [r7, #8]
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1ef      	bne.n	800b008 <tcp_close_shutdown+0x130>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f7ff fea0 	bl	800ad74 <tcp_free>
      break;
 800b034:	e01a      	b.n	800b06c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f7ff ff14 	bl	800ae64 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b03c:	6879      	ldr	r1, [r7, #4]
 800b03e:	4816      	ldr	r0, [pc, #88]	; (800b098 <tcp_close_shutdown+0x1c0>)
 800b040:	f001 f8a8 	bl	800c194 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7ff feb1 	bl	800adac <tcp_free_listen>
      break;
 800b04a:	e00f      	b.n	800b06c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b04c:	6879      	ldr	r1, [r7, #4]
 800b04e:	480e      	ldr	r0, [pc, #56]	; (800b088 <tcp_close_shutdown+0x1b0>)
 800b050:	f001 f8a0 	bl	800c194 <tcp_pcb_remove>
 800b054:	4b0d      	ldr	r3, [pc, #52]	; (800b08c <tcp_close_shutdown+0x1b4>)
 800b056:	2201      	movs	r2, #1
 800b058:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7ff fe8a 	bl	800ad74 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b060:	e004      	b.n	800b06c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f81a 	bl	800b09c <tcp_close_shutdown_fin>
 800b068:	4603      	mov	r3, r0
 800b06a:	e000      	b.n	800b06e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bdb0      	pop	{r4, r5, r7, pc}
 800b076:	bf00      	nop
 800b078:	08015408 	.word	0x08015408
 800b07c:	080154dc 	.word	0x080154dc
 800b080:	0801544c 	.word	0x0801544c
 800b084:	080154fc 	.word	0x080154fc
 800b088:	20008de8 	.word	0x20008de8
 800b08c:	20008df0 	.word	0x20008df0
 800b090:	20008e28 	.word	0x20008e28
 800b094:	20008de0 	.word	0x20008de0
 800b098:	20008de4 	.word	0x20008de4

0800b09c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d106      	bne.n	800b0b8 <tcp_close_shutdown_fin+0x1c>
 800b0aa:	4b2e      	ldr	r3, [pc, #184]	; (800b164 <tcp_close_shutdown_fin+0xc8>)
 800b0ac:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b0b0:	492d      	ldr	r1, [pc, #180]	; (800b168 <tcp_close_shutdown_fin+0xcc>)
 800b0b2:	482e      	ldr	r0, [pc, #184]	; (800b16c <tcp_close_shutdown_fin+0xd0>)
 800b0b4:	f008 fa20 	bl	80134f8 <iprintf>

  switch (pcb->state) {
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	7d1b      	ldrb	r3, [r3, #20]
 800b0bc:	2b07      	cmp	r3, #7
 800b0be:	d020      	beq.n	800b102 <tcp_close_shutdown_fin+0x66>
 800b0c0:	2b07      	cmp	r3, #7
 800b0c2:	dc2b      	bgt.n	800b11c <tcp_close_shutdown_fin+0x80>
 800b0c4:	2b03      	cmp	r3, #3
 800b0c6:	d002      	beq.n	800b0ce <tcp_close_shutdown_fin+0x32>
 800b0c8:	2b04      	cmp	r3, #4
 800b0ca:	d00d      	beq.n	800b0e8 <tcp_close_shutdown_fin+0x4c>
 800b0cc:	e026      	b.n	800b11c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f003 fee6 	bl	800eea0 <tcp_send_fin>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b0d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d11f      	bne.n	800b120 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2205      	movs	r2, #5
 800b0e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b0e6:	e01b      	b.n	800b120 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f003 fed9 	bl	800eea0 <tcp_send_fin>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b0f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d114      	bne.n	800b124 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2205      	movs	r2, #5
 800b0fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b100:	e010      	b.n	800b124 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f003 fecc 	bl	800eea0 <tcp_send_fin>
 800b108:	4603      	mov	r3, r0
 800b10a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b10c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d109      	bne.n	800b128 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2209      	movs	r2, #9
 800b118:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b11a:	e005      	b.n	800b128 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b11c:	2300      	movs	r3, #0
 800b11e:	e01c      	b.n	800b15a <tcp_close_shutdown_fin+0xbe>
      break;
 800b120:	bf00      	nop
 800b122:	e002      	b.n	800b12a <tcp_close_shutdown_fin+0x8e>
      break;
 800b124:	bf00      	nop
 800b126:	e000      	b.n	800b12a <tcp_close_shutdown_fin+0x8e>
      break;
 800b128:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b12a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d103      	bne.n	800b13a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f003 fff2 	bl	800f11c <tcp_output>
 800b138:	e00d      	b.n	800b156 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b13a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b142:	d108      	bne.n	800b156 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	8b5b      	ldrh	r3, [r3, #26]
 800b148:	f043 0308 	orr.w	r3, r3, #8
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	e001      	b.n	800b15a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	08015408 	.word	0x08015408
 800b168:	080154b8 	.word	0x080154b8
 800b16c:	0801544c 	.word	0x0801544c

0800b170 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d109      	bne.n	800b192 <tcp_close+0x22>
 800b17e:	4b0f      	ldr	r3, [pc, #60]	; (800b1bc <tcp_close+0x4c>)
 800b180:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b184:	490e      	ldr	r1, [pc, #56]	; (800b1c0 <tcp_close+0x50>)
 800b186:	480f      	ldr	r0, [pc, #60]	; (800b1c4 <tcp_close+0x54>)
 800b188:	f008 f9b6 	bl	80134f8 <iprintf>
 800b18c:	f06f 030f 	mvn.w	r3, #15
 800b190:	e00f      	b.n	800b1b2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	7d1b      	ldrb	r3, [r3, #20]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d006      	beq.n	800b1a8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	8b5b      	ldrh	r3, [r3, #26]
 800b19e:	f043 0310 	orr.w	r3, r3, #16
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b1a8:	2101      	movs	r1, #1
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7ff fe94 	bl	800aed8 <tcp_close_shutdown>
 800b1b0:	4603      	mov	r3, r0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	08015408 	.word	0x08015408
 800b1c0:	08015518 	.word	0x08015518
 800b1c4:	0801544c 	.word	0x0801544c

0800b1c8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b08e      	sub	sp, #56	; 0x38
 800b1cc:	af04      	add	r7, sp, #16
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d107      	bne.n	800b1e8 <tcp_abandon+0x20>
 800b1d8:	4b52      	ldr	r3, [pc, #328]	; (800b324 <tcp_abandon+0x15c>)
 800b1da:	f240 223d 	movw	r2, #573	; 0x23d
 800b1de:	4952      	ldr	r1, [pc, #328]	; (800b328 <tcp_abandon+0x160>)
 800b1e0:	4852      	ldr	r0, [pc, #328]	; (800b32c <tcp_abandon+0x164>)
 800b1e2:	f008 f989 	bl	80134f8 <iprintf>
 800b1e6:	e099      	b.n	800b31c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	7d1b      	ldrb	r3, [r3, #20]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d106      	bne.n	800b1fe <tcp_abandon+0x36>
 800b1f0:	4b4c      	ldr	r3, [pc, #304]	; (800b324 <tcp_abandon+0x15c>)
 800b1f2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b1f6:	494e      	ldr	r1, [pc, #312]	; (800b330 <tcp_abandon+0x168>)
 800b1f8:	484c      	ldr	r0, [pc, #304]	; (800b32c <tcp_abandon+0x164>)
 800b1fa:	f008 f97d 	bl	80134f8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	7d1b      	ldrb	r3, [r3, #20]
 800b202:	2b0a      	cmp	r3, #10
 800b204:	d107      	bne.n	800b216 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b206:	6879      	ldr	r1, [r7, #4]
 800b208:	484a      	ldr	r0, [pc, #296]	; (800b334 <tcp_abandon+0x16c>)
 800b20a:	f000 ffc3 	bl	800c194 <tcp_pcb_remove>
    tcp_free(pcb);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff fdb0 	bl	800ad74 <tcp_free>
 800b214:	e082      	b.n	800b31c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b222:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b228:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b230:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	7d1b      	ldrb	r3, [r3, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d126      	bne.n	800b28e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	8adb      	ldrh	r3, [r3, #22]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d02e      	beq.n	800b2a6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b248:	4b3b      	ldr	r3, [pc, #236]	; (800b338 <tcp_abandon+0x170>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d105      	bne.n	800b25e <tcp_abandon+0x96>
 800b252:	4b39      	ldr	r3, [pc, #228]	; (800b338 <tcp_abandon+0x170>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	4a37      	ldr	r2, [pc, #220]	; (800b338 <tcp_abandon+0x170>)
 800b25a:	6013      	str	r3, [r2, #0]
 800b25c:	e013      	b.n	800b286 <tcp_abandon+0xbe>
 800b25e:	4b36      	ldr	r3, [pc, #216]	; (800b338 <tcp_abandon+0x170>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	61fb      	str	r3, [r7, #28]
 800b264:	e00c      	b.n	800b280 <tcp_abandon+0xb8>
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d104      	bne.n	800b27a <tcp_abandon+0xb2>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	68da      	ldr	r2, [r3, #12]
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	60da      	str	r2, [r3, #12]
 800b278:	e005      	b.n	800b286 <tcp_abandon+0xbe>
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	61fb      	str	r3, [r7, #28]
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1ef      	bne.n	800b266 <tcp_abandon+0x9e>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	60da      	str	r2, [r3, #12]
 800b28c:	e00b      	b.n	800b2a6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	8adb      	ldrh	r3, [r3, #22]
 800b296:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b298:	6879      	ldr	r1, [r7, #4]
 800b29a:	4828      	ldr	r0, [pc, #160]	; (800b33c <tcp_abandon+0x174>)
 800b29c:	f000 ff7a 	bl	800c194 <tcp_pcb_remove>
 800b2a0:	4b27      	ldr	r3, [pc, #156]	; (800b340 <tcp_abandon+0x178>)
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d004      	beq.n	800b2b8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f000 fd1c 	bl	800bcf0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d004      	beq.n	800b2ca <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f000 fd13 	bl	800bcf0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d004      	beq.n	800b2dc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f000 fd0a 	bl	800bcf0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00e      	beq.n	800b300 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b2e2:	6879      	ldr	r1, [r7, #4]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3304      	adds	r3, #4
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	8b12      	ldrh	r2, [r2, #24]
 800b2ec:	9202      	str	r2, [sp, #8]
 800b2ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b2f0:	9201      	str	r2, [sp, #4]
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	69b9      	ldr	r1, [r7, #24]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f004 fcc2 	bl	800fc84 <tcp_rst>
    }
    last_state = pcb->state;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	7d1b      	ldrb	r3, [r3, #20]
 800b304:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7ff fd34 	bl	800ad74 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d004      	beq.n	800b31c <tcp_abandon+0x154>
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	f06f 010c 	mvn.w	r1, #12
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	4798      	blx	r3
  }
}
 800b31c:	3728      	adds	r7, #40	; 0x28
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	08015408 	.word	0x08015408
 800b328:	0801554c 	.word	0x0801554c
 800b32c:	0801544c 	.word	0x0801544c
 800b330:	08015568 	.word	0x08015568
 800b334:	20008dec 	.word	0x20008dec
 800b338:	20008de0 	.word	0x20008de0
 800b33c:	20008de8 	.word	0x20008de8
 800b340:	20008df0 	.word	0x20008df0

0800b344 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b34c:	2101      	movs	r1, #1
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7ff ff3a 	bl	800b1c8 <tcp_abandon>
}
 800b354:	bf00      	nop
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d106      	bne.n	800b378 <tcp_update_rcv_ann_wnd+0x1c>
 800b36a:	4b25      	ldr	r3, [pc, #148]	; (800b400 <tcp_update_rcv_ann_wnd+0xa4>)
 800b36c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b370:	4924      	ldr	r1, [pc, #144]	; (800b404 <tcp_update_rcv_ann_wnd+0xa8>)
 800b372:	4825      	ldr	r0, [pc, #148]	; (800b408 <tcp_update_rcv_ann_wnd+0xac>)
 800b374:	f008 f8c0 	bl	80134f8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b380:	4413      	add	r3, r2
 800b382:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b38c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b390:	bf28      	it	cs
 800b392:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b396:	b292      	uxth	r2, r2
 800b398:	4413      	add	r3, r2
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	db08      	blt.n	800b3b4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	e020      	b.n	800b3f6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	dd03      	ble.n	800b3ca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b3c8:	e014      	b.n	800b3f4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3dc:	d306      	bcc.n	800b3ec <tcp_update_rcv_ann_wnd+0x90>
 800b3de:	4b08      	ldr	r3, [pc, #32]	; (800b400 <tcp_update_rcv_ann_wnd+0xa4>)
 800b3e0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b3e4:	4909      	ldr	r1, [pc, #36]	; (800b40c <tcp_update_rcv_ann_wnd+0xb0>)
 800b3e6:	4808      	ldr	r0, [pc, #32]	; (800b408 <tcp_update_rcv_ann_wnd+0xac>)
 800b3e8:	f008 f886 	bl	80134f8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b3f4:	2300      	movs	r3, #0
  }
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	08015408 	.word	0x08015408
 800b404:	08015664 	.word	0x08015664
 800b408:	0801544c 	.word	0x0801544c
 800b40c:	08015688 	.word	0x08015688

0800b410 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	460b      	mov	r3, r1
 800b41a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d107      	bne.n	800b432 <tcp_recved+0x22>
 800b422:	4b1f      	ldr	r3, [pc, #124]	; (800b4a0 <tcp_recved+0x90>)
 800b424:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b428:	491e      	ldr	r1, [pc, #120]	; (800b4a4 <tcp_recved+0x94>)
 800b42a:	481f      	ldr	r0, [pc, #124]	; (800b4a8 <tcp_recved+0x98>)
 800b42c:	f008 f864 	bl	80134f8 <iprintf>
 800b430:	e032      	b.n	800b498 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	7d1b      	ldrb	r3, [r3, #20]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d106      	bne.n	800b448 <tcp_recved+0x38>
 800b43a:	4b19      	ldr	r3, [pc, #100]	; (800b4a0 <tcp_recved+0x90>)
 800b43c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b440:	491a      	ldr	r1, [pc, #104]	; (800b4ac <tcp_recved+0x9c>)
 800b442:	4819      	ldr	r0, [pc, #100]	; (800b4a8 <tcp_recved+0x98>)
 800b444:	f008 f858 	bl	80134f8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b44c:	887b      	ldrh	r3, [r7, #2]
 800b44e:	4413      	add	r3, r2
 800b450:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b452:	89fb      	ldrh	r3, [r7, #14]
 800b454:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b458:	d804      	bhi.n	800b464 <tcp_recved+0x54>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b45e:	89fa      	ldrh	r2, [r7, #14]
 800b460:	429a      	cmp	r2, r3
 800b462:	d204      	bcs.n	800b46e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b46a:	851a      	strh	r2, [r3, #40]	; 0x28
 800b46c:	e002      	b.n	800b474 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	89fa      	ldrh	r2, [r7, #14]
 800b472:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f7ff ff71 	bl	800b35c <tcp_update_rcv_ann_wnd>
 800b47a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b482:	d309      	bcc.n	800b498 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	8b5b      	ldrh	r3, [r3, #26]
 800b488:	f043 0302 	orr.w	r3, r3, #2
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f003 fe42 	bl	800f11c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	08015408 	.word	0x08015408
 800b4a4:	080156a4 	.word	0x080156a4
 800b4a8:	0801544c 	.word	0x0801544c
 800b4ac:	080156bc 	.word	0x080156bc

0800b4b0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b4b0:	b5b0      	push	{r4, r5, r7, lr}
 800b4b2:	b090      	sub	sp, #64	; 0x40
 800b4b4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b4bc:	4b94      	ldr	r3, [pc, #592]	; (800b710 <tcp_slowtmr+0x260>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	4a93      	ldr	r2, [pc, #588]	; (800b710 <tcp_slowtmr+0x260>)
 800b4c4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b4c6:	4b93      	ldr	r3, [pc, #588]	; (800b714 <tcp_slowtmr+0x264>)
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	b2da      	uxtb	r2, r3
 800b4ce:	4b91      	ldr	r3, [pc, #580]	; (800b714 <tcp_slowtmr+0x264>)
 800b4d0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b4d6:	4b90      	ldr	r3, [pc, #576]	; (800b718 <tcp_slowtmr+0x268>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b4dc:	e29f      	b.n	800ba1e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e0:	7d1b      	ldrb	r3, [r3, #20]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d106      	bne.n	800b4f4 <tcp_slowtmr+0x44>
 800b4e6:	4b8d      	ldr	r3, [pc, #564]	; (800b71c <tcp_slowtmr+0x26c>)
 800b4e8:	f240 42be 	movw	r2, #1214	; 0x4be
 800b4ec:	498c      	ldr	r1, [pc, #560]	; (800b720 <tcp_slowtmr+0x270>)
 800b4ee:	488d      	ldr	r0, [pc, #564]	; (800b724 <tcp_slowtmr+0x274>)
 800b4f0:	f008 f802 	bl	80134f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	7d1b      	ldrb	r3, [r3, #20]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d106      	bne.n	800b50a <tcp_slowtmr+0x5a>
 800b4fc:	4b87      	ldr	r3, [pc, #540]	; (800b71c <tcp_slowtmr+0x26c>)
 800b4fe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b502:	4989      	ldr	r1, [pc, #548]	; (800b728 <tcp_slowtmr+0x278>)
 800b504:	4887      	ldr	r0, [pc, #540]	; (800b724 <tcp_slowtmr+0x274>)
 800b506:	f007 fff7 	bl	80134f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50c:	7d1b      	ldrb	r3, [r3, #20]
 800b50e:	2b0a      	cmp	r3, #10
 800b510:	d106      	bne.n	800b520 <tcp_slowtmr+0x70>
 800b512:	4b82      	ldr	r3, [pc, #520]	; (800b71c <tcp_slowtmr+0x26c>)
 800b514:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b518:	4984      	ldr	r1, [pc, #528]	; (800b72c <tcp_slowtmr+0x27c>)
 800b51a:	4882      	ldr	r0, [pc, #520]	; (800b724 <tcp_slowtmr+0x274>)
 800b51c:	f007 ffec 	bl	80134f8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b522:	7f9a      	ldrb	r2, [r3, #30]
 800b524:	4b7b      	ldr	r3, [pc, #492]	; (800b714 <tcp_slowtmr+0x264>)
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d105      	bne.n	800b538 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b536:	e272      	b.n	800ba1e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b538:	4b76      	ldr	r3, [pc, #472]	; (800b714 <tcp_slowtmr+0x264>)
 800b53a:	781a      	ldrb	r2, [r3, #0]
 800b53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b540:	2300      	movs	r3, #0
 800b542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b546:	2300      	movs	r3, #0
 800b548:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54e:	7d1b      	ldrb	r3, [r3, #20]
 800b550:	2b02      	cmp	r3, #2
 800b552:	d10a      	bne.n	800b56a <tcp_slowtmr+0xba>
 800b554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b55a:	2b05      	cmp	r3, #5
 800b55c:	d905      	bls.n	800b56a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b55e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b562:	3301      	adds	r3, #1
 800b564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b568:	e11e      	b.n	800b7a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b570:	2b0b      	cmp	r3, #11
 800b572:	d905      	bls.n	800b580 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b578:	3301      	adds	r3, #1
 800b57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b57e:	e113      	b.n	800b7a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b582:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b586:	2b00      	cmp	r3, #0
 800b588:	d075      	beq.n	800b676 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d006      	beq.n	800b5a0 <tcp_slowtmr+0xf0>
 800b592:	4b62      	ldr	r3, [pc, #392]	; (800b71c <tcp_slowtmr+0x26c>)
 800b594:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b598:	4965      	ldr	r1, [pc, #404]	; (800b730 <tcp_slowtmr+0x280>)
 800b59a:	4862      	ldr	r0, [pc, #392]	; (800b724 <tcp_slowtmr+0x274>)
 800b59c:	f007 ffac 	bl	80134f8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d106      	bne.n	800b5b6 <tcp_slowtmr+0x106>
 800b5a8:	4b5c      	ldr	r3, [pc, #368]	; (800b71c <tcp_slowtmr+0x26c>)
 800b5aa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b5ae:	4961      	ldr	r1, [pc, #388]	; (800b734 <tcp_slowtmr+0x284>)
 800b5b0:	485c      	ldr	r0, [pc, #368]	; (800b724 <tcp_slowtmr+0x274>)
 800b5b2:	f007 ffa1 	bl	80134f8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b5bc:	2b0b      	cmp	r3, #11
 800b5be:	d905      	bls.n	800b5cc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5ca:	e0ed      	b.n	800b7a8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	4a58      	ldr	r2, [pc, #352]	; (800b738 <tcp_slowtmr+0x288>)
 800b5d6:	5cd3      	ldrb	r3, [r2, r3]
 800b5d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b5e0:	7c7a      	ldrb	r2, [r7, #17]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d907      	bls.n	800b5f6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b5fc:	7c7a      	ldrb	r2, [r7, #17]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	f200 80d2 	bhi.w	800b7a8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b604:	2301      	movs	r3, #1
 800b606:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d108      	bne.n	800b624 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b614:	f004 fc2a 	bl	800fe6c <tcp_zero_window_probe>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d014      	beq.n	800b648 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b61e:	2300      	movs	r3, #0
 800b620:	623b      	str	r3, [r7, #32]
 800b622:	e011      	b.n	800b648 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b626:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b62a:	4619      	mov	r1, r3
 800b62c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b62e:	f003 faef 	bl	800ec10 <tcp_split_unsent_seg>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d107      	bne.n	800b648 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b63a:	f003 fd6f 	bl	800f11c <tcp_output>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d101      	bne.n	800b648 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b648:	6a3b      	ldr	r3, [r7, #32]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f000 80ac 	beq.w	800b7a8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b652:	2200      	movs	r2, #0
 800b654:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b65e:	2b06      	cmp	r3, #6
 800b660:	f200 80a2 	bhi.w	800b7a8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b666:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b66a:	3301      	adds	r3, #1
 800b66c:	b2da      	uxtb	r2, r3
 800b66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b670:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b674:	e098      	b.n	800b7a8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	db0f      	blt.n	800b6a0 <tcp_slowtmr+0x1f0>
 800b680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b682:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b686:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d008      	beq.n	800b6a0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b690:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b694:	b29b      	uxth	r3, r3
 800b696:	3301      	adds	r3, #1
 800b698:	b29b      	uxth	r3, r3
 800b69a:	b21a      	sxth	r2, r3
 800b69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	db7b      	blt.n	800b7a8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b6b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b6b2:	f004 f825 	bl	800f700 <tcp_rexmit_rto_prepare>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d007      	beq.n	800b6cc <tcp_slowtmr+0x21c>
 800b6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d171      	bne.n	800b7a8 <tcp_slowtmr+0x2f8>
 800b6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d06d      	beq.n	800b7a8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ce:	7d1b      	ldrb	r3, [r3, #20]
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d03a      	beq.n	800b74a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b6da:	2b0c      	cmp	r3, #12
 800b6dc:	bf28      	it	cs
 800b6de:	230c      	movcs	r3, #12
 800b6e0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b6e8:	10db      	asrs	r3, r3, #3
 800b6ea:	b21b      	sxth	r3, r3
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b6f4:	4413      	add	r3, r2
 800b6f6:	7efa      	ldrb	r2, [r7, #27]
 800b6f8:	4910      	ldr	r1, [pc, #64]	; (800b73c <tcp_slowtmr+0x28c>)
 800b6fa:	5c8a      	ldrb	r2, [r1, r2]
 800b6fc:	4093      	lsls	r3, r2
 800b6fe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b706:	4293      	cmp	r3, r2
 800b708:	dc1a      	bgt.n	800b740 <tcp_slowtmr+0x290>
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	b21a      	sxth	r2, r3
 800b70e:	e019      	b.n	800b744 <tcp_slowtmr+0x294>
 800b710:	20008ddc 	.word	0x20008ddc
 800b714:	20008df2 	.word	0x20008df2
 800b718:	20008de8 	.word	0x20008de8
 800b71c:	08015408 	.word	0x08015408
 800b720:	0801574c 	.word	0x0801574c
 800b724:	0801544c 	.word	0x0801544c
 800b728:	08015778 	.word	0x08015778
 800b72c:	080157a4 	.word	0x080157a4
 800b730:	080157d4 	.word	0x080157d4
 800b734:	08015808 	.word	0x08015808
 800b738:	080173dc 	.word	0x080173dc
 800b73c:	080173cc 	.word	0x080173cc
 800b740:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b746:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74c:	2200      	movs	r2, #0
 800b74e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b752:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b758:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b75c:	4293      	cmp	r3, r2
 800b75e:	bf28      	it	cs
 800b760:	4613      	movcs	r3, r2
 800b762:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b764:	8a7b      	ldrh	r3, [r7, #18]
 800b766:	085b      	lsrs	r3, r3, #1
 800b768:	b29a      	uxth	r2, r3
 800b76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b772:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b77a:	005b      	lsls	r3, r3, #1
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	429a      	cmp	r2, r3
 800b780:	d206      	bcs.n	800b790 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	b29a      	uxth	r2, r3
 800b78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b792:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b796:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79c:	2200      	movs	r2, #0
 800b79e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b7a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7a4:	f004 f81c 	bl	800f7e0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7aa:	7d1b      	ldrb	r3, [r3, #20]
 800b7ac:	2b06      	cmp	r3, #6
 800b7ae:	d111      	bne.n	800b7d4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b2:	8b5b      	ldrh	r3, [r3, #26]
 800b7b4:	f003 0310 	and.w	r3, r3, #16
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00b      	beq.n	800b7d4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7bc:	4b9d      	ldr	r3, [pc, #628]	; (800ba34 <tcp_slowtmr+0x584>)
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	6a1b      	ldr	r3, [r3, #32]
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	2b28      	cmp	r3, #40	; 0x28
 800b7c8:	d904      	bls.n	800b7d4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b7ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d6:	7a5b      	ldrb	r3, [r3, #9]
 800b7d8:	f003 0308 	and.w	r3, r3, #8
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d04c      	beq.n	800b87a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b7e4:	2b04      	cmp	r3, #4
 800b7e6:	d003      	beq.n	800b7f0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b7ec:	2b07      	cmp	r3, #7
 800b7ee:	d144      	bne.n	800b87a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7f0:	4b90      	ldr	r3, [pc, #576]	; (800ba34 <tcp_slowtmr+0x584>)
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f6:	6a1b      	ldr	r3, [r3, #32]
 800b7f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b800:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b804:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b808:	498b      	ldr	r1, [pc, #556]	; (800ba38 <tcp_slowtmr+0x588>)
 800b80a:	fba1 1303 	umull	r1, r3, r1, r3
 800b80e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b810:	429a      	cmp	r2, r3
 800b812:	d90a      	bls.n	800b82a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b818:	3301      	adds	r3, #1
 800b81a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b81e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b822:	3301      	adds	r3, #1
 800b824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b828:	e027      	b.n	800b87a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b82a:	4b82      	ldr	r3, [pc, #520]	; (800ba34 <tcp_slowtmr+0x584>)
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b830:	6a1b      	ldr	r3, [r3, #32]
 800b832:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b836:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b840:	4618      	mov	r0, r3
 800b842:	4b7e      	ldr	r3, [pc, #504]	; (800ba3c <tcp_slowtmr+0x58c>)
 800b844:	fb00 f303 	mul.w	r3, r0, r3
 800b848:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b84a:	497b      	ldr	r1, [pc, #492]	; (800ba38 <tcp_slowtmr+0x588>)
 800b84c:	fba1 1303 	umull	r1, r3, r1, r3
 800b850:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b852:	429a      	cmp	r2, r3
 800b854:	d911      	bls.n	800b87a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b858:	f004 fac8 	bl	800fdec <tcp_keepalive>
 800b85c:	4603      	mov	r3, r0
 800b85e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b862:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b866:	2b00      	cmp	r3, #0
 800b868:	d107      	bne.n	800b87a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b870:	3301      	adds	r3, #1
 800b872:	b2da      	uxtb	r2, r3
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d011      	beq.n	800b8a6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b882:	4b6c      	ldr	r3, [pc, #432]	; (800ba34 <tcp_slowtmr+0x584>)
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b888:	6a1b      	ldr	r3, [r3, #32]
 800b88a:	1ad2      	subs	r2, r2, r3
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b892:	4619      	mov	r1, r3
 800b894:	460b      	mov	r3, r1
 800b896:	005b      	lsls	r3, r3, #1
 800b898:	440b      	add	r3, r1
 800b89a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d302      	bcc.n	800b8a6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b8a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8a2:	f000 fddb 	bl	800c45c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a8:	7d1b      	ldrb	r3, [r3, #20]
 800b8aa:	2b03      	cmp	r3, #3
 800b8ac:	d10b      	bne.n	800b8c6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b8ae:	4b61      	ldr	r3, [pc, #388]	; (800ba34 <tcp_slowtmr+0x584>)
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b4:	6a1b      	ldr	r3, [r3, #32]
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	2b28      	cmp	r3, #40	; 0x28
 800b8ba:	d904      	bls.n	800b8c6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c8:	7d1b      	ldrb	r3, [r3, #20]
 800b8ca:	2b09      	cmp	r3, #9
 800b8cc:	d10b      	bne.n	800b8e6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b8ce:	4b59      	ldr	r3, [pc, #356]	; (800ba34 <tcp_slowtmr+0x584>)
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d4:	6a1b      	ldr	r3, [r3, #32]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	2bf0      	cmp	r3, #240	; 0xf0
 800b8da:	d904      	bls.n	800b8e6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b8e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d060      	beq.n	800b9b0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8f4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b8f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8f8:	f000 fbfc 	bl	800c0f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d010      	beq.n	800b924 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b902:	4b4f      	ldr	r3, [pc, #316]	; (800ba40 <tcp_slowtmr+0x590>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b908:	429a      	cmp	r2, r3
 800b90a:	d106      	bne.n	800b91a <tcp_slowtmr+0x46a>
 800b90c:	4b4d      	ldr	r3, [pc, #308]	; (800ba44 <tcp_slowtmr+0x594>)
 800b90e:	f240 526d 	movw	r2, #1389	; 0x56d
 800b912:	494d      	ldr	r1, [pc, #308]	; (800ba48 <tcp_slowtmr+0x598>)
 800b914:	484d      	ldr	r0, [pc, #308]	; (800ba4c <tcp_slowtmr+0x59c>)
 800b916:	f007 fdef 	bl	80134f8 <iprintf>
        prev->next = pcb->next;
 800b91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91c:	68da      	ldr	r2, [r3, #12]
 800b91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b920:	60da      	str	r2, [r3, #12]
 800b922:	e00f      	b.n	800b944 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b924:	4b46      	ldr	r3, [pc, #280]	; (800ba40 <tcp_slowtmr+0x590>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d006      	beq.n	800b93c <tcp_slowtmr+0x48c>
 800b92e:	4b45      	ldr	r3, [pc, #276]	; (800ba44 <tcp_slowtmr+0x594>)
 800b930:	f240 5271 	movw	r2, #1393	; 0x571
 800b934:	4946      	ldr	r1, [pc, #280]	; (800ba50 <tcp_slowtmr+0x5a0>)
 800b936:	4845      	ldr	r0, [pc, #276]	; (800ba4c <tcp_slowtmr+0x59c>)
 800b938:	f007 fdde 	bl	80134f8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	4a3f      	ldr	r2, [pc, #252]	; (800ba40 <tcp_slowtmr+0x590>)
 800b942:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b944:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d013      	beq.n	800b974 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b952:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b954:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b958:	3304      	adds	r3, #4
 800b95a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b95c:	8ad2      	ldrh	r2, [r2, #22]
 800b95e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b960:	8b09      	ldrh	r1, [r1, #24]
 800b962:	9102      	str	r1, [sp, #8]
 800b964:	9201      	str	r2, [sp, #4]
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	462b      	mov	r3, r5
 800b96a:	4622      	mov	r2, r4
 800b96c:	4601      	mov	r1, r0
 800b96e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b970:	f004 f988 	bl	800fc84 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97c:	7d1b      	ldrb	r3, [r3, #20]
 800b97e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b98a:	6838      	ldr	r0, [r7, #0]
 800b98c:	f7ff f9f2 	bl	800ad74 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b990:	4b30      	ldr	r3, [pc, #192]	; (800ba54 <tcp_slowtmr+0x5a4>)
 800b992:	2200      	movs	r2, #0
 800b994:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d004      	beq.n	800b9a6 <tcp_slowtmr+0x4f6>
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f06f 010c 	mvn.w	r1, #12
 800b9a2:	68b8      	ldr	r0, [r7, #8]
 800b9a4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b9a6:	4b2b      	ldr	r3, [pc, #172]	; (800ba54 <tcp_slowtmr+0x5a4>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d037      	beq.n	800ba1e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b9ae:	e590      	b.n	800b4d2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9bc:	7f1b      	ldrb	r3, [r3, #28]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c8:	7f1a      	ldrb	r2, [r3, #28]
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	7f5b      	ldrb	r3, [r3, #29]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d325      	bcc.n	800ba1e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b9d8:	4b1e      	ldr	r3, [pc, #120]	; (800ba54 <tcp_slowtmr+0x5a4>)
 800b9da:	2200      	movs	r2, #0
 800b9dc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00b      	beq.n	800ba00 <tcp_slowtmr+0x550>
 800b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9f0:	6912      	ldr	r2, [r2, #16]
 800b9f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	4798      	blx	r3
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b9fe:	e002      	b.n	800ba06 <tcp_slowtmr+0x556>
 800ba00:	2300      	movs	r3, #0
 800ba02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ba06:	4b13      	ldr	r3, [pc, #76]	; (800ba54 <tcp_slowtmr+0x5a4>)
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d000      	beq.n	800ba10 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ba0e:	e560      	b.n	800b4d2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ba10:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d102      	bne.n	800ba1e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ba18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba1a:	f003 fb7f 	bl	800f11c <tcp_output>
  while (pcb != NULL) {
 800ba1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f47f ad5c 	bne.w	800b4de <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ba26:	2300      	movs	r3, #0
 800ba28:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ba2a:	4b0b      	ldr	r3, [pc, #44]	; (800ba58 <tcp_slowtmr+0x5a8>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ba30:	e067      	b.n	800bb02 <tcp_slowtmr+0x652>
 800ba32:	bf00      	nop
 800ba34:	20008ddc 	.word	0x20008ddc
 800ba38:	10624dd3 	.word	0x10624dd3
 800ba3c:	000124f8 	.word	0x000124f8
 800ba40:	20008de8 	.word	0x20008de8
 800ba44:	08015408 	.word	0x08015408
 800ba48:	08015840 	.word	0x08015840
 800ba4c:	0801544c 	.word	0x0801544c
 800ba50:	0801586c 	.word	0x0801586c
 800ba54:	20008df0 	.word	0x20008df0
 800ba58:	20008dec 	.word	0x20008dec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ba5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5e:	7d1b      	ldrb	r3, [r3, #20]
 800ba60:	2b0a      	cmp	r3, #10
 800ba62:	d006      	beq.n	800ba72 <tcp_slowtmr+0x5c2>
 800ba64:	4b2b      	ldr	r3, [pc, #172]	; (800bb14 <tcp_slowtmr+0x664>)
 800ba66:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ba6a:	492b      	ldr	r1, [pc, #172]	; (800bb18 <tcp_slowtmr+0x668>)
 800ba6c:	482b      	ldr	r0, [pc, #172]	; (800bb1c <tcp_slowtmr+0x66c>)
 800ba6e:	f007 fd43 	bl	80134f8 <iprintf>
    pcb_remove = 0;
 800ba72:	2300      	movs	r3, #0
 800ba74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ba78:	4b29      	ldr	r3, [pc, #164]	; (800bb20 <tcp_slowtmr+0x670>)
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7e:	6a1b      	ldr	r3, [r3, #32]
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	2bf0      	cmp	r3, #240	; 0xf0
 800ba84:	d904      	bls.n	800ba90 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ba86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ba90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d02f      	beq.n	800baf8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ba98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba9a:	f000 fb2b 	bl	800c0f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ba9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d010      	beq.n	800bac6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800baa4:	4b1f      	ldr	r3, [pc, #124]	; (800bb24 <tcp_slowtmr+0x674>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baaa:	429a      	cmp	r2, r3
 800baac:	d106      	bne.n	800babc <tcp_slowtmr+0x60c>
 800baae:	4b19      	ldr	r3, [pc, #100]	; (800bb14 <tcp_slowtmr+0x664>)
 800bab0:	f240 52af 	movw	r2, #1455	; 0x5af
 800bab4:	491c      	ldr	r1, [pc, #112]	; (800bb28 <tcp_slowtmr+0x678>)
 800bab6:	4819      	ldr	r0, [pc, #100]	; (800bb1c <tcp_slowtmr+0x66c>)
 800bab8:	f007 fd1e 	bl	80134f8 <iprintf>
        prev->next = pcb->next;
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	68da      	ldr	r2, [r3, #12]
 800bac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac2:	60da      	str	r2, [r3, #12]
 800bac4:	e00f      	b.n	800bae6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800bac6:	4b17      	ldr	r3, [pc, #92]	; (800bb24 <tcp_slowtmr+0x674>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bacc:	429a      	cmp	r2, r3
 800bace:	d006      	beq.n	800bade <tcp_slowtmr+0x62e>
 800bad0:	4b10      	ldr	r3, [pc, #64]	; (800bb14 <tcp_slowtmr+0x664>)
 800bad2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800bad6:	4915      	ldr	r1, [pc, #84]	; (800bb2c <tcp_slowtmr+0x67c>)
 800bad8:	4810      	ldr	r0, [pc, #64]	; (800bb1c <tcp_slowtmr+0x66c>)
 800bada:	f007 fd0d 	bl	80134f8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800bade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	4a10      	ldr	r2, [pc, #64]	; (800bb24 <tcp_slowtmr+0x674>)
 800bae4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800bae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800baea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800baf0:	69f8      	ldr	r0, [r7, #28]
 800baf2:	f7ff f93f 	bl	800ad74 <tcp_free>
 800baf6:	e004      	b.n	800bb02 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800baf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1a9      	bne.n	800ba5c <tcp_slowtmr+0x5ac>
    }
  }
}
 800bb08:	bf00      	nop
 800bb0a:	bf00      	nop
 800bb0c:	3730      	adds	r7, #48	; 0x30
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bdb0      	pop	{r4, r5, r7, pc}
 800bb12:	bf00      	nop
 800bb14:	08015408 	.word	0x08015408
 800bb18:	08015898 	.word	0x08015898
 800bb1c:	0801544c 	.word	0x0801544c
 800bb20:	20008ddc 	.word	0x20008ddc
 800bb24:	20008dec 	.word	0x20008dec
 800bb28:	080158c8 	.word	0x080158c8
 800bb2c:	080158f0 	.word	0x080158f0

0800bb30 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800bb36:	4b2d      	ldr	r3, [pc, #180]	; (800bbec <tcp_fasttmr+0xbc>)
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	b2da      	uxtb	r2, r3
 800bb3e:	4b2b      	ldr	r3, [pc, #172]	; (800bbec <tcp_fasttmr+0xbc>)
 800bb40:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bb42:	4b2b      	ldr	r3, [pc, #172]	; (800bbf0 <tcp_fasttmr+0xc0>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bb48:	e048      	b.n	800bbdc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	7f9a      	ldrb	r2, [r3, #30]
 800bb4e:	4b27      	ldr	r3, [pc, #156]	; (800bbec <tcp_fasttmr+0xbc>)
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d03f      	beq.n	800bbd6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bb56:	4b25      	ldr	r3, [pc, #148]	; (800bbec <tcp_fasttmr+0xbc>)
 800bb58:	781a      	ldrb	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	8b5b      	ldrh	r3, [r3, #26]
 800bb62:	f003 0301 	and.w	r3, r3, #1
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d010      	beq.n	800bb8c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	8b5b      	ldrh	r3, [r3, #26]
 800bb6e:	f043 0302 	orr.w	r3, r3, #2
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f003 facf 	bl	800f11c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	8b5b      	ldrh	r3, [r3, #26]
 800bb82:	f023 0303 	bic.w	r3, r3, #3
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	8b5b      	ldrh	r3, [r3, #26]
 800bb90:	f003 0308 	and.w	r3, r3, #8
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d009      	beq.n	800bbac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	8b5b      	ldrh	r3, [r3, #26]
 800bb9c:	f023 0308 	bic.w	r3, r3, #8
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7ff fa78 	bl	800b09c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00a      	beq.n	800bbd0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bbba:	4b0e      	ldr	r3, [pc, #56]	; (800bbf4 <tcp_fasttmr+0xc4>)
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f819 	bl	800bbf8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bbc6:	4b0b      	ldr	r3, [pc, #44]	; (800bbf4 <tcp_fasttmr+0xc4>)
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d000      	beq.n	800bbd0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bbce:	e7b8      	b.n	800bb42 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	607b      	str	r3, [r7, #4]
 800bbd4:	e002      	b.n	800bbdc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1b3      	bne.n	800bb4a <tcp_fasttmr+0x1a>
    }
  }
}
 800bbe2:	bf00      	nop
 800bbe4:	bf00      	nop
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	20008df2 	.word	0x20008df2
 800bbf0:	20008de8 	.word	0x20008de8
 800bbf4:	20008df0 	.word	0x20008df0

0800bbf8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bbf8:	b590      	push	{r4, r7, lr}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d109      	bne.n	800bc1a <tcp_process_refused_data+0x22>
 800bc06:	4b37      	ldr	r3, [pc, #220]	; (800bce4 <tcp_process_refused_data+0xec>)
 800bc08:	f240 6209 	movw	r2, #1545	; 0x609
 800bc0c:	4936      	ldr	r1, [pc, #216]	; (800bce8 <tcp_process_refused_data+0xf0>)
 800bc0e:	4837      	ldr	r0, [pc, #220]	; (800bcec <tcp_process_refused_data+0xf4>)
 800bc10:	f007 fc72 	bl	80134f8 <iprintf>
 800bc14:	f06f 030f 	mvn.w	r3, #15
 800bc18:	e060      	b.n	800bcdc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc1e:	7b5b      	ldrb	r3, [r3, #13]
 800bc20:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc26:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00b      	beq.n	800bc50 <tcp_process_refused_data+0x58>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6918      	ldr	r0, [r3, #16]
 800bc42:	2300      	movs	r3, #0
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	6879      	ldr	r1, [r7, #4]
 800bc48:	47a0      	blx	r4
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	73fb      	strb	r3, [r7, #15]
 800bc4e:	e007      	b.n	800bc60 <tcp_process_refused_data+0x68>
 800bc50:	2300      	movs	r3, #0
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	6879      	ldr	r1, [r7, #4]
 800bc56:	2000      	movs	r0, #0
 800bc58:	f000 f8a4 	bl	800bda4 <tcp_recv_null>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bc60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d12a      	bne.n	800bcbe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bc68:	7bbb      	ldrb	r3, [r7, #14]
 800bc6a:	f003 0320 	and.w	r3, r3, #32
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d033      	beq.n	800bcda <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc76:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bc7a:	d005      	beq.n	800bc88 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc80:	3301      	adds	r3, #1
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00b      	beq.n	800bcaa <tcp_process_refused_data+0xb2>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6918      	ldr	r0, [r3, #16]
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	2200      	movs	r2, #0
 800bca0:	6879      	ldr	r1, [r7, #4]
 800bca2:	47a0      	blx	r4
 800bca4:	4603      	mov	r3, r0
 800bca6:	73fb      	strb	r3, [r7, #15]
 800bca8:	e001      	b.n	800bcae <tcp_process_refused_data+0xb6>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bcae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcb2:	f113 0f0d 	cmn.w	r3, #13
 800bcb6:	d110      	bne.n	800bcda <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bcb8:	f06f 030c 	mvn.w	r3, #12
 800bcbc:	e00e      	b.n	800bcdc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bcbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcc2:	f113 0f0d 	cmn.w	r3, #13
 800bcc6:	d102      	bne.n	800bcce <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800bcc8:	f06f 030c 	mvn.w	r3, #12
 800bccc:	e006      	b.n	800bcdc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	68ba      	ldr	r2, [r7, #8]
 800bcd2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bcd4:	f06f 0304 	mvn.w	r3, #4
 800bcd8:	e000      	b.n	800bcdc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd90      	pop	{r4, r7, pc}
 800bce4:	08015408 	.word	0x08015408
 800bce8:	08015918 	.word	0x08015918
 800bcec:	0801544c 	.word	0x0801544c

0800bcf0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800bcf8:	e007      	b.n	800bd0a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 f80a 	bl	800bd1a <tcp_seg_free>
    seg = next;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1f4      	bne.n	800bcfa <tcp_segs_free+0xa>
  }
}
 800bd10:	bf00      	nop
 800bd12:	bf00      	nop
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b082      	sub	sp, #8
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00c      	beq.n	800bd42 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d004      	beq.n	800bd3a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7fe fcdb 	bl	800a6f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800bd3a:	6879      	ldr	r1, [r7, #4]
 800bd3c:	2003      	movs	r0, #3
 800bd3e:	f7fd fec5 	bl	8009acc <memp_free>
  }
}
 800bd42:	bf00      	nop
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
	...

0800bd4c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d106      	bne.n	800bd68 <tcp_seg_copy+0x1c>
 800bd5a:	4b0f      	ldr	r3, [pc, #60]	; (800bd98 <tcp_seg_copy+0x4c>)
 800bd5c:	f240 6282 	movw	r2, #1666	; 0x682
 800bd60:	490e      	ldr	r1, [pc, #56]	; (800bd9c <tcp_seg_copy+0x50>)
 800bd62:	480f      	ldr	r0, [pc, #60]	; (800bda0 <tcp_seg_copy+0x54>)
 800bd64:	f007 fbc8 	bl	80134f8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bd68:	2003      	movs	r0, #3
 800bd6a:	f7fd fe63 	bl	8009a34 <memp_malloc>
 800bd6e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d101      	bne.n	800bd7a <tcp_seg_copy+0x2e>
    return NULL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	e00a      	b.n	800bd90 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800bd7a:	2210      	movs	r2, #16
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f007 fb8a 	bl	8013498 <memcpy>
  pbuf_ref(cseg->p);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fe fd51 	bl	800a830 <pbuf_ref>
  return cseg;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	08015408 	.word	0x08015408
 800bd9c:	0801595c 	.word	0x0801595c
 800bda0:	0801544c 	.word	0x0801544c

0800bda4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
 800bdb0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d109      	bne.n	800bdcc <tcp_recv_null+0x28>
 800bdb8:	4b12      	ldr	r3, [pc, #72]	; (800be04 <tcp_recv_null+0x60>)
 800bdba:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bdbe:	4912      	ldr	r1, [pc, #72]	; (800be08 <tcp_recv_null+0x64>)
 800bdc0:	4812      	ldr	r0, [pc, #72]	; (800be0c <tcp_recv_null+0x68>)
 800bdc2:	f007 fb99 	bl	80134f8 <iprintf>
 800bdc6:	f06f 030f 	mvn.w	r3, #15
 800bdca:	e016      	b.n	800bdfa <tcp_recv_null+0x56>

  if (p != NULL) {
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d009      	beq.n	800bde6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	891b      	ldrh	r3, [r3, #8]
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	68b8      	ldr	r0, [r7, #8]
 800bdda:	f7ff fb19 	bl	800b410 <tcp_recved>
    pbuf_free(p);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7fe fc86 	bl	800a6f0 <pbuf_free>
 800bde4:	e008      	b.n	800bdf8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800bde6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d104      	bne.n	800bdf8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800bdee:	68b8      	ldr	r0, [r7, #8]
 800bdf0:	f7ff f9be 	bl	800b170 <tcp_close>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	e000      	b.n	800bdfa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	08015408 	.word	0x08015408
 800be08:	08015978 	.word	0x08015978
 800be0c:	0801544c 	.word	0x0801544c

0800be10 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
 800be16:	4603      	mov	r3, r0
 800be18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800be1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	db01      	blt.n	800be26 <tcp_kill_prio+0x16>
 800be22:	79fb      	ldrb	r3, [r7, #7]
 800be24:	e000      	b.n	800be28 <tcp_kill_prio+0x18>
 800be26:	237f      	movs	r3, #127	; 0x7f
 800be28:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800be2a:	7afb      	ldrb	r3, [r7, #11]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d034      	beq.n	800be9a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800be30:	7afb      	ldrb	r3, [r7, #11]
 800be32:	3b01      	subs	r3, #1
 800be34:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800be36:	2300      	movs	r3, #0
 800be38:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800be3a:	2300      	movs	r3, #0
 800be3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be3e:	4b19      	ldr	r3, [pc, #100]	; (800bea4 <tcp_kill_prio+0x94>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	e01f      	b.n	800be86 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	7d5b      	ldrb	r3, [r3, #21]
 800be4a:	7afa      	ldrb	r2, [r7, #11]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d80c      	bhi.n	800be6a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800be54:	7afa      	ldrb	r2, [r7, #11]
 800be56:	429a      	cmp	r2, r3
 800be58:	d112      	bne.n	800be80 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800be5a:	4b13      	ldr	r3, [pc, #76]	; (800bea8 <tcp_kill_prio+0x98>)
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	1ad3      	subs	r3, r2, r3
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	429a      	cmp	r2, r3
 800be68:	d80a      	bhi.n	800be80 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800be6a:	4b0f      	ldr	r3, [pc, #60]	; (800bea8 <tcp_kill_prio+0x98>)
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	1ad3      	subs	r3, r2, r3
 800be74:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	7d5b      	ldrb	r3, [r3, #21]
 800be7e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	617b      	str	r3, [r7, #20]
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1dc      	bne.n	800be46 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d004      	beq.n	800be9c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800be92:	6938      	ldr	r0, [r7, #16]
 800be94:	f7ff fa56 	bl	800b344 <tcp_abort>
 800be98:	e000      	b.n	800be9c <tcp_kill_prio+0x8c>
    return;
 800be9a:	bf00      	nop
  }
}
 800be9c:	3718      	adds	r7, #24
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	20008de8 	.word	0x20008de8
 800bea8:	20008ddc 	.word	0x20008ddc

0800beac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b086      	sub	sp, #24
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	4603      	mov	r3, r0
 800beb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800beb6:	79fb      	ldrb	r3, [r7, #7]
 800beb8:	2b08      	cmp	r3, #8
 800beba:	d009      	beq.n	800bed0 <tcp_kill_state+0x24>
 800bebc:	79fb      	ldrb	r3, [r7, #7]
 800bebe:	2b09      	cmp	r3, #9
 800bec0:	d006      	beq.n	800bed0 <tcp_kill_state+0x24>
 800bec2:	4b1a      	ldr	r3, [pc, #104]	; (800bf2c <tcp_kill_state+0x80>)
 800bec4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800bec8:	4919      	ldr	r1, [pc, #100]	; (800bf30 <tcp_kill_state+0x84>)
 800beca:	481a      	ldr	r0, [pc, #104]	; (800bf34 <tcp_kill_state+0x88>)
 800becc:	f007 fb14 	bl	80134f8 <iprintf>

  inactivity = 0;
 800bed0:	2300      	movs	r3, #0
 800bed2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bed4:	2300      	movs	r3, #0
 800bed6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bed8:	4b17      	ldr	r3, [pc, #92]	; (800bf38 <tcp_kill_state+0x8c>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	617b      	str	r3, [r7, #20]
 800bede:	e017      	b.n	800bf10 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	7d1b      	ldrb	r3, [r3, #20]
 800bee4:	79fa      	ldrb	r2, [r7, #7]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d10f      	bne.n	800bf0a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800beea:	4b14      	ldr	r3, [pc, #80]	; (800bf3c <tcp_kill_state+0x90>)
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	6a1b      	ldr	r3, [r3, #32]
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d807      	bhi.n	800bf0a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800befa:	4b10      	ldr	r3, [pc, #64]	; (800bf3c <tcp_kill_state+0x90>)
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	617b      	str	r3, [r7, #20]
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1e4      	bne.n	800bee0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d003      	beq.n	800bf24 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	6938      	ldr	r0, [r7, #16]
 800bf20:	f7ff f952 	bl	800b1c8 <tcp_abandon>
  }
}
 800bf24:	bf00      	nop
 800bf26:	3718      	adds	r7, #24
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	08015408 	.word	0x08015408
 800bf30:	08015994 	.word	0x08015994
 800bf34:	0801544c 	.word	0x0801544c
 800bf38:	20008de8 	.word	0x20008de8
 800bf3c:	20008ddc 	.word	0x20008ddc

0800bf40 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bf46:	2300      	movs	r3, #0
 800bf48:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf4e:	4b12      	ldr	r3, [pc, #72]	; (800bf98 <tcp_kill_timewait+0x58>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	e012      	b.n	800bf7c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bf56:	4b11      	ldr	r3, [pc, #68]	; (800bf9c <tcp_kill_timewait+0x5c>)
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	1ad3      	subs	r3, r2, r3
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d807      	bhi.n	800bf76 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bf66:	4b0d      	ldr	r3, [pc, #52]	; (800bf9c <tcp_kill_timewait+0x5c>)
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	6a1b      	ldr	r3, [r3, #32]
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1e9      	bne.n	800bf56 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d002      	beq.n	800bf8e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bf88:	68b8      	ldr	r0, [r7, #8]
 800bf8a:	f7ff f9db 	bl	800b344 <tcp_abort>
  }
}
 800bf8e:	bf00      	nop
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	20008dec 	.word	0x20008dec
 800bf9c:	20008ddc 	.word	0x20008ddc

0800bfa0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bfa6:	4b10      	ldr	r3, [pc, #64]	; (800bfe8 <tcp_handle_closepend+0x48>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bfac:	e014      	b.n	800bfd8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	68db      	ldr	r3, [r3, #12]
 800bfb2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	8b5b      	ldrh	r3, [r3, #26]
 800bfb8:	f003 0308 	and.w	r3, r3, #8
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d009      	beq.n	800bfd4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	8b5b      	ldrh	r3, [r3, #26]
 800bfc4:	f023 0308 	bic.w	r3, r3, #8
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7ff f864 	bl	800b09c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1e7      	bne.n	800bfae <tcp_handle_closepend+0xe>
  }
}
 800bfde:	bf00      	nop
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	20008de8 	.word	0x20008de8

0800bfec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	4603      	mov	r3, r0
 800bff4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bff6:	2001      	movs	r0, #1
 800bff8:	f7fd fd1c 	bl	8009a34 <memp_malloc>
 800bffc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d126      	bne.n	800c052 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c004:	f7ff ffcc 	bl	800bfa0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c008:	f7ff ff9a 	bl	800bf40 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c00c:	2001      	movs	r0, #1
 800c00e:	f7fd fd11 	bl	8009a34 <memp_malloc>
 800c012:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d11b      	bne.n	800c052 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c01a:	2009      	movs	r0, #9
 800c01c:	f7ff ff46 	bl	800beac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c020:	2001      	movs	r0, #1
 800c022:	f7fd fd07 	bl	8009a34 <memp_malloc>
 800c026:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d111      	bne.n	800c052 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c02e:	2008      	movs	r0, #8
 800c030:	f7ff ff3c 	bl	800beac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c034:	2001      	movs	r0, #1
 800c036:	f7fd fcfd 	bl	8009a34 <memp_malloc>
 800c03a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d107      	bne.n	800c052 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c042:	79fb      	ldrb	r3, [r7, #7]
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff fee3 	bl	800be10 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c04a:	2001      	movs	r0, #1
 800c04c:	f7fd fcf2 	bl	8009a34 <memp_malloc>
 800c050:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d03f      	beq.n	800c0d8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c058:	229c      	movs	r2, #156	; 0x9c
 800c05a:	2100      	movs	r1, #0
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f007 fa43 	bl	80134e8 <memset>
    pcb->prio = prio;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	79fa      	ldrb	r2, [r7, #7]
 800c066:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c06e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c078:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	22ff      	movs	r2, #255	; 0xff
 800c086:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c08e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2206      	movs	r2, #6
 800c094:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2206      	movs	r2, #6
 800c09c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0a4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c0ae:	4b0d      	ldr	r3, [pc, #52]	; (800c0e4 <tcp_alloc+0xf8>)
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c0b6:	4b0c      	ldr	r3, [pc, #48]	; (800c0e8 <tcp_alloc+0xfc>)
 800c0b8:	781a      	ldrb	r2, [r3, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c0c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	4a08      	ldr	r2, [pc, #32]	; (800c0ec <tcp_alloc+0x100>)
 800c0cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	4a07      	ldr	r2, [pc, #28]	; (800c0f0 <tcp_alloc+0x104>)
 800c0d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	20008ddc 	.word	0x20008ddc
 800c0e8:	20008df2 	.word	0x20008df2
 800c0ec:	0800bda5 	.word	0x0800bda5
 800c0f0:	006ddd00 	.word	0x006ddd00

0800c0f4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d107      	bne.n	800c112 <tcp_pcb_purge+0x1e>
 800c102:	4b21      	ldr	r3, [pc, #132]	; (800c188 <tcp_pcb_purge+0x94>)
 800c104:	f640 0251 	movw	r2, #2129	; 0x851
 800c108:	4920      	ldr	r1, [pc, #128]	; (800c18c <tcp_pcb_purge+0x98>)
 800c10a:	4821      	ldr	r0, [pc, #132]	; (800c190 <tcp_pcb_purge+0x9c>)
 800c10c:	f007 f9f4 	bl	80134f8 <iprintf>
 800c110:	e037      	b.n	800c182 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	7d1b      	ldrb	r3, [r3, #20]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d033      	beq.n	800c182 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c11e:	2b0a      	cmp	r3, #10
 800c120:	d02f      	beq.n	800c182 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c126:	2b01      	cmp	r3, #1
 800c128:	d02b      	beq.n	800c182 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d007      	beq.n	800c142 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe fada 	bl	800a6f0 <pbuf_free>
      pcb->refused_data = NULL;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c146:	2b00      	cmp	r3, #0
 800c148:	d002      	beq.n	800c150 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f986 	bl	800c45c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c156:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7ff fdc7 	bl	800bcf0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c166:	4618      	mov	r0, r3
 800c168:	f7ff fdc2 	bl	800bcf0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	66da      	str	r2, [r3, #108]	; 0x6c
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	08015408 	.word	0x08015408
 800c18c:	08015a54 	.word	0x08015a54
 800c190:	0801544c 	.word	0x0801544c

0800c194 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d106      	bne.n	800c1b2 <tcp_pcb_remove+0x1e>
 800c1a4:	4b3e      	ldr	r3, [pc, #248]	; (800c2a0 <tcp_pcb_remove+0x10c>)
 800c1a6:	f640 0283 	movw	r2, #2179	; 0x883
 800c1aa:	493e      	ldr	r1, [pc, #248]	; (800c2a4 <tcp_pcb_remove+0x110>)
 800c1ac:	483e      	ldr	r0, [pc, #248]	; (800c2a8 <tcp_pcb_remove+0x114>)
 800c1ae:	f007 f9a3 	bl	80134f8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d106      	bne.n	800c1c6 <tcp_pcb_remove+0x32>
 800c1b8:	4b39      	ldr	r3, [pc, #228]	; (800c2a0 <tcp_pcb_remove+0x10c>)
 800c1ba:	f640 0284 	movw	r2, #2180	; 0x884
 800c1be:	493b      	ldr	r1, [pc, #236]	; (800c2ac <tcp_pcb_remove+0x118>)
 800c1c0:	4839      	ldr	r0, [pc, #228]	; (800c2a8 <tcp_pcb_remove+0x114>)
 800c1c2:	f007 f999 	bl	80134f8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d105      	bne.n	800c1dc <tcp_pcb_remove+0x48>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68da      	ldr	r2, [r3, #12]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	601a      	str	r2, [r3, #0]
 800c1da:	e013      	b.n	800c204 <tcp_pcb_remove+0x70>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	60fb      	str	r3, [r7, #12]
 800c1e2:	e00c      	b.n	800c1fe <tcp_pcb_remove+0x6a>
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	683a      	ldr	r2, [r7, #0]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d104      	bne.n	800c1f8 <tcp_pcb_remove+0x64>
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	68da      	ldr	r2, [r3, #12]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	60da      	str	r2, [r3, #12]
 800c1f6:	e005      	b.n	800c204 <tcp_pcb_remove+0x70>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1ef      	bne.n	800c1e4 <tcp_pcb_remove+0x50>
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2200      	movs	r2, #0
 800c208:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c20a:	6838      	ldr	r0, [r7, #0]
 800c20c:	f7ff ff72 	bl	800c0f4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	7d1b      	ldrb	r3, [r3, #20]
 800c214:	2b0a      	cmp	r3, #10
 800c216:	d013      	beq.n	800c240 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d00f      	beq.n	800c240 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	8b5b      	ldrh	r3, [r3, #26]
 800c224:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d009      	beq.n	800c240 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	8b5b      	ldrh	r3, [r3, #26]
 800c230:	f043 0302 	orr.w	r3, r3, #2
 800c234:	b29a      	uxth	r2, r3
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c23a:	6838      	ldr	r0, [r7, #0]
 800c23c:	f002 ff6e 	bl	800f11c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	7d1b      	ldrb	r3, [r3, #20]
 800c244:	2b01      	cmp	r3, #1
 800c246:	d020      	beq.n	800c28a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d006      	beq.n	800c25e <tcp_pcb_remove+0xca>
 800c250:	4b13      	ldr	r3, [pc, #76]	; (800c2a0 <tcp_pcb_remove+0x10c>)
 800c252:	f640 0293 	movw	r2, #2195	; 0x893
 800c256:	4916      	ldr	r1, [pc, #88]	; (800c2b0 <tcp_pcb_remove+0x11c>)
 800c258:	4813      	ldr	r0, [pc, #76]	; (800c2a8 <tcp_pcb_remove+0x114>)
 800c25a:	f007 f94d 	bl	80134f8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c262:	2b00      	cmp	r3, #0
 800c264:	d006      	beq.n	800c274 <tcp_pcb_remove+0xe0>
 800c266:	4b0e      	ldr	r3, [pc, #56]	; (800c2a0 <tcp_pcb_remove+0x10c>)
 800c268:	f640 0294 	movw	r2, #2196	; 0x894
 800c26c:	4911      	ldr	r1, [pc, #68]	; (800c2b4 <tcp_pcb_remove+0x120>)
 800c26e:	480e      	ldr	r0, [pc, #56]	; (800c2a8 <tcp_pcb_remove+0x114>)
 800c270:	f007 f942 	bl	80134f8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d006      	beq.n	800c28a <tcp_pcb_remove+0xf6>
 800c27c:	4b08      	ldr	r3, [pc, #32]	; (800c2a0 <tcp_pcb_remove+0x10c>)
 800c27e:	f640 0296 	movw	r2, #2198	; 0x896
 800c282:	490d      	ldr	r1, [pc, #52]	; (800c2b8 <tcp_pcb_remove+0x124>)
 800c284:	4808      	ldr	r0, [pc, #32]	; (800c2a8 <tcp_pcb_remove+0x114>)
 800c286:	f007 f937 	bl	80134f8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	2200      	movs	r2, #0
 800c28e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	2200      	movs	r2, #0
 800c294:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c296:	bf00      	nop
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	08015408 	.word	0x08015408
 800c2a4:	08015a70 	.word	0x08015a70
 800c2a8:	0801544c 	.word	0x0801544c
 800c2ac:	08015a8c 	.word	0x08015a8c
 800c2b0:	08015aac 	.word	0x08015aac
 800c2b4:	08015ac4 	.word	0x08015ac4
 800c2b8:	08015ae0 	.word	0x08015ae0

0800c2bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d106      	bne.n	800c2d8 <tcp_next_iss+0x1c>
 800c2ca:	4b0a      	ldr	r3, [pc, #40]	; (800c2f4 <tcp_next_iss+0x38>)
 800c2cc:	f640 02af 	movw	r2, #2223	; 0x8af
 800c2d0:	4909      	ldr	r1, [pc, #36]	; (800c2f8 <tcp_next_iss+0x3c>)
 800c2d2:	480a      	ldr	r0, [pc, #40]	; (800c2fc <tcp_next_iss+0x40>)
 800c2d4:	f007 f910 	bl	80134f8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c2d8:	4b09      	ldr	r3, [pc, #36]	; (800c300 <tcp_next_iss+0x44>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	4b09      	ldr	r3, [pc, #36]	; (800c304 <tcp_next_iss+0x48>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	4a07      	ldr	r2, [pc, #28]	; (800c300 <tcp_next_iss+0x44>)
 800c2e4:	6013      	str	r3, [r2, #0]
  return iss;
 800c2e6:	4b06      	ldr	r3, [pc, #24]	; (800c300 <tcp_next_iss+0x44>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	08015408 	.word	0x08015408
 800c2f8:	08015af8 	.word	0x08015af8
 800c2fc:	0801544c 	.word	0x0801544c
 800c300:	20000020 	.word	0x20000020
 800c304:	20008ddc 	.word	0x20008ddc

0800c308 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b086      	sub	sp, #24
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	4603      	mov	r3, r0
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
 800c314:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d106      	bne.n	800c32a <tcp_eff_send_mss_netif+0x22>
 800c31c:	4b14      	ldr	r3, [pc, #80]	; (800c370 <tcp_eff_send_mss_netif+0x68>)
 800c31e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c322:	4914      	ldr	r1, [pc, #80]	; (800c374 <tcp_eff_send_mss_netif+0x6c>)
 800c324:	4814      	ldr	r0, [pc, #80]	; (800c378 <tcp_eff_send_mss_netif+0x70>)
 800c326:	f007 f8e7 	bl	80134f8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d101      	bne.n	800c334 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c330:	89fb      	ldrh	r3, [r7, #14]
 800c332:	e019      	b.n	800c368 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c338:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c33a:	8afb      	ldrh	r3, [r7, #22]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d012      	beq.n	800c366 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c340:	2328      	movs	r3, #40	; 0x28
 800c342:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c344:	8afa      	ldrh	r2, [r7, #22]
 800c346:	8abb      	ldrh	r3, [r7, #20]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d904      	bls.n	800c356 <tcp_eff_send_mss_netif+0x4e>
 800c34c:	8afa      	ldrh	r2, [r7, #22]
 800c34e:	8abb      	ldrh	r3, [r7, #20]
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	b29b      	uxth	r3, r3
 800c354:	e000      	b.n	800c358 <tcp_eff_send_mss_netif+0x50>
 800c356:	2300      	movs	r3, #0
 800c358:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c35a:	8a7a      	ldrh	r2, [r7, #18]
 800c35c:	89fb      	ldrh	r3, [r7, #14]
 800c35e:	4293      	cmp	r3, r2
 800c360:	bf28      	it	cs
 800c362:	4613      	movcs	r3, r2
 800c364:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c366:	89fb      	ldrh	r3, [r7, #14]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3718      	adds	r7, #24
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	08015408 	.word	0x08015408
 800c374:	08015b14 	.word	0x08015b14
 800c378:	0801544c 	.word	0x0801544c

0800c37c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d119      	bne.n	800c3c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c390:	4b10      	ldr	r3, [pc, #64]	; (800c3d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c392:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c396:	4910      	ldr	r1, [pc, #64]	; (800c3d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c398:	4810      	ldr	r0, [pc, #64]	; (800c3dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c39a:	f007 f8ad 	bl	80134f8 <iprintf>

  while (pcb != NULL) {
 800c39e:	e011      	b.n	800c3c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d108      	bne.n	800c3be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f7fe ffc6 	bl	800b344 <tcp_abort>
      pcb = next;
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	60fb      	str	r3, [r7, #12]
 800c3bc:	e002      	b.n	800c3c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1ea      	bne.n	800c3a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c3ca:	bf00      	nop
 800c3cc:	bf00      	nop
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	08015408 	.word	0x08015408
 800c3d8:	08015b3c 	.word	0x08015b3c
 800c3dc:	0801544c 	.word	0x0801544c

0800c3e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d02a      	beq.n	800c446 <tcp_netif_ip_addr_changed+0x66>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d026      	beq.n	800c446 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c3f8:	4b15      	ldr	r3, [pc, #84]	; (800c450 <tcp_netif_ip_addr_changed+0x70>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff ffbc 	bl	800c37c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c404:	4b13      	ldr	r3, [pc, #76]	; (800c454 <tcp_netif_ip_addr_changed+0x74>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4619      	mov	r1, r3
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f7ff ffb6 	bl	800c37c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d017      	beq.n	800c446 <tcp_netif_ip_addr_changed+0x66>
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d013      	beq.n	800c446 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c41e:	4b0e      	ldr	r3, [pc, #56]	; (800c458 <tcp_netif_ip_addr_changed+0x78>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	e00c      	b.n	800c440 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d103      	bne.n	800c43a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	60fb      	str	r3, [r7, #12]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1ef      	bne.n	800c426 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c446:	bf00      	nop
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	20008de8 	.word	0x20008de8
 800c454:	20008de0 	.word	0x20008de0
 800c458:	20008de4 	.word	0x20008de4

0800c45c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d007      	beq.n	800c47c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c470:	4618      	mov	r0, r3
 800c472:	f7ff fc3d 	bl	800bcf0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c47c:	bf00      	nop
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c484:	b590      	push	{r4, r7, lr}
 800c486:	b08d      	sub	sp, #52	; 0x34
 800c488:	af04      	add	r7, sp, #16
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d105      	bne.n	800c4a0 <tcp_input+0x1c>
 800c494:	4b9b      	ldr	r3, [pc, #620]	; (800c704 <tcp_input+0x280>)
 800c496:	2283      	movs	r2, #131	; 0x83
 800c498:	499b      	ldr	r1, [pc, #620]	; (800c708 <tcp_input+0x284>)
 800c49a:	489c      	ldr	r0, [pc, #624]	; (800c70c <tcp_input+0x288>)
 800c49c:	f007 f82c 	bl	80134f8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	4a9a      	ldr	r2, [pc, #616]	; (800c710 <tcp_input+0x28c>)
 800c4a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	895b      	ldrh	r3, [r3, #10]
 800c4ac:	2b13      	cmp	r3, #19
 800c4ae:	f240 83d1 	bls.w	800cc54 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c4b2:	4b98      	ldr	r3, [pc, #608]	; (800c714 <tcp_input+0x290>)
 800c4b4:	695b      	ldr	r3, [r3, #20]
 800c4b6:	4a97      	ldr	r2, [pc, #604]	; (800c714 <tcp_input+0x290>)
 800c4b8:	6812      	ldr	r2, [r2, #0]
 800c4ba:	4611      	mov	r1, r2
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f005 ffd1 	bl	8012464 <ip4_addr_isbroadcast_u32>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f040 83c7 	bne.w	800cc58 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c4ca:	4b92      	ldr	r3, [pc, #584]	; (800c714 <tcp_input+0x290>)
 800c4cc:	695b      	ldr	r3, [r3, #20]
 800c4ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c4d2:	2be0      	cmp	r3, #224	; 0xe0
 800c4d4:	f000 83c0 	beq.w	800cc58 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c4d8:	4b8d      	ldr	r3, [pc, #564]	; (800c710 <tcp_input+0x28c>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	899b      	ldrh	r3, [r3, #12]
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7fc fe51 	bl	8009188 <lwip_htons>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	0b1b      	lsrs	r3, r3, #12
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c4f2:	7cbb      	ldrb	r3, [r7, #18]
 800c4f4:	2b13      	cmp	r3, #19
 800c4f6:	f240 83b1 	bls.w	800cc5c <tcp_input+0x7d8>
 800c4fa:	7cbb      	ldrb	r3, [r7, #18]
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	891b      	ldrh	r3, [r3, #8]
 800c502:	429a      	cmp	r2, r3
 800c504:	f200 83aa 	bhi.w	800cc5c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c508:	7cbb      	ldrb	r3, [r7, #18]
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	3b14      	subs	r3, #20
 800c50e:	b29a      	uxth	r2, r3
 800c510:	4b81      	ldr	r3, [pc, #516]	; (800c718 <tcp_input+0x294>)
 800c512:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c514:	4b81      	ldr	r3, [pc, #516]	; (800c71c <tcp_input+0x298>)
 800c516:	2200      	movs	r2, #0
 800c518:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	895a      	ldrh	r2, [r3, #10]
 800c51e:	7cbb      	ldrb	r3, [r7, #18]
 800c520:	b29b      	uxth	r3, r3
 800c522:	429a      	cmp	r2, r3
 800c524:	d309      	bcc.n	800c53a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c526:	4b7c      	ldr	r3, [pc, #496]	; (800c718 <tcp_input+0x294>)
 800c528:	881a      	ldrh	r2, [r3, #0]
 800c52a:	4b7d      	ldr	r3, [pc, #500]	; (800c720 <tcp_input+0x29c>)
 800c52c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c52e:	7cbb      	ldrb	r3, [r7, #18]
 800c530:	4619      	mov	r1, r3
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7fe f856 	bl	800a5e4 <pbuf_remove_header>
 800c538:	e04e      	b.n	800c5d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d105      	bne.n	800c54e <tcp_input+0xca>
 800c542:	4b70      	ldr	r3, [pc, #448]	; (800c704 <tcp_input+0x280>)
 800c544:	22c2      	movs	r2, #194	; 0xc2
 800c546:	4977      	ldr	r1, [pc, #476]	; (800c724 <tcp_input+0x2a0>)
 800c548:	4870      	ldr	r0, [pc, #448]	; (800c70c <tcp_input+0x288>)
 800c54a:	f006 ffd5 	bl	80134f8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c54e:	2114      	movs	r1, #20
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7fe f847 	bl	800a5e4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	895a      	ldrh	r2, [r3, #10]
 800c55a:	4b71      	ldr	r3, [pc, #452]	; (800c720 <tcp_input+0x29c>)
 800c55c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c55e:	4b6e      	ldr	r3, [pc, #440]	; (800c718 <tcp_input+0x294>)
 800c560:	881a      	ldrh	r2, [r3, #0]
 800c562:	4b6f      	ldr	r3, [pc, #444]	; (800c720 <tcp_input+0x29c>)
 800c564:	881b      	ldrh	r3, [r3, #0]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c56a:	4b6d      	ldr	r3, [pc, #436]	; (800c720 <tcp_input+0x29c>)
 800c56c:	881b      	ldrh	r3, [r3, #0]
 800c56e:	4619      	mov	r1, r3
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7fe f837 	bl	800a5e4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	895b      	ldrh	r3, [r3, #10]
 800c57c:	8a3a      	ldrh	r2, [r7, #16]
 800c57e:	429a      	cmp	r2, r3
 800c580:	f200 836e 	bhi.w	800cc60 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	4a64      	ldr	r2, [pc, #400]	; (800c71c <tcp_input+0x298>)
 800c58c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	8a3a      	ldrh	r2, [r7, #16]
 800c594:	4611      	mov	r1, r2
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe f824 	bl	800a5e4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	891a      	ldrh	r2, [r3, #8]
 800c5a0:	8a3b      	ldrh	r3, [r7, #16]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	895b      	ldrh	r3, [r3, #10]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d005      	beq.n	800c5be <tcp_input+0x13a>
 800c5b2:	4b54      	ldr	r3, [pc, #336]	; (800c704 <tcp_input+0x280>)
 800c5b4:	22df      	movs	r2, #223	; 0xdf
 800c5b6:	495c      	ldr	r1, [pc, #368]	; (800c728 <tcp_input+0x2a4>)
 800c5b8:	4854      	ldr	r0, [pc, #336]	; (800c70c <tcp_input+0x288>)
 800c5ba:	f006 ff9d 	bl	80134f8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	891a      	ldrh	r2, [r3, #8]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	891b      	ldrh	r3, [r3, #8]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d005      	beq.n	800c5d8 <tcp_input+0x154>
 800c5cc:	4b4d      	ldr	r3, [pc, #308]	; (800c704 <tcp_input+0x280>)
 800c5ce:	22e0      	movs	r2, #224	; 0xe0
 800c5d0:	4956      	ldr	r1, [pc, #344]	; (800c72c <tcp_input+0x2a8>)
 800c5d2:	484e      	ldr	r0, [pc, #312]	; (800c70c <tcp_input+0x288>)
 800c5d4:	f006 ff90 	bl	80134f8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c5d8:	4b4d      	ldr	r3, [pc, #308]	; (800c710 <tcp_input+0x28c>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	881b      	ldrh	r3, [r3, #0]
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	4a4b      	ldr	r2, [pc, #300]	; (800c710 <tcp_input+0x28c>)
 800c5e2:	6814      	ldr	r4, [r2, #0]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fc fdcf 	bl	8009188 <lwip_htons>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c5ee:	4b48      	ldr	r3, [pc, #288]	; (800c710 <tcp_input+0x28c>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	885b      	ldrh	r3, [r3, #2]
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	4a46      	ldr	r2, [pc, #280]	; (800c710 <tcp_input+0x28c>)
 800c5f8:	6814      	ldr	r4, [r2, #0]
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fc fdc4 	bl	8009188 <lwip_htons>
 800c600:	4603      	mov	r3, r0
 800c602:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c604:	4b42      	ldr	r3, [pc, #264]	; (800c710 <tcp_input+0x28c>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	4a41      	ldr	r2, [pc, #260]	; (800c710 <tcp_input+0x28c>)
 800c60c:	6814      	ldr	r4, [r2, #0]
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fc fdcf 	bl	80091b2 <lwip_htonl>
 800c614:	4603      	mov	r3, r0
 800c616:	6063      	str	r3, [r4, #4]
 800c618:	6863      	ldr	r3, [r4, #4]
 800c61a:	4a45      	ldr	r2, [pc, #276]	; (800c730 <tcp_input+0x2ac>)
 800c61c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c61e:	4b3c      	ldr	r3, [pc, #240]	; (800c710 <tcp_input+0x28c>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	4a3a      	ldr	r2, [pc, #232]	; (800c710 <tcp_input+0x28c>)
 800c626:	6814      	ldr	r4, [r2, #0]
 800c628:	4618      	mov	r0, r3
 800c62a:	f7fc fdc2 	bl	80091b2 <lwip_htonl>
 800c62e:	4603      	mov	r3, r0
 800c630:	60a3      	str	r3, [r4, #8]
 800c632:	68a3      	ldr	r3, [r4, #8]
 800c634:	4a3f      	ldr	r2, [pc, #252]	; (800c734 <tcp_input+0x2b0>)
 800c636:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c638:	4b35      	ldr	r3, [pc, #212]	; (800c710 <tcp_input+0x28c>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	89db      	ldrh	r3, [r3, #14]
 800c63e:	b29b      	uxth	r3, r3
 800c640:	4a33      	ldr	r2, [pc, #204]	; (800c710 <tcp_input+0x28c>)
 800c642:	6814      	ldr	r4, [r2, #0]
 800c644:	4618      	mov	r0, r3
 800c646:	f7fc fd9f 	bl	8009188 <lwip_htons>
 800c64a:	4603      	mov	r3, r0
 800c64c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c64e:	4b30      	ldr	r3, [pc, #192]	; (800c710 <tcp_input+0x28c>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	899b      	ldrh	r3, [r3, #12]
 800c654:	b29b      	uxth	r3, r3
 800c656:	4618      	mov	r0, r3
 800c658:	f7fc fd96 	bl	8009188 <lwip_htons>
 800c65c:	4603      	mov	r3, r0
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c664:	b2da      	uxtb	r2, r3
 800c666:	4b34      	ldr	r3, [pc, #208]	; (800c738 <tcp_input+0x2b4>)
 800c668:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	891a      	ldrh	r2, [r3, #8]
 800c66e:	4b33      	ldr	r3, [pc, #204]	; (800c73c <tcp_input+0x2b8>)
 800c670:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c672:	4b31      	ldr	r3, [pc, #196]	; (800c738 <tcp_input+0x2b4>)
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	f003 0303 	and.w	r3, r3, #3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00c      	beq.n	800c698 <tcp_input+0x214>
    tcplen++;
 800c67e:	4b2f      	ldr	r3, [pc, #188]	; (800c73c <tcp_input+0x2b8>)
 800c680:	881b      	ldrh	r3, [r3, #0]
 800c682:	3301      	adds	r3, #1
 800c684:	b29a      	uxth	r2, r3
 800c686:	4b2d      	ldr	r3, [pc, #180]	; (800c73c <tcp_input+0x2b8>)
 800c688:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	891a      	ldrh	r2, [r3, #8]
 800c68e:	4b2b      	ldr	r3, [pc, #172]	; (800c73c <tcp_input+0x2b8>)
 800c690:	881b      	ldrh	r3, [r3, #0]
 800c692:	429a      	cmp	r2, r3
 800c694:	f200 82e6 	bhi.w	800cc64 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c698:	2300      	movs	r3, #0
 800c69a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c69c:	4b28      	ldr	r3, [pc, #160]	; (800c740 <tcp_input+0x2bc>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	61fb      	str	r3, [r7, #28]
 800c6a2:	e09d      	b.n	800c7e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	7d1b      	ldrb	r3, [r3, #20]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d105      	bne.n	800c6b8 <tcp_input+0x234>
 800c6ac:	4b15      	ldr	r3, [pc, #84]	; (800c704 <tcp_input+0x280>)
 800c6ae:	22fb      	movs	r2, #251	; 0xfb
 800c6b0:	4924      	ldr	r1, [pc, #144]	; (800c744 <tcp_input+0x2c0>)
 800c6b2:	4816      	ldr	r0, [pc, #88]	; (800c70c <tcp_input+0x288>)
 800c6b4:	f006 ff20 	bl	80134f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	7d1b      	ldrb	r3, [r3, #20]
 800c6bc:	2b0a      	cmp	r3, #10
 800c6be:	d105      	bne.n	800c6cc <tcp_input+0x248>
 800c6c0:	4b10      	ldr	r3, [pc, #64]	; (800c704 <tcp_input+0x280>)
 800c6c2:	22fc      	movs	r2, #252	; 0xfc
 800c6c4:	4920      	ldr	r1, [pc, #128]	; (800c748 <tcp_input+0x2c4>)
 800c6c6:	4811      	ldr	r0, [pc, #68]	; (800c70c <tcp_input+0x288>)
 800c6c8:	f006 ff16 	bl	80134f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	7d1b      	ldrb	r3, [r3, #20]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d105      	bne.n	800c6e0 <tcp_input+0x25c>
 800c6d4:	4b0b      	ldr	r3, [pc, #44]	; (800c704 <tcp_input+0x280>)
 800c6d6:	22fd      	movs	r2, #253	; 0xfd
 800c6d8:	491c      	ldr	r1, [pc, #112]	; (800c74c <tcp_input+0x2c8>)
 800c6da:	480c      	ldr	r0, [pc, #48]	; (800c70c <tcp_input+0x288>)
 800c6dc:	f006 ff0c 	bl	80134f8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	7a1b      	ldrb	r3, [r3, #8]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d033      	beq.n	800c750 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	7a1a      	ldrb	r2, [r3, #8]
 800c6ec:	4b09      	ldr	r3, [pc, #36]	; (800c714 <tcp_input+0x290>)
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d029      	beq.n	800c750 <tcp_input+0x2cc>
      prev = pcb;
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	61bb      	str	r3, [r7, #24]
      continue;
 800c700:	e06b      	b.n	800c7da <tcp_input+0x356>
 800c702:	bf00      	nop
 800c704:	08015b70 	.word	0x08015b70
 800c708:	08015ba4 	.word	0x08015ba4
 800c70c:	08015bbc 	.word	0x08015bbc
 800c710:	20008e04 	.word	0x20008e04
 800c714:	200036ac 	.word	0x200036ac
 800c718:	20008e08 	.word	0x20008e08
 800c71c:	20008e0c 	.word	0x20008e0c
 800c720:	20008e0a 	.word	0x20008e0a
 800c724:	08015be4 	.word	0x08015be4
 800c728:	08015bf4 	.word	0x08015bf4
 800c72c:	08015c00 	.word	0x08015c00
 800c730:	20008e14 	.word	0x20008e14
 800c734:	20008e18 	.word	0x20008e18
 800c738:	20008e20 	.word	0x20008e20
 800c73c:	20008e1e 	.word	0x20008e1e
 800c740:	20008de8 	.word	0x20008de8
 800c744:	08015c20 	.word	0x08015c20
 800c748:	08015c48 	.word	0x08015c48
 800c74c:	08015c74 	.word	0x08015c74
    }

    if (pcb->remote_port == tcphdr->src &&
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	8b1a      	ldrh	r2, [r3, #24]
 800c754:	4b72      	ldr	r3, [pc, #456]	; (800c920 <tcp_input+0x49c>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	881b      	ldrh	r3, [r3, #0]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d13a      	bne.n	800c7d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	8ada      	ldrh	r2, [r3, #22]
 800c764:	4b6e      	ldr	r3, [pc, #440]	; (800c920 <tcp_input+0x49c>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	885b      	ldrh	r3, [r3, #2]
 800c76a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d132      	bne.n	800c7d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	4b6b      	ldr	r3, [pc, #428]	; (800c924 <tcp_input+0x4a0>)
 800c776:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c778:	429a      	cmp	r2, r3
 800c77a:	d12c      	bne.n	800c7d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	4b68      	ldr	r3, [pc, #416]	; (800c924 <tcp_input+0x4a0>)
 800c782:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c784:	429a      	cmp	r2, r3
 800c786:	d126      	bne.n	800c7d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	69fa      	ldr	r2, [r7, #28]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d106      	bne.n	800c7a0 <tcp_input+0x31c>
 800c792:	4b65      	ldr	r3, [pc, #404]	; (800c928 <tcp_input+0x4a4>)
 800c794:	f240 120d 	movw	r2, #269	; 0x10d
 800c798:	4964      	ldr	r1, [pc, #400]	; (800c92c <tcp_input+0x4a8>)
 800c79a:	4865      	ldr	r0, [pc, #404]	; (800c930 <tcp_input+0x4ac>)
 800c79c:	f006 feac 	bl	80134f8 <iprintf>
      if (prev != NULL) {
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00a      	beq.n	800c7bc <tcp_input+0x338>
        prev->next = pcb->next;
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	68da      	ldr	r2, [r3, #12]
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c7ae:	4b61      	ldr	r3, [pc, #388]	; (800c934 <tcp_input+0x4b0>)
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c7b6:	4a5f      	ldr	r2, [pc, #380]	; (800c934 <tcp_input+0x4b0>)
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	69fa      	ldr	r2, [r7, #28]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d111      	bne.n	800c7ea <tcp_input+0x366>
 800c7c6:	4b58      	ldr	r3, [pc, #352]	; (800c928 <tcp_input+0x4a4>)
 800c7c8:	f240 1215 	movw	r2, #277	; 0x115
 800c7cc:	495a      	ldr	r1, [pc, #360]	; (800c938 <tcp_input+0x4b4>)
 800c7ce:	4858      	ldr	r0, [pc, #352]	; (800c930 <tcp_input+0x4ac>)
 800c7d0:	f006 fe92 	bl	80134f8 <iprintf>
      break;
 800c7d4:	e009      	b.n	800c7ea <tcp_input+0x366>
    }
    prev = pcb;
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	61fb      	str	r3, [r7, #28]
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f47f af5e 	bne.w	800c6a4 <tcp_input+0x220>
 800c7e8:	e000      	b.n	800c7ec <tcp_input+0x368>
      break;
 800c7ea:	bf00      	nop
  }

  if (pcb == NULL) {
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f040 80aa 	bne.w	800c948 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7f4:	4b51      	ldr	r3, [pc, #324]	; (800c93c <tcp_input+0x4b8>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	61fb      	str	r3, [r7, #28]
 800c7fa:	e03f      	b.n	800c87c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	7d1b      	ldrb	r3, [r3, #20]
 800c800:	2b0a      	cmp	r3, #10
 800c802:	d006      	beq.n	800c812 <tcp_input+0x38e>
 800c804:	4b48      	ldr	r3, [pc, #288]	; (800c928 <tcp_input+0x4a4>)
 800c806:	f240 121f 	movw	r2, #287	; 0x11f
 800c80a:	494d      	ldr	r1, [pc, #308]	; (800c940 <tcp_input+0x4bc>)
 800c80c:	4848      	ldr	r0, [pc, #288]	; (800c930 <tcp_input+0x4ac>)
 800c80e:	f006 fe73 	bl	80134f8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	7a1b      	ldrb	r3, [r3, #8]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d009      	beq.n	800c82e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	7a1a      	ldrb	r2, [r3, #8]
 800c81e:	4b41      	ldr	r3, [pc, #260]	; (800c924 <tcp_input+0x4a0>)
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c826:	3301      	adds	r3, #1
 800c828:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d122      	bne.n	800c874 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	8b1a      	ldrh	r2, [r3, #24]
 800c832:	4b3b      	ldr	r3, [pc, #236]	; (800c920 <tcp_input+0x49c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	881b      	ldrh	r3, [r3, #0]
 800c838:	b29b      	uxth	r3, r3
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d11b      	bne.n	800c876 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	8ada      	ldrh	r2, [r3, #22]
 800c842:	4b37      	ldr	r3, [pc, #220]	; (800c920 <tcp_input+0x49c>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	885b      	ldrh	r3, [r3, #2]
 800c848:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d113      	bne.n	800c876 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	4b34      	ldr	r3, [pc, #208]	; (800c924 <tcp_input+0x4a0>)
 800c854:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c856:	429a      	cmp	r2, r3
 800c858:	d10d      	bne.n	800c876 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	4b31      	ldr	r3, [pc, #196]	; (800c924 <tcp_input+0x4a0>)
 800c860:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c862:	429a      	cmp	r2, r3
 800c864:	d107      	bne.n	800c876 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c866:	69f8      	ldr	r0, [r7, #28]
 800c868:	f000 fb56 	bl	800cf18 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7fd ff3f 	bl	800a6f0 <pbuf_free>
        return;
 800c872:	e1fd      	b.n	800cc70 <tcp_input+0x7ec>
        continue;
 800c874:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	61fb      	str	r3, [r7, #28]
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d1bc      	bne.n	800c7fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c882:	2300      	movs	r3, #0
 800c884:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c886:	4b2f      	ldr	r3, [pc, #188]	; (800c944 <tcp_input+0x4c0>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	617b      	str	r3, [r7, #20]
 800c88c:	e02a      	b.n	800c8e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	7a1b      	ldrb	r3, [r3, #8]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d00c      	beq.n	800c8b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	7a1a      	ldrb	r2, [r3, #8]
 800c89a:	4b22      	ldr	r3, [pc, #136]	; (800c924 <tcp_input+0x4a0>)
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d002      	beq.n	800c8b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	61bb      	str	r3, [r7, #24]
        continue;
 800c8ae:	e016      	b.n	800c8de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	8ada      	ldrh	r2, [r3, #22]
 800c8b4:	4b1a      	ldr	r3, [pc, #104]	; (800c920 <tcp_input+0x49c>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	885b      	ldrh	r3, [r3, #2]
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d10c      	bne.n	800c8da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	4b17      	ldr	r3, [pc, #92]	; (800c924 <tcp_input+0x4a0>)
 800c8c6:	695b      	ldr	r3, [r3, #20]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d00f      	beq.n	800c8ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00d      	beq.n	800c8ee <tcp_input+0x46a>
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d009      	beq.n	800c8ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	617b      	str	r3, [r7, #20]
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1d1      	bne.n	800c88e <tcp_input+0x40a>
 800c8ea:	e000      	b.n	800c8ee <tcp_input+0x46a>
            break;
 800c8ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d029      	beq.n	800c948 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00a      	beq.n	800c910 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	68da      	ldr	r2, [r3, #12]
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c902:	4b10      	ldr	r3, [pc, #64]	; (800c944 <tcp_input+0x4c0>)
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c90a:	4a0e      	ldr	r2, [pc, #56]	; (800c944 <tcp_input+0x4c0>)
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c910:	6978      	ldr	r0, [r7, #20]
 800c912:	f000 fa03 	bl	800cd1c <tcp_listen_input>
      }
      pbuf_free(p);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7fd feea 	bl	800a6f0 <pbuf_free>
      return;
 800c91c:	e1a8      	b.n	800cc70 <tcp_input+0x7ec>
 800c91e:	bf00      	nop
 800c920:	20008e04 	.word	0x20008e04
 800c924:	200036ac 	.word	0x200036ac
 800c928:	08015b70 	.word	0x08015b70
 800c92c:	08015c9c 	.word	0x08015c9c
 800c930:	08015bbc 	.word	0x08015bbc
 800c934:	20008de8 	.word	0x20008de8
 800c938:	08015cc8 	.word	0x08015cc8
 800c93c:	20008dec 	.word	0x20008dec
 800c940:	08015cf4 	.word	0x08015cf4
 800c944:	20008de4 	.word	0x20008de4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f000 8158 	beq.w	800cc00 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c950:	4b95      	ldr	r3, [pc, #596]	; (800cba8 <tcp_input+0x724>)
 800c952:	2200      	movs	r2, #0
 800c954:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	891a      	ldrh	r2, [r3, #8]
 800c95a:	4b93      	ldr	r3, [pc, #588]	; (800cba8 <tcp_input+0x724>)
 800c95c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c95e:	4a92      	ldr	r2, [pc, #584]	; (800cba8 <tcp_input+0x724>)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c964:	4b91      	ldr	r3, [pc, #580]	; (800cbac <tcp_input+0x728>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a8f      	ldr	r2, [pc, #572]	; (800cba8 <tcp_input+0x724>)
 800c96a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c96c:	4b90      	ldr	r3, [pc, #576]	; (800cbb0 <tcp_input+0x72c>)
 800c96e:	2200      	movs	r2, #0
 800c970:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c972:	4b90      	ldr	r3, [pc, #576]	; (800cbb4 <tcp_input+0x730>)
 800c974:	2200      	movs	r2, #0
 800c976:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c978:	4b8f      	ldr	r3, [pc, #572]	; (800cbb8 <tcp_input+0x734>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c97e:	4b8f      	ldr	r3, [pc, #572]	; (800cbbc <tcp_input+0x738>)
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	f003 0308 	and.w	r3, r3, #8
 800c986:	2b00      	cmp	r3, #0
 800c988:	d006      	beq.n	800c998 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	7b5b      	ldrb	r3, [r3, #13]
 800c98e:	f043 0301 	orr.w	r3, r3, #1
 800c992:	b2da      	uxtb	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d017      	beq.n	800c9d0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c9a0:	69f8      	ldr	r0, [r7, #28]
 800c9a2:	f7ff f929 	bl	800bbf8 <tcp_process_refused_data>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	f113 0f0d 	cmn.w	r3, #13
 800c9ac:	d007      	beq.n	800c9be <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00c      	beq.n	800c9d0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c9b6:	4b82      	ldr	r3, [pc, #520]	; (800cbc0 <tcp_input+0x73c>)
 800c9b8:	881b      	ldrh	r3, [r3, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d008      	beq.n	800c9d0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	f040 80e3 	bne.w	800cb8e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c9c8:	69f8      	ldr	r0, [r7, #28]
 800c9ca:	f003 f9ad 	bl	800fd28 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c9ce:	e0de      	b.n	800cb8e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c9d0:	4a7c      	ldr	r2, [pc, #496]	; (800cbc4 <tcp_input+0x740>)
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c9d6:	69f8      	ldr	r0, [r7, #28]
 800c9d8:	f000 fb18 	bl	800d00c <tcp_process>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c9e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c9e4:	f113 0f0d 	cmn.w	r3, #13
 800c9e8:	f000 80d3 	beq.w	800cb92 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c9ec:	4b71      	ldr	r3, [pc, #452]	; (800cbb4 <tcp_input+0x730>)
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	f003 0308 	and.w	r3, r3, #8
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d015      	beq.n	800ca24 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d008      	beq.n	800ca14 <tcp_input+0x590>
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca08:	69fa      	ldr	r2, [r7, #28]
 800ca0a:	6912      	ldr	r2, [r2, #16]
 800ca0c:	f06f 010d 	mvn.w	r1, #13
 800ca10:	4610      	mov	r0, r2
 800ca12:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ca14:	69f9      	ldr	r1, [r7, #28]
 800ca16:	486c      	ldr	r0, [pc, #432]	; (800cbc8 <tcp_input+0x744>)
 800ca18:	f7ff fbbc 	bl	800c194 <tcp_pcb_remove>
        tcp_free(pcb);
 800ca1c:	69f8      	ldr	r0, [r7, #28]
 800ca1e:	f7fe f9a9 	bl	800ad74 <tcp_free>
 800ca22:	e0da      	b.n	800cbda <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ca24:	2300      	movs	r3, #0
 800ca26:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ca28:	4b63      	ldr	r3, [pc, #396]	; (800cbb8 <tcp_input+0x734>)
 800ca2a:	881b      	ldrh	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d01d      	beq.n	800ca6c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ca30:	4b61      	ldr	r3, [pc, #388]	; (800cbb8 <tcp_input+0x734>)
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00a      	beq.n	800ca56 <tcp_input+0x5d2>
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca46:	69fa      	ldr	r2, [r7, #28]
 800ca48:	6910      	ldr	r0, [r2, #16]
 800ca4a:	89fa      	ldrh	r2, [r7, #14]
 800ca4c:	69f9      	ldr	r1, [r7, #28]
 800ca4e:	4798      	blx	r3
 800ca50:	4603      	mov	r3, r0
 800ca52:	74fb      	strb	r3, [r7, #19]
 800ca54:	e001      	b.n	800ca5a <tcp_input+0x5d6>
 800ca56:	2300      	movs	r3, #0
 800ca58:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ca5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca5e:	f113 0f0d 	cmn.w	r3, #13
 800ca62:	f000 8098 	beq.w	800cb96 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ca66:	4b54      	ldr	r3, [pc, #336]	; (800cbb8 <tcp_input+0x734>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ca6c:	69f8      	ldr	r0, [r7, #28]
 800ca6e:	f000 f915 	bl	800cc9c <tcp_input_delayed_close>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	f040 8090 	bne.w	800cb9a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ca7a:	4b4d      	ldr	r3, [pc, #308]	; (800cbb0 <tcp_input+0x72c>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d041      	beq.n	800cb06 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d006      	beq.n	800ca98 <tcp_input+0x614>
 800ca8a:	4b50      	ldr	r3, [pc, #320]	; (800cbcc <tcp_input+0x748>)
 800ca8c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ca90:	494f      	ldr	r1, [pc, #316]	; (800cbd0 <tcp_input+0x74c>)
 800ca92:	4850      	ldr	r0, [pc, #320]	; (800cbd4 <tcp_input+0x750>)
 800ca94:	f006 fd30 	bl	80134f8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	8b5b      	ldrh	r3, [r3, #26]
 800ca9c:	f003 0310 	and.w	r3, r3, #16
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d008      	beq.n	800cab6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800caa4:	4b42      	ldr	r3, [pc, #264]	; (800cbb0 <tcp_input+0x72c>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fd fe21 	bl	800a6f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800caae:	69f8      	ldr	r0, [r7, #28]
 800cab0:	f7fe fc48 	bl	800b344 <tcp_abort>
            goto aborted;
 800cab4:	e091      	b.n	800cbda <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d00c      	beq.n	800cada <tcp_input+0x656>
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	6918      	ldr	r0, [r3, #16]
 800caca:	4b39      	ldr	r3, [pc, #228]	; (800cbb0 <tcp_input+0x72c>)
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	2300      	movs	r3, #0
 800cad0:	69f9      	ldr	r1, [r7, #28]
 800cad2:	47a0      	blx	r4
 800cad4:	4603      	mov	r3, r0
 800cad6:	74fb      	strb	r3, [r7, #19]
 800cad8:	e008      	b.n	800caec <tcp_input+0x668>
 800cada:	4b35      	ldr	r3, [pc, #212]	; (800cbb0 <tcp_input+0x72c>)
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	2300      	movs	r3, #0
 800cae0:	69f9      	ldr	r1, [r7, #28]
 800cae2:	2000      	movs	r0, #0
 800cae4:	f7ff f95e 	bl	800bda4 <tcp_recv_null>
 800cae8:	4603      	mov	r3, r0
 800caea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800caec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800caf0:	f113 0f0d 	cmn.w	r3, #13
 800caf4:	d053      	beq.n	800cb9e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800caf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d003      	beq.n	800cb06 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cafe:	4b2c      	ldr	r3, [pc, #176]	; (800cbb0 <tcp_input+0x72c>)
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cb06:	4b2b      	ldr	r3, [pc, #172]	; (800cbb4 <tcp_input+0x730>)
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	f003 0320 	and.w	r3, r3, #32
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d030      	beq.n	800cb74 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d009      	beq.n	800cb2e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb1e:	7b5a      	ldrb	r2, [r3, #13]
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb24:	f042 0220 	orr.w	r2, r2, #32
 800cb28:	b2d2      	uxtb	r2, r2
 800cb2a:	735a      	strb	r2, [r3, #13]
 800cb2c:	e022      	b.n	800cb74 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cb36:	d005      	beq.n	800cb44 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00b      	beq.n	800cb66 <tcp_input+0x6e2>
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	6918      	ldr	r0, [r3, #16]
 800cb58:	2300      	movs	r3, #0
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	69f9      	ldr	r1, [r7, #28]
 800cb5e:	47a0      	blx	r4
 800cb60:	4603      	mov	r3, r0
 800cb62:	74fb      	strb	r3, [r7, #19]
 800cb64:	e001      	b.n	800cb6a <tcp_input+0x6e6>
 800cb66:	2300      	movs	r3, #0
 800cb68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cb6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb6e:	f113 0f0d 	cmn.w	r3, #13
 800cb72:	d016      	beq.n	800cba2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cb74:	4b13      	ldr	r3, [pc, #76]	; (800cbc4 <tcp_input+0x740>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cb7a:	69f8      	ldr	r0, [r7, #28]
 800cb7c:	f000 f88e 	bl	800cc9c <tcp_input_delayed_close>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d128      	bne.n	800cbd8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cb86:	69f8      	ldr	r0, [r7, #28]
 800cb88:	f002 fac8 	bl	800f11c <tcp_output>
 800cb8c:	e025      	b.n	800cbda <tcp_input+0x756>
        goto aborted;
 800cb8e:	bf00      	nop
 800cb90:	e023      	b.n	800cbda <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cb92:	bf00      	nop
 800cb94:	e021      	b.n	800cbda <tcp_input+0x756>
              goto aborted;
 800cb96:	bf00      	nop
 800cb98:	e01f      	b.n	800cbda <tcp_input+0x756>
          goto aborted;
 800cb9a:	bf00      	nop
 800cb9c:	e01d      	b.n	800cbda <tcp_input+0x756>
            goto aborted;
 800cb9e:	bf00      	nop
 800cba0:	e01b      	b.n	800cbda <tcp_input+0x756>
              goto aborted;
 800cba2:	bf00      	nop
 800cba4:	e019      	b.n	800cbda <tcp_input+0x756>
 800cba6:	bf00      	nop
 800cba8:	20008df4 	.word	0x20008df4
 800cbac:	20008e04 	.word	0x20008e04
 800cbb0:	20008e24 	.word	0x20008e24
 800cbb4:	20008e21 	.word	0x20008e21
 800cbb8:	20008e1c 	.word	0x20008e1c
 800cbbc:	20008e20 	.word	0x20008e20
 800cbc0:	20008e1e 	.word	0x20008e1e
 800cbc4:	20008e28 	.word	0x20008e28
 800cbc8:	20008de8 	.word	0x20008de8
 800cbcc:	08015b70 	.word	0x08015b70
 800cbd0:	08015d24 	.word	0x08015d24
 800cbd4:	08015bbc 	.word	0x08015bbc
          goto aborted;
 800cbd8:	bf00      	nop
    tcp_input_pcb = NULL;
 800cbda:	4b27      	ldr	r3, [pc, #156]	; (800cc78 <tcp_input+0x7f4>)
 800cbdc:	2200      	movs	r2, #0
 800cbde:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cbe0:	4b26      	ldr	r3, [pc, #152]	; (800cc7c <tcp_input+0x7f8>)
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800cbe6:	4b26      	ldr	r3, [pc, #152]	; (800cc80 <tcp_input+0x7fc>)
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d03f      	beq.n	800cc6e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800cbee:	4b24      	ldr	r3, [pc, #144]	; (800cc80 <tcp_input+0x7fc>)
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fd fd7c 	bl	800a6f0 <pbuf_free>
      inseg.p = NULL;
 800cbf8:	4b21      	ldr	r3, [pc, #132]	; (800cc80 <tcp_input+0x7fc>)
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cbfe:	e036      	b.n	800cc6e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cc00:	4b20      	ldr	r3, [pc, #128]	; (800cc84 <tcp_input+0x800>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	899b      	ldrh	r3, [r3, #12]
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fc fabd 	bl	8009188 <lwip_htons>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	f003 0304 	and.w	r3, r3, #4
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d118      	bne.n	800cc4c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc1a:	4b1b      	ldr	r3, [pc, #108]	; (800cc88 <tcp_input+0x804>)
 800cc1c:	6819      	ldr	r1, [r3, #0]
 800cc1e:	4b1b      	ldr	r3, [pc, #108]	; (800cc8c <tcp_input+0x808>)
 800cc20:	881b      	ldrh	r3, [r3, #0]
 800cc22:	461a      	mov	r2, r3
 800cc24:	4b1a      	ldr	r3, [pc, #104]	; (800cc90 <tcp_input+0x80c>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc2a:	4b16      	ldr	r3, [pc, #88]	; (800cc84 <tcp_input+0x800>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc2e:	885b      	ldrh	r3, [r3, #2]
 800cc30:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc32:	4a14      	ldr	r2, [pc, #80]	; (800cc84 <tcp_input+0x800>)
 800cc34:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc36:	8812      	ldrh	r2, [r2, #0]
 800cc38:	b292      	uxth	r2, r2
 800cc3a:	9202      	str	r2, [sp, #8]
 800cc3c:	9301      	str	r3, [sp, #4]
 800cc3e:	4b15      	ldr	r3, [pc, #84]	; (800cc94 <tcp_input+0x810>)
 800cc40:	9300      	str	r3, [sp, #0]
 800cc42:	4b15      	ldr	r3, [pc, #84]	; (800cc98 <tcp_input+0x814>)
 800cc44:	4602      	mov	r2, r0
 800cc46:	2000      	movs	r0, #0
 800cc48:	f003 f81c 	bl	800fc84 <tcp_rst>
    pbuf_free(p);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7fd fd4f 	bl	800a6f0 <pbuf_free>
  return;
 800cc52:	e00c      	b.n	800cc6e <tcp_input+0x7ea>
    goto dropped;
 800cc54:	bf00      	nop
 800cc56:	e006      	b.n	800cc66 <tcp_input+0x7e2>
    goto dropped;
 800cc58:	bf00      	nop
 800cc5a:	e004      	b.n	800cc66 <tcp_input+0x7e2>
    goto dropped;
 800cc5c:	bf00      	nop
 800cc5e:	e002      	b.n	800cc66 <tcp_input+0x7e2>
      goto dropped;
 800cc60:	bf00      	nop
 800cc62:	e000      	b.n	800cc66 <tcp_input+0x7e2>
      goto dropped;
 800cc64:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f7fd fd42 	bl	800a6f0 <pbuf_free>
 800cc6c:	e000      	b.n	800cc70 <tcp_input+0x7ec>
  return;
 800cc6e:	bf00      	nop
}
 800cc70:	3724      	adds	r7, #36	; 0x24
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd90      	pop	{r4, r7, pc}
 800cc76:	bf00      	nop
 800cc78:	20008e28 	.word	0x20008e28
 800cc7c:	20008e24 	.word	0x20008e24
 800cc80:	20008df4 	.word	0x20008df4
 800cc84:	20008e04 	.word	0x20008e04
 800cc88:	20008e18 	.word	0x20008e18
 800cc8c:	20008e1e 	.word	0x20008e1e
 800cc90:	20008e14 	.word	0x20008e14
 800cc94:	200036bc 	.word	0x200036bc
 800cc98:	200036c0 	.word	0x200036c0

0800cc9c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d106      	bne.n	800ccb8 <tcp_input_delayed_close+0x1c>
 800ccaa:	4b17      	ldr	r3, [pc, #92]	; (800cd08 <tcp_input_delayed_close+0x6c>)
 800ccac:	f240 225a 	movw	r2, #602	; 0x25a
 800ccb0:	4916      	ldr	r1, [pc, #88]	; (800cd0c <tcp_input_delayed_close+0x70>)
 800ccb2:	4817      	ldr	r0, [pc, #92]	; (800cd10 <tcp_input_delayed_close+0x74>)
 800ccb4:	f006 fc20 	bl	80134f8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ccb8:	4b16      	ldr	r3, [pc, #88]	; (800cd14 <tcp_input_delayed_close+0x78>)
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	f003 0310 	and.w	r3, r3, #16
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d01c      	beq.n	800ccfe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	8b5b      	ldrh	r3, [r3, #26]
 800ccc8:	f003 0310 	and.w	r3, r3, #16
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10d      	bne.n	800ccec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d008      	beq.n	800ccec <tcp_input_delayed_close+0x50>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	6912      	ldr	r2, [r2, #16]
 800cce4:	f06f 010e 	mvn.w	r1, #14
 800cce8:	4610      	mov	r0, r2
 800ccea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ccec:	6879      	ldr	r1, [r7, #4]
 800ccee:	480a      	ldr	r0, [pc, #40]	; (800cd18 <tcp_input_delayed_close+0x7c>)
 800ccf0:	f7ff fa50 	bl	800c194 <tcp_pcb_remove>
    tcp_free(pcb);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7fe f83d 	bl	800ad74 <tcp_free>
    return 1;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e000      	b.n	800cd00 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	08015b70 	.word	0x08015b70
 800cd0c:	08015d40 	.word	0x08015d40
 800cd10:	08015bbc 	.word	0x08015bbc
 800cd14:	20008e21 	.word	0x20008e21
 800cd18:	20008de8 	.word	0x20008de8

0800cd1c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800cd1c:	b590      	push	{r4, r7, lr}
 800cd1e:	b08b      	sub	sp, #44	; 0x2c
 800cd20:	af04      	add	r7, sp, #16
 800cd22:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800cd24:	4b6f      	ldr	r3, [pc, #444]	; (800cee4 <tcp_listen_input+0x1c8>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	f003 0304 	and.w	r3, r3, #4
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f040 80d2 	bne.w	800ced6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d106      	bne.n	800cd46 <tcp_listen_input+0x2a>
 800cd38:	4b6b      	ldr	r3, [pc, #428]	; (800cee8 <tcp_listen_input+0x1cc>)
 800cd3a:	f240 2281 	movw	r2, #641	; 0x281
 800cd3e:	496b      	ldr	r1, [pc, #428]	; (800ceec <tcp_listen_input+0x1d0>)
 800cd40:	486b      	ldr	r0, [pc, #428]	; (800cef0 <tcp_listen_input+0x1d4>)
 800cd42:	f006 fbd9 	bl	80134f8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800cd46:	4b67      	ldr	r3, [pc, #412]	; (800cee4 <tcp_listen_input+0x1c8>)
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	f003 0310 	and.w	r3, r3, #16
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d019      	beq.n	800cd86 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd52:	4b68      	ldr	r3, [pc, #416]	; (800cef4 <tcp_listen_input+0x1d8>)
 800cd54:	6819      	ldr	r1, [r3, #0]
 800cd56:	4b68      	ldr	r3, [pc, #416]	; (800cef8 <tcp_listen_input+0x1dc>)
 800cd58:	881b      	ldrh	r3, [r3, #0]
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	4b67      	ldr	r3, [pc, #412]	; (800cefc <tcp_listen_input+0x1e0>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd62:	4b67      	ldr	r3, [pc, #412]	; (800cf00 <tcp_listen_input+0x1e4>)
 800cd64:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd66:	885b      	ldrh	r3, [r3, #2]
 800cd68:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd6a:	4a65      	ldr	r2, [pc, #404]	; (800cf00 <tcp_listen_input+0x1e4>)
 800cd6c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd6e:	8812      	ldrh	r2, [r2, #0]
 800cd70:	b292      	uxth	r2, r2
 800cd72:	9202      	str	r2, [sp, #8]
 800cd74:	9301      	str	r3, [sp, #4]
 800cd76:	4b63      	ldr	r3, [pc, #396]	; (800cf04 <tcp_listen_input+0x1e8>)
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	4b63      	ldr	r3, [pc, #396]	; (800cf08 <tcp_listen_input+0x1ec>)
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f002 ff80 	bl	800fc84 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800cd84:	e0a9      	b.n	800ceda <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800cd86:	4b57      	ldr	r3, [pc, #348]	; (800cee4 <tcp_listen_input+0x1c8>)
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	f003 0302 	and.w	r3, r3, #2
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f000 80a3 	beq.w	800ceda <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	7d5b      	ldrb	r3, [r3, #21]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7ff f927 	bl	800bfec <tcp_alloc>
 800cd9e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d111      	bne.n	800cdca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	699b      	ldr	r3, [r3, #24]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00a      	beq.n	800cdc4 <tcp_listen_input+0xa8>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	699b      	ldr	r3, [r3, #24]
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	6910      	ldr	r0, [r2, #16]
 800cdb6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdba:	2100      	movs	r1, #0
 800cdbc:	4798      	blx	r3
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	73bb      	strb	r3, [r7, #14]
      return;
 800cdc2:	e08b      	b.n	800cedc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cdc4:	23f0      	movs	r3, #240	; 0xf0
 800cdc6:	73bb      	strb	r3, [r7, #14]
      return;
 800cdc8:	e088      	b.n	800cedc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cdca:	4b50      	ldr	r3, [pc, #320]	; (800cf0c <tcp_listen_input+0x1f0>)
 800cdcc:	695a      	ldr	r2, [r3, #20]
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cdd2:	4b4e      	ldr	r3, [pc, #312]	; (800cf0c <tcp_listen_input+0x1f0>)
 800cdd4:	691a      	ldr	r2, [r3, #16]
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	8ada      	ldrh	r2, [r3, #22]
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cde2:	4b47      	ldr	r3, [pc, #284]	; (800cf00 <tcp_listen_input+0x1e4>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	881b      	ldrh	r3, [r3, #0]
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	2203      	movs	r2, #3
 800cdf2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cdf4:	4b41      	ldr	r3, [pc, #260]	; (800cefc <tcp_listen_input+0x1e0>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	1c5a      	adds	r2, r3, #1
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ce06:	6978      	ldr	r0, [r7, #20]
 800ce08:	f7ff fa58 	bl	800c2bc <tcp_next_iss>
 800ce0c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	693a      	ldr	r2, [r7, #16]
 800ce12:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	693a      	ldr	r2, [r7, #16]
 800ce18:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	693a      	ldr	r2, [r7, #16]
 800ce1e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	693a      	ldr	r2, [r7, #16]
 800ce24:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ce26:	4b35      	ldr	r3, [pc, #212]	; (800cefc <tcp_listen_input+0x1e0>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	1e5a      	subs	r2, r3, #1
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	691a      	ldr	r2, [r3, #16]
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	7a5b      	ldrb	r3, [r3, #9]
 800ce42:	f003 030c 	and.w	r3, r3, #12
 800ce46:	b2da      	uxtb	r2, r3
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	7a1a      	ldrb	r2, [r3, #8]
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ce54:	4b2e      	ldr	r3, [pc, #184]	; (800cf10 <tcp_listen_input+0x1f4>)
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	60da      	str	r2, [r3, #12]
 800ce5c:	4a2c      	ldr	r2, [pc, #176]	; (800cf10 <tcp_listen_input+0x1f4>)
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	6013      	str	r3, [r2, #0]
 800ce62:	f003 f8d1 	bl	8010008 <tcp_timer_needed>
 800ce66:	4b2b      	ldr	r3, [pc, #172]	; (800cf14 <tcp_listen_input+0x1f8>)
 800ce68:	2201      	movs	r2, #1
 800ce6a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ce6c:	6978      	ldr	r0, [r7, #20]
 800ce6e:	f001 fd8f 	bl	800e990 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ce72:	4b23      	ldr	r3, [pc, #140]	; (800cf00 <tcp_listen_input+0x1e4>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	89db      	ldrh	r3, [r3, #14]
 800ce78:	b29a      	uxth	r2, r3
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	3304      	adds	r3, #4
 800ce94:	4618      	mov	r0, r3
 800ce96:	f005 f84f 	bl	8011f38 <ip4_route>
 800ce9a:	4601      	mov	r1, r0
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	3304      	adds	r3, #4
 800cea0:	461a      	mov	r2, r3
 800cea2:	4620      	mov	r0, r4
 800cea4:	f7ff fa30 	bl	800c308 <tcp_eff_send_mss_netif>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	461a      	mov	r2, r3
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ceb0:	2112      	movs	r1, #18
 800ceb2:	6978      	ldr	r0, [r7, #20]
 800ceb4:	f002 f844 	bl	800ef40 <tcp_enqueue_flags>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d004      	beq.n	800cece <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800cec4:	2100      	movs	r1, #0
 800cec6:	6978      	ldr	r0, [r7, #20]
 800cec8:	f7fe f97e 	bl	800b1c8 <tcp_abandon>
      return;
 800cecc:	e006      	b.n	800cedc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800cece:	6978      	ldr	r0, [r7, #20]
 800ced0:	f002 f924 	bl	800f11c <tcp_output>
  return;
 800ced4:	e001      	b.n	800ceda <tcp_listen_input+0x1be>
    return;
 800ced6:	bf00      	nop
 800ced8:	e000      	b.n	800cedc <tcp_listen_input+0x1c0>
  return;
 800ceda:	bf00      	nop
}
 800cedc:	371c      	adds	r7, #28
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd90      	pop	{r4, r7, pc}
 800cee2:	bf00      	nop
 800cee4:	20008e20 	.word	0x20008e20
 800cee8:	08015b70 	.word	0x08015b70
 800ceec:	08015d68 	.word	0x08015d68
 800cef0:	08015bbc 	.word	0x08015bbc
 800cef4:	20008e18 	.word	0x20008e18
 800cef8:	20008e1e 	.word	0x20008e1e
 800cefc:	20008e14 	.word	0x20008e14
 800cf00:	20008e04 	.word	0x20008e04
 800cf04:	200036bc 	.word	0x200036bc
 800cf08:	200036c0 	.word	0x200036c0
 800cf0c:	200036ac 	.word	0x200036ac
 800cf10:	20008de8 	.word	0x20008de8
 800cf14:	20008df0 	.word	0x20008df0

0800cf18 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af04      	add	r7, sp, #16
 800cf1e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cf20:	4b2f      	ldr	r3, [pc, #188]	; (800cfe0 <tcp_timewait_input+0xc8>)
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	f003 0304 	and.w	r3, r3, #4
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d153      	bne.n	800cfd4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d106      	bne.n	800cf40 <tcp_timewait_input+0x28>
 800cf32:	4b2c      	ldr	r3, [pc, #176]	; (800cfe4 <tcp_timewait_input+0xcc>)
 800cf34:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cf38:	492b      	ldr	r1, [pc, #172]	; (800cfe8 <tcp_timewait_input+0xd0>)
 800cf3a:	482c      	ldr	r0, [pc, #176]	; (800cfec <tcp_timewait_input+0xd4>)
 800cf3c:	f006 fadc 	bl	80134f8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cf40:	4b27      	ldr	r3, [pc, #156]	; (800cfe0 <tcp_timewait_input+0xc8>)
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	f003 0302 	and.w	r3, r3, #2
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d02a      	beq.n	800cfa2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cf4c:	4b28      	ldr	r3, [pc, #160]	; (800cff0 <tcp_timewait_input+0xd8>)
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	db2d      	blt.n	800cfb6 <tcp_timewait_input+0x9e>
 800cf5a:	4b25      	ldr	r3, [pc, #148]	; (800cff0 <tcp_timewait_input+0xd8>)
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cf66:	440b      	add	r3, r1
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	dc23      	bgt.n	800cfb6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf6e:	4b21      	ldr	r3, [pc, #132]	; (800cff4 <tcp_timewait_input+0xdc>)
 800cf70:	6819      	ldr	r1, [r3, #0]
 800cf72:	4b21      	ldr	r3, [pc, #132]	; (800cff8 <tcp_timewait_input+0xe0>)
 800cf74:	881b      	ldrh	r3, [r3, #0]
 800cf76:	461a      	mov	r2, r3
 800cf78:	4b1d      	ldr	r3, [pc, #116]	; (800cff0 <tcp_timewait_input+0xd8>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf7e:	4b1f      	ldr	r3, [pc, #124]	; (800cffc <tcp_timewait_input+0xe4>)
 800cf80:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf82:	885b      	ldrh	r3, [r3, #2]
 800cf84:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf86:	4a1d      	ldr	r2, [pc, #116]	; (800cffc <tcp_timewait_input+0xe4>)
 800cf88:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf8a:	8812      	ldrh	r2, [r2, #0]
 800cf8c:	b292      	uxth	r2, r2
 800cf8e:	9202      	str	r2, [sp, #8]
 800cf90:	9301      	str	r3, [sp, #4]
 800cf92:	4b1b      	ldr	r3, [pc, #108]	; (800d000 <tcp_timewait_input+0xe8>)
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	4b1b      	ldr	r3, [pc, #108]	; (800d004 <tcp_timewait_input+0xec>)
 800cf98:	4602      	mov	r2, r0
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f002 fe72 	bl	800fc84 <tcp_rst>
      return;
 800cfa0:	e01b      	b.n	800cfda <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cfa2:	4b0f      	ldr	r3, [pc, #60]	; (800cfe0 <tcp_timewait_input+0xc8>)
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	f003 0301 	and.w	r3, r3, #1
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cfae:	4b16      	ldr	r3, [pc, #88]	; (800d008 <tcp_timewait_input+0xf0>)
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cfb6:	4b10      	ldr	r3, [pc, #64]	; (800cff8 <tcp_timewait_input+0xe0>)
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00c      	beq.n	800cfd8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	8b5b      	ldrh	r3, [r3, #26]
 800cfc2:	f043 0302 	orr.w	r3, r3, #2
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f002 f8a5 	bl	800f11c <tcp_output>
  }
  return;
 800cfd2:	e001      	b.n	800cfd8 <tcp_timewait_input+0xc0>
    return;
 800cfd4:	bf00      	nop
 800cfd6:	e000      	b.n	800cfda <tcp_timewait_input+0xc2>
  return;
 800cfd8:	bf00      	nop
}
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	20008e20 	.word	0x20008e20
 800cfe4:	08015b70 	.word	0x08015b70
 800cfe8:	08015d88 	.word	0x08015d88
 800cfec:	08015bbc 	.word	0x08015bbc
 800cff0:	20008e14 	.word	0x20008e14
 800cff4:	20008e18 	.word	0x20008e18
 800cff8:	20008e1e 	.word	0x20008e1e
 800cffc:	20008e04 	.word	0x20008e04
 800d000:	200036bc 	.word	0x200036bc
 800d004:	200036c0 	.word	0x200036c0
 800d008:	20008ddc 	.word	0x20008ddc

0800d00c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d00c:	b590      	push	{r4, r7, lr}
 800d00e:	b08d      	sub	sp, #52	; 0x34
 800d010:	af04      	add	r7, sp, #16
 800d012:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d014:	2300      	movs	r3, #0
 800d016:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d018:	2300      	movs	r3, #0
 800d01a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d106      	bne.n	800d030 <tcp_process+0x24>
 800d022:	4b9d      	ldr	r3, [pc, #628]	; (800d298 <tcp_process+0x28c>)
 800d024:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d028:	499c      	ldr	r1, [pc, #624]	; (800d29c <tcp_process+0x290>)
 800d02a:	489d      	ldr	r0, [pc, #628]	; (800d2a0 <tcp_process+0x294>)
 800d02c:	f006 fa64 	bl	80134f8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d030:	4b9c      	ldr	r3, [pc, #624]	; (800d2a4 <tcp_process+0x298>)
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	f003 0304 	and.w	r3, r3, #4
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d04e      	beq.n	800d0da <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	7d1b      	ldrb	r3, [r3, #20]
 800d040:	2b02      	cmp	r3, #2
 800d042:	d108      	bne.n	800d056 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d048:	4b97      	ldr	r3, [pc, #604]	; (800d2a8 <tcp_process+0x29c>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d123      	bne.n	800d098 <tcp_process+0x8c>
        acceptable = 1;
 800d050:	2301      	movs	r3, #1
 800d052:	76fb      	strb	r3, [r7, #27]
 800d054:	e020      	b.n	800d098 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d05a:	4b94      	ldr	r3, [pc, #592]	; (800d2ac <tcp_process+0x2a0>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d102      	bne.n	800d068 <tcp_process+0x5c>
        acceptable = 1;
 800d062:	2301      	movs	r3, #1
 800d064:	76fb      	strb	r3, [r7, #27]
 800d066:	e017      	b.n	800d098 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d068:	4b90      	ldr	r3, [pc, #576]	; (800d2ac <tcp_process+0x2a0>)
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d070:	1ad3      	subs	r3, r2, r3
 800d072:	2b00      	cmp	r3, #0
 800d074:	db10      	blt.n	800d098 <tcp_process+0x8c>
 800d076:	4b8d      	ldr	r3, [pc, #564]	; (800d2ac <tcp_process+0x2a0>)
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07e:	6879      	ldr	r1, [r7, #4]
 800d080:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d082:	440b      	add	r3, r1
 800d084:	1ad3      	subs	r3, r2, r3
 800d086:	2b00      	cmp	r3, #0
 800d088:	dc06      	bgt.n	800d098 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	8b5b      	ldrh	r3, [r3, #26]
 800d08e:	f043 0302 	orr.w	r3, r3, #2
 800d092:	b29a      	uxth	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d098:	7efb      	ldrb	r3, [r7, #27]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d01b      	beq.n	800d0d6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	7d1b      	ldrb	r3, [r3, #20]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d106      	bne.n	800d0b4 <tcp_process+0xa8>
 800d0a6:	4b7c      	ldr	r3, [pc, #496]	; (800d298 <tcp_process+0x28c>)
 800d0a8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d0ac:	4980      	ldr	r1, [pc, #512]	; (800d2b0 <tcp_process+0x2a4>)
 800d0ae:	487c      	ldr	r0, [pc, #496]	; (800d2a0 <tcp_process+0x294>)
 800d0b0:	f006 fa22 	bl	80134f8 <iprintf>
      recv_flags |= TF_RESET;
 800d0b4:	4b7f      	ldr	r3, [pc, #508]	; (800d2b4 <tcp_process+0x2a8>)
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	f043 0308 	orr.w	r3, r3, #8
 800d0bc:	b2da      	uxtb	r2, r3
 800d0be:	4b7d      	ldr	r3, [pc, #500]	; (800d2b4 <tcp_process+0x2a8>)
 800d0c0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	8b5b      	ldrh	r3, [r3, #26]
 800d0c6:	f023 0301 	bic.w	r3, r3, #1
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d0d0:	f06f 030d 	mvn.w	r3, #13
 800d0d4:	e37a      	b.n	800d7cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	e378      	b.n	800d7cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d0da:	4b72      	ldr	r3, [pc, #456]	; (800d2a4 <tcp_process+0x298>)
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	f003 0302 	and.w	r3, r3, #2
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d010      	beq.n	800d108 <tcp_process+0xfc>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	7d1b      	ldrb	r3, [r3, #20]
 800d0ea:	2b02      	cmp	r3, #2
 800d0ec:	d00c      	beq.n	800d108 <tcp_process+0xfc>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	7d1b      	ldrb	r3, [r3, #20]
 800d0f2:	2b03      	cmp	r3, #3
 800d0f4:	d008      	beq.n	800d108 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	8b5b      	ldrh	r3, [r3, #26]
 800d0fa:	f043 0302 	orr.w	r3, r3, #2
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	e361      	b.n	800d7cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	8b5b      	ldrh	r3, [r3, #26]
 800d10c:	f003 0310 	and.w	r3, r3, #16
 800d110:	2b00      	cmp	r3, #0
 800d112:	d103      	bne.n	800d11c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d114:	4b68      	ldr	r3, [pc, #416]	; (800d2b8 <tcp_process+0x2ac>)
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f001 fc2f 	bl	800e990 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	7d1b      	ldrb	r3, [r3, #20]
 800d136:	3b02      	subs	r3, #2
 800d138:	2b07      	cmp	r3, #7
 800d13a:	f200 8337 	bhi.w	800d7ac <tcp_process+0x7a0>
 800d13e:	a201      	add	r2, pc, #4	; (adr r2, 800d144 <tcp_process+0x138>)
 800d140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d144:	0800d165 	.word	0x0800d165
 800d148:	0800d395 	.word	0x0800d395
 800d14c:	0800d50d 	.word	0x0800d50d
 800d150:	0800d537 	.word	0x0800d537
 800d154:	0800d65b 	.word	0x0800d65b
 800d158:	0800d50d 	.word	0x0800d50d
 800d15c:	0800d6e7 	.word	0x0800d6e7
 800d160:	0800d777 	.word	0x0800d777
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d164:	4b4f      	ldr	r3, [pc, #316]	; (800d2a4 <tcp_process+0x298>)
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	f003 0310 	and.w	r3, r3, #16
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f000 80e4 	beq.w	800d33a <tcp_process+0x32e>
 800d172:	4b4c      	ldr	r3, [pc, #304]	; (800d2a4 <tcp_process+0x298>)
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	f003 0302 	and.w	r3, r3, #2
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f000 80dd 	beq.w	800d33a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d184:	1c5a      	adds	r2, r3, #1
 800d186:	4b48      	ldr	r3, [pc, #288]	; (800d2a8 <tcp_process+0x29c>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	f040 80d5 	bne.w	800d33a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d190:	4b46      	ldr	r3, [pc, #280]	; (800d2ac <tcp_process+0x2a0>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	1c5a      	adds	r2, r3, #1
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d1a2:	4b41      	ldr	r3, [pc, #260]	; (800d2a8 <tcp_process+0x29c>)
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d1aa:	4b44      	ldr	r3, [pc, #272]	; (800d2bc <tcp_process+0x2b0>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	89db      	ldrh	r3, [r3, #14]
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d1c4:	4b39      	ldr	r3, [pc, #228]	; (800d2ac <tcp_process+0x2a0>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	1e5a      	subs	r2, r3, #1
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2204      	movs	r2, #4
 800d1d2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	3304      	adds	r3, #4
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f004 feab 	bl	8011f38 <ip4_route>
 800d1e2:	4601      	mov	r1, r0
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	3304      	adds	r3, #4
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f7ff f88c 	bl	800c308 <tcp_eff_send_mss_netif>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1fc:	009a      	lsls	r2, r3, #2
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d202:	005b      	lsls	r3, r3, #1
 800d204:	f241 111c 	movw	r1, #4380	; 0x111c
 800d208:	428b      	cmp	r3, r1
 800d20a:	bf38      	it	cc
 800d20c:	460b      	movcc	r3, r1
 800d20e:	429a      	cmp	r2, r3
 800d210:	d204      	bcs.n	800d21c <tcp_process+0x210>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	b29b      	uxth	r3, r3
 800d21a:	e00d      	b.n	800d238 <tcp_process+0x22c>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d220:	005b      	lsls	r3, r3, #1
 800d222:	f241 121c 	movw	r2, #4380	; 0x111c
 800d226:	4293      	cmp	r3, r2
 800d228:	d904      	bls.n	800d234 <tcp_process+0x228>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d22e:	005b      	lsls	r3, r3, #1
 800d230:	b29b      	uxth	r3, r3
 800d232:	e001      	b.n	800d238 <tcp_process+0x22c>
 800d234:	f241 131c 	movw	r3, #4380	; 0x111c
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d244:	2b00      	cmp	r3, #0
 800d246:	d106      	bne.n	800d256 <tcp_process+0x24a>
 800d248:	4b13      	ldr	r3, [pc, #76]	; (800d298 <tcp_process+0x28c>)
 800d24a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d24e:	491c      	ldr	r1, [pc, #112]	; (800d2c0 <tcp_process+0x2b4>)
 800d250:	4813      	ldr	r0, [pc, #76]	; (800d2a0 <tcp_process+0x294>)
 800d252:	f006 f951 	bl	80134f8 <iprintf>
        --pcb->snd_queuelen;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d25c:	3b01      	subs	r3, #1
 800d25e:	b29a      	uxth	r2, r3
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d26a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d12a      	bne.n	800d2c8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d276:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d106      	bne.n	800d28c <tcp_process+0x280>
 800d27e:	4b06      	ldr	r3, [pc, #24]	; (800d298 <tcp_process+0x28c>)
 800d280:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d284:	490f      	ldr	r1, [pc, #60]	; (800d2c4 <tcp_process+0x2b8>)
 800d286:	4806      	ldr	r0, [pc, #24]	; (800d2a0 <tcp_process+0x294>)
 800d288:	f006 f936 	bl	80134f8 <iprintf>
          pcb->unsent = rseg->next;
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	66da      	str	r2, [r3, #108]	; 0x6c
 800d294:	e01c      	b.n	800d2d0 <tcp_process+0x2c4>
 800d296:	bf00      	nop
 800d298:	08015b70 	.word	0x08015b70
 800d29c:	08015da8 	.word	0x08015da8
 800d2a0:	08015bbc 	.word	0x08015bbc
 800d2a4:	20008e20 	.word	0x20008e20
 800d2a8:	20008e18 	.word	0x20008e18
 800d2ac:	20008e14 	.word	0x20008e14
 800d2b0:	08015dc4 	.word	0x08015dc4
 800d2b4:	20008e21 	.word	0x20008e21
 800d2b8:	20008ddc 	.word	0x20008ddc
 800d2bc:	20008e04 	.word	0x20008e04
 800d2c0:	08015de4 	.word	0x08015de4
 800d2c4:	08015dfc 	.word	0x08015dfc
        } else {
          pcb->unacked = rseg->next;
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d2d0:	69f8      	ldr	r0, [r7, #28]
 800d2d2:	f7fe fd22 	bl	800bd1a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d104      	bne.n	800d2e8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2e4:	861a      	strh	r2, [r3, #48]	; 0x30
 800d2e6:	e006      	b.n	800d2f6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d00a      	beq.n	800d316 <tcp_process+0x30a>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	6910      	ldr	r0, [r2, #16]
 800d30a:	2200      	movs	r2, #0
 800d30c:	6879      	ldr	r1, [r7, #4]
 800d30e:	4798      	blx	r3
 800d310:	4603      	mov	r3, r0
 800d312:	76bb      	strb	r3, [r7, #26]
 800d314:	e001      	b.n	800d31a <tcp_process+0x30e>
 800d316:	2300      	movs	r3, #0
 800d318:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d31a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d31e:	f113 0f0d 	cmn.w	r3, #13
 800d322:	d102      	bne.n	800d32a <tcp_process+0x31e>
          return ERR_ABRT;
 800d324:	f06f 030c 	mvn.w	r3, #12
 800d328:	e250      	b.n	800d7cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	8b5b      	ldrh	r3, [r3, #26]
 800d32e:	f043 0302 	orr.w	r3, r3, #2
 800d332:	b29a      	uxth	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d338:	e23a      	b.n	800d7b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d33a:	4b98      	ldr	r3, [pc, #608]	; (800d59c <tcp_process+0x590>)
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	f003 0310 	and.w	r3, r3, #16
 800d342:	2b00      	cmp	r3, #0
 800d344:	f000 8234 	beq.w	800d7b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d348:	4b95      	ldr	r3, [pc, #596]	; (800d5a0 <tcp_process+0x594>)
 800d34a:	6819      	ldr	r1, [r3, #0]
 800d34c:	4b95      	ldr	r3, [pc, #596]	; (800d5a4 <tcp_process+0x598>)
 800d34e:	881b      	ldrh	r3, [r3, #0]
 800d350:	461a      	mov	r2, r3
 800d352:	4b95      	ldr	r3, [pc, #596]	; (800d5a8 <tcp_process+0x59c>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d358:	4b94      	ldr	r3, [pc, #592]	; (800d5ac <tcp_process+0x5a0>)
 800d35a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d35c:	885b      	ldrh	r3, [r3, #2]
 800d35e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d360:	4a92      	ldr	r2, [pc, #584]	; (800d5ac <tcp_process+0x5a0>)
 800d362:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d364:	8812      	ldrh	r2, [r2, #0]
 800d366:	b292      	uxth	r2, r2
 800d368:	9202      	str	r2, [sp, #8]
 800d36a:	9301      	str	r3, [sp, #4]
 800d36c:	4b90      	ldr	r3, [pc, #576]	; (800d5b0 <tcp_process+0x5a4>)
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	4b90      	ldr	r3, [pc, #576]	; (800d5b4 <tcp_process+0x5a8>)
 800d372:	4602      	mov	r2, r0
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f002 fc85 	bl	800fc84 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d380:	2b05      	cmp	r3, #5
 800d382:	f200 8215 	bhi.w	800d7b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2200      	movs	r2, #0
 800d38a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f002 fa4f 	bl	800f830 <tcp_rexmit_rto>
      break;
 800d392:	e20d      	b.n	800d7b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d394:	4b81      	ldr	r3, [pc, #516]	; (800d59c <tcp_process+0x590>)
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	f003 0310 	and.w	r3, r3, #16
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f000 80a1 	beq.w	800d4e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d3a2:	4b7f      	ldr	r3, [pc, #508]	; (800d5a0 <tcp_process+0x594>)
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	3b01      	subs	r3, #1
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	db7e      	blt.n	800d4b0 <tcp_process+0x4a4>
 800d3b2:	4b7b      	ldr	r3, [pc, #492]	; (800d5a0 <tcp_process+0x594>)
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3ba:	1ad3      	subs	r3, r2, r3
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	dc77      	bgt.n	800d4b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2204      	movs	r2, #4
 800d3c4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d102      	bne.n	800d3d4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d3ce:	23fa      	movs	r3, #250	; 0xfa
 800d3d0:	76bb      	strb	r3, [r7, #26]
 800d3d2:	e01d      	b.n	800d410 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3d8:	699b      	ldr	r3, [r3, #24]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d106      	bne.n	800d3ec <tcp_process+0x3e0>
 800d3de:	4b76      	ldr	r3, [pc, #472]	; (800d5b8 <tcp_process+0x5ac>)
 800d3e0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d3e4:	4975      	ldr	r1, [pc, #468]	; (800d5bc <tcp_process+0x5b0>)
 800d3e6:	4876      	ldr	r0, [pc, #472]	; (800d5c0 <tcp_process+0x5b4>)
 800d3e8:	f006 f886 	bl	80134f8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3f0:	699b      	ldr	r3, [r3, #24]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00a      	beq.n	800d40c <tcp_process+0x400>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3fa:	699b      	ldr	r3, [r3, #24]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	6910      	ldr	r0, [r2, #16]
 800d400:	2200      	movs	r2, #0
 800d402:	6879      	ldr	r1, [r7, #4]
 800d404:	4798      	blx	r3
 800d406:	4603      	mov	r3, r0
 800d408:	76bb      	strb	r3, [r7, #26]
 800d40a:	e001      	b.n	800d410 <tcp_process+0x404>
 800d40c:	23f0      	movs	r3, #240	; 0xf0
 800d40e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d410:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d00a      	beq.n	800d42e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d418:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d41c:	f113 0f0d 	cmn.w	r3, #13
 800d420:	d002      	beq.n	800d428 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f7fd ff8e 	bl	800b344 <tcp_abort>
            }
            return ERR_ABRT;
 800d428:	f06f 030c 	mvn.w	r3, #12
 800d42c:	e1ce      	b.n	800d7cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 fae0 	bl	800d9f4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d434:	4b63      	ldr	r3, [pc, #396]	; (800d5c4 <tcp_process+0x5b8>)
 800d436:	881b      	ldrh	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d005      	beq.n	800d448 <tcp_process+0x43c>
            recv_acked--;
 800d43c:	4b61      	ldr	r3, [pc, #388]	; (800d5c4 <tcp_process+0x5b8>)
 800d43e:	881b      	ldrh	r3, [r3, #0]
 800d440:	3b01      	subs	r3, #1
 800d442:	b29a      	uxth	r2, r3
 800d444:	4b5f      	ldr	r3, [pc, #380]	; (800d5c4 <tcp_process+0x5b8>)
 800d446:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d44c:	009a      	lsls	r2, r3, #2
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d452:	005b      	lsls	r3, r3, #1
 800d454:	f241 111c 	movw	r1, #4380	; 0x111c
 800d458:	428b      	cmp	r3, r1
 800d45a:	bf38      	it	cc
 800d45c:	460b      	movcc	r3, r1
 800d45e:	429a      	cmp	r2, r3
 800d460:	d204      	bcs.n	800d46c <tcp_process+0x460>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	b29b      	uxth	r3, r3
 800d46a:	e00d      	b.n	800d488 <tcp_process+0x47c>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d470:	005b      	lsls	r3, r3, #1
 800d472:	f241 121c 	movw	r2, #4380	; 0x111c
 800d476:	4293      	cmp	r3, r2
 800d478:	d904      	bls.n	800d484 <tcp_process+0x478>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d47e:	005b      	lsls	r3, r3, #1
 800d480:	b29b      	uxth	r3, r3
 800d482:	e001      	b.n	800d488 <tcp_process+0x47c>
 800d484:	f241 131c 	movw	r3, #4380	; 0x111c
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d48e:	4b4e      	ldr	r3, [pc, #312]	; (800d5c8 <tcp_process+0x5bc>)
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	f003 0320 	and.w	r3, r3, #32
 800d496:	2b00      	cmp	r3, #0
 800d498:	d037      	beq.n	800d50a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	8b5b      	ldrh	r3, [r3, #26]
 800d49e:	f043 0302 	orr.w	r3, r3, #2
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2207      	movs	r2, #7
 800d4ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d4ae:	e02c      	b.n	800d50a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4b0:	4b3b      	ldr	r3, [pc, #236]	; (800d5a0 <tcp_process+0x594>)
 800d4b2:	6819      	ldr	r1, [r3, #0]
 800d4b4:	4b3b      	ldr	r3, [pc, #236]	; (800d5a4 <tcp_process+0x598>)
 800d4b6:	881b      	ldrh	r3, [r3, #0]
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	4b3b      	ldr	r3, [pc, #236]	; (800d5a8 <tcp_process+0x59c>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d4c0:	4b3a      	ldr	r3, [pc, #232]	; (800d5ac <tcp_process+0x5a0>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4c4:	885b      	ldrh	r3, [r3, #2]
 800d4c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d4c8:	4a38      	ldr	r2, [pc, #224]	; (800d5ac <tcp_process+0x5a0>)
 800d4ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4cc:	8812      	ldrh	r2, [r2, #0]
 800d4ce:	b292      	uxth	r2, r2
 800d4d0:	9202      	str	r2, [sp, #8]
 800d4d2:	9301      	str	r3, [sp, #4]
 800d4d4:	4b36      	ldr	r3, [pc, #216]	; (800d5b0 <tcp_process+0x5a4>)
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	4b36      	ldr	r3, [pc, #216]	; (800d5b4 <tcp_process+0x5a8>)
 800d4da:	4602      	mov	r2, r0
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f002 fbd1 	bl	800fc84 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d4e2:	e167      	b.n	800d7b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d4e4:	4b2d      	ldr	r3, [pc, #180]	; (800d59c <tcp_process+0x590>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	f003 0302 	and.w	r3, r3, #2
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	f000 8161 	beq.w	800d7b4 <tcp_process+0x7a8>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f6:	1e5a      	subs	r2, r3, #1
 800d4f8:	4b2b      	ldr	r3, [pc, #172]	; (800d5a8 <tcp_process+0x59c>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	f040 8159 	bne.w	800d7b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f002 f9b6 	bl	800f874 <tcp_rexmit>
      break;
 800d508:	e154      	b.n	800d7b4 <tcp_process+0x7a8>
 800d50a:	e153      	b.n	800d7b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 fa71 	bl	800d9f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d512:	4b2d      	ldr	r3, [pc, #180]	; (800d5c8 <tcp_process+0x5bc>)
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	f003 0320 	and.w	r3, r3, #32
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f000 814c 	beq.w	800d7b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	8b5b      	ldrh	r3, [r3, #26]
 800d524:	f043 0302 	orr.w	r3, r3, #2
 800d528:	b29a      	uxth	r2, r3
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2207      	movs	r2, #7
 800d532:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d534:	e140      	b.n	800d7b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fa5c 	bl	800d9f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d53c:	4b22      	ldr	r3, [pc, #136]	; (800d5c8 <tcp_process+0x5bc>)
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	f003 0320 	and.w	r3, r3, #32
 800d544:	2b00      	cmp	r3, #0
 800d546:	d071      	beq.n	800d62c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d548:	4b14      	ldr	r3, [pc, #80]	; (800d59c <tcp_process+0x590>)
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	f003 0310 	and.w	r3, r3, #16
 800d550:	2b00      	cmp	r3, #0
 800d552:	d060      	beq.n	800d616 <tcp_process+0x60a>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d558:	4b11      	ldr	r3, [pc, #68]	; (800d5a0 <tcp_process+0x594>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d15a      	bne.n	800d616 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d564:	2b00      	cmp	r3, #0
 800d566:	d156      	bne.n	800d616 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	8b5b      	ldrh	r3, [r3, #26]
 800d56c:	f043 0302 	orr.w	r3, r3, #2
 800d570:	b29a      	uxth	r2, r3
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f7fe fdbc 	bl	800c0f4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d57c:	4b13      	ldr	r3, [pc, #76]	; (800d5cc <tcp_process+0x5c0>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	429a      	cmp	r2, r3
 800d584:	d105      	bne.n	800d592 <tcp_process+0x586>
 800d586:	4b11      	ldr	r3, [pc, #68]	; (800d5cc <tcp_process+0x5c0>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	4a0f      	ldr	r2, [pc, #60]	; (800d5cc <tcp_process+0x5c0>)
 800d58e:	6013      	str	r3, [r2, #0]
 800d590:	e02e      	b.n	800d5f0 <tcp_process+0x5e4>
 800d592:	4b0e      	ldr	r3, [pc, #56]	; (800d5cc <tcp_process+0x5c0>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	617b      	str	r3, [r7, #20]
 800d598:	e027      	b.n	800d5ea <tcp_process+0x5de>
 800d59a:	bf00      	nop
 800d59c:	20008e20 	.word	0x20008e20
 800d5a0:	20008e18 	.word	0x20008e18
 800d5a4:	20008e1e 	.word	0x20008e1e
 800d5a8:	20008e14 	.word	0x20008e14
 800d5ac:	20008e04 	.word	0x20008e04
 800d5b0:	200036bc 	.word	0x200036bc
 800d5b4:	200036c0 	.word	0x200036c0
 800d5b8:	08015b70 	.word	0x08015b70
 800d5bc:	08015e10 	.word	0x08015e10
 800d5c0:	08015bbc 	.word	0x08015bbc
 800d5c4:	20008e1c 	.word	0x20008e1c
 800d5c8:	20008e21 	.word	0x20008e21
 800d5cc:	20008de8 	.word	0x20008de8
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d104      	bne.n	800d5e4 <tcp_process+0x5d8>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	68da      	ldr	r2, [r3, #12]
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	60da      	str	r2, [r3, #12]
 800d5e2:	e005      	b.n	800d5f0 <tcp_process+0x5e4>
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	617b      	str	r3, [r7, #20]
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1ef      	bne.n	800d5d0 <tcp_process+0x5c4>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	60da      	str	r2, [r3, #12]
 800d5f6:	4b77      	ldr	r3, [pc, #476]	; (800d7d4 <tcp_process+0x7c8>)
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	220a      	movs	r2, #10
 800d600:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d602:	4b75      	ldr	r3, [pc, #468]	; (800d7d8 <tcp_process+0x7cc>)
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	60da      	str	r2, [r3, #12]
 800d60a:	4a73      	ldr	r2, [pc, #460]	; (800d7d8 <tcp_process+0x7cc>)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6013      	str	r3, [r2, #0]
 800d610:	f002 fcfa 	bl	8010008 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d614:	e0d2      	b.n	800d7bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	8b5b      	ldrh	r3, [r3, #26]
 800d61a:	f043 0302 	orr.w	r3, r3, #2
 800d61e:	b29a      	uxth	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2208      	movs	r2, #8
 800d628:	751a      	strb	r2, [r3, #20]
      break;
 800d62a:	e0c7      	b.n	800d7bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d62c:	4b6b      	ldr	r3, [pc, #428]	; (800d7dc <tcp_process+0x7d0>)
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	f003 0310 	and.w	r3, r3, #16
 800d634:	2b00      	cmp	r3, #0
 800d636:	f000 80c1 	beq.w	800d7bc <tcp_process+0x7b0>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d63e:	4b68      	ldr	r3, [pc, #416]	; (800d7e0 <tcp_process+0x7d4>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	429a      	cmp	r2, r3
 800d644:	f040 80ba 	bne.w	800d7bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f040 80b5 	bne.w	800d7bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2206      	movs	r2, #6
 800d656:	751a      	strb	r2, [r3, #20]
      break;
 800d658:	e0b0      	b.n	800d7bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f9ca 	bl	800d9f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d660:	4b60      	ldr	r3, [pc, #384]	; (800d7e4 <tcp_process+0x7d8>)
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	f003 0320 	and.w	r3, r3, #32
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f000 80a9 	beq.w	800d7c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	8b5b      	ldrh	r3, [r3, #26]
 800d672:	f043 0302 	orr.w	r3, r3, #2
 800d676:	b29a      	uxth	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7fe fd39 	bl	800c0f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d682:	4b59      	ldr	r3, [pc, #356]	; (800d7e8 <tcp_process+0x7dc>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d105      	bne.n	800d698 <tcp_process+0x68c>
 800d68c:	4b56      	ldr	r3, [pc, #344]	; (800d7e8 <tcp_process+0x7dc>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	4a55      	ldr	r2, [pc, #340]	; (800d7e8 <tcp_process+0x7dc>)
 800d694:	6013      	str	r3, [r2, #0]
 800d696:	e013      	b.n	800d6c0 <tcp_process+0x6b4>
 800d698:	4b53      	ldr	r3, [pc, #332]	; (800d7e8 <tcp_process+0x7dc>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	613b      	str	r3, [r7, #16]
 800d69e:	e00c      	b.n	800d6ba <tcp_process+0x6ae>
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d104      	bne.n	800d6b4 <tcp_process+0x6a8>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	68da      	ldr	r2, [r3, #12]
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	60da      	str	r2, [r3, #12]
 800d6b2:	e005      	b.n	800d6c0 <tcp_process+0x6b4>
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	613b      	str	r3, [r7, #16]
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d1ef      	bne.n	800d6a0 <tcp_process+0x694>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	60da      	str	r2, [r3, #12]
 800d6c6:	4b43      	ldr	r3, [pc, #268]	; (800d7d4 <tcp_process+0x7c8>)
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	220a      	movs	r2, #10
 800d6d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d6d2:	4b41      	ldr	r3, [pc, #260]	; (800d7d8 <tcp_process+0x7cc>)
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	60da      	str	r2, [r3, #12]
 800d6da:	4a3f      	ldr	r2, [pc, #252]	; (800d7d8 <tcp_process+0x7cc>)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6013      	str	r3, [r2, #0]
 800d6e0:	f002 fc92 	bl	8010008 <tcp_timer_needed>
      }
      break;
 800d6e4:	e06c      	b.n	800d7c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 f984 	bl	800d9f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d6ec:	4b3b      	ldr	r3, [pc, #236]	; (800d7dc <tcp_process+0x7d0>)
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	f003 0310 	and.w	r3, r3, #16
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d065      	beq.n	800d7c4 <tcp_process+0x7b8>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6fc:	4b38      	ldr	r3, [pc, #224]	; (800d7e0 <tcp_process+0x7d4>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	429a      	cmp	r2, r3
 800d702:	d15f      	bne.n	800d7c4 <tcp_process+0x7b8>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d15b      	bne.n	800d7c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f7fe fcf1 	bl	800c0f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d712:	4b35      	ldr	r3, [pc, #212]	; (800d7e8 <tcp_process+0x7dc>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d105      	bne.n	800d728 <tcp_process+0x71c>
 800d71c:	4b32      	ldr	r3, [pc, #200]	; (800d7e8 <tcp_process+0x7dc>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	4a31      	ldr	r2, [pc, #196]	; (800d7e8 <tcp_process+0x7dc>)
 800d724:	6013      	str	r3, [r2, #0]
 800d726:	e013      	b.n	800d750 <tcp_process+0x744>
 800d728:	4b2f      	ldr	r3, [pc, #188]	; (800d7e8 <tcp_process+0x7dc>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	60fb      	str	r3, [r7, #12]
 800d72e:	e00c      	b.n	800d74a <tcp_process+0x73e>
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	429a      	cmp	r2, r3
 800d738:	d104      	bne.n	800d744 <tcp_process+0x738>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	68da      	ldr	r2, [r3, #12]
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	60da      	str	r2, [r3, #12]
 800d742:	e005      	b.n	800d750 <tcp_process+0x744>
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	60fb      	str	r3, [r7, #12]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d1ef      	bne.n	800d730 <tcp_process+0x724>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2200      	movs	r2, #0
 800d754:	60da      	str	r2, [r3, #12]
 800d756:	4b1f      	ldr	r3, [pc, #124]	; (800d7d4 <tcp_process+0x7c8>)
 800d758:	2201      	movs	r2, #1
 800d75a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	220a      	movs	r2, #10
 800d760:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d762:	4b1d      	ldr	r3, [pc, #116]	; (800d7d8 <tcp_process+0x7cc>)
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	60da      	str	r2, [r3, #12]
 800d76a:	4a1b      	ldr	r2, [pc, #108]	; (800d7d8 <tcp_process+0x7cc>)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6013      	str	r3, [r2, #0]
 800d770:	f002 fc4a 	bl	8010008 <tcp_timer_needed>
      }
      break;
 800d774:	e026      	b.n	800d7c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 f93c 	bl	800d9f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d77c:	4b17      	ldr	r3, [pc, #92]	; (800d7dc <tcp_process+0x7d0>)
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	f003 0310 	and.w	r3, r3, #16
 800d784:	2b00      	cmp	r3, #0
 800d786:	d01f      	beq.n	800d7c8 <tcp_process+0x7bc>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d78c:	4b14      	ldr	r3, [pc, #80]	; (800d7e0 <tcp_process+0x7d4>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	429a      	cmp	r2, r3
 800d792:	d119      	bne.n	800d7c8 <tcp_process+0x7bc>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d115      	bne.n	800d7c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d79c:	4b11      	ldr	r3, [pc, #68]	; (800d7e4 <tcp_process+0x7d8>)
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	f043 0310 	orr.w	r3, r3, #16
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	4b0f      	ldr	r3, [pc, #60]	; (800d7e4 <tcp_process+0x7d8>)
 800d7a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d7aa:	e00d      	b.n	800d7c8 <tcp_process+0x7bc>
    default:
      break;
 800d7ac:	bf00      	nop
 800d7ae:	e00c      	b.n	800d7ca <tcp_process+0x7be>
      break;
 800d7b0:	bf00      	nop
 800d7b2:	e00a      	b.n	800d7ca <tcp_process+0x7be>
      break;
 800d7b4:	bf00      	nop
 800d7b6:	e008      	b.n	800d7ca <tcp_process+0x7be>
      break;
 800d7b8:	bf00      	nop
 800d7ba:	e006      	b.n	800d7ca <tcp_process+0x7be>
      break;
 800d7bc:	bf00      	nop
 800d7be:	e004      	b.n	800d7ca <tcp_process+0x7be>
      break;
 800d7c0:	bf00      	nop
 800d7c2:	e002      	b.n	800d7ca <tcp_process+0x7be>
      break;
 800d7c4:	bf00      	nop
 800d7c6:	e000      	b.n	800d7ca <tcp_process+0x7be>
      break;
 800d7c8:	bf00      	nop
  }
  return ERR_OK;
 800d7ca:	2300      	movs	r3, #0
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3724      	adds	r7, #36	; 0x24
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd90      	pop	{r4, r7, pc}
 800d7d4:	20008df0 	.word	0x20008df0
 800d7d8:	20008dec 	.word	0x20008dec
 800d7dc:	20008e20 	.word	0x20008e20
 800d7e0:	20008e18 	.word	0x20008e18
 800d7e4:	20008e21 	.word	0x20008e21
 800d7e8:	20008de8 	.word	0x20008de8

0800d7ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d7ec:	b590      	push	{r4, r7, lr}
 800d7ee:	b085      	sub	sp, #20
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d106      	bne.n	800d80a <tcp_oos_insert_segment+0x1e>
 800d7fc:	4b3b      	ldr	r3, [pc, #236]	; (800d8ec <tcp_oos_insert_segment+0x100>)
 800d7fe:	f240 421f 	movw	r2, #1055	; 0x41f
 800d802:	493b      	ldr	r1, [pc, #236]	; (800d8f0 <tcp_oos_insert_segment+0x104>)
 800d804:	483b      	ldr	r0, [pc, #236]	; (800d8f4 <tcp_oos_insert_segment+0x108>)
 800d806:	f005 fe77 	bl	80134f8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	899b      	ldrh	r3, [r3, #12]
 800d810:	b29b      	uxth	r3, r3
 800d812:	4618      	mov	r0, r3
 800d814:	f7fb fcb8 	bl	8009188 <lwip_htons>
 800d818:	4603      	mov	r3, r0
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	f003 0301 	and.w	r3, r3, #1
 800d820:	2b00      	cmp	r3, #0
 800d822:	d028      	beq.n	800d876 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d824:	6838      	ldr	r0, [r7, #0]
 800d826:	f7fe fa63 	bl	800bcf0 <tcp_segs_free>
    next = NULL;
 800d82a:	2300      	movs	r3, #0
 800d82c:	603b      	str	r3, [r7, #0]
 800d82e:	e056      	b.n	800d8de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	899b      	ldrh	r3, [r3, #12]
 800d836:	b29b      	uxth	r3, r3
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fb fca5 	bl	8009188 <lwip_htons>
 800d83e:	4603      	mov	r3, r0
 800d840:	b2db      	uxtb	r3, r3
 800d842:	f003 0301 	and.w	r3, r3, #1
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00d      	beq.n	800d866 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	899b      	ldrh	r3, [r3, #12]
 800d850:	b29c      	uxth	r4, r3
 800d852:	2001      	movs	r0, #1
 800d854:	f7fb fc98 	bl	8009188 <lwip_htons>
 800d858:	4603      	mov	r3, r0
 800d85a:	461a      	mov	r2, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	4322      	orrs	r2, r4
 800d862:	b292      	uxth	r2, r2
 800d864:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f7fe fa52 	bl	800bd1a <tcp_seg_free>
    while (next &&
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00e      	beq.n	800d89a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	891b      	ldrh	r3, [r3, #8]
 800d880:	461a      	mov	r2, r3
 800d882:	4b1d      	ldr	r3, [pc, #116]	; (800d8f8 <tcp_oos_insert_segment+0x10c>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	441a      	add	r2, r3
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	6839      	ldr	r1, [r7, #0]
 800d890:	8909      	ldrh	r1, [r1, #8]
 800d892:	440b      	add	r3, r1
 800d894:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d896:	2b00      	cmp	r3, #0
 800d898:	daca      	bge.n	800d830 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d01e      	beq.n	800d8de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	891b      	ldrh	r3, [r3, #8]
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	4b14      	ldr	r3, [pc, #80]	; (800d8f8 <tcp_oos_insert_segment+0x10c>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	441a      	add	r2, r3
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	dd12      	ble.n	800d8de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	4b0d      	ldr	r3, [pc, #52]	; (800d8f8 <tcp_oos_insert_segment+0x10c>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	1ad3      	subs	r3, r2, r3
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	685a      	ldr	r2, [r3, #4]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	891b      	ldrh	r3, [r3, #8]
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	4610      	mov	r0, r2
 800d8da:	f7fc fd83 	bl	800a3e4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	683a      	ldr	r2, [r7, #0]
 800d8e2:	601a      	str	r2, [r3, #0]
}
 800d8e4:	bf00      	nop
 800d8e6:	3714      	adds	r7, #20
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd90      	pop	{r4, r7, pc}
 800d8ec:	08015b70 	.word	0x08015b70
 800d8f0:	08015e30 	.word	0x08015e30
 800d8f4:	08015bbc 	.word	0x08015bbc
 800d8f8:	20008e14 	.word	0x20008e14

0800d8fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d8fc:	b5b0      	push	{r4, r5, r7, lr}
 800d8fe:	b086      	sub	sp, #24
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
 800d908:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d90a:	e03e      	b.n	800d98a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fc ff70 	bl	800a800 <pbuf_clen>
 800d920:	4603      	mov	r3, r0
 800d922:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d92a:	8a7a      	ldrh	r2, [r7, #18]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d906      	bls.n	800d93e <tcp_free_acked_segments+0x42>
 800d930:	4b2a      	ldr	r3, [pc, #168]	; (800d9dc <tcp_free_acked_segments+0xe0>)
 800d932:	f240 4257 	movw	r2, #1111	; 0x457
 800d936:	492a      	ldr	r1, [pc, #168]	; (800d9e0 <tcp_free_acked_segments+0xe4>)
 800d938:	482a      	ldr	r0, [pc, #168]	; (800d9e4 <tcp_free_acked_segments+0xe8>)
 800d93a:	f005 fddd 	bl	80134f8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d944:	8a7b      	ldrh	r3, [r7, #18]
 800d946:	1ad3      	subs	r3, r2, r3
 800d948:	b29a      	uxth	r2, r3
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	891a      	ldrh	r2, [r3, #8]
 800d954:	4b24      	ldr	r3, [pc, #144]	; (800d9e8 <tcp_free_acked_segments+0xec>)
 800d956:	881b      	ldrh	r3, [r3, #0]
 800d958:	4413      	add	r3, r2
 800d95a:	b29a      	uxth	r2, r3
 800d95c:	4b22      	ldr	r3, [pc, #136]	; (800d9e8 <tcp_free_acked_segments+0xec>)
 800d95e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d960:	6978      	ldr	r0, [r7, #20]
 800d962:	f7fe f9da 	bl	800bd1a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00c      	beq.n	800d98a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d109      	bne.n	800d98a <tcp_free_acked_segments+0x8e>
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d106      	bne.n	800d98a <tcp_free_acked_segments+0x8e>
 800d97c:	4b17      	ldr	r3, [pc, #92]	; (800d9dc <tcp_free_acked_segments+0xe0>)
 800d97e:	f240 4261 	movw	r2, #1121	; 0x461
 800d982:	491a      	ldr	r1, [pc, #104]	; (800d9ec <tcp_free_acked_segments+0xf0>)
 800d984:	4817      	ldr	r0, [pc, #92]	; (800d9e4 <tcp_free_acked_segments+0xe8>)
 800d986:	f005 fdb7 	bl	80134f8 <iprintf>
  while (seg_list != NULL &&
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d020      	beq.n	800d9d2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	4618      	mov	r0, r3
 800d998:	f7fb fc0b 	bl	80091b2 <lwip_htonl>
 800d99c:	4604      	mov	r4, r0
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	891b      	ldrh	r3, [r3, #8]
 800d9a2:	461d      	mov	r5, r3
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	899b      	ldrh	r3, [r3, #12]
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7fb fbeb 	bl	8009188 <lwip_htons>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	f003 0303 	and.w	r3, r3, #3
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d001      	beq.n	800d9c2 <tcp_free_acked_segments+0xc6>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	e000      	b.n	800d9c4 <tcp_free_acked_segments+0xc8>
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	442b      	add	r3, r5
 800d9c6:	18e2      	adds	r2, r4, r3
 800d9c8:	4b09      	ldr	r3, [pc, #36]	; (800d9f0 <tcp_free_acked_segments+0xf4>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	dd9c      	ble.n	800d90c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d9d2:	68bb      	ldr	r3, [r7, #8]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3718      	adds	r7, #24
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bdb0      	pop	{r4, r5, r7, pc}
 800d9dc:	08015b70 	.word	0x08015b70
 800d9e0:	08015e58 	.word	0x08015e58
 800d9e4:	08015bbc 	.word	0x08015bbc
 800d9e8:	20008e1c 	.word	0x20008e1c
 800d9ec:	08015e80 	.word	0x08015e80
 800d9f0:	20008e18 	.word	0x20008e18

0800d9f4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d9f4:	b5b0      	push	{r4, r5, r7, lr}
 800d9f6:	b094      	sub	sp, #80	; 0x50
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d106      	bne.n	800da14 <tcp_receive+0x20>
 800da06:	4b91      	ldr	r3, [pc, #580]	; (800dc4c <tcp_receive+0x258>)
 800da08:	f240 427b 	movw	r2, #1147	; 0x47b
 800da0c:	4990      	ldr	r1, [pc, #576]	; (800dc50 <tcp_receive+0x25c>)
 800da0e:	4891      	ldr	r0, [pc, #580]	; (800dc54 <tcp_receive+0x260>)
 800da10:	f005 fd72 	bl	80134f8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	7d1b      	ldrb	r3, [r3, #20]
 800da18:	2b03      	cmp	r3, #3
 800da1a:	d806      	bhi.n	800da2a <tcp_receive+0x36>
 800da1c:	4b8b      	ldr	r3, [pc, #556]	; (800dc4c <tcp_receive+0x258>)
 800da1e:	f240 427c 	movw	r2, #1148	; 0x47c
 800da22:	498d      	ldr	r1, [pc, #564]	; (800dc58 <tcp_receive+0x264>)
 800da24:	488b      	ldr	r0, [pc, #556]	; (800dc54 <tcp_receive+0x260>)
 800da26:	f005 fd67 	bl	80134f8 <iprintf>

  if (flags & TCP_ACK) {
 800da2a:	4b8c      	ldr	r3, [pc, #560]	; (800dc5c <tcp_receive+0x268>)
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	f003 0310 	and.w	r3, r3, #16
 800da32:	2b00      	cmp	r3, #0
 800da34:	f000 8264 	beq.w	800df00 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da3e:	461a      	mov	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da44:	4413      	add	r3, r2
 800da46:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da4c:	4b84      	ldr	r3, [pc, #528]	; (800dc60 <tcp_receive+0x26c>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	1ad3      	subs	r3, r2, r3
 800da52:	2b00      	cmp	r3, #0
 800da54:	db1b      	blt.n	800da8e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da5a:	4b81      	ldr	r3, [pc, #516]	; (800dc60 <tcp_receive+0x26c>)
 800da5c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800da5e:	429a      	cmp	r2, r3
 800da60:	d106      	bne.n	800da70 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da66:	4b7f      	ldr	r3, [pc, #508]	; (800dc64 <tcp_receive+0x270>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	1ad3      	subs	r3, r2, r3
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	db0e      	blt.n	800da8e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da74:	4b7b      	ldr	r3, [pc, #492]	; (800dc64 <tcp_receive+0x270>)
 800da76:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800da78:	429a      	cmp	r2, r3
 800da7a:	d125      	bne.n	800dac8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800da7c:	4b7a      	ldr	r3, [pc, #488]	; (800dc68 <tcp_receive+0x274>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	89db      	ldrh	r3, [r3, #14]
 800da82:	b29a      	uxth	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d91c      	bls.n	800dac8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800da8e:	4b76      	ldr	r3, [pc, #472]	; (800dc68 <tcp_receive+0x274>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	89db      	ldrh	r3, [r3, #14]
 800da94:	b29a      	uxth	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d205      	bcs.n	800dab8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800dab8:	4b69      	ldr	r3, [pc, #420]	; (800dc60 <tcp_receive+0x26c>)
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800dac0:	4b68      	ldr	r3, [pc, #416]	; (800dc64 <tcp_receive+0x270>)
 800dac2:	681a      	ldr	r2, [r3, #0]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800dac8:	4b66      	ldr	r3, [pc, #408]	; (800dc64 <tcp_receive+0x270>)
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dad0:	1ad3      	subs	r3, r2, r3
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	dc58      	bgt.n	800db88 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800dad6:	4b65      	ldr	r3, [pc, #404]	; (800dc6c <tcp_receive+0x278>)
 800dad8:	881b      	ldrh	r3, [r3, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d14b      	bne.n	800db76 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800dae8:	4413      	add	r3, r2
 800daea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daec:	429a      	cmp	r2, r3
 800daee:	d142      	bne.n	800db76 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	db3d      	blt.n	800db76 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dafe:	4b59      	ldr	r3, [pc, #356]	; (800dc64 <tcp_receive+0x270>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	429a      	cmp	r2, r3
 800db04:	d137      	bne.n	800db76 <tcp_receive+0x182>
              found_dupack = 1;
 800db06:	2301      	movs	r3, #1
 800db08:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800db10:	2bff      	cmp	r3, #255	; 0xff
 800db12:	d007      	beq.n	800db24 <tcp_receive+0x130>
                ++pcb->dupacks;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800db1a:	3301      	adds	r3, #1
 800db1c:	b2da      	uxtb	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800db2a:	2b03      	cmp	r3, #3
 800db2c:	d91b      	bls.n	800db66 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db38:	4413      	add	r3, r2
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db42:	429a      	cmp	r2, r3
 800db44:	d30a      	bcc.n	800db5c <tcp_receive+0x168>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db50:	4413      	add	r3, r2
 800db52:	b29a      	uxth	r2, r3
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800db5a:	e004      	b.n	800db66 <tcp_receive+0x172>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800db6c:	2b02      	cmp	r3, #2
 800db6e:	d902      	bls.n	800db76 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f001 feeb 	bl	800f94c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800db76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f040 8161 	bne.w	800de40 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db86:	e15b      	b.n	800de40 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db88:	4b36      	ldr	r3, [pc, #216]	; (800dc64 <tcp_receive+0x270>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	3b01      	subs	r3, #1
 800db94:	2b00      	cmp	r3, #0
 800db96:	f2c0 814e 	blt.w	800de36 <tcp_receive+0x442>
 800db9a:	4b32      	ldr	r3, [pc, #200]	; (800dc64 <tcp_receive+0x270>)
 800db9c:	681a      	ldr	r2, [r3, #0]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f300 8146 	bgt.w	800de36 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	8b5b      	ldrh	r3, [r3, #26]
 800dbae:	f003 0304 	and.w	r3, r3, #4
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d010      	beq.n	800dbd8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	8b5b      	ldrh	r3, [r3, #26]
 800dbba:	f023 0304 	bic.w	r3, r3, #4
 800dbbe:	b29a      	uxth	r2, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dbe6:	10db      	asrs	r3, r3, #3
 800dbe8:	b21b      	sxth	r3, r3
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	4413      	add	r3, r2
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	b21a      	sxth	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800dc00:	4b18      	ldr	r3, [pc, #96]	; (800dc64 <tcp_receive+0x270>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	b29a      	uxth	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	1ad3      	subs	r3, r2, r3
 800dc0e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800dc18:	4b12      	ldr	r3, [pc, #72]	; (800dc64 <tcp_receive+0x270>)
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	7d1b      	ldrb	r3, [r3, #20]
 800dc24:	2b03      	cmp	r3, #3
 800dc26:	f240 8097 	bls.w	800dd58 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d245      	bcs.n	800dcc6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	8b5b      	ldrh	r3, [r3, #26]
 800dc3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d014      	beq.n	800dc70 <tcp_receive+0x27c>
 800dc46:	2301      	movs	r3, #1
 800dc48:	e013      	b.n	800dc72 <tcp_receive+0x27e>
 800dc4a:	bf00      	nop
 800dc4c:	08015b70 	.word	0x08015b70
 800dc50:	08015ea0 	.word	0x08015ea0
 800dc54:	08015bbc 	.word	0x08015bbc
 800dc58:	08015ebc 	.word	0x08015ebc
 800dc5c:	20008e20 	.word	0x20008e20
 800dc60:	20008e14 	.word	0x20008e14
 800dc64:	20008e18 	.word	0x20008e18
 800dc68:	20008e04 	.word	0x20008e04
 800dc6c:	20008e1e 	.word	0x20008e1e
 800dc70:	2302      	movs	r3, #2
 800dc72:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800dc76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc80:	fb12 f303 	smulbb	r3, r2, r3
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	bf28      	it	cs
 800dc8c:	4613      	movcs	r3, r2
 800dc8e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dc98:	4413      	add	r3, r2
 800dc9a:	b29a      	uxth	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d309      	bcc.n	800dcba <tcp_receive+0x2c6>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dcac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dcae:	4413      	add	r3, r2
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dcb8:	e04e      	b.n	800dd58 <tcp_receive+0x364>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dcc4:	e048      	b.n	800dd58 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dccc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dcce:	4413      	add	r3, r2
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d309      	bcc.n	800dcf0 <tcp_receive+0x2fc>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dce2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dce4:	4413      	add	r3, r2
 800dce6:	b29a      	uxth	r2, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dcee:	e004      	b.n	800dcfa <tcp_receive+0x306>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d326      	bcc.n	800dd58 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dd16:	1ad3      	subs	r3, r2, r3
 800dd18:	b29a      	uxth	r2, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd2a:	4413      	add	r3, r2
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d30a      	bcc.n	800dd4e <tcp_receive+0x35a>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd42:	4413      	add	r3, r2
 800dd44:	b29a      	uxth	r2, r3
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dd4c:	e004      	b.n	800dd58 <tcp_receive+0x364>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd60:	4a98      	ldr	r2, [pc, #608]	; (800dfc4 <tcp_receive+0x5d0>)
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f7ff fdca 	bl	800d8fc <tcp_free_acked_segments>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd76:	4a94      	ldr	r2, [pc, #592]	; (800dfc8 <tcp_receive+0x5d4>)
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f7ff fdbf 	bl	800d8fc <tcp_free_acked_segments>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d104      	bne.n	800dd96 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd92:	861a      	strh	r2, [r3, #48]	; 0x30
 800dd94:	e002      	b.n	800dd9c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d103      	bne.n	800ddb2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ddb8:	4b84      	ldr	r3, [pc, #528]	; (800dfcc <tcp_receive+0x5d8>)
 800ddba:	881b      	ldrh	r3, [r3, #0]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	b29a      	uxth	r2, r3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	8b5b      	ldrh	r3, [r3, #26]
 800ddca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d035      	beq.n	800de3e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d118      	bne.n	800de0c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00c      	beq.n	800ddfc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fb f9df 	bl	80091b2 <lwip_htonl>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	dc20      	bgt.n	800de3e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	8b5b      	ldrh	r3, [r3, #26]
 800de00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de04:	b29a      	uxth	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800de0a:	e018      	b.n	800de3e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	4618      	mov	r0, r3
 800de1a:	f7fb f9ca 	bl	80091b2 <lwip_htonl>
 800de1e:	4603      	mov	r3, r0
 800de20:	1ae3      	subs	r3, r4, r3
 800de22:	2b00      	cmp	r3, #0
 800de24:	dc0b      	bgt.n	800de3e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	8b5b      	ldrh	r3, [r3, #26]
 800de2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de2e:	b29a      	uxth	r2, r3
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800de34:	e003      	b.n	800de3e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f001 ff76 	bl	800fd28 <tcp_send_empty_ack>
 800de3c:	e000      	b.n	800de40 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800de3e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de44:	2b00      	cmp	r3, #0
 800de46:	d05b      	beq.n	800df00 <tcp_receive+0x50c>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de4c:	4b60      	ldr	r3, [pc, #384]	; (800dfd0 <tcp_receive+0x5dc>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	1ad3      	subs	r3, r2, r3
 800de52:	2b00      	cmp	r3, #0
 800de54:	da54      	bge.n	800df00 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800de56:	4b5f      	ldr	r3, [pc, #380]	; (800dfd4 <tcp_receive+0x5e0>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de60:	b29b      	uxth	r3, r3
 800de62:	1ad3      	subs	r3, r2, r3
 800de64:	b29b      	uxth	r3, r3
 800de66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800de6a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de74:	10db      	asrs	r3, r3, #3
 800de76:	b21b      	sxth	r3, r3
 800de78:	b29b      	uxth	r3, r3
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de88:	b29a      	uxth	r2, r3
 800de8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800de8e:	4413      	add	r3, r2
 800de90:	b29b      	uxth	r3, r3
 800de92:	b21a      	sxth	r2, r3
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800de98:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	da05      	bge.n	800deac <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800dea0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dea4:	425b      	negs	r3, r3
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800deac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800deb6:	109b      	asrs	r3, r3, #2
 800deb8:	b21b      	sxth	r3, r3
 800deba:	b29b      	uxth	r3, r3
 800debc:	1ad3      	subs	r3, r2, r3
 800debe:	b29b      	uxth	r3, r3
 800dec0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800deca:	b29a      	uxth	r2, r3
 800decc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ded0:	4413      	add	r3, r2
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	b21a      	sxth	r2, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dee0:	10db      	asrs	r3, r3, #3
 800dee2:	b21b      	sxth	r3, r3
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800deec:	b29b      	uxth	r3, r3
 800deee:	4413      	add	r3, r2
 800def0:	b29b      	uxth	r3, r3
 800def2:	b21a      	sxth	r2, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800df00:	4b35      	ldr	r3, [pc, #212]	; (800dfd8 <tcp_receive+0x5e4>)
 800df02:	881b      	ldrh	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	f000 84e2 	beq.w	800e8ce <tcp_receive+0xeda>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	7d1b      	ldrb	r3, [r3, #20]
 800df0e:	2b06      	cmp	r3, #6
 800df10:	f200 84dd 	bhi.w	800e8ce <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df18:	4b30      	ldr	r3, [pc, #192]	; (800dfdc <tcp_receive+0x5e8>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	3b01      	subs	r3, #1
 800df20:	2b00      	cmp	r3, #0
 800df22:	f2c0 808f 	blt.w	800e044 <tcp_receive+0x650>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df2a:	4b2b      	ldr	r3, [pc, #172]	; (800dfd8 <tcp_receive+0x5e4>)
 800df2c:	881b      	ldrh	r3, [r3, #0]
 800df2e:	4619      	mov	r1, r3
 800df30:	4b2a      	ldr	r3, [pc, #168]	; (800dfdc <tcp_receive+0x5e8>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	440b      	add	r3, r1
 800df36:	1ad3      	subs	r3, r2, r3
 800df38:	3301      	adds	r3, #1
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	f300 8082 	bgt.w	800e044 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800df40:	4b27      	ldr	r3, [pc, #156]	; (800dfe0 <tcp_receive+0x5ec>)
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df4a:	4b24      	ldr	r3, [pc, #144]	; (800dfdc <tcp_receive+0x5e8>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	1ad3      	subs	r3, r2, r3
 800df50:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800df52:	4b23      	ldr	r3, [pc, #140]	; (800dfe0 <tcp_receive+0x5ec>)
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d106      	bne.n	800df68 <tcp_receive+0x574>
 800df5a:	4b22      	ldr	r3, [pc, #136]	; (800dfe4 <tcp_receive+0x5f0>)
 800df5c:	f240 5294 	movw	r2, #1428	; 0x594
 800df60:	4921      	ldr	r1, [pc, #132]	; (800dfe8 <tcp_receive+0x5f4>)
 800df62:	4822      	ldr	r0, [pc, #136]	; (800dfec <tcp_receive+0x5f8>)
 800df64:	f005 fac8 	bl	80134f8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800df68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800df6e:	4293      	cmp	r3, r2
 800df70:	d906      	bls.n	800df80 <tcp_receive+0x58c>
 800df72:	4b1c      	ldr	r3, [pc, #112]	; (800dfe4 <tcp_receive+0x5f0>)
 800df74:	f240 5295 	movw	r2, #1429	; 0x595
 800df78:	491d      	ldr	r1, [pc, #116]	; (800dff0 <tcp_receive+0x5fc>)
 800df7a:	481c      	ldr	r0, [pc, #112]	; (800dfec <tcp_receive+0x5f8>)
 800df7c:	f005 fabc 	bl	80134f8 <iprintf>
      off = (u16_t)off32;
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800df86:	4b16      	ldr	r3, [pc, #88]	; (800dfe0 <tcp_receive+0x5ec>)
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	891b      	ldrh	r3, [r3, #8]
 800df8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df90:	429a      	cmp	r2, r3
 800df92:	d906      	bls.n	800dfa2 <tcp_receive+0x5ae>
 800df94:	4b13      	ldr	r3, [pc, #76]	; (800dfe4 <tcp_receive+0x5f0>)
 800df96:	f240 5297 	movw	r2, #1431	; 0x597
 800df9a:	4916      	ldr	r1, [pc, #88]	; (800dff4 <tcp_receive+0x600>)
 800df9c:	4813      	ldr	r0, [pc, #76]	; (800dfec <tcp_receive+0x5f8>)
 800df9e:	f005 faab 	bl	80134f8 <iprintf>
      inseg.len -= off;
 800dfa2:	4b0f      	ldr	r3, [pc, #60]	; (800dfe0 <tcp_receive+0x5ec>)
 800dfa4:	891a      	ldrh	r2, [r3, #8]
 800dfa6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dfaa:	1ad3      	subs	r3, r2, r3
 800dfac:	b29a      	uxth	r2, r3
 800dfae:	4b0c      	ldr	r3, [pc, #48]	; (800dfe0 <tcp_receive+0x5ec>)
 800dfb0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800dfb2:	4b0b      	ldr	r3, [pc, #44]	; (800dfe0 <tcp_receive+0x5ec>)
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	891a      	ldrh	r2, [r3, #8]
 800dfb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dfbc:	1ad3      	subs	r3, r2, r3
 800dfbe:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800dfc0:	e02a      	b.n	800e018 <tcp_receive+0x624>
 800dfc2:	bf00      	nop
 800dfc4:	08015ed8 	.word	0x08015ed8
 800dfc8:	08015ee0 	.word	0x08015ee0
 800dfcc:	20008e1c 	.word	0x20008e1c
 800dfd0:	20008e18 	.word	0x20008e18
 800dfd4:	20008ddc 	.word	0x20008ddc
 800dfd8:	20008e1e 	.word	0x20008e1e
 800dfdc:	20008e14 	.word	0x20008e14
 800dfe0:	20008df4 	.word	0x20008df4
 800dfe4:	08015b70 	.word	0x08015b70
 800dfe8:	08015ee8 	.word	0x08015ee8
 800dfec:	08015bbc 	.word	0x08015bbc
 800dff0:	08015ef8 	.word	0x08015ef8
 800dff4:	08015f08 	.word	0x08015f08
        off -= p->len;
 800dff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dffa:	895b      	ldrh	r3, [r3, #10]
 800dffc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e008:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e00a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e00c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e00e:	2200      	movs	r2, #0
 800e010:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e01a:	895b      	ldrh	r3, [r3, #10]
 800e01c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e020:	429a      	cmp	r2, r3
 800e022:	d8e9      	bhi.n	800dff8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e024:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e028:	4619      	mov	r1, r3
 800e02a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e02c:	f7fc fada 	bl	800a5e4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e034:	4a91      	ldr	r2, [pc, #580]	; (800e27c <tcp_receive+0x888>)
 800e036:	6013      	str	r3, [r2, #0]
 800e038:	4b91      	ldr	r3, [pc, #580]	; (800e280 <tcp_receive+0x88c>)
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	4a8f      	ldr	r2, [pc, #572]	; (800e27c <tcp_receive+0x888>)
 800e03e:	6812      	ldr	r2, [r2, #0]
 800e040:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e042:	e00d      	b.n	800e060 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e044:	4b8d      	ldr	r3, [pc, #564]	; (800e27c <tcp_receive+0x888>)
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e04c:	1ad3      	subs	r3, r2, r3
 800e04e:	2b00      	cmp	r3, #0
 800e050:	da06      	bge.n	800e060 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	8b5b      	ldrh	r3, [r3, #26]
 800e056:	f043 0302 	orr.w	r3, r3, #2
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e060:	4b86      	ldr	r3, [pc, #536]	; (800e27c <tcp_receive+0x888>)
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e068:	1ad3      	subs	r3, r2, r3
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f2c0 842a 	blt.w	800e8c4 <tcp_receive+0xed0>
 800e070:	4b82      	ldr	r3, [pc, #520]	; (800e27c <tcp_receive+0x888>)
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e078:	6879      	ldr	r1, [r7, #4]
 800e07a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e07c:	440b      	add	r3, r1
 800e07e:	1ad3      	subs	r3, r2, r3
 800e080:	3301      	adds	r3, #1
 800e082:	2b00      	cmp	r3, #0
 800e084:	f300 841e 	bgt.w	800e8c4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e08c:	4b7b      	ldr	r3, [pc, #492]	; (800e27c <tcp_receive+0x888>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	429a      	cmp	r2, r3
 800e092:	f040 829a 	bne.w	800e5ca <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e096:	4b7a      	ldr	r3, [pc, #488]	; (800e280 <tcp_receive+0x88c>)
 800e098:	891c      	ldrh	r4, [r3, #8]
 800e09a:	4b79      	ldr	r3, [pc, #484]	; (800e280 <tcp_receive+0x88c>)
 800e09c:	68db      	ldr	r3, [r3, #12]
 800e09e:	899b      	ldrh	r3, [r3, #12]
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fb f870 	bl	8009188 <lwip_htons>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	f003 0303 	and.w	r3, r3, #3
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <tcp_receive+0x6c4>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e000      	b.n	800e0ba <tcp_receive+0x6c6>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	4423      	add	r3, r4
 800e0bc:	b29a      	uxth	r2, r3
 800e0be:	4b71      	ldr	r3, [pc, #452]	; (800e284 <tcp_receive+0x890>)
 800e0c0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e0c6:	4b6f      	ldr	r3, [pc, #444]	; (800e284 <tcp_receive+0x890>)
 800e0c8:	881b      	ldrh	r3, [r3, #0]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d275      	bcs.n	800e1ba <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e0ce:	4b6c      	ldr	r3, [pc, #432]	; (800e280 <tcp_receive+0x88c>)
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	899b      	ldrh	r3, [r3, #12]
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7fb f856 	bl	8009188 <lwip_htons>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	f003 0301 	and.w	r3, r3, #1
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d01f      	beq.n	800e128 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e0e8:	4b65      	ldr	r3, [pc, #404]	; (800e280 <tcp_receive+0x88c>)
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	899b      	ldrh	r3, [r3, #12]
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	b21b      	sxth	r3, r3
 800e0f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e0f6:	b21c      	sxth	r4, r3
 800e0f8:	4b61      	ldr	r3, [pc, #388]	; (800e280 <tcp_receive+0x88c>)
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	899b      	ldrh	r3, [r3, #12]
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	4618      	mov	r0, r3
 800e102:	f7fb f841 	bl	8009188 <lwip_htons>
 800e106:	4603      	mov	r3, r0
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e110:	b29b      	uxth	r3, r3
 800e112:	4618      	mov	r0, r3
 800e114:	f7fb f838 	bl	8009188 <lwip_htons>
 800e118:	4603      	mov	r3, r0
 800e11a:	b21b      	sxth	r3, r3
 800e11c:	4323      	orrs	r3, r4
 800e11e:	b21a      	sxth	r2, r3
 800e120:	4b57      	ldr	r3, [pc, #348]	; (800e280 <tcp_receive+0x88c>)
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	b292      	uxth	r2, r2
 800e126:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e12c:	4b54      	ldr	r3, [pc, #336]	; (800e280 <tcp_receive+0x88c>)
 800e12e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e130:	4b53      	ldr	r3, [pc, #332]	; (800e280 <tcp_receive+0x88c>)
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	899b      	ldrh	r3, [r3, #12]
 800e136:	b29b      	uxth	r3, r3
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fb f825 	bl	8009188 <lwip_htons>
 800e13e:	4603      	mov	r3, r0
 800e140:	b2db      	uxtb	r3, r3
 800e142:	f003 0302 	and.w	r3, r3, #2
 800e146:	2b00      	cmp	r3, #0
 800e148:	d005      	beq.n	800e156 <tcp_receive+0x762>
            inseg.len -= 1;
 800e14a:	4b4d      	ldr	r3, [pc, #308]	; (800e280 <tcp_receive+0x88c>)
 800e14c:	891b      	ldrh	r3, [r3, #8]
 800e14e:	3b01      	subs	r3, #1
 800e150:	b29a      	uxth	r2, r3
 800e152:	4b4b      	ldr	r3, [pc, #300]	; (800e280 <tcp_receive+0x88c>)
 800e154:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e156:	4b4a      	ldr	r3, [pc, #296]	; (800e280 <tcp_receive+0x88c>)
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	4a49      	ldr	r2, [pc, #292]	; (800e280 <tcp_receive+0x88c>)
 800e15c:	8912      	ldrh	r2, [r2, #8]
 800e15e:	4611      	mov	r1, r2
 800e160:	4618      	mov	r0, r3
 800e162:	f7fc f93f 	bl	800a3e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e166:	4b46      	ldr	r3, [pc, #280]	; (800e280 <tcp_receive+0x88c>)
 800e168:	891c      	ldrh	r4, [r3, #8]
 800e16a:	4b45      	ldr	r3, [pc, #276]	; (800e280 <tcp_receive+0x88c>)
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	899b      	ldrh	r3, [r3, #12]
 800e170:	b29b      	uxth	r3, r3
 800e172:	4618      	mov	r0, r3
 800e174:	f7fb f808 	bl	8009188 <lwip_htons>
 800e178:	4603      	mov	r3, r0
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	f003 0303 	and.w	r3, r3, #3
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <tcp_receive+0x794>
 800e184:	2301      	movs	r3, #1
 800e186:	e000      	b.n	800e18a <tcp_receive+0x796>
 800e188:	2300      	movs	r3, #0
 800e18a:	4423      	add	r3, r4
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	4b3d      	ldr	r3, [pc, #244]	; (800e284 <tcp_receive+0x890>)
 800e190:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e192:	4b3c      	ldr	r3, [pc, #240]	; (800e284 <tcp_receive+0x890>)
 800e194:	881b      	ldrh	r3, [r3, #0]
 800e196:	461a      	mov	r2, r3
 800e198:	4b38      	ldr	r3, [pc, #224]	; (800e27c <tcp_receive+0x888>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	441a      	add	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a2:	6879      	ldr	r1, [r7, #4]
 800e1a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e1a6:	440b      	add	r3, r1
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d006      	beq.n	800e1ba <tcp_receive+0x7c6>
 800e1ac:	4b36      	ldr	r3, [pc, #216]	; (800e288 <tcp_receive+0x894>)
 800e1ae:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e1b2:	4936      	ldr	r1, [pc, #216]	; (800e28c <tcp_receive+0x898>)
 800e1b4:	4836      	ldr	r0, [pc, #216]	; (800e290 <tcp_receive+0x89c>)
 800e1b6:	f005 f99f 	bl	80134f8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	f000 80e7 	beq.w	800e392 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e1c4:	4b2e      	ldr	r3, [pc, #184]	; (800e280 <tcp_receive+0x88c>)
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	899b      	ldrh	r3, [r3, #12]
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7fa ffdb 	bl	8009188 <lwip_htons>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	f003 0301 	and.w	r3, r3, #1
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d010      	beq.n	800e200 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e1de:	e00a      	b.n	800e1f6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1e4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f7fd fd92 	bl	800bd1a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d1f0      	bne.n	800e1e0 <tcp_receive+0x7ec>
 800e1fe:	e0c8      	b.n	800e392 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e204:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e206:	e052      	b.n	800e2ae <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	899b      	ldrh	r3, [r3, #12]
 800e20e:	b29b      	uxth	r3, r3
 800e210:	4618      	mov	r0, r3
 800e212:	f7fa ffb9 	bl	8009188 <lwip_htons>
 800e216:	4603      	mov	r3, r0
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	f003 0301 	and.w	r3, r3, #1
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d03d      	beq.n	800e29e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e222:	4b17      	ldr	r3, [pc, #92]	; (800e280 <tcp_receive+0x88c>)
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	899b      	ldrh	r3, [r3, #12]
 800e228:	b29b      	uxth	r3, r3
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fa ffac 	bl	8009188 <lwip_htons>
 800e230:	4603      	mov	r3, r0
 800e232:	b2db      	uxtb	r3, r3
 800e234:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d130      	bne.n	800e29e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e23c:	4b10      	ldr	r3, [pc, #64]	; (800e280 <tcp_receive+0x88c>)
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	899b      	ldrh	r3, [r3, #12]
 800e242:	b29c      	uxth	r4, r3
 800e244:	2001      	movs	r0, #1
 800e246:	f7fa ff9f 	bl	8009188 <lwip_htons>
 800e24a:	4603      	mov	r3, r0
 800e24c:	461a      	mov	r2, r3
 800e24e:	4b0c      	ldr	r3, [pc, #48]	; (800e280 <tcp_receive+0x88c>)
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	4322      	orrs	r2, r4
 800e254:	b292      	uxth	r2, r2
 800e256:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e258:	4b09      	ldr	r3, [pc, #36]	; (800e280 <tcp_receive+0x88c>)
 800e25a:	891c      	ldrh	r4, [r3, #8]
 800e25c:	4b08      	ldr	r3, [pc, #32]	; (800e280 <tcp_receive+0x88c>)
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	899b      	ldrh	r3, [r3, #12]
 800e262:	b29b      	uxth	r3, r3
 800e264:	4618      	mov	r0, r3
 800e266:	f7fa ff8f 	bl	8009188 <lwip_htons>
 800e26a:	4603      	mov	r3, r0
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	f003 0303 	and.w	r3, r3, #3
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00e      	beq.n	800e294 <tcp_receive+0x8a0>
 800e276:	2301      	movs	r3, #1
 800e278:	e00d      	b.n	800e296 <tcp_receive+0x8a2>
 800e27a:	bf00      	nop
 800e27c:	20008e14 	.word	0x20008e14
 800e280:	20008df4 	.word	0x20008df4
 800e284:	20008e1e 	.word	0x20008e1e
 800e288:	08015b70 	.word	0x08015b70
 800e28c:	08015f18 	.word	0x08015f18
 800e290:	08015bbc 	.word	0x08015bbc
 800e294:	2300      	movs	r3, #0
 800e296:	4423      	add	r3, r4
 800e298:	b29a      	uxth	r2, r3
 800e29a:	4b98      	ldr	r3, [pc, #608]	; (800e4fc <tcp_receive+0xb08>)
 800e29c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e29e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e2a8:	6938      	ldr	r0, [r7, #16]
 800e2aa:	f7fd fd36 	bl	800bd1a <tcp_seg_free>
            while (next &&
 800e2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d00e      	beq.n	800e2d2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e2b4:	4b91      	ldr	r3, [pc, #580]	; (800e4fc <tcp_receive+0xb08>)
 800e2b6:	881b      	ldrh	r3, [r3, #0]
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	4b91      	ldr	r3, [pc, #580]	; (800e500 <tcp_receive+0xb0c>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	441a      	add	r2, r3
 800e2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e2c8:	8909      	ldrh	r1, [r1, #8]
 800e2ca:	440b      	add	r3, r1
 800e2cc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	da9a      	bge.n	800e208 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d059      	beq.n	800e38c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e2d8:	4b88      	ldr	r3, [pc, #544]	; (800e4fc <tcp_receive+0xb08>)
 800e2da:	881b      	ldrh	r3, [r3, #0]
 800e2dc:	461a      	mov	r2, r3
 800e2de:	4b88      	ldr	r3, [pc, #544]	; (800e500 <tcp_receive+0xb0c>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	441a      	add	r2, r3
 800e2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	dd4d      	ble.n	800e38c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	4b81      	ldr	r3, [pc, #516]	; (800e500 <tcp_receive+0xb0c>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	1ad3      	subs	r3, r2, r3
 800e300:	b29a      	uxth	r2, r3
 800e302:	4b80      	ldr	r3, [pc, #512]	; (800e504 <tcp_receive+0xb10>)
 800e304:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e306:	4b7f      	ldr	r3, [pc, #508]	; (800e504 <tcp_receive+0xb10>)
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	899b      	ldrh	r3, [r3, #12]
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fa ff3a 	bl	8009188 <lwip_htons>
 800e314:	4603      	mov	r3, r0
 800e316:	b2db      	uxtb	r3, r3
 800e318:	f003 0302 	and.w	r3, r3, #2
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d005      	beq.n	800e32c <tcp_receive+0x938>
                inseg.len -= 1;
 800e320:	4b78      	ldr	r3, [pc, #480]	; (800e504 <tcp_receive+0xb10>)
 800e322:	891b      	ldrh	r3, [r3, #8]
 800e324:	3b01      	subs	r3, #1
 800e326:	b29a      	uxth	r2, r3
 800e328:	4b76      	ldr	r3, [pc, #472]	; (800e504 <tcp_receive+0xb10>)
 800e32a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e32c:	4b75      	ldr	r3, [pc, #468]	; (800e504 <tcp_receive+0xb10>)
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	4a74      	ldr	r2, [pc, #464]	; (800e504 <tcp_receive+0xb10>)
 800e332:	8912      	ldrh	r2, [r2, #8]
 800e334:	4611      	mov	r1, r2
 800e336:	4618      	mov	r0, r3
 800e338:	f7fc f854 	bl	800a3e4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e33c:	4b71      	ldr	r3, [pc, #452]	; (800e504 <tcp_receive+0xb10>)
 800e33e:	891c      	ldrh	r4, [r3, #8]
 800e340:	4b70      	ldr	r3, [pc, #448]	; (800e504 <tcp_receive+0xb10>)
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	899b      	ldrh	r3, [r3, #12]
 800e346:	b29b      	uxth	r3, r3
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fa ff1d 	bl	8009188 <lwip_htons>
 800e34e:	4603      	mov	r3, r0
 800e350:	b2db      	uxtb	r3, r3
 800e352:	f003 0303 	and.w	r3, r3, #3
 800e356:	2b00      	cmp	r3, #0
 800e358:	d001      	beq.n	800e35e <tcp_receive+0x96a>
 800e35a:	2301      	movs	r3, #1
 800e35c:	e000      	b.n	800e360 <tcp_receive+0x96c>
 800e35e:	2300      	movs	r3, #0
 800e360:	4423      	add	r3, r4
 800e362:	b29a      	uxth	r2, r3
 800e364:	4b65      	ldr	r3, [pc, #404]	; (800e4fc <tcp_receive+0xb08>)
 800e366:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e368:	4b64      	ldr	r3, [pc, #400]	; (800e4fc <tcp_receive+0xb08>)
 800e36a:	881b      	ldrh	r3, [r3, #0]
 800e36c:	461a      	mov	r2, r3
 800e36e:	4b64      	ldr	r3, [pc, #400]	; (800e500 <tcp_receive+0xb0c>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	441a      	add	r2, r3
 800e374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d006      	beq.n	800e38c <tcp_receive+0x998>
 800e37e:	4b62      	ldr	r3, [pc, #392]	; (800e508 <tcp_receive+0xb14>)
 800e380:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e384:	4961      	ldr	r1, [pc, #388]	; (800e50c <tcp_receive+0xb18>)
 800e386:	4862      	ldr	r0, [pc, #392]	; (800e510 <tcp_receive+0xb1c>)
 800e388:	f005 f8b6 	bl	80134f8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e390:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e392:	4b5a      	ldr	r3, [pc, #360]	; (800e4fc <tcp_receive+0xb08>)
 800e394:	881b      	ldrh	r3, [r3, #0]
 800e396:	461a      	mov	r2, r3
 800e398:	4b59      	ldr	r3, [pc, #356]	; (800e500 <tcp_receive+0xb0c>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	441a      	add	r2, r3
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e3a6:	4b55      	ldr	r3, [pc, #340]	; (800e4fc <tcp_receive+0xb08>)
 800e3a8:	881b      	ldrh	r3, [r3, #0]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d206      	bcs.n	800e3bc <tcp_receive+0x9c8>
 800e3ae:	4b56      	ldr	r3, [pc, #344]	; (800e508 <tcp_receive+0xb14>)
 800e3b0:	f240 6207 	movw	r2, #1543	; 0x607
 800e3b4:	4957      	ldr	r1, [pc, #348]	; (800e514 <tcp_receive+0xb20>)
 800e3b6:	4856      	ldr	r0, [pc, #344]	; (800e510 <tcp_receive+0xb1c>)
 800e3b8:	f005 f89e 	bl	80134f8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e3c0:	4b4e      	ldr	r3, [pc, #312]	; (800e4fc <tcp_receive+0xb08>)
 800e3c2:	881b      	ldrh	r3, [r3, #0]
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	b29a      	uxth	r2, r3
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7fc ffc5 	bl	800b35c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e3d2:	4b4c      	ldr	r3, [pc, #304]	; (800e504 <tcp_receive+0xb10>)
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	891b      	ldrh	r3, [r3, #8]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d006      	beq.n	800e3ea <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e3dc:	4b49      	ldr	r3, [pc, #292]	; (800e504 <tcp_receive+0xb10>)
 800e3de:	685b      	ldr	r3, [r3, #4]
 800e3e0:	4a4d      	ldr	r2, [pc, #308]	; (800e518 <tcp_receive+0xb24>)
 800e3e2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e3e4:	4b47      	ldr	r3, [pc, #284]	; (800e504 <tcp_receive+0xb10>)
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e3ea:	4b46      	ldr	r3, [pc, #280]	; (800e504 <tcp_receive+0xb10>)
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	899b      	ldrh	r3, [r3, #12]
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7fa fec8 	bl	8009188 <lwip_htons>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	f003 0301 	and.w	r3, r3, #1
 800e400:	2b00      	cmp	r3, #0
 800e402:	f000 80b8 	beq.w	800e576 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e406:	4b45      	ldr	r3, [pc, #276]	; (800e51c <tcp_receive+0xb28>)
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	f043 0320 	orr.w	r3, r3, #32
 800e40e:	b2da      	uxtb	r2, r3
 800e410:	4b42      	ldr	r3, [pc, #264]	; (800e51c <tcp_receive+0xb28>)
 800e412:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e414:	e0af      	b.n	800e576 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e41a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	4a36      	ldr	r2, [pc, #216]	; (800e500 <tcp_receive+0xb0c>)
 800e426:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	891b      	ldrh	r3, [r3, #8]
 800e42c:	461c      	mov	r4, r3
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	899b      	ldrh	r3, [r3, #12]
 800e434:	b29b      	uxth	r3, r3
 800e436:	4618      	mov	r0, r3
 800e438:	f7fa fea6 	bl	8009188 <lwip_htons>
 800e43c:	4603      	mov	r3, r0
 800e43e:	b2db      	uxtb	r3, r3
 800e440:	f003 0303 	and.w	r3, r3, #3
 800e444:	2b00      	cmp	r3, #0
 800e446:	d001      	beq.n	800e44c <tcp_receive+0xa58>
 800e448:	2301      	movs	r3, #1
 800e44a:	e000      	b.n	800e44e <tcp_receive+0xa5a>
 800e44c:	2300      	movs	r3, #0
 800e44e:	191a      	adds	r2, r3, r4
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e454:	441a      	add	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e45e:	461c      	mov	r4, r3
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	891b      	ldrh	r3, [r3, #8]
 800e464:	461d      	mov	r5, r3
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	899b      	ldrh	r3, [r3, #12]
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fa fe8a 	bl	8009188 <lwip_htons>
 800e474:	4603      	mov	r3, r0
 800e476:	b2db      	uxtb	r3, r3
 800e478:	f003 0303 	and.w	r3, r3, #3
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <tcp_receive+0xa90>
 800e480:	2301      	movs	r3, #1
 800e482:	e000      	b.n	800e486 <tcp_receive+0xa92>
 800e484:	2300      	movs	r3, #0
 800e486:	442b      	add	r3, r5
 800e488:	429c      	cmp	r4, r3
 800e48a:	d206      	bcs.n	800e49a <tcp_receive+0xaa6>
 800e48c:	4b1e      	ldr	r3, [pc, #120]	; (800e508 <tcp_receive+0xb14>)
 800e48e:	f240 622b 	movw	r2, #1579	; 0x62b
 800e492:	4923      	ldr	r1, [pc, #140]	; (800e520 <tcp_receive+0xb2c>)
 800e494:	481e      	ldr	r0, [pc, #120]	; (800e510 <tcp_receive+0xb1c>)
 800e496:	f005 f82f 	bl	80134f8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	891b      	ldrh	r3, [r3, #8]
 800e49e:	461c      	mov	r4, r3
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	899b      	ldrh	r3, [r3, #12]
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7fa fe6d 	bl	8009188 <lwip_htons>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	f003 0303 	and.w	r3, r3, #3
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d001      	beq.n	800e4be <tcp_receive+0xaca>
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e000      	b.n	800e4c0 <tcp_receive+0xacc>
 800e4be:	2300      	movs	r3, #0
 800e4c0:	1919      	adds	r1, r3, r4
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e4c6:	b28b      	uxth	r3, r1
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f7fc ff43 	bl	800b35c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	891b      	ldrh	r3, [r3, #8]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d028      	beq.n	800e532 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e4e0:	4b0d      	ldr	r3, [pc, #52]	; (800e518 <tcp_receive+0xb24>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d01d      	beq.n	800e524 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e4e8:	4b0b      	ldr	r3, [pc, #44]	; (800e518 <tcp_receive+0xb24>)
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	4610      	mov	r0, r2
 800e4f4:	f7fc f9be 	bl	800a874 <pbuf_cat>
 800e4f8:	e018      	b.n	800e52c <tcp_receive+0xb38>
 800e4fa:	bf00      	nop
 800e4fc:	20008e1e 	.word	0x20008e1e
 800e500:	20008e14 	.word	0x20008e14
 800e504:	20008df4 	.word	0x20008df4
 800e508:	08015b70 	.word	0x08015b70
 800e50c:	08015f50 	.word	0x08015f50
 800e510:	08015bbc 	.word	0x08015bbc
 800e514:	08015f8c 	.word	0x08015f8c
 800e518:	20008e24 	.word	0x20008e24
 800e51c:	20008e21 	.word	0x20008e21
 800e520:	08015fac 	.word	0x08015fac
            } else {
              recv_data = cseg->p;
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	4a70      	ldr	r2, [pc, #448]	; (800e6ec <tcp_receive+0xcf8>)
 800e52a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	2200      	movs	r2, #0
 800e530:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	68db      	ldr	r3, [r3, #12]
 800e536:	899b      	ldrh	r3, [r3, #12]
 800e538:	b29b      	uxth	r3, r3
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fa fe24 	bl	8009188 <lwip_htons>
 800e540:	4603      	mov	r3, r0
 800e542:	b2db      	uxtb	r3, r3
 800e544:	f003 0301 	and.w	r3, r3, #1
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00d      	beq.n	800e568 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e54c:	4b68      	ldr	r3, [pc, #416]	; (800e6f0 <tcp_receive+0xcfc>)
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	f043 0320 	orr.w	r3, r3, #32
 800e554:	b2da      	uxtb	r2, r3
 800e556:	4b66      	ldr	r3, [pc, #408]	; (800e6f0 <tcp_receive+0xcfc>)
 800e558:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	7d1b      	ldrb	r3, [r3, #20]
 800e55e:	2b04      	cmp	r3, #4
 800e560:	d102      	bne.n	800e568 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2207      	movs	r2, #7
 800e566:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e570:	68b8      	ldr	r0, [r7, #8]
 800e572:	f7fd fbd2 	bl	800bd1a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d008      	beq.n	800e590 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	685a      	ldr	r2, [r3, #4]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e58a:	429a      	cmp	r2, r3
 800e58c:	f43f af43 	beq.w	800e416 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	8b5b      	ldrh	r3, [r3, #26]
 800e594:	f003 0301 	and.w	r3, r3, #1
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00e      	beq.n	800e5ba <tcp_receive+0xbc6>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	8b5b      	ldrh	r3, [r3, #26]
 800e5a0:	f023 0301 	bic.w	r3, r3, #1
 800e5a4:	b29a      	uxth	r2, r3
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	835a      	strh	r2, [r3, #26]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	8b5b      	ldrh	r3, [r3, #26]
 800e5ae:	f043 0302 	orr.w	r3, r3, #2
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e5b8:	e188      	b.n	800e8cc <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	8b5b      	ldrh	r3, [r3, #26]
 800e5be:	f043 0301 	orr.w	r3, r3, #1
 800e5c2:	b29a      	uxth	r2, r3
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e5c8:	e180      	b.n	800e8cc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d106      	bne.n	800e5e0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e5d2:	4848      	ldr	r0, [pc, #288]	; (800e6f4 <tcp_receive+0xd00>)
 800e5d4:	f7fd fbba 	bl	800bd4c <tcp_seg_copy>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	675a      	str	r2, [r3, #116]	; 0x74
 800e5de:	e16d      	b.n	800e8bc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5e8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5ea:	e157      	b.n	800e89c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	685a      	ldr	r2, [r3, #4]
 800e5f2:	4b41      	ldr	r3, [pc, #260]	; (800e6f8 <tcp_receive+0xd04>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d11d      	bne.n	800e636 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e5fa:	4b3e      	ldr	r3, [pc, #248]	; (800e6f4 <tcp_receive+0xd00>)
 800e5fc:	891a      	ldrh	r2, [r3, #8]
 800e5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e600:	891b      	ldrh	r3, [r3, #8]
 800e602:	429a      	cmp	r2, r3
 800e604:	f240 814f 	bls.w	800e8a6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e608:	483a      	ldr	r0, [pc, #232]	; (800e6f4 <tcp_receive+0xd00>)
 800e60a:	f7fd fb9f 	bl	800bd4c <tcp_seg_copy>
 800e60e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	2b00      	cmp	r3, #0
 800e614:	f000 8149 	beq.w	800e8aa <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d003      	beq.n	800e626 <tcp_receive+0xc32>
                    prev->next = cseg;
 800e61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e620:	697a      	ldr	r2, [r7, #20]
 800e622:	601a      	str	r2, [r3, #0]
 800e624:	e002      	b.n	800e62c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	697a      	ldr	r2, [r7, #20]
 800e62a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e62c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e62e:	6978      	ldr	r0, [r7, #20]
 800e630:	f7ff f8dc 	bl	800d7ec <tcp_oos_insert_segment>
                }
                break;
 800e634:	e139      	b.n	800e8aa <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d117      	bne.n	800e66c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e63c:	4b2e      	ldr	r3, [pc, #184]	; (800e6f8 <tcp_receive+0xd04>)
 800e63e:	681a      	ldr	r2, [r3, #0]
 800e640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e642:	68db      	ldr	r3, [r3, #12]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	1ad3      	subs	r3, r2, r3
 800e648:	2b00      	cmp	r3, #0
 800e64a:	da57      	bge.n	800e6fc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e64c:	4829      	ldr	r0, [pc, #164]	; (800e6f4 <tcp_receive+0xd00>)
 800e64e:	f7fd fb7d 	bl	800bd4c <tcp_seg_copy>
 800e652:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e654:	69bb      	ldr	r3, [r7, #24]
 800e656:	2b00      	cmp	r3, #0
 800e658:	f000 8129 	beq.w	800e8ae <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	69ba      	ldr	r2, [r7, #24]
 800e660:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e664:	69b8      	ldr	r0, [r7, #24]
 800e666:	f7ff f8c1 	bl	800d7ec <tcp_oos_insert_segment>
                  }
                  break;
 800e66a:	e120      	b.n	800e8ae <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e66c:	4b22      	ldr	r3, [pc, #136]	; (800e6f8 <tcp_receive+0xd04>)
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	1ad3      	subs	r3, r2, r3
 800e678:	3b01      	subs	r3, #1
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	db3e      	blt.n	800e6fc <tcp_receive+0xd08>
 800e67e:	4b1e      	ldr	r3, [pc, #120]	; (800e6f8 <tcp_receive+0xd04>)
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e684:	68db      	ldr	r3, [r3, #12]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	1ad3      	subs	r3, r2, r3
 800e68a:	3301      	adds	r3, #1
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	dc35      	bgt.n	800e6fc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e690:	4818      	ldr	r0, [pc, #96]	; (800e6f4 <tcp_receive+0xd00>)
 800e692:	f7fd fb5b 	bl	800bd4c <tcp_seg_copy>
 800e696:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f000 8109 	beq.w	800e8b2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a2:	68db      	ldr	r3, [r3, #12]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6a8:	8912      	ldrh	r2, [r2, #8]
 800e6aa:	441a      	add	r2, r3
 800e6ac:	4b12      	ldr	r3, [pc, #72]	; (800e6f8 <tcp_receive+0xd04>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	1ad3      	subs	r3, r2, r3
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	dd12      	ble.n	800e6dc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e6b6:	4b10      	ldr	r3, [pc, #64]	; (800e6f8 <tcp_receive+0xd04>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	1ad3      	subs	r3, r2, r3
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6ca:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6ce:	685a      	ldr	r2, [r3, #4]
 800e6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6d2:	891b      	ldrh	r3, [r3, #8]
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	4610      	mov	r0, r2
 800e6d8:	f7fb fe84 	bl	800a3e4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6de:	69fa      	ldr	r2, [r7, #28]
 800e6e0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e6e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e6e4:	69f8      	ldr	r0, [r7, #28]
 800e6e6:	f7ff f881 	bl	800d7ec <tcp_oos_insert_segment>
                  }
                  break;
 800e6ea:	e0e2      	b.n	800e8b2 <tcp_receive+0xebe>
 800e6ec:	20008e24 	.word	0x20008e24
 800e6f0:	20008e21 	.word	0x20008e21
 800e6f4:	20008df4 	.word	0x20008df4
 800e6f8:	20008e14 	.word	0x20008e14
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	f040 80c6 	bne.w	800e896 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e70a:	4b80      	ldr	r3, [pc, #512]	; (800e90c <tcp_receive+0xf18>)
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e716:	2b00      	cmp	r3, #0
 800e718:	f340 80bd 	ble.w	800e896 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	899b      	ldrh	r3, [r3, #12]
 800e722:	b29b      	uxth	r3, r3
 800e724:	4618      	mov	r0, r3
 800e726:	f7fa fd2f 	bl	8009188 <lwip_htons>
 800e72a:	4603      	mov	r3, r0
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	f003 0301 	and.w	r3, r3, #1
 800e732:	2b00      	cmp	r3, #0
 800e734:	f040 80bf 	bne.w	800e8b6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e738:	4875      	ldr	r0, [pc, #468]	; (800e910 <tcp_receive+0xf1c>)
 800e73a:	f7fd fb07 	bl	800bd4c <tcp_seg_copy>
 800e73e:	4602      	mov	r2, r0
 800e740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e742:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	f000 80b6 	beq.w	800e8ba <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e750:	68db      	ldr	r3, [r3, #12]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e756:	8912      	ldrh	r2, [r2, #8]
 800e758:	441a      	add	r2, r3
 800e75a:	4b6c      	ldr	r3, [pc, #432]	; (800e90c <tcp_receive+0xf18>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	1ad3      	subs	r3, r2, r3
 800e760:	2b00      	cmp	r3, #0
 800e762:	dd12      	ble.n	800e78a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e764:	4b69      	ldr	r3, [pc, #420]	; (800e90c <tcp_receive+0xf18>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	b29a      	uxth	r2, r3
 800e76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	b29b      	uxth	r3, r3
 800e772:	1ad3      	subs	r3, r2, r3
 800e774:	b29a      	uxth	r2, r3
 800e776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e778:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77c:	685a      	ldr	r2, [r3, #4]
 800e77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e780:	891b      	ldrh	r3, [r3, #8]
 800e782:	4619      	mov	r1, r3
 800e784:	4610      	mov	r0, r2
 800e786:	f7fb fe2d 	bl	800a3e4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e78a:	4b62      	ldr	r3, [pc, #392]	; (800e914 <tcp_receive+0xf20>)
 800e78c:	881b      	ldrh	r3, [r3, #0]
 800e78e:	461a      	mov	r2, r3
 800e790:	4b5e      	ldr	r3, [pc, #376]	; (800e90c <tcp_receive+0xf18>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	441a      	add	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e79a:	6879      	ldr	r1, [r7, #4]
 800e79c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e79e:	440b      	add	r3, r1
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	f340 8089 	ble.w	800e8ba <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	899b      	ldrh	r3, [r3, #12]
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7fa fce8 	bl	8009188 <lwip_htons>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	f003 0301 	and.w	r3, r3, #1
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d022      	beq.n	800e80a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	899b      	ldrh	r3, [r3, #12]
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	b21b      	sxth	r3, r3
 800e7d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e7d4:	b21c      	sxth	r4, r3
 800e7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	68db      	ldr	r3, [r3, #12]
 800e7dc:	899b      	ldrh	r3, [r3, #12]
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7fa fcd1 	bl	8009188 <lwip_htons>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fa fcc8 	bl	8009188 <lwip_htons>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	b21b      	sxth	r3, r3
 800e7fc:	4323      	orrs	r3, r4
 800e7fe:	b21a      	sxth	r2, r3
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	68db      	ldr	r3, [r3, #12]
 800e806:	b292      	uxth	r2, r2
 800e808:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e80e:	b29a      	uxth	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e814:	4413      	add	r3, r2
 800e816:	b299      	uxth	r1, r3
 800e818:	4b3c      	ldr	r3, [pc, #240]	; (800e90c <tcp_receive+0xf18>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	1a8a      	subs	r2, r1, r2
 800e824:	b292      	uxth	r2, r2
 800e826:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	685a      	ldr	r2, [r3, #4]
 800e82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	891b      	ldrh	r3, [r3, #8]
 800e834:	4619      	mov	r1, r3
 800e836:	4610      	mov	r0, r2
 800e838:	f7fb fdd4 	bl	800a3e4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	891c      	ldrh	r4, [r3, #8]
 800e842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	899b      	ldrh	r3, [r3, #12]
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7fa fc9b 	bl	8009188 <lwip_htons>
 800e852:	4603      	mov	r3, r0
 800e854:	b2db      	uxtb	r3, r3
 800e856:	f003 0303 	and.w	r3, r3, #3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <tcp_receive+0xe6e>
 800e85e:	2301      	movs	r3, #1
 800e860:	e000      	b.n	800e864 <tcp_receive+0xe70>
 800e862:	2300      	movs	r3, #0
 800e864:	4423      	add	r3, r4
 800e866:	b29a      	uxth	r2, r3
 800e868:	4b2a      	ldr	r3, [pc, #168]	; (800e914 <tcp_receive+0xf20>)
 800e86a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e86c:	4b29      	ldr	r3, [pc, #164]	; (800e914 <tcp_receive+0xf20>)
 800e86e:	881b      	ldrh	r3, [r3, #0]
 800e870:	461a      	mov	r2, r3
 800e872:	4b26      	ldr	r3, [pc, #152]	; (800e90c <tcp_receive+0xf18>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	441a      	add	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e87c:	6879      	ldr	r1, [r7, #4]
 800e87e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e880:	440b      	add	r3, r1
 800e882:	429a      	cmp	r2, r3
 800e884:	d019      	beq.n	800e8ba <tcp_receive+0xec6>
 800e886:	4b24      	ldr	r3, [pc, #144]	; (800e918 <tcp_receive+0xf24>)
 800e888:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e88c:	4923      	ldr	r1, [pc, #140]	; (800e91c <tcp_receive+0xf28>)
 800e88e:	4824      	ldr	r0, [pc, #144]	; (800e920 <tcp_receive+0xf2c>)
 800e890:	f004 fe32 	bl	80134f8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e894:	e011      	b.n	800e8ba <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f47f aea4 	bne.w	800e5ec <tcp_receive+0xbf8>
 800e8a4:	e00a      	b.n	800e8bc <tcp_receive+0xec8>
                break;
 800e8a6:	bf00      	nop
 800e8a8:	e008      	b.n	800e8bc <tcp_receive+0xec8>
                break;
 800e8aa:	bf00      	nop
 800e8ac:	e006      	b.n	800e8bc <tcp_receive+0xec8>
                  break;
 800e8ae:	bf00      	nop
 800e8b0:	e004      	b.n	800e8bc <tcp_receive+0xec8>
                  break;
 800e8b2:	bf00      	nop
 800e8b4:	e002      	b.n	800e8bc <tcp_receive+0xec8>
                  break;
 800e8b6:	bf00      	nop
 800e8b8:	e000      	b.n	800e8bc <tcp_receive+0xec8>
                break;
 800e8ba:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f001 fa33 	bl	800fd28 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e8c2:	e003      	b.n	800e8cc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f001 fa2f 	bl	800fd28 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e8ca:	e01a      	b.n	800e902 <tcp_receive+0xf0e>
 800e8cc:	e019      	b.n	800e902 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e8ce:	4b0f      	ldr	r3, [pc, #60]	; (800e90c <tcp_receive+0xf18>)
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	db0a      	blt.n	800e8f2 <tcp_receive+0xefe>
 800e8dc:	4b0b      	ldr	r3, [pc, #44]	; (800e90c <tcp_receive+0xf18>)
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e4:	6879      	ldr	r1, [r7, #4]
 800e8e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e8e8:	440b      	add	r3, r1
 800e8ea:	1ad3      	subs	r3, r2, r3
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	dd07      	ble.n	800e902 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	8b5b      	ldrh	r3, [r3, #26]
 800e8f6:	f043 0302 	orr.w	r3, r3, #2
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e900:	e7ff      	b.n	800e902 <tcp_receive+0xf0e>
 800e902:	bf00      	nop
 800e904:	3750      	adds	r7, #80	; 0x50
 800e906:	46bd      	mov	sp, r7
 800e908:	bdb0      	pop	{r4, r5, r7, pc}
 800e90a:	bf00      	nop
 800e90c:	20008e14 	.word	0x20008e14
 800e910:	20008df4 	.word	0x20008df4
 800e914:	20008e1e 	.word	0x20008e1e
 800e918:	08015b70 	.word	0x08015b70
 800e91c:	08015f18 	.word	0x08015f18
 800e920:	08015bbc 	.word	0x08015bbc

0800e924 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e92a:	4b15      	ldr	r3, [pc, #84]	; (800e980 <tcp_get_next_optbyte+0x5c>)
 800e92c:	881b      	ldrh	r3, [r3, #0]
 800e92e:	1c5a      	adds	r2, r3, #1
 800e930:	b291      	uxth	r1, r2
 800e932:	4a13      	ldr	r2, [pc, #76]	; (800e980 <tcp_get_next_optbyte+0x5c>)
 800e934:	8011      	strh	r1, [r2, #0]
 800e936:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e938:	4b12      	ldr	r3, [pc, #72]	; (800e984 <tcp_get_next_optbyte+0x60>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d004      	beq.n	800e94a <tcp_get_next_optbyte+0x26>
 800e940:	4b11      	ldr	r3, [pc, #68]	; (800e988 <tcp_get_next_optbyte+0x64>)
 800e942:	881b      	ldrh	r3, [r3, #0]
 800e944:	88fa      	ldrh	r2, [r7, #6]
 800e946:	429a      	cmp	r2, r3
 800e948:	d208      	bcs.n	800e95c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e94a:	4b10      	ldr	r3, [pc, #64]	; (800e98c <tcp_get_next_optbyte+0x68>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	3314      	adds	r3, #20
 800e950:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e952:	88fb      	ldrh	r3, [r7, #6]
 800e954:	683a      	ldr	r2, [r7, #0]
 800e956:	4413      	add	r3, r2
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	e00b      	b.n	800e974 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e95c:	88fb      	ldrh	r3, [r7, #6]
 800e95e:	b2da      	uxtb	r2, r3
 800e960:	4b09      	ldr	r3, [pc, #36]	; (800e988 <tcp_get_next_optbyte+0x64>)
 800e962:	881b      	ldrh	r3, [r3, #0]
 800e964:	b2db      	uxtb	r3, r3
 800e966:	1ad3      	subs	r3, r2, r3
 800e968:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e96a:	4b06      	ldr	r3, [pc, #24]	; (800e984 <tcp_get_next_optbyte+0x60>)
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	797b      	ldrb	r3, [r7, #5]
 800e970:	4413      	add	r3, r2
 800e972:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e974:	4618      	mov	r0, r3
 800e976:	370c      	adds	r7, #12
 800e978:	46bd      	mov	sp, r7
 800e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97e:	4770      	bx	lr
 800e980:	20008e10 	.word	0x20008e10
 800e984:	20008e0c 	.word	0x20008e0c
 800e988:	20008e0a 	.word	0x20008e0a
 800e98c:	20008e04 	.word	0x20008e04

0800e990 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d106      	bne.n	800e9ac <tcp_parseopt+0x1c>
 800e99e:	4b32      	ldr	r3, [pc, #200]	; (800ea68 <tcp_parseopt+0xd8>)
 800e9a0:	f240 727d 	movw	r2, #1917	; 0x77d
 800e9a4:	4931      	ldr	r1, [pc, #196]	; (800ea6c <tcp_parseopt+0xdc>)
 800e9a6:	4832      	ldr	r0, [pc, #200]	; (800ea70 <tcp_parseopt+0xe0>)
 800e9a8:	f004 fda6 	bl	80134f8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e9ac:	4b31      	ldr	r3, [pc, #196]	; (800ea74 <tcp_parseopt+0xe4>)
 800e9ae:	881b      	ldrh	r3, [r3, #0]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d055      	beq.n	800ea60 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e9b4:	4b30      	ldr	r3, [pc, #192]	; (800ea78 <tcp_parseopt+0xe8>)
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	801a      	strh	r2, [r3, #0]
 800e9ba:	e045      	b.n	800ea48 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e9bc:	f7ff ffb2 	bl	800e924 <tcp_get_next_optbyte>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e9c4:	7bfb      	ldrb	r3, [r7, #15]
 800e9c6:	2b02      	cmp	r3, #2
 800e9c8:	d006      	beq.n	800e9d8 <tcp_parseopt+0x48>
 800e9ca:	2b02      	cmp	r3, #2
 800e9cc:	dc2b      	bgt.n	800ea26 <tcp_parseopt+0x96>
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d041      	beq.n	800ea56 <tcp_parseopt+0xc6>
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d127      	bne.n	800ea26 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e9d6:	e037      	b.n	800ea48 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e9d8:	f7ff ffa4 	bl	800e924 <tcp_get_next_optbyte>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b04      	cmp	r3, #4
 800e9e0:	d13b      	bne.n	800ea5a <tcp_parseopt+0xca>
 800e9e2:	4b25      	ldr	r3, [pc, #148]	; (800ea78 <tcp_parseopt+0xe8>)
 800e9e4:	881b      	ldrh	r3, [r3, #0]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	4a22      	ldr	r2, [pc, #136]	; (800ea74 <tcp_parseopt+0xe4>)
 800e9ea:	8812      	ldrh	r2, [r2, #0]
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	da34      	bge.n	800ea5a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e9f0:	f7ff ff98 	bl	800e924 <tcp_get_next_optbyte>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	021b      	lsls	r3, r3, #8
 800e9fa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e9fc:	f7ff ff92 	bl	800e924 <tcp_get_next_optbyte>
 800ea00:	4603      	mov	r3, r0
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	89bb      	ldrh	r3, [r7, #12]
 800ea06:	4313      	orrs	r3, r2
 800ea08:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ea0a:	89bb      	ldrh	r3, [r7, #12]
 800ea0c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ea10:	d804      	bhi.n	800ea1c <tcp_parseopt+0x8c>
 800ea12:	89bb      	ldrh	r3, [r7, #12]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d001      	beq.n	800ea1c <tcp_parseopt+0x8c>
 800ea18:	89ba      	ldrh	r2, [r7, #12]
 800ea1a:	e001      	b.n	800ea20 <tcp_parseopt+0x90>
 800ea1c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ea24:	e010      	b.n	800ea48 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ea26:	f7ff ff7d 	bl	800e924 <tcp_get_next_optbyte>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ea2e:	7afb      	ldrb	r3, [r7, #11]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d914      	bls.n	800ea5e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ea34:	7afb      	ldrb	r3, [r7, #11]
 800ea36:	b29a      	uxth	r2, r3
 800ea38:	4b0f      	ldr	r3, [pc, #60]	; (800ea78 <tcp_parseopt+0xe8>)
 800ea3a:	881b      	ldrh	r3, [r3, #0]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	3b02      	subs	r3, #2
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	4b0c      	ldr	r3, [pc, #48]	; (800ea78 <tcp_parseopt+0xe8>)
 800ea46:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ea48:	4b0b      	ldr	r3, [pc, #44]	; (800ea78 <tcp_parseopt+0xe8>)
 800ea4a:	881a      	ldrh	r2, [r3, #0]
 800ea4c:	4b09      	ldr	r3, [pc, #36]	; (800ea74 <tcp_parseopt+0xe4>)
 800ea4e:	881b      	ldrh	r3, [r3, #0]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d3b3      	bcc.n	800e9bc <tcp_parseopt+0x2c>
 800ea54:	e004      	b.n	800ea60 <tcp_parseopt+0xd0>
          return;
 800ea56:	bf00      	nop
 800ea58:	e002      	b.n	800ea60 <tcp_parseopt+0xd0>
            return;
 800ea5a:	bf00      	nop
 800ea5c:	e000      	b.n	800ea60 <tcp_parseopt+0xd0>
            return;
 800ea5e:	bf00      	nop
      }
    }
  }
}
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	08015b70 	.word	0x08015b70
 800ea6c:	08015fd4 	.word	0x08015fd4
 800ea70:	08015bbc 	.word	0x08015bbc
 800ea74:	20008e08 	.word	0x20008e08
 800ea78:	20008e10 	.word	0x20008e10

0800ea7c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ea80:	4b05      	ldr	r3, [pc, #20]	; (800ea98 <tcp_trigger_input_pcb_close+0x1c>)
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	f043 0310 	orr.w	r3, r3, #16
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	4b03      	ldr	r3, [pc, #12]	; (800ea98 <tcp_trigger_input_pcb_close+0x1c>)
 800ea8c:	701a      	strb	r2, [r3, #0]
}
 800ea8e:	bf00      	nop
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr
 800ea98:	20008e21 	.word	0x20008e21

0800ea9c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b084      	sub	sp, #16
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	60b9      	str	r1, [r7, #8]
 800eaa6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00a      	beq.n	800eac4 <tcp_route+0x28>
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	7a1b      	ldrb	r3, [r3, #8]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d006      	beq.n	800eac4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	7a1b      	ldrb	r3, [r3, #8]
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fb fab8 	bl	800a030 <netif_get_by_index>
 800eac0:	4603      	mov	r3, r0
 800eac2:	e003      	b.n	800eacc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f003 fa37 	bl	8011f38 <ip4_route>
 800eaca:	4603      	mov	r3, r0
  }
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ead4:	b590      	push	{r4, r7, lr}
 800ead6:	b087      	sub	sp, #28
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	603b      	str	r3, [r7, #0]
 800eae0:	4613      	mov	r3, r2
 800eae2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d105      	bne.n	800eaf6 <tcp_create_segment+0x22>
 800eaea:	4b44      	ldr	r3, [pc, #272]	; (800ebfc <tcp_create_segment+0x128>)
 800eaec:	22a3      	movs	r2, #163	; 0xa3
 800eaee:	4944      	ldr	r1, [pc, #272]	; (800ec00 <tcp_create_segment+0x12c>)
 800eaf0:	4844      	ldr	r0, [pc, #272]	; (800ec04 <tcp_create_segment+0x130>)
 800eaf2:	f004 fd01 	bl	80134f8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d105      	bne.n	800eb08 <tcp_create_segment+0x34>
 800eafc:	4b3f      	ldr	r3, [pc, #252]	; (800ebfc <tcp_create_segment+0x128>)
 800eafe:	22a4      	movs	r2, #164	; 0xa4
 800eb00:	4941      	ldr	r1, [pc, #260]	; (800ec08 <tcp_create_segment+0x134>)
 800eb02:	4840      	ldr	r0, [pc, #256]	; (800ec04 <tcp_create_segment+0x130>)
 800eb04:	f004 fcf8 	bl	80134f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800eb08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	f003 0304 	and.w	r3, r3, #4
 800eb14:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800eb16:	2003      	movs	r0, #3
 800eb18:	f7fa ff8c 	bl	8009a34 <memp_malloc>
 800eb1c:	6138      	str	r0, [r7, #16]
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d104      	bne.n	800eb2e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800eb24:	68b8      	ldr	r0, [r7, #8]
 800eb26:	f7fb fde3 	bl	800a6f0 <pbuf_free>
    return NULL;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	e061      	b.n	800ebf2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800eb34:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	891a      	ldrh	r2, [r3, #8]
 800eb46:	7dfb      	ldrb	r3, [r7, #23]
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d205      	bcs.n	800eb5a <tcp_create_segment+0x86>
 800eb4e:	4b2b      	ldr	r3, [pc, #172]	; (800ebfc <tcp_create_segment+0x128>)
 800eb50:	22b0      	movs	r2, #176	; 0xb0
 800eb52:	492e      	ldr	r1, [pc, #184]	; (800ec0c <tcp_create_segment+0x138>)
 800eb54:	482b      	ldr	r0, [pc, #172]	; (800ec04 <tcp_create_segment+0x130>)
 800eb56:	f004 fccf 	bl	80134f8 <iprintf>
  seg->len = p->tot_len - optlen;
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	891a      	ldrh	r2, [r3, #8]
 800eb5e:	7dfb      	ldrb	r3, [r7, #23]
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	1ad3      	subs	r3, r2, r3
 800eb64:	b29a      	uxth	r2, r3
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800eb6a:	2114      	movs	r1, #20
 800eb6c:	68b8      	ldr	r0, [r7, #8]
 800eb6e:	f7fb fd29 	bl	800a5c4 <pbuf_add_header>
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d004      	beq.n	800eb82 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800eb78:	6938      	ldr	r0, [r7, #16]
 800eb7a:	f7fd f8ce 	bl	800bd1a <tcp_seg_free>
    return NULL;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	e037      	b.n	800ebf2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	685a      	ldr	r2, [r3, #4]
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	8ada      	ldrh	r2, [r3, #22]
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	68dc      	ldr	r4, [r3, #12]
 800eb94:	4610      	mov	r0, r2
 800eb96:	f7fa faf7 	bl	8009188 <lwip_htons>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	8b1a      	ldrh	r2, [r3, #24]
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	68dc      	ldr	r4, [r3, #12]
 800eba6:	4610      	mov	r0, r2
 800eba8:	f7fa faee 	bl	8009188 <lwip_htons>
 800ebac:	4603      	mov	r3, r0
 800ebae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	68dc      	ldr	r4, [r3, #12]
 800ebb4:	6838      	ldr	r0, [r7, #0]
 800ebb6:	f7fa fafc 	bl	80091b2 <lwip_htonl>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ebbe:	7dfb      	ldrb	r3, [r7, #23]
 800ebc0:	089b      	lsrs	r3, r3, #2
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	3305      	adds	r3, #5
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	031b      	lsls	r3, r3, #12
 800ebcc:	b29a      	uxth	r2, r3
 800ebce:	79fb      	ldrb	r3, [r7, #7]
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	b29a      	uxth	r2, r3
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	68dc      	ldr	r4, [r3, #12]
 800ebda:	4610      	mov	r0, r2
 800ebdc:	f7fa fad4 	bl	8009188 <lwip_htons>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	749a      	strb	r2, [r3, #18]
 800ebec:	2200      	movs	r2, #0
 800ebee:	74da      	strb	r2, [r3, #19]
  return seg;
 800ebf0:	693b      	ldr	r3, [r7, #16]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	371c      	adds	r7, #28
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd90      	pop	{r4, r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	08015ff0 	.word	0x08015ff0
 800ec00:	08016024 	.word	0x08016024
 800ec04:	08016044 	.word	0x08016044
 800ec08:	0801606c 	.word	0x0801606c
 800ec0c:	08016090 	.word	0x08016090

0800ec10 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ec10:	b590      	push	{r4, r7, lr}
 800ec12:	b08b      	sub	sp, #44	; 0x2c
 800ec14:	af02      	add	r7, sp, #8
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	61fb      	str	r3, [r7, #28]
 800ec20:	2300      	movs	r3, #0
 800ec22:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ec24:	2300      	movs	r3, #0
 800ec26:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d106      	bne.n	800ec3c <tcp_split_unsent_seg+0x2c>
 800ec2e:	4b95      	ldr	r3, [pc, #596]	; (800ee84 <tcp_split_unsent_seg+0x274>)
 800ec30:	f240 324b 	movw	r2, #843	; 0x34b
 800ec34:	4994      	ldr	r1, [pc, #592]	; (800ee88 <tcp_split_unsent_seg+0x278>)
 800ec36:	4895      	ldr	r0, [pc, #596]	; (800ee8c <tcp_split_unsent_seg+0x27c>)
 800ec38:	f004 fc5e 	bl	80134f8 <iprintf>

  useg = pcb->unsent;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec40:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d102      	bne.n	800ec4e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ec48:	f04f 33ff 	mov.w	r3, #4294967295
 800ec4c:	e116      	b.n	800ee7c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ec4e:	887b      	ldrh	r3, [r7, #2]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d109      	bne.n	800ec68 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ec54:	4b8b      	ldr	r3, [pc, #556]	; (800ee84 <tcp_split_unsent_seg+0x274>)
 800ec56:	f240 3253 	movw	r2, #851	; 0x353
 800ec5a:	498d      	ldr	r1, [pc, #564]	; (800ee90 <tcp_split_unsent_seg+0x280>)
 800ec5c:	488b      	ldr	r0, [pc, #556]	; (800ee8c <tcp_split_unsent_seg+0x27c>)
 800ec5e:	f004 fc4b 	bl	80134f8 <iprintf>
    return ERR_VAL;
 800ec62:	f06f 0305 	mvn.w	r3, #5
 800ec66:	e109      	b.n	800ee7c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	891b      	ldrh	r3, [r3, #8]
 800ec6c:	887a      	ldrh	r2, [r7, #2]
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d301      	bcc.n	800ec76 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ec72:	2300      	movs	r3, #0
 800ec74:	e102      	b.n	800ee7c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec7a:	887a      	ldrh	r2, [r7, #2]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d906      	bls.n	800ec8e <tcp_split_unsent_seg+0x7e>
 800ec80:	4b80      	ldr	r3, [pc, #512]	; (800ee84 <tcp_split_unsent_seg+0x274>)
 800ec82:	f240 325b 	movw	r2, #859	; 0x35b
 800ec86:	4983      	ldr	r1, [pc, #524]	; (800ee94 <tcp_split_unsent_seg+0x284>)
 800ec88:	4880      	ldr	r0, [pc, #512]	; (800ee8c <tcp_split_unsent_seg+0x27c>)
 800ec8a:	f004 fc35 	bl	80134f8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	891b      	ldrh	r3, [r3, #8]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d106      	bne.n	800eca4 <tcp_split_unsent_seg+0x94>
 800ec96:	4b7b      	ldr	r3, [pc, #492]	; (800ee84 <tcp_split_unsent_seg+0x274>)
 800ec98:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ec9c:	497e      	ldr	r1, [pc, #504]	; (800ee98 <tcp_split_unsent_seg+0x288>)
 800ec9e:	487b      	ldr	r0, [pc, #492]	; (800ee8c <tcp_split_unsent_seg+0x27c>)
 800eca0:	f004 fc2a 	bl	80134f8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	7a9b      	ldrb	r3, [r3, #10]
 800eca8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	f003 0304 	and.w	r3, r3, #4
 800ecb4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	891a      	ldrh	r2, [r3, #8]
 800ecba:	887b      	ldrh	r3, [r7, #2]
 800ecbc:	1ad3      	subs	r3, r2, r3
 800ecbe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ecc0:	7bbb      	ldrb	r3, [r7, #14]
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	89bb      	ldrh	r3, [r7, #12]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ecce:	4619      	mov	r1, r3
 800ecd0:	2036      	movs	r0, #54	; 0x36
 800ecd2:	f7fb fa29 	bl	800a128 <pbuf_alloc>
 800ecd6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f000 80b7 	beq.w	800ee4e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	891a      	ldrh	r2, [r3, #8]
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	891b      	ldrh	r3, [r3, #8]
 800ecea:	1ad3      	subs	r3, r2, r3
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	887b      	ldrh	r3, [r7, #2]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	6858      	ldr	r0, [r3, #4]
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	685a      	ldr	r2, [r3, #4]
 800ecfc:	7bbb      	ldrb	r3, [r7, #14]
 800ecfe:	18d1      	adds	r1, r2, r3
 800ed00:	897b      	ldrh	r3, [r7, #10]
 800ed02:	89ba      	ldrh	r2, [r7, #12]
 800ed04:	f7fb feee 	bl	800aae4 <pbuf_copy_partial>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	89bb      	ldrh	r3, [r7, #12]
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	f040 809f 	bne.w	800ee52 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	899b      	ldrh	r3, [r3, #12]
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fa fa33 	bl	8009188 <lwip_htons>
 800ed22:	4603      	mov	r3, r0
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed2a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ed30:	7efb      	ldrb	r3, [r7, #27]
 800ed32:	f003 0308 	and.w	r3, r3, #8
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d007      	beq.n	800ed4a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ed3a:	7efb      	ldrb	r3, [r7, #27]
 800ed3c:	f023 0308 	bic.w	r3, r3, #8
 800ed40:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ed42:	7ebb      	ldrb	r3, [r7, #26]
 800ed44:	f043 0308 	orr.w	r3, r3, #8
 800ed48:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ed4a:	7efb      	ldrb	r3, [r7, #27]
 800ed4c:	f003 0301 	and.w	r3, r3, #1
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d007      	beq.n	800ed64 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ed54:	7efb      	ldrb	r3, [r7, #27]
 800ed56:	f023 0301 	bic.w	r3, r3, #1
 800ed5a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ed5c:	7ebb      	ldrb	r3, [r7, #26]
 800ed5e:	f043 0301 	orr.w	r3, r3, #1
 800ed62:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7fa fa21 	bl	80091b2 <lwip_htonl>
 800ed70:	4602      	mov	r2, r0
 800ed72:	887b      	ldrh	r3, [r7, #2]
 800ed74:	18d1      	adds	r1, r2, r3
 800ed76:	7eba      	ldrb	r2, [r7, #26]
 800ed78:	7bfb      	ldrb	r3, [r7, #15]
 800ed7a:	9300      	str	r3, [sp, #0]
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	6939      	ldr	r1, [r7, #16]
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f7ff fea7 	bl	800ead4 <tcp_create_segment>
 800ed86:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d063      	beq.n	800ee56 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fb fd34 	bl	800a800 <pbuf_clen>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eda2:	1a9b      	subs	r3, r3, r2
 800eda4:	b29a      	uxth	r2, r3
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	6858      	ldr	r0, [r3, #4]
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	891a      	ldrh	r2, [r3, #8]
 800edb6:	89bb      	ldrh	r3, [r7, #12]
 800edb8:	1ad3      	subs	r3, r2, r3
 800edba:	b29b      	uxth	r3, r3
 800edbc:	4619      	mov	r1, r3
 800edbe:	f7fb fb11 	bl	800a3e4 <pbuf_realloc>
  useg->len -= remainder;
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	891a      	ldrh	r2, [r3, #8]
 800edc6:	89bb      	ldrh	r3, [r7, #12]
 800edc8:	1ad3      	subs	r3, r2, r3
 800edca:	b29a      	uxth	r2, r3
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	899b      	ldrh	r3, [r3, #12]
 800edd6:	b29c      	uxth	r4, r3
 800edd8:	7efb      	ldrb	r3, [r7, #27]
 800edda:	b29b      	uxth	r3, r3
 800eddc:	4618      	mov	r0, r3
 800edde:	f7fa f9d3 	bl	8009188 <lwip_htons>
 800ede2:	4603      	mov	r3, r0
 800ede4:	461a      	mov	r2, r3
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	68db      	ldr	r3, [r3, #12]
 800edea:	4322      	orrs	r2, r4
 800edec:	b292      	uxth	r2, r2
 800edee:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7fb fd03 	bl	800a800 <pbuf_clen>
 800edfa:	4603      	mov	r3, r0
 800edfc:	461a      	mov	r2, r3
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee04:	4413      	add	r3, r2
 800ee06:	b29a      	uxth	r2, r3
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7fb fcf4 	bl	800a800 <pbuf_clen>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee22:	4413      	add	r3, r2
 800ee24:	b29a      	uxth	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	69fa      	ldr	r2, [r7, #28]
 800ee38:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ee3a:	69fb      	ldr	r3, [r7, #28]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d103      	bne.n	800ee4a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2200      	movs	r2, #0
 800ee46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	e016      	b.n	800ee7c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ee4e:	bf00      	nop
 800ee50:	e002      	b.n	800ee58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ee52:	bf00      	nop
 800ee54:	e000      	b.n	800ee58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ee56:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ee58:	69fb      	ldr	r3, [r7, #28]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d006      	beq.n	800ee6c <tcp_split_unsent_seg+0x25c>
 800ee5e:	4b09      	ldr	r3, [pc, #36]	; (800ee84 <tcp_split_unsent_seg+0x274>)
 800ee60:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ee64:	490d      	ldr	r1, [pc, #52]	; (800ee9c <tcp_split_unsent_seg+0x28c>)
 800ee66:	4809      	ldr	r0, [pc, #36]	; (800ee8c <tcp_split_unsent_seg+0x27c>)
 800ee68:	f004 fb46 	bl	80134f8 <iprintf>
  if (p != NULL) {
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d002      	beq.n	800ee78 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ee72:	6938      	ldr	r0, [r7, #16]
 800ee74:	f7fb fc3c 	bl	800a6f0 <pbuf_free>
  }

  return ERR_MEM;
 800ee78:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3724      	adds	r7, #36	; 0x24
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd90      	pop	{r4, r7, pc}
 800ee84:	08015ff0 	.word	0x08015ff0
 800ee88:	08016384 	.word	0x08016384
 800ee8c:	08016044 	.word	0x08016044
 800ee90:	080163a8 	.word	0x080163a8
 800ee94:	080163cc 	.word	0x080163cc
 800ee98:	080163dc 	.word	0x080163dc
 800ee9c:	080163ec 	.word	0x080163ec

0800eea0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800eea0:	b590      	push	{r4, r7, lr}
 800eea2:	b085      	sub	sp, #20
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d106      	bne.n	800eebc <tcp_send_fin+0x1c>
 800eeae:	4b21      	ldr	r3, [pc, #132]	; (800ef34 <tcp_send_fin+0x94>)
 800eeb0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800eeb4:	4920      	ldr	r1, [pc, #128]	; (800ef38 <tcp_send_fin+0x98>)
 800eeb6:	4821      	ldr	r0, [pc, #132]	; (800ef3c <tcp_send_fin+0x9c>)
 800eeb8:	f004 fb1e 	bl	80134f8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d02e      	beq.n	800ef22 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eec8:	60fb      	str	r3, [r7, #12]
 800eeca:	e002      	b.n	800eed2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1f8      	bne.n	800eecc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	899b      	ldrh	r3, [r3, #12]
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7fa f950 	bl	8009188 <lwip_htons>
 800eee8:	4603      	mov	r3, r0
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	f003 0307 	and.w	r3, r3, #7
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d116      	bne.n	800ef22 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	899b      	ldrh	r3, [r3, #12]
 800eefa:	b29c      	uxth	r4, r3
 800eefc:	2001      	movs	r0, #1
 800eefe:	f7fa f943 	bl	8009188 <lwip_htons>
 800ef02:	4603      	mov	r3, r0
 800ef04:	461a      	mov	r2, r3
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	68db      	ldr	r3, [r3, #12]
 800ef0a:	4322      	orrs	r2, r4
 800ef0c:	b292      	uxth	r2, r2
 800ef0e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	8b5b      	ldrh	r3, [r3, #26]
 800ef14:	f043 0320 	orr.w	r3, r3, #32
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	e004      	b.n	800ef2c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ef22:	2101      	movs	r1, #1
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f000 f80b 	bl	800ef40 <tcp_enqueue_flags>
 800ef2a:	4603      	mov	r3, r0
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3714      	adds	r7, #20
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd90      	pop	{r4, r7, pc}
 800ef34:	08015ff0 	.word	0x08015ff0
 800ef38:	080163f8 	.word	0x080163f8
 800ef3c:	08016044 	.word	0x08016044

0800ef40 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b08a      	sub	sp, #40	; 0x28
 800ef44:	af02      	add	r7, sp, #8
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	460b      	mov	r3, r1
 800ef4a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ef50:	2300      	movs	r3, #0
 800ef52:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ef54:	78fb      	ldrb	r3, [r7, #3]
 800ef56:	f003 0303 	and.w	r3, r3, #3
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d106      	bne.n	800ef6c <tcp_enqueue_flags+0x2c>
 800ef5e:	4b67      	ldr	r3, [pc, #412]	; (800f0fc <tcp_enqueue_flags+0x1bc>)
 800ef60:	f240 4211 	movw	r2, #1041	; 0x411
 800ef64:	4966      	ldr	r1, [pc, #408]	; (800f100 <tcp_enqueue_flags+0x1c0>)
 800ef66:	4867      	ldr	r0, [pc, #412]	; (800f104 <tcp_enqueue_flags+0x1c4>)
 800ef68:	f004 fac6 	bl	80134f8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d106      	bne.n	800ef80 <tcp_enqueue_flags+0x40>
 800ef72:	4b62      	ldr	r3, [pc, #392]	; (800f0fc <tcp_enqueue_flags+0x1bc>)
 800ef74:	f240 4213 	movw	r2, #1043	; 0x413
 800ef78:	4963      	ldr	r1, [pc, #396]	; (800f108 <tcp_enqueue_flags+0x1c8>)
 800ef7a:	4862      	ldr	r0, [pc, #392]	; (800f104 <tcp_enqueue_flags+0x1c4>)
 800ef7c:	f004 fabc 	bl	80134f8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ef80:	78fb      	ldrb	r3, [r7, #3]
 800ef82:	f003 0302 	and.w	r3, r3, #2
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d001      	beq.n	800ef8e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ef8e:	7ffb      	ldrb	r3, [r7, #31]
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	f003 0304 	and.w	r3, r3, #4
 800ef98:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ef9a:	7dfb      	ldrb	r3, [r7, #23]
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800efa2:	4619      	mov	r1, r3
 800efa4:	2036      	movs	r0, #54	; 0x36
 800efa6:	f7fb f8bf 	bl	800a128 <pbuf_alloc>
 800efaa:	6138      	str	r0, [r7, #16]
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d109      	bne.n	800efc6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	8b5b      	ldrh	r3, [r3, #26]
 800efb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efba:	b29a      	uxth	r2, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800efc0:	f04f 33ff 	mov.w	r3, #4294967295
 800efc4:	e095      	b.n	800f0f2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	895a      	ldrh	r2, [r3, #10]
 800efca:	7dfb      	ldrb	r3, [r7, #23]
 800efcc:	b29b      	uxth	r3, r3
 800efce:	429a      	cmp	r2, r3
 800efd0:	d206      	bcs.n	800efe0 <tcp_enqueue_flags+0xa0>
 800efd2:	4b4a      	ldr	r3, [pc, #296]	; (800f0fc <tcp_enqueue_flags+0x1bc>)
 800efd4:	f240 4239 	movw	r2, #1081	; 0x439
 800efd8:	494c      	ldr	r1, [pc, #304]	; (800f10c <tcp_enqueue_flags+0x1cc>)
 800efda:	484a      	ldr	r0, [pc, #296]	; (800f104 <tcp_enqueue_flags+0x1c4>)
 800efdc:	f004 fa8c 	bl	80134f8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800efe4:	78fa      	ldrb	r2, [r7, #3]
 800efe6:	7ffb      	ldrb	r3, [r7, #31]
 800efe8:	9300      	str	r3, [sp, #0]
 800efea:	460b      	mov	r3, r1
 800efec:	6939      	ldr	r1, [r7, #16]
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7ff fd70 	bl	800ead4 <tcp_create_segment>
 800eff4:	60f8      	str	r0, [r7, #12]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d109      	bne.n	800f010 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	8b5b      	ldrh	r3, [r3, #26]
 800f000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f004:	b29a      	uxth	r2, r3
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f00a:	f04f 33ff 	mov.w	r3, #4294967295
 800f00e:	e070      	b.n	800f0f2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	68db      	ldr	r3, [r3, #12]
 800f014:	f003 0303 	and.w	r3, r3, #3
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d006      	beq.n	800f02a <tcp_enqueue_flags+0xea>
 800f01c:	4b37      	ldr	r3, [pc, #220]	; (800f0fc <tcp_enqueue_flags+0x1bc>)
 800f01e:	f240 4242 	movw	r2, #1090	; 0x442
 800f022:	493b      	ldr	r1, [pc, #236]	; (800f110 <tcp_enqueue_flags+0x1d0>)
 800f024:	4837      	ldr	r0, [pc, #220]	; (800f104 <tcp_enqueue_flags+0x1c4>)
 800f026:	f004 fa67 	bl	80134f8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	891b      	ldrh	r3, [r3, #8]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d006      	beq.n	800f040 <tcp_enqueue_flags+0x100>
 800f032:	4b32      	ldr	r3, [pc, #200]	; (800f0fc <tcp_enqueue_flags+0x1bc>)
 800f034:	f240 4243 	movw	r2, #1091	; 0x443
 800f038:	4936      	ldr	r1, [pc, #216]	; (800f114 <tcp_enqueue_flags+0x1d4>)
 800f03a:	4832      	ldr	r0, [pc, #200]	; (800f104 <tcp_enqueue_flags+0x1c4>)
 800f03c:	f004 fa5c 	bl	80134f8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f044:	2b00      	cmp	r3, #0
 800f046:	d103      	bne.n	800f050 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	66da      	str	r2, [r3, #108]	; 0x6c
 800f04e:	e00d      	b.n	800f06c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f054:	61bb      	str	r3, [r7, #24]
 800f056:	e002      	b.n	800f05e <tcp_enqueue_flags+0x11e>
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	61bb      	str	r3, [r7, #24]
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d1f8      	bne.n	800f058 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2200      	movs	r2, #0
 800f070:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f074:	78fb      	ldrb	r3, [r7, #3]
 800f076:	f003 0302 	and.w	r3, r3, #2
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d104      	bne.n	800f088 <tcp_enqueue_flags+0x148>
 800f07e:	78fb      	ldrb	r3, [r7, #3]
 800f080:	f003 0301 	and.w	r3, r3, #1
 800f084:	2b00      	cmp	r3, #0
 800f086:	d004      	beq.n	800f092 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f08c:	1c5a      	adds	r2, r3, #1
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f092:	78fb      	ldrb	r3, [r7, #3]
 800f094:	f003 0301 	and.w	r3, r3, #1
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d006      	beq.n	800f0aa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	8b5b      	ldrh	r3, [r3, #26]
 800f0a0:	f043 0320 	orr.w	r3, r3, #32
 800f0a4:	b29a      	uxth	r2, r3
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7fb fba6 	bl	800a800 <pbuf_clen>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f0be:	4413      	add	r3, r2
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d00e      	beq.n	800f0f0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d10a      	bne.n	800f0f0 <tcp_enqueue_flags+0x1b0>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d106      	bne.n	800f0f0 <tcp_enqueue_flags+0x1b0>
 800f0e2:	4b06      	ldr	r3, [pc, #24]	; (800f0fc <tcp_enqueue_flags+0x1bc>)
 800f0e4:	f240 4265 	movw	r2, #1125	; 0x465
 800f0e8:	490b      	ldr	r1, [pc, #44]	; (800f118 <tcp_enqueue_flags+0x1d8>)
 800f0ea:	4806      	ldr	r0, [pc, #24]	; (800f104 <tcp_enqueue_flags+0x1c4>)
 800f0ec:	f004 fa04 	bl	80134f8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f0f0:	2300      	movs	r3, #0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3720      	adds	r7, #32
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	08015ff0 	.word	0x08015ff0
 800f100:	08016414 	.word	0x08016414
 800f104:	08016044 	.word	0x08016044
 800f108:	0801646c 	.word	0x0801646c
 800f10c:	0801648c 	.word	0x0801648c
 800f110:	080164c8 	.word	0x080164c8
 800f114:	080164e0 	.word	0x080164e0
 800f118:	0801650c 	.word	0x0801650c

0800f11c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f11c:	b5b0      	push	{r4, r5, r7, lr}
 800f11e:	b08a      	sub	sp, #40	; 0x28
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d106      	bne.n	800f138 <tcp_output+0x1c>
 800f12a:	4b8a      	ldr	r3, [pc, #552]	; (800f354 <tcp_output+0x238>)
 800f12c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f130:	4989      	ldr	r1, [pc, #548]	; (800f358 <tcp_output+0x23c>)
 800f132:	488a      	ldr	r0, [pc, #552]	; (800f35c <tcp_output+0x240>)
 800f134:	f004 f9e0 	bl	80134f8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	7d1b      	ldrb	r3, [r3, #20]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d106      	bne.n	800f14e <tcp_output+0x32>
 800f140:	4b84      	ldr	r3, [pc, #528]	; (800f354 <tcp_output+0x238>)
 800f142:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f146:	4986      	ldr	r1, [pc, #536]	; (800f360 <tcp_output+0x244>)
 800f148:	4884      	ldr	r0, [pc, #528]	; (800f35c <tcp_output+0x240>)
 800f14a:	f004 f9d5 	bl	80134f8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f14e:	4b85      	ldr	r3, [pc, #532]	; (800f364 <tcp_output+0x248>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	429a      	cmp	r2, r3
 800f156:	d101      	bne.n	800f15c <tcp_output+0x40>
    return ERR_OK;
 800f158:	2300      	movs	r3, #0
 800f15a:	e1ce      	b.n	800f4fa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f168:	4293      	cmp	r3, r2
 800f16a:	bf28      	it	cs
 800f16c:	4613      	movcs	r3, r2
 800f16e:	b29b      	uxth	r3, r3
 800f170:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f176:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d10b      	bne.n	800f196 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	8b5b      	ldrh	r3, [r3, #26]
 800f182:	f003 0302 	and.w	r3, r3, #2
 800f186:	2b00      	cmp	r3, #0
 800f188:	f000 81aa 	beq.w	800f4e0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f000 fdcb 	bl	800fd28 <tcp_send_empty_ack>
 800f192:	4603      	mov	r3, r0
 800f194:	e1b1      	b.n	800f4fa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f196:	6879      	ldr	r1, [r7, #4]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	3304      	adds	r3, #4
 800f19c:	461a      	mov	r2, r3
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f7ff fc7c 	bl	800ea9c <tcp_route>
 800f1a4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d102      	bne.n	800f1b2 <tcp_output+0x96>
    return ERR_RTE;
 800f1ac:	f06f 0303 	mvn.w	r3, #3
 800f1b0:	e1a3      	b.n	800f4fa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d003      	beq.n	800f1c0 <tcp_output+0xa4>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d111      	bne.n	800f1e4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d002      	beq.n	800f1cc <tcp_output+0xb0>
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	e000      	b.n	800f1ce <tcp_output+0xb2>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d102      	bne.n	800f1dc <tcp_output+0xc0>
      return ERR_RTE;
 800f1d6:	f06f 0303 	mvn.w	r3, #3
 800f1da:	e18e      	b.n	800f4fa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7f9 ffe1 	bl	80091b2 <lwip_htonl>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1f6:	1ad3      	subs	r3, r2, r3
 800f1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1fa:	8912      	ldrh	r2, [r2, #8]
 800f1fc:	4413      	add	r3, r2
 800f1fe:	69ba      	ldr	r2, [r7, #24]
 800f200:	429a      	cmp	r2, r3
 800f202:	d227      	bcs.n	800f254 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f20a:	461a      	mov	r2, r3
 800f20c:	69bb      	ldr	r3, [r7, #24]
 800f20e:	4293      	cmp	r3, r2
 800f210:	d114      	bne.n	800f23c <tcp_output+0x120>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f216:	2b00      	cmp	r3, #0
 800f218:	d110      	bne.n	800f23c <tcp_output+0x120>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10b      	bne.n	800f23c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2201      	movs	r2, #1
 800f230:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	8b5b      	ldrh	r3, [r3, #26]
 800f240:	f003 0302 	and.w	r3, r3, #2
 800f244:	2b00      	cmp	r3, #0
 800f246:	f000 814d 	beq.w	800f4e4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 fd6c 	bl	800fd28 <tcp_send_empty_ack>
 800f250:	4603      	mov	r3, r0
 800f252:	e152      	b.n	800f4fa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2200      	movs	r2, #0
 800f258:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f260:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f262:	6a3b      	ldr	r3, [r7, #32]
 800f264:	2b00      	cmp	r3, #0
 800f266:	f000 811c 	beq.w	800f4a2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f26a:	e002      	b.n	800f272 <tcp_output+0x156>
 800f26c:	6a3b      	ldr	r3, [r7, #32]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	623b      	str	r3, [r7, #32]
 800f272:	6a3b      	ldr	r3, [r7, #32]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1f8      	bne.n	800f26c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f27a:	e112      	b.n	800f4a2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27e:	68db      	ldr	r3, [r3, #12]
 800f280:	899b      	ldrh	r3, [r3, #12]
 800f282:	b29b      	uxth	r3, r3
 800f284:	4618      	mov	r0, r3
 800f286:	f7f9 ff7f 	bl	8009188 <lwip_htons>
 800f28a:	4603      	mov	r3, r0
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	f003 0304 	and.w	r3, r3, #4
 800f292:	2b00      	cmp	r3, #0
 800f294:	d006      	beq.n	800f2a4 <tcp_output+0x188>
 800f296:	4b2f      	ldr	r3, [pc, #188]	; (800f354 <tcp_output+0x238>)
 800f298:	f240 5236 	movw	r2, #1334	; 0x536
 800f29c:	4932      	ldr	r1, [pc, #200]	; (800f368 <tcp_output+0x24c>)
 800f29e:	482f      	ldr	r0, [pc, #188]	; (800f35c <tcp_output+0x240>)
 800f2a0:	f004 f92a 	bl	80134f8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d01f      	beq.n	800f2ec <tcp_output+0x1d0>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	8b5b      	ldrh	r3, [r3, #26]
 800f2b0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d119      	bne.n	800f2ec <tcp_output+0x1d0>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d00b      	beq.n	800f2d8 <tcp_output+0x1bc>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d110      	bne.n	800f2ec <tcp_output+0x1d0>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2ce:	891a      	ldrh	r2, [r3, #8]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d209      	bcs.n	800f2ec <tcp_output+0x1d0>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d004      	beq.n	800f2ec <tcp_output+0x1d0>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f2e8:	2b08      	cmp	r3, #8
 800f2ea:	d901      	bls.n	800f2f0 <tcp_output+0x1d4>
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e000      	b.n	800f2f2 <tcp_output+0x1d6>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d106      	bne.n	800f304 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	8b5b      	ldrh	r3, [r3, #26]
 800f2fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	f000 80e4 	beq.w	800f4cc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	7d1b      	ldrb	r3, [r3, #20]
 800f308:	2b02      	cmp	r3, #2
 800f30a:	d00d      	beq.n	800f328 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	899b      	ldrh	r3, [r3, #12]
 800f312:	b29c      	uxth	r4, r3
 800f314:	2010      	movs	r0, #16
 800f316:	f7f9 ff37 	bl	8009188 <lwip_htons>
 800f31a:	4603      	mov	r3, r0
 800f31c:	461a      	mov	r2, r3
 800f31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	4322      	orrs	r2, r4
 800f324:	b292      	uxth	r2, r2
 800f326:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f328:	697a      	ldr	r2, [r7, #20]
 800f32a:	6879      	ldr	r1, [r7, #4]
 800f32c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f32e:	f000 f909 	bl	800f544 <tcp_output_segment>
 800f332:	4603      	mov	r3, r0
 800f334:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d016      	beq.n	800f36c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	8b5b      	ldrh	r3, [r3, #26]
 800f342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f346:	b29a      	uxth	r2, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	835a      	strh	r2, [r3, #26]
      return err;
 800f34c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f350:	e0d3      	b.n	800f4fa <tcp_output+0x3de>
 800f352:	bf00      	nop
 800f354:	08015ff0 	.word	0x08015ff0
 800f358:	08016534 	.word	0x08016534
 800f35c:	08016044 	.word	0x08016044
 800f360:	0801654c 	.word	0x0801654c
 800f364:	20008e28 	.word	0x20008e28
 800f368:	08016574 	.word	0x08016574
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	7d1b      	ldrb	r3, [r3, #20]
 800f378:	2b02      	cmp	r3, #2
 800f37a:	d006      	beq.n	800f38a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	8b5b      	ldrh	r3, [r3, #26]
 800f380:	f023 0303 	bic.w	r3, r3, #3
 800f384:	b29a      	uxth	r2, r3
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	4618      	mov	r0, r3
 800f392:	f7f9 ff0e 	bl	80091b2 <lwip_htonl>
 800f396:	4604      	mov	r4, r0
 800f398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39a:	891b      	ldrh	r3, [r3, #8]
 800f39c:	461d      	mov	r5, r3
 800f39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	899b      	ldrh	r3, [r3, #12]
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7f9 feee 	bl	8009188 <lwip_htons>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	f003 0303 	and.w	r3, r3, #3
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d001      	beq.n	800f3bc <tcp_output+0x2a0>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e000      	b.n	800f3be <tcp_output+0x2a2>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	442b      	add	r3, r5
 800f3c0:	4423      	add	r3, r4
 800f3c2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	1ad3      	subs	r3, r2, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	da02      	bge.n	800f3d6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	68ba      	ldr	r2, [r7, #8]
 800f3d4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d8:	891b      	ldrh	r3, [r3, #8]
 800f3da:	461c      	mov	r4, r3
 800f3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3de:	68db      	ldr	r3, [r3, #12]
 800f3e0:	899b      	ldrh	r3, [r3, #12]
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7f9 fecf 	bl	8009188 <lwip_htons>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	f003 0303 	and.w	r3, r3, #3
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d001      	beq.n	800f3fa <tcp_output+0x2de>
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	e000      	b.n	800f3fc <tcp_output+0x2e0>
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	4423      	add	r3, r4
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d049      	beq.n	800f496 <tcp_output+0x37a>
      seg->next = NULL;
 800f402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f404:	2200      	movs	r2, #0
 800f406:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d105      	bne.n	800f41c <tcp_output+0x300>
        pcb->unacked = seg;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f414:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f418:	623b      	str	r3, [r7, #32]
 800f41a:	e03f      	b.n	800f49c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	4618      	mov	r0, r3
 800f424:	f7f9 fec5 	bl	80091b2 <lwip_htonl>
 800f428:	4604      	mov	r4, r0
 800f42a:	6a3b      	ldr	r3, [r7, #32]
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	4618      	mov	r0, r3
 800f432:	f7f9 febe 	bl	80091b2 <lwip_htonl>
 800f436:	4603      	mov	r3, r0
 800f438:	1ae3      	subs	r3, r4, r3
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	da24      	bge.n	800f488 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	3370      	adds	r3, #112	; 0x70
 800f442:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f444:	e002      	b.n	800f44c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f446:	69fb      	ldr	r3, [r7, #28]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d011      	beq.n	800f478 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7f9 fea8 	bl	80091b2 <lwip_htonl>
 800f462:	4604      	mov	r4, r0
 800f464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f466:	68db      	ldr	r3, [r3, #12]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7f9 fea1 	bl	80091b2 <lwip_htonl>
 800f470:	4603      	mov	r3, r0
 800f472:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f474:	2b00      	cmp	r3, #0
 800f476:	dbe6      	blt.n	800f446 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f484:	601a      	str	r2, [r3, #0]
 800f486:	e009      	b.n	800f49c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f488:	6a3b      	ldr	r3, [r7, #32]
 800f48a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f48c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f48e:	6a3b      	ldr	r3, [r7, #32]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	623b      	str	r3, [r7, #32]
 800f494:	e002      	b.n	800f49c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f496:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f498:	f7fc fc3f 	bl	800bd1a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d012      	beq.n	800f4ce <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7f9 fe7f 	bl	80091b2 <lwip_htonl>
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4ba:	1ad3      	subs	r3, r2, r3
 800f4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4be:	8912      	ldrh	r2, [r2, #8]
 800f4c0:	4413      	add	r3, r2
  while (seg != NULL &&
 800f4c2:	69ba      	ldr	r2, [r7, #24]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	f4bf aed9 	bcs.w	800f27c <tcp_output+0x160>
 800f4ca:	e000      	b.n	800f4ce <tcp_output+0x3b2>
      break;
 800f4cc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d108      	bne.n	800f4e8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f4de:	e004      	b.n	800f4ea <tcp_output+0x3ce>
    goto output_done;
 800f4e0:	bf00      	nop
 800f4e2:	e002      	b.n	800f4ea <tcp_output+0x3ce>
    goto output_done;
 800f4e4:	bf00      	nop
 800f4e6:	e000      	b.n	800f4ea <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f4e8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	8b5b      	ldrh	r3, [r3, #26]
 800f4ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f4f2:	b29a      	uxth	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f4f8:	2300      	movs	r3, #0
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3728      	adds	r7, #40	; 0x28
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bdb0      	pop	{r4, r5, r7, pc}
 800f502:	bf00      	nop

0800f504 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d106      	bne.n	800f520 <tcp_output_segment_busy+0x1c>
 800f512:	4b09      	ldr	r3, [pc, #36]	; (800f538 <tcp_output_segment_busy+0x34>)
 800f514:	f240 529a 	movw	r2, #1434	; 0x59a
 800f518:	4908      	ldr	r1, [pc, #32]	; (800f53c <tcp_output_segment_busy+0x38>)
 800f51a:	4809      	ldr	r0, [pc, #36]	; (800f540 <tcp_output_segment_busy+0x3c>)
 800f51c:	f003 ffec 	bl	80134f8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	7b9b      	ldrb	r3, [r3, #14]
 800f526:	2b01      	cmp	r3, #1
 800f528:	d001      	beq.n	800f52e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f52a:	2301      	movs	r3, #1
 800f52c:	e000      	b.n	800f530 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f52e:	2300      	movs	r3, #0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3708      	adds	r7, #8
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}
 800f538:	08015ff0 	.word	0x08015ff0
 800f53c:	0801658c 	.word	0x0801658c
 800f540:	08016044 	.word	0x08016044

0800f544 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f544:	b5b0      	push	{r4, r5, r7, lr}
 800f546:	b08c      	sub	sp, #48	; 0x30
 800f548:	af04      	add	r7, sp, #16
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d106      	bne.n	800f564 <tcp_output_segment+0x20>
 800f556:	4b63      	ldr	r3, [pc, #396]	; (800f6e4 <tcp_output_segment+0x1a0>)
 800f558:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f55c:	4962      	ldr	r1, [pc, #392]	; (800f6e8 <tcp_output_segment+0x1a4>)
 800f55e:	4863      	ldr	r0, [pc, #396]	; (800f6ec <tcp_output_segment+0x1a8>)
 800f560:	f003 ffca 	bl	80134f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d106      	bne.n	800f578 <tcp_output_segment+0x34>
 800f56a:	4b5e      	ldr	r3, [pc, #376]	; (800f6e4 <tcp_output_segment+0x1a0>)
 800f56c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f570:	495f      	ldr	r1, [pc, #380]	; (800f6f0 <tcp_output_segment+0x1ac>)
 800f572:	485e      	ldr	r0, [pc, #376]	; (800f6ec <tcp_output_segment+0x1a8>)
 800f574:	f003 ffc0 	bl	80134f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d106      	bne.n	800f58c <tcp_output_segment+0x48>
 800f57e:	4b59      	ldr	r3, [pc, #356]	; (800f6e4 <tcp_output_segment+0x1a0>)
 800f580:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f584:	495b      	ldr	r1, [pc, #364]	; (800f6f4 <tcp_output_segment+0x1b0>)
 800f586:	4859      	ldr	r0, [pc, #356]	; (800f6ec <tcp_output_segment+0x1a8>)
 800f588:	f003 ffb6 	bl	80134f8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f58c:	68f8      	ldr	r0, [r7, #12]
 800f58e:	f7ff ffb9 	bl	800f504 <tcp_output_segment_busy>
 800f592:	4603      	mov	r3, r0
 800f594:	2b00      	cmp	r3, #0
 800f596:	d001      	beq.n	800f59c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f598:	2300      	movs	r3, #0
 800f59a:	e09f      	b.n	800f6dc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	68dc      	ldr	r4, [r3, #12]
 800f5a4:	4610      	mov	r0, r2
 800f5a6:	f7f9 fe04 	bl	80091b2 <lwip_htonl>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	68dc      	ldr	r4, [r3, #12]
 800f5b6:	4610      	mov	r0, r2
 800f5b8:	f7f9 fde6 	bl	8009188 <lwip_htons>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f5c8:	441a      	add	r2, r3
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	68db      	ldr	r3, [r3, #12]
 800f5d2:	3314      	adds	r3, #20
 800f5d4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	7a9b      	ldrb	r3, [r3, #10]
 800f5da:	f003 0301 	and.w	r3, r3, #1
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d015      	beq.n	800f60e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	3304      	adds	r3, #4
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	6879      	ldr	r1, [r7, #4]
 800f5ea:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f5ee:	f7fc fe8b 	bl	800c308 <tcp_eff_send_mss_netif>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f5f6:	8b7b      	ldrh	r3, [r7, #26]
 800f5f8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7f9 fdd8 	bl	80091b2 <lwip_htonl>
 800f602:	4602      	mov	r2, r0
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	3304      	adds	r3, #4
 800f60c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f614:	2b00      	cmp	r3, #0
 800f616:	da02      	bge.n	800f61e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	2200      	movs	r2, #0
 800f61c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f622:	2b00      	cmp	r3, #0
 800f624:	d10c      	bne.n	800f640 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f626:	4b34      	ldr	r3, [pc, #208]	; (800f6f8 <tcp_output_segment+0x1b4>)
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	4618      	mov	r0, r3
 800f636:	f7f9 fdbc 	bl	80091b2 <lwip_htonl>
 800f63a:	4602      	mov	r2, r0
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	68da      	ldr	r2, [r3, #12]
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	1ad3      	subs	r3, r2, r3
 800f64c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	8959      	ldrh	r1, [r3, #10]
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	8b3a      	ldrh	r2, [r7, #24]
 800f65a:	1a8a      	subs	r2, r1, r2
 800f65c:	b292      	uxth	r2, r2
 800f65e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	8919      	ldrh	r1, [r3, #8]
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	8b3a      	ldrh	r2, [r7, #24]
 800f66c:	1a8a      	subs	r2, r1, r2
 800f66e:	b292      	uxth	r2, r2
 800f670:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	685b      	ldr	r3, [r3, #4]
 800f676:	68fa      	ldr	r2, [r7, #12]
 800f678:	68d2      	ldr	r2, [r2, #12]
 800f67a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	2200      	movs	r2, #0
 800f682:	741a      	strb	r2, [r3, #16]
 800f684:	2200      	movs	r2, #0
 800f686:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	f103 0214 	add.w	r2, r3, #20
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	7a9b      	ldrb	r3, [r3, #10]
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	f003 0304 	and.w	r3, r3, #4
 800f69a:	4413      	add	r3, r2
 800f69c:	69fa      	ldr	r2, [r7, #28]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d006      	beq.n	800f6b0 <tcp_output_segment+0x16c>
 800f6a2:	4b10      	ldr	r3, [pc, #64]	; (800f6e4 <tcp_output_segment+0x1a0>)
 800f6a4:	f240 621c 	movw	r2, #1564	; 0x61c
 800f6a8:	4914      	ldr	r1, [pc, #80]	; (800f6fc <tcp_output_segment+0x1b8>)
 800f6aa:	4810      	ldr	r0, [pc, #64]	; (800f6ec <tcp_output_segment+0x1a8>)
 800f6ac:	f003 ff24 	bl	80134f8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	6858      	ldr	r0, [r3, #4]
 800f6b4:	68b9      	ldr	r1, [r7, #8]
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	1d1c      	adds	r4, r3, #4
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	7add      	ldrb	r5, [r3, #11]
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	7a9b      	ldrb	r3, [r3, #10]
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	9202      	str	r2, [sp, #8]
 800f6c6:	2206      	movs	r2, #6
 800f6c8:	9201      	str	r2, [sp, #4]
 800f6ca:	9300      	str	r3, [sp, #0]
 800f6cc:	462b      	mov	r3, r5
 800f6ce:	4622      	mov	r2, r4
 800f6d0:	f002 fdf0 	bl	80122b4 <ip4_output_if>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f6d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3720      	adds	r7, #32
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bdb0      	pop	{r4, r5, r7, pc}
 800f6e4:	08015ff0 	.word	0x08015ff0
 800f6e8:	080165b4 	.word	0x080165b4
 800f6ec:	08016044 	.word	0x08016044
 800f6f0:	080165d4 	.word	0x080165d4
 800f6f4:	080165f4 	.word	0x080165f4
 800f6f8:	20008ddc 	.word	0x20008ddc
 800f6fc:	08016618 	.word	0x08016618

0800f700 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f700:	b5b0      	push	{r4, r5, r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d106      	bne.n	800f71c <tcp_rexmit_rto_prepare+0x1c>
 800f70e:	4b31      	ldr	r3, [pc, #196]	; (800f7d4 <tcp_rexmit_rto_prepare+0xd4>)
 800f710:	f240 6263 	movw	r2, #1635	; 0x663
 800f714:	4930      	ldr	r1, [pc, #192]	; (800f7d8 <tcp_rexmit_rto_prepare+0xd8>)
 800f716:	4831      	ldr	r0, [pc, #196]	; (800f7dc <tcp_rexmit_rto_prepare+0xdc>)
 800f718:	f003 feee 	bl	80134f8 <iprintf>

  if (pcb->unacked == NULL) {
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f720:	2b00      	cmp	r3, #0
 800f722:	d102      	bne.n	800f72a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f724:	f06f 0305 	mvn.w	r3, #5
 800f728:	e050      	b.n	800f7cc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f72e:	60fb      	str	r3, [r7, #12]
 800f730:	e00b      	b.n	800f74a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f732:	68f8      	ldr	r0, [r7, #12]
 800f734:	f7ff fee6 	bl	800f504 <tcp_output_segment_busy>
 800f738:	4603      	mov	r3, r0
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d002      	beq.n	800f744 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f73e:	f06f 0305 	mvn.w	r3, #5
 800f742:	e043      	b.n	800f7cc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	60fb      	str	r3, [r7, #12]
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d1ef      	bne.n	800f732 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	f7ff fed6 	bl	800f504 <tcp_output_segment_busy>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d002      	beq.n	800f764 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f75e:	f06f 0305 	mvn.w	r3, #5
 800f762:	e033      	b.n	800f7cc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2200      	movs	r2, #0
 800f778:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	8b5b      	ldrh	r3, [r3, #26]
 800f77e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f782:	b29a      	uxth	r2, r3
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	4618      	mov	r0, r3
 800f790:	f7f9 fd0f 	bl	80091b2 <lwip_htonl>
 800f794:	4604      	mov	r4, r0
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	891b      	ldrh	r3, [r3, #8]
 800f79a:	461d      	mov	r5, r3
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	899b      	ldrh	r3, [r3, #12]
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7f9 fcef 	bl	8009188 <lwip_htons>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	f003 0303 	and.w	r3, r3, #3
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d001      	beq.n	800f7ba <tcp_rexmit_rto_prepare+0xba>
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e000      	b.n	800f7bc <tcp_rexmit_rto_prepare+0xbc>
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	442b      	add	r3, r5
 800f7be:	18e2      	adds	r2, r4, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f7ca:	2300      	movs	r3, #0
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3710      	adds	r7, #16
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bdb0      	pop	{r4, r5, r7, pc}
 800f7d4:	08015ff0 	.word	0x08015ff0
 800f7d8:	0801662c 	.word	0x0801662c
 800f7dc:	08016044 	.word	0x08016044

0800f7e0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d106      	bne.n	800f7fc <tcp_rexmit_rto_commit+0x1c>
 800f7ee:	4b0d      	ldr	r3, [pc, #52]	; (800f824 <tcp_rexmit_rto_commit+0x44>)
 800f7f0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f7f4:	490c      	ldr	r1, [pc, #48]	; (800f828 <tcp_rexmit_rto_commit+0x48>)
 800f7f6:	480d      	ldr	r0, [pc, #52]	; (800f82c <tcp_rexmit_rto_commit+0x4c>)
 800f7f8:	f003 fe7e 	bl	80134f8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f802:	2bff      	cmp	r3, #255	; 0xff
 800f804:	d007      	beq.n	800f816 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f80c:	3301      	adds	r3, #1
 800f80e:	b2da      	uxtb	r2, r3
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f7ff fc80 	bl	800f11c <tcp_output>
}
 800f81c:	bf00      	nop
 800f81e:	3708      	adds	r7, #8
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	08015ff0 	.word	0x08015ff0
 800f828:	08016650 	.word	0x08016650
 800f82c:	08016044 	.word	0x08016044

0800f830 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d106      	bne.n	800f84c <tcp_rexmit_rto+0x1c>
 800f83e:	4b0a      	ldr	r3, [pc, #40]	; (800f868 <tcp_rexmit_rto+0x38>)
 800f840:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f844:	4909      	ldr	r1, [pc, #36]	; (800f86c <tcp_rexmit_rto+0x3c>)
 800f846:	480a      	ldr	r0, [pc, #40]	; (800f870 <tcp_rexmit_rto+0x40>)
 800f848:	f003 fe56 	bl	80134f8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f7ff ff57 	bl	800f700 <tcp_rexmit_rto_prepare>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d102      	bne.n	800f85e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f7ff ffc1 	bl	800f7e0 <tcp_rexmit_rto_commit>
  }
}
 800f85e:	bf00      	nop
 800f860:	3708      	adds	r7, #8
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	08015ff0 	.word	0x08015ff0
 800f86c:	08016674 	.word	0x08016674
 800f870:	08016044 	.word	0x08016044

0800f874 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f874:	b590      	push	{r4, r7, lr}
 800f876:	b085      	sub	sp, #20
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d106      	bne.n	800f890 <tcp_rexmit+0x1c>
 800f882:	4b2f      	ldr	r3, [pc, #188]	; (800f940 <tcp_rexmit+0xcc>)
 800f884:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f888:	492e      	ldr	r1, [pc, #184]	; (800f944 <tcp_rexmit+0xd0>)
 800f88a:	482f      	ldr	r0, [pc, #188]	; (800f948 <tcp_rexmit+0xd4>)
 800f88c:	f003 fe34 	bl	80134f8 <iprintf>

  if (pcb->unacked == NULL) {
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f894:	2b00      	cmp	r3, #0
 800f896:	d102      	bne.n	800f89e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f898:	f06f 0305 	mvn.w	r3, #5
 800f89c:	e04c      	b.n	800f938 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8a2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f8a4:	68b8      	ldr	r0, [r7, #8]
 800f8a6:	f7ff fe2d 	bl	800f504 <tcp_output_segment_busy>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d002      	beq.n	800f8b6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f8b0:	f06f 0305 	mvn.w	r3, #5
 800f8b4:	e040      	b.n	800f938 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	336c      	adds	r3, #108	; 0x6c
 800f8c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f8c4:	e002      	b.n	800f8cc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d011      	beq.n	800f8f8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7f9 fc68 	bl	80091b2 <lwip_htonl>
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7f9 fc61 	bl	80091b2 <lwip_htonl>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	dbe6      	blt.n	800f8c6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	68ba      	ldr	r2, [r7, #8]
 800f904:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d103      	bne.n	800f916 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f91c:	2bff      	cmp	r3, #255	; 0xff
 800f91e:	d007      	beq.n	800f930 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f926:	3301      	adds	r3, #1
 800f928:	b2da      	uxtb	r2, r3
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2200      	movs	r2, #0
 800f934:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f936:	2300      	movs	r3, #0
}
 800f938:	4618      	mov	r0, r3
 800f93a:	3714      	adds	r7, #20
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd90      	pop	{r4, r7, pc}
 800f940:	08015ff0 	.word	0x08015ff0
 800f944:	08016690 	.word	0x08016690
 800f948:	08016044 	.word	0x08016044

0800f94c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d106      	bne.n	800f968 <tcp_rexmit_fast+0x1c>
 800f95a:	4b2a      	ldr	r3, [pc, #168]	; (800fa04 <tcp_rexmit_fast+0xb8>)
 800f95c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f960:	4929      	ldr	r1, [pc, #164]	; (800fa08 <tcp_rexmit_fast+0xbc>)
 800f962:	482a      	ldr	r0, [pc, #168]	; (800fa0c <tcp_rexmit_fast+0xc0>)
 800f964:	f003 fdc8 	bl	80134f8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d044      	beq.n	800f9fa <tcp_rexmit_fast+0xae>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	8b5b      	ldrh	r3, [r3, #26]
 800f974:	f003 0304 	and.w	r3, r3, #4
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d13e      	bne.n	800f9fa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f7ff ff79 	bl	800f874 <tcp_rexmit>
 800f982:	4603      	mov	r3, r0
 800f984:	2b00      	cmp	r3, #0
 800f986:	d138      	bne.n	800f9fa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f994:	4293      	cmp	r3, r2
 800f996:	bf28      	it	cs
 800f998:	4613      	movcs	r3, r2
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	0fda      	lsrs	r2, r3, #31
 800f99e:	4413      	add	r3, r2
 800f9a0:	105b      	asrs	r3, r3, #1
 800f9a2:	b29a      	uxth	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9b6:	005b      	lsls	r3, r3, #1
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d206      	bcs.n	800f9ca <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9c0:	005b      	lsls	r3, r3, #1
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	0049      	lsls	r1, r1, #1
 800f9d8:	440b      	add	r3, r1
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	4413      	add	r3, r2
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	8b5b      	ldrh	r3, [r3, #26]
 800f9ea:	f043 0304 	orr.w	r3, r3, #4
 800f9ee:	b29a      	uxth	r2, r3
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f9fa:	bf00      	nop
 800f9fc:	3708      	adds	r7, #8
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	08015ff0 	.word	0x08015ff0
 800fa08:	080166a8 	.word	0x080166a8
 800fa0c:	08016044 	.word	0x08016044

0800fa10 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b086      	sub	sp, #24
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	607b      	str	r3, [r7, #4]
 800fa1a:	460b      	mov	r3, r1
 800fa1c:	817b      	strh	r3, [r7, #10]
 800fa1e:	4613      	mov	r3, r2
 800fa20:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fa22:	897a      	ldrh	r2, [r7, #10]
 800fa24:	893b      	ldrh	r3, [r7, #8]
 800fa26:	4413      	add	r3, r2
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	3314      	adds	r3, #20
 800fa2c:	b29b      	uxth	r3, r3
 800fa2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa32:	4619      	mov	r1, r3
 800fa34:	2022      	movs	r0, #34	; 0x22
 800fa36:	f7fa fb77 	bl	800a128 <pbuf_alloc>
 800fa3a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d04d      	beq.n	800fade <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fa42:	897b      	ldrh	r3, [r7, #10]
 800fa44:	3313      	adds	r3, #19
 800fa46:	697a      	ldr	r2, [r7, #20]
 800fa48:	8952      	ldrh	r2, [r2, #10]
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	db06      	blt.n	800fa5c <tcp_output_alloc_header_common+0x4c>
 800fa4e:	4b26      	ldr	r3, [pc, #152]	; (800fae8 <tcp_output_alloc_header_common+0xd8>)
 800fa50:	f240 7223 	movw	r2, #1827	; 0x723
 800fa54:	4925      	ldr	r1, [pc, #148]	; (800faec <tcp_output_alloc_header_common+0xdc>)
 800fa56:	4826      	ldr	r0, [pc, #152]	; (800faf0 <tcp_output_alloc_header_common+0xe0>)
 800fa58:	f003 fd4e 	bl	80134f8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800fa62:	8c3b      	ldrh	r3, [r7, #32]
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7f9 fb8f 	bl	8009188 <lwip_htons>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800fa72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7f9 fb87 	bl	8009188 <lwip_htons>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	687a      	ldr	r2, [r7, #4]
 800fa86:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fa88:	68f8      	ldr	r0, [r7, #12]
 800fa8a:	f7f9 fb92 	bl	80091b2 <lwip_htonl>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fa94:	897b      	ldrh	r3, [r7, #10]
 800fa96:	089b      	lsrs	r3, r3, #2
 800fa98:	b29b      	uxth	r3, r3
 800fa9a:	3305      	adds	r3, #5
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	031b      	lsls	r3, r3, #12
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	4313      	orrs	r3, r2
 800faaa:	b29b      	uxth	r3, r3
 800faac:	4618      	mov	r0, r3
 800faae:	f7f9 fb6b 	bl	8009188 <lwip_htons>
 800fab2:	4603      	mov	r3, r0
 800fab4:	461a      	mov	r2, r3
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800faba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7f9 fb63 	bl	8009188 <lwip_htons>
 800fac2:	4603      	mov	r3, r0
 800fac4:	461a      	mov	r2, r3
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	2200      	movs	r2, #0
 800face:	741a      	strb	r2, [r3, #16]
 800fad0:	2200      	movs	r2, #0
 800fad2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	2200      	movs	r2, #0
 800fad8:	749a      	strb	r2, [r3, #18]
 800fada:	2200      	movs	r2, #0
 800fadc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800fade:	697b      	ldr	r3, [r7, #20]
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3718      	adds	r7, #24
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	08015ff0 	.word	0x08015ff0
 800faec:	080166c8 	.word	0x080166c8
 800faf0:	08016044 	.word	0x08016044

0800faf4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800faf4:	b5b0      	push	{r4, r5, r7, lr}
 800faf6:	b08a      	sub	sp, #40	; 0x28
 800faf8:	af04      	add	r7, sp, #16
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	607b      	str	r3, [r7, #4]
 800fafe:	460b      	mov	r3, r1
 800fb00:	817b      	strh	r3, [r7, #10]
 800fb02:	4613      	mov	r3, r2
 800fb04:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d106      	bne.n	800fb1a <tcp_output_alloc_header+0x26>
 800fb0c:	4b15      	ldr	r3, [pc, #84]	; (800fb64 <tcp_output_alloc_header+0x70>)
 800fb0e:	f240 7242 	movw	r2, #1858	; 0x742
 800fb12:	4915      	ldr	r1, [pc, #84]	; (800fb68 <tcp_output_alloc_header+0x74>)
 800fb14:	4815      	ldr	r0, [pc, #84]	; (800fb6c <tcp_output_alloc_header+0x78>)
 800fb16:	f003 fcef 	bl	80134f8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	8adb      	ldrh	r3, [r3, #22]
 800fb22:	68fa      	ldr	r2, [r7, #12]
 800fb24:	8b12      	ldrh	r2, [r2, #24]
 800fb26:	68f9      	ldr	r1, [r7, #12]
 800fb28:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800fb2a:	893d      	ldrh	r5, [r7, #8]
 800fb2c:	897c      	ldrh	r4, [r7, #10]
 800fb2e:	9103      	str	r1, [sp, #12]
 800fb30:	2110      	movs	r1, #16
 800fb32:	9102      	str	r1, [sp, #8]
 800fb34:	9201      	str	r2, [sp, #4]
 800fb36:	9300      	str	r3, [sp, #0]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	462a      	mov	r2, r5
 800fb3c:	4621      	mov	r1, r4
 800fb3e:	f7ff ff67 	bl	800fa10 <tcp_output_alloc_header_common>
 800fb42:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d006      	beq.n	800fb58 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4e:	68fa      	ldr	r2, [r7, #12]
 800fb50:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fb52:	441a      	add	r2, r3
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fb58:	697b      	ldr	r3, [r7, #20]
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3718      	adds	r7, #24
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bdb0      	pop	{r4, r5, r7, pc}
 800fb62:	bf00      	nop
 800fb64:	08015ff0 	.word	0x08015ff0
 800fb68:	080166f8 	.word	0x080166f8
 800fb6c:	08016044 	.word	0x08016044

0800fb70 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b088      	sub	sp, #32
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	60b9      	str	r1, [r7, #8]
 800fb7a:	4611      	mov	r1, r2
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	460b      	mov	r3, r1
 800fb80:	71fb      	strb	r3, [r7, #7]
 800fb82:	4613      	mov	r3, r2
 800fb84:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800fb86:	2300      	movs	r3, #0
 800fb88:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d106      	bne.n	800fb9e <tcp_output_fill_options+0x2e>
 800fb90:	4b13      	ldr	r3, [pc, #76]	; (800fbe0 <tcp_output_fill_options+0x70>)
 800fb92:	f240 7256 	movw	r2, #1878	; 0x756
 800fb96:	4913      	ldr	r1, [pc, #76]	; (800fbe4 <tcp_output_fill_options+0x74>)
 800fb98:	4813      	ldr	r0, [pc, #76]	; (800fbe8 <tcp_output_fill_options+0x78>)
 800fb9a:	f003 fcad 	bl	80134f8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fba4:	69bb      	ldr	r3, [r7, #24]
 800fba6:	3314      	adds	r3, #20
 800fba8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fbaa:	69bb      	ldr	r3, [r7, #24]
 800fbac:	f103 0214 	add.w	r2, r3, #20
 800fbb0:	8bfb      	ldrh	r3, [r7, #30]
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	79fb      	ldrb	r3, [r7, #7]
 800fbb8:	009b      	lsls	r3, r3, #2
 800fbba:	f003 0304 	and.w	r3, r3, #4
 800fbbe:	440b      	add	r3, r1
 800fbc0:	4413      	add	r3, r2
 800fbc2:	697a      	ldr	r2, [r7, #20]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d006      	beq.n	800fbd6 <tcp_output_fill_options+0x66>
 800fbc8:	4b05      	ldr	r3, [pc, #20]	; (800fbe0 <tcp_output_fill_options+0x70>)
 800fbca:	f240 7275 	movw	r2, #1909	; 0x775
 800fbce:	4907      	ldr	r1, [pc, #28]	; (800fbec <tcp_output_fill_options+0x7c>)
 800fbd0:	4805      	ldr	r0, [pc, #20]	; (800fbe8 <tcp_output_fill_options+0x78>)
 800fbd2:	f003 fc91 	bl	80134f8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800fbd6:	bf00      	nop
 800fbd8:	3720      	adds	r7, #32
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	08015ff0 	.word	0x08015ff0
 800fbe4:	08016720 	.word	0x08016720
 800fbe8:	08016044 	.word	0x08016044
 800fbec:	08016618 	.word	0x08016618

0800fbf0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b08a      	sub	sp, #40	; 0x28
 800fbf4:	af04      	add	r7, sp, #16
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	60b9      	str	r1, [r7, #8]
 800fbfa:	607a      	str	r2, [r7, #4]
 800fbfc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d106      	bne.n	800fc12 <tcp_output_control_segment+0x22>
 800fc04:	4b1c      	ldr	r3, [pc, #112]	; (800fc78 <tcp_output_control_segment+0x88>)
 800fc06:	f240 7287 	movw	r2, #1927	; 0x787
 800fc0a:	491c      	ldr	r1, [pc, #112]	; (800fc7c <tcp_output_control_segment+0x8c>)
 800fc0c:	481c      	ldr	r0, [pc, #112]	; (800fc80 <tcp_output_control_segment+0x90>)
 800fc0e:	f003 fc73 	bl	80134f8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800fc12:	683a      	ldr	r2, [r7, #0]
 800fc14:	6879      	ldr	r1, [r7, #4]
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f7fe ff40 	bl	800ea9c <tcp_route>
 800fc1c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d102      	bne.n	800fc2a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800fc24:	23fc      	movs	r3, #252	; 0xfc
 800fc26:	75fb      	strb	r3, [r7, #23]
 800fc28:	e01c      	b.n	800fc64 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d006      	beq.n	800fc3e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	7adb      	ldrb	r3, [r3, #11]
 800fc34:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	7a9b      	ldrb	r3, [r3, #10]
 800fc3a:	757b      	strb	r3, [r7, #21]
 800fc3c:	e003      	b.n	800fc46 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800fc3e:	23ff      	movs	r3, #255	; 0xff
 800fc40:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800fc42:	2300      	movs	r3, #0
 800fc44:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800fc46:	7dba      	ldrb	r2, [r7, #22]
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	9302      	str	r3, [sp, #8]
 800fc4c:	2306      	movs	r3, #6
 800fc4e:	9301      	str	r3, [sp, #4]
 800fc50:	7d7b      	ldrb	r3, [r7, #21]
 800fc52:	9300      	str	r3, [sp, #0]
 800fc54:	4613      	mov	r3, r2
 800fc56:	683a      	ldr	r2, [r7, #0]
 800fc58:	6879      	ldr	r1, [r7, #4]
 800fc5a:	68b8      	ldr	r0, [r7, #8]
 800fc5c:	f002 fb2a 	bl	80122b4 <ip4_output_if>
 800fc60:	4603      	mov	r3, r0
 800fc62:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fc64:	68b8      	ldr	r0, [r7, #8]
 800fc66:	f7fa fd43 	bl	800a6f0 <pbuf_free>
  return err;
 800fc6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3718      	adds	r7, #24
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	08015ff0 	.word	0x08015ff0
 800fc7c:	08016748 	.word	0x08016748
 800fc80:	08016044 	.word	0x08016044

0800fc84 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fc84:	b590      	push	{r4, r7, lr}
 800fc86:	b08b      	sub	sp, #44	; 0x2c
 800fc88:	af04      	add	r7, sp, #16
 800fc8a:	60f8      	str	r0, [r7, #12]
 800fc8c:	60b9      	str	r1, [r7, #8]
 800fc8e:	607a      	str	r2, [r7, #4]
 800fc90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d106      	bne.n	800fca6 <tcp_rst+0x22>
 800fc98:	4b1f      	ldr	r3, [pc, #124]	; (800fd18 <tcp_rst+0x94>)
 800fc9a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fc9e:	491f      	ldr	r1, [pc, #124]	; (800fd1c <tcp_rst+0x98>)
 800fca0:	481f      	ldr	r0, [pc, #124]	; (800fd20 <tcp_rst+0x9c>)
 800fca2:	f003 fc29 	bl	80134f8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d106      	bne.n	800fcba <tcp_rst+0x36>
 800fcac:	4b1a      	ldr	r3, [pc, #104]	; (800fd18 <tcp_rst+0x94>)
 800fcae:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fcb2:	491c      	ldr	r1, [pc, #112]	; (800fd24 <tcp_rst+0xa0>)
 800fcb4:	481a      	ldr	r0, [pc, #104]	; (800fd20 <tcp_rst+0x9c>)
 800fcb6:	f003 fc1f 	bl	80134f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fcba:	2300      	movs	r3, #0
 800fcbc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fcbe:	f246 0308 	movw	r3, #24584	; 0x6008
 800fcc2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fcc4:	7dfb      	ldrb	r3, [r7, #23]
 800fcc6:	b29c      	uxth	r4, r3
 800fcc8:	68b8      	ldr	r0, [r7, #8]
 800fcca:	f7f9 fa72 	bl	80091b2 <lwip_htonl>
 800fcce:	4602      	mov	r2, r0
 800fcd0:	8abb      	ldrh	r3, [r7, #20]
 800fcd2:	9303      	str	r3, [sp, #12]
 800fcd4:	2314      	movs	r3, #20
 800fcd6:	9302      	str	r3, [sp, #8]
 800fcd8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fcda:	9301      	str	r3, [sp, #4]
 800fcdc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fcde:	9300      	str	r3, [sp, #0]
 800fce0:	4613      	mov	r3, r2
 800fce2:	2200      	movs	r2, #0
 800fce4:	4621      	mov	r1, r4
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f7ff fe92 	bl	800fa10 <tcp_output_alloc_header_common>
 800fcec:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d00c      	beq.n	800fd0e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fcf4:	7dfb      	ldrb	r3, [r7, #23]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	6939      	ldr	r1, [r7, #16]
 800fcfa:	68f8      	ldr	r0, [r7, #12]
 800fcfc:	f7ff ff38 	bl	800fb70 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd02:	683a      	ldr	r2, [r7, #0]
 800fd04:	6939      	ldr	r1, [r7, #16]
 800fd06:	68f8      	ldr	r0, [r7, #12]
 800fd08:	f7ff ff72 	bl	800fbf0 <tcp_output_control_segment>
 800fd0c:	e000      	b.n	800fd10 <tcp_rst+0x8c>
    return;
 800fd0e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fd10:	371c      	adds	r7, #28
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd90      	pop	{r4, r7, pc}
 800fd16:	bf00      	nop
 800fd18:	08015ff0 	.word	0x08015ff0
 800fd1c:	08016774 	.word	0x08016774
 800fd20:	08016044 	.word	0x08016044
 800fd24:	08016790 	.word	0x08016790

0800fd28 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fd28:	b590      	push	{r4, r7, lr}
 800fd2a:	b087      	sub	sp, #28
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fd30:	2300      	movs	r3, #0
 800fd32:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fd34:	2300      	movs	r3, #0
 800fd36:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d106      	bne.n	800fd4c <tcp_send_empty_ack+0x24>
 800fd3e:	4b28      	ldr	r3, [pc, #160]	; (800fde0 <tcp_send_empty_ack+0xb8>)
 800fd40:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800fd44:	4927      	ldr	r1, [pc, #156]	; (800fde4 <tcp_send_empty_ack+0xbc>)
 800fd46:	4828      	ldr	r0, [pc, #160]	; (800fde8 <tcp_send_empty_ack+0xc0>)
 800fd48:	f003 fbd6 	bl	80134f8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd4c:	7dfb      	ldrb	r3, [r7, #23]
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	b2db      	uxtb	r3, r3
 800fd52:	f003 0304 	and.w	r3, r3, #4
 800fd56:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fd58:	7d7b      	ldrb	r3, [r7, #21]
 800fd5a:	b29c      	uxth	r4, r3
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7f9 fa26 	bl	80091b2 <lwip_htonl>
 800fd66:	4603      	mov	r3, r0
 800fd68:	2200      	movs	r2, #0
 800fd6a:	4621      	mov	r1, r4
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f7ff fec1 	bl	800faf4 <tcp_output_alloc_header>
 800fd72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d109      	bne.n	800fd8e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	8b5b      	ldrh	r3, [r3, #26]
 800fd7e:	f043 0303 	orr.w	r3, r3, #3
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fd88:	f06f 0301 	mvn.w	r3, #1
 800fd8c:	e023      	b.n	800fdd6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fd8e:	7dbb      	ldrb	r3, [r7, #22]
 800fd90:	7dfa      	ldrb	r2, [r7, #23]
 800fd92:	6939      	ldr	r1, [r7, #16]
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f7ff feeb 	bl	800fb70 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	3304      	adds	r3, #4
 800fda0:	6939      	ldr	r1, [r7, #16]
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f7ff ff24 	bl	800fbf0 <tcp_output_control_segment>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fdac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d007      	beq.n	800fdc4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	8b5b      	ldrh	r3, [r3, #26]
 800fdb8:	f043 0303 	orr.w	r3, r3, #3
 800fdbc:	b29a      	uxth	r2, r3
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	835a      	strh	r2, [r3, #26]
 800fdc2:	e006      	b.n	800fdd2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	8b5b      	ldrh	r3, [r3, #26]
 800fdc8:	f023 0303 	bic.w	r3, r3, #3
 800fdcc:	b29a      	uxth	r2, r3
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fdd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	371c      	adds	r7, #28
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd90      	pop	{r4, r7, pc}
 800fdde:	bf00      	nop
 800fde0:	08015ff0 	.word	0x08015ff0
 800fde4:	080167ac 	.word	0x080167ac
 800fde8:	08016044 	.word	0x08016044

0800fdec <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fdec:	b590      	push	{r4, r7, lr}
 800fdee:	b087      	sub	sp, #28
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d106      	bne.n	800fe0c <tcp_keepalive+0x20>
 800fdfe:	4b18      	ldr	r3, [pc, #96]	; (800fe60 <tcp_keepalive+0x74>)
 800fe00:	f640 0224 	movw	r2, #2084	; 0x824
 800fe04:	4917      	ldr	r1, [pc, #92]	; (800fe64 <tcp_keepalive+0x78>)
 800fe06:	4818      	ldr	r0, [pc, #96]	; (800fe68 <tcp_keepalive+0x7c>)
 800fe08:	f003 fb76 	bl	80134f8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fe0c:	7dfb      	ldrb	r3, [r7, #23]
 800fe0e:	b29c      	uxth	r4, r3
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe14:	3b01      	subs	r3, #1
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7f9 f9cb 	bl	80091b2 <lwip_htonl>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2200      	movs	r2, #0
 800fe20:	4621      	mov	r1, r4
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f7ff fe66 	bl	800faf4 <tcp_output_alloc_header>
 800fe28:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d102      	bne.n	800fe36 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fe30:	f04f 33ff 	mov.w	r3, #4294967295
 800fe34:	e010      	b.n	800fe58 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fe36:	7dfb      	ldrb	r3, [r7, #23]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	6939      	ldr	r1, [r7, #16]
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f7ff fe97 	bl	800fb70 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	3304      	adds	r3, #4
 800fe48:	6939      	ldr	r1, [r7, #16]
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f7ff fed0 	bl	800fbf0 <tcp_output_control_segment>
 800fe50:	4603      	mov	r3, r0
 800fe52:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fe54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	371c      	adds	r7, #28
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd90      	pop	{r4, r7, pc}
 800fe60:	08015ff0 	.word	0x08015ff0
 800fe64:	080167cc 	.word	0x080167cc
 800fe68:	08016044 	.word	0x08016044

0800fe6c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fe6c:	b590      	push	{r4, r7, lr}
 800fe6e:	b08b      	sub	sp, #44	; 0x2c
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fe74:	2300      	movs	r3, #0
 800fe76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d106      	bne.n	800fe8e <tcp_zero_window_probe+0x22>
 800fe80:	4b4c      	ldr	r3, [pc, #304]	; (800ffb4 <tcp_zero_window_probe+0x148>)
 800fe82:	f640 024f 	movw	r2, #2127	; 0x84f
 800fe86:	494c      	ldr	r1, [pc, #304]	; (800ffb8 <tcp_zero_window_probe+0x14c>)
 800fe88:	484c      	ldr	r0, [pc, #304]	; (800ffbc <tcp_zero_window_probe+0x150>)
 800fe8a:	f003 fb35 	bl	80134f8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe92:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fe94:	6a3b      	ldr	r3, [r7, #32]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d101      	bne.n	800fe9e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	e086      	b.n	800ffac <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fea4:	2bff      	cmp	r3, #255	; 0xff
 800fea6:	d007      	beq.n	800feb8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800feae:	3301      	adds	r3, #1
 800feb0:	b2da      	uxtb	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800feb8:	6a3b      	ldr	r3, [r7, #32]
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	899b      	ldrh	r3, [r3, #12]
 800febe:	b29b      	uxth	r3, r3
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7f9 f961 	bl	8009188 <lwip_htons>
 800fec6:	4603      	mov	r3, r0
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	f003 0301 	and.w	r3, r3, #1
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d005      	beq.n	800fede <tcp_zero_window_probe+0x72>
 800fed2:	6a3b      	ldr	r3, [r7, #32]
 800fed4:	891b      	ldrh	r3, [r3, #8]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d101      	bne.n	800fede <tcp_zero_window_probe+0x72>
 800feda:	2301      	movs	r3, #1
 800fedc:	e000      	b.n	800fee0 <tcp_zero_window_probe+0x74>
 800fede:	2300      	movs	r3, #0
 800fee0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fee2:	7ffb      	ldrb	r3, [r7, #31]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	bf0c      	ite	eq
 800fee8:	2301      	moveq	r3, #1
 800feea:	2300      	movne	r3, #0
 800feec:	b2db      	uxtb	r3, r3
 800feee:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fef4:	b299      	uxth	r1, r3
 800fef6:	6a3b      	ldr	r3, [r7, #32]
 800fef8:	68db      	ldr	r3, [r3, #12]
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	8bba      	ldrh	r2, [r7, #28]
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f7ff fdf8 	bl	800faf4 <tcp_output_alloc_header>
 800ff04:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d102      	bne.n	800ff12 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ff0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff10:	e04c      	b.n	800ffac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ff12:	69bb      	ldr	r3, [r7, #24]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ff18:	7ffb      	ldrb	r3, [r7, #31]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d011      	beq.n	800ff42 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	899b      	ldrh	r3, [r3, #12]
 800ff22:	b29b      	uxth	r3, r3
 800ff24:	b21b      	sxth	r3, r3
 800ff26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ff2a:	b21c      	sxth	r4, r3
 800ff2c:	2011      	movs	r0, #17
 800ff2e:	f7f9 f92b 	bl	8009188 <lwip_htons>
 800ff32:	4603      	mov	r3, r0
 800ff34:	b21b      	sxth	r3, r3
 800ff36:	4323      	orrs	r3, r4
 800ff38:	b21b      	sxth	r3, r3
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	819a      	strh	r2, [r3, #12]
 800ff40:	e010      	b.n	800ff64 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ff42:	69bb      	ldr	r3, [r7, #24]
 800ff44:	685b      	ldr	r3, [r3, #4]
 800ff46:	3314      	adds	r3, #20
 800ff48:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ff4a:	6a3b      	ldr	r3, [r7, #32]
 800ff4c:	6858      	ldr	r0, [r3, #4]
 800ff4e:	6a3b      	ldr	r3, [r7, #32]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	891a      	ldrh	r2, [r3, #8]
 800ff54:	6a3b      	ldr	r3, [r7, #32]
 800ff56:	891b      	ldrh	r3, [r3, #8]
 800ff58:	1ad3      	subs	r3, r2, r3
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	6939      	ldr	r1, [r7, #16]
 800ff60:	f7fa fdc0 	bl	800aae4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ff64:	6a3b      	ldr	r3, [r7, #32]
 800ff66:	68db      	ldr	r3, [r3, #12]
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7f9 f921 	bl	80091b2 <lwip_htonl>
 800ff70:	4603      	mov	r3, r0
 800ff72:	3301      	adds	r3, #1
 800ff74:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	1ad3      	subs	r3, r2, r3
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	da02      	bge.n	800ff88 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	68fa      	ldr	r2, [r7, #12]
 800ff86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ff88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	69b9      	ldr	r1, [r7, #24]
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f7ff fded 	bl	800fb70 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ff96:	687a      	ldr	r2, [r7, #4]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	3304      	adds	r3, #4
 800ff9c:	69b9      	ldr	r1, [r7, #24]
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f7ff fe26 	bl	800fbf0 <tcp_output_control_segment>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ffa8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	372c      	adds	r7, #44	; 0x2c
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd90      	pop	{r4, r7, pc}
 800ffb4:	08015ff0 	.word	0x08015ff0
 800ffb8:	080167e8 	.word	0x080167e8
 800ffbc:	08016044 	.word	0x08016044

0800ffc0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ffc8:	f7fa ff0c 	bl	800ade4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ffcc:	4b0a      	ldr	r3, [pc, #40]	; (800fff8 <tcpip_tcp_timer+0x38>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d103      	bne.n	800ffdc <tcpip_tcp_timer+0x1c>
 800ffd4:	4b09      	ldr	r3, [pc, #36]	; (800fffc <tcpip_tcp_timer+0x3c>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d005      	beq.n	800ffe8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ffdc:	2200      	movs	r2, #0
 800ffde:	4908      	ldr	r1, [pc, #32]	; (8010000 <tcpip_tcp_timer+0x40>)
 800ffe0:	20fa      	movs	r0, #250	; 0xfa
 800ffe2:	f000 f8f3 	bl	80101cc <sys_timeout>
 800ffe6:	e003      	b.n	800fff0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ffe8:	4b06      	ldr	r3, [pc, #24]	; (8010004 <tcpip_tcp_timer+0x44>)
 800ffea:	2200      	movs	r2, #0
 800ffec:	601a      	str	r2, [r3, #0]
  }
}
 800ffee:	bf00      	nop
 800fff0:	bf00      	nop
 800fff2:	3708      	adds	r7, #8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	20008de8 	.word	0x20008de8
 800fffc:	20008dec 	.word	0x20008dec
 8010000:	0800ffc1 	.word	0x0800ffc1
 8010004:	20008e34 	.word	0x20008e34

08010008 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801000c:	4b0a      	ldr	r3, [pc, #40]	; (8010038 <tcp_timer_needed+0x30>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d10f      	bne.n	8010034 <tcp_timer_needed+0x2c>
 8010014:	4b09      	ldr	r3, [pc, #36]	; (801003c <tcp_timer_needed+0x34>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d103      	bne.n	8010024 <tcp_timer_needed+0x1c>
 801001c:	4b08      	ldr	r3, [pc, #32]	; (8010040 <tcp_timer_needed+0x38>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d007      	beq.n	8010034 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010024:	4b04      	ldr	r3, [pc, #16]	; (8010038 <tcp_timer_needed+0x30>)
 8010026:	2201      	movs	r2, #1
 8010028:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801002a:	2200      	movs	r2, #0
 801002c:	4905      	ldr	r1, [pc, #20]	; (8010044 <tcp_timer_needed+0x3c>)
 801002e:	20fa      	movs	r0, #250	; 0xfa
 8010030:	f000 f8cc 	bl	80101cc <sys_timeout>
  }
}
 8010034:	bf00      	nop
 8010036:	bd80      	pop	{r7, pc}
 8010038:	20008e34 	.word	0x20008e34
 801003c:	20008de8 	.word	0x20008de8
 8010040:	20008dec 	.word	0x20008dec
 8010044:	0800ffc1 	.word	0x0800ffc1

08010048 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b086      	sub	sp, #24
 801004c:	af00      	add	r7, sp, #0
 801004e:	60f8      	str	r0, [r7, #12]
 8010050:	60b9      	str	r1, [r7, #8]
 8010052:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010054:	2006      	movs	r0, #6
 8010056:	f7f9 fced 	bl	8009a34 <memp_malloc>
 801005a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d109      	bne.n	8010076 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d151      	bne.n	801010c <sys_timeout_abs+0xc4>
 8010068:	4b2a      	ldr	r3, [pc, #168]	; (8010114 <sys_timeout_abs+0xcc>)
 801006a:	22be      	movs	r2, #190	; 0xbe
 801006c:	492a      	ldr	r1, [pc, #168]	; (8010118 <sys_timeout_abs+0xd0>)
 801006e:	482b      	ldr	r0, [pc, #172]	; (801011c <sys_timeout_abs+0xd4>)
 8010070:	f003 fa42 	bl	80134f8 <iprintf>
    return;
 8010074:	e04a      	b.n	801010c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	2200      	movs	r2, #0
 801007a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	68ba      	ldr	r2, [r7, #8]
 8010080:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801008e:	4b24      	ldr	r3, [pc, #144]	; (8010120 <sys_timeout_abs+0xd8>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d103      	bne.n	801009e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010096:	4a22      	ldr	r2, [pc, #136]	; (8010120 <sys_timeout_abs+0xd8>)
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	6013      	str	r3, [r2, #0]
    return;
 801009c:	e037      	b.n	801010e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	685a      	ldr	r2, [r3, #4]
 80100a2:	4b1f      	ldr	r3, [pc, #124]	; (8010120 <sys_timeout_abs+0xd8>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	1ad3      	subs	r3, r2, r3
 80100aa:	0fdb      	lsrs	r3, r3, #31
 80100ac:	f003 0301 	and.w	r3, r3, #1
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d007      	beq.n	80100c6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80100b6:	4b1a      	ldr	r3, [pc, #104]	; (8010120 <sys_timeout_abs+0xd8>)
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80100be:	4a18      	ldr	r2, [pc, #96]	; (8010120 <sys_timeout_abs+0xd8>)
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	6013      	str	r3, [r2, #0]
 80100c4:	e023      	b.n	801010e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80100c6:	4b16      	ldr	r3, [pc, #88]	; (8010120 <sys_timeout_abs+0xd8>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	617b      	str	r3, [r7, #20]
 80100cc:	e01a      	b.n	8010104 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d00b      	beq.n	80100ee <sys_timeout_abs+0xa6>
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	685a      	ldr	r2, [r3, #4]
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	1ad3      	subs	r3, r2, r3
 80100e2:	0fdb      	lsrs	r3, r3, #31
 80100e4:	f003 0301 	and.w	r3, r3, #1
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d007      	beq.n	80100fe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	693a      	ldr	r2, [r7, #16]
 80100fa:	601a      	str	r2, [r3, #0]
        break;
 80100fc:	e007      	b.n	801010e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	617b      	str	r3, [r7, #20]
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d1e1      	bne.n	80100ce <sys_timeout_abs+0x86>
 801010a:	e000      	b.n	801010e <sys_timeout_abs+0xc6>
    return;
 801010c:	bf00      	nop
      }
    }
  }
}
 801010e:	3718      	adds	r7, #24
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}
 8010114:	0801680c 	.word	0x0801680c
 8010118:	08016840 	.word	0x08016840
 801011c:	08016880 	.word	0x08016880
 8010120:	20008e2c 	.word	0x20008e2c

08010124 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b086      	sub	sp, #24
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	4798      	blx	r3

  now = sys_now();
 8010136:	f7f8 ff99 	bl	800906c <sys_now>
 801013a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	4b0f      	ldr	r3, [pc, #60]	; (8010180 <lwip_cyclic_timer+0x5c>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4413      	add	r3, r2
 8010146:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010148:	68fa      	ldr	r2, [r7, #12]
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	0fdb      	lsrs	r3, r3, #31
 8010150:	f003 0301 	and.w	r3, r3, #1
 8010154:	b2db      	uxtb	r3, r3
 8010156:	2b00      	cmp	r3, #0
 8010158:	d009      	beq.n	801016e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	681a      	ldr	r2, [r3, #0]
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	4413      	add	r3, r2
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	4907      	ldr	r1, [pc, #28]	; (8010184 <lwip_cyclic_timer+0x60>)
 8010166:	4618      	mov	r0, r3
 8010168:	f7ff ff6e 	bl	8010048 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801016c:	e004      	b.n	8010178 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801016e:	687a      	ldr	r2, [r7, #4]
 8010170:	4904      	ldr	r1, [pc, #16]	; (8010184 <lwip_cyclic_timer+0x60>)
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	f7ff ff68 	bl	8010048 <sys_timeout_abs>
}
 8010178:	bf00      	nop
 801017a:	3718      	adds	r7, #24
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}
 8010180:	20008e30 	.word	0x20008e30
 8010184:	08010125 	.word	0x08010125

08010188 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801018e:	2301      	movs	r3, #1
 8010190:	607b      	str	r3, [r7, #4]
 8010192:	e00e      	b.n	80101b2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010194:	4a0b      	ldr	r2, [pc, #44]	; (80101c4 <sys_timeouts_init+0x3c>)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	00db      	lsls	r3, r3, #3
 80101a0:	4a08      	ldr	r2, [pc, #32]	; (80101c4 <sys_timeouts_init+0x3c>)
 80101a2:	4413      	add	r3, r2
 80101a4:	461a      	mov	r2, r3
 80101a6:	4908      	ldr	r1, [pc, #32]	; (80101c8 <sys_timeouts_init+0x40>)
 80101a8:	f000 f810 	bl	80101cc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	3301      	adds	r3, #1
 80101b0:	607b      	str	r3, [r7, #4]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2b02      	cmp	r3, #2
 80101b6:	d9ed      	bls.n	8010194 <sys_timeouts_init+0xc>
  }
}
 80101b8:	bf00      	nop
 80101ba:	bf00      	nop
 80101bc:	3708      	adds	r7, #8
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	080173f4 	.word	0x080173f4
 80101c8:	08010125 	.word	0x08010125

080101cc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b086      	sub	sp, #24
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	60b9      	str	r1, [r7, #8]
 80101d6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101de:	d306      	bcc.n	80101ee <sys_timeout+0x22>
 80101e0:	4b0a      	ldr	r3, [pc, #40]	; (801020c <sys_timeout+0x40>)
 80101e2:	f240 1229 	movw	r2, #297	; 0x129
 80101e6:	490a      	ldr	r1, [pc, #40]	; (8010210 <sys_timeout+0x44>)
 80101e8:	480a      	ldr	r0, [pc, #40]	; (8010214 <sys_timeout+0x48>)
 80101ea:	f003 f985 	bl	80134f8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80101ee:	f7f8 ff3d 	bl	800906c <sys_now>
 80101f2:	4602      	mov	r2, r0
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	4413      	add	r3, r2
 80101f8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	68b9      	ldr	r1, [r7, #8]
 80101fe:	6978      	ldr	r0, [r7, #20]
 8010200:	f7ff ff22 	bl	8010048 <sys_timeout_abs>
#endif
}
 8010204:	bf00      	nop
 8010206:	3718      	adds	r7, #24
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}
 801020c:	0801680c 	.word	0x0801680c
 8010210:	080168a8 	.word	0x080168a8
 8010214:	08016880 	.word	0x08016880

08010218 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801021e:	f7f8 ff25 	bl	800906c <sys_now>
 8010222:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010224:	4b1a      	ldr	r3, [pc, #104]	; (8010290 <sys_check_timeouts+0x78>)
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	b2db      	uxtb	r3, r3
 801022a:	2b00      	cmp	r3, #0
 801022c:	d001      	beq.n	8010232 <sys_check_timeouts+0x1a>
 801022e:	f7f9 ff25 	bl	800a07c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010232:	4b18      	ldr	r3, [pc, #96]	; (8010294 <sys_check_timeouts+0x7c>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d022      	beq.n	8010284 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	68fa      	ldr	r2, [r7, #12]
 8010244:	1ad3      	subs	r3, r2, r3
 8010246:	0fdb      	lsrs	r3, r3, #31
 8010248:	f003 0301 	and.w	r3, r3, #1
 801024c:	b2db      	uxtb	r3, r3
 801024e:	2b00      	cmp	r3, #0
 8010250:	d11a      	bne.n	8010288 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	4a0f      	ldr	r2, [pc, #60]	; (8010294 <sys_check_timeouts+0x7c>)
 8010258:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	689b      	ldr	r3, [r3, #8]
 801025e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	4a0b      	ldr	r2, [pc, #44]	; (8010298 <sys_check_timeouts+0x80>)
 801026c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801026e:	68b9      	ldr	r1, [r7, #8]
 8010270:	2006      	movs	r0, #6
 8010272:	f7f9 fc2b 	bl	8009acc <memp_free>
    if (handler != NULL) {
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d0d3      	beq.n	8010224 <sys_check_timeouts+0xc>
      handler(arg);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6838      	ldr	r0, [r7, #0]
 8010280:	4798      	blx	r3
  do {
 8010282:	e7cf      	b.n	8010224 <sys_check_timeouts+0xc>
      return;
 8010284:	bf00      	nop
 8010286:	e000      	b.n	801028a <sys_check_timeouts+0x72>
      return;
 8010288:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801028a:	3710      	adds	r7, #16
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	20008dd9 	.word	0x20008dd9
 8010294:	20008e2c 	.word	0x20008e2c
 8010298:	20008e30 	.word	0x20008e30

0801029c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80102a0:	f003 f942 	bl	8013528 <rand>
 80102a4:	4603      	mov	r3, r0
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80102b2:	b29a      	uxth	r2, r3
 80102b4:	4b01      	ldr	r3, [pc, #4]	; (80102bc <udp_init+0x20>)
 80102b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80102b8:	bf00      	nop
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	20000024 	.word	0x20000024

080102c0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80102c0:	b480      	push	{r7}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80102c6:	2300      	movs	r3, #0
 80102c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80102ca:	4b17      	ldr	r3, [pc, #92]	; (8010328 <udp_new_port+0x68>)
 80102cc:	881b      	ldrh	r3, [r3, #0]
 80102ce:	1c5a      	adds	r2, r3, #1
 80102d0:	b291      	uxth	r1, r2
 80102d2:	4a15      	ldr	r2, [pc, #84]	; (8010328 <udp_new_port+0x68>)
 80102d4:	8011      	strh	r1, [r2, #0]
 80102d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102da:	4293      	cmp	r3, r2
 80102dc:	d103      	bne.n	80102e6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80102de:	4b12      	ldr	r3, [pc, #72]	; (8010328 <udp_new_port+0x68>)
 80102e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80102e4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80102e6:	4b11      	ldr	r3, [pc, #68]	; (801032c <udp_new_port+0x6c>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	603b      	str	r3, [r7, #0]
 80102ec:	e011      	b.n	8010312 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	8a5a      	ldrh	r2, [r3, #18]
 80102f2:	4b0d      	ldr	r3, [pc, #52]	; (8010328 <udp_new_port+0x68>)
 80102f4:	881b      	ldrh	r3, [r3, #0]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d108      	bne.n	801030c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80102fa:	88fb      	ldrh	r3, [r7, #6]
 80102fc:	3301      	adds	r3, #1
 80102fe:	80fb      	strh	r3, [r7, #6]
 8010300:	88fb      	ldrh	r3, [r7, #6]
 8010302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010306:	d3e0      	bcc.n	80102ca <udp_new_port+0xa>
        return 0;
 8010308:	2300      	movs	r3, #0
 801030a:	e007      	b.n	801031c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	603b      	str	r3, [r7, #0]
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d1ea      	bne.n	80102ee <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010318:	4b03      	ldr	r3, [pc, #12]	; (8010328 <udp_new_port+0x68>)
 801031a:	881b      	ldrh	r3, [r3, #0]
}
 801031c:	4618      	mov	r0, r3
 801031e:	370c      	adds	r7, #12
 8010320:	46bd      	mov	sp, r7
 8010322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010326:	4770      	bx	lr
 8010328:	20000024 	.word	0x20000024
 801032c:	20008e38 	.word	0x20008e38

08010330 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	4613      	mov	r3, r2
 801033c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d105      	bne.n	8010350 <udp_input_local_match+0x20>
 8010344:	4b27      	ldr	r3, [pc, #156]	; (80103e4 <udp_input_local_match+0xb4>)
 8010346:	2287      	movs	r2, #135	; 0x87
 8010348:	4927      	ldr	r1, [pc, #156]	; (80103e8 <udp_input_local_match+0xb8>)
 801034a:	4828      	ldr	r0, [pc, #160]	; (80103ec <udp_input_local_match+0xbc>)
 801034c:	f003 f8d4 	bl	80134f8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d105      	bne.n	8010362 <udp_input_local_match+0x32>
 8010356:	4b23      	ldr	r3, [pc, #140]	; (80103e4 <udp_input_local_match+0xb4>)
 8010358:	2288      	movs	r2, #136	; 0x88
 801035a:	4925      	ldr	r1, [pc, #148]	; (80103f0 <udp_input_local_match+0xc0>)
 801035c:	4823      	ldr	r0, [pc, #140]	; (80103ec <udp_input_local_match+0xbc>)
 801035e:	f003 f8cb 	bl	80134f8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	7a1b      	ldrb	r3, [r3, #8]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d00b      	beq.n	8010382 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	7a1a      	ldrb	r2, [r3, #8]
 801036e:	4b21      	ldr	r3, [pc, #132]	; (80103f4 <udp_input_local_match+0xc4>)
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010376:	3301      	adds	r3, #1
 8010378:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801037a:	429a      	cmp	r2, r3
 801037c:	d001      	beq.n	8010382 <udp_input_local_match+0x52>
    return 0;
 801037e:	2300      	movs	r3, #0
 8010380:	e02b      	b.n	80103da <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010382:	79fb      	ldrb	r3, [r7, #7]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d018      	beq.n	80103ba <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d013      	beq.n	80103b6 <udp_input_local_match+0x86>
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00f      	beq.n	80103b6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010396:	4b17      	ldr	r3, [pc, #92]	; (80103f4 <udp_input_local_match+0xc4>)
 8010398:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801039a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801039e:	d00a      	beq.n	80103b6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681a      	ldr	r2, [r3, #0]
 80103a4:	4b13      	ldr	r3, [pc, #76]	; (80103f4 <udp_input_local_match+0xc4>)
 80103a6:	695b      	ldr	r3, [r3, #20]
 80103a8:	405a      	eors	r2, r3
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	3308      	adds	r3, #8
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d110      	bne.n	80103d8 <udp_input_local_match+0xa8>
          return 1;
 80103b6:	2301      	movs	r3, #1
 80103b8:	e00f      	b.n	80103da <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d009      	beq.n	80103d4 <udp_input_local_match+0xa4>
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d005      	beq.n	80103d4 <udp_input_local_match+0xa4>
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	4b09      	ldr	r3, [pc, #36]	; (80103f4 <udp_input_local_match+0xc4>)
 80103ce:	695b      	ldr	r3, [r3, #20]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d101      	bne.n	80103d8 <udp_input_local_match+0xa8>
        return 1;
 80103d4:	2301      	movs	r3, #1
 80103d6:	e000      	b.n	80103da <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80103d8:	2300      	movs	r3, #0
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3710      	adds	r7, #16
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	bf00      	nop
 80103e4:	080168f4 	.word	0x080168f4
 80103e8:	08016924 	.word	0x08016924
 80103ec:	08016948 	.word	0x08016948
 80103f0:	08016970 	.word	0x08016970
 80103f4:	200036ac 	.word	0x200036ac

080103f8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80103f8:	b590      	push	{r4, r7, lr}
 80103fa:	b08d      	sub	sp, #52	; 0x34
 80103fc:	af02      	add	r7, sp, #8
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010402:	2300      	movs	r3, #0
 8010404:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d105      	bne.n	8010418 <udp_input+0x20>
 801040c:	4b7c      	ldr	r3, [pc, #496]	; (8010600 <udp_input+0x208>)
 801040e:	22cf      	movs	r2, #207	; 0xcf
 8010410:	497c      	ldr	r1, [pc, #496]	; (8010604 <udp_input+0x20c>)
 8010412:	487d      	ldr	r0, [pc, #500]	; (8010608 <udp_input+0x210>)
 8010414:	f003 f870 	bl	80134f8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d105      	bne.n	801042a <udp_input+0x32>
 801041e:	4b78      	ldr	r3, [pc, #480]	; (8010600 <udp_input+0x208>)
 8010420:	22d0      	movs	r2, #208	; 0xd0
 8010422:	497a      	ldr	r1, [pc, #488]	; (801060c <udp_input+0x214>)
 8010424:	4878      	ldr	r0, [pc, #480]	; (8010608 <udp_input+0x210>)
 8010426:	f003 f867 	bl	80134f8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	895b      	ldrh	r3, [r3, #10]
 801042e:	2b07      	cmp	r3, #7
 8010430:	d803      	bhi.n	801043a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7fa f95c 	bl	800a6f0 <pbuf_free>
    goto end;
 8010438:	e0de      	b.n	80105f8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010440:	4b73      	ldr	r3, [pc, #460]	; (8010610 <udp_input+0x218>)
 8010442:	695b      	ldr	r3, [r3, #20]
 8010444:	4a72      	ldr	r2, [pc, #456]	; (8010610 <udp_input+0x218>)
 8010446:	6812      	ldr	r2, [r2, #0]
 8010448:	4611      	mov	r1, r2
 801044a:	4618      	mov	r0, r3
 801044c:	f002 f80a 	bl	8012464 <ip4_addr_isbroadcast_u32>
 8010450:	4603      	mov	r3, r0
 8010452:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	881b      	ldrh	r3, [r3, #0]
 8010458:	b29b      	uxth	r3, r3
 801045a:	4618      	mov	r0, r3
 801045c:	f7f8 fe94 	bl	8009188 <lwip_htons>
 8010460:	4603      	mov	r3, r0
 8010462:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	885b      	ldrh	r3, [r3, #2]
 8010468:	b29b      	uxth	r3, r3
 801046a:	4618      	mov	r0, r3
 801046c:	f7f8 fe8c 	bl	8009188 <lwip_htons>
 8010470:	4603      	mov	r3, r0
 8010472:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010474:	2300      	movs	r3, #0
 8010476:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010478:	2300      	movs	r3, #0
 801047a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801047c:	2300      	movs	r3, #0
 801047e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010480:	4b64      	ldr	r3, [pc, #400]	; (8010614 <udp_input+0x21c>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	627b      	str	r3, [r7, #36]	; 0x24
 8010486:	e054      	b.n	8010532 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048a:	8a5b      	ldrh	r3, [r3, #18]
 801048c:	89fa      	ldrh	r2, [r7, #14]
 801048e:	429a      	cmp	r2, r3
 8010490:	d14a      	bne.n	8010528 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010492:	7cfb      	ldrb	r3, [r7, #19]
 8010494:	461a      	mov	r2, r3
 8010496:	6839      	ldr	r1, [r7, #0]
 8010498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801049a:	f7ff ff49 	bl	8010330 <udp_input_local_match>
 801049e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d041      	beq.n	8010528 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80104a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a6:	7c1b      	ldrb	r3, [r3, #16]
 80104a8:	f003 0304 	and.w	r3, r3, #4
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d11d      	bne.n	80104ec <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d102      	bne.n	80104bc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80104b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b8:	61fb      	str	r3, [r7, #28]
 80104ba:	e017      	b.n	80104ec <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80104bc:	7cfb      	ldrb	r3, [r7, #19]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d014      	beq.n	80104ec <udp_input+0xf4>
 80104c2:	4b53      	ldr	r3, [pc, #332]	; (8010610 <udp_input+0x218>)
 80104c4:	695b      	ldr	r3, [r3, #20]
 80104c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ca:	d10f      	bne.n	80104ec <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	3304      	adds	r3, #4
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d008      	beq.n	80104ec <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80104da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	3304      	adds	r3, #4
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d101      	bne.n	80104ec <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80104e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ea:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80104ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ee:	8a9b      	ldrh	r3, [r3, #20]
 80104f0:	8a3a      	ldrh	r2, [r7, #16]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d118      	bne.n	8010528 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80104f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d005      	beq.n	801050a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80104fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010500:	685a      	ldr	r2, [r3, #4]
 8010502:	4b43      	ldr	r3, [pc, #268]	; (8010610 <udp_input+0x218>)
 8010504:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010506:	429a      	cmp	r2, r3
 8010508:	d10e      	bne.n	8010528 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801050a:	6a3b      	ldr	r3, [r7, #32]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d014      	beq.n	801053a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010512:	68da      	ldr	r2, [r3, #12]
 8010514:	6a3b      	ldr	r3, [r7, #32]
 8010516:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010518:	4b3e      	ldr	r3, [pc, #248]	; (8010614 <udp_input+0x21c>)
 801051a:	681a      	ldr	r2, [r3, #0]
 801051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010520:	4a3c      	ldr	r2, [pc, #240]	; (8010614 <udp_input+0x21c>)
 8010522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010524:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010526:	e008      	b.n	801053a <udp_input+0x142>
      }
    }

    prev = pcb;
 8010528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	627b      	str	r3, [r7, #36]	; 0x24
 8010532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1a7      	bne.n	8010488 <udp_input+0x90>
 8010538:	e000      	b.n	801053c <udp_input+0x144>
        break;
 801053a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801053c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053e:	2b00      	cmp	r3, #0
 8010540:	d101      	bne.n	8010546 <udp_input+0x14e>
    pcb = uncon_pcb;
 8010542:	69fb      	ldr	r3, [r7, #28]
 8010544:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010548:	2b00      	cmp	r3, #0
 801054a:	d002      	beq.n	8010552 <udp_input+0x15a>
    for_us = 1;
 801054c:	2301      	movs	r3, #1
 801054e:	76fb      	strb	r3, [r7, #27]
 8010550:	e00a      	b.n	8010568 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	3304      	adds	r3, #4
 8010556:	681a      	ldr	r2, [r3, #0]
 8010558:	4b2d      	ldr	r3, [pc, #180]	; (8010610 <udp_input+0x218>)
 801055a:	695b      	ldr	r3, [r3, #20]
 801055c:	429a      	cmp	r2, r3
 801055e:	bf0c      	ite	eq
 8010560:	2301      	moveq	r3, #1
 8010562:	2300      	movne	r3, #0
 8010564:	b2db      	uxtb	r3, r3
 8010566:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010568:	7efb      	ldrb	r3, [r7, #27]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d041      	beq.n	80105f2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801056e:	2108      	movs	r1, #8
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7fa f837 	bl	800a5e4 <pbuf_remove_header>
 8010576:	4603      	mov	r3, r0
 8010578:	2b00      	cmp	r3, #0
 801057a:	d00a      	beq.n	8010592 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801057c:	4b20      	ldr	r3, [pc, #128]	; (8010600 <udp_input+0x208>)
 801057e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010582:	4925      	ldr	r1, [pc, #148]	; (8010618 <udp_input+0x220>)
 8010584:	4820      	ldr	r0, [pc, #128]	; (8010608 <udp_input+0x210>)
 8010586:	f002 ffb7 	bl	80134f8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7fa f8b0 	bl	800a6f0 <pbuf_free>
      goto end;
 8010590:	e032      	b.n	80105f8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010594:	2b00      	cmp	r3, #0
 8010596:	d012      	beq.n	80105be <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059a:	699b      	ldr	r3, [r3, #24]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00a      	beq.n	80105b6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80105a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a2:	699c      	ldr	r4, [r3, #24]
 80105a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a6:	69d8      	ldr	r0, [r3, #28]
 80105a8:	8a3b      	ldrh	r3, [r7, #16]
 80105aa:	9300      	str	r3, [sp, #0]
 80105ac:	4b1b      	ldr	r3, [pc, #108]	; (801061c <udp_input+0x224>)
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80105b2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80105b4:	e021      	b.n	80105fa <udp_input+0x202>
        pbuf_free(p);
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7fa f89a 	bl	800a6f0 <pbuf_free>
        goto end;
 80105bc:	e01c      	b.n	80105f8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80105be:	7cfb      	ldrb	r3, [r7, #19]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d112      	bne.n	80105ea <udp_input+0x1f2>
 80105c4:	4b12      	ldr	r3, [pc, #72]	; (8010610 <udp_input+0x218>)
 80105c6:	695b      	ldr	r3, [r3, #20]
 80105c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80105cc:	2be0      	cmp	r3, #224	; 0xe0
 80105ce:	d00c      	beq.n	80105ea <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80105d0:	4b0f      	ldr	r3, [pc, #60]	; (8010610 <udp_input+0x218>)
 80105d2:	899b      	ldrh	r3, [r3, #12]
 80105d4:	3308      	adds	r3, #8
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	b21b      	sxth	r3, r3
 80105da:	4619      	mov	r1, r3
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7fa f874 	bl	800a6ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80105e2:	2103      	movs	r1, #3
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f001 fc1d 	bl	8011e24 <icmp_dest_unreach>
      pbuf_free(p);
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f7fa f880 	bl	800a6f0 <pbuf_free>
  return;
 80105f0:	e003      	b.n	80105fa <udp_input+0x202>
    pbuf_free(p);
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f7fa f87c 	bl	800a6f0 <pbuf_free>
  return;
 80105f8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80105fa:	372c      	adds	r7, #44	; 0x2c
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd90      	pop	{r4, r7, pc}
 8010600:	080168f4 	.word	0x080168f4
 8010604:	08016998 	.word	0x08016998
 8010608:	08016948 	.word	0x08016948
 801060c:	080169b0 	.word	0x080169b0
 8010610:	200036ac 	.word	0x200036ac
 8010614:	20008e38 	.word	0x20008e38
 8010618:	080169cc 	.word	0x080169cc
 801061c:	200036bc 	.word	0x200036bc

08010620 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d109      	bne.n	8010644 <udp_send+0x24>
 8010630:	4b11      	ldr	r3, [pc, #68]	; (8010678 <udp_send+0x58>)
 8010632:	f240 12d5 	movw	r2, #469	; 0x1d5
 8010636:	4911      	ldr	r1, [pc, #68]	; (801067c <udp_send+0x5c>)
 8010638:	4811      	ldr	r0, [pc, #68]	; (8010680 <udp_send+0x60>)
 801063a:	f002 ff5d 	bl	80134f8 <iprintf>
 801063e:	f06f 030f 	mvn.w	r3, #15
 8010642:	e015      	b.n	8010670 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d109      	bne.n	801065e <udp_send+0x3e>
 801064a:	4b0b      	ldr	r3, [pc, #44]	; (8010678 <udp_send+0x58>)
 801064c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8010650:	490c      	ldr	r1, [pc, #48]	; (8010684 <udp_send+0x64>)
 8010652:	480b      	ldr	r0, [pc, #44]	; (8010680 <udp_send+0x60>)
 8010654:	f002 ff50 	bl	80134f8 <iprintf>
 8010658:	f06f 030f 	mvn.w	r3, #15
 801065c:	e008      	b.n	8010670 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	1d1a      	adds	r2, r3, #4
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	8a9b      	ldrh	r3, [r3, #20]
 8010666:	6839      	ldr	r1, [r7, #0]
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f000 f80d 	bl	8010688 <udp_sendto>
 801066e:	4603      	mov	r3, r0
}
 8010670:	4618      	mov	r0, r3
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	080168f4 	.word	0x080168f4
 801067c:	080169e8 	.word	0x080169e8
 8010680:	08016948 	.word	0x08016948
 8010684:	08016a00 	.word	0x08016a00

08010688 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b088      	sub	sp, #32
 801068c:	af02      	add	r7, sp, #8
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	607a      	str	r2, [r7, #4]
 8010694:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d109      	bne.n	80106b0 <udp_sendto+0x28>
 801069c:	4b23      	ldr	r3, [pc, #140]	; (801072c <udp_sendto+0xa4>)
 801069e:	f44f 7206 	mov.w	r2, #536	; 0x218
 80106a2:	4923      	ldr	r1, [pc, #140]	; (8010730 <udp_sendto+0xa8>)
 80106a4:	4823      	ldr	r0, [pc, #140]	; (8010734 <udp_sendto+0xac>)
 80106a6:	f002 ff27 	bl	80134f8 <iprintf>
 80106aa:	f06f 030f 	mvn.w	r3, #15
 80106ae:	e038      	b.n	8010722 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d109      	bne.n	80106ca <udp_sendto+0x42>
 80106b6:	4b1d      	ldr	r3, [pc, #116]	; (801072c <udp_sendto+0xa4>)
 80106b8:	f240 2219 	movw	r2, #537	; 0x219
 80106bc:	491e      	ldr	r1, [pc, #120]	; (8010738 <udp_sendto+0xb0>)
 80106be:	481d      	ldr	r0, [pc, #116]	; (8010734 <udp_sendto+0xac>)
 80106c0:	f002 ff1a 	bl	80134f8 <iprintf>
 80106c4:	f06f 030f 	mvn.w	r3, #15
 80106c8:	e02b      	b.n	8010722 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d109      	bne.n	80106e4 <udp_sendto+0x5c>
 80106d0:	4b16      	ldr	r3, [pc, #88]	; (801072c <udp_sendto+0xa4>)
 80106d2:	f240 221a 	movw	r2, #538	; 0x21a
 80106d6:	4919      	ldr	r1, [pc, #100]	; (801073c <udp_sendto+0xb4>)
 80106d8:	4816      	ldr	r0, [pc, #88]	; (8010734 <udp_sendto+0xac>)
 80106da:	f002 ff0d 	bl	80134f8 <iprintf>
 80106de:	f06f 030f 	mvn.w	r3, #15
 80106e2:	e01e      	b.n	8010722 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	7a1b      	ldrb	r3, [r3, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d006      	beq.n	80106fa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	7a1b      	ldrb	r3, [r3, #8]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7f9 fc9d 	bl	800a030 <netif_get_by_index>
 80106f6:	6178      	str	r0, [r7, #20]
 80106f8:	e003      	b.n	8010702 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f001 fc1c 	bl	8011f38 <ip4_route>
 8010700:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d102      	bne.n	801070e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8010708:	f06f 0303 	mvn.w	r3, #3
 801070c:	e009      	b.n	8010722 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801070e:	887a      	ldrh	r2, [r7, #2]
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	9300      	str	r3, [sp, #0]
 8010714:	4613      	mov	r3, r2
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	68b9      	ldr	r1, [r7, #8]
 801071a:	68f8      	ldr	r0, [r7, #12]
 801071c:	f000 f810 	bl	8010740 <udp_sendto_if>
 8010720:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010722:	4618      	mov	r0, r3
 8010724:	3718      	adds	r7, #24
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
 801072a:	bf00      	nop
 801072c:	080168f4 	.word	0x080168f4
 8010730:	08016a18 	.word	0x08016a18
 8010734:	08016948 	.word	0x08016948
 8010738:	08016a30 	.word	0x08016a30
 801073c:	08016a4c 	.word	0x08016a4c

08010740 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b088      	sub	sp, #32
 8010744:	af02      	add	r7, sp, #8
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
 801074c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d109      	bne.n	8010768 <udp_sendto_if+0x28>
 8010754:	4b2e      	ldr	r3, [pc, #184]	; (8010810 <udp_sendto_if+0xd0>)
 8010756:	f44f 7220 	mov.w	r2, #640	; 0x280
 801075a:	492e      	ldr	r1, [pc, #184]	; (8010814 <udp_sendto_if+0xd4>)
 801075c:	482e      	ldr	r0, [pc, #184]	; (8010818 <udp_sendto_if+0xd8>)
 801075e:	f002 fecb 	bl	80134f8 <iprintf>
 8010762:	f06f 030f 	mvn.w	r3, #15
 8010766:	e04f      	b.n	8010808 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d109      	bne.n	8010782 <udp_sendto_if+0x42>
 801076e:	4b28      	ldr	r3, [pc, #160]	; (8010810 <udp_sendto_if+0xd0>)
 8010770:	f240 2281 	movw	r2, #641	; 0x281
 8010774:	4929      	ldr	r1, [pc, #164]	; (801081c <udp_sendto_if+0xdc>)
 8010776:	4828      	ldr	r0, [pc, #160]	; (8010818 <udp_sendto_if+0xd8>)
 8010778:	f002 febe 	bl	80134f8 <iprintf>
 801077c:	f06f 030f 	mvn.w	r3, #15
 8010780:	e042      	b.n	8010808 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d109      	bne.n	801079c <udp_sendto_if+0x5c>
 8010788:	4b21      	ldr	r3, [pc, #132]	; (8010810 <udp_sendto_if+0xd0>)
 801078a:	f240 2282 	movw	r2, #642	; 0x282
 801078e:	4924      	ldr	r1, [pc, #144]	; (8010820 <udp_sendto_if+0xe0>)
 8010790:	4821      	ldr	r0, [pc, #132]	; (8010818 <udp_sendto_if+0xd8>)
 8010792:	f002 feb1 	bl	80134f8 <iprintf>
 8010796:	f06f 030f 	mvn.w	r3, #15
 801079a:	e035      	b.n	8010808 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801079c:	6a3b      	ldr	r3, [r7, #32]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d109      	bne.n	80107b6 <udp_sendto_if+0x76>
 80107a2:	4b1b      	ldr	r3, [pc, #108]	; (8010810 <udp_sendto_if+0xd0>)
 80107a4:	f240 2283 	movw	r2, #643	; 0x283
 80107a8:	491e      	ldr	r1, [pc, #120]	; (8010824 <udp_sendto_if+0xe4>)
 80107aa:	481b      	ldr	r0, [pc, #108]	; (8010818 <udp_sendto_if+0xd8>)
 80107ac:	f002 fea4 	bl	80134f8 <iprintf>
 80107b0:	f06f 030f 	mvn.w	r3, #15
 80107b4:	e028      	b.n	8010808 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d009      	beq.n	80107d0 <udp_sendto_if+0x90>
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d005      	beq.n	80107d0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80107cc:	2be0      	cmp	r3, #224	; 0xe0
 80107ce:	d103      	bne.n	80107d8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80107d0:	6a3b      	ldr	r3, [r7, #32]
 80107d2:	3304      	adds	r3, #4
 80107d4:	617b      	str	r3, [r7, #20]
 80107d6:	e00b      	b.n	80107f0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	6a3b      	ldr	r3, [r7, #32]
 80107de:	3304      	adds	r3, #4
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d002      	beq.n	80107ec <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80107e6:	f06f 0303 	mvn.w	r3, #3
 80107ea:	e00d      	b.n	8010808 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80107f0:	887a      	ldrh	r2, [r7, #2]
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	9301      	str	r3, [sp, #4]
 80107f6:	6a3b      	ldr	r3, [r7, #32]
 80107f8:	9300      	str	r3, [sp, #0]
 80107fa:	4613      	mov	r3, r2
 80107fc:	687a      	ldr	r2, [r7, #4]
 80107fe:	68b9      	ldr	r1, [r7, #8]
 8010800:	68f8      	ldr	r0, [r7, #12]
 8010802:	f000 f811 	bl	8010828 <udp_sendto_if_src>
 8010806:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010808:	4618      	mov	r0, r3
 801080a:	3718      	adds	r7, #24
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	080168f4 	.word	0x080168f4
 8010814:	08016a68 	.word	0x08016a68
 8010818:	08016948 	.word	0x08016948
 801081c:	08016a84 	.word	0x08016a84
 8010820:	08016aa0 	.word	0x08016aa0
 8010824:	08016ac0 	.word	0x08016ac0

08010828 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b08c      	sub	sp, #48	; 0x30
 801082c:	af04      	add	r7, sp, #16
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	607a      	str	r2, [r7, #4]
 8010834:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d109      	bne.n	8010850 <udp_sendto_if_src+0x28>
 801083c:	4b65      	ldr	r3, [pc, #404]	; (80109d4 <udp_sendto_if_src+0x1ac>)
 801083e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010842:	4965      	ldr	r1, [pc, #404]	; (80109d8 <udp_sendto_if_src+0x1b0>)
 8010844:	4865      	ldr	r0, [pc, #404]	; (80109dc <udp_sendto_if_src+0x1b4>)
 8010846:	f002 fe57 	bl	80134f8 <iprintf>
 801084a:	f06f 030f 	mvn.w	r3, #15
 801084e:	e0bc      	b.n	80109ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d109      	bne.n	801086a <udp_sendto_if_src+0x42>
 8010856:	4b5f      	ldr	r3, [pc, #380]	; (80109d4 <udp_sendto_if_src+0x1ac>)
 8010858:	f240 22d2 	movw	r2, #722	; 0x2d2
 801085c:	4960      	ldr	r1, [pc, #384]	; (80109e0 <udp_sendto_if_src+0x1b8>)
 801085e:	485f      	ldr	r0, [pc, #380]	; (80109dc <udp_sendto_if_src+0x1b4>)
 8010860:	f002 fe4a 	bl	80134f8 <iprintf>
 8010864:	f06f 030f 	mvn.w	r3, #15
 8010868:	e0af      	b.n	80109ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d109      	bne.n	8010884 <udp_sendto_if_src+0x5c>
 8010870:	4b58      	ldr	r3, [pc, #352]	; (80109d4 <udp_sendto_if_src+0x1ac>)
 8010872:	f240 22d3 	movw	r2, #723	; 0x2d3
 8010876:	495b      	ldr	r1, [pc, #364]	; (80109e4 <udp_sendto_if_src+0x1bc>)
 8010878:	4858      	ldr	r0, [pc, #352]	; (80109dc <udp_sendto_if_src+0x1b4>)
 801087a:	f002 fe3d 	bl	80134f8 <iprintf>
 801087e:	f06f 030f 	mvn.w	r3, #15
 8010882:	e0a2      	b.n	80109ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010886:	2b00      	cmp	r3, #0
 8010888:	d109      	bne.n	801089e <udp_sendto_if_src+0x76>
 801088a:	4b52      	ldr	r3, [pc, #328]	; (80109d4 <udp_sendto_if_src+0x1ac>)
 801088c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010890:	4955      	ldr	r1, [pc, #340]	; (80109e8 <udp_sendto_if_src+0x1c0>)
 8010892:	4852      	ldr	r0, [pc, #328]	; (80109dc <udp_sendto_if_src+0x1b4>)
 8010894:	f002 fe30 	bl	80134f8 <iprintf>
 8010898:	f06f 030f 	mvn.w	r3, #15
 801089c:	e095      	b.n	80109ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801089e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d109      	bne.n	80108b8 <udp_sendto_if_src+0x90>
 80108a4:	4b4b      	ldr	r3, [pc, #300]	; (80109d4 <udp_sendto_if_src+0x1ac>)
 80108a6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80108aa:	4950      	ldr	r1, [pc, #320]	; (80109ec <udp_sendto_if_src+0x1c4>)
 80108ac:	484b      	ldr	r0, [pc, #300]	; (80109dc <udp_sendto_if_src+0x1b4>)
 80108ae:	f002 fe23 	bl	80134f8 <iprintf>
 80108b2:	f06f 030f 	mvn.w	r3, #15
 80108b6:	e088      	b.n	80109ca <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	8a5b      	ldrh	r3, [r3, #18]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d10f      	bne.n	80108e0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80108c0:	68f9      	ldr	r1, [r7, #12]
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	8a5b      	ldrh	r3, [r3, #18]
 80108c6:	461a      	mov	r2, r3
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	f000 f893 	bl	80109f4 <udp_bind>
 80108ce:	4603      	mov	r3, r0
 80108d0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80108d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d002      	beq.n	80108e0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80108da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80108de:	e074      	b.n	80109ca <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	891b      	ldrh	r3, [r3, #8]
 80108e4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d902      	bls.n	80108f2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80108ec:	f04f 33ff 	mov.w	r3, #4294967295
 80108f0:	e06b      	b.n	80109ca <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80108f2:	2108      	movs	r1, #8
 80108f4:	68b8      	ldr	r0, [r7, #8]
 80108f6:	f7f9 fe65 	bl	800a5c4 <pbuf_add_header>
 80108fa:	4603      	mov	r3, r0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d015      	beq.n	801092c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010900:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010904:	2108      	movs	r1, #8
 8010906:	2022      	movs	r0, #34	; 0x22
 8010908:	f7f9 fc0e 	bl	800a128 <pbuf_alloc>
 801090c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801090e:	69fb      	ldr	r3, [r7, #28]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d102      	bne.n	801091a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010914:	f04f 33ff 	mov.w	r3, #4294967295
 8010918:	e057      	b.n	80109ca <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	891b      	ldrh	r3, [r3, #8]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d006      	beq.n	8010930 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010922:	68b9      	ldr	r1, [r7, #8]
 8010924:	69f8      	ldr	r0, [r7, #28]
 8010926:	f7f9 fffb 	bl	800a920 <pbuf_chain>
 801092a:	e001      	b.n	8010930 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	895b      	ldrh	r3, [r3, #10]
 8010934:	2b07      	cmp	r3, #7
 8010936:	d806      	bhi.n	8010946 <udp_sendto_if_src+0x11e>
 8010938:	4b26      	ldr	r3, [pc, #152]	; (80109d4 <udp_sendto_if_src+0x1ac>)
 801093a:	f240 320d 	movw	r2, #781	; 0x30d
 801093e:	492c      	ldr	r1, [pc, #176]	; (80109f0 <udp_sendto_if_src+0x1c8>)
 8010940:	4826      	ldr	r0, [pc, #152]	; (80109dc <udp_sendto_if_src+0x1b4>)
 8010942:	f002 fdd9 	bl	80134f8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010946:	69fb      	ldr	r3, [r7, #28]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	8a5b      	ldrh	r3, [r3, #18]
 8010950:	4618      	mov	r0, r3
 8010952:	f7f8 fc19 	bl	8009188 <lwip_htons>
 8010956:	4603      	mov	r3, r0
 8010958:	461a      	mov	r2, r3
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801095e:	887b      	ldrh	r3, [r7, #2]
 8010960:	4618      	mov	r0, r3
 8010962:	f7f8 fc11 	bl	8009188 <lwip_htons>
 8010966:	4603      	mov	r3, r0
 8010968:	461a      	mov	r2, r3
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	2200      	movs	r2, #0
 8010972:	719a      	strb	r2, [r3, #6]
 8010974:	2200      	movs	r2, #0
 8010976:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	891b      	ldrh	r3, [r3, #8]
 801097c:	4618      	mov	r0, r3
 801097e:	f7f8 fc03 	bl	8009188 <lwip_htons>
 8010982:	4603      	mov	r3, r0
 8010984:	461a      	mov	r2, r3
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801098a:	2311      	movs	r3, #17
 801098c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	7adb      	ldrb	r3, [r3, #11]
 8010992:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	7a9b      	ldrb	r3, [r3, #10]
 8010998:	7cb9      	ldrb	r1, [r7, #18]
 801099a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801099c:	9202      	str	r2, [sp, #8]
 801099e:	7cfa      	ldrb	r2, [r7, #19]
 80109a0:	9201      	str	r2, [sp, #4]
 80109a2:	9300      	str	r3, [sp, #0]
 80109a4:	460b      	mov	r3, r1
 80109a6:	687a      	ldr	r2, [r7, #4]
 80109a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80109aa:	69f8      	ldr	r0, [r7, #28]
 80109ac:	f001 fcac 	bl	8012308 <ip4_output_if_src>
 80109b0:	4603      	mov	r3, r0
 80109b2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80109b4:	69fa      	ldr	r2, [r7, #28]
 80109b6:	68bb      	ldr	r3, [r7, #8]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d004      	beq.n	80109c6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80109bc:	69f8      	ldr	r0, [r7, #28]
 80109be:	f7f9 fe97 	bl	800a6f0 <pbuf_free>
    q = NULL;
 80109c2:	2300      	movs	r3, #0
 80109c4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80109c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3720      	adds	r7, #32
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	080168f4 	.word	0x080168f4
 80109d8:	08016ae0 	.word	0x08016ae0
 80109dc:	08016948 	.word	0x08016948
 80109e0:	08016b00 	.word	0x08016b00
 80109e4:	08016b20 	.word	0x08016b20
 80109e8:	08016b44 	.word	0x08016b44
 80109ec:	08016b68 	.word	0x08016b68
 80109f0:	08016b8c 	.word	0x08016b8c

080109f4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b086      	sub	sp, #24
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	4613      	mov	r3, r2
 8010a00:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d101      	bne.n	8010a0c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010a08:	4b39      	ldr	r3, [pc, #228]	; (8010af0 <udp_bind+0xfc>)
 8010a0a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d109      	bne.n	8010a26 <udp_bind+0x32>
 8010a12:	4b38      	ldr	r3, [pc, #224]	; (8010af4 <udp_bind+0x100>)
 8010a14:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010a18:	4937      	ldr	r1, [pc, #220]	; (8010af8 <udp_bind+0x104>)
 8010a1a:	4838      	ldr	r0, [pc, #224]	; (8010afc <udp_bind+0x108>)
 8010a1c:	f002 fd6c 	bl	80134f8 <iprintf>
 8010a20:	f06f 030f 	mvn.w	r3, #15
 8010a24:	e060      	b.n	8010ae8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010a26:	2300      	movs	r3, #0
 8010a28:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010a2a:	4b35      	ldr	r3, [pc, #212]	; (8010b00 <udp_bind+0x10c>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	617b      	str	r3, [r7, #20]
 8010a30:	e009      	b.n	8010a46 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010a32:	68fa      	ldr	r2, [r7, #12]
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d102      	bne.n	8010a40 <udp_bind+0x4c>
      rebind = 1;
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	74fb      	strb	r3, [r7, #19]
      break;
 8010a3e:	e005      	b.n	8010a4c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	617b      	str	r3, [r7, #20]
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d1f2      	bne.n	8010a32 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010a4c:	88fb      	ldrh	r3, [r7, #6]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d109      	bne.n	8010a66 <udp_bind+0x72>
    port = udp_new_port();
 8010a52:	f7ff fc35 	bl	80102c0 <udp_new_port>
 8010a56:	4603      	mov	r3, r0
 8010a58:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010a5a:	88fb      	ldrh	r3, [r7, #6]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d12c      	bne.n	8010aba <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010a60:	f06f 0307 	mvn.w	r3, #7
 8010a64:	e040      	b.n	8010ae8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010a66:	4b26      	ldr	r3, [pc, #152]	; (8010b00 <udp_bind+0x10c>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	617b      	str	r3, [r7, #20]
 8010a6c:	e022      	b.n	8010ab4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010a6e:	68fa      	ldr	r2, [r7, #12]
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d01b      	beq.n	8010aae <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	8a5b      	ldrh	r3, [r3, #18]
 8010a7a:	88fa      	ldrh	r2, [r7, #6]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d116      	bne.n	8010aae <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	681a      	ldr	r2, [r3, #0]
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d00d      	beq.n	8010aa8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d00a      	beq.n	8010aa8 <udp_bind+0xb4>
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d006      	beq.n	8010aa8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010a9a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d003      	beq.n	8010aa8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d102      	bne.n	8010aae <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010aa8:	f06f 0307 	mvn.w	r3, #7
 8010aac:	e01c      	b.n	8010ae8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	68db      	ldr	r3, [r3, #12]
 8010ab2:	617b      	str	r3, [r7, #20]
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d1d9      	bne.n	8010a6e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d002      	beq.n	8010ac6 <udp_bind+0xd2>
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	e000      	b.n	8010ac8 <udp_bind+0xd4>
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	68fa      	ldr	r2, [r7, #12]
 8010aca:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	88fa      	ldrh	r2, [r7, #6]
 8010ad0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010ad2:	7cfb      	ldrb	r3, [r7, #19]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d106      	bne.n	8010ae6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010ad8:	4b09      	ldr	r3, [pc, #36]	; (8010b00 <udp_bind+0x10c>)
 8010ada:	681a      	ldr	r2, [r3, #0]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010ae0:	4a07      	ldr	r2, [pc, #28]	; (8010b00 <udp_bind+0x10c>)
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010ae6:	2300      	movs	r3, #0
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3718      	adds	r7, #24
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	0801740c 	.word	0x0801740c
 8010af4:	080168f4 	.word	0x080168f4
 8010af8:	08016bbc 	.word	0x08016bbc
 8010afc:	08016948 	.word	0x08016948
 8010b00:	20008e38 	.word	0x20008e38

08010b04 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b086      	sub	sp, #24
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	60b9      	str	r1, [r7, #8]
 8010b0e:	4613      	mov	r3, r2
 8010b10:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d109      	bne.n	8010b2c <udp_connect+0x28>
 8010b18:	4b2c      	ldr	r3, [pc, #176]	; (8010bcc <udp_connect+0xc8>)
 8010b1a:	f240 4235 	movw	r2, #1077	; 0x435
 8010b1e:	492c      	ldr	r1, [pc, #176]	; (8010bd0 <udp_connect+0xcc>)
 8010b20:	482c      	ldr	r0, [pc, #176]	; (8010bd4 <udp_connect+0xd0>)
 8010b22:	f002 fce9 	bl	80134f8 <iprintf>
 8010b26:	f06f 030f 	mvn.w	r3, #15
 8010b2a:	e04b      	b.n	8010bc4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d109      	bne.n	8010b46 <udp_connect+0x42>
 8010b32:	4b26      	ldr	r3, [pc, #152]	; (8010bcc <udp_connect+0xc8>)
 8010b34:	f240 4236 	movw	r2, #1078	; 0x436
 8010b38:	4927      	ldr	r1, [pc, #156]	; (8010bd8 <udp_connect+0xd4>)
 8010b3a:	4826      	ldr	r0, [pc, #152]	; (8010bd4 <udp_connect+0xd0>)
 8010b3c:	f002 fcdc 	bl	80134f8 <iprintf>
 8010b40:	f06f 030f 	mvn.w	r3, #15
 8010b44:	e03e      	b.n	8010bc4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	8a5b      	ldrh	r3, [r3, #18]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d10f      	bne.n	8010b6e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010b4e:	68f9      	ldr	r1, [r7, #12]
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	8a5b      	ldrh	r3, [r3, #18]
 8010b54:	461a      	mov	r2, r3
 8010b56:	68f8      	ldr	r0, [r7, #12]
 8010b58:	f7ff ff4c 	bl	80109f4 <udp_bind>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010b60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d002      	beq.n	8010b6e <udp_connect+0x6a>
      return err;
 8010b68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010b6c:	e02a      	b.n	8010bc4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d002      	beq.n	8010b7a <udp_connect+0x76>
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	e000      	b.n	8010b7c <udp_connect+0x78>
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	68fa      	ldr	r2, [r7, #12]
 8010b7e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	88fa      	ldrh	r2, [r7, #6]
 8010b84:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	7c1b      	ldrb	r3, [r3, #16]
 8010b8a:	f043 0304 	orr.w	r3, r3, #4
 8010b8e:	b2da      	uxtb	r2, r3
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010b94:	4b11      	ldr	r3, [pc, #68]	; (8010bdc <udp_connect+0xd8>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	617b      	str	r3, [r7, #20]
 8010b9a:	e008      	b.n	8010bae <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010b9c:	68fa      	ldr	r2, [r7, #12]
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d101      	bne.n	8010ba8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	e00d      	b.n	8010bc4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	617b      	str	r3, [r7, #20]
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d1f3      	bne.n	8010b9c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010bb4:	4b09      	ldr	r3, [pc, #36]	; (8010bdc <udp_connect+0xd8>)
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010bbc:	4a07      	ldr	r2, [pc, #28]	; (8010bdc <udp_connect+0xd8>)
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010bc2:	2300      	movs	r3, #0
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3718      	adds	r7, #24
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}
 8010bcc:	080168f4 	.word	0x080168f4
 8010bd0:	08016bd4 	.word	0x08016bd4
 8010bd4:	08016948 	.word	0x08016948
 8010bd8:	08016bf0 	.word	0x08016bf0
 8010bdc:	20008e38 	.word	0x20008e38

08010be0 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d107      	bne.n	8010bfe <udp_disconnect+0x1e>
 8010bee:	4b0d      	ldr	r3, [pc, #52]	; (8010c24 <udp_disconnect+0x44>)
 8010bf0:	f240 426a 	movw	r2, #1130	; 0x46a
 8010bf4:	490c      	ldr	r1, [pc, #48]	; (8010c28 <udp_disconnect+0x48>)
 8010bf6:	480d      	ldr	r0, [pc, #52]	; (8010c2c <udp_disconnect+0x4c>)
 8010bf8:	f002 fc7e 	bl	80134f8 <iprintf>
 8010bfc:	e00f      	b.n	8010c1e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2200      	movs	r2, #0
 8010c02:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2200      	movs	r2, #0
 8010c08:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	7c1b      	ldrb	r3, [r3, #16]
 8010c14:	f023 0304 	bic.w	r3, r3, #4
 8010c18:	b2da      	uxtb	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	741a      	strb	r2, [r3, #16]
}
 8010c1e:	3708      	adds	r7, #8
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	080168f4 	.word	0x080168f4
 8010c28:	08016c0c 	.word	0x08016c0c
 8010c2c:	08016948 	.word	0x08016948

08010c30 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60f8      	str	r0, [r7, #12]
 8010c38:	60b9      	str	r1, [r7, #8]
 8010c3a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d107      	bne.n	8010c52 <udp_recv+0x22>
 8010c42:	4b08      	ldr	r3, [pc, #32]	; (8010c64 <udp_recv+0x34>)
 8010c44:	f240 428a 	movw	r2, #1162	; 0x48a
 8010c48:	4907      	ldr	r1, [pc, #28]	; (8010c68 <udp_recv+0x38>)
 8010c4a:	4808      	ldr	r0, [pc, #32]	; (8010c6c <udp_recv+0x3c>)
 8010c4c:	f002 fc54 	bl	80134f8 <iprintf>
 8010c50:	e005      	b.n	8010c5e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	68ba      	ldr	r2, [r7, #8]
 8010c56:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	61da      	str	r2, [r3, #28]
}
 8010c5e:	3710      	adds	r7, #16
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	080168f4 	.word	0x080168f4
 8010c68:	08016c28 	.word	0x08016c28
 8010c6c:	08016948 	.word	0x08016948

08010c70 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d107      	bne.n	8010c8e <udp_remove+0x1e>
 8010c7e:	4b19      	ldr	r3, [pc, #100]	; (8010ce4 <udp_remove+0x74>)
 8010c80:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8010c84:	4918      	ldr	r1, [pc, #96]	; (8010ce8 <udp_remove+0x78>)
 8010c86:	4819      	ldr	r0, [pc, #100]	; (8010cec <udp_remove+0x7c>)
 8010c88:	f002 fc36 	bl	80134f8 <iprintf>
 8010c8c:	e026      	b.n	8010cdc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010c8e:	4b18      	ldr	r3, [pc, #96]	; (8010cf0 <udp_remove+0x80>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	687a      	ldr	r2, [r7, #4]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d105      	bne.n	8010ca4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010c98:	4b15      	ldr	r3, [pc, #84]	; (8010cf0 <udp_remove+0x80>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	4a14      	ldr	r2, [pc, #80]	; (8010cf0 <udp_remove+0x80>)
 8010ca0:	6013      	str	r3, [r2, #0]
 8010ca2:	e017      	b.n	8010cd4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010ca4:	4b12      	ldr	r3, [pc, #72]	; (8010cf0 <udp_remove+0x80>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	60fb      	str	r3, [r7, #12]
 8010caa:	e010      	b.n	8010cce <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d009      	beq.n	8010cc8 <udp_remove+0x58>
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	687a      	ldr	r2, [r7, #4]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d104      	bne.n	8010cc8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	68da      	ldr	r2, [r3, #12]
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	60da      	str	r2, [r3, #12]
        break;
 8010cc6:	e005      	b.n	8010cd4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	68db      	ldr	r3, [r3, #12]
 8010ccc:	60fb      	str	r3, [r7, #12]
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d1eb      	bne.n	8010cac <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010cd4:	6879      	ldr	r1, [r7, #4]
 8010cd6:	2000      	movs	r0, #0
 8010cd8:	f7f8 fef8 	bl	8009acc <memp_free>
}
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	080168f4 	.word	0x080168f4
 8010ce8:	08016c40 	.word	0x08016c40
 8010cec:	08016948 	.word	0x08016948
 8010cf0:	20008e38 	.word	0x20008e38

08010cf4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b082      	sub	sp, #8
 8010cf8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010cfa:	2000      	movs	r0, #0
 8010cfc:	f7f8 fe9a 	bl	8009a34 <memp_malloc>
 8010d00:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d007      	beq.n	8010d18 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010d08:	2220      	movs	r2, #32
 8010d0a:	2100      	movs	r1, #0
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f002 fbeb 	bl	80134e8 <memset>
    pcb->ttl = UDP_TTL;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	22ff      	movs	r2, #255	; 0xff
 8010d16:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010d18:	687b      	ldr	r3, [r7, #4]
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3708      	adds	r7, #8
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
	...

08010d24 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010d24:	b480      	push	{r7}
 8010d26:	b085      	sub	sp, #20
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d01e      	beq.n	8010d72 <udp_netif_ip_addr_changed+0x4e>
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d01a      	beq.n	8010d72 <udp_netif_ip_addr_changed+0x4e>
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d017      	beq.n	8010d72 <udp_netif_ip_addr_changed+0x4e>
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d013      	beq.n	8010d72 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010d4a:	4b0d      	ldr	r3, [pc, #52]	; (8010d80 <udp_netif_ip_addr_changed+0x5c>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	60fb      	str	r3, [r7, #12]
 8010d50:	e00c      	b.n	8010d6c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d103      	bne.n	8010d66 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	68db      	ldr	r3, [r3, #12]
 8010d6a:	60fb      	str	r3, [r7, #12]
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d1ef      	bne.n	8010d52 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010d72:	bf00      	nop
 8010d74:	3714      	adds	r7, #20
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr
 8010d7e:	bf00      	nop
 8010d80:	20008e38 	.word	0x20008e38

08010d84 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010d8c:	4915      	ldr	r1, [pc, #84]	; (8010de4 <etharp_free_entry+0x60>)
 8010d8e:	687a      	ldr	r2, [r7, #4]
 8010d90:	4613      	mov	r3, r2
 8010d92:	005b      	lsls	r3, r3, #1
 8010d94:	4413      	add	r3, r2
 8010d96:	00db      	lsls	r3, r3, #3
 8010d98:	440b      	add	r3, r1
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d013      	beq.n	8010dc8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010da0:	4910      	ldr	r1, [pc, #64]	; (8010de4 <etharp_free_entry+0x60>)
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	4613      	mov	r3, r2
 8010da6:	005b      	lsls	r3, r3, #1
 8010da8:	4413      	add	r3, r2
 8010daa:	00db      	lsls	r3, r3, #3
 8010dac:	440b      	add	r3, r1
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7f9 fc9d 	bl	800a6f0 <pbuf_free>
    arp_table[i].q = NULL;
 8010db6:	490b      	ldr	r1, [pc, #44]	; (8010de4 <etharp_free_entry+0x60>)
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	4613      	mov	r3, r2
 8010dbc:	005b      	lsls	r3, r3, #1
 8010dbe:	4413      	add	r3, r2
 8010dc0:	00db      	lsls	r3, r3, #3
 8010dc2:	440b      	add	r3, r1
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010dc8:	4906      	ldr	r1, [pc, #24]	; (8010de4 <etharp_free_entry+0x60>)
 8010dca:	687a      	ldr	r2, [r7, #4]
 8010dcc:	4613      	mov	r3, r2
 8010dce:	005b      	lsls	r3, r3, #1
 8010dd0:	4413      	add	r3, r2
 8010dd2:	00db      	lsls	r3, r3, #3
 8010dd4:	440b      	add	r3, r1
 8010dd6:	3314      	adds	r3, #20
 8010dd8:	2200      	movs	r2, #0
 8010dda:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010ddc:	bf00      	nop
 8010dde:	3708      	adds	r7, #8
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	20008e3c 	.word	0x20008e3c

08010de8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010dee:	2300      	movs	r3, #0
 8010df0:	607b      	str	r3, [r7, #4]
 8010df2:	e096      	b.n	8010f22 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010df4:	494f      	ldr	r1, [pc, #316]	; (8010f34 <etharp_tmr+0x14c>)
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	4613      	mov	r3, r2
 8010dfa:	005b      	lsls	r3, r3, #1
 8010dfc:	4413      	add	r3, r2
 8010dfe:	00db      	lsls	r3, r3, #3
 8010e00:	440b      	add	r3, r1
 8010e02:	3314      	adds	r3, #20
 8010e04:	781b      	ldrb	r3, [r3, #0]
 8010e06:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010e08:	78fb      	ldrb	r3, [r7, #3]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	f000 8086 	beq.w	8010f1c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010e10:	4948      	ldr	r1, [pc, #288]	; (8010f34 <etharp_tmr+0x14c>)
 8010e12:	687a      	ldr	r2, [r7, #4]
 8010e14:	4613      	mov	r3, r2
 8010e16:	005b      	lsls	r3, r3, #1
 8010e18:	4413      	add	r3, r2
 8010e1a:	00db      	lsls	r3, r3, #3
 8010e1c:	440b      	add	r3, r1
 8010e1e:	3312      	adds	r3, #18
 8010e20:	881b      	ldrh	r3, [r3, #0]
 8010e22:	3301      	adds	r3, #1
 8010e24:	b298      	uxth	r0, r3
 8010e26:	4943      	ldr	r1, [pc, #268]	; (8010f34 <etharp_tmr+0x14c>)
 8010e28:	687a      	ldr	r2, [r7, #4]
 8010e2a:	4613      	mov	r3, r2
 8010e2c:	005b      	lsls	r3, r3, #1
 8010e2e:	4413      	add	r3, r2
 8010e30:	00db      	lsls	r3, r3, #3
 8010e32:	440b      	add	r3, r1
 8010e34:	3312      	adds	r3, #18
 8010e36:	4602      	mov	r2, r0
 8010e38:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010e3a:	493e      	ldr	r1, [pc, #248]	; (8010f34 <etharp_tmr+0x14c>)
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	4613      	mov	r3, r2
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	4413      	add	r3, r2
 8010e44:	00db      	lsls	r3, r3, #3
 8010e46:	440b      	add	r3, r1
 8010e48:	3312      	adds	r3, #18
 8010e4a:	881b      	ldrh	r3, [r3, #0]
 8010e4c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010e50:	d215      	bcs.n	8010e7e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010e52:	4938      	ldr	r1, [pc, #224]	; (8010f34 <etharp_tmr+0x14c>)
 8010e54:	687a      	ldr	r2, [r7, #4]
 8010e56:	4613      	mov	r3, r2
 8010e58:	005b      	lsls	r3, r3, #1
 8010e5a:	4413      	add	r3, r2
 8010e5c:	00db      	lsls	r3, r3, #3
 8010e5e:	440b      	add	r3, r1
 8010e60:	3314      	adds	r3, #20
 8010e62:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010e64:	2b01      	cmp	r3, #1
 8010e66:	d10e      	bne.n	8010e86 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010e68:	4932      	ldr	r1, [pc, #200]	; (8010f34 <etharp_tmr+0x14c>)
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	4613      	mov	r3, r2
 8010e6e:	005b      	lsls	r3, r3, #1
 8010e70:	4413      	add	r3, r2
 8010e72:	00db      	lsls	r3, r3, #3
 8010e74:	440b      	add	r3, r1
 8010e76:	3312      	adds	r3, #18
 8010e78:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010e7a:	2b04      	cmp	r3, #4
 8010e7c:	d903      	bls.n	8010e86 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f7ff ff80 	bl	8010d84 <etharp_free_entry>
 8010e84:	e04a      	b.n	8010f1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010e86:	492b      	ldr	r1, [pc, #172]	; (8010f34 <etharp_tmr+0x14c>)
 8010e88:	687a      	ldr	r2, [r7, #4]
 8010e8a:	4613      	mov	r3, r2
 8010e8c:	005b      	lsls	r3, r3, #1
 8010e8e:	4413      	add	r3, r2
 8010e90:	00db      	lsls	r3, r3, #3
 8010e92:	440b      	add	r3, r1
 8010e94:	3314      	adds	r3, #20
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	2b03      	cmp	r3, #3
 8010e9a:	d10a      	bne.n	8010eb2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010e9c:	4925      	ldr	r1, [pc, #148]	; (8010f34 <etharp_tmr+0x14c>)
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	4613      	mov	r3, r2
 8010ea2:	005b      	lsls	r3, r3, #1
 8010ea4:	4413      	add	r3, r2
 8010ea6:	00db      	lsls	r3, r3, #3
 8010ea8:	440b      	add	r3, r1
 8010eaa:	3314      	adds	r3, #20
 8010eac:	2204      	movs	r2, #4
 8010eae:	701a      	strb	r2, [r3, #0]
 8010eb0:	e034      	b.n	8010f1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010eb2:	4920      	ldr	r1, [pc, #128]	; (8010f34 <etharp_tmr+0x14c>)
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	005b      	lsls	r3, r3, #1
 8010eba:	4413      	add	r3, r2
 8010ebc:	00db      	lsls	r3, r3, #3
 8010ebe:	440b      	add	r3, r1
 8010ec0:	3314      	adds	r3, #20
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	2b04      	cmp	r3, #4
 8010ec6:	d10a      	bne.n	8010ede <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010ec8:	491a      	ldr	r1, [pc, #104]	; (8010f34 <etharp_tmr+0x14c>)
 8010eca:	687a      	ldr	r2, [r7, #4]
 8010ecc:	4613      	mov	r3, r2
 8010ece:	005b      	lsls	r3, r3, #1
 8010ed0:	4413      	add	r3, r2
 8010ed2:	00db      	lsls	r3, r3, #3
 8010ed4:	440b      	add	r3, r1
 8010ed6:	3314      	adds	r3, #20
 8010ed8:	2202      	movs	r2, #2
 8010eda:	701a      	strb	r2, [r3, #0]
 8010edc:	e01e      	b.n	8010f1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010ede:	4915      	ldr	r1, [pc, #84]	; (8010f34 <etharp_tmr+0x14c>)
 8010ee0:	687a      	ldr	r2, [r7, #4]
 8010ee2:	4613      	mov	r3, r2
 8010ee4:	005b      	lsls	r3, r3, #1
 8010ee6:	4413      	add	r3, r2
 8010ee8:	00db      	lsls	r3, r3, #3
 8010eea:	440b      	add	r3, r1
 8010eec:	3314      	adds	r3, #20
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	2b01      	cmp	r3, #1
 8010ef2:	d113      	bne.n	8010f1c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010ef4:	490f      	ldr	r1, [pc, #60]	; (8010f34 <etharp_tmr+0x14c>)
 8010ef6:	687a      	ldr	r2, [r7, #4]
 8010ef8:	4613      	mov	r3, r2
 8010efa:	005b      	lsls	r3, r3, #1
 8010efc:	4413      	add	r3, r2
 8010efe:	00db      	lsls	r3, r3, #3
 8010f00:	440b      	add	r3, r1
 8010f02:	3308      	adds	r3, #8
 8010f04:	6818      	ldr	r0, [r3, #0]
 8010f06:	687a      	ldr	r2, [r7, #4]
 8010f08:	4613      	mov	r3, r2
 8010f0a:	005b      	lsls	r3, r3, #1
 8010f0c:	4413      	add	r3, r2
 8010f0e:	00db      	lsls	r3, r3, #3
 8010f10:	4a08      	ldr	r2, [pc, #32]	; (8010f34 <etharp_tmr+0x14c>)
 8010f12:	4413      	add	r3, r2
 8010f14:	3304      	adds	r3, #4
 8010f16:	4619      	mov	r1, r3
 8010f18:	f000 fe6e 	bl	8011bf8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	607b      	str	r3, [r7, #4]
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2b09      	cmp	r3, #9
 8010f26:	f77f af65 	ble.w	8010df4 <etharp_tmr+0xc>
      }
    }
  }
}
 8010f2a:	bf00      	nop
 8010f2c:	bf00      	nop
 8010f2e:	3708      	adds	r7, #8
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}
 8010f34:	20008e3c 	.word	0x20008e3c

08010f38 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b08a      	sub	sp, #40	; 0x28
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	60f8      	str	r0, [r7, #12]
 8010f40:	460b      	mov	r3, r1
 8010f42:	607a      	str	r2, [r7, #4]
 8010f44:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010f46:	230a      	movs	r3, #10
 8010f48:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010f4a:	230a      	movs	r3, #10
 8010f4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010f4e:	230a      	movs	r3, #10
 8010f50:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010f52:	2300      	movs	r3, #0
 8010f54:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010f56:	230a      	movs	r3, #10
 8010f58:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	83bb      	strh	r3, [r7, #28]
 8010f5e:	2300      	movs	r3, #0
 8010f60:	837b      	strh	r3, [r7, #26]
 8010f62:	2300      	movs	r3, #0
 8010f64:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f66:	2300      	movs	r3, #0
 8010f68:	843b      	strh	r3, [r7, #32]
 8010f6a:	e0ae      	b.n	80110ca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010f6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f70:	49a6      	ldr	r1, [pc, #664]	; (801120c <etharp_find_entry+0x2d4>)
 8010f72:	4613      	mov	r3, r2
 8010f74:	005b      	lsls	r3, r3, #1
 8010f76:	4413      	add	r3, r2
 8010f78:	00db      	lsls	r3, r3, #3
 8010f7a:	440b      	add	r3, r1
 8010f7c:	3314      	adds	r3, #20
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010f82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010f86:	2b0a      	cmp	r3, #10
 8010f88:	d105      	bne.n	8010f96 <etharp_find_entry+0x5e>
 8010f8a:	7dfb      	ldrb	r3, [r7, #23]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d102      	bne.n	8010f96 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010f90:	8c3b      	ldrh	r3, [r7, #32]
 8010f92:	847b      	strh	r3, [r7, #34]	; 0x22
 8010f94:	e095      	b.n	80110c2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010f96:	7dfb      	ldrb	r3, [r7, #23]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f000 8092 	beq.w	80110c2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010f9e:	7dfb      	ldrb	r3, [r7, #23]
 8010fa0:	2b01      	cmp	r3, #1
 8010fa2:	d009      	beq.n	8010fb8 <etharp_find_entry+0x80>
 8010fa4:	7dfb      	ldrb	r3, [r7, #23]
 8010fa6:	2b01      	cmp	r3, #1
 8010fa8:	d806      	bhi.n	8010fb8 <etharp_find_entry+0x80>
 8010faa:	4b99      	ldr	r3, [pc, #612]	; (8011210 <etharp_find_entry+0x2d8>)
 8010fac:	f240 1223 	movw	r2, #291	; 0x123
 8010fb0:	4998      	ldr	r1, [pc, #608]	; (8011214 <etharp_find_entry+0x2dc>)
 8010fb2:	4899      	ldr	r0, [pc, #612]	; (8011218 <etharp_find_entry+0x2e0>)
 8010fb4:	f002 faa0 	bl	80134f8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d020      	beq.n	8011000 <etharp_find_entry+0xc8>
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	6819      	ldr	r1, [r3, #0]
 8010fc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fc6:	4891      	ldr	r0, [pc, #580]	; (801120c <etharp_find_entry+0x2d4>)
 8010fc8:	4613      	mov	r3, r2
 8010fca:	005b      	lsls	r3, r3, #1
 8010fcc:	4413      	add	r3, r2
 8010fce:	00db      	lsls	r3, r3, #3
 8010fd0:	4403      	add	r3, r0
 8010fd2:	3304      	adds	r3, #4
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	4299      	cmp	r1, r3
 8010fd8:	d112      	bne.n	8011000 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d00c      	beq.n	8010ffa <etharp_find_entry+0xc2>
 8010fe0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fe4:	4989      	ldr	r1, [pc, #548]	; (801120c <etharp_find_entry+0x2d4>)
 8010fe6:	4613      	mov	r3, r2
 8010fe8:	005b      	lsls	r3, r3, #1
 8010fea:	4413      	add	r3, r2
 8010fec:	00db      	lsls	r3, r3, #3
 8010fee:	440b      	add	r3, r1
 8010ff0:	3308      	adds	r3, #8
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	687a      	ldr	r2, [r7, #4]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d102      	bne.n	8011000 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010ffa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ffe:	e100      	b.n	8011202 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011000:	7dfb      	ldrb	r3, [r7, #23]
 8011002:	2b01      	cmp	r3, #1
 8011004:	d140      	bne.n	8011088 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011006:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801100a:	4980      	ldr	r1, [pc, #512]	; (801120c <etharp_find_entry+0x2d4>)
 801100c:	4613      	mov	r3, r2
 801100e:	005b      	lsls	r3, r3, #1
 8011010:	4413      	add	r3, r2
 8011012:	00db      	lsls	r3, r3, #3
 8011014:	440b      	add	r3, r1
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d01a      	beq.n	8011052 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801101c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011020:	497a      	ldr	r1, [pc, #488]	; (801120c <etharp_find_entry+0x2d4>)
 8011022:	4613      	mov	r3, r2
 8011024:	005b      	lsls	r3, r3, #1
 8011026:	4413      	add	r3, r2
 8011028:	00db      	lsls	r3, r3, #3
 801102a:	440b      	add	r3, r1
 801102c:	3312      	adds	r3, #18
 801102e:	881b      	ldrh	r3, [r3, #0]
 8011030:	8bba      	ldrh	r2, [r7, #28]
 8011032:	429a      	cmp	r2, r3
 8011034:	d845      	bhi.n	80110c2 <etharp_find_entry+0x18a>
            old_queue = i;
 8011036:	8c3b      	ldrh	r3, [r7, #32]
 8011038:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801103a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801103e:	4973      	ldr	r1, [pc, #460]	; (801120c <etharp_find_entry+0x2d4>)
 8011040:	4613      	mov	r3, r2
 8011042:	005b      	lsls	r3, r3, #1
 8011044:	4413      	add	r3, r2
 8011046:	00db      	lsls	r3, r3, #3
 8011048:	440b      	add	r3, r1
 801104a:	3312      	adds	r3, #18
 801104c:	881b      	ldrh	r3, [r3, #0]
 801104e:	83bb      	strh	r3, [r7, #28]
 8011050:	e037      	b.n	80110c2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011052:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011056:	496d      	ldr	r1, [pc, #436]	; (801120c <etharp_find_entry+0x2d4>)
 8011058:	4613      	mov	r3, r2
 801105a:	005b      	lsls	r3, r3, #1
 801105c:	4413      	add	r3, r2
 801105e:	00db      	lsls	r3, r3, #3
 8011060:	440b      	add	r3, r1
 8011062:	3312      	adds	r3, #18
 8011064:	881b      	ldrh	r3, [r3, #0]
 8011066:	8b7a      	ldrh	r2, [r7, #26]
 8011068:	429a      	cmp	r2, r3
 801106a:	d82a      	bhi.n	80110c2 <etharp_find_entry+0x18a>
            old_pending = i;
 801106c:	8c3b      	ldrh	r3, [r7, #32]
 801106e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011070:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011074:	4965      	ldr	r1, [pc, #404]	; (801120c <etharp_find_entry+0x2d4>)
 8011076:	4613      	mov	r3, r2
 8011078:	005b      	lsls	r3, r3, #1
 801107a:	4413      	add	r3, r2
 801107c:	00db      	lsls	r3, r3, #3
 801107e:	440b      	add	r3, r1
 8011080:	3312      	adds	r3, #18
 8011082:	881b      	ldrh	r3, [r3, #0]
 8011084:	837b      	strh	r3, [r7, #26]
 8011086:	e01c      	b.n	80110c2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011088:	7dfb      	ldrb	r3, [r7, #23]
 801108a:	2b01      	cmp	r3, #1
 801108c:	d919      	bls.n	80110c2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801108e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011092:	495e      	ldr	r1, [pc, #376]	; (801120c <etharp_find_entry+0x2d4>)
 8011094:	4613      	mov	r3, r2
 8011096:	005b      	lsls	r3, r3, #1
 8011098:	4413      	add	r3, r2
 801109a:	00db      	lsls	r3, r3, #3
 801109c:	440b      	add	r3, r1
 801109e:	3312      	adds	r3, #18
 80110a0:	881b      	ldrh	r3, [r3, #0]
 80110a2:	8b3a      	ldrh	r2, [r7, #24]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d80c      	bhi.n	80110c2 <etharp_find_entry+0x18a>
            old_stable = i;
 80110a8:	8c3b      	ldrh	r3, [r7, #32]
 80110aa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80110ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110b0:	4956      	ldr	r1, [pc, #344]	; (801120c <etharp_find_entry+0x2d4>)
 80110b2:	4613      	mov	r3, r2
 80110b4:	005b      	lsls	r3, r3, #1
 80110b6:	4413      	add	r3, r2
 80110b8:	00db      	lsls	r3, r3, #3
 80110ba:	440b      	add	r3, r1
 80110bc:	3312      	adds	r3, #18
 80110be:	881b      	ldrh	r3, [r3, #0]
 80110c0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80110c2:	8c3b      	ldrh	r3, [r7, #32]
 80110c4:	3301      	adds	r3, #1
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	843b      	strh	r3, [r7, #32]
 80110ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80110ce:	2b09      	cmp	r3, #9
 80110d0:	f77f af4c 	ble.w	8010f6c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80110d4:	7afb      	ldrb	r3, [r7, #11]
 80110d6:	f003 0302 	and.w	r3, r3, #2
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d108      	bne.n	80110f0 <etharp_find_entry+0x1b8>
 80110de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80110e2:	2b0a      	cmp	r3, #10
 80110e4:	d107      	bne.n	80110f6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80110e6:	7afb      	ldrb	r3, [r7, #11]
 80110e8:	f003 0301 	and.w	r3, r3, #1
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d102      	bne.n	80110f6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80110f0:	f04f 33ff 	mov.w	r3, #4294967295
 80110f4:	e085      	b.n	8011202 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80110f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80110fa:	2b09      	cmp	r3, #9
 80110fc:	dc02      	bgt.n	8011104 <etharp_find_entry+0x1cc>
    i = empty;
 80110fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011100:	843b      	strh	r3, [r7, #32]
 8011102:	e039      	b.n	8011178 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011104:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011108:	2b09      	cmp	r3, #9
 801110a:	dc14      	bgt.n	8011136 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801110c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801110e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011110:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011114:	493d      	ldr	r1, [pc, #244]	; (801120c <etharp_find_entry+0x2d4>)
 8011116:	4613      	mov	r3, r2
 8011118:	005b      	lsls	r3, r3, #1
 801111a:	4413      	add	r3, r2
 801111c:	00db      	lsls	r3, r3, #3
 801111e:	440b      	add	r3, r1
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d018      	beq.n	8011158 <etharp_find_entry+0x220>
 8011126:	4b3a      	ldr	r3, [pc, #232]	; (8011210 <etharp_find_entry+0x2d8>)
 8011128:	f240 126d 	movw	r2, #365	; 0x16d
 801112c:	493b      	ldr	r1, [pc, #236]	; (801121c <etharp_find_entry+0x2e4>)
 801112e:	483a      	ldr	r0, [pc, #232]	; (8011218 <etharp_find_entry+0x2e0>)
 8011130:	f002 f9e2 	bl	80134f8 <iprintf>
 8011134:	e010      	b.n	8011158 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011136:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801113a:	2b09      	cmp	r3, #9
 801113c:	dc02      	bgt.n	8011144 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801113e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011140:	843b      	strh	r3, [r7, #32]
 8011142:	e009      	b.n	8011158 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011144:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011148:	2b09      	cmp	r3, #9
 801114a:	dc02      	bgt.n	8011152 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801114c:	8bfb      	ldrh	r3, [r7, #30]
 801114e:	843b      	strh	r3, [r7, #32]
 8011150:	e002      	b.n	8011158 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011152:	f04f 33ff 	mov.w	r3, #4294967295
 8011156:	e054      	b.n	8011202 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011158:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801115c:	2b09      	cmp	r3, #9
 801115e:	dd06      	ble.n	801116e <etharp_find_entry+0x236>
 8011160:	4b2b      	ldr	r3, [pc, #172]	; (8011210 <etharp_find_entry+0x2d8>)
 8011162:	f240 127f 	movw	r2, #383	; 0x17f
 8011166:	492e      	ldr	r1, [pc, #184]	; (8011220 <etharp_find_entry+0x2e8>)
 8011168:	482b      	ldr	r0, [pc, #172]	; (8011218 <etharp_find_entry+0x2e0>)
 801116a:	f002 f9c5 	bl	80134f8 <iprintf>
    etharp_free_entry(i);
 801116e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011172:	4618      	mov	r0, r3
 8011174:	f7ff fe06 	bl	8010d84 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011178:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801117c:	2b09      	cmp	r3, #9
 801117e:	dd06      	ble.n	801118e <etharp_find_entry+0x256>
 8011180:	4b23      	ldr	r3, [pc, #140]	; (8011210 <etharp_find_entry+0x2d8>)
 8011182:	f240 1283 	movw	r2, #387	; 0x183
 8011186:	4926      	ldr	r1, [pc, #152]	; (8011220 <etharp_find_entry+0x2e8>)
 8011188:	4823      	ldr	r0, [pc, #140]	; (8011218 <etharp_find_entry+0x2e0>)
 801118a:	f002 f9b5 	bl	80134f8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801118e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011192:	491e      	ldr	r1, [pc, #120]	; (801120c <etharp_find_entry+0x2d4>)
 8011194:	4613      	mov	r3, r2
 8011196:	005b      	lsls	r3, r3, #1
 8011198:	4413      	add	r3, r2
 801119a:	00db      	lsls	r3, r3, #3
 801119c:	440b      	add	r3, r1
 801119e:	3314      	adds	r3, #20
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d006      	beq.n	80111b4 <etharp_find_entry+0x27c>
 80111a6:	4b1a      	ldr	r3, [pc, #104]	; (8011210 <etharp_find_entry+0x2d8>)
 80111a8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80111ac:	491d      	ldr	r1, [pc, #116]	; (8011224 <etharp_find_entry+0x2ec>)
 80111ae:	481a      	ldr	r0, [pc, #104]	; (8011218 <etharp_find_entry+0x2e0>)
 80111b0:	f002 f9a2 	bl	80134f8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d00b      	beq.n	80111d2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80111ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	6819      	ldr	r1, [r3, #0]
 80111c2:	4812      	ldr	r0, [pc, #72]	; (801120c <etharp_find_entry+0x2d4>)
 80111c4:	4613      	mov	r3, r2
 80111c6:	005b      	lsls	r3, r3, #1
 80111c8:	4413      	add	r3, r2
 80111ca:	00db      	lsls	r3, r3, #3
 80111cc:	4403      	add	r3, r0
 80111ce:	3304      	adds	r3, #4
 80111d0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80111d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80111d6:	490d      	ldr	r1, [pc, #52]	; (801120c <etharp_find_entry+0x2d4>)
 80111d8:	4613      	mov	r3, r2
 80111da:	005b      	lsls	r3, r3, #1
 80111dc:	4413      	add	r3, r2
 80111de:	00db      	lsls	r3, r3, #3
 80111e0:	440b      	add	r3, r1
 80111e2:	3312      	adds	r3, #18
 80111e4:	2200      	movs	r2, #0
 80111e6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80111e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80111ec:	4907      	ldr	r1, [pc, #28]	; (801120c <etharp_find_entry+0x2d4>)
 80111ee:	4613      	mov	r3, r2
 80111f0:	005b      	lsls	r3, r3, #1
 80111f2:	4413      	add	r3, r2
 80111f4:	00db      	lsls	r3, r3, #3
 80111f6:	440b      	add	r3, r1
 80111f8:	3308      	adds	r3, #8
 80111fa:	687a      	ldr	r2, [r7, #4]
 80111fc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80111fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011202:	4618      	mov	r0, r3
 8011204:	3728      	adds	r7, #40	; 0x28
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}
 801120a:	bf00      	nop
 801120c:	20008e3c 	.word	0x20008e3c
 8011210:	08016c58 	.word	0x08016c58
 8011214:	08016c90 	.word	0x08016c90
 8011218:	08016cd0 	.word	0x08016cd0
 801121c:	08016cf8 	.word	0x08016cf8
 8011220:	08016d10 	.word	0x08016d10
 8011224:	08016d24 	.word	0x08016d24

08011228 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b088      	sub	sp, #32
 801122c:	af02      	add	r7, sp, #8
 801122e:	60f8      	str	r0, [r7, #12]
 8011230:	60b9      	str	r1, [r7, #8]
 8011232:	607a      	str	r2, [r7, #4]
 8011234:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801123c:	2b06      	cmp	r3, #6
 801123e:	d006      	beq.n	801124e <etharp_update_arp_entry+0x26>
 8011240:	4b48      	ldr	r3, [pc, #288]	; (8011364 <etharp_update_arp_entry+0x13c>)
 8011242:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011246:	4948      	ldr	r1, [pc, #288]	; (8011368 <etharp_update_arp_entry+0x140>)
 8011248:	4848      	ldr	r0, [pc, #288]	; (801136c <etharp_update_arp_entry+0x144>)
 801124a:	f002 f955 	bl	80134f8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d012      	beq.n	801127a <etharp_update_arp_entry+0x52>
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d00e      	beq.n	801127a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	68f9      	ldr	r1, [r7, #12]
 8011262:	4618      	mov	r0, r3
 8011264:	f001 f8fe 	bl	8012464 <ip4_addr_isbroadcast_u32>
 8011268:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801126a:	2b00      	cmp	r3, #0
 801126c:	d105      	bne.n	801127a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011276:	2be0      	cmp	r3, #224	; 0xe0
 8011278:	d102      	bne.n	8011280 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801127a:	f06f 030f 	mvn.w	r3, #15
 801127e:	e06c      	b.n	801135a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011280:	78fb      	ldrb	r3, [r7, #3]
 8011282:	68fa      	ldr	r2, [r7, #12]
 8011284:	4619      	mov	r1, r3
 8011286:	68b8      	ldr	r0, [r7, #8]
 8011288:	f7ff fe56 	bl	8010f38 <etharp_find_entry>
 801128c:	4603      	mov	r3, r0
 801128e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011290:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011294:	2b00      	cmp	r3, #0
 8011296:	da02      	bge.n	801129e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011298:	8afb      	ldrh	r3, [r7, #22]
 801129a:	b25b      	sxtb	r3, r3
 801129c:	e05d      	b.n	801135a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801129e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112a2:	4933      	ldr	r1, [pc, #204]	; (8011370 <etharp_update_arp_entry+0x148>)
 80112a4:	4613      	mov	r3, r2
 80112a6:	005b      	lsls	r3, r3, #1
 80112a8:	4413      	add	r3, r2
 80112aa:	00db      	lsls	r3, r3, #3
 80112ac:	440b      	add	r3, r1
 80112ae:	3314      	adds	r3, #20
 80112b0:	2202      	movs	r2, #2
 80112b2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80112b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112b8:	492d      	ldr	r1, [pc, #180]	; (8011370 <etharp_update_arp_entry+0x148>)
 80112ba:	4613      	mov	r3, r2
 80112bc:	005b      	lsls	r3, r3, #1
 80112be:	4413      	add	r3, r2
 80112c0:	00db      	lsls	r3, r3, #3
 80112c2:	440b      	add	r3, r1
 80112c4:	3308      	adds	r3, #8
 80112c6:	68fa      	ldr	r2, [r7, #12]
 80112c8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80112ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112ce:	4613      	mov	r3, r2
 80112d0:	005b      	lsls	r3, r3, #1
 80112d2:	4413      	add	r3, r2
 80112d4:	00db      	lsls	r3, r3, #3
 80112d6:	3308      	adds	r3, #8
 80112d8:	4a25      	ldr	r2, [pc, #148]	; (8011370 <etharp_update_arp_entry+0x148>)
 80112da:	4413      	add	r3, r2
 80112dc:	3304      	adds	r3, #4
 80112de:	2206      	movs	r2, #6
 80112e0:	6879      	ldr	r1, [r7, #4]
 80112e2:	4618      	mov	r0, r3
 80112e4:	f002 f8d8 	bl	8013498 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80112e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112ec:	4920      	ldr	r1, [pc, #128]	; (8011370 <etharp_update_arp_entry+0x148>)
 80112ee:	4613      	mov	r3, r2
 80112f0:	005b      	lsls	r3, r3, #1
 80112f2:	4413      	add	r3, r2
 80112f4:	00db      	lsls	r3, r3, #3
 80112f6:	440b      	add	r3, r1
 80112f8:	3312      	adds	r3, #18
 80112fa:	2200      	movs	r2, #0
 80112fc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80112fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011302:	491b      	ldr	r1, [pc, #108]	; (8011370 <etharp_update_arp_entry+0x148>)
 8011304:	4613      	mov	r3, r2
 8011306:	005b      	lsls	r3, r3, #1
 8011308:	4413      	add	r3, r2
 801130a:	00db      	lsls	r3, r3, #3
 801130c:	440b      	add	r3, r1
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d021      	beq.n	8011358 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011314:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011318:	4915      	ldr	r1, [pc, #84]	; (8011370 <etharp_update_arp_entry+0x148>)
 801131a:	4613      	mov	r3, r2
 801131c:	005b      	lsls	r3, r3, #1
 801131e:	4413      	add	r3, r2
 8011320:	00db      	lsls	r3, r3, #3
 8011322:	440b      	add	r3, r1
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011328:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801132c:	4910      	ldr	r1, [pc, #64]	; (8011370 <etharp_update_arp_entry+0x148>)
 801132e:	4613      	mov	r3, r2
 8011330:	005b      	lsls	r3, r3, #1
 8011332:	4413      	add	r3, r2
 8011334:	00db      	lsls	r3, r3, #3
 8011336:	440b      	add	r3, r1
 8011338:	2200      	movs	r2, #0
 801133a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011346:	9300      	str	r3, [sp, #0]
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6939      	ldr	r1, [r7, #16]
 801134c:	68f8      	ldr	r0, [r7, #12]
 801134e:	f002 f827 	bl	80133a0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011352:	6938      	ldr	r0, [r7, #16]
 8011354:	f7f9 f9cc 	bl	800a6f0 <pbuf_free>
  }
  return ERR_OK;
 8011358:	2300      	movs	r3, #0
}
 801135a:	4618      	mov	r0, r3
 801135c:	3718      	adds	r7, #24
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	08016c58 	.word	0x08016c58
 8011368:	08016d50 	.word	0x08016d50
 801136c:	08016cd0 	.word	0x08016cd0
 8011370:	20008e3c 	.word	0x20008e3c

08011374 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801137c:	2300      	movs	r3, #0
 801137e:	60fb      	str	r3, [r7, #12]
 8011380:	e01e      	b.n	80113c0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011382:	4913      	ldr	r1, [pc, #76]	; (80113d0 <etharp_cleanup_netif+0x5c>)
 8011384:	68fa      	ldr	r2, [r7, #12]
 8011386:	4613      	mov	r3, r2
 8011388:	005b      	lsls	r3, r3, #1
 801138a:	4413      	add	r3, r2
 801138c:	00db      	lsls	r3, r3, #3
 801138e:	440b      	add	r3, r1
 8011390:	3314      	adds	r3, #20
 8011392:	781b      	ldrb	r3, [r3, #0]
 8011394:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011396:	7afb      	ldrb	r3, [r7, #11]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00e      	beq.n	80113ba <etharp_cleanup_netif+0x46>
 801139c:	490c      	ldr	r1, [pc, #48]	; (80113d0 <etharp_cleanup_netif+0x5c>)
 801139e:	68fa      	ldr	r2, [r7, #12]
 80113a0:	4613      	mov	r3, r2
 80113a2:	005b      	lsls	r3, r3, #1
 80113a4:	4413      	add	r3, r2
 80113a6:	00db      	lsls	r3, r3, #3
 80113a8:	440b      	add	r3, r1
 80113aa:	3308      	adds	r3, #8
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d102      	bne.n	80113ba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80113b4:	68f8      	ldr	r0, [r7, #12]
 80113b6:	f7ff fce5 	bl	8010d84 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	3301      	adds	r3, #1
 80113be:	60fb      	str	r3, [r7, #12]
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2b09      	cmp	r3, #9
 80113c4:	dddd      	ble.n	8011382 <etharp_cleanup_netif+0xe>
    }
  }
}
 80113c6:	bf00      	nop
 80113c8:	bf00      	nop
 80113ca:	3710      	adds	r7, #16
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	20008e3c 	.word	0x20008e3c

080113d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80113d4:	b5b0      	push	{r4, r5, r7, lr}
 80113d6:	b08a      	sub	sp, #40	; 0x28
 80113d8:	af04      	add	r7, sp, #16
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d107      	bne.n	80113f4 <etharp_input+0x20>
 80113e4:	4b3d      	ldr	r3, [pc, #244]	; (80114dc <etharp_input+0x108>)
 80113e6:	f240 228a 	movw	r2, #650	; 0x28a
 80113ea:	493d      	ldr	r1, [pc, #244]	; (80114e0 <etharp_input+0x10c>)
 80113ec:	483d      	ldr	r0, [pc, #244]	; (80114e4 <etharp_input+0x110>)
 80113ee:	f002 f883 	bl	80134f8 <iprintf>
 80113f2:	e06f      	b.n	80114d4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	685b      	ldr	r3, [r3, #4]
 80113f8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	881b      	ldrh	r3, [r3, #0]
 80113fe:	b29b      	uxth	r3, r3
 8011400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011404:	d10c      	bne.n	8011420 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801140a:	2b06      	cmp	r3, #6
 801140c:	d108      	bne.n	8011420 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011412:	2b04      	cmp	r3, #4
 8011414:	d104      	bne.n	8011420 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	885b      	ldrh	r3, [r3, #2]
 801141a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801141c:	2b08      	cmp	r3, #8
 801141e:	d003      	beq.n	8011428 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f7f9 f965 	bl	800a6f0 <pbuf_free>
    return;
 8011426:	e055      	b.n	80114d4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011428:	693b      	ldr	r3, [r7, #16]
 801142a:	330e      	adds	r3, #14
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	3318      	adds	r3, #24
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	3304      	adds	r3, #4
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d102      	bne.n	8011448 <etharp_input+0x74>
    for_us = 0;
 8011442:	2300      	movs	r3, #0
 8011444:	75fb      	strb	r3, [r7, #23]
 8011446:	e009      	b.n	801145c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011448:	68ba      	ldr	r2, [r7, #8]
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	3304      	adds	r3, #4
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	429a      	cmp	r2, r3
 8011452:	bf0c      	ite	eq
 8011454:	2301      	moveq	r3, #1
 8011456:	2300      	movne	r3, #0
 8011458:	b2db      	uxtb	r3, r3
 801145a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	f103 0208 	add.w	r2, r3, #8
 8011462:	7dfb      	ldrb	r3, [r7, #23]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d001      	beq.n	801146c <etharp_input+0x98>
 8011468:	2301      	movs	r3, #1
 801146a:	e000      	b.n	801146e <etharp_input+0x9a>
 801146c:	2302      	movs	r3, #2
 801146e:	f107 010c 	add.w	r1, r7, #12
 8011472:	6838      	ldr	r0, [r7, #0]
 8011474:	f7ff fed8 	bl	8011228 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	88db      	ldrh	r3, [r3, #6]
 801147c:	b29b      	uxth	r3, r3
 801147e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011482:	d003      	beq.n	801148c <etharp_input+0xb8>
 8011484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011488:	d01e      	beq.n	80114c8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801148a:	e020      	b.n	80114ce <etharp_input+0xfa>
      if (for_us) {
 801148c:	7dfb      	ldrb	r3, [r7, #23]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d01c      	beq.n	80114cc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011498:	693b      	ldr	r3, [r7, #16]
 801149a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80114a8:	693a      	ldr	r2, [r7, #16]
 80114aa:	3208      	adds	r2, #8
        etharp_raw(netif,
 80114ac:	2102      	movs	r1, #2
 80114ae:	9103      	str	r1, [sp, #12]
 80114b0:	f107 010c 	add.w	r1, r7, #12
 80114b4:	9102      	str	r1, [sp, #8]
 80114b6:	9201      	str	r2, [sp, #4]
 80114b8:	9300      	str	r3, [sp, #0]
 80114ba:	462b      	mov	r3, r5
 80114bc:	4622      	mov	r2, r4
 80114be:	4601      	mov	r1, r0
 80114c0:	6838      	ldr	r0, [r7, #0]
 80114c2:	f000 faeb 	bl	8011a9c <etharp_raw>
      break;
 80114c6:	e001      	b.n	80114cc <etharp_input+0xf8>
      break;
 80114c8:	bf00      	nop
 80114ca:	e000      	b.n	80114ce <etharp_input+0xfa>
      break;
 80114cc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f7f9 f90e 	bl	800a6f0 <pbuf_free>
}
 80114d4:	3718      	adds	r7, #24
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bdb0      	pop	{r4, r5, r7, pc}
 80114da:	bf00      	nop
 80114dc:	08016c58 	.word	0x08016c58
 80114e0:	08016da8 	.word	0x08016da8
 80114e4:	08016cd0 	.word	0x08016cd0

080114e8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b086      	sub	sp, #24
 80114ec:	af02      	add	r7, sp, #8
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	4613      	mov	r3, r2
 80114f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80114f6:	79fa      	ldrb	r2, [r7, #7]
 80114f8:	4944      	ldr	r1, [pc, #272]	; (801160c <etharp_output_to_arp_index+0x124>)
 80114fa:	4613      	mov	r3, r2
 80114fc:	005b      	lsls	r3, r3, #1
 80114fe:	4413      	add	r3, r2
 8011500:	00db      	lsls	r3, r3, #3
 8011502:	440b      	add	r3, r1
 8011504:	3314      	adds	r3, #20
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	2b01      	cmp	r3, #1
 801150a:	d806      	bhi.n	801151a <etharp_output_to_arp_index+0x32>
 801150c:	4b40      	ldr	r3, [pc, #256]	; (8011610 <etharp_output_to_arp_index+0x128>)
 801150e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011512:	4940      	ldr	r1, [pc, #256]	; (8011614 <etharp_output_to_arp_index+0x12c>)
 8011514:	4840      	ldr	r0, [pc, #256]	; (8011618 <etharp_output_to_arp_index+0x130>)
 8011516:	f001 ffef 	bl	80134f8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801151a:	79fa      	ldrb	r2, [r7, #7]
 801151c:	493b      	ldr	r1, [pc, #236]	; (801160c <etharp_output_to_arp_index+0x124>)
 801151e:	4613      	mov	r3, r2
 8011520:	005b      	lsls	r3, r3, #1
 8011522:	4413      	add	r3, r2
 8011524:	00db      	lsls	r3, r3, #3
 8011526:	440b      	add	r3, r1
 8011528:	3314      	adds	r3, #20
 801152a:	781b      	ldrb	r3, [r3, #0]
 801152c:	2b02      	cmp	r3, #2
 801152e:	d153      	bne.n	80115d8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011530:	79fa      	ldrb	r2, [r7, #7]
 8011532:	4936      	ldr	r1, [pc, #216]	; (801160c <etharp_output_to_arp_index+0x124>)
 8011534:	4613      	mov	r3, r2
 8011536:	005b      	lsls	r3, r3, #1
 8011538:	4413      	add	r3, r2
 801153a:	00db      	lsls	r3, r3, #3
 801153c:	440b      	add	r3, r1
 801153e:	3312      	adds	r3, #18
 8011540:	881b      	ldrh	r3, [r3, #0]
 8011542:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011546:	d919      	bls.n	801157c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011548:	79fa      	ldrb	r2, [r7, #7]
 801154a:	4613      	mov	r3, r2
 801154c:	005b      	lsls	r3, r3, #1
 801154e:	4413      	add	r3, r2
 8011550:	00db      	lsls	r3, r3, #3
 8011552:	4a2e      	ldr	r2, [pc, #184]	; (801160c <etharp_output_to_arp_index+0x124>)
 8011554:	4413      	add	r3, r2
 8011556:	3304      	adds	r3, #4
 8011558:	4619      	mov	r1, r3
 801155a:	68f8      	ldr	r0, [r7, #12]
 801155c:	f000 fb4c 	bl	8011bf8 <etharp_request>
 8011560:	4603      	mov	r3, r0
 8011562:	2b00      	cmp	r3, #0
 8011564:	d138      	bne.n	80115d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011566:	79fa      	ldrb	r2, [r7, #7]
 8011568:	4928      	ldr	r1, [pc, #160]	; (801160c <etharp_output_to_arp_index+0x124>)
 801156a:	4613      	mov	r3, r2
 801156c:	005b      	lsls	r3, r3, #1
 801156e:	4413      	add	r3, r2
 8011570:	00db      	lsls	r3, r3, #3
 8011572:	440b      	add	r3, r1
 8011574:	3314      	adds	r3, #20
 8011576:	2203      	movs	r2, #3
 8011578:	701a      	strb	r2, [r3, #0]
 801157a:	e02d      	b.n	80115d8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801157c:	79fa      	ldrb	r2, [r7, #7]
 801157e:	4923      	ldr	r1, [pc, #140]	; (801160c <etharp_output_to_arp_index+0x124>)
 8011580:	4613      	mov	r3, r2
 8011582:	005b      	lsls	r3, r3, #1
 8011584:	4413      	add	r3, r2
 8011586:	00db      	lsls	r3, r3, #3
 8011588:	440b      	add	r3, r1
 801158a:	3312      	adds	r3, #18
 801158c:	881b      	ldrh	r3, [r3, #0]
 801158e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011592:	d321      	bcc.n	80115d8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011594:	79fa      	ldrb	r2, [r7, #7]
 8011596:	4613      	mov	r3, r2
 8011598:	005b      	lsls	r3, r3, #1
 801159a:	4413      	add	r3, r2
 801159c:	00db      	lsls	r3, r3, #3
 801159e:	4a1b      	ldr	r2, [pc, #108]	; (801160c <etharp_output_to_arp_index+0x124>)
 80115a0:	4413      	add	r3, r2
 80115a2:	1d19      	adds	r1, r3, #4
 80115a4:	79fa      	ldrb	r2, [r7, #7]
 80115a6:	4613      	mov	r3, r2
 80115a8:	005b      	lsls	r3, r3, #1
 80115aa:	4413      	add	r3, r2
 80115ac:	00db      	lsls	r3, r3, #3
 80115ae:	3308      	adds	r3, #8
 80115b0:	4a16      	ldr	r2, [pc, #88]	; (801160c <etharp_output_to_arp_index+0x124>)
 80115b2:	4413      	add	r3, r2
 80115b4:	3304      	adds	r3, #4
 80115b6:	461a      	mov	r2, r3
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	f000 fafb 	bl	8011bb4 <etharp_request_dst>
 80115be:	4603      	mov	r3, r0
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d109      	bne.n	80115d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80115c4:	79fa      	ldrb	r2, [r7, #7]
 80115c6:	4911      	ldr	r1, [pc, #68]	; (801160c <etharp_output_to_arp_index+0x124>)
 80115c8:	4613      	mov	r3, r2
 80115ca:	005b      	lsls	r3, r3, #1
 80115cc:	4413      	add	r3, r2
 80115ce:	00db      	lsls	r3, r3, #3
 80115d0:	440b      	add	r3, r1
 80115d2:	3314      	adds	r3, #20
 80115d4:	2203      	movs	r2, #3
 80115d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80115de:	79fa      	ldrb	r2, [r7, #7]
 80115e0:	4613      	mov	r3, r2
 80115e2:	005b      	lsls	r3, r3, #1
 80115e4:	4413      	add	r3, r2
 80115e6:	00db      	lsls	r3, r3, #3
 80115e8:	3308      	adds	r3, #8
 80115ea:	4a08      	ldr	r2, [pc, #32]	; (801160c <etharp_output_to_arp_index+0x124>)
 80115ec:	4413      	add	r3, r2
 80115ee:	3304      	adds	r3, #4
 80115f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80115f4:	9200      	str	r2, [sp, #0]
 80115f6:	460a      	mov	r2, r1
 80115f8:	68b9      	ldr	r1, [r7, #8]
 80115fa:	68f8      	ldr	r0, [r7, #12]
 80115fc:	f001 fed0 	bl	80133a0 <ethernet_output>
 8011600:	4603      	mov	r3, r0
}
 8011602:	4618      	mov	r0, r3
 8011604:	3710      	adds	r7, #16
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}
 801160a:	bf00      	nop
 801160c:	20008e3c 	.word	0x20008e3c
 8011610:	08016c58 	.word	0x08016c58
 8011614:	08016dc8 	.word	0x08016dc8
 8011618:	08016cd0 	.word	0x08016cd0

0801161c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b08a      	sub	sp, #40	; 0x28
 8011620:	af02      	add	r7, sp, #8
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	60b9      	str	r1, [r7, #8]
 8011626:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d106      	bne.n	8011640 <etharp_output+0x24>
 8011632:	4b73      	ldr	r3, [pc, #460]	; (8011800 <etharp_output+0x1e4>)
 8011634:	f240 321e 	movw	r2, #798	; 0x31e
 8011638:	4972      	ldr	r1, [pc, #456]	; (8011804 <etharp_output+0x1e8>)
 801163a:	4873      	ldr	r0, [pc, #460]	; (8011808 <etharp_output+0x1ec>)
 801163c:	f001 ff5c 	bl	80134f8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d106      	bne.n	8011654 <etharp_output+0x38>
 8011646:	4b6e      	ldr	r3, [pc, #440]	; (8011800 <etharp_output+0x1e4>)
 8011648:	f240 321f 	movw	r2, #799	; 0x31f
 801164c:	496f      	ldr	r1, [pc, #444]	; (801180c <etharp_output+0x1f0>)
 801164e:	486e      	ldr	r0, [pc, #440]	; (8011808 <etharp_output+0x1ec>)
 8011650:	f001 ff52 	bl	80134f8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d106      	bne.n	8011668 <etharp_output+0x4c>
 801165a:	4b69      	ldr	r3, [pc, #420]	; (8011800 <etharp_output+0x1e4>)
 801165c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011660:	496b      	ldr	r1, [pc, #428]	; (8011810 <etharp_output+0x1f4>)
 8011662:	4869      	ldr	r0, [pc, #420]	; (8011808 <etharp_output+0x1ec>)
 8011664:	f001 ff48 	bl	80134f8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	68f9      	ldr	r1, [r7, #12]
 801166e:	4618      	mov	r0, r3
 8011670:	f000 fef8 	bl	8012464 <ip4_addr_isbroadcast_u32>
 8011674:	4603      	mov	r3, r0
 8011676:	2b00      	cmp	r3, #0
 8011678:	d002      	beq.n	8011680 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801167a:	4b66      	ldr	r3, [pc, #408]	; (8011814 <etharp_output+0x1f8>)
 801167c:	61fb      	str	r3, [r7, #28]
 801167e:	e0af      	b.n	80117e0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011688:	2be0      	cmp	r3, #224	; 0xe0
 801168a:	d118      	bne.n	80116be <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801168c:	2301      	movs	r3, #1
 801168e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011690:	2300      	movs	r3, #0
 8011692:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011694:	235e      	movs	r3, #94	; 0x5e
 8011696:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	3301      	adds	r3, #1
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116a2:	b2db      	uxtb	r3, r3
 80116a4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	3302      	adds	r3, #2
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	3303      	adds	r3, #3
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80116b6:	f107 0310 	add.w	r3, r7, #16
 80116ba:	61fb      	str	r3, [r7, #28]
 80116bc:	e090      	b.n	80117e0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681a      	ldr	r2, [r3, #0]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	3304      	adds	r3, #4
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	405a      	eors	r2, r3
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	3308      	adds	r3, #8
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	4013      	ands	r3, r2
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d012      	beq.n	80116fc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80116dc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80116e0:	4293      	cmp	r3, r2
 80116e2:	d00b      	beq.n	80116fc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	330c      	adds	r3, #12
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d003      	beq.n	80116f6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	330c      	adds	r3, #12
 80116f2:	61bb      	str	r3, [r7, #24]
 80116f4:	e002      	b.n	80116fc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80116f6:	f06f 0303 	mvn.w	r3, #3
 80116fa:	e07d      	b.n	80117f8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80116fc:	4b46      	ldr	r3, [pc, #280]	; (8011818 <etharp_output+0x1fc>)
 80116fe:	781b      	ldrb	r3, [r3, #0]
 8011700:	4619      	mov	r1, r3
 8011702:	4a46      	ldr	r2, [pc, #280]	; (801181c <etharp_output+0x200>)
 8011704:	460b      	mov	r3, r1
 8011706:	005b      	lsls	r3, r3, #1
 8011708:	440b      	add	r3, r1
 801170a:	00db      	lsls	r3, r3, #3
 801170c:	4413      	add	r3, r2
 801170e:	3314      	adds	r3, #20
 8011710:	781b      	ldrb	r3, [r3, #0]
 8011712:	2b01      	cmp	r3, #1
 8011714:	d925      	bls.n	8011762 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011716:	4b40      	ldr	r3, [pc, #256]	; (8011818 <etharp_output+0x1fc>)
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	4619      	mov	r1, r3
 801171c:	4a3f      	ldr	r2, [pc, #252]	; (801181c <etharp_output+0x200>)
 801171e:	460b      	mov	r3, r1
 8011720:	005b      	lsls	r3, r3, #1
 8011722:	440b      	add	r3, r1
 8011724:	00db      	lsls	r3, r3, #3
 8011726:	4413      	add	r3, r2
 8011728:	3308      	adds	r3, #8
 801172a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801172c:	68fa      	ldr	r2, [r7, #12]
 801172e:	429a      	cmp	r2, r3
 8011730:	d117      	bne.n	8011762 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011732:	69bb      	ldr	r3, [r7, #24]
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	4b38      	ldr	r3, [pc, #224]	; (8011818 <etharp_output+0x1fc>)
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	4618      	mov	r0, r3
 801173c:	4937      	ldr	r1, [pc, #220]	; (801181c <etharp_output+0x200>)
 801173e:	4603      	mov	r3, r0
 8011740:	005b      	lsls	r3, r3, #1
 8011742:	4403      	add	r3, r0
 8011744:	00db      	lsls	r3, r3, #3
 8011746:	440b      	add	r3, r1
 8011748:	3304      	adds	r3, #4
 801174a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801174c:	429a      	cmp	r2, r3
 801174e:	d108      	bne.n	8011762 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011750:	4b31      	ldr	r3, [pc, #196]	; (8011818 <etharp_output+0x1fc>)
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	461a      	mov	r2, r3
 8011756:	68b9      	ldr	r1, [r7, #8]
 8011758:	68f8      	ldr	r0, [r7, #12]
 801175a:	f7ff fec5 	bl	80114e8 <etharp_output_to_arp_index>
 801175e:	4603      	mov	r3, r0
 8011760:	e04a      	b.n	80117f8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011762:	2300      	movs	r3, #0
 8011764:	75fb      	strb	r3, [r7, #23]
 8011766:	e031      	b.n	80117cc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011768:	7dfa      	ldrb	r2, [r7, #23]
 801176a:	492c      	ldr	r1, [pc, #176]	; (801181c <etharp_output+0x200>)
 801176c:	4613      	mov	r3, r2
 801176e:	005b      	lsls	r3, r3, #1
 8011770:	4413      	add	r3, r2
 8011772:	00db      	lsls	r3, r3, #3
 8011774:	440b      	add	r3, r1
 8011776:	3314      	adds	r3, #20
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	2b01      	cmp	r3, #1
 801177c:	d923      	bls.n	80117c6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801177e:	7dfa      	ldrb	r2, [r7, #23]
 8011780:	4926      	ldr	r1, [pc, #152]	; (801181c <etharp_output+0x200>)
 8011782:	4613      	mov	r3, r2
 8011784:	005b      	lsls	r3, r3, #1
 8011786:	4413      	add	r3, r2
 8011788:	00db      	lsls	r3, r3, #3
 801178a:	440b      	add	r3, r1
 801178c:	3308      	adds	r3, #8
 801178e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011790:	68fa      	ldr	r2, [r7, #12]
 8011792:	429a      	cmp	r2, r3
 8011794:	d117      	bne.n	80117c6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011796:	69bb      	ldr	r3, [r7, #24]
 8011798:	6819      	ldr	r1, [r3, #0]
 801179a:	7dfa      	ldrb	r2, [r7, #23]
 801179c:	481f      	ldr	r0, [pc, #124]	; (801181c <etharp_output+0x200>)
 801179e:	4613      	mov	r3, r2
 80117a0:	005b      	lsls	r3, r3, #1
 80117a2:	4413      	add	r3, r2
 80117a4:	00db      	lsls	r3, r3, #3
 80117a6:	4403      	add	r3, r0
 80117a8:	3304      	adds	r3, #4
 80117aa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80117ac:	4299      	cmp	r1, r3
 80117ae:	d10a      	bne.n	80117c6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80117b0:	4a19      	ldr	r2, [pc, #100]	; (8011818 <etharp_output+0x1fc>)
 80117b2:	7dfb      	ldrb	r3, [r7, #23]
 80117b4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80117b6:	7dfb      	ldrb	r3, [r7, #23]
 80117b8:	461a      	mov	r2, r3
 80117ba:	68b9      	ldr	r1, [r7, #8]
 80117bc:	68f8      	ldr	r0, [r7, #12]
 80117be:	f7ff fe93 	bl	80114e8 <etharp_output_to_arp_index>
 80117c2:	4603      	mov	r3, r0
 80117c4:	e018      	b.n	80117f8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80117c6:	7dfb      	ldrb	r3, [r7, #23]
 80117c8:	3301      	adds	r3, #1
 80117ca:	75fb      	strb	r3, [r7, #23]
 80117cc:	7dfb      	ldrb	r3, [r7, #23]
 80117ce:	2b09      	cmp	r3, #9
 80117d0:	d9ca      	bls.n	8011768 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80117d2:	68ba      	ldr	r2, [r7, #8]
 80117d4:	69b9      	ldr	r1, [r7, #24]
 80117d6:	68f8      	ldr	r0, [r7, #12]
 80117d8:	f000 f822 	bl	8011820 <etharp_query>
 80117dc:	4603      	mov	r3, r0
 80117de:	e00b      	b.n	80117f8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80117e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80117ea:	9300      	str	r3, [sp, #0]
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	68b9      	ldr	r1, [r7, #8]
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	f001 fdd5 	bl	80133a0 <ethernet_output>
 80117f6:	4603      	mov	r3, r0
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	3720      	adds	r7, #32
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	08016c58 	.word	0x08016c58
 8011804:	08016da8 	.word	0x08016da8
 8011808:	08016cd0 	.word	0x08016cd0
 801180c:	08016df8 	.word	0x08016df8
 8011810:	08016d98 	.word	0x08016d98
 8011814:	08017410 	.word	0x08017410
 8011818:	20008f2c 	.word	0x20008f2c
 801181c:	20008e3c 	.word	0x20008e3c

08011820 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b08c      	sub	sp, #48	; 0x30
 8011824:	af02      	add	r7, sp, #8
 8011826:	60f8      	str	r0, [r7, #12]
 8011828:	60b9      	str	r1, [r7, #8]
 801182a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	3326      	adds	r3, #38	; 0x26
 8011830:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011832:	23ff      	movs	r3, #255	; 0xff
 8011834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011838:	2300      	movs	r3, #0
 801183a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	68f9      	ldr	r1, [r7, #12]
 8011842:	4618      	mov	r0, r3
 8011844:	f000 fe0e 	bl	8012464 <ip4_addr_isbroadcast_u32>
 8011848:	4603      	mov	r3, r0
 801184a:	2b00      	cmp	r3, #0
 801184c:	d10c      	bne.n	8011868 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011856:	2be0      	cmp	r3, #224	; 0xe0
 8011858:	d006      	beq.n	8011868 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d003      	beq.n	8011868 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d102      	bne.n	801186e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011868:	f06f 030f 	mvn.w	r3, #15
 801186c:	e101      	b.n	8011a72 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801186e:	68fa      	ldr	r2, [r7, #12]
 8011870:	2101      	movs	r1, #1
 8011872:	68b8      	ldr	r0, [r7, #8]
 8011874:	f7ff fb60 	bl	8010f38 <etharp_find_entry>
 8011878:	4603      	mov	r3, r0
 801187a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801187c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011880:	2b00      	cmp	r3, #0
 8011882:	da02      	bge.n	801188a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011884:	8a7b      	ldrh	r3, [r7, #18]
 8011886:	b25b      	sxtb	r3, r3
 8011888:	e0f3      	b.n	8011a72 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801188a:	8a7b      	ldrh	r3, [r7, #18]
 801188c:	2b7e      	cmp	r3, #126	; 0x7e
 801188e:	d906      	bls.n	801189e <etharp_query+0x7e>
 8011890:	4b7a      	ldr	r3, [pc, #488]	; (8011a7c <etharp_query+0x25c>)
 8011892:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011896:	497a      	ldr	r1, [pc, #488]	; (8011a80 <etharp_query+0x260>)
 8011898:	487a      	ldr	r0, [pc, #488]	; (8011a84 <etharp_query+0x264>)
 801189a:	f001 fe2d 	bl	80134f8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801189e:	8a7b      	ldrh	r3, [r7, #18]
 80118a0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80118a2:	7c7a      	ldrb	r2, [r7, #17]
 80118a4:	4978      	ldr	r1, [pc, #480]	; (8011a88 <etharp_query+0x268>)
 80118a6:	4613      	mov	r3, r2
 80118a8:	005b      	lsls	r3, r3, #1
 80118aa:	4413      	add	r3, r2
 80118ac:	00db      	lsls	r3, r3, #3
 80118ae:	440b      	add	r3, r1
 80118b0:	3314      	adds	r3, #20
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d115      	bne.n	80118e4 <etharp_query+0xc4>
    is_new_entry = 1;
 80118b8:	2301      	movs	r3, #1
 80118ba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80118bc:	7c7a      	ldrb	r2, [r7, #17]
 80118be:	4972      	ldr	r1, [pc, #456]	; (8011a88 <etharp_query+0x268>)
 80118c0:	4613      	mov	r3, r2
 80118c2:	005b      	lsls	r3, r3, #1
 80118c4:	4413      	add	r3, r2
 80118c6:	00db      	lsls	r3, r3, #3
 80118c8:	440b      	add	r3, r1
 80118ca:	3314      	adds	r3, #20
 80118cc:	2201      	movs	r2, #1
 80118ce:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80118d0:	7c7a      	ldrb	r2, [r7, #17]
 80118d2:	496d      	ldr	r1, [pc, #436]	; (8011a88 <etharp_query+0x268>)
 80118d4:	4613      	mov	r3, r2
 80118d6:	005b      	lsls	r3, r3, #1
 80118d8:	4413      	add	r3, r2
 80118da:	00db      	lsls	r3, r3, #3
 80118dc:	440b      	add	r3, r1
 80118de:	3308      	adds	r3, #8
 80118e0:	68fa      	ldr	r2, [r7, #12]
 80118e2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80118e4:	7c7a      	ldrb	r2, [r7, #17]
 80118e6:	4968      	ldr	r1, [pc, #416]	; (8011a88 <etharp_query+0x268>)
 80118e8:	4613      	mov	r3, r2
 80118ea:	005b      	lsls	r3, r3, #1
 80118ec:	4413      	add	r3, r2
 80118ee:	00db      	lsls	r3, r3, #3
 80118f0:	440b      	add	r3, r1
 80118f2:	3314      	adds	r3, #20
 80118f4:	781b      	ldrb	r3, [r3, #0]
 80118f6:	2b01      	cmp	r3, #1
 80118f8:	d011      	beq.n	801191e <etharp_query+0xfe>
 80118fa:	7c7a      	ldrb	r2, [r7, #17]
 80118fc:	4962      	ldr	r1, [pc, #392]	; (8011a88 <etharp_query+0x268>)
 80118fe:	4613      	mov	r3, r2
 8011900:	005b      	lsls	r3, r3, #1
 8011902:	4413      	add	r3, r2
 8011904:	00db      	lsls	r3, r3, #3
 8011906:	440b      	add	r3, r1
 8011908:	3314      	adds	r3, #20
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	2b01      	cmp	r3, #1
 801190e:	d806      	bhi.n	801191e <etharp_query+0xfe>
 8011910:	4b5a      	ldr	r3, [pc, #360]	; (8011a7c <etharp_query+0x25c>)
 8011912:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011916:	495d      	ldr	r1, [pc, #372]	; (8011a8c <etharp_query+0x26c>)
 8011918:	485a      	ldr	r0, [pc, #360]	; (8011a84 <etharp_query+0x264>)
 801191a:	f001 fded 	bl	80134f8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801191e:	6a3b      	ldr	r3, [r7, #32]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d102      	bne.n	801192a <etharp_query+0x10a>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d10c      	bne.n	8011944 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801192a:	68b9      	ldr	r1, [r7, #8]
 801192c:	68f8      	ldr	r0, [r7, #12]
 801192e:	f000 f963 	bl	8011bf8 <etharp_request>
 8011932:	4603      	mov	r3, r0
 8011934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d102      	bne.n	8011944 <etharp_query+0x124>
      return result;
 801193e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011942:	e096      	b.n	8011a72 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d106      	bne.n	8011958 <etharp_query+0x138>
 801194a:	4b4c      	ldr	r3, [pc, #304]	; (8011a7c <etharp_query+0x25c>)
 801194c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011950:	494f      	ldr	r1, [pc, #316]	; (8011a90 <etharp_query+0x270>)
 8011952:	484c      	ldr	r0, [pc, #304]	; (8011a84 <etharp_query+0x264>)
 8011954:	f001 fdd0 	bl	80134f8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011958:	7c7a      	ldrb	r2, [r7, #17]
 801195a:	494b      	ldr	r1, [pc, #300]	; (8011a88 <etharp_query+0x268>)
 801195c:	4613      	mov	r3, r2
 801195e:	005b      	lsls	r3, r3, #1
 8011960:	4413      	add	r3, r2
 8011962:	00db      	lsls	r3, r3, #3
 8011964:	440b      	add	r3, r1
 8011966:	3314      	adds	r3, #20
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	2b01      	cmp	r3, #1
 801196c:	d917      	bls.n	801199e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801196e:	4a49      	ldr	r2, [pc, #292]	; (8011a94 <etharp_query+0x274>)
 8011970:	7c7b      	ldrb	r3, [r7, #17]
 8011972:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011974:	7c7a      	ldrb	r2, [r7, #17]
 8011976:	4613      	mov	r3, r2
 8011978:	005b      	lsls	r3, r3, #1
 801197a:	4413      	add	r3, r2
 801197c:	00db      	lsls	r3, r3, #3
 801197e:	3308      	adds	r3, #8
 8011980:	4a41      	ldr	r2, [pc, #260]	; (8011a88 <etharp_query+0x268>)
 8011982:	4413      	add	r3, r2
 8011984:	3304      	adds	r3, #4
 8011986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801198a:	9200      	str	r2, [sp, #0]
 801198c:	697a      	ldr	r2, [r7, #20]
 801198e:	6879      	ldr	r1, [r7, #4]
 8011990:	68f8      	ldr	r0, [r7, #12]
 8011992:	f001 fd05 	bl	80133a0 <ethernet_output>
 8011996:	4603      	mov	r3, r0
 8011998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801199c:	e067      	b.n	8011a6e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801199e:	7c7a      	ldrb	r2, [r7, #17]
 80119a0:	4939      	ldr	r1, [pc, #228]	; (8011a88 <etharp_query+0x268>)
 80119a2:	4613      	mov	r3, r2
 80119a4:	005b      	lsls	r3, r3, #1
 80119a6:	4413      	add	r3, r2
 80119a8:	00db      	lsls	r3, r3, #3
 80119aa:	440b      	add	r3, r1
 80119ac:	3314      	adds	r3, #20
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	2b01      	cmp	r3, #1
 80119b2:	d15c      	bne.n	8011a6e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80119b4:	2300      	movs	r3, #0
 80119b6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 80119bc:	e01c      	b.n	80119f8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80119be:	69fb      	ldr	r3, [r7, #28]
 80119c0:	895a      	ldrh	r2, [r3, #10]
 80119c2:	69fb      	ldr	r3, [r7, #28]
 80119c4:	891b      	ldrh	r3, [r3, #8]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d10a      	bne.n	80119e0 <etharp_query+0x1c0>
 80119ca:	69fb      	ldr	r3, [r7, #28]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d006      	beq.n	80119e0 <etharp_query+0x1c0>
 80119d2:	4b2a      	ldr	r3, [pc, #168]	; (8011a7c <etharp_query+0x25c>)
 80119d4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80119d8:	492f      	ldr	r1, [pc, #188]	; (8011a98 <etharp_query+0x278>)
 80119da:	482a      	ldr	r0, [pc, #168]	; (8011a84 <etharp_query+0x264>)
 80119dc:	f001 fd8c 	bl	80134f8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80119e0:	69fb      	ldr	r3, [r7, #28]
 80119e2:	7b1b      	ldrb	r3, [r3, #12]
 80119e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d002      	beq.n	80119f2 <etharp_query+0x1d2>
        copy_needed = 1;
 80119ec:	2301      	movs	r3, #1
 80119ee:	61bb      	str	r3, [r7, #24]
        break;
 80119f0:	e005      	b.n	80119fe <etharp_query+0x1de>
      }
      p = p->next;
 80119f2:	69fb      	ldr	r3, [r7, #28]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80119f8:	69fb      	ldr	r3, [r7, #28]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d1df      	bne.n	80119be <etharp_query+0x19e>
    }
    if (copy_needed) {
 80119fe:	69bb      	ldr	r3, [r7, #24]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d007      	beq.n	8011a14 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011a0a:	200e      	movs	r0, #14
 8011a0c:	f7f9 f96e 	bl	800acec <pbuf_clone>
 8011a10:	61f8      	str	r0, [r7, #28]
 8011a12:	e004      	b.n	8011a1e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011a18:	69f8      	ldr	r0, [r7, #28]
 8011a1a:	f7f8 ff09 	bl	800a830 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011a1e:	69fb      	ldr	r3, [r7, #28]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d021      	beq.n	8011a68 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011a24:	7c7a      	ldrb	r2, [r7, #17]
 8011a26:	4918      	ldr	r1, [pc, #96]	; (8011a88 <etharp_query+0x268>)
 8011a28:	4613      	mov	r3, r2
 8011a2a:	005b      	lsls	r3, r3, #1
 8011a2c:	4413      	add	r3, r2
 8011a2e:	00db      	lsls	r3, r3, #3
 8011a30:	440b      	add	r3, r1
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d00a      	beq.n	8011a4e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011a38:	7c7a      	ldrb	r2, [r7, #17]
 8011a3a:	4913      	ldr	r1, [pc, #76]	; (8011a88 <etharp_query+0x268>)
 8011a3c:	4613      	mov	r3, r2
 8011a3e:	005b      	lsls	r3, r3, #1
 8011a40:	4413      	add	r3, r2
 8011a42:	00db      	lsls	r3, r3, #3
 8011a44:	440b      	add	r3, r1
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f7f8 fe51 	bl	800a6f0 <pbuf_free>
      }
      arp_table[i].q = p;
 8011a4e:	7c7a      	ldrb	r2, [r7, #17]
 8011a50:	490d      	ldr	r1, [pc, #52]	; (8011a88 <etharp_query+0x268>)
 8011a52:	4613      	mov	r3, r2
 8011a54:	005b      	lsls	r3, r3, #1
 8011a56:	4413      	add	r3, r2
 8011a58:	00db      	lsls	r3, r3, #3
 8011a5a:	440b      	add	r3, r1
 8011a5c:	69fa      	ldr	r2, [r7, #28]
 8011a5e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011a60:	2300      	movs	r3, #0
 8011a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a66:	e002      	b.n	8011a6e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011a68:	23ff      	movs	r3, #255	; 0xff
 8011a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011a6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3728      	adds	r7, #40	; 0x28
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}
 8011a7a:	bf00      	nop
 8011a7c:	08016c58 	.word	0x08016c58
 8011a80:	08016e04 	.word	0x08016e04
 8011a84:	08016cd0 	.word	0x08016cd0
 8011a88:	20008e3c 	.word	0x20008e3c
 8011a8c:	08016e14 	.word	0x08016e14
 8011a90:	08016df8 	.word	0x08016df8
 8011a94:	20008f2c 	.word	0x20008f2c
 8011a98:	08016e3c 	.word	0x08016e3c

08011a9c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b08a      	sub	sp, #40	; 0x28
 8011aa0:	af02      	add	r7, sp, #8
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	60b9      	str	r1, [r7, #8]
 8011aa6:	607a      	str	r2, [r7, #4]
 8011aa8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d106      	bne.n	8011ac2 <etharp_raw+0x26>
 8011ab4:	4b3a      	ldr	r3, [pc, #232]	; (8011ba0 <etharp_raw+0x104>)
 8011ab6:	f240 4257 	movw	r2, #1111	; 0x457
 8011aba:	493a      	ldr	r1, [pc, #232]	; (8011ba4 <etharp_raw+0x108>)
 8011abc:	483a      	ldr	r0, [pc, #232]	; (8011ba8 <etharp_raw+0x10c>)
 8011abe:	f001 fd1b 	bl	80134f8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011ac2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ac6:	211c      	movs	r1, #28
 8011ac8:	200e      	movs	r0, #14
 8011aca:	f7f8 fb2d 	bl	800a128 <pbuf_alloc>
 8011ace:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011ad0:	69bb      	ldr	r3, [r7, #24]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d102      	bne.n	8011adc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8011ada:	e05d      	b.n	8011b98 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011adc:	69bb      	ldr	r3, [r7, #24]
 8011ade:	895b      	ldrh	r3, [r3, #10]
 8011ae0:	2b1b      	cmp	r3, #27
 8011ae2:	d806      	bhi.n	8011af2 <etharp_raw+0x56>
 8011ae4:	4b2e      	ldr	r3, [pc, #184]	; (8011ba0 <etharp_raw+0x104>)
 8011ae6:	f240 4262 	movw	r2, #1122	; 0x462
 8011aea:	4930      	ldr	r1, [pc, #192]	; (8011bac <etharp_raw+0x110>)
 8011aec:	482e      	ldr	r0, [pc, #184]	; (8011ba8 <etharp_raw+0x10c>)
 8011aee:	f001 fd03 	bl	80134f8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011af2:	69bb      	ldr	r3, [r7, #24]
 8011af4:	685b      	ldr	r3, [r3, #4]
 8011af6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011af8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7f7 fb44 	bl	8009188 <lwip_htons>
 8011b00:	4603      	mov	r3, r0
 8011b02:	461a      	mov	r2, r3
 8011b04:	697b      	ldr	r3, [r7, #20]
 8011b06:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011b0e:	2b06      	cmp	r3, #6
 8011b10:	d006      	beq.n	8011b20 <etharp_raw+0x84>
 8011b12:	4b23      	ldr	r3, [pc, #140]	; (8011ba0 <etharp_raw+0x104>)
 8011b14:	f240 4269 	movw	r2, #1129	; 0x469
 8011b18:	4925      	ldr	r1, [pc, #148]	; (8011bb0 <etharp_raw+0x114>)
 8011b1a:	4823      	ldr	r0, [pc, #140]	; (8011ba8 <etharp_raw+0x10c>)
 8011b1c:	f001 fcec 	bl	80134f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	3308      	adds	r3, #8
 8011b24:	2206      	movs	r2, #6
 8011b26:	6839      	ldr	r1, [r7, #0]
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f001 fcb5 	bl	8013498 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	3312      	adds	r3, #18
 8011b32:	2206      	movs	r2, #6
 8011b34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b36:	4618      	mov	r0, r3
 8011b38:	f001 fcae 	bl	8013498 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	330e      	adds	r3, #14
 8011b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b42:	6812      	ldr	r2, [r2, #0]
 8011b44:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	3318      	adds	r3, #24
 8011b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b4c:	6812      	ldr	r2, [r2, #0]
 8011b4e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	2200      	movs	r2, #0
 8011b54:	701a      	strb	r2, [r3, #0]
 8011b56:	2200      	movs	r2, #0
 8011b58:	f042 0201 	orr.w	r2, r2, #1
 8011b5c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	2200      	movs	r2, #0
 8011b62:	f042 0208 	orr.w	r2, r2, #8
 8011b66:	709a      	strb	r2, [r3, #2]
 8011b68:	2200      	movs	r2, #0
 8011b6a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	2206      	movs	r2, #6
 8011b70:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	2204      	movs	r2, #4
 8011b76:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011b78:	f640 0306 	movw	r3, #2054	; 0x806
 8011b7c:	9300      	str	r3, [sp, #0]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	68ba      	ldr	r2, [r7, #8]
 8011b82:	69b9      	ldr	r1, [r7, #24]
 8011b84:	68f8      	ldr	r0, [r7, #12]
 8011b86:	f001 fc0b 	bl	80133a0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011b8a:	69b8      	ldr	r0, [r7, #24]
 8011b8c:	f7f8 fdb0 	bl	800a6f0 <pbuf_free>
  p = NULL;
 8011b90:	2300      	movs	r3, #0
 8011b92:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011b94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3720      	adds	r7, #32
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	08016c58 	.word	0x08016c58
 8011ba4:	08016da8 	.word	0x08016da8
 8011ba8:	08016cd0 	.word	0x08016cd0
 8011bac:	08016e58 	.word	0x08016e58
 8011bb0:	08016e8c 	.word	0x08016e8c

08011bb4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b088      	sub	sp, #32
 8011bb8:	af04      	add	r7, sp, #16
 8011bba:	60f8      	str	r0, [r7, #12]
 8011bbc:	60b9      	str	r1, [r7, #8]
 8011bbe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011bd0:	2201      	movs	r2, #1
 8011bd2:	9203      	str	r2, [sp, #12]
 8011bd4:	68ba      	ldr	r2, [r7, #8]
 8011bd6:	9202      	str	r2, [sp, #8]
 8011bd8:	4a06      	ldr	r2, [pc, #24]	; (8011bf4 <etharp_request_dst+0x40>)
 8011bda:	9201      	str	r2, [sp, #4]
 8011bdc:	9300      	str	r3, [sp, #0]
 8011bde:	4603      	mov	r3, r0
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	68f8      	ldr	r0, [r7, #12]
 8011be4:	f7ff ff5a 	bl	8011a9c <etharp_raw>
 8011be8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3710      	adds	r7, #16
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}
 8011bf2:	bf00      	nop
 8011bf4:	08017418 	.word	0x08017418

08011bf8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011c02:	4a05      	ldr	r2, [pc, #20]	; (8011c18 <etharp_request+0x20>)
 8011c04:	6839      	ldr	r1, [r7, #0]
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f7ff ffd4 	bl	8011bb4 <etharp_request_dst>
 8011c0c:	4603      	mov	r3, r0
}
 8011c0e:	4618      	mov	r0, r3
 8011c10:	3708      	adds	r7, #8
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
 8011c16:	bf00      	nop
 8011c18:	08017410 	.word	0x08017410

08011c1c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b08e      	sub	sp, #56	; 0x38
 8011c20:	af04      	add	r7, sp, #16
 8011c22:	6078      	str	r0, [r7, #4]
 8011c24:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011c26:	4b79      	ldr	r3, [pc, #484]	; (8011e0c <icmp_input+0x1f0>)
 8011c28:	689b      	ldr	r3, [r3, #8]
 8011c2a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	f003 030f 	and.w	r3, r3, #15
 8011c34:	b2db      	uxtb	r3, r3
 8011c36:	009b      	lsls	r3, r3, #2
 8011c38:	b2db      	uxtb	r3, r3
 8011c3a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011c3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c3e:	2b13      	cmp	r3, #19
 8011c40:	f240 80cd 	bls.w	8011dde <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	895b      	ldrh	r3, [r3, #10]
 8011c48:	2b03      	cmp	r3, #3
 8011c4a:	f240 80ca 	bls.w	8011de2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	685b      	ldr	r3, [r3, #4]
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011c58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	f000 80b7 	beq.w	8011dd0 <icmp_input+0x1b4>
 8011c62:	2b08      	cmp	r3, #8
 8011c64:	f040 80b7 	bne.w	8011dd6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011c68:	4b69      	ldr	r3, [pc, #420]	; (8011e10 <icmp_input+0x1f4>)
 8011c6a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011c6c:	4b67      	ldr	r3, [pc, #412]	; (8011e0c <icmp_input+0x1f0>)
 8011c6e:	695b      	ldr	r3, [r3, #20]
 8011c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c74:	2be0      	cmp	r3, #224	; 0xe0
 8011c76:	f000 80bb 	beq.w	8011df0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011c7a:	4b64      	ldr	r3, [pc, #400]	; (8011e0c <icmp_input+0x1f0>)
 8011c7c:	695b      	ldr	r3, [r3, #20]
 8011c7e:	4a63      	ldr	r2, [pc, #396]	; (8011e0c <icmp_input+0x1f0>)
 8011c80:	6812      	ldr	r2, [r2, #0]
 8011c82:	4611      	mov	r1, r2
 8011c84:	4618      	mov	r0, r3
 8011c86:	f000 fbed 	bl	8012464 <ip4_addr_isbroadcast_u32>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	f040 80b1 	bne.w	8011df4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	891b      	ldrh	r3, [r3, #8]
 8011c96:	2b07      	cmp	r3, #7
 8011c98:	f240 80a5 	bls.w	8011de6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011c9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c9e:	330e      	adds	r3, #14
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f7f8 fc8e 	bl	800a5c4 <pbuf_add_header>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d04b      	beq.n	8011d46 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	891a      	ldrh	r2, [r3, #8]
 8011cb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011cb4:	4413      	add	r3, r2
 8011cb6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	891b      	ldrh	r3, [r3, #8]
 8011cbc:	8b7a      	ldrh	r2, [r7, #26]
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	f0c0 809a 	bcc.w	8011df8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011cc4:	8b7b      	ldrh	r3, [r7, #26]
 8011cc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011cca:	4619      	mov	r1, r3
 8011ccc:	200e      	movs	r0, #14
 8011cce:	f7f8 fa2b 	bl	800a128 <pbuf_alloc>
 8011cd2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	f000 8090 	beq.w	8011dfc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	895b      	ldrh	r3, [r3, #10]
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ce4:	3308      	adds	r3, #8
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d203      	bcs.n	8011cf2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011cea:	6978      	ldr	r0, [r7, #20]
 8011cec:	f7f8 fd00 	bl	800a6f0 <pbuf_free>
          goto icmperr;
 8011cf0:	e085      	b.n	8011dfe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f001 fbcc 	bl	8013498 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011d00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d02:	4619      	mov	r1, r3
 8011d04:	6978      	ldr	r0, [r7, #20]
 8011d06:	f7f8 fc6d 	bl	800a5e4 <pbuf_remove_header>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d009      	beq.n	8011d24 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011d10:	4b40      	ldr	r3, [pc, #256]	; (8011e14 <icmp_input+0x1f8>)
 8011d12:	22b6      	movs	r2, #182	; 0xb6
 8011d14:	4940      	ldr	r1, [pc, #256]	; (8011e18 <icmp_input+0x1fc>)
 8011d16:	4841      	ldr	r0, [pc, #260]	; (8011e1c <icmp_input+0x200>)
 8011d18:	f001 fbee 	bl	80134f8 <iprintf>
          pbuf_free(r);
 8011d1c:	6978      	ldr	r0, [r7, #20]
 8011d1e:	f7f8 fce7 	bl	800a6f0 <pbuf_free>
          goto icmperr;
 8011d22:	e06c      	b.n	8011dfe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011d24:	6879      	ldr	r1, [r7, #4]
 8011d26:	6978      	ldr	r0, [r7, #20]
 8011d28:	f7f8 fe0a 	bl	800a940 <pbuf_copy>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d003      	beq.n	8011d3a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011d32:	6978      	ldr	r0, [r7, #20]
 8011d34:	f7f8 fcdc 	bl	800a6f0 <pbuf_free>
          goto icmperr;
 8011d38:	e061      	b.n	8011dfe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	f7f8 fcd8 	bl	800a6f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	607b      	str	r3, [r7, #4]
 8011d44:	e00f      	b.n	8011d66 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011d46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d48:	330e      	adds	r3, #14
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f7f8 fc49 	bl	800a5e4 <pbuf_remove_header>
 8011d52:	4603      	mov	r3, r0
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d006      	beq.n	8011d66 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011d58:	4b2e      	ldr	r3, [pc, #184]	; (8011e14 <icmp_input+0x1f8>)
 8011d5a:	22c7      	movs	r2, #199	; 0xc7
 8011d5c:	4930      	ldr	r1, [pc, #192]	; (8011e20 <icmp_input+0x204>)
 8011d5e:	482f      	ldr	r0, [pc, #188]	; (8011e1c <icmp_input+0x200>)
 8011d60:	f001 fbca 	bl	80134f8 <iprintf>
          goto icmperr;
 8011d64:	e04b      	b.n	8011dfe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	685b      	ldr	r3, [r3, #4]
 8011d6a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011d6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d6e:	4619      	mov	r1, r3
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f7f8 fc27 	bl	800a5c4 <pbuf_add_header>
 8011d76:	4603      	mov	r3, r0
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d12b      	bne.n	8011dd4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	685b      	ldr	r3, [r3, #4]
 8011d80:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011d8a:	4b20      	ldr	r3, [pc, #128]	; (8011e0c <icmp_input+0x1f0>)
 8011d8c:	691a      	ldr	r2, [r3, #16]
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011d92:	693b      	ldr	r3, [r7, #16]
 8011d94:	2200      	movs	r2, #0
 8011d96:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	709a      	strb	r2, [r3, #2]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	22ff      	movs	r2, #255	; 0xff
 8011da6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	2200      	movs	r2, #0
 8011dac:	729a      	strb	r2, [r3, #10]
 8011dae:	2200      	movs	r2, #0
 8011db0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	9302      	str	r3, [sp, #8]
 8011db6:	2301      	movs	r3, #1
 8011db8:	9301      	str	r3, [sp, #4]
 8011dba:	2300      	movs	r3, #0
 8011dbc:	9300      	str	r3, [sp, #0]
 8011dbe:	23ff      	movs	r3, #255	; 0xff
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	69f9      	ldr	r1, [r7, #28]
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f000 fa75 	bl	80122b4 <ip4_output_if>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011dce:	e001      	b.n	8011dd4 <icmp_input+0x1b8>
      break;
 8011dd0:	bf00      	nop
 8011dd2:	e000      	b.n	8011dd6 <icmp_input+0x1ba>
      break;
 8011dd4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f7f8 fc8a 	bl	800a6f0 <pbuf_free>
  return;
 8011ddc:	e013      	b.n	8011e06 <icmp_input+0x1ea>
    goto lenerr;
 8011dde:	bf00      	nop
 8011de0:	e002      	b.n	8011de8 <icmp_input+0x1cc>
    goto lenerr;
 8011de2:	bf00      	nop
 8011de4:	e000      	b.n	8011de8 <icmp_input+0x1cc>
        goto lenerr;
 8011de6:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f7f8 fc81 	bl	800a6f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011dee:	e00a      	b.n	8011e06 <icmp_input+0x1ea>
        goto icmperr;
 8011df0:	bf00      	nop
 8011df2:	e004      	b.n	8011dfe <icmp_input+0x1e2>
        goto icmperr;
 8011df4:	bf00      	nop
 8011df6:	e002      	b.n	8011dfe <icmp_input+0x1e2>
          goto icmperr;
 8011df8:	bf00      	nop
 8011dfa:	e000      	b.n	8011dfe <icmp_input+0x1e2>
          goto icmperr;
 8011dfc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f7f8 fc76 	bl	800a6f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011e04:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011e06:	3728      	adds	r7, #40	; 0x28
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}
 8011e0c:	200036ac 	.word	0x200036ac
 8011e10:	200036c0 	.word	0x200036c0
 8011e14:	08016ed0 	.word	0x08016ed0
 8011e18:	08016f08 	.word	0x08016f08
 8011e1c:	08016f40 	.word	0x08016f40
 8011e20:	08016f68 	.word	0x08016f68

08011e24 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	460b      	mov	r3, r1
 8011e2e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011e30:	78fb      	ldrb	r3, [r7, #3]
 8011e32:	461a      	mov	r2, r3
 8011e34:	2103      	movs	r1, #3
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f000 f814 	bl	8011e64 <icmp_send_response>
}
 8011e3c:	bf00      	nop
 8011e3e:	3708      	adds	r7, #8
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011e50:	78fb      	ldrb	r3, [r7, #3]
 8011e52:	461a      	mov	r2, r3
 8011e54:	210b      	movs	r1, #11
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f000 f804 	bl	8011e64 <icmp_send_response>
}
 8011e5c:	bf00      	nop
 8011e5e:	3708      	adds	r7, #8
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}

08011e64 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b08c      	sub	sp, #48	; 0x30
 8011e68:	af04      	add	r7, sp, #16
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	460b      	mov	r3, r1
 8011e6e:	70fb      	strb	r3, [r7, #3]
 8011e70:	4613      	mov	r3, r2
 8011e72:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011e74:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e78:	2124      	movs	r1, #36	; 0x24
 8011e7a:	2022      	movs	r0, #34	; 0x22
 8011e7c:	f7f8 f954 	bl	800a128 <pbuf_alloc>
 8011e80:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d04c      	beq.n	8011f22 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011e88:	69fb      	ldr	r3, [r7, #28]
 8011e8a:	895b      	ldrh	r3, [r3, #10]
 8011e8c:	2b23      	cmp	r3, #35	; 0x23
 8011e8e:	d806      	bhi.n	8011e9e <icmp_send_response+0x3a>
 8011e90:	4b26      	ldr	r3, [pc, #152]	; (8011f2c <icmp_send_response+0xc8>)
 8011e92:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011e96:	4926      	ldr	r1, [pc, #152]	; (8011f30 <icmp_send_response+0xcc>)
 8011e98:	4826      	ldr	r0, [pc, #152]	; (8011f34 <icmp_send_response+0xd0>)
 8011e9a:	f001 fb2d 	bl	80134f8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011ea4:	69fb      	ldr	r3, [r7, #28]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	78fa      	ldrb	r2, [r7, #3]
 8011eae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	78ba      	ldrb	r2, [r7, #2]
 8011eb4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	2200      	movs	r2, #0
 8011eba:	711a      	strb	r2, [r3, #4]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	719a      	strb	r2, [r3, #6]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	f103 0008 	add.w	r0, r3, #8
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	685b      	ldr	r3, [r3, #4]
 8011ed6:	221c      	movs	r2, #28
 8011ed8:	4619      	mov	r1, r3
 8011eda:	f001 fadd 	bl	8013498 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011ede:	69bb      	ldr	r3, [r7, #24]
 8011ee0:	68db      	ldr	r3, [r3, #12]
 8011ee2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011ee4:	f107 030c 	add.w	r3, r7, #12
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f000 f825 	bl	8011f38 <ip4_route>
 8011eee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d011      	beq.n	8011f1a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011ef6:	697b      	ldr	r3, [r7, #20]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	709a      	strb	r2, [r3, #2]
 8011efc:	2200      	movs	r2, #0
 8011efe:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011f00:	f107 020c 	add.w	r2, r7, #12
 8011f04:	693b      	ldr	r3, [r7, #16]
 8011f06:	9302      	str	r3, [sp, #8]
 8011f08:	2301      	movs	r3, #1
 8011f0a:	9301      	str	r3, [sp, #4]
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	9300      	str	r3, [sp, #0]
 8011f10:	23ff      	movs	r3, #255	; 0xff
 8011f12:	2100      	movs	r1, #0
 8011f14:	69f8      	ldr	r0, [r7, #28]
 8011f16:	f000 f9cd 	bl	80122b4 <ip4_output_if>
  }
  pbuf_free(q);
 8011f1a:	69f8      	ldr	r0, [r7, #28]
 8011f1c:	f7f8 fbe8 	bl	800a6f0 <pbuf_free>
 8011f20:	e000      	b.n	8011f24 <icmp_send_response+0xc0>
    return;
 8011f22:	bf00      	nop
}
 8011f24:	3720      	adds	r7, #32
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}
 8011f2a:	bf00      	nop
 8011f2c:	08016ed0 	.word	0x08016ed0
 8011f30:	08016f9c 	.word	0x08016f9c
 8011f34:	08016f40 	.word	0x08016f40

08011f38 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011f38:	b480      	push	{r7}
 8011f3a:	b085      	sub	sp, #20
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011f40:	4b33      	ldr	r3, [pc, #204]	; (8012010 <ip4_route+0xd8>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	60fb      	str	r3, [r7, #12]
 8011f46:	e036      	b.n	8011fb6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f4e:	f003 0301 	and.w	r3, r3, #1
 8011f52:	b2db      	uxtb	r3, r3
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d02b      	beq.n	8011fb0 <ip4_route+0x78>
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f5e:	089b      	lsrs	r3, r3, #2
 8011f60:	f003 0301 	and.w	r3, r3, #1
 8011f64:	b2db      	uxtb	r3, r3
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d022      	beq.n	8011fb0 <ip4_route+0x78>
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	3304      	adds	r3, #4
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d01d      	beq.n	8011fb0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681a      	ldr	r2, [r3, #0]
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	3304      	adds	r3, #4
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	405a      	eors	r2, r3
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	3308      	adds	r3, #8
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	4013      	ands	r3, r2
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d101      	bne.n	8011f90 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	e038      	b.n	8012002 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f96:	f003 0302 	and.w	r3, r3, #2
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d108      	bne.n	8011fb0 <ip4_route+0x78>
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	330c      	adds	r3, #12
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d101      	bne.n	8011fb0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	e028      	b.n	8012002 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	60fb      	str	r3, [r7, #12]
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d1c5      	bne.n	8011f48 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011fbc:	4b15      	ldr	r3, [pc, #84]	; (8012014 <ip4_route+0xdc>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d01a      	beq.n	8011ffa <ip4_route+0xc2>
 8011fc4:	4b13      	ldr	r3, [pc, #76]	; (8012014 <ip4_route+0xdc>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011fcc:	f003 0301 	and.w	r3, r3, #1
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d012      	beq.n	8011ffa <ip4_route+0xc2>
 8011fd4:	4b0f      	ldr	r3, [pc, #60]	; (8012014 <ip4_route+0xdc>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011fdc:	f003 0304 	and.w	r3, r3, #4
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d00a      	beq.n	8011ffa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011fe4:	4b0b      	ldr	r3, [pc, #44]	; (8012014 <ip4_route+0xdc>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	3304      	adds	r3, #4
 8011fea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d004      	beq.n	8011ffa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8011ff8:	d101      	bne.n	8011ffe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	e001      	b.n	8012002 <ip4_route+0xca>
  }

  return netif_default;
 8011ffe:	4b05      	ldr	r3, [pc, #20]	; (8012014 <ip4_route+0xdc>)
 8012000:	681b      	ldr	r3, [r3, #0]
}
 8012002:	4618      	mov	r0, r3
 8012004:	3714      	adds	r7, #20
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	20008dd0 	.word	0x20008dd0
 8012014:	20008dd4 	.word	0x20008dd4

08012018 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012026:	f003 0301 	and.w	r3, r3, #1
 801202a:	b2db      	uxtb	r3, r3
 801202c:	2b00      	cmp	r3, #0
 801202e:	d016      	beq.n	801205e <ip4_input_accept+0x46>
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	3304      	adds	r3, #4
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d011      	beq.n	801205e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801203a:	4b0b      	ldr	r3, [pc, #44]	; (8012068 <ip4_input_accept+0x50>)
 801203c:	695a      	ldr	r2, [r3, #20]
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	3304      	adds	r3, #4
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	429a      	cmp	r2, r3
 8012046:	d008      	beq.n	801205a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012048:	4b07      	ldr	r3, [pc, #28]	; (8012068 <ip4_input_accept+0x50>)
 801204a:	695b      	ldr	r3, [r3, #20]
 801204c:	6879      	ldr	r1, [r7, #4]
 801204e:	4618      	mov	r0, r3
 8012050:	f000 fa08 	bl	8012464 <ip4_addr_isbroadcast_u32>
 8012054:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012056:	2b00      	cmp	r3, #0
 8012058:	d001      	beq.n	801205e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801205a:	2301      	movs	r3, #1
 801205c:	e000      	b.n	8012060 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801205e:	2300      	movs	r3, #0
}
 8012060:	4618      	mov	r0, r3
 8012062:	3708      	adds	r7, #8
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}
 8012068:	200036ac 	.word	0x200036ac

0801206c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b086      	sub	sp, #24
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
 8012074:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	091b      	lsrs	r3, r3, #4
 8012082:	b2db      	uxtb	r3, r3
 8012084:	2b04      	cmp	r3, #4
 8012086:	d004      	beq.n	8012092 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f7f8 fb31 	bl	800a6f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801208e:	2300      	movs	r3, #0
 8012090:	e107      	b.n	80122a2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	f003 030f 	and.w	r3, r3, #15
 801209a:	b2db      	uxtb	r3, r3
 801209c:	009b      	lsls	r3, r3, #2
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	885b      	ldrh	r3, [r3, #2]
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7f7 f86d 	bl	8009188 <lwip_htons>
 80120ae:	4603      	mov	r3, r0
 80120b0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	891b      	ldrh	r3, [r3, #8]
 80120b6:	89ba      	ldrh	r2, [r7, #12]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d204      	bcs.n	80120c6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80120bc:	89bb      	ldrh	r3, [r7, #12]
 80120be:	4619      	mov	r1, r3
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f7f8 f98f 	bl	800a3e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	895b      	ldrh	r3, [r3, #10]
 80120ca:	89fa      	ldrh	r2, [r7, #14]
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d807      	bhi.n	80120e0 <ip4_input+0x74>
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	891b      	ldrh	r3, [r3, #8]
 80120d4:	89ba      	ldrh	r2, [r7, #12]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d802      	bhi.n	80120e0 <ip4_input+0x74>
 80120da:	89fb      	ldrh	r3, [r7, #14]
 80120dc:	2b13      	cmp	r3, #19
 80120de:	d804      	bhi.n	80120ea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f7f8 fb05 	bl	800a6f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80120e6:	2300      	movs	r3, #0
 80120e8:	e0db      	b.n	80122a2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	691b      	ldr	r3, [r3, #16]
 80120ee:	4a6f      	ldr	r2, [pc, #444]	; (80122ac <ip4_input+0x240>)
 80120f0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	68db      	ldr	r3, [r3, #12]
 80120f6:	4a6d      	ldr	r2, [pc, #436]	; (80122ac <ip4_input+0x240>)
 80120f8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80120fa:	4b6c      	ldr	r3, [pc, #432]	; (80122ac <ip4_input+0x240>)
 80120fc:	695b      	ldr	r3, [r3, #20]
 80120fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012102:	2be0      	cmp	r3, #224	; 0xe0
 8012104:	d112      	bne.n	801212c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801210c:	f003 0301 	and.w	r3, r3, #1
 8012110:	b2db      	uxtb	r3, r3
 8012112:	2b00      	cmp	r3, #0
 8012114:	d007      	beq.n	8012126 <ip4_input+0xba>
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	3304      	adds	r3, #4
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d002      	beq.n	8012126 <ip4_input+0xba>
      netif = inp;
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	613b      	str	r3, [r7, #16]
 8012124:	e02a      	b.n	801217c <ip4_input+0x110>
    } else {
      netif = NULL;
 8012126:	2300      	movs	r3, #0
 8012128:	613b      	str	r3, [r7, #16]
 801212a:	e027      	b.n	801217c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801212c:	6838      	ldr	r0, [r7, #0]
 801212e:	f7ff ff73 	bl	8012018 <ip4_input_accept>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d002      	beq.n	801213e <ip4_input+0xd2>
      netif = inp;
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	613b      	str	r3, [r7, #16]
 801213c:	e01e      	b.n	801217c <ip4_input+0x110>
    } else {
      netif = NULL;
 801213e:	2300      	movs	r3, #0
 8012140:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012142:	4b5a      	ldr	r3, [pc, #360]	; (80122ac <ip4_input+0x240>)
 8012144:	695b      	ldr	r3, [r3, #20]
 8012146:	b2db      	uxtb	r3, r3
 8012148:	2b7f      	cmp	r3, #127	; 0x7f
 801214a:	d017      	beq.n	801217c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801214c:	4b58      	ldr	r3, [pc, #352]	; (80122b0 <ip4_input+0x244>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	613b      	str	r3, [r7, #16]
 8012152:	e00e      	b.n	8012172 <ip4_input+0x106>
          if (netif == inp) {
 8012154:	693a      	ldr	r2, [r7, #16]
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	429a      	cmp	r2, r3
 801215a:	d006      	beq.n	801216a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801215c:	6938      	ldr	r0, [r7, #16]
 801215e:	f7ff ff5b 	bl	8012018 <ip4_input_accept>
 8012162:	4603      	mov	r3, r0
 8012164:	2b00      	cmp	r3, #0
 8012166:	d108      	bne.n	801217a <ip4_input+0x10e>
 8012168:	e000      	b.n	801216c <ip4_input+0x100>
            continue;
 801216a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	613b      	str	r3, [r7, #16]
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d1ed      	bne.n	8012154 <ip4_input+0xe8>
 8012178:	e000      	b.n	801217c <ip4_input+0x110>
            break;
 801217a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801217c:	4b4b      	ldr	r3, [pc, #300]	; (80122ac <ip4_input+0x240>)
 801217e:	691b      	ldr	r3, [r3, #16]
 8012180:	6839      	ldr	r1, [r7, #0]
 8012182:	4618      	mov	r0, r3
 8012184:	f000 f96e 	bl	8012464 <ip4_addr_isbroadcast_u32>
 8012188:	4603      	mov	r3, r0
 801218a:	2b00      	cmp	r3, #0
 801218c:	d105      	bne.n	801219a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801218e:	4b47      	ldr	r3, [pc, #284]	; (80122ac <ip4_input+0x240>)
 8012190:	691b      	ldr	r3, [r3, #16]
 8012192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012196:	2be0      	cmp	r3, #224	; 0xe0
 8012198:	d104      	bne.n	80121a4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f7f8 faa8 	bl	800a6f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80121a0:	2300      	movs	r3, #0
 80121a2:	e07e      	b.n	80122a2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d104      	bne.n	80121b4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f7f8 faa0 	bl	800a6f0 <pbuf_free>
    return ERR_OK;
 80121b0:	2300      	movs	r3, #0
 80121b2:	e076      	b.n	80122a2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80121b4:	697b      	ldr	r3, [r7, #20]
 80121b6:	88db      	ldrh	r3, [r3, #6]
 80121b8:	b29b      	uxth	r3, r3
 80121ba:	461a      	mov	r2, r3
 80121bc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80121c0:	4013      	ands	r3, r2
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d00b      	beq.n	80121de <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f000 fd22 	bl	8012c10 <ip4_reass>
 80121cc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d101      	bne.n	80121d8 <ip4_input+0x16c>
      return ERR_OK;
 80121d4:	2300      	movs	r3, #0
 80121d6:	e064      	b.n	80122a2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80121de:	4a33      	ldr	r2, [pc, #204]	; (80122ac <ip4_input+0x240>)
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80121e4:	4a31      	ldr	r2, [pc, #196]	; (80122ac <ip4_input+0x240>)
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80121ea:	4a30      	ldr	r2, [pc, #192]	; (80122ac <ip4_input+0x240>)
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80121f0:	697b      	ldr	r3, [r7, #20]
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	f003 030f 	and.w	r3, r3, #15
 80121f8:	b2db      	uxtb	r3, r3
 80121fa:	009b      	lsls	r3, r3, #2
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	b29a      	uxth	r2, r3
 8012200:	4b2a      	ldr	r3, [pc, #168]	; (80122ac <ip4_input+0x240>)
 8012202:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012204:	89fb      	ldrh	r3, [r7, #14]
 8012206:	4619      	mov	r1, r3
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f7f8 f9eb 	bl	800a5e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	7a5b      	ldrb	r3, [r3, #9]
 8012212:	2b11      	cmp	r3, #17
 8012214:	d006      	beq.n	8012224 <ip4_input+0x1b8>
 8012216:	2b11      	cmp	r3, #17
 8012218:	dc13      	bgt.n	8012242 <ip4_input+0x1d6>
 801221a:	2b01      	cmp	r3, #1
 801221c:	d00c      	beq.n	8012238 <ip4_input+0x1cc>
 801221e:	2b06      	cmp	r3, #6
 8012220:	d005      	beq.n	801222e <ip4_input+0x1c2>
 8012222:	e00e      	b.n	8012242 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012224:	6839      	ldr	r1, [r7, #0]
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f7fe f8e6 	bl	80103f8 <udp_input>
        break;
 801222c:	e026      	b.n	801227c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801222e:	6839      	ldr	r1, [r7, #0]
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f7fa f927 	bl	800c484 <tcp_input>
        break;
 8012236:	e021      	b.n	801227c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012238:	6839      	ldr	r1, [r7, #0]
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f7ff fcee 	bl	8011c1c <icmp_input>
        break;
 8012240:	e01c      	b.n	801227c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012242:	4b1a      	ldr	r3, [pc, #104]	; (80122ac <ip4_input+0x240>)
 8012244:	695b      	ldr	r3, [r3, #20]
 8012246:	6939      	ldr	r1, [r7, #16]
 8012248:	4618      	mov	r0, r3
 801224a:	f000 f90b 	bl	8012464 <ip4_addr_isbroadcast_u32>
 801224e:	4603      	mov	r3, r0
 8012250:	2b00      	cmp	r3, #0
 8012252:	d10f      	bne.n	8012274 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012254:	4b15      	ldr	r3, [pc, #84]	; (80122ac <ip4_input+0x240>)
 8012256:	695b      	ldr	r3, [r3, #20]
 8012258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801225c:	2be0      	cmp	r3, #224	; 0xe0
 801225e:	d009      	beq.n	8012274 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012260:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012264:	4619      	mov	r1, r3
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f7f8 fa2f 	bl	800a6ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801226c:	2102      	movs	r1, #2
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7ff fdd8 	bl	8011e24 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	f7f8 fa3b 	bl	800a6f0 <pbuf_free>
        break;
 801227a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801227c:	4b0b      	ldr	r3, [pc, #44]	; (80122ac <ip4_input+0x240>)
 801227e:	2200      	movs	r2, #0
 8012280:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012282:	4b0a      	ldr	r3, [pc, #40]	; (80122ac <ip4_input+0x240>)
 8012284:	2200      	movs	r2, #0
 8012286:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012288:	4b08      	ldr	r3, [pc, #32]	; (80122ac <ip4_input+0x240>)
 801228a:	2200      	movs	r2, #0
 801228c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801228e:	4b07      	ldr	r3, [pc, #28]	; (80122ac <ip4_input+0x240>)
 8012290:	2200      	movs	r2, #0
 8012292:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012294:	4b05      	ldr	r3, [pc, #20]	; (80122ac <ip4_input+0x240>)
 8012296:	2200      	movs	r2, #0
 8012298:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801229a:	4b04      	ldr	r3, [pc, #16]	; (80122ac <ip4_input+0x240>)
 801229c:	2200      	movs	r2, #0
 801229e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80122a0:	2300      	movs	r3, #0
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3718      	adds	r7, #24
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	bf00      	nop
 80122ac:	200036ac 	.word	0x200036ac
 80122b0:	20008dd0 	.word	0x20008dd0

080122b4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b08a      	sub	sp, #40	; 0x28
 80122b8:	af04      	add	r7, sp, #16
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
 80122c0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d009      	beq.n	80122e0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d003      	beq.n	80122da <ip4_output_if+0x26>
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d102      	bne.n	80122e0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80122da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122dc:	3304      	adds	r3, #4
 80122de:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80122e0:	78fa      	ldrb	r2, [r7, #3]
 80122e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e4:	9302      	str	r3, [sp, #8]
 80122e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80122ea:	9301      	str	r3, [sp, #4]
 80122ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80122f0:	9300      	str	r3, [sp, #0]
 80122f2:	4613      	mov	r3, r2
 80122f4:	687a      	ldr	r2, [r7, #4]
 80122f6:	6979      	ldr	r1, [r7, #20]
 80122f8:	68f8      	ldr	r0, [r7, #12]
 80122fa:	f000 f805 	bl	8012308 <ip4_output_if_src>
 80122fe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012300:	4618      	mov	r0, r3
 8012302:	3718      	adds	r7, #24
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}

08012308 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b088      	sub	sp, #32
 801230c:	af00      	add	r7, sp, #0
 801230e:	60f8      	str	r0, [r7, #12]
 8012310:	60b9      	str	r1, [r7, #8]
 8012312:	607a      	str	r2, [r7, #4]
 8012314:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	7b9b      	ldrb	r3, [r3, #14]
 801231a:	2b01      	cmp	r3, #1
 801231c:	d006      	beq.n	801232c <ip4_output_if_src+0x24>
 801231e:	4b4b      	ldr	r3, [pc, #300]	; (801244c <ip4_output_if_src+0x144>)
 8012320:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012324:	494a      	ldr	r1, [pc, #296]	; (8012450 <ip4_output_if_src+0x148>)
 8012326:	484b      	ldr	r0, [pc, #300]	; (8012454 <ip4_output_if_src+0x14c>)
 8012328:	f001 f8e6 	bl	80134f8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d060      	beq.n	80123f4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012332:	2314      	movs	r3, #20
 8012334:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012336:	2114      	movs	r1, #20
 8012338:	68f8      	ldr	r0, [r7, #12]
 801233a:	f7f8 f943 	bl	800a5c4 <pbuf_add_header>
 801233e:	4603      	mov	r3, r0
 8012340:	2b00      	cmp	r3, #0
 8012342:	d002      	beq.n	801234a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012344:	f06f 0301 	mvn.w	r3, #1
 8012348:	e07c      	b.n	8012444 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	895b      	ldrh	r3, [r3, #10]
 8012354:	2b13      	cmp	r3, #19
 8012356:	d806      	bhi.n	8012366 <ip4_output_if_src+0x5e>
 8012358:	4b3c      	ldr	r3, [pc, #240]	; (801244c <ip4_output_if_src+0x144>)
 801235a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801235e:	493e      	ldr	r1, [pc, #248]	; (8012458 <ip4_output_if_src+0x150>)
 8012360:	483c      	ldr	r0, [pc, #240]	; (8012454 <ip4_output_if_src+0x14c>)
 8012362:	f001 f8c9 	bl	80134f8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012366:	69fb      	ldr	r3, [r7, #28]
 8012368:	78fa      	ldrb	r2, [r7, #3]
 801236a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801236c:	69fb      	ldr	r3, [r7, #28]
 801236e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012372:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	69fb      	ldr	r3, [r7, #28]
 801237a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801237c:	8b7b      	ldrh	r3, [r7, #26]
 801237e:	089b      	lsrs	r3, r3, #2
 8012380:	b29b      	uxth	r3, r3
 8012382:	b2db      	uxtb	r3, r3
 8012384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012388:	b2da      	uxtb	r2, r3
 801238a:	69fb      	ldr	r3, [r7, #28]
 801238c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801238e:	69fb      	ldr	r3, [r7, #28]
 8012390:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012394:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	891b      	ldrh	r3, [r3, #8]
 801239a:	4618      	mov	r0, r3
 801239c:	f7f6 fef4 	bl	8009188 <lwip_htons>
 80123a0:	4603      	mov	r3, r0
 80123a2:	461a      	mov	r2, r3
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80123a8:	69fb      	ldr	r3, [r7, #28]
 80123aa:	2200      	movs	r2, #0
 80123ac:	719a      	strb	r2, [r3, #6]
 80123ae:	2200      	movs	r2, #0
 80123b0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80123b2:	4b2a      	ldr	r3, [pc, #168]	; (801245c <ip4_output_if_src+0x154>)
 80123b4:	881b      	ldrh	r3, [r3, #0]
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7f6 fee6 	bl	8009188 <lwip_htons>
 80123bc:	4603      	mov	r3, r0
 80123be:	461a      	mov	r2, r3
 80123c0:	69fb      	ldr	r3, [r7, #28]
 80123c2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80123c4:	4b25      	ldr	r3, [pc, #148]	; (801245c <ip4_output_if_src+0x154>)
 80123c6:	881b      	ldrh	r3, [r3, #0]
 80123c8:	3301      	adds	r3, #1
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	4b23      	ldr	r3, [pc, #140]	; (801245c <ip4_output_if_src+0x154>)
 80123ce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d104      	bne.n	80123e0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80123d6:	4b22      	ldr	r3, [pc, #136]	; (8012460 <ip4_output_if_src+0x158>)
 80123d8:	681a      	ldr	r2, [r3, #0]
 80123da:	69fb      	ldr	r3, [r7, #28]
 80123dc:	60da      	str	r2, [r3, #12]
 80123de:	e003      	b.n	80123e8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	69fb      	ldr	r3, [r7, #28]
 80123e6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80123e8:	69fb      	ldr	r3, [r7, #28]
 80123ea:	2200      	movs	r2, #0
 80123ec:	729a      	strb	r2, [r3, #10]
 80123ee:	2200      	movs	r2, #0
 80123f0:	72da      	strb	r2, [r3, #11]
 80123f2:	e00f      	b.n	8012414 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	895b      	ldrh	r3, [r3, #10]
 80123f8:	2b13      	cmp	r3, #19
 80123fa:	d802      	bhi.n	8012402 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80123fc:	f06f 0301 	mvn.w	r3, #1
 8012400:	e020      	b.n	8012444 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	685b      	ldr	r3, [r3, #4]
 8012406:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	691b      	ldr	r3, [r3, #16]
 801240c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801240e:	f107 0314 	add.w	r3, r7, #20
 8012412:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012416:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012418:	2b00      	cmp	r3, #0
 801241a:	d00c      	beq.n	8012436 <ip4_output_if_src+0x12e>
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	891a      	ldrh	r2, [r3, #8]
 8012420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012422:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012424:	429a      	cmp	r2, r3
 8012426:	d906      	bls.n	8012436 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012428:	687a      	ldr	r2, [r7, #4]
 801242a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f000 fde3 	bl	8012ff8 <ip4_frag>
 8012432:	4603      	mov	r3, r0
 8012434:	e006      	b.n	8012444 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012438:	695b      	ldr	r3, [r3, #20]
 801243a:	687a      	ldr	r2, [r7, #4]
 801243c:	68f9      	ldr	r1, [r7, #12]
 801243e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012440:	4798      	blx	r3
 8012442:	4603      	mov	r3, r0
}
 8012444:	4618      	mov	r0, r3
 8012446:	3720      	adds	r7, #32
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}
 801244c:	08016fc8 	.word	0x08016fc8
 8012450:	08016ffc 	.word	0x08016ffc
 8012454:	08017008 	.word	0x08017008
 8012458:	08017030 	.word	0x08017030
 801245c:	20008f2e 	.word	0x20008f2e
 8012460:	0801740c 	.word	0x0801740c

08012464 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012464:	b480      	push	{r7}
 8012466:	b085      	sub	sp, #20
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012478:	d002      	beq.n	8012480 <ip4_addr_isbroadcast_u32+0x1c>
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d101      	bne.n	8012484 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012480:	2301      	movs	r3, #1
 8012482:	e02a      	b.n	80124da <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801248a:	f003 0302 	and.w	r3, r3, #2
 801248e:	2b00      	cmp	r3, #0
 8012490:	d101      	bne.n	8012496 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012492:	2300      	movs	r3, #0
 8012494:	e021      	b.n	80124da <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	3304      	adds	r3, #4
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	687a      	ldr	r2, [r7, #4]
 801249e:	429a      	cmp	r2, r3
 80124a0:	d101      	bne.n	80124a6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80124a2:	2300      	movs	r3, #0
 80124a4:	e019      	b.n	80124da <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80124a6:	68fa      	ldr	r2, [r7, #12]
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	3304      	adds	r3, #4
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	405a      	eors	r2, r3
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	3308      	adds	r3, #8
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	4013      	ands	r3, r2
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d10d      	bne.n	80124d8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	3308      	adds	r3, #8
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	43da      	mvns	r2, r3
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	3308      	adds	r3, #8
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d101      	bne.n	80124d8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80124d4:	2301      	movs	r3, #1
 80124d6:	e000      	b.n	80124da <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80124d8:	2300      	movs	r3, #0
  }
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3714      	adds	r7, #20
 80124de:	46bd      	mov	sp, r7
 80124e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e4:	4770      	bx	lr
	...

080124e8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80124f0:	2210      	movs	r2, #16
 80124f2:	4904      	ldr	r1, [pc, #16]	; (8012504 <ip4addr_ntoa+0x1c>)
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f000 f807 	bl	8012508 <ip4addr_ntoa_r>
 80124fa:	4603      	mov	r3, r0
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3708      	adds	r7, #8
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}
 8012504:	20008f30 	.word	0x20008f30

08012508 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8012508:	b480      	push	{r7}
 801250a:	b08d      	sub	sp, #52	; 0x34
 801250c:	af00      	add	r7, sp, #0
 801250e:	60f8      	str	r0, [r7, #12]
 8012510:	60b9      	str	r1, [r7, #8]
 8012512:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8012514:	2300      	movs	r3, #0
 8012516:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8012522:	f107 0318 	add.w	r3, r7, #24
 8012526:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8012528:	2300      	movs	r3, #0
 801252a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801252e:	e058      	b.n	80125e2 <ip4addr_ntoa_r+0xda>
    i = 0;
 8012530:	2300      	movs	r3, #0
 8012532:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8012536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012538:	781a      	ldrb	r2, [r3, #0]
 801253a:	4b32      	ldr	r3, [pc, #200]	; (8012604 <ip4addr_ntoa_r+0xfc>)
 801253c:	fba3 1302 	umull	r1, r3, r3, r2
 8012540:	08d9      	lsrs	r1, r3, #3
 8012542:	460b      	mov	r3, r1
 8012544:	009b      	lsls	r3, r3, #2
 8012546:	440b      	add	r3, r1
 8012548:	005b      	lsls	r3, r3, #1
 801254a:	1ad3      	subs	r3, r2, r3
 801254c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	4a2c      	ldr	r2, [pc, #176]	; (8012604 <ip4addr_ntoa_r+0xfc>)
 8012554:	fba2 2303 	umull	r2, r3, r2, r3
 8012558:	08db      	lsrs	r3, r3, #3
 801255a:	b2da      	uxtb	r2, r3
 801255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801255e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8012560:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012564:	1c5a      	adds	r2, r3, #1
 8012566:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801256a:	4619      	mov	r1, r3
 801256c:	7ffb      	ldrb	r3, [r7, #31]
 801256e:	3330      	adds	r3, #48	; 0x30
 8012570:	b2da      	uxtb	r2, r3
 8012572:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8012576:	443b      	add	r3, r7
 8012578:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801257e:	781b      	ldrb	r3, [r3, #0]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d1d8      	bne.n	8012536 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8012584:	e011      	b.n	80125aa <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8012586:	6a3b      	ldr	r3, [r7, #32]
 8012588:	1c5a      	adds	r2, r3, #1
 801258a:	623a      	str	r2, [r7, #32]
 801258c:	687a      	ldr	r2, [r7, #4]
 801258e:	429a      	cmp	r2, r3
 8012590:	dc01      	bgt.n	8012596 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8012592:	2300      	movs	r3, #0
 8012594:	e030      	b.n	80125f8 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8012596:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801259c:	1c59      	adds	r1, r3, #1
 801259e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80125a0:	3230      	adds	r2, #48	; 0x30
 80125a2:	443a      	add	r2, r7
 80125a4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80125a8:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80125aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80125ae:	1e5a      	subs	r2, r3, #1
 80125b0:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d1e6      	bne.n	8012586 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80125b8:	6a3b      	ldr	r3, [r7, #32]
 80125ba:	1c5a      	adds	r2, r3, #1
 80125bc:	623a      	str	r2, [r7, #32]
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	dc01      	bgt.n	80125c8 <ip4addr_ntoa_r+0xc0>
      return NULL;
 80125c4:	2300      	movs	r3, #0
 80125c6:	e017      	b.n	80125f8 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80125c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ca:	1c5a      	adds	r2, r3, #1
 80125cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80125ce:	222e      	movs	r2, #46	; 0x2e
 80125d0:	701a      	strb	r2, [r3, #0]
    ap++;
 80125d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d4:	3301      	adds	r3, #1
 80125d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80125d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125dc:	3301      	adds	r3, #1
 80125de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80125e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125e6:	2b03      	cmp	r3, #3
 80125e8:	d9a2      	bls.n	8012530 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80125ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ec:	3b01      	subs	r3, #1
 80125ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f2:	2200      	movs	r2, #0
 80125f4:	701a      	strb	r2, [r3, #0]
  return buf;
 80125f6:	68bb      	ldr	r3, [r7, #8]
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3734      	adds	r7, #52	; 0x34
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	4770      	bx	lr
 8012604:	cccccccd 	.word	0xcccccccd

08012608 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801260e:	2300      	movs	r3, #0
 8012610:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012612:	4b12      	ldr	r3, [pc, #72]	; (801265c <ip_reass_tmr+0x54>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012618:	e018      	b.n	801264c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	7fdb      	ldrb	r3, [r3, #31]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d00b      	beq.n	801263a <ip_reass_tmr+0x32>
      r->timer--;
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	7fdb      	ldrb	r3, [r3, #31]
 8012626:	3b01      	subs	r3, #1
 8012628:	b2da      	uxtb	r2, r3
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	60fb      	str	r3, [r7, #12]
 8012638:	e008      	b.n	801264c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012644:	68b9      	ldr	r1, [r7, #8]
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f000 f80a 	bl	8012660 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d1e3      	bne.n	801261a <ip_reass_tmr+0x12>
    }
  }
}
 8012652:	bf00      	nop
 8012654:	bf00      	nop
 8012656:	3710      	adds	r7, #16
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}
 801265c:	20008f40 	.word	0x20008f40

08012660 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b088      	sub	sp, #32
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801266a:	2300      	movs	r3, #0
 801266c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801266e:	683a      	ldr	r2, [r7, #0]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	429a      	cmp	r2, r3
 8012674:	d105      	bne.n	8012682 <ip_reass_free_complete_datagram+0x22>
 8012676:	4b45      	ldr	r3, [pc, #276]	; (801278c <ip_reass_free_complete_datagram+0x12c>)
 8012678:	22ab      	movs	r2, #171	; 0xab
 801267a:	4945      	ldr	r1, [pc, #276]	; (8012790 <ip_reass_free_complete_datagram+0x130>)
 801267c:	4845      	ldr	r0, [pc, #276]	; (8012794 <ip_reass_free_complete_datagram+0x134>)
 801267e:	f000 ff3b 	bl	80134f8 <iprintf>
  if (prev != NULL) {
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d00a      	beq.n	801269e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	687a      	ldr	r2, [r7, #4]
 801268e:	429a      	cmp	r2, r3
 8012690:	d005      	beq.n	801269e <ip_reass_free_complete_datagram+0x3e>
 8012692:	4b3e      	ldr	r3, [pc, #248]	; (801278c <ip_reass_free_complete_datagram+0x12c>)
 8012694:	22ad      	movs	r2, #173	; 0xad
 8012696:	4940      	ldr	r1, [pc, #256]	; (8012798 <ip_reass_free_complete_datagram+0x138>)
 8012698:	483e      	ldr	r0, [pc, #248]	; (8012794 <ip_reass_free_complete_datagram+0x134>)
 801269a:	f000 ff2d 	bl	80134f8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	685b      	ldr	r3, [r3, #4]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	889b      	ldrh	r3, [r3, #4]
 80126aa:	b29b      	uxth	r3, r3
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d12a      	bne.n	8012706 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	681a      	ldr	r2, [r3, #0]
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80126be:	69bb      	ldr	r3, [r7, #24]
 80126c0:	6858      	ldr	r0, [r3, #4]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	3308      	adds	r3, #8
 80126c6:	2214      	movs	r2, #20
 80126c8:	4619      	mov	r1, r3
 80126ca:	f000 fee5 	bl	8013498 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80126ce:	2101      	movs	r1, #1
 80126d0:	69b8      	ldr	r0, [r7, #24]
 80126d2:	f7ff fbb7 	bl	8011e44 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80126d6:	69b8      	ldr	r0, [r7, #24]
 80126d8:	f7f8 f892 	bl	800a800 <pbuf_clen>
 80126dc:	4603      	mov	r3, r0
 80126de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80126e0:	8bfa      	ldrh	r2, [r7, #30]
 80126e2:	8a7b      	ldrh	r3, [r7, #18]
 80126e4:	4413      	add	r3, r2
 80126e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126ea:	db05      	blt.n	80126f8 <ip_reass_free_complete_datagram+0x98>
 80126ec:	4b27      	ldr	r3, [pc, #156]	; (801278c <ip_reass_free_complete_datagram+0x12c>)
 80126ee:	22bc      	movs	r2, #188	; 0xbc
 80126f0:	492a      	ldr	r1, [pc, #168]	; (801279c <ip_reass_free_complete_datagram+0x13c>)
 80126f2:	4828      	ldr	r0, [pc, #160]	; (8012794 <ip_reass_free_complete_datagram+0x134>)
 80126f4:	f000 ff00 	bl	80134f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80126f8:	8bfa      	ldrh	r2, [r7, #30]
 80126fa:	8a7b      	ldrh	r3, [r7, #18]
 80126fc:	4413      	add	r3, r2
 80126fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012700:	69b8      	ldr	r0, [r7, #24]
 8012702:	f7f7 fff5 	bl	800a6f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801270c:	e01f      	b.n	801274e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801270e:	69bb      	ldr	r3, [r7, #24]
 8012710:	685b      	ldr	r3, [r3, #4]
 8012712:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012714:	69bb      	ldr	r3, [r7, #24]
 8012716:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801271e:	68f8      	ldr	r0, [r7, #12]
 8012720:	f7f8 f86e 	bl	800a800 <pbuf_clen>
 8012724:	4603      	mov	r3, r0
 8012726:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012728:	8bfa      	ldrh	r2, [r7, #30]
 801272a:	8a7b      	ldrh	r3, [r7, #18]
 801272c:	4413      	add	r3, r2
 801272e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012732:	db05      	blt.n	8012740 <ip_reass_free_complete_datagram+0xe0>
 8012734:	4b15      	ldr	r3, [pc, #84]	; (801278c <ip_reass_free_complete_datagram+0x12c>)
 8012736:	22cc      	movs	r2, #204	; 0xcc
 8012738:	4918      	ldr	r1, [pc, #96]	; (801279c <ip_reass_free_complete_datagram+0x13c>)
 801273a:	4816      	ldr	r0, [pc, #88]	; (8012794 <ip_reass_free_complete_datagram+0x134>)
 801273c:	f000 fedc 	bl	80134f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012740:	8bfa      	ldrh	r2, [r7, #30]
 8012742:	8a7b      	ldrh	r3, [r7, #18]
 8012744:	4413      	add	r3, r2
 8012746:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012748:	68f8      	ldr	r0, [r7, #12]
 801274a:	f7f7 ffd1 	bl	800a6f0 <pbuf_free>
  while (p != NULL) {
 801274e:	69bb      	ldr	r3, [r7, #24]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d1dc      	bne.n	801270e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012754:	6839      	ldr	r1, [r7, #0]
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f000 f8c2 	bl	80128e0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801275c:	4b10      	ldr	r3, [pc, #64]	; (80127a0 <ip_reass_free_complete_datagram+0x140>)
 801275e:	881b      	ldrh	r3, [r3, #0]
 8012760:	8bfa      	ldrh	r2, [r7, #30]
 8012762:	429a      	cmp	r2, r3
 8012764:	d905      	bls.n	8012772 <ip_reass_free_complete_datagram+0x112>
 8012766:	4b09      	ldr	r3, [pc, #36]	; (801278c <ip_reass_free_complete_datagram+0x12c>)
 8012768:	22d2      	movs	r2, #210	; 0xd2
 801276a:	490e      	ldr	r1, [pc, #56]	; (80127a4 <ip_reass_free_complete_datagram+0x144>)
 801276c:	4809      	ldr	r0, [pc, #36]	; (8012794 <ip_reass_free_complete_datagram+0x134>)
 801276e:	f000 fec3 	bl	80134f8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012772:	4b0b      	ldr	r3, [pc, #44]	; (80127a0 <ip_reass_free_complete_datagram+0x140>)
 8012774:	881a      	ldrh	r2, [r3, #0]
 8012776:	8bfb      	ldrh	r3, [r7, #30]
 8012778:	1ad3      	subs	r3, r2, r3
 801277a:	b29a      	uxth	r2, r3
 801277c:	4b08      	ldr	r3, [pc, #32]	; (80127a0 <ip_reass_free_complete_datagram+0x140>)
 801277e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012780:	8bfb      	ldrh	r3, [r7, #30]
}
 8012782:	4618      	mov	r0, r3
 8012784:	3720      	adds	r7, #32
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}
 801278a:	bf00      	nop
 801278c:	08017060 	.word	0x08017060
 8012790:	0801709c 	.word	0x0801709c
 8012794:	080170a8 	.word	0x080170a8
 8012798:	080170d0 	.word	0x080170d0
 801279c:	080170e4 	.word	0x080170e4
 80127a0:	20008f44 	.word	0x20008f44
 80127a4:	08017104 	.word	0x08017104

080127a8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b08a      	sub	sp, #40	; 0x28
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80127b2:	2300      	movs	r3, #0
 80127b4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80127b6:	2300      	movs	r3, #0
 80127b8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80127ba:	2300      	movs	r3, #0
 80127bc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80127be:	2300      	movs	r3, #0
 80127c0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80127c2:	2300      	movs	r3, #0
 80127c4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80127c6:	4b28      	ldr	r3, [pc, #160]	; (8012868 <ip_reass_remove_oldest_datagram+0xc0>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80127cc:	e030      	b.n	8012830 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80127ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d0:	695a      	ldr	r2, [r3, #20]
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	68db      	ldr	r3, [r3, #12]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d10c      	bne.n	80127f4 <ip_reass_remove_oldest_datagram+0x4c>
 80127da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127dc:	699a      	ldr	r2, [r3, #24]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	691b      	ldr	r3, [r3, #16]
 80127e2:	429a      	cmp	r2, r3
 80127e4:	d106      	bne.n	80127f4 <ip_reass_remove_oldest_datagram+0x4c>
 80127e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e8:	899a      	ldrh	r2, [r3, #12]
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	889b      	ldrh	r3, [r3, #4]
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d014      	beq.n	801281e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	3301      	adds	r3, #1
 80127f8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80127fa:	6a3b      	ldr	r3, [r7, #32]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d104      	bne.n	801280a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012802:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	61bb      	str	r3, [r7, #24]
 8012808:	e009      	b.n	801281e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280c:	7fda      	ldrb	r2, [r3, #31]
 801280e:	6a3b      	ldr	r3, [r7, #32]
 8012810:	7fdb      	ldrb	r3, [r3, #31]
 8012812:	429a      	cmp	r2, r3
 8012814:	d803      	bhi.n	801281e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012818:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d001      	beq.n	801282a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012828:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012832:	2b00      	cmp	r3, #0
 8012834:	d1cb      	bne.n	80127ce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012836:	6a3b      	ldr	r3, [r7, #32]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d008      	beq.n	801284e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801283c:	69b9      	ldr	r1, [r7, #24]
 801283e:	6a38      	ldr	r0, [r7, #32]
 8012840:	f7ff ff0e 	bl	8012660 <ip_reass_free_complete_datagram>
 8012844:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012846:	697a      	ldr	r2, [r7, #20]
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	4413      	add	r3, r2
 801284c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801284e:	697a      	ldr	r2, [r7, #20]
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	429a      	cmp	r2, r3
 8012854:	da02      	bge.n	801285c <ip_reass_remove_oldest_datagram+0xb4>
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	2b01      	cmp	r3, #1
 801285a:	dcac      	bgt.n	80127b6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801285c:	697b      	ldr	r3, [r7, #20]
}
 801285e:	4618      	mov	r0, r3
 8012860:	3728      	adds	r7, #40	; 0x28
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
 8012866:	bf00      	nop
 8012868:	20008f40 	.word	0x20008f40

0801286c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b084      	sub	sp, #16
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012876:	2004      	movs	r0, #4
 8012878:	f7f7 f8dc 	bl	8009a34 <memp_malloc>
 801287c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d110      	bne.n	80128a6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012884:	6839      	ldr	r1, [r7, #0]
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f7ff ff8e 	bl	80127a8 <ip_reass_remove_oldest_datagram>
 801288c:	4602      	mov	r2, r0
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	4293      	cmp	r3, r2
 8012892:	dc03      	bgt.n	801289c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012894:	2004      	movs	r0, #4
 8012896:	f7f7 f8cd 	bl	8009a34 <memp_malloc>
 801289a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d101      	bne.n	80128a6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80128a2:	2300      	movs	r3, #0
 80128a4:	e016      	b.n	80128d4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80128a6:	2220      	movs	r2, #32
 80128a8:	2100      	movs	r1, #0
 80128aa:	68f8      	ldr	r0, [r7, #12]
 80128ac:	f000 fe1c 	bl	80134e8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	220f      	movs	r2, #15
 80128b4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80128b6:	4b09      	ldr	r3, [pc, #36]	; (80128dc <ip_reass_enqueue_new_datagram+0x70>)
 80128b8:	681a      	ldr	r2, [r3, #0]
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80128be:	4a07      	ldr	r2, [pc, #28]	; (80128dc <ip_reass_enqueue_new_datagram+0x70>)
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	3308      	adds	r3, #8
 80128c8:	2214      	movs	r2, #20
 80128ca:	6879      	ldr	r1, [r7, #4]
 80128cc:	4618      	mov	r0, r3
 80128ce:	f000 fde3 	bl	8013498 <memcpy>
  return ipr;
 80128d2:	68fb      	ldr	r3, [r7, #12]
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	3710      	adds	r7, #16
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}
 80128dc:	20008f40 	.word	0x20008f40

080128e0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b082      	sub	sp, #8
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80128ea:	4b10      	ldr	r3, [pc, #64]	; (801292c <ip_reass_dequeue_datagram+0x4c>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	687a      	ldr	r2, [r7, #4]
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d104      	bne.n	80128fe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	4a0c      	ldr	r2, [pc, #48]	; (801292c <ip_reass_dequeue_datagram+0x4c>)
 80128fa:	6013      	str	r3, [r2, #0]
 80128fc:	e00d      	b.n	801291a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d106      	bne.n	8012912 <ip_reass_dequeue_datagram+0x32>
 8012904:	4b0a      	ldr	r3, [pc, #40]	; (8012930 <ip_reass_dequeue_datagram+0x50>)
 8012906:	f240 1245 	movw	r2, #325	; 0x145
 801290a:	490a      	ldr	r1, [pc, #40]	; (8012934 <ip_reass_dequeue_datagram+0x54>)
 801290c:	480a      	ldr	r0, [pc, #40]	; (8012938 <ip_reass_dequeue_datagram+0x58>)
 801290e:	f000 fdf3 	bl	80134f8 <iprintf>
    prev->next = ipr->next;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681a      	ldr	r2, [r3, #0]
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801291a:	6879      	ldr	r1, [r7, #4]
 801291c:	2004      	movs	r0, #4
 801291e:	f7f7 f8d5 	bl	8009acc <memp_free>
}
 8012922:	bf00      	nop
 8012924:	3708      	adds	r7, #8
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	bf00      	nop
 801292c:	20008f40 	.word	0x20008f40
 8012930:	08017060 	.word	0x08017060
 8012934:	08017128 	.word	0x08017128
 8012938:	080170a8 	.word	0x080170a8

0801293c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b08c      	sub	sp, #48	; 0x30
 8012940:	af00      	add	r7, sp, #0
 8012942:	60f8      	str	r0, [r7, #12]
 8012944:	60b9      	str	r1, [r7, #8]
 8012946:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012948:	2300      	movs	r3, #0
 801294a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801294c:	2301      	movs	r3, #1
 801294e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	685b      	ldr	r3, [r3, #4]
 8012954:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012956:	69fb      	ldr	r3, [r7, #28]
 8012958:	885b      	ldrh	r3, [r3, #2]
 801295a:	b29b      	uxth	r3, r3
 801295c:	4618      	mov	r0, r3
 801295e:	f7f6 fc13 	bl	8009188 <lwip_htons>
 8012962:	4603      	mov	r3, r0
 8012964:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012966:	69fb      	ldr	r3, [r7, #28]
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	f003 030f 	and.w	r3, r3, #15
 801296e:	b2db      	uxtb	r3, r3
 8012970:	009b      	lsls	r3, r3, #2
 8012972:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012974:	7e7b      	ldrb	r3, [r7, #25]
 8012976:	b29b      	uxth	r3, r3
 8012978:	8b7a      	ldrh	r2, [r7, #26]
 801297a:	429a      	cmp	r2, r3
 801297c:	d202      	bcs.n	8012984 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801297e:	f04f 33ff 	mov.w	r3, #4294967295
 8012982:	e135      	b.n	8012bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012984:	7e7b      	ldrb	r3, [r7, #25]
 8012986:	b29b      	uxth	r3, r3
 8012988:	8b7a      	ldrh	r2, [r7, #26]
 801298a:	1ad3      	subs	r3, r2, r3
 801298c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	88db      	ldrh	r3, [r3, #6]
 8012992:	b29b      	uxth	r3, r3
 8012994:	4618      	mov	r0, r3
 8012996:	f7f6 fbf7 	bl	8009188 <lwip_htons>
 801299a:	4603      	mov	r3, r0
 801299c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80129a0:	b29b      	uxth	r3, r3
 80129a2:	00db      	lsls	r3, r3, #3
 80129a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	685b      	ldr	r3, [r3, #4]
 80129aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80129ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ae:	2200      	movs	r2, #0
 80129b0:	701a      	strb	r2, [r3, #0]
 80129b2:	2200      	movs	r2, #0
 80129b4:	705a      	strb	r2, [r3, #1]
 80129b6:	2200      	movs	r2, #0
 80129b8:	709a      	strb	r2, [r3, #2]
 80129ba:	2200      	movs	r2, #0
 80129bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80129be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c0:	8afa      	ldrh	r2, [r7, #22]
 80129c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80129c4:	8afa      	ldrh	r2, [r7, #22]
 80129c6:	8b7b      	ldrh	r3, [r7, #26]
 80129c8:	4413      	add	r3, r2
 80129ca:	b29a      	uxth	r2, r3
 80129cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80129d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d2:	88db      	ldrh	r3, [r3, #6]
 80129d4:	b29b      	uxth	r3, r3
 80129d6:	8afa      	ldrh	r2, [r7, #22]
 80129d8:	429a      	cmp	r2, r3
 80129da:	d902      	bls.n	80129e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80129dc:	f04f 33ff 	mov.w	r3, #4294967295
 80129e0:	e106      	b.n	8012bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	685b      	ldr	r3, [r3, #4]
 80129e6:	627b      	str	r3, [r7, #36]	; 0x24
 80129e8:	e068      	b.n	8012abc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80129ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80129f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f2:	889b      	ldrh	r3, [r3, #4]
 80129f4:	b29a      	uxth	r2, r3
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	889b      	ldrh	r3, [r3, #4]
 80129fa:	b29b      	uxth	r3, r3
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d235      	bcs.n	8012a6c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a04:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d020      	beq.n	8012a4e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0e:	889b      	ldrh	r3, [r3, #4]
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a14:	88db      	ldrh	r3, [r3, #6]
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d307      	bcc.n	8012a2c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1e:	88db      	ldrh	r3, [r3, #6]
 8012a20:	b29a      	uxth	r2, r3
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	889b      	ldrh	r3, [r3, #4]
 8012a26:	b29b      	uxth	r3, r3
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d902      	bls.n	8012a32 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a30:	e0de      	b.n	8012bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a34:	68ba      	ldr	r2, [r7, #8]
 8012a36:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a3a:	88db      	ldrh	r3, [r3, #6]
 8012a3c:	b29a      	uxth	r2, r3
 8012a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a40:	889b      	ldrh	r3, [r3, #4]
 8012a42:	b29b      	uxth	r3, r3
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d03d      	beq.n	8012ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012a48:	2300      	movs	r3, #0
 8012a4a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012a4c:	e03a      	b.n	8012ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a50:	88db      	ldrh	r3, [r3, #6]
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	693b      	ldr	r3, [r7, #16]
 8012a56:	889b      	ldrh	r3, [r3, #4]
 8012a58:	b29b      	uxth	r3, r3
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d902      	bls.n	8012a64 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a62:	e0c5      	b.n	8012bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	68ba      	ldr	r2, [r7, #8]
 8012a68:	605a      	str	r2, [r3, #4]
      break;
 8012a6a:	e02b      	b.n	8012ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6e:	889b      	ldrh	r3, [r3, #4]
 8012a70:	b29a      	uxth	r2, r3
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	889b      	ldrh	r3, [r3, #4]
 8012a76:	b29b      	uxth	r3, r3
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d102      	bne.n	8012a82 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a80:	e0b6      	b.n	8012bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a84:	889b      	ldrh	r3, [r3, #4]
 8012a86:	b29a      	uxth	r2, r3
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	88db      	ldrh	r3, [r3, #6]
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d202      	bcs.n	8012a98 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a92:	f04f 33ff 	mov.w	r3, #4294967295
 8012a96:	e0ab      	b.n	8012bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d009      	beq.n	8012ab2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa0:	88db      	ldrh	r3, [r3, #6]
 8012aa2:	b29a      	uxth	r2, r3
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	889b      	ldrh	r3, [r3, #4]
 8012aa8:	b29b      	uxth	r3, r3
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d001      	beq.n	8012ab2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d193      	bne.n	80129ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012ac2:	e000      	b.n	8012ac6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012ac4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d12d      	bne.n	8012b28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d01c      	beq.n	8012b0c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad4:	88db      	ldrh	r3, [r3, #6]
 8012ad6:	b29a      	uxth	r2, r3
 8012ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ada:	889b      	ldrh	r3, [r3, #4]
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d906      	bls.n	8012af0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012ae2:	4b45      	ldr	r3, [pc, #276]	; (8012bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012ae4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012ae8:	4944      	ldr	r1, [pc, #272]	; (8012bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012aea:	4845      	ldr	r0, [pc, #276]	; (8012c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012aec:	f000 fd04 	bl	80134f8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af2:	68ba      	ldr	r2, [r7, #8]
 8012af4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af8:	88db      	ldrh	r3, [r3, #6]
 8012afa:	b29a      	uxth	r2, r3
 8012afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012afe:	889b      	ldrh	r3, [r3, #4]
 8012b00:	b29b      	uxth	r3, r3
 8012b02:	429a      	cmp	r2, r3
 8012b04:	d010      	beq.n	8012b28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012b06:	2300      	movs	r3, #0
 8012b08:	623b      	str	r3, [r7, #32]
 8012b0a:	e00d      	b.n	8012b28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	685b      	ldr	r3, [r3, #4]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d006      	beq.n	8012b22 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012b14:	4b38      	ldr	r3, [pc, #224]	; (8012bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012b16:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012b1a:	493a      	ldr	r1, [pc, #232]	; (8012c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012b1c:	4838      	ldr	r0, [pc, #224]	; (8012c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012b1e:	f000 fceb 	bl	80134f8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	68ba      	ldr	r2, [r7, #8]
 8012b26:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d105      	bne.n	8012b3a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	7f9b      	ldrb	r3, [r3, #30]
 8012b32:	f003 0301 	and.w	r3, r3, #1
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d059      	beq.n	8012bee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012b3a:	6a3b      	ldr	r3, [r7, #32]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d04f      	beq.n	8012be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	685b      	ldr	r3, [r3, #4]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d006      	beq.n	8012b56 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	685b      	ldr	r3, [r3, #4]
 8012b4c:	685b      	ldr	r3, [r3, #4]
 8012b4e:	889b      	ldrh	r3, [r3, #4]
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d002      	beq.n	8012b5c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012b56:	2300      	movs	r3, #0
 8012b58:	623b      	str	r3, [r7, #32]
 8012b5a:	e041      	b.n	8012be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012b66:	e012      	b.n	8012b8e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6a:	685b      	ldr	r3, [r3, #4]
 8012b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b70:	88db      	ldrh	r3, [r3, #6]
 8012b72:	b29a      	uxth	r2, r3
 8012b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b76:	889b      	ldrh	r3, [r3, #4]
 8012b78:	b29b      	uxth	r3, r3
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d002      	beq.n	8012b84 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	623b      	str	r3, [r7, #32]
            break;
 8012b82:	e007      	b.n	8012b94 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b86:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d1e9      	bne.n	8012b68 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012b94:	6a3b      	ldr	r3, [r7, #32]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d022      	beq.n	8012be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	685b      	ldr	r3, [r3, #4]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d106      	bne.n	8012bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012ba2:	4b15      	ldr	r3, [pc, #84]	; (8012bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012ba4:	f240 12df 	movw	r2, #479	; 0x1df
 8012ba8:	4917      	ldr	r1, [pc, #92]	; (8012c08 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012baa:	4815      	ldr	r0, [pc, #84]	; (8012c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012bac:	f000 fca4 	bl	80134f8 <iprintf>
          LWIP_ASSERT("sanity check",
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	685b      	ldr	r3, [r3, #4]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d106      	bne.n	8012bca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012bbc:	4b0e      	ldr	r3, [pc, #56]	; (8012bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012bbe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012bc2:	4911      	ldr	r1, [pc, #68]	; (8012c08 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012bc4:	480e      	ldr	r0, [pc, #56]	; (8012c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012bc6:	f000 fc97 	bl	80134f8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d006      	beq.n	8012be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012bd2:	4b09      	ldr	r3, [pc, #36]	; (8012bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012bd4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012bd8:	490c      	ldr	r1, [pc, #48]	; (8012c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012bda:	4809      	ldr	r0, [pc, #36]	; (8012c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012bdc:	f000 fc8c 	bl	80134f8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012be0:	6a3b      	ldr	r3, [r7, #32]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	bf14      	ite	ne
 8012be6:	2301      	movne	r3, #1
 8012be8:	2300      	moveq	r3, #0
 8012bea:	b2db      	uxtb	r3, r3
 8012bec:	e000      	b.n	8012bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012bee:	2300      	movs	r3, #0
}
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	3730      	adds	r7, #48	; 0x30
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}
 8012bf8:	08017060 	.word	0x08017060
 8012bfc:	08017144 	.word	0x08017144
 8012c00:	080170a8 	.word	0x080170a8
 8012c04:	08017164 	.word	0x08017164
 8012c08:	0801719c 	.word	0x0801719c
 8012c0c:	080171ac 	.word	0x080171ac

08012c10 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b08e      	sub	sp, #56	; 0x38
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	f003 030f 	and.w	r3, r3, #15
 8012c26:	b2db      	uxtb	r3, r3
 8012c28:	009b      	lsls	r3, r3, #2
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	2b14      	cmp	r3, #20
 8012c2e:	f040 8171 	bne.w	8012f14 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c34:	88db      	ldrh	r3, [r3, #6]
 8012c36:	b29b      	uxth	r3, r3
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7f6 faa5 	bl	8009188 <lwip_htons>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c44:	b29b      	uxth	r3, r3
 8012c46:	00db      	lsls	r3, r3, #3
 8012c48:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c4c:	885b      	ldrh	r3, [r3, #2]
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7f6 fa99 	bl	8009188 <lwip_htons>
 8012c56:	4603      	mov	r3, r0
 8012c58:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	f003 030f 	and.w	r3, r3, #15
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	009b      	lsls	r3, r3, #2
 8012c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c72:	429a      	cmp	r2, r3
 8012c74:	f0c0 8150 	bcc.w	8012f18 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012c78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c80:	1ad3      	subs	r3, r2, r3
 8012c82:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f7f7 fdbb 	bl	800a800 <pbuf_clen>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012c8e:	4b8c      	ldr	r3, [pc, #560]	; (8012ec0 <ip4_reass+0x2b0>)
 8012c90:	881b      	ldrh	r3, [r3, #0]
 8012c92:	461a      	mov	r2, r3
 8012c94:	8c3b      	ldrh	r3, [r7, #32]
 8012c96:	4413      	add	r3, r2
 8012c98:	2b0a      	cmp	r3, #10
 8012c9a:	dd10      	ble.n	8012cbe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012c9c:	8c3b      	ldrh	r3, [r7, #32]
 8012c9e:	4619      	mov	r1, r3
 8012ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ca2:	f7ff fd81 	bl	80127a8 <ip_reass_remove_oldest_datagram>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	f000 8137 	beq.w	8012f1c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012cae:	4b84      	ldr	r3, [pc, #528]	; (8012ec0 <ip4_reass+0x2b0>)
 8012cb0:	881b      	ldrh	r3, [r3, #0]
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	8c3b      	ldrh	r3, [r7, #32]
 8012cb6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012cb8:	2b0a      	cmp	r3, #10
 8012cba:	f300 812f 	bgt.w	8012f1c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012cbe:	4b81      	ldr	r3, [pc, #516]	; (8012ec4 <ip4_reass+0x2b4>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8012cc4:	e015      	b.n	8012cf2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc8:	695a      	ldr	r2, [r3, #20]
 8012cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ccc:	68db      	ldr	r3, [r3, #12]
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	d10c      	bne.n	8012cec <ip4_reass+0xdc>
 8012cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd4:	699a      	ldr	r2, [r3, #24]
 8012cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd8:	691b      	ldr	r3, [r3, #16]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	d106      	bne.n	8012cec <ip4_reass+0xdc>
 8012cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce0:	899a      	ldrh	r2, [r3, #12]
 8012ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce4:	889b      	ldrh	r3, [r3, #4]
 8012ce6:	b29b      	uxth	r3, r3
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d006      	beq.n	8012cfa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8012cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d1e6      	bne.n	8012cc6 <ip4_reass+0xb6>
 8012cf8:	e000      	b.n	8012cfc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012cfa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d109      	bne.n	8012d16 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012d02:	8c3b      	ldrh	r3, [r7, #32]
 8012d04:	4619      	mov	r1, r3
 8012d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d08:	f7ff fdb0 	bl	801286c <ip_reass_enqueue_new_datagram>
 8012d0c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d11c      	bne.n	8012d4e <ip4_reass+0x13e>
      goto nullreturn;
 8012d14:	e105      	b.n	8012f22 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d18:	88db      	ldrh	r3, [r3, #6]
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7f6 fa33 	bl	8009188 <lwip_htons>
 8012d22:	4603      	mov	r3, r0
 8012d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d110      	bne.n	8012d4e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d2e:	89db      	ldrh	r3, [r3, #14]
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7f6 fa29 	bl	8009188 <lwip_htons>
 8012d36:	4603      	mov	r3, r0
 8012d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d006      	beq.n	8012d4e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d42:	3308      	adds	r3, #8
 8012d44:	2214      	movs	r2, #20
 8012d46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f000 fba5 	bl	8013498 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d50:	88db      	ldrh	r3, [r3, #6]
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	f003 0320 	and.w	r3, r3, #32
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	bf0c      	ite	eq
 8012d5c:	2301      	moveq	r3, #1
 8012d5e:	2300      	movne	r3, #0
 8012d60:	b2db      	uxtb	r3, r3
 8012d62:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012d64:	69fb      	ldr	r3, [r7, #28]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d00e      	beq.n	8012d88 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012d6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d6e:	4413      	add	r3, r2
 8012d70:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012d72:	8b7a      	ldrh	r2, [r7, #26]
 8012d74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012d76:	429a      	cmp	r2, r3
 8012d78:	f0c0 80a0 	bcc.w	8012ebc <ip4_reass+0x2ac>
 8012d7c:	8b7b      	ldrh	r3, [r7, #26]
 8012d7e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012d82:	4293      	cmp	r3, r2
 8012d84:	f200 809a 	bhi.w	8012ebc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012d88:	69fa      	ldr	r2, [r7, #28]
 8012d8a:	6879      	ldr	r1, [r7, #4]
 8012d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d8e:	f7ff fdd5 	bl	801293c <ip_reass_chain_frag_into_datagram_and_validate>
 8012d92:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d9a:	f000 809b 	beq.w	8012ed4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012d9e:	4b48      	ldr	r3, [pc, #288]	; (8012ec0 <ip4_reass+0x2b0>)
 8012da0:	881a      	ldrh	r2, [r3, #0]
 8012da2:	8c3b      	ldrh	r3, [r7, #32]
 8012da4:	4413      	add	r3, r2
 8012da6:	b29a      	uxth	r2, r3
 8012da8:	4b45      	ldr	r3, [pc, #276]	; (8012ec0 <ip4_reass+0x2b0>)
 8012daa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012dac:	69fb      	ldr	r3, [r7, #28]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d00d      	beq.n	8012dce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012db2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012db6:	4413      	add	r3, r2
 8012db8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dbc:	8a7a      	ldrh	r2, [r7, #18]
 8012dbe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc2:	7f9b      	ldrb	r3, [r3, #30]
 8012dc4:	f043 0301 	orr.w	r3, r3, #1
 8012dc8:	b2da      	uxtb	r2, r3
 8012dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dcc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	2b01      	cmp	r3, #1
 8012dd2:	d171      	bne.n	8012eb8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd6:	8b9b      	ldrh	r3, [r3, #28]
 8012dd8:	3314      	adds	r3, #20
 8012dda:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	685b      	ldr	r3, [r3, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de8:	685b      	ldr	r3, [r3, #4]
 8012dea:	685b      	ldr	r3, [r3, #4]
 8012dec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df0:	3308      	adds	r3, #8
 8012df2:	2214      	movs	r2, #20
 8012df4:	4619      	mov	r1, r3
 8012df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012df8:	f000 fb4e 	bl	8013498 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012dfc:	8a3b      	ldrh	r3, [r7, #16]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7f6 f9c2 	bl	8009188 <lwip_htons>
 8012e04:	4603      	mov	r3, r0
 8012e06:	461a      	mov	r2, r3
 8012e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e0a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e0e:	2200      	movs	r2, #0
 8012e10:	719a      	strb	r2, [r3, #6]
 8012e12:	2200      	movs	r2, #0
 8012e14:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e18:	2200      	movs	r2, #0
 8012e1a:	729a      	strb	r2, [r3, #10]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e22:	685b      	ldr	r3, [r3, #4]
 8012e24:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012e26:	e00d      	b.n	8012e44 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e2a:	685b      	ldr	r3, [r3, #4]
 8012e2c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012e2e:	2114      	movs	r1, #20
 8012e30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012e32:	f7f7 fbd7 	bl	800a5e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012e36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f7f7 fd1b 	bl	800a874 <pbuf_cat>
      r = iprh->next_pbuf;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d1ee      	bne.n	8012e28 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012e4a:	4b1e      	ldr	r3, [pc, #120]	; (8012ec4 <ip4_reass+0x2b4>)
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d102      	bne.n	8012e5a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012e54:	2300      	movs	r3, #0
 8012e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e58:	e010      	b.n	8012e7c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012e5a:	4b1a      	ldr	r3, [pc, #104]	; (8012ec4 <ip4_reass+0x2b4>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e60:	e007      	b.n	8012e72 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d006      	beq.n	8012e7a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d1f4      	bne.n	8012e62 <ip4_reass+0x252>
 8012e78:	e000      	b.n	8012e7c <ip4_reass+0x26c>
          break;
 8012e7a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012e7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e80:	f7ff fd2e 	bl	80128e0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f7f7 fcbb 	bl	800a800 <pbuf_clen>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012e8e:	4b0c      	ldr	r3, [pc, #48]	; (8012ec0 <ip4_reass+0x2b0>)
 8012e90:	881b      	ldrh	r3, [r3, #0]
 8012e92:	8c3a      	ldrh	r2, [r7, #32]
 8012e94:	429a      	cmp	r2, r3
 8012e96:	d906      	bls.n	8012ea6 <ip4_reass+0x296>
 8012e98:	4b0b      	ldr	r3, [pc, #44]	; (8012ec8 <ip4_reass+0x2b8>)
 8012e9a:	f240 229b 	movw	r2, #667	; 0x29b
 8012e9e:	490b      	ldr	r1, [pc, #44]	; (8012ecc <ip4_reass+0x2bc>)
 8012ea0:	480b      	ldr	r0, [pc, #44]	; (8012ed0 <ip4_reass+0x2c0>)
 8012ea2:	f000 fb29 	bl	80134f8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012ea6:	4b06      	ldr	r3, [pc, #24]	; (8012ec0 <ip4_reass+0x2b0>)
 8012ea8:	881a      	ldrh	r2, [r3, #0]
 8012eaa:	8c3b      	ldrh	r3, [r7, #32]
 8012eac:	1ad3      	subs	r3, r2, r3
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	4b03      	ldr	r3, [pc, #12]	; (8012ec0 <ip4_reass+0x2b0>)
 8012eb2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	e038      	b.n	8012f2a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012eb8:	2300      	movs	r3, #0
 8012eba:	e036      	b.n	8012f2a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012ebc:	bf00      	nop
 8012ebe:	e00a      	b.n	8012ed6 <ip4_reass+0x2c6>
 8012ec0:	20008f44 	.word	0x20008f44
 8012ec4:	20008f40 	.word	0x20008f40
 8012ec8:	08017060 	.word	0x08017060
 8012ecc:	080171d0 	.word	0x080171d0
 8012ed0:	080170a8 	.word	0x080170a8
    goto nullreturn_ipr;
 8012ed4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d106      	bne.n	8012eea <ip4_reass+0x2da>
 8012edc:	4b15      	ldr	r3, [pc, #84]	; (8012f34 <ip4_reass+0x324>)
 8012ede:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012ee2:	4915      	ldr	r1, [pc, #84]	; (8012f38 <ip4_reass+0x328>)
 8012ee4:	4815      	ldr	r0, [pc, #84]	; (8012f3c <ip4_reass+0x32c>)
 8012ee6:	f000 fb07 	bl	80134f8 <iprintf>
  if (ipr->p == NULL) {
 8012eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d116      	bne.n	8012f20 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012ef2:	4b13      	ldr	r3, [pc, #76]	; (8012f40 <ip4_reass+0x330>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d006      	beq.n	8012f0a <ip4_reass+0x2fa>
 8012efc:	4b0d      	ldr	r3, [pc, #52]	; (8012f34 <ip4_reass+0x324>)
 8012efe:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012f02:	4910      	ldr	r1, [pc, #64]	; (8012f44 <ip4_reass+0x334>)
 8012f04:	480d      	ldr	r0, [pc, #52]	; (8012f3c <ip4_reass+0x32c>)
 8012f06:	f000 faf7 	bl	80134f8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012f0a:	2100      	movs	r1, #0
 8012f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f0e:	f7ff fce7 	bl	80128e0 <ip_reass_dequeue_datagram>
 8012f12:	e006      	b.n	8012f22 <ip4_reass+0x312>
    goto nullreturn;
 8012f14:	bf00      	nop
 8012f16:	e004      	b.n	8012f22 <ip4_reass+0x312>
    goto nullreturn;
 8012f18:	bf00      	nop
 8012f1a:	e002      	b.n	8012f22 <ip4_reass+0x312>
      goto nullreturn;
 8012f1c:	bf00      	nop
 8012f1e:	e000      	b.n	8012f22 <ip4_reass+0x312>
  }

nullreturn:
 8012f20:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f7f7 fbe4 	bl	800a6f0 <pbuf_free>
  return NULL;
 8012f28:	2300      	movs	r3, #0
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3738      	adds	r7, #56	; 0x38
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}
 8012f32:	bf00      	nop
 8012f34:	08017060 	.word	0x08017060
 8012f38:	080171ec 	.word	0x080171ec
 8012f3c:	080170a8 	.word	0x080170a8
 8012f40:	20008f40 	.word	0x20008f40
 8012f44:	080171f8 	.word	0x080171f8

08012f48 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012f4c:	2005      	movs	r0, #5
 8012f4e:	f7f6 fd71 	bl	8009a34 <memp_malloc>
 8012f52:	4603      	mov	r3, r0
}
 8012f54:	4618      	mov	r0, r3
 8012f56:	bd80      	pop	{r7, pc}

08012f58 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d106      	bne.n	8012f74 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012f66:	4b07      	ldr	r3, [pc, #28]	; (8012f84 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012f68:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012f6c:	4906      	ldr	r1, [pc, #24]	; (8012f88 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012f6e:	4807      	ldr	r0, [pc, #28]	; (8012f8c <ip_frag_free_pbuf_custom_ref+0x34>)
 8012f70:	f000 fac2 	bl	80134f8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012f74:	6879      	ldr	r1, [r7, #4]
 8012f76:	2005      	movs	r0, #5
 8012f78:	f7f6 fda8 	bl	8009acc <memp_free>
}
 8012f7c:	bf00      	nop
 8012f7e:	3708      	adds	r7, #8
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}
 8012f84:	08017060 	.word	0x08017060
 8012f88:	08017218 	.word	0x08017218
 8012f8c:	080170a8 	.word	0x080170a8

08012f90 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b084      	sub	sp, #16
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d106      	bne.n	8012fb0 <ipfrag_free_pbuf_custom+0x20>
 8012fa2:	4b11      	ldr	r3, [pc, #68]	; (8012fe8 <ipfrag_free_pbuf_custom+0x58>)
 8012fa4:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012fa8:	4910      	ldr	r1, [pc, #64]	; (8012fec <ipfrag_free_pbuf_custom+0x5c>)
 8012faa:	4811      	ldr	r0, [pc, #68]	; (8012ff0 <ipfrag_free_pbuf_custom+0x60>)
 8012fac:	f000 faa4 	bl	80134f8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012fb0:	68fa      	ldr	r2, [r7, #12]
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d006      	beq.n	8012fc6 <ipfrag_free_pbuf_custom+0x36>
 8012fb8:	4b0b      	ldr	r3, [pc, #44]	; (8012fe8 <ipfrag_free_pbuf_custom+0x58>)
 8012fba:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012fbe:	490d      	ldr	r1, [pc, #52]	; (8012ff4 <ipfrag_free_pbuf_custom+0x64>)
 8012fc0:	480b      	ldr	r0, [pc, #44]	; (8012ff0 <ipfrag_free_pbuf_custom+0x60>)
 8012fc2:	f000 fa99 	bl	80134f8 <iprintf>
  if (pcr->original != NULL) {
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	695b      	ldr	r3, [r3, #20]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d004      	beq.n	8012fd8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	695b      	ldr	r3, [r3, #20]
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7f7 fb8c 	bl	800a6f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012fd8:	68f8      	ldr	r0, [r7, #12]
 8012fda:	f7ff ffbd 	bl	8012f58 <ip_frag_free_pbuf_custom_ref>
}
 8012fde:	bf00      	nop
 8012fe0:	3710      	adds	r7, #16
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	08017060 	.word	0x08017060
 8012fec:	08017224 	.word	0x08017224
 8012ff0:	080170a8 	.word	0x080170a8
 8012ff4:	08017230 	.word	0x08017230

08012ff8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b094      	sub	sp, #80	; 0x50
 8012ffc:	af02      	add	r7, sp, #8
 8012ffe:	60f8      	str	r0, [r7, #12]
 8013000:	60b9      	str	r1, [r7, #8]
 8013002:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013004:	2300      	movs	r3, #0
 8013006:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801300e:	3b14      	subs	r3, #20
 8013010:	2b00      	cmp	r3, #0
 8013012:	da00      	bge.n	8013016 <ip4_frag+0x1e>
 8013014:	3307      	adds	r3, #7
 8013016:	10db      	asrs	r3, r3, #3
 8013018:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801301a:	2314      	movs	r3, #20
 801301c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	685b      	ldr	r3, [r3, #4]
 8013022:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013026:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	f003 030f 	and.w	r3, r3, #15
 8013030:	b2db      	uxtb	r3, r3
 8013032:	009b      	lsls	r3, r3, #2
 8013034:	b2db      	uxtb	r3, r3
 8013036:	2b14      	cmp	r3, #20
 8013038:	d002      	beq.n	8013040 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801303a:	f06f 0305 	mvn.w	r3, #5
 801303e:	e110      	b.n	8013262 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	895b      	ldrh	r3, [r3, #10]
 8013044:	2b13      	cmp	r3, #19
 8013046:	d809      	bhi.n	801305c <ip4_frag+0x64>
 8013048:	4b88      	ldr	r3, [pc, #544]	; (801326c <ip4_frag+0x274>)
 801304a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801304e:	4988      	ldr	r1, [pc, #544]	; (8013270 <ip4_frag+0x278>)
 8013050:	4888      	ldr	r0, [pc, #544]	; (8013274 <ip4_frag+0x27c>)
 8013052:	f000 fa51 	bl	80134f8 <iprintf>
 8013056:	f06f 0305 	mvn.w	r3, #5
 801305a:	e102      	b.n	8013262 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801305e:	88db      	ldrh	r3, [r3, #6]
 8013060:	b29b      	uxth	r3, r3
 8013062:	4618      	mov	r0, r3
 8013064:	f7f6 f890 	bl	8009188 <lwip_htons>
 8013068:	4603      	mov	r3, r0
 801306a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801306c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801306e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013072:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013076:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801307c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	891b      	ldrh	r3, [r3, #8]
 8013082:	3b14      	subs	r3, #20
 8013084:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013088:	e0e1      	b.n	801324e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801308a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801308c:	00db      	lsls	r3, r3, #3
 801308e:	b29b      	uxth	r3, r3
 8013090:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013094:	4293      	cmp	r3, r2
 8013096:	bf28      	it	cs
 8013098:	4613      	movcs	r3, r2
 801309a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801309c:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130a0:	2114      	movs	r1, #20
 80130a2:	200e      	movs	r0, #14
 80130a4:	f7f7 f840 	bl	800a128 <pbuf_alloc>
 80130a8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80130aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	f000 80d5 	beq.w	801325c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80130b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b4:	895b      	ldrh	r3, [r3, #10]
 80130b6:	2b13      	cmp	r3, #19
 80130b8:	d806      	bhi.n	80130c8 <ip4_frag+0xd0>
 80130ba:	4b6c      	ldr	r3, [pc, #432]	; (801326c <ip4_frag+0x274>)
 80130bc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80130c0:	496d      	ldr	r1, [pc, #436]	; (8013278 <ip4_frag+0x280>)
 80130c2:	486c      	ldr	r0, [pc, #432]	; (8013274 <ip4_frag+0x27c>)
 80130c4:	f000 fa18 	bl	80134f8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80130c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ca:	685b      	ldr	r3, [r3, #4]
 80130cc:	2214      	movs	r2, #20
 80130ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80130d0:	4618      	mov	r0, r3
 80130d2:	f000 f9e1 	bl	8013498 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80130d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d8:	685b      	ldr	r3, [r3, #4]
 80130da:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80130dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80130de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80130e2:	e064      	b.n	80131ae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	895a      	ldrh	r2, [r3, #10]
 80130e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80130ea:	1ad3      	subs	r3, r2, r3
 80130ec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	895b      	ldrh	r3, [r3, #10]
 80130f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80130f4:	429a      	cmp	r2, r3
 80130f6:	d906      	bls.n	8013106 <ip4_frag+0x10e>
 80130f8:	4b5c      	ldr	r3, [pc, #368]	; (801326c <ip4_frag+0x274>)
 80130fa:	f240 322d 	movw	r2, #813	; 0x32d
 80130fe:	495f      	ldr	r1, [pc, #380]	; (801327c <ip4_frag+0x284>)
 8013100:	485c      	ldr	r0, [pc, #368]	; (8013274 <ip4_frag+0x27c>)
 8013102:	f000 f9f9 	bl	80134f8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013106:	8bfa      	ldrh	r2, [r7, #30]
 8013108:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801310c:	4293      	cmp	r3, r2
 801310e:	bf28      	it	cs
 8013110:	4613      	movcs	r3, r2
 8013112:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013116:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801311a:	2b00      	cmp	r3, #0
 801311c:	d105      	bne.n	801312a <ip4_frag+0x132>
        poff = 0;
 801311e:	2300      	movs	r3, #0
 8013120:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	60fb      	str	r3, [r7, #12]
        continue;
 8013128:	e041      	b.n	80131ae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801312a:	f7ff ff0d 	bl	8012f48 <ip_frag_alloc_pbuf_custom_ref>
 801312e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013130:	69bb      	ldr	r3, [r7, #24]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d103      	bne.n	801313e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013138:	f7f7 fada 	bl	800a6f0 <pbuf_free>
        goto memerr;
 801313c:	e08f      	b.n	801325e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801313e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013144:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013146:	4413      	add	r3, r2
 8013148:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801314c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013150:	9201      	str	r2, [sp, #4]
 8013152:	9300      	str	r3, [sp, #0]
 8013154:	4603      	mov	r3, r0
 8013156:	2241      	movs	r2, #65	; 0x41
 8013158:	2000      	movs	r0, #0
 801315a:	f7f7 f90f 	bl	800a37c <pbuf_alloced_custom>
 801315e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d106      	bne.n	8013174 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013166:	69b8      	ldr	r0, [r7, #24]
 8013168:	f7ff fef6 	bl	8012f58 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801316c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801316e:	f7f7 fabf 	bl	800a6f0 <pbuf_free>
        goto memerr;
 8013172:	e074      	b.n	801325e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013174:	68f8      	ldr	r0, [r7, #12]
 8013176:	f7f7 fb5b 	bl	800a830 <pbuf_ref>
      pcr->original = p;
 801317a:	69bb      	ldr	r3, [r7, #24]
 801317c:	68fa      	ldr	r2, [r7, #12]
 801317e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013180:	69bb      	ldr	r3, [r7, #24]
 8013182:	4a3f      	ldr	r2, [pc, #252]	; (8013280 <ip4_frag+0x288>)
 8013184:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013186:	6979      	ldr	r1, [r7, #20]
 8013188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801318a:	f7f7 fb73 	bl	800a874 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801318e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013192:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013196:	1ad3      	subs	r3, r2, r3
 8013198:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801319c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d004      	beq.n	80131ae <ip4_frag+0x1b6>
        poff = 0;
 80131a4:	2300      	movs	r3, #0
 80131a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80131ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d196      	bne.n	80130e4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80131b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80131b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80131bc:	4413      	add	r3, r2
 80131be:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80131c4:	f1a3 0213 	sub.w	r2, r3, #19
 80131c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80131cc:	429a      	cmp	r2, r3
 80131ce:	bfcc      	ite	gt
 80131d0:	2301      	movgt	r3, #1
 80131d2:	2300      	movle	r3, #0
 80131d4:	b2db      	uxtb	r3, r3
 80131d6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80131d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80131dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80131e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80131e2:	6a3b      	ldr	r3, [r7, #32]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d002      	beq.n	80131ee <ip4_frag+0x1f6>
 80131e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d003      	beq.n	80131f6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80131ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80131f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80131f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80131f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7f5 ffc5 	bl	8009188 <lwip_htons>
 80131fe:	4603      	mov	r3, r0
 8013200:	461a      	mov	r2, r3
 8013202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013204:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013206:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013208:	3314      	adds	r3, #20
 801320a:	b29b      	uxth	r3, r3
 801320c:	4618      	mov	r0, r3
 801320e:	f7f5 ffbb 	bl	8009188 <lwip_htons>
 8013212:	4603      	mov	r3, r0
 8013214:	461a      	mov	r2, r3
 8013216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013218:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801321c:	2200      	movs	r2, #0
 801321e:	729a      	strb	r2, [r3, #10]
 8013220:	2200      	movs	r2, #0
 8013222:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	695b      	ldr	r3, [r3, #20]
 8013228:	687a      	ldr	r2, [r7, #4]
 801322a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801322c:	68b8      	ldr	r0, [r7, #8]
 801322e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013232:	f7f7 fa5d 	bl	800a6f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013236:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801323a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801323c:	1ad3      	subs	r3, r2, r3
 801323e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013242:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013246:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013248:	4413      	add	r3, r2
 801324a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801324e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013252:	2b00      	cmp	r3, #0
 8013254:	f47f af19 	bne.w	801308a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013258:	2300      	movs	r3, #0
 801325a:	e002      	b.n	8013262 <ip4_frag+0x26a>
      goto memerr;
 801325c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801325e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013262:	4618      	mov	r0, r3
 8013264:	3748      	adds	r7, #72	; 0x48
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
 801326a:	bf00      	nop
 801326c:	08017060 	.word	0x08017060
 8013270:	0801723c 	.word	0x0801723c
 8013274:	080170a8 	.word	0x080170a8
 8013278:	08017258 	.word	0x08017258
 801327c:	08017278 	.word	0x08017278
 8013280:	08012f91 	.word	0x08012f91

08013284 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b086      	sub	sp, #24
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
 801328c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801328e:	230e      	movs	r3, #14
 8013290:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	895b      	ldrh	r3, [r3, #10]
 8013296:	2b0e      	cmp	r3, #14
 8013298:	d96e      	bls.n	8013378 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	7bdb      	ldrb	r3, [r3, #15]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d106      	bne.n	80132b0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80132a8:	3301      	adds	r3, #1
 80132aa:	b2da      	uxtb	r2, r3
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	685b      	ldr	r3, [r3, #4]
 80132b4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	7b1a      	ldrb	r2, [r3, #12]
 80132ba:	7b5b      	ldrb	r3, [r3, #13]
 80132bc:	021b      	lsls	r3, r3, #8
 80132be:	4313      	orrs	r3, r2
 80132c0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	f003 0301 	and.w	r3, r3, #1
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d023      	beq.n	8013316 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80132ce:	693b      	ldr	r3, [r7, #16]
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	2b01      	cmp	r3, #1
 80132d4:	d10f      	bne.n	80132f6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	785b      	ldrb	r3, [r3, #1]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d11b      	bne.n	8013316 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80132de:	693b      	ldr	r3, [r7, #16]
 80132e0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80132e2:	2b5e      	cmp	r3, #94	; 0x5e
 80132e4:	d117      	bne.n	8013316 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	7b5b      	ldrb	r3, [r3, #13]
 80132ea:	f043 0310 	orr.w	r3, r3, #16
 80132ee:	b2da      	uxtb	r2, r3
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	735a      	strb	r2, [r3, #13]
 80132f4:	e00f      	b.n	8013316 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80132f6:	693b      	ldr	r3, [r7, #16]
 80132f8:	2206      	movs	r2, #6
 80132fa:	4928      	ldr	r1, [pc, #160]	; (801339c <ethernet_input+0x118>)
 80132fc:	4618      	mov	r0, r3
 80132fe:	f000 f8bb 	bl	8013478 <memcmp>
 8013302:	4603      	mov	r3, r0
 8013304:	2b00      	cmp	r3, #0
 8013306:	d106      	bne.n	8013316 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	7b5b      	ldrb	r3, [r3, #13]
 801330c:	f043 0308 	orr.w	r3, r3, #8
 8013310:	b2da      	uxtb	r2, r3
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013316:	89fb      	ldrh	r3, [r7, #14]
 8013318:	2b08      	cmp	r3, #8
 801331a:	d003      	beq.n	8013324 <ethernet_input+0xa0>
 801331c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013320:	d014      	beq.n	801334c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013322:	e032      	b.n	801338a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801332a:	f003 0308 	and.w	r3, r3, #8
 801332e:	2b00      	cmp	r3, #0
 8013330:	d024      	beq.n	801337c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013332:	8afb      	ldrh	r3, [r7, #22]
 8013334:	4619      	mov	r1, r3
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f7f7 f954 	bl	800a5e4 <pbuf_remove_header>
 801333c:	4603      	mov	r3, r0
 801333e:	2b00      	cmp	r3, #0
 8013340:	d11e      	bne.n	8013380 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013342:	6839      	ldr	r1, [r7, #0]
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7fe fe91 	bl	801206c <ip4_input>
      break;
 801334a:	e013      	b.n	8013374 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013352:	f003 0308 	and.w	r3, r3, #8
 8013356:	2b00      	cmp	r3, #0
 8013358:	d014      	beq.n	8013384 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801335a:	8afb      	ldrh	r3, [r7, #22]
 801335c:	4619      	mov	r1, r3
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f7f7 f940 	bl	800a5e4 <pbuf_remove_header>
 8013364:	4603      	mov	r3, r0
 8013366:	2b00      	cmp	r3, #0
 8013368:	d10e      	bne.n	8013388 <ethernet_input+0x104>
        etharp_input(p, netif);
 801336a:	6839      	ldr	r1, [r7, #0]
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f7fe f831 	bl	80113d4 <etharp_input>
      break;
 8013372:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013374:	2300      	movs	r3, #0
 8013376:	e00c      	b.n	8013392 <ethernet_input+0x10e>
    goto free_and_return;
 8013378:	bf00      	nop
 801337a:	e006      	b.n	801338a <ethernet_input+0x106>
        goto free_and_return;
 801337c:	bf00      	nop
 801337e:	e004      	b.n	801338a <ethernet_input+0x106>
        goto free_and_return;
 8013380:	bf00      	nop
 8013382:	e002      	b.n	801338a <ethernet_input+0x106>
        goto free_and_return;
 8013384:	bf00      	nop
 8013386:	e000      	b.n	801338a <ethernet_input+0x106>
        goto free_and_return;
 8013388:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801338a:	6878      	ldr	r0, [r7, #4]
 801338c:	f7f7 f9b0 	bl	800a6f0 <pbuf_free>
  return ERR_OK;
 8013390:	2300      	movs	r3, #0
}
 8013392:	4618      	mov	r0, r3
 8013394:	3718      	adds	r7, #24
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
 801339a:	bf00      	nop
 801339c:	08017410 	.word	0x08017410

080133a0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b086      	sub	sp, #24
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	60f8      	str	r0, [r7, #12]
 80133a8:	60b9      	str	r1, [r7, #8]
 80133aa:	607a      	str	r2, [r7, #4]
 80133ac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80133ae:	8c3b      	ldrh	r3, [r7, #32]
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7f5 fee9 	bl	8009188 <lwip_htons>
 80133b6:	4603      	mov	r3, r0
 80133b8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80133ba:	210e      	movs	r1, #14
 80133bc:	68b8      	ldr	r0, [r7, #8]
 80133be:	f7f7 f901 	bl	800a5c4 <pbuf_add_header>
 80133c2:	4603      	mov	r3, r0
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d125      	bne.n	8013414 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	8afa      	ldrh	r2, [r7, #22]
 80133d2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	2206      	movs	r2, #6
 80133d8:	6839      	ldr	r1, [r7, #0]
 80133da:	4618      	mov	r0, r3
 80133dc:	f000 f85c 	bl	8013498 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	3306      	adds	r3, #6
 80133e4:	2206      	movs	r2, #6
 80133e6:	6879      	ldr	r1, [r7, #4]
 80133e8:	4618      	mov	r0, r3
 80133ea:	f000 f855 	bl	8013498 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80133f4:	2b06      	cmp	r3, #6
 80133f6:	d006      	beq.n	8013406 <ethernet_output+0x66>
 80133f8:	4b0a      	ldr	r3, [pc, #40]	; (8013424 <ethernet_output+0x84>)
 80133fa:	f44f 7299 	mov.w	r2, #306	; 0x132
 80133fe:	490a      	ldr	r1, [pc, #40]	; (8013428 <ethernet_output+0x88>)
 8013400:	480a      	ldr	r0, [pc, #40]	; (801342c <ethernet_output+0x8c>)
 8013402:	f000 f879 	bl	80134f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	699b      	ldr	r3, [r3, #24]
 801340a:	68b9      	ldr	r1, [r7, #8]
 801340c:	68f8      	ldr	r0, [r7, #12]
 801340e:	4798      	blx	r3
 8013410:	4603      	mov	r3, r0
 8013412:	e002      	b.n	801341a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013414:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013416:	f06f 0301 	mvn.w	r3, #1
}
 801341a:	4618      	mov	r0, r3
 801341c:	3718      	adds	r7, #24
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	08017288 	.word	0x08017288
 8013428:	080172c0 	.word	0x080172c0
 801342c:	080172f4 	.word	0x080172f4

08013430 <__libc_init_array>:
 8013430:	b570      	push	{r4, r5, r6, lr}
 8013432:	4d0d      	ldr	r5, [pc, #52]	; (8013468 <__libc_init_array+0x38>)
 8013434:	4c0d      	ldr	r4, [pc, #52]	; (801346c <__libc_init_array+0x3c>)
 8013436:	1b64      	subs	r4, r4, r5
 8013438:	10a4      	asrs	r4, r4, #2
 801343a:	2600      	movs	r6, #0
 801343c:	42a6      	cmp	r6, r4
 801343e:	d109      	bne.n	8013454 <__libc_init_array+0x24>
 8013440:	4d0b      	ldr	r5, [pc, #44]	; (8013470 <__libc_init_array+0x40>)
 8013442:	4c0c      	ldr	r4, [pc, #48]	; (8013474 <__libc_init_array+0x44>)
 8013444:	f001 fa5c 	bl	8014900 <_init>
 8013448:	1b64      	subs	r4, r4, r5
 801344a:	10a4      	asrs	r4, r4, #2
 801344c:	2600      	movs	r6, #0
 801344e:	42a6      	cmp	r6, r4
 8013450:	d105      	bne.n	801345e <__libc_init_array+0x2e>
 8013452:	bd70      	pop	{r4, r5, r6, pc}
 8013454:	f855 3b04 	ldr.w	r3, [r5], #4
 8013458:	4798      	blx	r3
 801345a:	3601      	adds	r6, #1
 801345c:	e7ee      	b.n	801343c <__libc_init_array+0xc>
 801345e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013462:	4798      	blx	r3
 8013464:	3601      	adds	r6, #1
 8013466:	e7f2      	b.n	801344e <__libc_init_array+0x1e>
 8013468:	08017570 	.word	0x08017570
 801346c:	08017570 	.word	0x08017570
 8013470:	08017570 	.word	0x08017570
 8013474:	08017574 	.word	0x08017574

08013478 <memcmp>:
 8013478:	b510      	push	{r4, lr}
 801347a:	3901      	subs	r1, #1
 801347c:	4402      	add	r2, r0
 801347e:	4290      	cmp	r0, r2
 8013480:	d101      	bne.n	8013486 <memcmp+0xe>
 8013482:	2000      	movs	r0, #0
 8013484:	e005      	b.n	8013492 <memcmp+0x1a>
 8013486:	7803      	ldrb	r3, [r0, #0]
 8013488:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801348c:	42a3      	cmp	r3, r4
 801348e:	d001      	beq.n	8013494 <memcmp+0x1c>
 8013490:	1b18      	subs	r0, r3, r4
 8013492:	bd10      	pop	{r4, pc}
 8013494:	3001      	adds	r0, #1
 8013496:	e7f2      	b.n	801347e <memcmp+0x6>

08013498 <memcpy>:
 8013498:	440a      	add	r2, r1
 801349a:	4291      	cmp	r1, r2
 801349c:	f100 33ff 	add.w	r3, r0, #4294967295
 80134a0:	d100      	bne.n	80134a4 <memcpy+0xc>
 80134a2:	4770      	bx	lr
 80134a4:	b510      	push	{r4, lr}
 80134a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134ae:	4291      	cmp	r1, r2
 80134b0:	d1f9      	bne.n	80134a6 <memcpy+0xe>
 80134b2:	bd10      	pop	{r4, pc}

080134b4 <memmove>:
 80134b4:	4288      	cmp	r0, r1
 80134b6:	b510      	push	{r4, lr}
 80134b8:	eb01 0402 	add.w	r4, r1, r2
 80134bc:	d902      	bls.n	80134c4 <memmove+0x10>
 80134be:	4284      	cmp	r4, r0
 80134c0:	4623      	mov	r3, r4
 80134c2:	d807      	bhi.n	80134d4 <memmove+0x20>
 80134c4:	1e43      	subs	r3, r0, #1
 80134c6:	42a1      	cmp	r1, r4
 80134c8:	d008      	beq.n	80134dc <memmove+0x28>
 80134ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80134d2:	e7f8      	b.n	80134c6 <memmove+0x12>
 80134d4:	4402      	add	r2, r0
 80134d6:	4601      	mov	r1, r0
 80134d8:	428a      	cmp	r2, r1
 80134da:	d100      	bne.n	80134de <memmove+0x2a>
 80134dc:	bd10      	pop	{r4, pc}
 80134de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80134e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80134e6:	e7f7      	b.n	80134d8 <memmove+0x24>

080134e8 <memset>:
 80134e8:	4402      	add	r2, r0
 80134ea:	4603      	mov	r3, r0
 80134ec:	4293      	cmp	r3, r2
 80134ee:	d100      	bne.n	80134f2 <memset+0xa>
 80134f0:	4770      	bx	lr
 80134f2:	f803 1b01 	strb.w	r1, [r3], #1
 80134f6:	e7f9      	b.n	80134ec <memset+0x4>

080134f8 <iprintf>:
 80134f8:	b40f      	push	{r0, r1, r2, r3}
 80134fa:	4b0a      	ldr	r3, [pc, #40]	; (8013524 <iprintf+0x2c>)
 80134fc:	b513      	push	{r0, r1, r4, lr}
 80134fe:	681c      	ldr	r4, [r3, #0]
 8013500:	b124      	cbz	r4, 801350c <iprintf+0x14>
 8013502:	69a3      	ldr	r3, [r4, #24]
 8013504:	b913      	cbnz	r3, 801350c <iprintf+0x14>
 8013506:	4620      	mov	r0, r4
 8013508:	f000 f8e2 	bl	80136d0 <__sinit>
 801350c:	ab05      	add	r3, sp, #20
 801350e:	9a04      	ldr	r2, [sp, #16]
 8013510:	68a1      	ldr	r1, [r4, #8]
 8013512:	9301      	str	r3, [sp, #4]
 8013514:	4620      	mov	r0, r4
 8013516:	f000 fbfb 	bl	8013d10 <_vfiprintf_r>
 801351a:	b002      	add	sp, #8
 801351c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013520:	b004      	add	sp, #16
 8013522:	4770      	bx	lr
 8013524:	20000028 	.word	0x20000028

08013528 <rand>:
 8013528:	4b16      	ldr	r3, [pc, #88]	; (8013584 <rand+0x5c>)
 801352a:	b510      	push	{r4, lr}
 801352c:	681c      	ldr	r4, [r3, #0]
 801352e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013530:	b9b3      	cbnz	r3, 8013560 <rand+0x38>
 8013532:	2018      	movs	r0, #24
 8013534:	f000 f97e 	bl	8013834 <malloc>
 8013538:	63a0      	str	r0, [r4, #56]	; 0x38
 801353a:	b928      	cbnz	r0, 8013548 <rand+0x20>
 801353c:	4602      	mov	r2, r0
 801353e:	4b12      	ldr	r3, [pc, #72]	; (8013588 <rand+0x60>)
 8013540:	4812      	ldr	r0, [pc, #72]	; (801358c <rand+0x64>)
 8013542:	214e      	movs	r1, #78	; 0x4e
 8013544:	f000 f84e 	bl	80135e4 <__assert_func>
 8013548:	4a11      	ldr	r2, [pc, #68]	; (8013590 <rand+0x68>)
 801354a:	4b12      	ldr	r3, [pc, #72]	; (8013594 <rand+0x6c>)
 801354c:	e9c0 2300 	strd	r2, r3, [r0]
 8013550:	4b11      	ldr	r3, [pc, #68]	; (8013598 <rand+0x70>)
 8013552:	6083      	str	r3, [r0, #8]
 8013554:	230b      	movs	r3, #11
 8013556:	8183      	strh	r3, [r0, #12]
 8013558:	2201      	movs	r2, #1
 801355a:	2300      	movs	r3, #0
 801355c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013560:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013562:	4a0e      	ldr	r2, [pc, #56]	; (801359c <rand+0x74>)
 8013564:	6920      	ldr	r0, [r4, #16]
 8013566:	6963      	ldr	r3, [r4, #20]
 8013568:	490d      	ldr	r1, [pc, #52]	; (80135a0 <rand+0x78>)
 801356a:	4342      	muls	r2, r0
 801356c:	fb01 2203 	mla	r2, r1, r3, r2
 8013570:	fba0 0101 	umull	r0, r1, r0, r1
 8013574:	1c43      	adds	r3, r0, #1
 8013576:	eb42 0001 	adc.w	r0, r2, r1
 801357a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801357e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013582:	bd10      	pop	{r4, pc}
 8013584:	20000028 	.word	0x20000028
 8013588:	08017424 	.word	0x08017424
 801358c:	0801743b 	.word	0x0801743b
 8013590:	abcd330e 	.word	0xabcd330e
 8013594:	e66d1234 	.word	0xe66d1234
 8013598:	0005deec 	.word	0x0005deec
 801359c:	5851f42d 	.word	0x5851f42d
 80135a0:	4c957f2d 	.word	0x4c957f2d

080135a4 <siprintf>:
 80135a4:	b40e      	push	{r1, r2, r3}
 80135a6:	b500      	push	{lr}
 80135a8:	b09c      	sub	sp, #112	; 0x70
 80135aa:	ab1d      	add	r3, sp, #116	; 0x74
 80135ac:	9002      	str	r0, [sp, #8]
 80135ae:	9006      	str	r0, [sp, #24]
 80135b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80135b4:	4809      	ldr	r0, [pc, #36]	; (80135dc <siprintf+0x38>)
 80135b6:	9107      	str	r1, [sp, #28]
 80135b8:	9104      	str	r1, [sp, #16]
 80135ba:	4909      	ldr	r1, [pc, #36]	; (80135e0 <siprintf+0x3c>)
 80135bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80135c0:	9105      	str	r1, [sp, #20]
 80135c2:	6800      	ldr	r0, [r0, #0]
 80135c4:	9301      	str	r3, [sp, #4]
 80135c6:	a902      	add	r1, sp, #8
 80135c8:	f000 fa78 	bl	8013abc <_svfiprintf_r>
 80135cc:	9b02      	ldr	r3, [sp, #8]
 80135ce:	2200      	movs	r2, #0
 80135d0:	701a      	strb	r2, [r3, #0]
 80135d2:	b01c      	add	sp, #112	; 0x70
 80135d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80135d8:	b003      	add	sp, #12
 80135da:	4770      	bx	lr
 80135dc:	20000028 	.word	0x20000028
 80135e0:	ffff0208 	.word	0xffff0208

080135e4 <__assert_func>:
 80135e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80135e6:	4614      	mov	r4, r2
 80135e8:	461a      	mov	r2, r3
 80135ea:	4b09      	ldr	r3, [pc, #36]	; (8013610 <__assert_func+0x2c>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	4605      	mov	r5, r0
 80135f0:	68d8      	ldr	r0, [r3, #12]
 80135f2:	b14c      	cbz	r4, 8013608 <__assert_func+0x24>
 80135f4:	4b07      	ldr	r3, [pc, #28]	; (8013614 <__assert_func+0x30>)
 80135f6:	9100      	str	r1, [sp, #0]
 80135f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80135fc:	4906      	ldr	r1, [pc, #24]	; (8013618 <__assert_func+0x34>)
 80135fe:	462b      	mov	r3, r5
 8013600:	f000 f8e4 	bl	80137cc <fiprintf>
 8013604:	f000 ff6e 	bl	80144e4 <abort>
 8013608:	4b04      	ldr	r3, [pc, #16]	; (801361c <__assert_func+0x38>)
 801360a:	461c      	mov	r4, r3
 801360c:	e7f3      	b.n	80135f6 <__assert_func+0x12>
 801360e:	bf00      	nop
 8013610:	20000028 	.word	0x20000028
 8013614:	08017496 	.word	0x08017496
 8013618:	080174a3 	.word	0x080174a3
 801361c:	080174d1 	.word	0x080174d1

08013620 <std>:
 8013620:	2300      	movs	r3, #0
 8013622:	b510      	push	{r4, lr}
 8013624:	4604      	mov	r4, r0
 8013626:	e9c0 3300 	strd	r3, r3, [r0]
 801362a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801362e:	6083      	str	r3, [r0, #8]
 8013630:	8181      	strh	r1, [r0, #12]
 8013632:	6643      	str	r3, [r0, #100]	; 0x64
 8013634:	81c2      	strh	r2, [r0, #14]
 8013636:	6183      	str	r3, [r0, #24]
 8013638:	4619      	mov	r1, r3
 801363a:	2208      	movs	r2, #8
 801363c:	305c      	adds	r0, #92	; 0x5c
 801363e:	f7ff ff53 	bl	80134e8 <memset>
 8013642:	4b05      	ldr	r3, [pc, #20]	; (8013658 <std+0x38>)
 8013644:	6263      	str	r3, [r4, #36]	; 0x24
 8013646:	4b05      	ldr	r3, [pc, #20]	; (801365c <std+0x3c>)
 8013648:	62a3      	str	r3, [r4, #40]	; 0x28
 801364a:	4b05      	ldr	r3, [pc, #20]	; (8013660 <std+0x40>)
 801364c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801364e:	4b05      	ldr	r3, [pc, #20]	; (8013664 <std+0x44>)
 8013650:	6224      	str	r4, [r4, #32]
 8013652:	6323      	str	r3, [r4, #48]	; 0x30
 8013654:	bd10      	pop	{r4, pc}
 8013656:	bf00      	nop
 8013658:	080142b9 	.word	0x080142b9
 801365c:	080142db 	.word	0x080142db
 8013660:	08014313 	.word	0x08014313
 8013664:	08014337 	.word	0x08014337

08013668 <_cleanup_r>:
 8013668:	4901      	ldr	r1, [pc, #4]	; (8013670 <_cleanup_r+0x8>)
 801366a:	f000 b8c1 	b.w	80137f0 <_fwalk_reent>
 801366e:	bf00      	nop
 8013670:	08014621 	.word	0x08014621

08013674 <__sfmoreglue>:
 8013674:	b570      	push	{r4, r5, r6, lr}
 8013676:	2268      	movs	r2, #104	; 0x68
 8013678:	1e4d      	subs	r5, r1, #1
 801367a:	4355      	muls	r5, r2
 801367c:	460e      	mov	r6, r1
 801367e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013682:	f000 f94b 	bl	801391c <_malloc_r>
 8013686:	4604      	mov	r4, r0
 8013688:	b140      	cbz	r0, 801369c <__sfmoreglue+0x28>
 801368a:	2100      	movs	r1, #0
 801368c:	e9c0 1600 	strd	r1, r6, [r0]
 8013690:	300c      	adds	r0, #12
 8013692:	60a0      	str	r0, [r4, #8]
 8013694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013698:	f7ff ff26 	bl	80134e8 <memset>
 801369c:	4620      	mov	r0, r4
 801369e:	bd70      	pop	{r4, r5, r6, pc}

080136a0 <__sfp_lock_acquire>:
 80136a0:	4801      	ldr	r0, [pc, #4]	; (80136a8 <__sfp_lock_acquire+0x8>)
 80136a2:	f000 b8c5 	b.w	8013830 <__retarget_lock_acquire_recursive>
 80136a6:	bf00      	nop
 80136a8:	20008f4d 	.word	0x20008f4d

080136ac <__sfp_lock_release>:
 80136ac:	4801      	ldr	r0, [pc, #4]	; (80136b4 <__sfp_lock_release+0x8>)
 80136ae:	f000 b8c0 	b.w	8013832 <__retarget_lock_release_recursive>
 80136b2:	bf00      	nop
 80136b4:	20008f4d 	.word	0x20008f4d

080136b8 <__sinit_lock_acquire>:
 80136b8:	4801      	ldr	r0, [pc, #4]	; (80136c0 <__sinit_lock_acquire+0x8>)
 80136ba:	f000 b8b9 	b.w	8013830 <__retarget_lock_acquire_recursive>
 80136be:	bf00      	nop
 80136c0:	20008f4e 	.word	0x20008f4e

080136c4 <__sinit_lock_release>:
 80136c4:	4801      	ldr	r0, [pc, #4]	; (80136cc <__sinit_lock_release+0x8>)
 80136c6:	f000 b8b4 	b.w	8013832 <__retarget_lock_release_recursive>
 80136ca:	bf00      	nop
 80136cc:	20008f4e 	.word	0x20008f4e

080136d0 <__sinit>:
 80136d0:	b510      	push	{r4, lr}
 80136d2:	4604      	mov	r4, r0
 80136d4:	f7ff fff0 	bl	80136b8 <__sinit_lock_acquire>
 80136d8:	69a3      	ldr	r3, [r4, #24]
 80136da:	b11b      	cbz	r3, 80136e4 <__sinit+0x14>
 80136dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136e0:	f7ff bff0 	b.w	80136c4 <__sinit_lock_release>
 80136e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80136e8:	6523      	str	r3, [r4, #80]	; 0x50
 80136ea:	4b13      	ldr	r3, [pc, #76]	; (8013738 <__sinit+0x68>)
 80136ec:	4a13      	ldr	r2, [pc, #76]	; (801373c <__sinit+0x6c>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80136f2:	42a3      	cmp	r3, r4
 80136f4:	bf04      	itt	eq
 80136f6:	2301      	moveq	r3, #1
 80136f8:	61a3      	streq	r3, [r4, #24]
 80136fa:	4620      	mov	r0, r4
 80136fc:	f000 f820 	bl	8013740 <__sfp>
 8013700:	6060      	str	r0, [r4, #4]
 8013702:	4620      	mov	r0, r4
 8013704:	f000 f81c 	bl	8013740 <__sfp>
 8013708:	60a0      	str	r0, [r4, #8]
 801370a:	4620      	mov	r0, r4
 801370c:	f000 f818 	bl	8013740 <__sfp>
 8013710:	2200      	movs	r2, #0
 8013712:	60e0      	str	r0, [r4, #12]
 8013714:	2104      	movs	r1, #4
 8013716:	6860      	ldr	r0, [r4, #4]
 8013718:	f7ff ff82 	bl	8013620 <std>
 801371c:	68a0      	ldr	r0, [r4, #8]
 801371e:	2201      	movs	r2, #1
 8013720:	2109      	movs	r1, #9
 8013722:	f7ff ff7d 	bl	8013620 <std>
 8013726:	68e0      	ldr	r0, [r4, #12]
 8013728:	2202      	movs	r2, #2
 801372a:	2112      	movs	r1, #18
 801372c:	f7ff ff78 	bl	8013620 <std>
 8013730:	2301      	movs	r3, #1
 8013732:	61a3      	str	r3, [r4, #24]
 8013734:	e7d2      	b.n	80136dc <__sinit+0xc>
 8013736:	bf00      	nop
 8013738:	08017420 	.word	0x08017420
 801373c:	08013669 	.word	0x08013669

08013740 <__sfp>:
 8013740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013742:	4607      	mov	r7, r0
 8013744:	f7ff ffac 	bl	80136a0 <__sfp_lock_acquire>
 8013748:	4b1e      	ldr	r3, [pc, #120]	; (80137c4 <__sfp+0x84>)
 801374a:	681e      	ldr	r6, [r3, #0]
 801374c:	69b3      	ldr	r3, [r6, #24]
 801374e:	b913      	cbnz	r3, 8013756 <__sfp+0x16>
 8013750:	4630      	mov	r0, r6
 8013752:	f7ff ffbd 	bl	80136d0 <__sinit>
 8013756:	3648      	adds	r6, #72	; 0x48
 8013758:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801375c:	3b01      	subs	r3, #1
 801375e:	d503      	bpl.n	8013768 <__sfp+0x28>
 8013760:	6833      	ldr	r3, [r6, #0]
 8013762:	b30b      	cbz	r3, 80137a8 <__sfp+0x68>
 8013764:	6836      	ldr	r6, [r6, #0]
 8013766:	e7f7      	b.n	8013758 <__sfp+0x18>
 8013768:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801376c:	b9d5      	cbnz	r5, 80137a4 <__sfp+0x64>
 801376e:	4b16      	ldr	r3, [pc, #88]	; (80137c8 <__sfp+0x88>)
 8013770:	60e3      	str	r3, [r4, #12]
 8013772:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013776:	6665      	str	r5, [r4, #100]	; 0x64
 8013778:	f000 f859 	bl	801382e <__retarget_lock_init_recursive>
 801377c:	f7ff ff96 	bl	80136ac <__sfp_lock_release>
 8013780:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013784:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013788:	6025      	str	r5, [r4, #0]
 801378a:	61a5      	str	r5, [r4, #24]
 801378c:	2208      	movs	r2, #8
 801378e:	4629      	mov	r1, r5
 8013790:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013794:	f7ff fea8 	bl	80134e8 <memset>
 8013798:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801379c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80137a0:	4620      	mov	r0, r4
 80137a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137a4:	3468      	adds	r4, #104	; 0x68
 80137a6:	e7d9      	b.n	801375c <__sfp+0x1c>
 80137a8:	2104      	movs	r1, #4
 80137aa:	4638      	mov	r0, r7
 80137ac:	f7ff ff62 	bl	8013674 <__sfmoreglue>
 80137b0:	4604      	mov	r4, r0
 80137b2:	6030      	str	r0, [r6, #0]
 80137b4:	2800      	cmp	r0, #0
 80137b6:	d1d5      	bne.n	8013764 <__sfp+0x24>
 80137b8:	f7ff ff78 	bl	80136ac <__sfp_lock_release>
 80137bc:	230c      	movs	r3, #12
 80137be:	603b      	str	r3, [r7, #0]
 80137c0:	e7ee      	b.n	80137a0 <__sfp+0x60>
 80137c2:	bf00      	nop
 80137c4:	08017420 	.word	0x08017420
 80137c8:	ffff0001 	.word	0xffff0001

080137cc <fiprintf>:
 80137cc:	b40e      	push	{r1, r2, r3}
 80137ce:	b503      	push	{r0, r1, lr}
 80137d0:	4601      	mov	r1, r0
 80137d2:	ab03      	add	r3, sp, #12
 80137d4:	4805      	ldr	r0, [pc, #20]	; (80137ec <fiprintf+0x20>)
 80137d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80137da:	6800      	ldr	r0, [r0, #0]
 80137dc:	9301      	str	r3, [sp, #4]
 80137de:	f000 fa97 	bl	8013d10 <_vfiprintf_r>
 80137e2:	b002      	add	sp, #8
 80137e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80137e8:	b003      	add	sp, #12
 80137ea:	4770      	bx	lr
 80137ec:	20000028 	.word	0x20000028

080137f0 <_fwalk_reent>:
 80137f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137f4:	4606      	mov	r6, r0
 80137f6:	4688      	mov	r8, r1
 80137f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80137fc:	2700      	movs	r7, #0
 80137fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013802:	f1b9 0901 	subs.w	r9, r9, #1
 8013806:	d505      	bpl.n	8013814 <_fwalk_reent+0x24>
 8013808:	6824      	ldr	r4, [r4, #0]
 801380a:	2c00      	cmp	r4, #0
 801380c:	d1f7      	bne.n	80137fe <_fwalk_reent+0xe>
 801380e:	4638      	mov	r0, r7
 8013810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013814:	89ab      	ldrh	r3, [r5, #12]
 8013816:	2b01      	cmp	r3, #1
 8013818:	d907      	bls.n	801382a <_fwalk_reent+0x3a>
 801381a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801381e:	3301      	adds	r3, #1
 8013820:	d003      	beq.n	801382a <_fwalk_reent+0x3a>
 8013822:	4629      	mov	r1, r5
 8013824:	4630      	mov	r0, r6
 8013826:	47c0      	blx	r8
 8013828:	4307      	orrs	r7, r0
 801382a:	3568      	adds	r5, #104	; 0x68
 801382c:	e7e9      	b.n	8013802 <_fwalk_reent+0x12>

0801382e <__retarget_lock_init_recursive>:
 801382e:	4770      	bx	lr

08013830 <__retarget_lock_acquire_recursive>:
 8013830:	4770      	bx	lr

08013832 <__retarget_lock_release_recursive>:
 8013832:	4770      	bx	lr

08013834 <malloc>:
 8013834:	4b02      	ldr	r3, [pc, #8]	; (8013840 <malloc+0xc>)
 8013836:	4601      	mov	r1, r0
 8013838:	6818      	ldr	r0, [r3, #0]
 801383a:	f000 b86f 	b.w	801391c <_malloc_r>
 801383e:	bf00      	nop
 8013840:	20000028 	.word	0x20000028

08013844 <_free_r>:
 8013844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013846:	2900      	cmp	r1, #0
 8013848:	d044      	beq.n	80138d4 <_free_r+0x90>
 801384a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801384e:	9001      	str	r0, [sp, #4]
 8013850:	2b00      	cmp	r3, #0
 8013852:	f1a1 0404 	sub.w	r4, r1, #4
 8013856:	bfb8      	it	lt
 8013858:	18e4      	addlt	r4, r4, r3
 801385a:	f000 ff95 	bl	8014788 <__malloc_lock>
 801385e:	4a1e      	ldr	r2, [pc, #120]	; (80138d8 <_free_r+0x94>)
 8013860:	9801      	ldr	r0, [sp, #4]
 8013862:	6813      	ldr	r3, [r2, #0]
 8013864:	b933      	cbnz	r3, 8013874 <_free_r+0x30>
 8013866:	6063      	str	r3, [r4, #4]
 8013868:	6014      	str	r4, [r2, #0]
 801386a:	b003      	add	sp, #12
 801386c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013870:	f000 bf90 	b.w	8014794 <__malloc_unlock>
 8013874:	42a3      	cmp	r3, r4
 8013876:	d908      	bls.n	801388a <_free_r+0x46>
 8013878:	6825      	ldr	r5, [r4, #0]
 801387a:	1961      	adds	r1, r4, r5
 801387c:	428b      	cmp	r3, r1
 801387e:	bf01      	itttt	eq
 8013880:	6819      	ldreq	r1, [r3, #0]
 8013882:	685b      	ldreq	r3, [r3, #4]
 8013884:	1949      	addeq	r1, r1, r5
 8013886:	6021      	streq	r1, [r4, #0]
 8013888:	e7ed      	b.n	8013866 <_free_r+0x22>
 801388a:	461a      	mov	r2, r3
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	b10b      	cbz	r3, 8013894 <_free_r+0x50>
 8013890:	42a3      	cmp	r3, r4
 8013892:	d9fa      	bls.n	801388a <_free_r+0x46>
 8013894:	6811      	ldr	r1, [r2, #0]
 8013896:	1855      	adds	r5, r2, r1
 8013898:	42a5      	cmp	r5, r4
 801389a:	d10b      	bne.n	80138b4 <_free_r+0x70>
 801389c:	6824      	ldr	r4, [r4, #0]
 801389e:	4421      	add	r1, r4
 80138a0:	1854      	adds	r4, r2, r1
 80138a2:	42a3      	cmp	r3, r4
 80138a4:	6011      	str	r1, [r2, #0]
 80138a6:	d1e0      	bne.n	801386a <_free_r+0x26>
 80138a8:	681c      	ldr	r4, [r3, #0]
 80138aa:	685b      	ldr	r3, [r3, #4]
 80138ac:	6053      	str	r3, [r2, #4]
 80138ae:	4421      	add	r1, r4
 80138b0:	6011      	str	r1, [r2, #0]
 80138b2:	e7da      	b.n	801386a <_free_r+0x26>
 80138b4:	d902      	bls.n	80138bc <_free_r+0x78>
 80138b6:	230c      	movs	r3, #12
 80138b8:	6003      	str	r3, [r0, #0]
 80138ba:	e7d6      	b.n	801386a <_free_r+0x26>
 80138bc:	6825      	ldr	r5, [r4, #0]
 80138be:	1961      	adds	r1, r4, r5
 80138c0:	428b      	cmp	r3, r1
 80138c2:	bf04      	itt	eq
 80138c4:	6819      	ldreq	r1, [r3, #0]
 80138c6:	685b      	ldreq	r3, [r3, #4]
 80138c8:	6063      	str	r3, [r4, #4]
 80138ca:	bf04      	itt	eq
 80138cc:	1949      	addeq	r1, r1, r5
 80138ce:	6021      	streq	r1, [r4, #0]
 80138d0:	6054      	str	r4, [r2, #4]
 80138d2:	e7ca      	b.n	801386a <_free_r+0x26>
 80138d4:	b003      	add	sp, #12
 80138d6:	bd30      	pop	{r4, r5, pc}
 80138d8:	20008f50 	.word	0x20008f50

080138dc <sbrk_aligned>:
 80138dc:	b570      	push	{r4, r5, r6, lr}
 80138de:	4e0e      	ldr	r6, [pc, #56]	; (8013918 <sbrk_aligned+0x3c>)
 80138e0:	460c      	mov	r4, r1
 80138e2:	6831      	ldr	r1, [r6, #0]
 80138e4:	4605      	mov	r5, r0
 80138e6:	b911      	cbnz	r1, 80138ee <sbrk_aligned+0x12>
 80138e8:	f000 fcd6 	bl	8014298 <_sbrk_r>
 80138ec:	6030      	str	r0, [r6, #0]
 80138ee:	4621      	mov	r1, r4
 80138f0:	4628      	mov	r0, r5
 80138f2:	f000 fcd1 	bl	8014298 <_sbrk_r>
 80138f6:	1c43      	adds	r3, r0, #1
 80138f8:	d00a      	beq.n	8013910 <sbrk_aligned+0x34>
 80138fa:	1cc4      	adds	r4, r0, #3
 80138fc:	f024 0403 	bic.w	r4, r4, #3
 8013900:	42a0      	cmp	r0, r4
 8013902:	d007      	beq.n	8013914 <sbrk_aligned+0x38>
 8013904:	1a21      	subs	r1, r4, r0
 8013906:	4628      	mov	r0, r5
 8013908:	f000 fcc6 	bl	8014298 <_sbrk_r>
 801390c:	3001      	adds	r0, #1
 801390e:	d101      	bne.n	8013914 <sbrk_aligned+0x38>
 8013910:	f04f 34ff 	mov.w	r4, #4294967295
 8013914:	4620      	mov	r0, r4
 8013916:	bd70      	pop	{r4, r5, r6, pc}
 8013918:	20008f54 	.word	0x20008f54

0801391c <_malloc_r>:
 801391c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013920:	1ccd      	adds	r5, r1, #3
 8013922:	f025 0503 	bic.w	r5, r5, #3
 8013926:	3508      	adds	r5, #8
 8013928:	2d0c      	cmp	r5, #12
 801392a:	bf38      	it	cc
 801392c:	250c      	movcc	r5, #12
 801392e:	2d00      	cmp	r5, #0
 8013930:	4607      	mov	r7, r0
 8013932:	db01      	blt.n	8013938 <_malloc_r+0x1c>
 8013934:	42a9      	cmp	r1, r5
 8013936:	d905      	bls.n	8013944 <_malloc_r+0x28>
 8013938:	230c      	movs	r3, #12
 801393a:	603b      	str	r3, [r7, #0]
 801393c:	2600      	movs	r6, #0
 801393e:	4630      	mov	r0, r6
 8013940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013944:	4e2e      	ldr	r6, [pc, #184]	; (8013a00 <_malloc_r+0xe4>)
 8013946:	f000 ff1f 	bl	8014788 <__malloc_lock>
 801394a:	6833      	ldr	r3, [r6, #0]
 801394c:	461c      	mov	r4, r3
 801394e:	bb34      	cbnz	r4, 801399e <_malloc_r+0x82>
 8013950:	4629      	mov	r1, r5
 8013952:	4638      	mov	r0, r7
 8013954:	f7ff ffc2 	bl	80138dc <sbrk_aligned>
 8013958:	1c43      	adds	r3, r0, #1
 801395a:	4604      	mov	r4, r0
 801395c:	d14d      	bne.n	80139fa <_malloc_r+0xde>
 801395e:	6834      	ldr	r4, [r6, #0]
 8013960:	4626      	mov	r6, r4
 8013962:	2e00      	cmp	r6, #0
 8013964:	d140      	bne.n	80139e8 <_malloc_r+0xcc>
 8013966:	6823      	ldr	r3, [r4, #0]
 8013968:	4631      	mov	r1, r6
 801396a:	4638      	mov	r0, r7
 801396c:	eb04 0803 	add.w	r8, r4, r3
 8013970:	f000 fc92 	bl	8014298 <_sbrk_r>
 8013974:	4580      	cmp	r8, r0
 8013976:	d13a      	bne.n	80139ee <_malloc_r+0xd2>
 8013978:	6821      	ldr	r1, [r4, #0]
 801397a:	3503      	adds	r5, #3
 801397c:	1a6d      	subs	r5, r5, r1
 801397e:	f025 0503 	bic.w	r5, r5, #3
 8013982:	3508      	adds	r5, #8
 8013984:	2d0c      	cmp	r5, #12
 8013986:	bf38      	it	cc
 8013988:	250c      	movcc	r5, #12
 801398a:	4629      	mov	r1, r5
 801398c:	4638      	mov	r0, r7
 801398e:	f7ff ffa5 	bl	80138dc <sbrk_aligned>
 8013992:	3001      	adds	r0, #1
 8013994:	d02b      	beq.n	80139ee <_malloc_r+0xd2>
 8013996:	6823      	ldr	r3, [r4, #0]
 8013998:	442b      	add	r3, r5
 801399a:	6023      	str	r3, [r4, #0]
 801399c:	e00e      	b.n	80139bc <_malloc_r+0xa0>
 801399e:	6822      	ldr	r2, [r4, #0]
 80139a0:	1b52      	subs	r2, r2, r5
 80139a2:	d41e      	bmi.n	80139e2 <_malloc_r+0xc6>
 80139a4:	2a0b      	cmp	r2, #11
 80139a6:	d916      	bls.n	80139d6 <_malloc_r+0xba>
 80139a8:	1961      	adds	r1, r4, r5
 80139aa:	42a3      	cmp	r3, r4
 80139ac:	6025      	str	r5, [r4, #0]
 80139ae:	bf18      	it	ne
 80139b0:	6059      	strne	r1, [r3, #4]
 80139b2:	6863      	ldr	r3, [r4, #4]
 80139b4:	bf08      	it	eq
 80139b6:	6031      	streq	r1, [r6, #0]
 80139b8:	5162      	str	r2, [r4, r5]
 80139ba:	604b      	str	r3, [r1, #4]
 80139bc:	4638      	mov	r0, r7
 80139be:	f104 060b 	add.w	r6, r4, #11
 80139c2:	f000 fee7 	bl	8014794 <__malloc_unlock>
 80139c6:	f026 0607 	bic.w	r6, r6, #7
 80139ca:	1d23      	adds	r3, r4, #4
 80139cc:	1af2      	subs	r2, r6, r3
 80139ce:	d0b6      	beq.n	801393e <_malloc_r+0x22>
 80139d0:	1b9b      	subs	r3, r3, r6
 80139d2:	50a3      	str	r3, [r4, r2]
 80139d4:	e7b3      	b.n	801393e <_malloc_r+0x22>
 80139d6:	6862      	ldr	r2, [r4, #4]
 80139d8:	42a3      	cmp	r3, r4
 80139da:	bf0c      	ite	eq
 80139dc:	6032      	streq	r2, [r6, #0]
 80139de:	605a      	strne	r2, [r3, #4]
 80139e0:	e7ec      	b.n	80139bc <_malloc_r+0xa0>
 80139e2:	4623      	mov	r3, r4
 80139e4:	6864      	ldr	r4, [r4, #4]
 80139e6:	e7b2      	b.n	801394e <_malloc_r+0x32>
 80139e8:	4634      	mov	r4, r6
 80139ea:	6876      	ldr	r6, [r6, #4]
 80139ec:	e7b9      	b.n	8013962 <_malloc_r+0x46>
 80139ee:	230c      	movs	r3, #12
 80139f0:	603b      	str	r3, [r7, #0]
 80139f2:	4638      	mov	r0, r7
 80139f4:	f000 fece 	bl	8014794 <__malloc_unlock>
 80139f8:	e7a1      	b.n	801393e <_malloc_r+0x22>
 80139fa:	6025      	str	r5, [r4, #0]
 80139fc:	e7de      	b.n	80139bc <_malloc_r+0xa0>
 80139fe:	bf00      	nop
 8013a00:	20008f50 	.word	0x20008f50

08013a04 <__ssputs_r>:
 8013a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a08:	688e      	ldr	r6, [r1, #8]
 8013a0a:	429e      	cmp	r6, r3
 8013a0c:	4682      	mov	sl, r0
 8013a0e:	460c      	mov	r4, r1
 8013a10:	4690      	mov	r8, r2
 8013a12:	461f      	mov	r7, r3
 8013a14:	d838      	bhi.n	8013a88 <__ssputs_r+0x84>
 8013a16:	898a      	ldrh	r2, [r1, #12]
 8013a18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013a1c:	d032      	beq.n	8013a84 <__ssputs_r+0x80>
 8013a1e:	6825      	ldr	r5, [r4, #0]
 8013a20:	6909      	ldr	r1, [r1, #16]
 8013a22:	eba5 0901 	sub.w	r9, r5, r1
 8013a26:	6965      	ldr	r5, [r4, #20]
 8013a28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a30:	3301      	adds	r3, #1
 8013a32:	444b      	add	r3, r9
 8013a34:	106d      	asrs	r5, r5, #1
 8013a36:	429d      	cmp	r5, r3
 8013a38:	bf38      	it	cc
 8013a3a:	461d      	movcc	r5, r3
 8013a3c:	0553      	lsls	r3, r2, #21
 8013a3e:	d531      	bpl.n	8013aa4 <__ssputs_r+0xa0>
 8013a40:	4629      	mov	r1, r5
 8013a42:	f7ff ff6b 	bl	801391c <_malloc_r>
 8013a46:	4606      	mov	r6, r0
 8013a48:	b950      	cbnz	r0, 8013a60 <__ssputs_r+0x5c>
 8013a4a:	230c      	movs	r3, #12
 8013a4c:	f8ca 3000 	str.w	r3, [sl]
 8013a50:	89a3      	ldrh	r3, [r4, #12]
 8013a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a56:	81a3      	strh	r3, [r4, #12]
 8013a58:	f04f 30ff 	mov.w	r0, #4294967295
 8013a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a60:	6921      	ldr	r1, [r4, #16]
 8013a62:	464a      	mov	r2, r9
 8013a64:	f7ff fd18 	bl	8013498 <memcpy>
 8013a68:	89a3      	ldrh	r3, [r4, #12]
 8013a6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a72:	81a3      	strh	r3, [r4, #12]
 8013a74:	6126      	str	r6, [r4, #16]
 8013a76:	6165      	str	r5, [r4, #20]
 8013a78:	444e      	add	r6, r9
 8013a7a:	eba5 0509 	sub.w	r5, r5, r9
 8013a7e:	6026      	str	r6, [r4, #0]
 8013a80:	60a5      	str	r5, [r4, #8]
 8013a82:	463e      	mov	r6, r7
 8013a84:	42be      	cmp	r6, r7
 8013a86:	d900      	bls.n	8013a8a <__ssputs_r+0x86>
 8013a88:	463e      	mov	r6, r7
 8013a8a:	6820      	ldr	r0, [r4, #0]
 8013a8c:	4632      	mov	r2, r6
 8013a8e:	4641      	mov	r1, r8
 8013a90:	f7ff fd10 	bl	80134b4 <memmove>
 8013a94:	68a3      	ldr	r3, [r4, #8]
 8013a96:	1b9b      	subs	r3, r3, r6
 8013a98:	60a3      	str	r3, [r4, #8]
 8013a9a:	6823      	ldr	r3, [r4, #0]
 8013a9c:	4433      	add	r3, r6
 8013a9e:	6023      	str	r3, [r4, #0]
 8013aa0:	2000      	movs	r0, #0
 8013aa2:	e7db      	b.n	8013a5c <__ssputs_r+0x58>
 8013aa4:	462a      	mov	r2, r5
 8013aa6:	f000 fe7b 	bl	80147a0 <_realloc_r>
 8013aaa:	4606      	mov	r6, r0
 8013aac:	2800      	cmp	r0, #0
 8013aae:	d1e1      	bne.n	8013a74 <__ssputs_r+0x70>
 8013ab0:	6921      	ldr	r1, [r4, #16]
 8013ab2:	4650      	mov	r0, sl
 8013ab4:	f7ff fec6 	bl	8013844 <_free_r>
 8013ab8:	e7c7      	b.n	8013a4a <__ssputs_r+0x46>
	...

08013abc <_svfiprintf_r>:
 8013abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ac0:	4698      	mov	r8, r3
 8013ac2:	898b      	ldrh	r3, [r1, #12]
 8013ac4:	061b      	lsls	r3, r3, #24
 8013ac6:	b09d      	sub	sp, #116	; 0x74
 8013ac8:	4607      	mov	r7, r0
 8013aca:	460d      	mov	r5, r1
 8013acc:	4614      	mov	r4, r2
 8013ace:	d50e      	bpl.n	8013aee <_svfiprintf_r+0x32>
 8013ad0:	690b      	ldr	r3, [r1, #16]
 8013ad2:	b963      	cbnz	r3, 8013aee <_svfiprintf_r+0x32>
 8013ad4:	2140      	movs	r1, #64	; 0x40
 8013ad6:	f7ff ff21 	bl	801391c <_malloc_r>
 8013ada:	6028      	str	r0, [r5, #0]
 8013adc:	6128      	str	r0, [r5, #16]
 8013ade:	b920      	cbnz	r0, 8013aea <_svfiprintf_r+0x2e>
 8013ae0:	230c      	movs	r3, #12
 8013ae2:	603b      	str	r3, [r7, #0]
 8013ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae8:	e0d1      	b.n	8013c8e <_svfiprintf_r+0x1d2>
 8013aea:	2340      	movs	r3, #64	; 0x40
 8013aec:	616b      	str	r3, [r5, #20]
 8013aee:	2300      	movs	r3, #0
 8013af0:	9309      	str	r3, [sp, #36]	; 0x24
 8013af2:	2320      	movs	r3, #32
 8013af4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013af8:	f8cd 800c 	str.w	r8, [sp, #12]
 8013afc:	2330      	movs	r3, #48	; 0x30
 8013afe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013ca8 <_svfiprintf_r+0x1ec>
 8013b02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b06:	f04f 0901 	mov.w	r9, #1
 8013b0a:	4623      	mov	r3, r4
 8013b0c:	469a      	mov	sl, r3
 8013b0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b12:	b10a      	cbz	r2, 8013b18 <_svfiprintf_r+0x5c>
 8013b14:	2a25      	cmp	r2, #37	; 0x25
 8013b16:	d1f9      	bne.n	8013b0c <_svfiprintf_r+0x50>
 8013b18:	ebba 0b04 	subs.w	fp, sl, r4
 8013b1c:	d00b      	beq.n	8013b36 <_svfiprintf_r+0x7a>
 8013b1e:	465b      	mov	r3, fp
 8013b20:	4622      	mov	r2, r4
 8013b22:	4629      	mov	r1, r5
 8013b24:	4638      	mov	r0, r7
 8013b26:	f7ff ff6d 	bl	8013a04 <__ssputs_r>
 8013b2a:	3001      	adds	r0, #1
 8013b2c:	f000 80aa 	beq.w	8013c84 <_svfiprintf_r+0x1c8>
 8013b30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b32:	445a      	add	r2, fp
 8013b34:	9209      	str	r2, [sp, #36]	; 0x24
 8013b36:	f89a 3000 	ldrb.w	r3, [sl]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f000 80a2 	beq.w	8013c84 <_svfiprintf_r+0x1c8>
 8013b40:	2300      	movs	r3, #0
 8013b42:	f04f 32ff 	mov.w	r2, #4294967295
 8013b46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b4a:	f10a 0a01 	add.w	sl, sl, #1
 8013b4e:	9304      	str	r3, [sp, #16]
 8013b50:	9307      	str	r3, [sp, #28]
 8013b52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b56:	931a      	str	r3, [sp, #104]	; 0x68
 8013b58:	4654      	mov	r4, sl
 8013b5a:	2205      	movs	r2, #5
 8013b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b60:	4851      	ldr	r0, [pc, #324]	; (8013ca8 <_svfiprintf_r+0x1ec>)
 8013b62:	f7ec fb45 	bl	80001f0 <memchr>
 8013b66:	9a04      	ldr	r2, [sp, #16]
 8013b68:	b9d8      	cbnz	r0, 8013ba2 <_svfiprintf_r+0xe6>
 8013b6a:	06d0      	lsls	r0, r2, #27
 8013b6c:	bf44      	itt	mi
 8013b6e:	2320      	movmi	r3, #32
 8013b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b74:	0711      	lsls	r1, r2, #28
 8013b76:	bf44      	itt	mi
 8013b78:	232b      	movmi	r3, #43	; 0x2b
 8013b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8013b82:	2b2a      	cmp	r3, #42	; 0x2a
 8013b84:	d015      	beq.n	8013bb2 <_svfiprintf_r+0xf6>
 8013b86:	9a07      	ldr	r2, [sp, #28]
 8013b88:	4654      	mov	r4, sl
 8013b8a:	2000      	movs	r0, #0
 8013b8c:	f04f 0c0a 	mov.w	ip, #10
 8013b90:	4621      	mov	r1, r4
 8013b92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b96:	3b30      	subs	r3, #48	; 0x30
 8013b98:	2b09      	cmp	r3, #9
 8013b9a:	d94e      	bls.n	8013c3a <_svfiprintf_r+0x17e>
 8013b9c:	b1b0      	cbz	r0, 8013bcc <_svfiprintf_r+0x110>
 8013b9e:	9207      	str	r2, [sp, #28]
 8013ba0:	e014      	b.n	8013bcc <_svfiprintf_r+0x110>
 8013ba2:	eba0 0308 	sub.w	r3, r0, r8
 8013ba6:	fa09 f303 	lsl.w	r3, r9, r3
 8013baa:	4313      	orrs	r3, r2
 8013bac:	9304      	str	r3, [sp, #16]
 8013bae:	46a2      	mov	sl, r4
 8013bb0:	e7d2      	b.n	8013b58 <_svfiprintf_r+0x9c>
 8013bb2:	9b03      	ldr	r3, [sp, #12]
 8013bb4:	1d19      	adds	r1, r3, #4
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	9103      	str	r1, [sp, #12]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	bfbb      	ittet	lt
 8013bbe:	425b      	neglt	r3, r3
 8013bc0:	f042 0202 	orrlt.w	r2, r2, #2
 8013bc4:	9307      	strge	r3, [sp, #28]
 8013bc6:	9307      	strlt	r3, [sp, #28]
 8013bc8:	bfb8      	it	lt
 8013bca:	9204      	strlt	r2, [sp, #16]
 8013bcc:	7823      	ldrb	r3, [r4, #0]
 8013bce:	2b2e      	cmp	r3, #46	; 0x2e
 8013bd0:	d10c      	bne.n	8013bec <_svfiprintf_r+0x130>
 8013bd2:	7863      	ldrb	r3, [r4, #1]
 8013bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8013bd6:	d135      	bne.n	8013c44 <_svfiprintf_r+0x188>
 8013bd8:	9b03      	ldr	r3, [sp, #12]
 8013bda:	1d1a      	adds	r2, r3, #4
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	9203      	str	r2, [sp, #12]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	bfb8      	it	lt
 8013be4:	f04f 33ff 	movlt.w	r3, #4294967295
 8013be8:	3402      	adds	r4, #2
 8013bea:	9305      	str	r3, [sp, #20]
 8013bec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013cb8 <_svfiprintf_r+0x1fc>
 8013bf0:	7821      	ldrb	r1, [r4, #0]
 8013bf2:	2203      	movs	r2, #3
 8013bf4:	4650      	mov	r0, sl
 8013bf6:	f7ec fafb 	bl	80001f0 <memchr>
 8013bfa:	b140      	cbz	r0, 8013c0e <_svfiprintf_r+0x152>
 8013bfc:	2340      	movs	r3, #64	; 0x40
 8013bfe:	eba0 000a 	sub.w	r0, r0, sl
 8013c02:	fa03 f000 	lsl.w	r0, r3, r0
 8013c06:	9b04      	ldr	r3, [sp, #16]
 8013c08:	4303      	orrs	r3, r0
 8013c0a:	3401      	adds	r4, #1
 8013c0c:	9304      	str	r3, [sp, #16]
 8013c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c12:	4826      	ldr	r0, [pc, #152]	; (8013cac <_svfiprintf_r+0x1f0>)
 8013c14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c18:	2206      	movs	r2, #6
 8013c1a:	f7ec fae9 	bl	80001f0 <memchr>
 8013c1e:	2800      	cmp	r0, #0
 8013c20:	d038      	beq.n	8013c94 <_svfiprintf_r+0x1d8>
 8013c22:	4b23      	ldr	r3, [pc, #140]	; (8013cb0 <_svfiprintf_r+0x1f4>)
 8013c24:	bb1b      	cbnz	r3, 8013c6e <_svfiprintf_r+0x1b2>
 8013c26:	9b03      	ldr	r3, [sp, #12]
 8013c28:	3307      	adds	r3, #7
 8013c2a:	f023 0307 	bic.w	r3, r3, #7
 8013c2e:	3308      	adds	r3, #8
 8013c30:	9303      	str	r3, [sp, #12]
 8013c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c34:	4433      	add	r3, r6
 8013c36:	9309      	str	r3, [sp, #36]	; 0x24
 8013c38:	e767      	b.n	8013b0a <_svfiprintf_r+0x4e>
 8013c3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c3e:	460c      	mov	r4, r1
 8013c40:	2001      	movs	r0, #1
 8013c42:	e7a5      	b.n	8013b90 <_svfiprintf_r+0xd4>
 8013c44:	2300      	movs	r3, #0
 8013c46:	3401      	adds	r4, #1
 8013c48:	9305      	str	r3, [sp, #20]
 8013c4a:	4619      	mov	r1, r3
 8013c4c:	f04f 0c0a 	mov.w	ip, #10
 8013c50:	4620      	mov	r0, r4
 8013c52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c56:	3a30      	subs	r2, #48	; 0x30
 8013c58:	2a09      	cmp	r2, #9
 8013c5a:	d903      	bls.n	8013c64 <_svfiprintf_r+0x1a8>
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d0c5      	beq.n	8013bec <_svfiprintf_r+0x130>
 8013c60:	9105      	str	r1, [sp, #20]
 8013c62:	e7c3      	b.n	8013bec <_svfiprintf_r+0x130>
 8013c64:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c68:	4604      	mov	r4, r0
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	e7f0      	b.n	8013c50 <_svfiprintf_r+0x194>
 8013c6e:	ab03      	add	r3, sp, #12
 8013c70:	9300      	str	r3, [sp, #0]
 8013c72:	462a      	mov	r2, r5
 8013c74:	4b0f      	ldr	r3, [pc, #60]	; (8013cb4 <_svfiprintf_r+0x1f8>)
 8013c76:	a904      	add	r1, sp, #16
 8013c78:	4638      	mov	r0, r7
 8013c7a:	f3af 8000 	nop.w
 8013c7e:	1c42      	adds	r2, r0, #1
 8013c80:	4606      	mov	r6, r0
 8013c82:	d1d6      	bne.n	8013c32 <_svfiprintf_r+0x176>
 8013c84:	89ab      	ldrh	r3, [r5, #12]
 8013c86:	065b      	lsls	r3, r3, #25
 8013c88:	f53f af2c 	bmi.w	8013ae4 <_svfiprintf_r+0x28>
 8013c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c8e:	b01d      	add	sp, #116	; 0x74
 8013c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c94:	ab03      	add	r3, sp, #12
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	462a      	mov	r2, r5
 8013c9a:	4b06      	ldr	r3, [pc, #24]	; (8013cb4 <_svfiprintf_r+0x1f8>)
 8013c9c:	a904      	add	r1, sp, #16
 8013c9e:	4638      	mov	r0, r7
 8013ca0:	f000 f9d4 	bl	801404c <_printf_i>
 8013ca4:	e7eb      	b.n	8013c7e <_svfiprintf_r+0x1c2>
 8013ca6:	bf00      	nop
 8013ca8:	08017534 	.word	0x08017534
 8013cac:	0801753e 	.word	0x0801753e
 8013cb0:	00000000 	.word	0x00000000
 8013cb4:	08013a05 	.word	0x08013a05
 8013cb8:	0801753a 	.word	0x0801753a

08013cbc <__sfputc_r>:
 8013cbc:	6893      	ldr	r3, [r2, #8]
 8013cbe:	3b01      	subs	r3, #1
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	b410      	push	{r4}
 8013cc4:	6093      	str	r3, [r2, #8]
 8013cc6:	da08      	bge.n	8013cda <__sfputc_r+0x1e>
 8013cc8:	6994      	ldr	r4, [r2, #24]
 8013cca:	42a3      	cmp	r3, r4
 8013ccc:	db01      	blt.n	8013cd2 <__sfputc_r+0x16>
 8013cce:	290a      	cmp	r1, #10
 8013cd0:	d103      	bne.n	8013cda <__sfputc_r+0x1e>
 8013cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cd6:	f000 bb33 	b.w	8014340 <__swbuf_r>
 8013cda:	6813      	ldr	r3, [r2, #0]
 8013cdc:	1c58      	adds	r0, r3, #1
 8013cde:	6010      	str	r0, [r2, #0]
 8013ce0:	7019      	strb	r1, [r3, #0]
 8013ce2:	4608      	mov	r0, r1
 8013ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ce8:	4770      	bx	lr

08013cea <__sfputs_r>:
 8013cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cec:	4606      	mov	r6, r0
 8013cee:	460f      	mov	r7, r1
 8013cf0:	4614      	mov	r4, r2
 8013cf2:	18d5      	adds	r5, r2, r3
 8013cf4:	42ac      	cmp	r4, r5
 8013cf6:	d101      	bne.n	8013cfc <__sfputs_r+0x12>
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	e007      	b.n	8013d0c <__sfputs_r+0x22>
 8013cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d00:	463a      	mov	r2, r7
 8013d02:	4630      	mov	r0, r6
 8013d04:	f7ff ffda 	bl	8013cbc <__sfputc_r>
 8013d08:	1c43      	adds	r3, r0, #1
 8013d0a:	d1f3      	bne.n	8013cf4 <__sfputs_r+0xa>
 8013d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013d10 <_vfiprintf_r>:
 8013d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d14:	460d      	mov	r5, r1
 8013d16:	b09d      	sub	sp, #116	; 0x74
 8013d18:	4614      	mov	r4, r2
 8013d1a:	4698      	mov	r8, r3
 8013d1c:	4606      	mov	r6, r0
 8013d1e:	b118      	cbz	r0, 8013d28 <_vfiprintf_r+0x18>
 8013d20:	6983      	ldr	r3, [r0, #24]
 8013d22:	b90b      	cbnz	r3, 8013d28 <_vfiprintf_r+0x18>
 8013d24:	f7ff fcd4 	bl	80136d0 <__sinit>
 8013d28:	4b89      	ldr	r3, [pc, #548]	; (8013f50 <_vfiprintf_r+0x240>)
 8013d2a:	429d      	cmp	r5, r3
 8013d2c:	d11b      	bne.n	8013d66 <_vfiprintf_r+0x56>
 8013d2e:	6875      	ldr	r5, [r6, #4]
 8013d30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d32:	07d9      	lsls	r1, r3, #31
 8013d34:	d405      	bmi.n	8013d42 <_vfiprintf_r+0x32>
 8013d36:	89ab      	ldrh	r3, [r5, #12]
 8013d38:	059a      	lsls	r2, r3, #22
 8013d3a:	d402      	bmi.n	8013d42 <_vfiprintf_r+0x32>
 8013d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d3e:	f7ff fd77 	bl	8013830 <__retarget_lock_acquire_recursive>
 8013d42:	89ab      	ldrh	r3, [r5, #12]
 8013d44:	071b      	lsls	r3, r3, #28
 8013d46:	d501      	bpl.n	8013d4c <_vfiprintf_r+0x3c>
 8013d48:	692b      	ldr	r3, [r5, #16]
 8013d4a:	b9eb      	cbnz	r3, 8013d88 <_vfiprintf_r+0x78>
 8013d4c:	4629      	mov	r1, r5
 8013d4e:	4630      	mov	r0, r6
 8013d50:	f000 fb5a 	bl	8014408 <__swsetup_r>
 8013d54:	b1c0      	cbz	r0, 8013d88 <_vfiprintf_r+0x78>
 8013d56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d58:	07dc      	lsls	r4, r3, #31
 8013d5a:	d50e      	bpl.n	8013d7a <_vfiprintf_r+0x6a>
 8013d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d60:	b01d      	add	sp, #116	; 0x74
 8013d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d66:	4b7b      	ldr	r3, [pc, #492]	; (8013f54 <_vfiprintf_r+0x244>)
 8013d68:	429d      	cmp	r5, r3
 8013d6a:	d101      	bne.n	8013d70 <_vfiprintf_r+0x60>
 8013d6c:	68b5      	ldr	r5, [r6, #8]
 8013d6e:	e7df      	b.n	8013d30 <_vfiprintf_r+0x20>
 8013d70:	4b79      	ldr	r3, [pc, #484]	; (8013f58 <_vfiprintf_r+0x248>)
 8013d72:	429d      	cmp	r5, r3
 8013d74:	bf08      	it	eq
 8013d76:	68f5      	ldreq	r5, [r6, #12]
 8013d78:	e7da      	b.n	8013d30 <_vfiprintf_r+0x20>
 8013d7a:	89ab      	ldrh	r3, [r5, #12]
 8013d7c:	0598      	lsls	r0, r3, #22
 8013d7e:	d4ed      	bmi.n	8013d5c <_vfiprintf_r+0x4c>
 8013d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d82:	f7ff fd56 	bl	8013832 <__retarget_lock_release_recursive>
 8013d86:	e7e9      	b.n	8013d5c <_vfiprintf_r+0x4c>
 8013d88:	2300      	movs	r3, #0
 8013d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8013d8c:	2320      	movs	r3, #32
 8013d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d96:	2330      	movs	r3, #48	; 0x30
 8013d98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013f5c <_vfiprintf_r+0x24c>
 8013d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013da0:	f04f 0901 	mov.w	r9, #1
 8013da4:	4623      	mov	r3, r4
 8013da6:	469a      	mov	sl, r3
 8013da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013dac:	b10a      	cbz	r2, 8013db2 <_vfiprintf_r+0xa2>
 8013dae:	2a25      	cmp	r2, #37	; 0x25
 8013db0:	d1f9      	bne.n	8013da6 <_vfiprintf_r+0x96>
 8013db2:	ebba 0b04 	subs.w	fp, sl, r4
 8013db6:	d00b      	beq.n	8013dd0 <_vfiprintf_r+0xc0>
 8013db8:	465b      	mov	r3, fp
 8013dba:	4622      	mov	r2, r4
 8013dbc:	4629      	mov	r1, r5
 8013dbe:	4630      	mov	r0, r6
 8013dc0:	f7ff ff93 	bl	8013cea <__sfputs_r>
 8013dc4:	3001      	adds	r0, #1
 8013dc6:	f000 80aa 	beq.w	8013f1e <_vfiprintf_r+0x20e>
 8013dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dcc:	445a      	add	r2, fp
 8013dce:	9209      	str	r2, [sp, #36]	; 0x24
 8013dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	f000 80a2 	beq.w	8013f1e <_vfiprintf_r+0x20e>
 8013dda:	2300      	movs	r3, #0
 8013ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8013de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013de4:	f10a 0a01 	add.w	sl, sl, #1
 8013de8:	9304      	str	r3, [sp, #16]
 8013dea:	9307      	str	r3, [sp, #28]
 8013dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013df0:	931a      	str	r3, [sp, #104]	; 0x68
 8013df2:	4654      	mov	r4, sl
 8013df4:	2205      	movs	r2, #5
 8013df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dfa:	4858      	ldr	r0, [pc, #352]	; (8013f5c <_vfiprintf_r+0x24c>)
 8013dfc:	f7ec f9f8 	bl	80001f0 <memchr>
 8013e00:	9a04      	ldr	r2, [sp, #16]
 8013e02:	b9d8      	cbnz	r0, 8013e3c <_vfiprintf_r+0x12c>
 8013e04:	06d1      	lsls	r1, r2, #27
 8013e06:	bf44      	itt	mi
 8013e08:	2320      	movmi	r3, #32
 8013e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e0e:	0713      	lsls	r3, r2, #28
 8013e10:	bf44      	itt	mi
 8013e12:	232b      	movmi	r3, #43	; 0x2b
 8013e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e18:	f89a 3000 	ldrb.w	r3, [sl]
 8013e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8013e1e:	d015      	beq.n	8013e4c <_vfiprintf_r+0x13c>
 8013e20:	9a07      	ldr	r2, [sp, #28]
 8013e22:	4654      	mov	r4, sl
 8013e24:	2000      	movs	r0, #0
 8013e26:	f04f 0c0a 	mov.w	ip, #10
 8013e2a:	4621      	mov	r1, r4
 8013e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e30:	3b30      	subs	r3, #48	; 0x30
 8013e32:	2b09      	cmp	r3, #9
 8013e34:	d94e      	bls.n	8013ed4 <_vfiprintf_r+0x1c4>
 8013e36:	b1b0      	cbz	r0, 8013e66 <_vfiprintf_r+0x156>
 8013e38:	9207      	str	r2, [sp, #28]
 8013e3a:	e014      	b.n	8013e66 <_vfiprintf_r+0x156>
 8013e3c:	eba0 0308 	sub.w	r3, r0, r8
 8013e40:	fa09 f303 	lsl.w	r3, r9, r3
 8013e44:	4313      	orrs	r3, r2
 8013e46:	9304      	str	r3, [sp, #16]
 8013e48:	46a2      	mov	sl, r4
 8013e4a:	e7d2      	b.n	8013df2 <_vfiprintf_r+0xe2>
 8013e4c:	9b03      	ldr	r3, [sp, #12]
 8013e4e:	1d19      	adds	r1, r3, #4
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	9103      	str	r1, [sp, #12]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	bfbb      	ittet	lt
 8013e58:	425b      	neglt	r3, r3
 8013e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8013e5e:	9307      	strge	r3, [sp, #28]
 8013e60:	9307      	strlt	r3, [sp, #28]
 8013e62:	bfb8      	it	lt
 8013e64:	9204      	strlt	r2, [sp, #16]
 8013e66:	7823      	ldrb	r3, [r4, #0]
 8013e68:	2b2e      	cmp	r3, #46	; 0x2e
 8013e6a:	d10c      	bne.n	8013e86 <_vfiprintf_r+0x176>
 8013e6c:	7863      	ldrb	r3, [r4, #1]
 8013e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8013e70:	d135      	bne.n	8013ede <_vfiprintf_r+0x1ce>
 8013e72:	9b03      	ldr	r3, [sp, #12]
 8013e74:	1d1a      	adds	r2, r3, #4
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	9203      	str	r2, [sp, #12]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	bfb8      	it	lt
 8013e7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e82:	3402      	adds	r4, #2
 8013e84:	9305      	str	r3, [sp, #20]
 8013e86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013f6c <_vfiprintf_r+0x25c>
 8013e8a:	7821      	ldrb	r1, [r4, #0]
 8013e8c:	2203      	movs	r2, #3
 8013e8e:	4650      	mov	r0, sl
 8013e90:	f7ec f9ae 	bl	80001f0 <memchr>
 8013e94:	b140      	cbz	r0, 8013ea8 <_vfiprintf_r+0x198>
 8013e96:	2340      	movs	r3, #64	; 0x40
 8013e98:	eba0 000a 	sub.w	r0, r0, sl
 8013e9c:	fa03 f000 	lsl.w	r0, r3, r0
 8013ea0:	9b04      	ldr	r3, [sp, #16]
 8013ea2:	4303      	orrs	r3, r0
 8013ea4:	3401      	adds	r4, #1
 8013ea6:	9304      	str	r3, [sp, #16]
 8013ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013eac:	482c      	ldr	r0, [pc, #176]	; (8013f60 <_vfiprintf_r+0x250>)
 8013eae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013eb2:	2206      	movs	r2, #6
 8013eb4:	f7ec f99c 	bl	80001f0 <memchr>
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	d03f      	beq.n	8013f3c <_vfiprintf_r+0x22c>
 8013ebc:	4b29      	ldr	r3, [pc, #164]	; (8013f64 <_vfiprintf_r+0x254>)
 8013ebe:	bb1b      	cbnz	r3, 8013f08 <_vfiprintf_r+0x1f8>
 8013ec0:	9b03      	ldr	r3, [sp, #12]
 8013ec2:	3307      	adds	r3, #7
 8013ec4:	f023 0307 	bic.w	r3, r3, #7
 8013ec8:	3308      	adds	r3, #8
 8013eca:	9303      	str	r3, [sp, #12]
 8013ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ece:	443b      	add	r3, r7
 8013ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ed2:	e767      	b.n	8013da4 <_vfiprintf_r+0x94>
 8013ed4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ed8:	460c      	mov	r4, r1
 8013eda:	2001      	movs	r0, #1
 8013edc:	e7a5      	b.n	8013e2a <_vfiprintf_r+0x11a>
 8013ede:	2300      	movs	r3, #0
 8013ee0:	3401      	adds	r4, #1
 8013ee2:	9305      	str	r3, [sp, #20]
 8013ee4:	4619      	mov	r1, r3
 8013ee6:	f04f 0c0a 	mov.w	ip, #10
 8013eea:	4620      	mov	r0, r4
 8013eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ef0:	3a30      	subs	r2, #48	; 0x30
 8013ef2:	2a09      	cmp	r2, #9
 8013ef4:	d903      	bls.n	8013efe <_vfiprintf_r+0x1ee>
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d0c5      	beq.n	8013e86 <_vfiprintf_r+0x176>
 8013efa:	9105      	str	r1, [sp, #20]
 8013efc:	e7c3      	b.n	8013e86 <_vfiprintf_r+0x176>
 8013efe:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f02:	4604      	mov	r4, r0
 8013f04:	2301      	movs	r3, #1
 8013f06:	e7f0      	b.n	8013eea <_vfiprintf_r+0x1da>
 8013f08:	ab03      	add	r3, sp, #12
 8013f0a:	9300      	str	r3, [sp, #0]
 8013f0c:	462a      	mov	r2, r5
 8013f0e:	4b16      	ldr	r3, [pc, #88]	; (8013f68 <_vfiprintf_r+0x258>)
 8013f10:	a904      	add	r1, sp, #16
 8013f12:	4630      	mov	r0, r6
 8013f14:	f3af 8000 	nop.w
 8013f18:	4607      	mov	r7, r0
 8013f1a:	1c78      	adds	r0, r7, #1
 8013f1c:	d1d6      	bne.n	8013ecc <_vfiprintf_r+0x1bc>
 8013f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f20:	07d9      	lsls	r1, r3, #31
 8013f22:	d405      	bmi.n	8013f30 <_vfiprintf_r+0x220>
 8013f24:	89ab      	ldrh	r3, [r5, #12]
 8013f26:	059a      	lsls	r2, r3, #22
 8013f28:	d402      	bmi.n	8013f30 <_vfiprintf_r+0x220>
 8013f2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f2c:	f7ff fc81 	bl	8013832 <__retarget_lock_release_recursive>
 8013f30:	89ab      	ldrh	r3, [r5, #12]
 8013f32:	065b      	lsls	r3, r3, #25
 8013f34:	f53f af12 	bmi.w	8013d5c <_vfiprintf_r+0x4c>
 8013f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f3a:	e711      	b.n	8013d60 <_vfiprintf_r+0x50>
 8013f3c:	ab03      	add	r3, sp, #12
 8013f3e:	9300      	str	r3, [sp, #0]
 8013f40:	462a      	mov	r2, r5
 8013f42:	4b09      	ldr	r3, [pc, #36]	; (8013f68 <_vfiprintf_r+0x258>)
 8013f44:	a904      	add	r1, sp, #16
 8013f46:	4630      	mov	r0, r6
 8013f48:	f000 f880 	bl	801404c <_printf_i>
 8013f4c:	e7e4      	b.n	8013f18 <_vfiprintf_r+0x208>
 8013f4e:	bf00      	nop
 8013f50:	080174f4 	.word	0x080174f4
 8013f54:	08017514 	.word	0x08017514
 8013f58:	080174d4 	.word	0x080174d4
 8013f5c:	08017534 	.word	0x08017534
 8013f60:	0801753e 	.word	0x0801753e
 8013f64:	00000000 	.word	0x00000000
 8013f68:	08013ceb 	.word	0x08013ceb
 8013f6c:	0801753a 	.word	0x0801753a

08013f70 <_printf_common>:
 8013f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f74:	4616      	mov	r6, r2
 8013f76:	4699      	mov	r9, r3
 8013f78:	688a      	ldr	r2, [r1, #8]
 8013f7a:	690b      	ldr	r3, [r1, #16]
 8013f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f80:	4293      	cmp	r3, r2
 8013f82:	bfb8      	it	lt
 8013f84:	4613      	movlt	r3, r2
 8013f86:	6033      	str	r3, [r6, #0]
 8013f88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f8c:	4607      	mov	r7, r0
 8013f8e:	460c      	mov	r4, r1
 8013f90:	b10a      	cbz	r2, 8013f96 <_printf_common+0x26>
 8013f92:	3301      	adds	r3, #1
 8013f94:	6033      	str	r3, [r6, #0]
 8013f96:	6823      	ldr	r3, [r4, #0]
 8013f98:	0699      	lsls	r1, r3, #26
 8013f9a:	bf42      	ittt	mi
 8013f9c:	6833      	ldrmi	r3, [r6, #0]
 8013f9e:	3302      	addmi	r3, #2
 8013fa0:	6033      	strmi	r3, [r6, #0]
 8013fa2:	6825      	ldr	r5, [r4, #0]
 8013fa4:	f015 0506 	ands.w	r5, r5, #6
 8013fa8:	d106      	bne.n	8013fb8 <_printf_common+0x48>
 8013faa:	f104 0a19 	add.w	sl, r4, #25
 8013fae:	68e3      	ldr	r3, [r4, #12]
 8013fb0:	6832      	ldr	r2, [r6, #0]
 8013fb2:	1a9b      	subs	r3, r3, r2
 8013fb4:	42ab      	cmp	r3, r5
 8013fb6:	dc26      	bgt.n	8014006 <_printf_common+0x96>
 8013fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013fbc:	1e13      	subs	r3, r2, #0
 8013fbe:	6822      	ldr	r2, [r4, #0]
 8013fc0:	bf18      	it	ne
 8013fc2:	2301      	movne	r3, #1
 8013fc4:	0692      	lsls	r2, r2, #26
 8013fc6:	d42b      	bmi.n	8014020 <_printf_common+0xb0>
 8013fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013fcc:	4649      	mov	r1, r9
 8013fce:	4638      	mov	r0, r7
 8013fd0:	47c0      	blx	r8
 8013fd2:	3001      	adds	r0, #1
 8013fd4:	d01e      	beq.n	8014014 <_printf_common+0xa4>
 8013fd6:	6823      	ldr	r3, [r4, #0]
 8013fd8:	68e5      	ldr	r5, [r4, #12]
 8013fda:	6832      	ldr	r2, [r6, #0]
 8013fdc:	f003 0306 	and.w	r3, r3, #6
 8013fe0:	2b04      	cmp	r3, #4
 8013fe2:	bf08      	it	eq
 8013fe4:	1aad      	subeq	r5, r5, r2
 8013fe6:	68a3      	ldr	r3, [r4, #8]
 8013fe8:	6922      	ldr	r2, [r4, #16]
 8013fea:	bf0c      	ite	eq
 8013fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013ff0:	2500      	movne	r5, #0
 8013ff2:	4293      	cmp	r3, r2
 8013ff4:	bfc4      	itt	gt
 8013ff6:	1a9b      	subgt	r3, r3, r2
 8013ff8:	18ed      	addgt	r5, r5, r3
 8013ffa:	2600      	movs	r6, #0
 8013ffc:	341a      	adds	r4, #26
 8013ffe:	42b5      	cmp	r5, r6
 8014000:	d11a      	bne.n	8014038 <_printf_common+0xc8>
 8014002:	2000      	movs	r0, #0
 8014004:	e008      	b.n	8014018 <_printf_common+0xa8>
 8014006:	2301      	movs	r3, #1
 8014008:	4652      	mov	r2, sl
 801400a:	4649      	mov	r1, r9
 801400c:	4638      	mov	r0, r7
 801400e:	47c0      	blx	r8
 8014010:	3001      	adds	r0, #1
 8014012:	d103      	bne.n	801401c <_printf_common+0xac>
 8014014:	f04f 30ff 	mov.w	r0, #4294967295
 8014018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801401c:	3501      	adds	r5, #1
 801401e:	e7c6      	b.n	8013fae <_printf_common+0x3e>
 8014020:	18e1      	adds	r1, r4, r3
 8014022:	1c5a      	adds	r2, r3, #1
 8014024:	2030      	movs	r0, #48	; 0x30
 8014026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801402a:	4422      	add	r2, r4
 801402c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014034:	3302      	adds	r3, #2
 8014036:	e7c7      	b.n	8013fc8 <_printf_common+0x58>
 8014038:	2301      	movs	r3, #1
 801403a:	4622      	mov	r2, r4
 801403c:	4649      	mov	r1, r9
 801403e:	4638      	mov	r0, r7
 8014040:	47c0      	blx	r8
 8014042:	3001      	adds	r0, #1
 8014044:	d0e6      	beq.n	8014014 <_printf_common+0xa4>
 8014046:	3601      	adds	r6, #1
 8014048:	e7d9      	b.n	8013ffe <_printf_common+0x8e>
	...

0801404c <_printf_i>:
 801404c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014050:	7e0f      	ldrb	r7, [r1, #24]
 8014052:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014054:	2f78      	cmp	r7, #120	; 0x78
 8014056:	4691      	mov	r9, r2
 8014058:	4680      	mov	r8, r0
 801405a:	460c      	mov	r4, r1
 801405c:	469a      	mov	sl, r3
 801405e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014062:	d807      	bhi.n	8014074 <_printf_i+0x28>
 8014064:	2f62      	cmp	r7, #98	; 0x62
 8014066:	d80a      	bhi.n	801407e <_printf_i+0x32>
 8014068:	2f00      	cmp	r7, #0
 801406a:	f000 80d8 	beq.w	801421e <_printf_i+0x1d2>
 801406e:	2f58      	cmp	r7, #88	; 0x58
 8014070:	f000 80a3 	beq.w	80141ba <_printf_i+0x16e>
 8014074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801407c:	e03a      	b.n	80140f4 <_printf_i+0xa8>
 801407e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014082:	2b15      	cmp	r3, #21
 8014084:	d8f6      	bhi.n	8014074 <_printf_i+0x28>
 8014086:	a101      	add	r1, pc, #4	; (adr r1, 801408c <_printf_i+0x40>)
 8014088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801408c:	080140e5 	.word	0x080140e5
 8014090:	080140f9 	.word	0x080140f9
 8014094:	08014075 	.word	0x08014075
 8014098:	08014075 	.word	0x08014075
 801409c:	08014075 	.word	0x08014075
 80140a0:	08014075 	.word	0x08014075
 80140a4:	080140f9 	.word	0x080140f9
 80140a8:	08014075 	.word	0x08014075
 80140ac:	08014075 	.word	0x08014075
 80140b0:	08014075 	.word	0x08014075
 80140b4:	08014075 	.word	0x08014075
 80140b8:	08014205 	.word	0x08014205
 80140bc:	08014129 	.word	0x08014129
 80140c0:	080141e7 	.word	0x080141e7
 80140c4:	08014075 	.word	0x08014075
 80140c8:	08014075 	.word	0x08014075
 80140cc:	08014227 	.word	0x08014227
 80140d0:	08014075 	.word	0x08014075
 80140d4:	08014129 	.word	0x08014129
 80140d8:	08014075 	.word	0x08014075
 80140dc:	08014075 	.word	0x08014075
 80140e0:	080141ef 	.word	0x080141ef
 80140e4:	682b      	ldr	r3, [r5, #0]
 80140e6:	1d1a      	adds	r2, r3, #4
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	602a      	str	r2, [r5, #0]
 80140ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80140f4:	2301      	movs	r3, #1
 80140f6:	e0a3      	b.n	8014240 <_printf_i+0x1f4>
 80140f8:	6820      	ldr	r0, [r4, #0]
 80140fa:	6829      	ldr	r1, [r5, #0]
 80140fc:	0606      	lsls	r6, r0, #24
 80140fe:	f101 0304 	add.w	r3, r1, #4
 8014102:	d50a      	bpl.n	801411a <_printf_i+0xce>
 8014104:	680e      	ldr	r6, [r1, #0]
 8014106:	602b      	str	r3, [r5, #0]
 8014108:	2e00      	cmp	r6, #0
 801410a:	da03      	bge.n	8014114 <_printf_i+0xc8>
 801410c:	232d      	movs	r3, #45	; 0x2d
 801410e:	4276      	negs	r6, r6
 8014110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014114:	485e      	ldr	r0, [pc, #376]	; (8014290 <_printf_i+0x244>)
 8014116:	230a      	movs	r3, #10
 8014118:	e019      	b.n	801414e <_printf_i+0x102>
 801411a:	680e      	ldr	r6, [r1, #0]
 801411c:	602b      	str	r3, [r5, #0]
 801411e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014122:	bf18      	it	ne
 8014124:	b236      	sxthne	r6, r6
 8014126:	e7ef      	b.n	8014108 <_printf_i+0xbc>
 8014128:	682b      	ldr	r3, [r5, #0]
 801412a:	6820      	ldr	r0, [r4, #0]
 801412c:	1d19      	adds	r1, r3, #4
 801412e:	6029      	str	r1, [r5, #0]
 8014130:	0601      	lsls	r1, r0, #24
 8014132:	d501      	bpl.n	8014138 <_printf_i+0xec>
 8014134:	681e      	ldr	r6, [r3, #0]
 8014136:	e002      	b.n	801413e <_printf_i+0xf2>
 8014138:	0646      	lsls	r6, r0, #25
 801413a:	d5fb      	bpl.n	8014134 <_printf_i+0xe8>
 801413c:	881e      	ldrh	r6, [r3, #0]
 801413e:	4854      	ldr	r0, [pc, #336]	; (8014290 <_printf_i+0x244>)
 8014140:	2f6f      	cmp	r7, #111	; 0x6f
 8014142:	bf0c      	ite	eq
 8014144:	2308      	moveq	r3, #8
 8014146:	230a      	movne	r3, #10
 8014148:	2100      	movs	r1, #0
 801414a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801414e:	6865      	ldr	r5, [r4, #4]
 8014150:	60a5      	str	r5, [r4, #8]
 8014152:	2d00      	cmp	r5, #0
 8014154:	bfa2      	ittt	ge
 8014156:	6821      	ldrge	r1, [r4, #0]
 8014158:	f021 0104 	bicge.w	r1, r1, #4
 801415c:	6021      	strge	r1, [r4, #0]
 801415e:	b90e      	cbnz	r6, 8014164 <_printf_i+0x118>
 8014160:	2d00      	cmp	r5, #0
 8014162:	d04d      	beq.n	8014200 <_printf_i+0x1b4>
 8014164:	4615      	mov	r5, r2
 8014166:	fbb6 f1f3 	udiv	r1, r6, r3
 801416a:	fb03 6711 	mls	r7, r3, r1, r6
 801416e:	5dc7      	ldrb	r7, [r0, r7]
 8014170:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014174:	4637      	mov	r7, r6
 8014176:	42bb      	cmp	r3, r7
 8014178:	460e      	mov	r6, r1
 801417a:	d9f4      	bls.n	8014166 <_printf_i+0x11a>
 801417c:	2b08      	cmp	r3, #8
 801417e:	d10b      	bne.n	8014198 <_printf_i+0x14c>
 8014180:	6823      	ldr	r3, [r4, #0]
 8014182:	07de      	lsls	r6, r3, #31
 8014184:	d508      	bpl.n	8014198 <_printf_i+0x14c>
 8014186:	6923      	ldr	r3, [r4, #16]
 8014188:	6861      	ldr	r1, [r4, #4]
 801418a:	4299      	cmp	r1, r3
 801418c:	bfde      	ittt	le
 801418e:	2330      	movle	r3, #48	; 0x30
 8014190:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014194:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014198:	1b52      	subs	r2, r2, r5
 801419a:	6122      	str	r2, [r4, #16]
 801419c:	f8cd a000 	str.w	sl, [sp]
 80141a0:	464b      	mov	r3, r9
 80141a2:	aa03      	add	r2, sp, #12
 80141a4:	4621      	mov	r1, r4
 80141a6:	4640      	mov	r0, r8
 80141a8:	f7ff fee2 	bl	8013f70 <_printf_common>
 80141ac:	3001      	adds	r0, #1
 80141ae:	d14c      	bne.n	801424a <_printf_i+0x1fe>
 80141b0:	f04f 30ff 	mov.w	r0, #4294967295
 80141b4:	b004      	add	sp, #16
 80141b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141ba:	4835      	ldr	r0, [pc, #212]	; (8014290 <_printf_i+0x244>)
 80141bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80141c0:	6829      	ldr	r1, [r5, #0]
 80141c2:	6823      	ldr	r3, [r4, #0]
 80141c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80141c8:	6029      	str	r1, [r5, #0]
 80141ca:	061d      	lsls	r5, r3, #24
 80141cc:	d514      	bpl.n	80141f8 <_printf_i+0x1ac>
 80141ce:	07df      	lsls	r7, r3, #31
 80141d0:	bf44      	itt	mi
 80141d2:	f043 0320 	orrmi.w	r3, r3, #32
 80141d6:	6023      	strmi	r3, [r4, #0]
 80141d8:	b91e      	cbnz	r6, 80141e2 <_printf_i+0x196>
 80141da:	6823      	ldr	r3, [r4, #0]
 80141dc:	f023 0320 	bic.w	r3, r3, #32
 80141e0:	6023      	str	r3, [r4, #0]
 80141e2:	2310      	movs	r3, #16
 80141e4:	e7b0      	b.n	8014148 <_printf_i+0xfc>
 80141e6:	6823      	ldr	r3, [r4, #0]
 80141e8:	f043 0320 	orr.w	r3, r3, #32
 80141ec:	6023      	str	r3, [r4, #0]
 80141ee:	2378      	movs	r3, #120	; 0x78
 80141f0:	4828      	ldr	r0, [pc, #160]	; (8014294 <_printf_i+0x248>)
 80141f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80141f6:	e7e3      	b.n	80141c0 <_printf_i+0x174>
 80141f8:	0659      	lsls	r1, r3, #25
 80141fa:	bf48      	it	mi
 80141fc:	b2b6      	uxthmi	r6, r6
 80141fe:	e7e6      	b.n	80141ce <_printf_i+0x182>
 8014200:	4615      	mov	r5, r2
 8014202:	e7bb      	b.n	801417c <_printf_i+0x130>
 8014204:	682b      	ldr	r3, [r5, #0]
 8014206:	6826      	ldr	r6, [r4, #0]
 8014208:	6961      	ldr	r1, [r4, #20]
 801420a:	1d18      	adds	r0, r3, #4
 801420c:	6028      	str	r0, [r5, #0]
 801420e:	0635      	lsls	r5, r6, #24
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	d501      	bpl.n	8014218 <_printf_i+0x1cc>
 8014214:	6019      	str	r1, [r3, #0]
 8014216:	e002      	b.n	801421e <_printf_i+0x1d2>
 8014218:	0670      	lsls	r0, r6, #25
 801421a:	d5fb      	bpl.n	8014214 <_printf_i+0x1c8>
 801421c:	8019      	strh	r1, [r3, #0]
 801421e:	2300      	movs	r3, #0
 8014220:	6123      	str	r3, [r4, #16]
 8014222:	4615      	mov	r5, r2
 8014224:	e7ba      	b.n	801419c <_printf_i+0x150>
 8014226:	682b      	ldr	r3, [r5, #0]
 8014228:	1d1a      	adds	r2, r3, #4
 801422a:	602a      	str	r2, [r5, #0]
 801422c:	681d      	ldr	r5, [r3, #0]
 801422e:	6862      	ldr	r2, [r4, #4]
 8014230:	2100      	movs	r1, #0
 8014232:	4628      	mov	r0, r5
 8014234:	f7eb ffdc 	bl	80001f0 <memchr>
 8014238:	b108      	cbz	r0, 801423e <_printf_i+0x1f2>
 801423a:	1b40      	subs	r0, r0, r5
 801423c:	6060      	str	r0, [r4, #4]
 801423e:	6863      	ldr	r3, [r4, #4]
 8014240:	6123      	str	r3, [r4, #16]
 8014242:	2300      	movs	r3, #0
 8014244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014248:	e7a8      	b.n	801419c <_printf_i+0x150>
 801424a:	6923      	ldr	r3, [r4, #16]
 801424c:	462a      	mov	r2, r5
 801424e:	4649      	mov	r1, r9
 8014250:	4640      	mov	r0, r8
 8014252:	47d0      	blx	sl
 8014254:	3001      	adds	r0, #1
 8014256:	d0ab      	beq.n	80141b0 <_printf_i+0x164>
 8014258:	6823      	ldr	r3, [r4, #0]
 801425a:	079b      	lsls	r3, r3, #30
 801425c:	d413      	bmi.n	8014286 <_printf_i+0x23a>
 801425e:	68e0      	ldr	r0, [r4, #12]
 8014260:	9b03      	ldr	r3, [sp, #12]
 8014262:	4298      	cmp	r0, r3
 8014264:	bfb8      	it	lt
 8014266:	4618      	movlt	r0, r3
 8014268:	e7a4      	b.n	80141b4 <_printf_i+0x168>
 801426a:	2301      	movs	r3, #1
 801426c:	4632      	mov	r2, r6
 801426e:	4649      	mov	r1, r9
 8014270:	4640      	mov	r0, r8
 8014272:	47d0      	blx	sl
 8014274:	3001      	adds	r0, #1
 8014276:	d09b      	beq.n	80141b0 <_printf_i+0x164>
 8014278:	3501      	adds	r5, #1
 801427a:	68e3      	ldr	r3, [r4, #12]
 801427c:	9903      	ldr	r1, [sp, #12]
 801427e:	1a5b      	subs	r3, r3, r1
 8014280:	42ab      	cmp	r3, r5
 8014282:	dcf2      	bgt.n	801426a <_printf_i+0x21e>
 8014284:	e7eb      	b.n	801425e <_printf_i+0x212>
 8014286:	2500      	movs	r5, #0
 8014288:	f104 0619 	add.w	r6, r4, #25
 801428c:	e7f5      	b.n	801427a <_printf_i+0x22e>
 801428e:	bf00      	nop
 8014290:	08017545 	.word	0x08017545
 8014294:	08017556 	.word	0x08017556

08014298 <_sbrk_r>:
 8014298:	b538      	push	{r3, r4, r5, lr}
 801429a:	4d06      	ldr	r5, [pc, #24]	; (80142b4 <_sbrk_r+0x1c>)
 801429c:	2300      	movs	r3, #0
 801429e:	4604      	mov	r4, r0
 80142a0:	4608      	mov	r0, r1
 80142a2:	602b      	str	r3, [r5, #0]
 80142a4:	f7ed f9dc 	bl	8001660 <_sbrk>
 80142a8:	1c43      	adds	r3, r0, #1
 80142aa:	d102      	bne.n	80142b2 <_sbrk_r+0x1a>
 80142ac:	682b      	ldr	r3, [r5, #0]
 80142ae:	b103      	cbz	r3, 80142b2 <_sbrk_r+0x1a>
 80142b0:	6023      	str	r3, [r4, #0]
 80142b2:	bd38      	pop	{r3, r4, r5, pc}
 80142b4:	20008f48 	.word	0x20008f48

080142b8 <__sread>:
 80142b8:	b510      	push	{r4, lr}
 80142ba:	460c      	mov	r4, r1
 80142bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142c0:	f000 fa9e 	bl	8014800 <_read_r>
 80142c4:	2800      	cmp	r0, #0
 80142c6:	bfab      	itete	ge
 80142c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80142ca:	89a3      	ldrhlt	r3, [r4, #12]
 80142cc:	181b      	addge	r3, r3, r0
 80142ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80142d2:	bfac      	ite	ge
 80142d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80142d6:	81a3      	strhlt	r3, [r4, #12]
 80142d8:	bd10      	pop	{r4, pc}

080142da <__swrite>:
 80142da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142de:	461f      	mov	r7, r3
 80142e0:	898b      	ldrh	r3, [r1, #12]
 80142e2:	05db      	lsls	r3, r3, #23
 80142e4:	4605      	mov	r5, r0
 80142e6:	460c      	mov	r4, r1
 80142e8:	4616      	mov	r6, r2
 80142ea:	d505      	bpl.n	80142f8 <__swrite+0x1e>
 80142ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142f0:	2302      	movs	r3, #2
 80142f2:	2200      	movs	r2, #0
 80142f4:	f000 f9d0 	bl	8014698 <_lseek_r>
 80142f8:	89a3      	ldrh	r3, [r4, #12]
 80142fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80142fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014302:	81a3      	strh	r3, [r4, #12]
 8014304:	4632      	mov	r2, r6
 8014306:	463b      	mov	r3, r7
 8014308:	4628      	mov	r0, r5
 801430a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801430e:	f000 b869 	b.w	80143e4 <_write_r>

08014312 <__sseek>:
 8014312:	b510      	push	{r4, lr}
 8014314:	460c      	mov	r4, r1
 8014316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801431a:	f000 f9bd 	bl	8014698 <_lseek_r>
 801431e:	1c43      	adds	r3, r0, #1
 8014320:	89a3      	ldrh	r3, [r4, #12]
 8014322:	bf15      	itete	ne
 8014324:	6560      	strne	r0, [r4, #84]	; 0x54
 8014326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801432a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801432e:	81a3      	strheq	r3, [r4, #12]
 8014330:	bf18      	it	ne
 8014332:	81a3      	strhne	r3, [r4, #12]
 8014334:	bd10      	pop	{r4, pc}

08014336 <__sclose>:
 8014336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801433a:	f000 b8db 	b.w	80144f4 <_close_r>
	...

08014340 <__swbuf_r>:
 8014340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014342:	460e      	mov	r6, r1
 8014344:	4614      	mov	r4, r2
 8014346:	4605      	mov	r5, r0
 8014348:	b118      	cbz	r0, 8014352 <__swbuf_r+0x12>
 801434a:	6983      	ldr	r3, [r0, #24]
 801434c:	b90b      	cbnz	r3, 8014352 <__swbuf_r+0x12>
 801434e:	f7ff f9bf 	bl	80136d0 <__sinit>
 8014352:	4b21      	ldr	r3, [pc, #132]	; (80143d8 <__swbuf_r+0x98>)
 8014354:	429c      	cmp	r4, r3
 8014356:	d12b      	bne.n	80143b0 <__swbuf_r+0x70>
 8014358:	686c      	ldr	r4, [r5, #4]
 801435a:	69a3      	ldr	r3, [r4, #24]
 801435c:	60a3      	str	r3, [r4, #8]
 801435e:	89a3      	ldrh	r3, [r4, #12]
 8014360:	071a      	lsls	r2, r3, #28
 8014362:	d52f      	bpl.n	80143c4 <__swbuf_r+0x84>
 8014364:	6923      	ldr	r3, [r4, #16]
 8014366:	b36b      	cbz	r3, 80143c4 <__swbuf_r+0x84>
 8014368:	6923      	ldr	r3, [r4, #16]
 801436a:	6820      	ldr	r0, [r4, #0]
 801436c:	1ac0      	subs	r0, r0, r3
 801436e:	6963      	ldr	r3, [r4, #20]
 8014370:	b2f6      	uxtb	r6, r6
 8014372:	4283      	cmp	r3, r0
 8014374:	4637      	mov	r7, r6
 8014376:	dc04      	bgt.n	8014382 <__swbuf_r+0x42>
 8014378:	4621      	mov	r1, r4
 801437a:	4628      	mov	r0, r5
 801437c:	f000 f950 	bl	8014620 <_fflush_r>
 8014380:	bb30      	cbnz	r0, 80143d0 <__swbuf_r+0x90>
 8014382:	68a3      	ldr	r3, [r4, #8]
 8014384:	3b01      	subs	r3, #1
 8014386:	60a3      	str	r3, [r4, #8]
 8014388:	6823      	ldr	r3, [r4, #0]
 801438a:	1c5a      	adds	r2, r3, #1
 801438c:	6022      	str	r2, [r4, #0]
 801438e:	701e      	strb	r6, [r3, #0]
 8014390:	6963      	ldr	r3, [r4, #20]
 8014392:	3001      	adds	r0, #1
 8014394:	4283      	cmp	r3, r0
 8014396:	d004      	beq.n	80143a2 <__swbuf_r+0x62>
 8014398:	89a3      	ldrh	r3, [r4, #12]
 801439a:	07db      	lsls	r3, r3, #31
 801439c:	d506      	bpl.n	80143ac <__swbuf_r+0x6c>
 801439e:	2e0a      	cmp	r6, #10
 80143a0:	d104      	bne.n	80143ac <__swbuf_r+0x6c>
 80143a2:	4621      	mov	r1, r4
 80143a4:	4628      	mov	r0, r5
 80143a6:	f000 f93b 	bl	8014620 <_fflush_r>
 80143aa:	b988      	cbnz	r0, 80143d0 <__swbuf_r+0x90>
 80143ac:	4638      	mov	r0, r7
 80143ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143b0:	4b0a      	ldr	r3, [pc, #40]	; (80143dc <__swbuf_r+0x9c>)
 80143b2:	429c      	cmp	r4, r3
 80143b4:	d101      	bne.n	80143ba <__swbuf_r+0x7a>
 80143b6:	68ac      	ldr	r4, [r5, #8]
 80143b8:	e7cf      	b.n	801435a <__swbuf_r+0x1a>
 80143ba:	4b09      	ldr	r3, [pc, #36]	; (80143e0 <__swbuf_r+0xa0>)
 80143bc:	429c      	cmp	r4, r3
 80143be:	bf08      	it	eq
 80143c0:	68ec      	ldreq	r4, [r5, #12]
 80143c2:	e7ca      	b.n	801435a <__swbuf_r+0x1a>
 80143c4:	4621      	mov	r1, r4
 80143c6:	4628      	mov	r0, r5
 80143c8:	f000 f81e 	bl	8014408 <__swsetup_r>
 80143cc:	2800      	cmp	r0, #0
 80143ce:	d0cb      	beq.n	8014368 <__swbuf_r+0x28>
 80143d0:	f04f 37ff 	mov.w	r7, #4294967295
 80143d4:	e7ea      	b.n	80143ac <__swbuf_r+0x6c>
 80143d6:	bf00      	nop
 80143d8:	080174f4 	.word	0x080174f4
 80143dc:	08017514 	.word	0x08017514
 80143e0:	080174d4 	.word	0x080174d4

080143e4 <_write_r>:
 80143e4:	b538      	push	{r3, r4, r5, lr}
 80143e6:	4d07      	ldr	r5, [pc, #28]	; (8014404 <_write_r+0x20>)
 80143e8:	4604      	mov	r4, r0
 80143ea:	4608      	mov	r0, r1
 80143ec:	4611      	mov	r1, r2
 80143ee:	2200      	movs	r2, #0
 80143f0:	602a      	str	r2, [r5, #0]
 80143f2:	461a      	mov	r2, r3
 80143f4:	f7ed f8e3 	bl	80015be <_write>
 80143f8:	1c43      	adds	r3, r0, #1
 80143fa:	d102      	bne.n	8014402 <_write_r+0x1e>
 80143fc:	682b      	ldr	r3, [r5, #0]
 80143fe:	b103      	cbz	r3, 8014402 <_write_r+0x1e>
 8014400:	6023      	str	r3, [r4, #0]
 8014402:	bd38      	pop	{r3, r4, r5, pc}
 8014404:	20008f48 	.word	0x20008f48

08014408 <__swsetup_r>:
 8014408:	4b32      	ldr	r3, [pc, #200]	; (80144d4 <__swsetup_r+0xcc>)
 801440a:	b570      	push	{r4, r5, r6, lr}
 801440c:	681d      	ldr	r5, [r3, #0]
 801440e:	4606      	mov	r6, r0
 8014410:	460c      	mov	r4, r1
 8014412:	b125      	cbz	r5, 801441e <__swsetup_r+0x16>
 8014414:	69ab      	ldr	r3, [r5, #24]
 8014416:	b913      	cbnz	r3, 801441e <__swsetup_r+0x16>
 8014418:	4628      	mov	r0, r5
 801441a:	f7ff f959 	bl	80136d0 <__sinit>
 801441e:	4b2e      	ldr	r3, [pc, #184]	; (80144d8 <__swsetup_r+0xd0>)
 8014420:	429c      	cmp	r4, r3
 8014422:	d10f      	bne.n	8014444 <__swsetup_r+0x3c>
 8014424:	686c      	ldr	r4, [r5, #4]
 8014426:	89a3      	ldrh	r3, [r4, #12]
 8014428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801442c:	0719      	lsls	r1, r3, #28
 801442e:	d42c      	bmi.n	801448a <__swsetup_r+0x82>
 8014430:	06dd      	lsls	r5, r3, #27
 8014432:	d411      	bmi.n	8014458 <__swsetup_r+0x50>
 8014434:	2309      	movs	r3, #9
 8014436:	6033      	str	r3, [r6, #0]
 8014438:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801443c:	81a3      	strh	r3, [r4, #12]
 801443e:	f04f 30ff 	mov.w	r0, #4294967295
 8014442:	e03e      	b.n	80144c2 <__swsetup_r+0xba>
 8014444:	4b25      	ldr	r3, [pc, #148]	; (80144dc <__swsetup_r+0xd4>)
 8014446:	429c      	cmp	r4, r3
 8014448:	d101      	bne.n	801444e <__swsetup_r+0x46>
 801444a:	68ac      	ldr	r4, [r5, #8]
 801444c:	e7eb      	b.n	8014426 <__swsetup_r+0x1e>
 801444e:	4b24      	ldr	r3, [pc, #144]	; (80144e0 <__swsetup_r+0xd8>)
 8014450:	429c      	cmp	r4, r3
 8014452:	bf08      	it	eq
 8014454:	68ec      	ldreq	r4, [r5, #12]
 8014456:	e7e6      	b.n	8014426 <__swsetup_r+0x1e>
 8014458:	0758      	lsls	r0, r3, #29
 801445a:	d512      	bpl.n	8014482 <__swsetup_r+0x7a>
 801445c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801445e:	b141      	cbz	r1, 8014472 <__swsetup_r+0x6a>
 8014460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014464:	4299      	cmp	r1, r3
 8014466:	d002      	beq.n	801446e <__swsetup_r+0x66>
 8014468:	4630      	mov	r0, r6
 801446a:	f7ff f9eb 	bl	8013844 <_free_r>
 801446e:	2300      	movs	r3, #0
 8014470:	6363      	str	r3, [r4, #52]	; 0x34
 8014472:	89a3      	ldrh	r3, [r4, #12]
 8014474:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014478:	81a3      	strh	r3, [r4, #12]
 801447a:	2300      	movs	r3, #0
 801447c:	6063      	str	r3, [r4, #4]
 801447e:	6923      	ldr	r3, [r4, #16]
 8014480:	6023      	str	r3, [r4, #0]
 8014482:	89a3      	ldrh	r3, [r4, #12]
 8014484:	f043 0308 	orr.w	r3, r3, #8
 8014488:	81a3      	strh	r3, [r4, #12]
 801448a:	6923      	ldr	r3, [r4, #16]
 801448c:	b94b      	cbnz	r3, 80144a2 <__swsetup_r+0x9a>
 801448e:	89a3      	ldrh	r3, [r4, #12]
 8014490:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014498:	d003      	beq.n	80144a2 <__swsetup_r+0x9a>
 801449a:	4621      	mov	r1, r4
 801449c:	4630      	mov	r0, r6
 801449e:	f000 f933 	bl	8014708 <__smakebuf_r>
 80144a2:	89a0      	ldrh	r0, [r4, #12]
 80144a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80144a8:	f010 0301 	ands.w	r3, r0, #1
 80144ac:	d00a      	beq.n	80144c4 <__swsetup_r+0xbc>
 80144ae:	2300      	movs	r3, #0
 80144b0:	60a3      	str	r3, [r4, #8]
 80144b2:	6963      	ldr	r3, [r4, #20]
 80144b4:	425b      	negs	r3, r3
 80144b6:	61a3      	str	r3, [r4, #24]
 80144b8:	6923      	ldr	r3, [r4, #16]
 80144ba:	b943      	cbnz	r3, 80144ce <__swsetup_r+0xc6>
 80144bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80144c0:	d1ba      	bne.n	8014438 <__swsetup_r+0x30>
 80144c2:	bd70      	pop	{r4, r5, r6, pc}
 80144c4:	0781      	lsls	r1, r0, #30
 80144c6:	bf58      	it	pl
 80144c8:	6963      	ldrpl	r3, [r4, #20]
 80144ca:	60a3      	str	r3, [r4, #8]
 80144cc:	e7f4      	b.n	80144b8 <__swsetup_r+0xb0>
 80144ce:	2000      	movs	r0, #0
 80144d0:	e7f7      	b.n	80144c2 <__swsetup_r+0xba>
 80144d2:	bf00      	nop
 80144d4:	20000028 	.word	0x20000028
 80144d8:	080174f4 	.word	0x080174f4
 80144dc:	08017514 	.word	0x08017514
 80144e0:	080174d4 	.word	0x080174d4

080144e4 <abort>:
 80144e4:	b508      	push	{r3, lr}
 80144e6:	2006      	movs	r0, #6
 80144e8:	f000 f9c4 	bl	8014874 <raise>
 80144ec:	2001      	movs	r0, #1
 80144ee:	f7ed f83f 	bl	8001570 <_exit>
	...

080144f4 <_close_r>:
 80144f4:	b538      	push	{r3, r4, r5, lr}
 80144f6:	4d06      	ldr	r5, [pc, #24]	; (8014510 <_close_r+0x1c>)
 80144f8:	2300      	movs	r3, #0
 80144fa:	4604      	mov	r4, r0
 80144fc:	4608      	mov	r0, r1
 80144fe:	602b      	str	r3, [r5, #0]
 8014500:	f7ed f879 	bl	80015f6 <_close>
 8014504:	1c43      	adds	r3, r0, #1
 8014506:	d102      	bne.n	801450e <_close_r+0x1a>
 8014508:	682b      	ldr	r3, [r5, #0]
 801450a:	b103      	cbz	r3, 801450e <_close_r+0x1a>
 801450c:	6023      	str	r3, [r4, #0]
 801450e:	bd38      	pop	{r3, r4, r5, pc}
 8014510:	20008f48 	.word	0x20008f48

08014514 <__sflush_r>:
 8014514:	898a      	ldrh	r2, [r1, #12]
 8014516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801451a:	4605      	mov	r5, r0
 801451c:	0710      	lsls	r0, r2, #28
 801451e:	460c      	mov	r4, r1
 8014520:	d458      	bmi.n	80145d4 <__sflush_r+0xc0>
 8014522:	684b      	ldr	r3, [r1, #4]
 8014524:	2b00      	cmp	r3, #0
 8014526:	dc05      	bgt.n	8014534 <__sflush_r+0x20>
 8014528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801452a:	2b00      	cmp	r3, #0
 801452c:	dc02      	bgt.n	8014534 <__sflush_r+0x20>
 801452e:	2000      	movs	r0, #0
 8014530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014536:	2e00      	cmp	r6, #0
 8014538:	d0f9      	beq.n	801452e <__sflush_r+0x1a>
 801453a:	2300      	movs	r3, #0
 801453c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014540:	682f      	ldr	r7, [r5, #0]
 8014542:	602b      	str	r3, [r5, #0]
 8014544:	d032      	beq.n	80145ac <__sflush_r+0x98>
 8014546:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014548:	89a3      	ldrh	r3, [r4, #12]
 801454a:	075a      	lsls	r2, r3, #29
 801454c:	d505      	bpl.n	801455a <__sflush_r+0x46>
 801454e:	6863      	ldr	r3, [r4, #4]
 8014550:	1ac0      	subs	r0, r0, r3
 8014552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014554:	b10b      	cbz	r3, 801455a <__sflush_r+0x46>
 8014556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014558:	1ac0      	subs	r0, r0, r3
 801455a:	2300      	movs	r3, #0
 801455c:	4602      	mov	r2, r0
 801455e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014560:	6a21      	ldr	r1, [r4, #32]
 8014562:	4628      	mov	r0, r5
 8014564:	47b0      	blx	r6
 8014566:	1c43      	adds	r3, r0, #1
 8014568:	89a3      	ldrh	r3, [r4, #12]
 801456a:	d106      	bne.n	801457a <__sflush_r+0x66>
 801456c:	6829      	ldr	r1, [r5, #0]
 801456e:	291d      	cmp	r1, #29
 8014570:	d82c      	bhi.n	80145cc <__sflush_r+0xb8>
 8014572:	4a2a      	ldr	r2, [pc, #168]	; (801461c <__sflush_r+0x108>)
 8014574:	40ca      	lsrs	r2, r1
 8014576:	07d6      	lsls	r6, r2, #31
 8014578:	d528      	bpl.n	80145cc <__sflush_r+0xb8>
 801457a:	2200      	movs	r2, #0
 801457c:	6062      	str	r2, [r4, #4]
 801457e:	04d9      	lsls	r1, r3, #19
 8014580:	6922      	ldr	r2, [r4, #16]
 8014582:	6022      	str	r2, [r4, #0]
 8014584:	d504      	bpl.n	8014590 <__sflush_r+0x7c>
 8014586:	1c42      	adds	r2, r0, #1
 8014588:	d101      	bne.n	801458e <__sflush_r+0x7a>
 801458a:	682b      	ldr	r3, [r5, #0]
 801458c:	b903      	cbnz	r3, 8014590 <__sflush_r+0x7c>
 801458e:	6560      	str	r0, [r4, #84]	; 0x54
 8014590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014592:	602f      	str	r7, [r5, #0]
 8014594:	2900      	cmp	r1, #0
 8014596:	d0ca      	beq.n	801452e <__sflush_r+0x1a>
 8014598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801459c:	4299      	cmp	r1, r3
 801459e:	d002      	beq.n	80145a6 <__sflush_r+0x92>
 80145a0:	4628      	mov	r0, r5
 80145a2:	f7ff f94f 	bl	8013844 <_free_r>
 80145a6:	2000      	movs	r0, #0
 80145a8:	6360      	str	r0, [r4, #52]	; 0x34
 80145aa:	e7c1      	b.n	8014530 <__sflush_r+0x1c>
 80145ac:	6a21      	ldr	r1, [r4, #32]
 80145ae:	2301      	movs	r3, #1
 80145b0:	4628      	mov	r0, r5
 80145b2:	47b0      	blx	r6
 80145b4:	1c41      	adds	r1, r0, #1
 80145b6:	d1c7      	bne.n	8014548 <__sflush_r+0x34>
 80145b8:	682b      	ldr	r3, [r5, #0]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d0c4      	beq.n	8014548 <__sflush_r+0x34>
 80145be:	2b1d      	cmp	r3, #29
 80145c0:	d001      	beq.n	80145c6 <__sflush_r+0xb2>
 80145c2:	2b16      	cmp	r3, #22
 80145c4:	d101      	bne.n	80145ca <__sflush_r+0xb6>
 80145c6:	602f      	str	r7, [r5, #0]
 80145c8:	e7b1      	b.n	801452e <__sflush_r+0x1a>
 80145ca:	89a3      	ldrh	r3, [r4, #12]
 80145cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145d0:	81a3      	strh	r3, [r4, #12]
 80145d2:	e7ad      	b.n	8014530 <__sflush_r+0x1c>
 80145d4:	690f      	ldr	r7, [r1, #16]
 80145d6:	2f00      	cmp	r7, #0
 80145d8:	d0a9      	beq.n	801452e <__sflush_r+0x1a>
 80145da:	0793      	lsls	r3, r2, #30
 80145dc:	680e      	ldr	r6, [r1, #0]
 80145de:	bf08      	it	eq
 80145e0:	694b      	ldreq	r3, [r1, #20]
 80145e2:	600f      	str	r7, [r1, #0]
 80145e4:	bf18      	it	ne
 80145e6:	2300      	movne	r3, #0
 80145e8:	eba6 0807 	sub.w	r8, r6, r7
 80145ec:	608b      	str	r3, [r1, #8]
 80145ee:	f1b8 0f00 	cmp.w	r8, #0
 80145f2:	dd9c      	ble.n	801452e <__sflush_r+0x1a>
 80145f4:	6a21      	ldr	r1, [r4, #32]
 80145f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80145f8:	4643      	mov	r3, r8
 80145fa:	463a      	mov	r2, r7
 80145fc:	4628      	mov	r0, r5
 80145fe:	47b0      	blx	r6
 8014600:	2800      	cmp	r0, #0
 8014602:	dc06      	bgt.n	8014612 <__sflush_r+0xfe>
 8014604:	89a3      	ldrh	r3, [r4, #12]
 8014606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801460a:	81a3      	strh	r3, [r4, #12]
 801460c:	f04f 30ff 	mov.w	r0, #4294967295
 8014610:	e78e      	b.n	8014530 <__sflush_r+0x1c>
 8014612:	4407      	add	r7, r0
 8014614:	eba8 0800 	sub.w	r8, r8, r0
 8014618:	e7e9      	b.n	80145ee <__sflush_r+0xda>
 801461a:	bf00      	nop
 801461c:	20400001 	.word	0x20400001

08014620 <_fflush_r>:
 8014620:	b538      	push	{r3, r4, r5, lr}
 8014622:	690b      	ldr	r3, [r1, #16]
 8014624:	4605      	mov	r5, r0
 8014626:	460c      	mov	r4, r1
 8014628:	b913      	cbnz	r3, 8014630 <_fflush_r+0x10>
 801462a:	2500      	movs	r5, #0
 801462c:	4628      	mov	r0, r5
 801462e:	bd38      	pop	{r3, r4, r5, pc}
 8014630:	b118      	cbz	r0, 801463a <_fflush_r+0x1a>
 8014632:	6983      	ldr	r3, [r0, #24]
 8014634:	b90b      	cbnz	r3, 801463a <_fflush_r+0x1a>
 8014636:	f7ff f84b 	bl	80136d0 <__sinit>
 801463a:	4b14      	ldr	r3, [pc, #80]	; (801468c <_fflush_r+0x6c>)
 801463c:	429c      	cmp	r4, r3
 801463e:	d11b      	bne.n	8014678 <_fflush_r+0x58>
 8014640:	686c      	ldr	r4, [r5, #4]
 8014642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d0ef      	beq.n	801462a <_fflush_r+0xa>
 801464a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801464c:	07d0      	lsls	r0, r2, #31
 801464e:	d404      	bmi.n	801465a <_fflush_r+0x3a>
 8014650:	0599      	lsls	r1, r3, #22
 8014652:	d402      	bmi.n	801465a <_fflush_r+0x3a>
 8014654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014656:	f7ff f8eb 	bl	8013830 <__retarget_lock_acquire_recursive>
 801465a:	4628      	mov	r0, r5
 801465c:	4621      	mov	r1, r4
 801465e:	f7ff ff59 	bl	8014514 <__sflush_r>
 8014662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014664:	07da      	lsls	r2, r3, #31
 8014666:	4605      	mov	r5, r0
 8014668:	d4e0      	bmi.n	801462c <_fflush_r+0xc>
 801466a:	89a3      	ldrh	r3, [r4, #12]
 801466c:	059b      	lsls	r3, r3, #22
 801466e:	d4dd      	bmi.n	801462c <_fflush_r+0xc>
 8014670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014672:	f7ff f8de 	bl	8013832 <__retarget_lock_release_recursive>
 8014676:	e7d9      	b.n	801462c <_fflush_r+0xc>
 8014678:	4b05      	ldr	r3, [pc, #20]	; (8014690 <_fflush_r+0x70>)
 801467a:	429c      	cmp	r4, r3
 801467c:	d101      	bne.n	8014682 <_fflush_r+0x62>
 801467e:	68ac      	ldr	r4, [r5, #8]
 8014680:	e7df      	b.n	8014642 <_fflush_r+0x22>
 8014682:	4b04      	ldr	r3, [pc, #16]	; (8014694 <_fflush_r+0x74>)
 8014684:	429c      	cmp	r4, r3
 8014686:	bf08      	it	eq
 8014688:	68ec      	ldreq	r4, [r5, #12]
 801468a:	e7da      	b.n	8014642 <_fflush_r+0x22>
 801468c:	080174f4 	.word	0x080174f4
 8014690:	08017514 	.word	0x08017514
 8014694:	080174d4 	.word	0x080174d4

08014698 <_lseek_r>:
 8014698:	b538      	push	{r3, r4, r5, lr}
 801469a:	4d07      	ldr	r5, [pc, #28]	; (80146b8 <_lseek_r+0x20>)
 801469c:	4604      	mov	r4, r0
 801469e:	4608      	mov	r0, r1
 80146a0:	4611      	mov	r1, r2
 80146a2:	2200      	movs	r2, #0
 80146a4:	602a      	str	r2, [r5, #0]
 80146a6:	461a      	mov	r2, r3
 80146a8:	f7ec ffcc 	bl	8001644 <_lseek>
 80146ac:	1c43      	adds	r3, r0, #1
 80146ae:	d102      	bne.n	80146b6 <_lseek_r+0x1e>
 80146b0:	682b      	ldr	r3, [r5, #0]
 80146b2:	b103      	cbz	r3, 80146b6 <_lseek_r+0x1e>
 80146b4:	6023      	str	r3, [r4, #0]
 80146b6:	bd38      	pop	{r3, r4, r5, pc}
 80146b8:	20008f48 	.word	0x20008f48

080146bc <__swhatbuf_r>:
 80146bc:	b570      	push	{r4, r5, r6, lr}
 80146be:	460e      	mov	r6, r1
 80146c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146c4:	2900      	cmp	r1, #0
 80146c6:	b096      	sub	sp, #88	; 0x58
 80146c8:	4614      	mov	r4, r2
 80146ca:	461d      	mov	r5, r3
 80146cc:	da08      	bge.n	80146e0 <__swhatbuf_r+0x24>
 80146ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80146d2:	2200      	movs	r2, #0
 80146d4:	602a      	str	r2, [r5, #0]
 80146d6:	061a      	lsls	r2, r3, #24
 80146d8:	d410      	bmi.n	80146fc <__swhatbuf_r+0x40>
 80146da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80146de:	e00e      	b.n	80146fe <__swhatbuf_r+0x42>
 80146e0:	466a      	mov	r2, sp
 80146e2:	f000 f8e3 	bl	80148ac <_fstat_r>
 80146e6:	2800      	cmp	r0, #0
 80146e8:	dbf1      	blt.n	80146ce <__swhatbuf_r+0x12>
 80146ea:	9a01      	ldr	r2, [sp, #4]
 80146ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80146f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80146f4:	425a      	negs	r2, r3
 80146f6:	415a      	adcs	r2, r3
 80146f8:	602a      	str	r2, [r5, #0]
 80146fa:	e7ee      	b.n	80146da <__swhatbuf_r+0x1e>
 80146fc:	2340      	movs	r3, #64	; 0x40
 80146fe:	2000      	movs	r0, #0
 8014700:	6023      	str	r3, [r4, #0]
 8014702:	b016      	add	sp, #88	; 0x58
 8014704:	bd70      	pop	{r4, r5, r6, pc}
	...

08014708 <__smakebuf_r>:
 8014708:	898b      	ldrh	r3, [r1, #12]
 801470a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801470c:	079d      	lsls	r5, r3, #30
 801470e:	4606      	mov	r6, r0
 8014710:	460c      	mov	r4, r1
 8014712:	d507      	bpl.n	8014724 <__smakebuf_r+0x1c>
 8014714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014718:	6023      	str	r3, [r4, #0]
 801471a:	6123      	str	r3, [r4, #16]
 801471c:	2301      	movs	r3, #1
 801471e:	6163      	str	r3, [r4, #20]
 8014720:	b002      	add	sp, #8
 8014722:	bd70      	pop	{r4, r5, r6, pc}
 8014724:	ab01      	add	r3, sp, #4
 8014726:	466a      	mov	r2, sp
 8014728:	f7ff ffc8 	bl	80146bc <__swhatbuf_r>
 801472c:	9900      	ldr	r1, [sp, #0]
 801472e:	4605      	mov	r5, r0
 8014730:	4630      	mov	r0, r6
 8014732:	f7ff f8f3 	bl	801391c <_malloc_r>
 8014736:	b948      	cbnz	r0, 801474c <__smakebuf_r+0x44>
 8014738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801473c:	059a      	lsls	r2, r3, #22
 801473e:	d4ef      	bmi.n	8014720 <__smakebuf_r+0x18>
 8014740:	f023 0303 	bic.w	r3, r3, #3
 8014744:	f043 0302 	orr.w	r3, r3, #2
 8014748:	81a3      	strh	r3, [r4, #12]
 801474a:	e7e3      	b.n	8014714 <__smakebuf_r+0xc>
 801474c:	4b0d      	ldr	r3, [pc, #52]	; (8014784 <__smakebuf_r+0x7c>)
 801474e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014750:	89a3      	ldrh	r3, [r4, #12]
 8014752:	6020      	str	r0, [r4, #0]
 8014754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014758:	81a3      	strh	r3, [r4, #12]
 801475a:	9b00      	ldr	r3, [sp, #0]
 801475c:	6163      	str	r3, [r4, #20]
 801475e:	9b01      	ldr	r3, [sp, #4]
 8014760:	6120      	str	r0, [r4, #16]
 8014762:	b15b      	cbz	r3, 801477c <__smakebuf_r+0x74>
 8014764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014768:	4630      	mov	r0, r6
 801476a:	f000 f8b1 	bl	80148d0 <_isatty_r>
 801476e:	b128      	cbz	r0, 801477c <__smakebuf_r+0x74>
 8014770:	89a3      	ldrh	r3, [r4, #12]
 8014772:	f023 0303 	bic.w	r3, r3, #3
 8014776:	f043 0301 	orr.w	r3, r3, #1
 801477a:	81a3      	strh	r3, [r4, #12]
 801477c:	89a0      	ldrh	r0, [r4, #12]
 801477e:	4305      	orrs	r5, r0
 8014780:	81a5      	strh	r5, [r4, #12]
 8014782:	e7cd      	b.n	8014720 <__smakebuf_r+0x18>
 8014784:	08013669 	.word	0x08013669

08014788 <__malloc_lock>:
 8014788:	4801      	ldr	r0, [pc, #4]	; (8014790 <__malloc_lock+0x8>)
 801478a:	f7ff b851 	b.w	8013830 <__retarget_lock_acquire_recursive>
 801478e:	bf00      	nop
 8014790:	20008f4c 	.word	0x20008f4c

08014794 <__malloc_unlock>:
 8014794:	4801      	ldr	r0, [pc, #4]	; (801479c <__malloc_unlock+0x8>)
 8014796:	f7ff b84c 	b.w	8013832 <__retarget_lock_release_recursive>
 801479a:	bf00      	nop
 801479c:	20008f4c 	.word	0x20008f4c

080147a0 <_realloc_r>:
 80147a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147a4:	4680      	mov	r8, r0
 80147a6:	4614      	mov	r4, r2
 80147a8:	460e      	mov	r6, r1
 80147aa:	b921      	cbnz	r1, 80147b6 <_realloc_r+0x16>
 80147ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147b0:	4611      	mov	r1, r2
 80147b2:	f7ff b8b3 	b.w	801391c <_malloc_r>
 80147b6:	b92a      	cbnz	r2, 80147c4 <_realloc_r+0x24>
 80147b8:	f7ff f844 	bl	8013844 <_free_r>
 80147bc:	4625      	mov	r5, r4
 80147be:	4628      	mov	r0, r5
 80147c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147c4:	f000 f894 	bl	80148f0 <_malloc_usable_size_r>
 80147c8:	4284      	cmp	r4, r0
 80147ca:	4607      	mov	r7, r0
 80147cc:	d802      	bhi.n	80147d4 <_realloc_r+0x34>
 80147ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80147d2:	d812      	bhi.n	80147fa <_realloc_r+0x5a>
 80147d4:	4621      	mov	r1, r4
 80147d6:	4640      	mov	r0, r8
 80147d8:	f7ff f8a0 	bl	801391c <_malloc_r>
 80147dc:	4605      	mov	r5, r0
 80147de:	2800      	cmp	r0, #0
 80147e0:	d0ed      	beq.n	80147be <_realloc_r+0x1e>
 80147e2:	42bc      	cmp	r4, r7
 80147e4:	4622      	mov	r2, r4
 80147e6:	4631      	mov	r1, r6
 80147e8:	bf28      	it	cs
 80147ea:	463a      	movcs	r2, r7
 80147ec:	f7fe fe54 	bl	8013498 <memcpy>
 80147f0:	4631      	mov	r1, r6
 80147f2:	4640      	mov	r0, r8
 80147f4:	f7ff f826 	bl	8013844 <_free_r>
 80147f8:	e7e1      	b.n	80147be <_realloc_r+0x1e>
 80147fa:	4635      	mov	r5, r6
 80147fc:	e7df      	b.n	80147be <_realloc_r+0x1e>
	...

08014800 <_read_r>:
 8014800:	b538      	push	{r3, r4, r5, lr}
 8014802:	4d07      	ldr	r5, [pc, #28]	; (8014820 <_read_r+0x20>)
 8014804:	4604      	mov	r4, r0
 8014806:	4608      	mov	r0, r1
 8014808:	4611      	mov	r1, r2
 801480a:	2200      	movs	r2, #0
 801480c:	602a      	str	r2, [r5, #0]
 801480e:	461a      	mov	r2, r3
 8014810:	f7ec feb8 	bl	8001584 <_read>
 8014814:	1c43      	adds	r3, r0, #1
 8014816:	d102      	bne.n	801481e <_read_r+0x1e>
 8014818:	682b      	ldr	r3, [r5, #0]
 801481a:	b103      	cbz	r3, 801481e <_read_r+0x1e>
 801481c:	6023      	str	r3, [r4, #0]
 801481e:	bd38      	pop	{r3, r4, r5, pc}
 8014820:	20008f48 	.word	0x20008f48

08014824 <_raise_r>:
 8014824:	291f      	cmp	r1, #31
 8014826:	b538      	push	{r3, r4, r5, lr}
 8014828:	4604      	mov	r4, r0
 801482a:	460d      	mov	r5, r1
 801482c:	d904      	bls.n	8014838 <_raise_r+0x14>
 801482e:	2316      	movs	r3, #22
 8014830:	6003      	str	r3, [r0, #0]
 8014832:	f04f 30ff 	mov.w	r0, #4294967295
 8014836:	bd38      	pop	{r3, r4, r5, pc}
 8014838:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801483a:	b112      	cbz	r2, 8014842 <_raise_r+0x1e>
 801483c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014840:	b94b      	cbnz	r3, 8014856 <_raise_r+0x32>
 8014842:	4620      	mov	r0, r4
 8014844:	f000 f830 	bl	80148a8 <_getpid_r>
 8014848:	462a      	mov	r2, r5
 801484a:	4601      	mov	r1, r0
 801484c:	4620      	mov	r0, r4
 801484e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014852:	f000 b817 	b.w	8014884 <_kill_r>
 8014856:	2b01      	cmp	r3, #1
 8014858:	d00a      	beq.n	8014870 <_raise_r+0x4c>
 801485a:	1c59      	adds	r1, r3, #1
 801485c:	d103      	bne.n	8014866 <_raise_r+0x42>
 801485e:	2316      	movs	r3, #22
 8014860:	6003      	str	r3, [r0, #0]
 8014862:	2001      	movs	r0, #1
 8014864:	e7e7      	b.n	8014836 <_raise_r+0x12>
 8014866:	2400      	movs	r4, #0
 8014868:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801486c:	4628      	mov	r0, r5
 801486e:	4798      	blx	r3
 8014870:	2000      	movs	r0, #0
 8014872:	e7e0      	b.n	8014836 <_raise_r+0x12>

08014874 <raise>:
 8014874:	4b02      	ldr	r3, [pc, #8]	; (8014880 <raise+0xc>)
 8014876:	4601      	mov	r1, r0
 8014878:	6818      	ldr	r0, [r3, #0]
 801487a:	f7ff bfd3 	b.w	8014824 <_raise_r>
 801487e:	bf00      	nop
 8014880:	20000028 	.word	0x20000028

08014884 <_kill_r>:
 8014884:	b538      	push	{r3, r4, r5, lr}
 8014886:	4d07      	ldr	r5, [pc, #28]	; (80148a4 <_kill_r+0x20>)
 8014888:	2300      	movs	r3, #0
 801488a:	4604      	mov	r4, r0
 801488c:	4608      	mov	r0, r1
 801488e:	4611      	mov	r1, r2
 8014890:	602b      	str	r3, [r5, #0]
 8014892:	f7ec fe5b 	bl	800154c <_kill>
 8014896:	1c43      	adds	r3, r0, #1
 8014898:	d102      	bne.n	80148a0 <_kill_r+0x1c>
 801489a:	682b      	ldr	r3, [r5, #0]
 801489c:	b103      	cbz	r3, 80148a0 <_kill_r+0x1c>
 801489e:	6023      	str	r3, [r4, #0]
 80148a0:	bd38      	pop	{r3, r4, r5, pc}
 80148a2:	bf00      	nop
 80148a4:	20008f48 	.word	0x20008f48

080148a8 <_getpid_r>:
 80148a8:	f7ec be48 	b.w	800153c <_getpid>

080148ac <_fstat_r>:
 80148ac:	b538      	push	{r3, r4, r5, lr}
 80148ae:	4d07      	ldr	r5, [pc, #28]	; (80148cc <_fstat_r+0x20>)
 80148b0:	2300      	movs	r3, #0
 80148b2:	4604      	mov	r4, r0
 80148b4:	4608      	mov	r0, r1
 80148b6:	4611      	mov	r1, r2
 80148b8:	602b      	str	r3, [r5, #0]
 80148ba:	f7ec fea8 	bl	800160e <_fstat>
 80148be:	1c43      	adds	r3, r0, #1
 80148c0:	d102      	bne.n	80148c8 <_fstat_r+0x1c>
 80148c2:	682b      	ldr	r3, [r5, #0]
 80148c4:	b103      	cbz	r3, 80148c8 <_fstat_r+0x1c>
 80148c6:	6023      	str	r3, [r4, #0]
 80148c8:	bd38      	pop	{r3, r4, r5, pc}
 80148ca:	bf00      	nop
 80148cc:	20008f48 	.word	0x20008f48

080148d0 <_isatty_r>:
 80148d0:	b538      	push	{r3, r4, r5, lr}
 80148d2:	4d06      	ldr	r5, [pc, #24]	; (80148ec <_isatty_r+0x1c>)
 80148d4:	2300      	movs	r3, #0
 80148d6:	4604      	mov	r4, r0
 80148d8:	4608      	mov	r0, r1
 80148da:	602b      	str	r3, [r5, #0]
 80148dc:	f7ec fea7 	bl	800162e <_isatty>
 80148e0:	1c43      	adds	r3, r0, #1
 80148e2:	d102      	bne.n	80148ea <_isatty_r+0x1a>
 80148e4:	682b      	ldr	r3, [r5, #0]
 80148e6:	b103      	cbz	r3, 80148ea <_isatty_r+0x1a>
 80148e8:	6023      	str	r3, [r4, #0]
 80148ea:	bd38      	pop	{r3, r4, r5, pc}
 80148ec:	20008f48 	.word	0x20008f48

080148f0 <_malloc_usable_size_r>:
 80148f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148f4:	1f18      	subs	r0, r3, #4
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	bfbc      	itt	lt
 80148fa:	580b      	ldrlt	r3, [r1, r0]
 80148fc:	18c0      	addlt	r0, r0, r3
 80148fe:	4770      	bx	lr

08014900 <_init>:
 8014900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014902:	bf00      	nop
 8014904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014906:	bc08      	pop	{r3}
 8014908:	469e      	mov	lr, r3
 801490a:	4770      	bx	lr

0801490c <_fini>:
 801490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801490e:	bf00      	nop
 8014910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014912:	bc08      	pop	{r3}
 8014914:	469e      	mov	lr, r3
 8014916:	4770      	bx	lr
